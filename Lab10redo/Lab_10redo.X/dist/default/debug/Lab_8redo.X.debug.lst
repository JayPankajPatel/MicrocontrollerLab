

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 14 19:43:22 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  002578                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _wrap
    85  002578  01                 	db	1
    86                           
    87                           ;initializer for _NSLT_Count
    88  002579  30                 	db	48
    89  00257A  30                 	db	48
    90  00257B  00                 	db	0
    91                           
    92                           ;initializer for _NS_Count
    93  00257C  30                 	db	48
    94  00257D  30                 	db	48
    95  00257E  00                 	db	0
    96                           
    97                           ;initializer for _Act_Mode_Txt
    98  00257F  44                 	db	68
    99  002580  00                 	db	0
   100                           
   101                           ;initializer for _FlashingR_Txt
   102  002581  30                 	db	48
   103  002582  00                 	db	0
   104                           
   105                           ;initializer for _FlashingS_Txt
   106  002583  30                 	db	48
   107  002584  00                 	db	0
   108                           
   109                           ;initializer for _SW_EWLT_Txt
   110  002585  30                 	db	48
   111  002586  00                 	db	0
   112                           
   113                           ;initializer for _SW_EWPED_Txt
   114  002587  30                 	db	48
   115  002588  00                 	db	0
   116                           
   117                           ;initializer for _SW_MODE_Txt
   118  002589  44                 	db	68
   119  00258A  00                 	db	0
   120                           
   121                           ;initializer for _SW_NSLT_Txt
   122  00258B  30                 	db	48
   123  00258C  00                 	db	0
   124                           
   125                           ;initializer for _SW_NSPED_Txt
   126  00258D  30                 	db	48
   127  00258E  00                 	db	0
   128                           
   129                           	psect	idataBANK0
   130  002634                     __pidataBANK0:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _EWLT_Count
   134  002634  30                 	db	48
   135  002635  30                 	db	48
   136  002636  00                 	db	0
   137                           
   138                           ;initializer for _EW_Count
   139  002637  30                 	db	48
   140  002638  30                 	db	48
   141  002639  00                 	db	0
   142                           
   143                           ;initializer for _PED_EW_Count
   144  00263A  30                 	db	48
   145  00263B  30                 	db	48
   146  00263C  00                 	db	0
   147                           
   148                           ;initializer for _PED_NS_Count
   149  00263D  30                 	db	48
   150  00263E  30                 	db	48
   151  00263F  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  00FAEC                     __pmediumconst:
   155                           	opt stack 0
   156  00FAEC  00                 	db	0
   157  00FAED                     _font:
   158                           	opt stack 0
   159  00FAED  00                 	db	0
   160  00FAEE  00                 	db	0
   161  00FAEF  00                 	db	0
   162  00FAF0  00                 	db	0
   163  00FAF1  00                 	db	0
   164  00FAF2  00                 	db	0
   165  00FAF3  00                 	db	0
   166  00FAF4  5F                 	db	95
   167  00FAF5  00                 	db	0
   168  00FAF6  00                 	db	0
   169  00FAF7  00                 	db	0
   170  00FAF8  07                 	db	7
   171  00FAF9  00                 	db	0
   172  00FAFA  07                 	db	7
   173  00FAFB  00                 	db	0
   174  00FAFC  14                 	db	20
   175  00FAFD  7F                 	db	127
   176  00FAFE  14                 	db	20
   177  00FAFF  7F                 	db	127
   178  00FB00  14                 	db	20
   179  00FB01  24                 	db	36
   180  00FB02  2A                 	db	42
   181  00FB03  7F                 	db	127
   182  00FB04  2A                 	db	42
   183  00FB05  12                 	db	18
   184  00FB06  23                 	db	35
   185  00FB07  13                 	db	19
   186  00FB08  08                 	db	8
   187  00FB09  64                 	db	100
   188  00FB0A  62                 	db	98
   189  00FB0B  36                 	db	54
   190  00FB0C  49                 	db	73
   191  00FB0D  56                 	db	86
   192  00FB0E  20                 	db	32
   193  00FB0F  50                 	db	80
   194  00FB10  00                 	db	0
   195  00FB11  08                 	db	8
   196  00FB12  07                 	db	7
   197  00FB13  03                 	db	3
   198  00FB14  00                 	db	0
   199  00FB15  00                 	db	0
   200  00FB16  1C                 	db	28
   201  00FB17  22                 	db	34
   202  00FB18  41                 	db	65
   203  00FB19  00                 	db	0
   204  00FB1A  00                 	db	0
   205  00FB1B  41                 	db	65
   206  00FB1C  22                 	db	34
   207  00FB1D  1C                 	db	28
   208  00FB1E  00                 	db	0
   209  00FB1F  2A                 	db	42
   210  00FB20  1C                 	db	28
   211  00FB21  7F                 	db	127
   212  00FB22  1C                 	db	28
   213  00FB23  2A                 	db	42
   214  00FB24  08                 	db	8
   215  00FB25  08                 	db	8
   216  00FB26  3E                 	db	62
   217  00FB27  08                 	db	8
   218  00FB28  08                 	db	8
   219  00FB29  00                 	db	0
   220  00FB2A  80                 	db	128
   221  00FB2B  70                 	db	112
   222  00FB2C  30                 	db	48
   223  00FB2D  00                 	db	0
   224  00FB2E  08                 	db	8
   225  00FB2F  08                 	db	8
   226  00FB30  08                 	db	8
   227  00FB31  08                 	db	8
   228  00FB32  08                 	db	8
   229  00FB33  00                 	db	0
   230  00FB34  00                 	db	0
   231  00FB35  60                 	db	96
   232  00FB36  60                 	db	96
   233  00FB37  00                 	db	0
   234  00FB38  20                 	db	32
   235  00FB39  10                 	db	16
   236  00FB3A  08                 	db	8
   237  00FB3B  04                 	db	4
   238  00FB3C  02                 	db	2
   239  00FB3D  3E                 	db	62
   240  00FB3E  51                 	db	81
   241  00FB3F  49                 	db	73
   242  00FB40  45                 	db	69
   243  00FB41  3E                 	db	62
   244  00FB42  00                 	db	0
   245  00FB43  42                 	db	66
   246  00FB44  7F                 	db	127
   247  00FB45  40                 	db	64
   248  00FB46  00                 	db	0
   249  00FB47  72                 	db	114
   250  00FB48  49                 	db	73
   251  00FB49  49                 	db	73
   252  00FB4A  49                 	db	73
   253  00FB4B  46                 	db	70
   254  00FB4C  21                 	db	33
   255  00FB4D  41                 	db	65
   256  00FB4E  49                 	db	73
   257  00FB4F  4D                 	db	77
   258  00FB50  33                 	db	51
   259  00FB51  18                 	db	24
   260  00FB52  14                 	db	20
   261  00FB53  12                 	db	18
   262  00FB54  7F                 	db	127
   263  00FB55  10                 	db	16
   264  00FB56  27                 	db	39
   265  00FB57  45                 	db	69
   266  00FB58  45                 	db	69
   267  00FB59  45                 	db	69
   268  00FB5A  39                 	db	57
   269  00FB5B  3C                 	db	60
   270  00FB5C  4A                 	db	74
   271  00FB5D  49                 	db	73
   272  00FB5E  49                 	db	73
   273  00FB5F  31                 	db	49
   274  00FB60  41                 	db	65
   275  00FB61  21                 	db	33
   276  00FB62  11                 	db	17
   277  00FB63  09                 	db	9
   278  00FB64  07                 	db	7
   279  00FB65  36                 	db	54
   280  00FB66  49                 	db	73
   281  00FB67  49                 	db	73
   282  00FB68  49                 	db	73
   283  00FB69  36                 	db	54
   284  00FB6A  46                 	db	70
   285  00FB6B  49                 	db	73
   286  00FB6C  49                 	db	73
   287  00FB6D  29                 	db	41
   288  00FB6E  1E                 	db	30
   289  00FB6F  00                 	db	0
   290  00FB70  00                 	db	0
   291  00FB71  14                 	db	20
   292  00FB72  00                 	db	0
   293  00FB73  00                 	db	0
   294  00FB74  00                 	db	0
   295  00FB75  40                 	db	64
   296  00FB76  34                 	db	52
   297  00FB77  00                 	db	0
   298  00FB78  00                 	db	0
   299  00FB79  00                 	db	0
   300  00FB7A  08                 	db	8
   301  00FB7B  14                 	db	20
   302  00FB7C  22                 	db	34
   303  00FB7D  41                 	db	65
   304  00FB7E  14                 	db	20
   305  00FB7F  14                 	db	20
   306  00FB80  14                 	db	20
   307  00FB81  14                 	db	20
   308  00FB82  14                 	db	20
   309  00FB83  00                 	db	0
   310  00FB84  41                 	db	65
   311  00FB85  22                 	db	34
   312  00FB86  14                 	db	20
   313  00FB87  08                 	db	8
   314  00FB88  02                 	db	2
   315  00FB89  01                 	db	1
   316  00FB8A  59                 	db	89
   317  00FB8B  09                 	db	9
   318  00FB8C  06                 	db	6
   319  00FB8D  3E                 	db	62
   320  00FB8E  41                 	db	65
   321  00FB8F  5D                 	db	93
   322  00FB90  59                 	db	89
   323  00FB91  4E                 	db	78
   324  00FB92  7C                 	db	124
   325  00FB93  12                 	db	18
   326  00FB94  11                 	db	17
   327  00FB95  12                 	db	18
   328  00FB96  7C                 	db	124
   329  00FB97  7F                 	db	127
   330  00FB98  49                 	db	73
   331  00FB99  49                 	db	73
   332  00FB9A  49                 	db	73
   333  00FB9B  36                 	db	54
   334  00FB9C  3E                 	db	62
   335  00FB9D  41                 	db	65
   336  00FB9E  41                 	db	65
   337  00FB9F  41                 	db	65
   338  00FBA0  22                 	db	34
   339  00FBA1  7F                 	db	127
   340  00FBA2  41                 	db	65
   341  00FBA3  41                 	db	65
   342  00FBA4  41                 	db	65
   343  00FBA5  3E                 	db	62
   344  00FBA6  7F                 	db	127
   345  00FBA7  49                 	db	73
   346  00FBA8  49                 	db	73
   347  00FBA9  49                 	db	73
   348  00FBAA  41                 	db	65
   349  00FBAB  7F                 	db	127
   350  00FBAC  09                 	db	9
   351  00FBAD  09                 	db	9
   352  00FBAE  09                 	db	9
   353  00FBAF  01                 	db	1
   354  00FBB0  3E                 	db	62
   355  00FBB1  41                 	db	65
   356  00FBB2  41                 	db	65
   357  00FBB3  51                 	db	81
   358  00FBB4  73                 	db	115
   359  00FBB5  7F                 	db	127
   360  00FBB6  08                 	db	8
   361  00FBB7  08                 	db	8
   362  00FBB8  08                 	db	8
   363  00FBB9  7F                 	db	127
   364  00FBBA  00                 	db	0
   365  00FBBB  41                 	db	65
   366  00FBBC  7F                 	db	127
   367  00FBBD  41                 	db	65
   368  00FBBE  00                 	db	0
   369  00FBBF  20                 	db	32
   370  00FBC0  40                 	db	64
   371  00FBC1  41                 	db	65
   372  00FBC2  3F                 	db	63
   373  00FBC3  01                 	db	1
   374  00FBC4  7F                 	db	127
   375  00FBC5  08                 	db	8
   376  00FBC6  14                 	db	20
   377  00FBC7  22                 	db	34
   378  00FBC8  41                 	db	65
   379  00FBC9  7F                 	db	127
   380  00FBCA  40                 	db	64
   381  00FBCB  40                 	db	64
   382  00FBCC  40                 	db	64
   383  00FBCD  40                 	db	64
   384  00FBCE  7F                 	db	127
   385  00FBCF  02                 	db	2
   386  00FBD0  1C                 	db	28
   387  00FBD1  02                 	db	2
   388  00FBD2  7F                 	db	127
   389  00FBD3  7F                 	db	127
   390  00FBD4  04                 	db	4
   391  00FBD5  08                 	db	8
   392  00FBD6  10                 	db	16
   393  00FBD7  7F                 	db	127
   394  00FBD8  3E                 	db	62
   395  00FBD9  41                 	db	65
   396  00FBDA  41                 	db	65
   397  00FBDB  41                 	db	65
   398  00FBDC  3E                 	db	62
   399  00FBDD  7F                 	db	127
   400  00FBDE  09                 	db	9
   401  00FBDF  09                 	db	9
   402  00FBE0  09                 	db	9
   403  00FBE1  06                 	db	6
   404  00FBE2  3E                 	db	62
   405  00FBE3  41                 	db	65
   406  00FBE4  51                 	db	81
   407  00FBE5  21                 	db	33
   408  00FBE6  5E                 	db	94
   409  00FBE7  7F                 	db	127
   410  00FBE8  09                 	db	9
   411  00FBE9  19                 	db	25
   412  00FBEA  29                 	db	41
   413  00FBEB  46                 	db	70
   414  00FBEC                     __end_of_font:
   415                           	opt stack 0
   416  00FBEC                     _font2:
   417                           	opt stack 0
   418  00FBEC  26                 	db	38
   419  00FBED  49                 	db	73
   420  00FBEE  49                 	db	73
   421  00FBEF  49                 	db	73
   422  00FBF0  32                 	db	50
   423  00FBF1  03                 	db	3
   424  00FBF2  01                 	db	1
   425  00FBF3  7F                 	db	127
   426  00FBF4  01                 	db	1
   427  00FBF5  03                 	db	3
   428  00FBF6  3F                 	db	63
   429  00FBF7  40                 	db	64
   430  00FBF8  40                 	db	64
   431  00FBF9  40                 	db	64
   432  00FBFA  3F                 	db	63
   433  00FBFB  1F                 	db	31
   434  00FBFC  20                 	db	32
   435  00FBFD  40                 	db	64
   436  00FBFE  20                 	db	32
   437  00FBFF  1F                 	db	31
   438  00FC00  3F                 	db	63
   439  00FC01  40                 	db	64
   440  00FC02  38                 	db	56
   441  00FC03  40                 	db	64
   442  00FC04  3F                 	db	63
   443  00FC05  63                 	db	99
   444  00FC06  14                 	db	20
   445  00FC07  08                 	db	8
   446  00FC08  14                 	db	20
   447  00FC09  63                 	db	99
   448  00FC0A  03                 	db	3
   449  00FC0B  04                 	db	4
   450  00FC0C  78                 	db	120
   451  00FC0D  04                 	db	4
   452  00FC0E  03                 	db	3
   453  00FC0F  61                 	db	97
   454  00FC10  59                 	db	89
   455  00FC11  49                 	db	73
   456  00FC12  4D                 	db	77
   457  00FC13  43                 	db	67
   458  00FC14  00                 	db	0
   459  00FC15  7F                 	db	127
   460  00FC16  41                 	db	65
   461  00FC17  41                 	db	65
   462  00FC18  41                 	db	65
   463  00FC19  02                 	db	2
   464  00FC1A  04                 	db	4
   465  00FC1B  08                 	db	8
   466  00FC1C  10                 	db	16
   467  00FC1D  20                 	db	32
   468  00FC1E  00                 	db	0
   469  00FC1F  41                 	db	65
   470  00FC20  41                 	db	65
   471  00FC21  41                 	db	65
   472  00FC22  7F                 	db	127
   473  00FC23  04                 	db	4
   474  00FC24  02                 	db	2
   475  00FC25  01                 	db	1
   476  00FC26  02                 	db	2
   477  00FC27  04                 	db	4
   478  00FC28  40                 	db	64
   479  00FC29  40                 	db	64
   480  00FC2A  40                 	db	64
   481  00FC2B  40                 	db	64
   482  00FC2C  40                 	db	64
   483  00FC2D  00                 	db	0
   484  00FC2E  03                 	db	3
   485  00FC2F  07                 	db	7
   486  00FC30  08                 	db	8
   487  00FC31  00                 	db	0
   488  00FC32  20                 	db	32
   489  00FC33  54                 	db	84
   490  00FC34  54                 	db	84
   491  00FC35  78                 	db	120
   492  00FC36  40                 	db	64
   493  00FC37  7F                 	db	127
   494  00FC38  28                 	db	40
   495  00FC39  44                 	db	68
   496  00FC3A  44                 	db	68
   497  00FC3B  38                 	db	56
   498  00FC3C  38                 	db	56
   499  00FC3D  44                 	db	68
   500  00FC3E  44                 	db	68
   501  00FC3F  44                 	db	68
   502  00FC40  28                 	db	40
   503  00FC41  38                 	db	56
   504  00FC42  44                 	db	68
   505  00FC43  44                 	db	68
   506  00FC44  28                 	db	40
   507  00FC45  7F                 	db	127
   508  00FC46  38                 	db	56
   509  00FC47  54                 	db	84
   510  00FC48  54                 	db	84
   511  00FC49  54                 	db	84
   512  00FC4A  18                 	db	24
   513  00FC4B  00                 	db	0
   514  00FC4C  08                 	db	8
   515  00FC4D  7E                 	db	126
   516  00FC4E  09                 	db	9
   517  00FC4F  02                 	db	2
   518  00FC50  18                 	db	24
   519  00FC51  A4                 	db	164
   520  00FC52  A4                 	db	164
   521  00FC53  9C                 	db	156
   522  00FC54  78                 	db	120
   523  00FC55  7F                 	db	127
   524  00FC56  08                 	db	8
   525  00FC57  04                 	db	4
   526  00FC58  04                 	db	4
   527  00FC59  78                 	db	120
   528  00FC5A  00                 	db	0
   529  00FC5B  44                 	db	68
   530  00FC5C  7D                 	db	125
   531  00FC5D  40                 	db	64
   532  00FC5E  00                 	db	0
   533  00FC5F  20                 	db	32
   534  00FC60  40                 	db	64
   535  00FC61  40                 	db	64
   536  00FC62  3D                 	db	61
   537  00FC63  00                 	db	0
   538  00FC64  7F                 	db	127
   539  00FC65  10                 	db	16
   540  00FC66  28                 	db	40
   541  00FC67  44                 	db	68
   542  00FC68  00                 	db	0
   543  00FC69  00                 	db	0
   544  00FC6A  41                 	db	65
   545  00FC6B  7F                 	db	127
   546  00FC6C  40                 	db	64
   547  00FC6D  00                 	db	0
   548  00FC6E  7C                 	db	124
   549  00FC6F  04                 	db	4
   550  00FC70  78                 	db	120
   551  00FC71  04                 	db	4
   552  00FC72  78                 	db	120
   553  00FC73  7C                 	db	124
   554  00FC74  08                 	db	8
   555  00FC75  04                 	db	4
   556  00FC76  04                 	db	4
   557  00FC77  78                 	db	120
   558  00FC78  38                 	db	56
   559  00FC79  44                 	db	68
   560  00FC7A  44                 	db	68
   561  00FC7B  44                 	db	68
   562  00FC7C  38                 	db	56
   563  00FC7D  FC                 	db	252
   564  00FC7E  18                 	db	24
   565  00FC7F  24                 	db	36
   566  00FC80  24                 	db	36
   567  00FC81  18                 	db	24
   568  00FC82  18                 	db	24
   569  00FC83  24                 	db	36
   570  00FC84  24                 	db	36
   571  00FC85  18                 	db	24
   572  00FC86  FC                 	db	252
   573  00FC87  7C                 	db	124
   574  00FC88  08                 	db	8
   575  00FC89  04                 	db	4
   576  00FC8A  04                 	db	4
   577  00FC8B  08                 	db	8
   578  00FC8C  48                 	db	72
   579  00FC8D  54                 	db	84
   580  00FC8E  54                 	db	84
   581  00FC8F  54                 	db	84
   582  00FC90  24                 	db	36
   583  00FC91  04                 	db	4
   584  00FC92  04                 	db	4
   585  00FC93  3F                 	db	63
   586  00FC94  44                 	db	68
   587  00FC95  24                 	db	36
   588  00FC96  3C                 	db	60
   589  00FC97  40                 	db	64
   590  00FC98  40                 	db	64
   591  00FC99  20                 	db	32
   592  00FC9A  7C                 	db	124
   593  00FC9B  1C                 	db	28
   594  00FC9C  20                 	db	32
   595  00FC9D  40                 	db	64
   596  00FC9E  20                 	db	32
   597  00FC9F  1C                 	db	28
   598  00FCA0  3C                 	db	60
   599  00FCA1  40                 	db	64
   600  00FCA2  30                 	db	48
   601  00FCA3  40                 	db	64
   602  00FCA4  3C                 	db	60
   603  00FCA5  44                 	db	68
   604  00FCA6  28                 	db	40
   605  00FCA7  10                 	db	16
   606  00FCA8  28                 	db	40
   607  00FCA9  44                 	db	68
   608  00FCAA  4C                 	db	76
   609  00FCAB  90                 	db	144
   610  00FCAC  90                 	db	144
   611  00FCAD  90                 	db	144
   612  00FCAE  7C                 	db	124
   613  00FCAF  44                 	db	68
   614  00FCB0  64                 	db	100
   615  00FCB1  54                 	db	84
   616  00FCB2  4C                 	db	76
   617  00FCB3  44                 	db	68
   618  00FCB4  00                 	db	0
   619  00FCB5  08                 	db	8
   620  00FCB6  36                 	db	54
   621  00FCB7  41                 	db	65
   622  00FCB8  00                 	db	0
   623  00FCB9  00                 	db	0
   624  00FCBA  00                 	db	0
   625  00FCBB  77                 	db	119
   626  00FCBC  00                 	db	0
   627  00FCBD  00                 	db	0
   628  00FCBE  00                 	db	0
   629  00FCBF  41                 	db	65
   630  00FCC0  36                 	db	54
   631  00FCC1  08                 	db	8
   632  00FCC2  00                 	db	0
   633  00FCC3  02                 	db	2
   634  00FCC4  01                 	db	1
   635  00FCC5  02                 	db	2
   636  00FCC6  04                 	db	4
   637  00FCC7  02                 	db	2
   638  00FCC8                     __end_of_font2:
   639                           	opt stack 0
   640  0000                     _PORTAbits	set	3968
   641  0000                     _PORTBbits	set	3969
   642  0000                     _PORTCbits	set	3970
   643  0000                     _PORTDbits	set	3971
   644  0000                     _PORTEbits	set	3972
   645  0000                     _TRISA	set	3986
   646  0000                     _TRISB	set	3987
   647  0000                     _TRISC	set	3988
   648  0000                     _TRISCbits	set	3988
   649  0000                     _TRISD	set	3989
   650  0000                     _TRISE	set	3990
   651  0000                     _ADCON0	set	4034
   652  0000                     _ADCON0bits	set	4034
   653  0000                     _ADCON1	set	4033
   654  0000                     _ADCON2	set	4032
   655  0000                     _ADRESH	set	4036
   656  0000                     _ADRESL	set	4035
   657  0000                     _CCP2CON	set	4026
   658  0000                     _CCPR2L	set	4027
   659  0000                     _OSCCON	set	4051
   660  0000                     _PIE1bits	set	3997
   661  0000                     _PIR1bits	set	3998
   662  0000                     _PIR2bits	set	4001
   663  0000                     _PR2	set	4043
   664  0000                     _RCSTA	set	4011
   665  0000                     _RCSTAbits	set	4011
   666  0000                     _SPBRG	set	4015
   667  0000                     _SPBRGH	set	4016
   668  0000                     _SSPBUF	set	4041
   669  0000                     _SSPCON1	set	4038
   670  0000                     _SSPSTAT	set	4039
   671  0000                     _SSPSTATbits	set	4039
   672  0000                     _T2CON	set	4042
   673  0000                     _T3CON	set	4017
   674  0000                     _T3CONbits	set	4017
   675  0000                     _TXREG	set	4013
   676  0000                     _TXSTA	set	4012
   677  0000                     _TXSTAbits	set	4012
   678  0000                     _TRMT	set	32097
   679  0000                     _T0CON	set	4053
   680  0000                     _T0CONbits	set	4053
   681  0000                     _TMR0H	set	4055
   682  0000                     _TMR0L	set	4054
   683  0000                     _INTCON2bits	set	4081
   684  0000                     _INTCON3bits	set	4080
   685  0000                     _INTCONbits	set	4082
   686  00FCC8                     STR_12:
   687  00FCC8  4E                 	db	78	;'N'
   688  00FCC9  53                 	db	83	;'S'
   689  00FCCA  50                 	db	80	;'P'
   690  00FCCB  20                 	db	32
   691  00FCCC  4E                 	db	78	;'N'
   692  00FCCD  53                 	db	83	;'S'
   693  00FCCE  4C                 	db	76	;'L'
   694  00FCCF  54                 	db	84	;'T'
   695  00FCD0  20                 	db	32
   696  00FCD1  45                 	db	69	;'E'
   697  00FCD2  57                 	db	87	;'W'
   698  00FCD3  50                 	db	80	;'P'
   699  00FCD4  20                 	db	32
   700  00FCD5  45                 	db	69	;'E'
   701  00FCD6  57                 	db	87	;'W'
   702  00FCD7  4C                 	db	76	;'L'
   703  00FCD8  54                 	db	84	;'T'
   704  00FCD9  20                 	db	32
   705  00FCDA  4D                 	db	77	;'M'
   706  00FCDB  52                 	db	82	;'R'
   707  00FCDC  00                 	db	0
   708  00FCDD                     STR_1:
   709  00FCDD  45                 	db	69	;'E'
   710  00FCDE  43                 	db	67	;'C'
   711  00FCDF  45                 	db	69	;'E'
   712  00FCE0  33                 	db	51	;'3'
   713  00FCE1  33                 	db	51	;'3'
   714  00FCE2  30                 	db	48	;'0'
   715  00FCE3  31                 	db	49	;'1'
   716  00FCE4  4C                 	db	76	;'L'
   717  00FCE5  20                 	db	32
   718  00FCE6  46                 	db	70	;'F'
   719  00FCE7  61                 	db	97	;'a'
   720  00FCE8  6C                 	db	108	;'l'
   721  00FCE9  6C                 	db	108	;'l'
   722  00FCEA  20                 	db	32
   723  00FCEB  32                 	db	50	;'2'
   724  00FCEC  31                 	db	49	;'1'
   725  00FCED  2D                 	db	45
   726  00FCEE  53                 	db	83	;'S'
   727  00FCEF  33                 	db	51	;'3'
   728  00FCF0  00                 	db	0
   729  00FCF1                     STR_6:
   730  00FCF1  4E                 	db	78	;'N'
   731  00FCF2  4F                 	db	79	;'O'
   732  00FCF3  52                 	db	82	;'R'
   733  00FCF4  54                 	db	84	;'T'
   734  00FCF5  48                 	db	72	;'H'
   735  00FCF6  2F                 	db	47
   736  00FCF7  53                 	db	83	;'S'
   737  00FCF8  4F                 	db	79	;'O'
   738  00FCF9  55                 	db	85	;'U'
   739  00FCFA  54                 	db	84	;'T'
   740  00FCFB  48                 	db	72	;'H'
   741  00FCFC  00                 	db	0
   742  00FCFD                     STR_8:
   743  00FCFD  45                 	db	69	;'E'
   744  00FCFE  41                 	db	65	;'A'
   745  00FCFF  53                 	db	83	;'S'
   746  00FD00  54                 	db	84	;'T'
   747  00FD01  2F                 	db	47
   748  00FD02  57                 	db	87	;'W'
   749  00FD03  45                 	db	69	;'E'
   750  00FD04  53                 	db	83	;'S'
   751  00FD05  54                 	db	84	;'T'
   752  00FD06  00                 	db	0
   753  00FD07                     STR_7:
   754  00FD07  4E                 	db	78	;'N'
   755  00FD08  2F                 	db	47
   756  00FD09  53                 	db	83	;'S'
   757  00FD0A  20                 	db	32
   758  00FD0B  4C                 	db	76	;'L'
   759  00FD0C  54                 	db	84	;'T'
   760  00FD0D  00                 	db	0
   761  00FD0E                     STR_9:
   762  00FD0E  45                 	db	69	;'E'
   763  00FD0F  2F                 	db	47
   764  00FD10  57                 	db	87	;'W'
   765  00FD11  20                 	db	32
   766  00FD12  4C                 	db	76	;'L'
   767  00FD13  54                 	db	84	;'T'
   768  00FD14  00                 	db	0
   769  00FD15                     STR_2:
   770  00FD15  4D                 	db	77	;'M'
   771  00FD16  6F                 	db	111	;'o'
   772  00FD17  64                 	db	100	;'d'
   773  00FD18  65                 	db	101	;'e'
   774  00FD19  3A                 	db	58	;':'
   775  00FD1A  00                 	db	0
   776  00FD1B                     STR_3:
   777  00FD1B  46                 	db	70	;'F'
   778  00FD1C  52                 	db	82	;'R'
   779  00FD1D  3A                 	db	58	;':'
   780  00FD1E  00                 	db	0
   781  00FD1F                     STR_4:
   782  00FD1F  46                 	db	70	;'F'
   783  00FD20  53                 	db	83	;'S'
   784  00FD21  3A                 	db	58	;':'
   785  00FD22  00                 	db	0
   786  00FD23                     STR_10:
   787  00FD23  50                 	db	80	;'P'
   788  00FD24  4E                 	db	78	;'N'
   789  00FD25  53                 	db	83	;'S'
   790  00FD26  00                 	db	0
   791  00FD27                     STR_11:
   792  00FD27  50                 	db	80	;'P'
   793  00FD28  45                 	db	69	;'E'
   794  00FD29  57                 	db	87	;'W'
   795  00FD2A  00                 	db	0
   796  00FD2B                     STR_14:
   797  00FD2B  20                 	db	32
   798  00FD2C  00                 	db	0
   799  00FD2D                     STR_5:
   800  00FD2D  2A                 	db	42
   801  00FD2E  00                 	db	0
   802  0000                     
   803                           ; #config settings
   804  00FD2F  00                 	db	0	; dummy byte at the end
   805  0000                     
   806                           	psect	cinit
   807  00202C                     __pcinit:
   808                           	opt stack 0
   809  00202C                     start_initialization:
   810                           	opt stack 0
   811  00202C                     __initialization:
   812                           	opt stack 0
   813                           
   814                           ; Clear objects allocated to BANK0 (37 bytes)
   815  00202C  EE00  F080         	lfsr	0,__pbssBANK0
   816  002030  0E25               	movlw	37
   817  002032                     clear_0:
   818  002032  6AEE               	clrf	postinc0,c
   819  002034  06E8               	decf	wreg,f,c
   820  002036  E1FD               	bnz	clear_0
   821                           
   822                           ; Clear objects allocated to COMRAM (25 bytes)
   823  002038  EE00  F042         	lfsr	0,__pbssCOMRAM
   824  00203C  0E19               	movlw	25
   825  00203E                     clear_1:
   826  00203E  6AEE               	clrf	postinc0,c
   827  002040  06E8               	decf	wreg,f,c
   828  002042  E1FD               	bnz	clear_1
   829                           
   830                           ; Initialize objects allocated to BANK0 (12 bytes)
   831                           ; load TBLPTR registers with __pidataBANK0
   832  002044  0E34               	movlw	low __pidataBANK0
   833  002046  6EF6               	movwf	tblptrl,c
   834  002048  0E26               	movlw	high __pidataBANK0
   835  00204A  6EF7               	movwf	tblptrh,c
   836  00204C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   837  00204E  6EF8               	movwf	tblptru,c
   838  002050  EE00  F0B3         	lfsr	0,__pdataBANK0
   839  002054  EE10 F00C          	lfsr	1,12
   840  002058                     copy_data0:
   841  002058  0009               	tblrd		*+
   842  00205A  CFF5 FFEE          	movff	tablat,postinc0
   843  00205E  50E5               	movf	postdec1,w,c
   844  002060  50E1               	movf	fsr1l,w,c
   845  002062  E1FA               	bnz	copy_data0
   846                           
   847                           ; Initialize objects allocated to COMRAM (23 bytes)
   848                           ; load TBLPTR registers with __pidataCOMRAM
   849  002064  0E78               	movlw	low __pidataCOMRAM
   850  002066  6EF6               	movwf	tblptrl,c
   851  002068  0E25               	movlw	high __pidataCOMRAM
   852  00206A  6EF7               	movwf	tblptrh,c
   853  00206C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   854  00206E  6EF8               	movwf	tblptru,c
   855  002070  EE00  F05B         	lfsr	0,__pdataCOMRAM
   856  002074  EE10 F017          	lfsr	1,23
   857  002078                     copy_data1:
   858  002078  0009               	tblrd		*+
   859  00207A  CFF5 FFEE          	movff	tablat,postinc0
   860  00207E  50E5               	movf	postdec1,w,c
   861  002080  50E1               	movf	fsr1l,w,c
   862  002082  E1FA               	bnz	copy_data1
   863  002084                     end_of_initialization:
   864                           	opt stack 0
   865  002084                     __end_of__initialization:
   866                           	opt stack 0
   867  002084  0E00               	movlw	low (__Lmediumconst shr (0+16))
   868  002086  6EF8               	movwf	tblptru,c
   869  002088  0100               	movlb	0
   870  00208A  EFD9  F00C         	goto	_main	;jump to C main() function
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postdec1	equ	0xFE5
   878                           fsr1l	equ	0xFE1
   879                           
   880                           	psect	bssCOMRAM
   881  000042                     __pbssCOMRAM:
   882                           	opt stack 0
   883  000042                     _volt:
   884                           	opt stack 0
   885  000042                     	ds	3
   886  000045                     _MODE:
   887                           	opt stack 0
   888  000045                     	ds	2
   889  000047                     _nbr:
   890                           	opt stack 0
   891  000047                     	ds	2
   892  000049                     _txt:
   893                           	opt stack 0
   894  000049                     	ds	2
   895  00004B                     _Count:
   896                           	opt stack 0
   897  00004B                     	ds	1
   898  00004C                     _EW_PED_SW:
   899                           	opt stack 0
   900  00004C                     	ds	1
   901  00004D                     _FLASHING:
   902                           	opt stack 0
   903  00004D                     	ds	1
   904  00004E                     _FLASHING_REQUEST:
   905                           	opt stack 0
   906  00004E                     	ds	1
   907  00004F                     _NS_PED_SW:
   908                           	opt stack 0
   909  00004F                     	ds	1
   910  000050                     _PED_Count:
   911                           	opt stack 0
   912  000050                     	ds	1
   913  000051                     _SW_EWLT:
   914                           	opt stack 0
   915  000051                     	ds	1
   916  000052                     _SW_EWPED:
   917                           	opt stack 0
   918  000052                     	ds	1
   919  000053                     _SW_MODE:
   920                           	opt stack 0
   921  000053                     	ds	1
   922  000054                     _SW_NSLT:
   923                           	opt stack 0
   924  000054                     	ds	1
   925  000055                     _SW_NSPED:
   926                           	opt stack 0
   927  000055                     	ds	1
   928  000056                     __tft_type:
   929                           	opt stack 0
   930  000056                     	ds	1
   931  000057                     _colstart:
   932                           	opt stack 0
   933  000057                     	ds	1
   934  000058                     _dir:
   935                           	opt stack 0
   936  000058                     	ds	1
   937  000059                     _direction:
   938                           	opt stack 0
   939  000059                     	ds	1
   940  00005A                     _rowstart:
   941                           	opt stack 0
   942  00005A                     	ds	1
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952                           	psect	dataCOMRAM
   953  00005B                     __pdataCOMRAM:
   954                           	opt stack 0
   955  00005B                     _wrap:
   956                           	opt stack 0
   957  00005B                     	ds	1
   958  00005C                     _NSLT_Count:
   959                           	opt stack 0
   960  00005C                     	ds	3
   961  00005F                     _NS_Count:
   962                           	opt stack 0
   963  00005F                     	ds	3
   964  000062                     _Act_Mode_Txt:
   965                           	opt stack 0
   966  000062                     	ds	2
   967  000064                     _FlashingR_Txt:
   968                           	opt stack 0
   969  000064                     	ds	2
   970  000066                     _FlashingS_Txt:
   971                           	opt stack 0
   972  000066                     	ds	2
   973  000068                     _SW_EWLT_Txt:
   974                           	opt stack 0
   975  000068                     	ds	2
   976  00006A                     _SW_EWPED_Txt:
   977                           	opt stack 0
   978  00006A                     	ds	2
   979  00006C                     _SW_MODE_Txt:
   980                           	opt stack 0
   981  00006C                     	ds	2
   982  00006E                     _SW_NSLT_Txt:
   983                           	opt stack 0
   984  00006E                     	ds	2
   985  000070                     _SW_NSPED_Txt:
   986                           	opt stack 0
   987  000070                     	ds	2
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           postinc0	equ	0xFEE
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1l	equ	0xFE1
   996                           
   997                           	psect	bssBANK0
   998  000080                     __pbssBANK0:
   999                           	opt stack 0
  1000  000080                     _INT0_flag:
  1001                           	opt stack 0
  1002  000080                     	ds	2
  1003  000082                     _INT1_flag:
  1004                           	opt stack 0
  1005  000082                     	ds	2
  1006  000084                     _INT2_flag:
  1007                           	opt stack 0
  1008  000084                     	ds	2
  1009  000086                     _buffer:
  1010                           	opt stack 0
  1011  000086                     	ds	31
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           postdec1	equ	0xFE5
  1019                           fsr1l	equ	0xFE1
  1020                           
  1021                           	psect	dataBANK0
  1022  0000B3                     __pdataBANK0:
  1023                           	opt stack 0
  1024  0000B3                     _EWLT_Count:
  1025                           	opt stack 0
  1026  0000B3                     	ds	3
  1027  0000B6                     _EW_Count:
  1028                           	opt stack 0
  1029  0000B6                     	ds	3
  1030  0000B9                     _PED_EW_Count:
  1031                           	opt stack 0
  1032  0000B9                     	ds	3
  1033  0000BC                     _PED_NS_Count:
  1034                           	opt stack 0
  1035  0000BC                     	ds	3
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           postdec1	equ	0xFE5
  1043                           fsr1l	equ	0xFE1
  1044                           
  1045                           	psect	cstackBANK0
  1046  0000A5                     __pcstackBANK0:
  1047                           	opt stack 0
  1048  0000A5                     drawtext@x:
  1049                           	opt stack 0
  1050  0000A5                     update_LCD_color@direction:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x0
  1054  0000A5                     	ds	1
  1055  0000A6                     update_LCD_color@Circle_Y:
  1056                           	opt stack 0
  1057  0000A6                     drawtext@textsize:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x1
  1061  0000A6                     	ds	1
  1062  0000A7                     Set_NS@color:
  1063                           	opt stack 0
  1064  0000A7                     Set_NS_LT@color:
  1065                           	opt stack 0
  1066  0000A7                     Set_EW@color:
  1067                           	opt stack 0
  1068  0000A7                     Set_EW_LT@color:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x2
  1072  0000A7                     	ds	1
  1073  0000A8                     drawtext@i:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x3
  1077  0000A8                     	ds	2
  1078  0000AA                     drawtext@cursor_y:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x5
  1082  0000AA                     	ds	1
  1083  0000AB                     drawtext@cursor_x:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x6
  1087  0000AB                     	ds	1
  1088  0000AC                     update_LCD_count@direction:
  1089                           	opt stack 0
  1090  0000AC                     update_LCD_PED_Count@direction:
  1091                           	opt stack 0
  1092  0000AC                     update_LCD_misc@ch:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x7
  1096  0000AC                     	ds	1
  1097  0000AD                     PED_Control@Num_Sec:
  1098                           	opt stack 0
  1099  0000AD                     update_LCD_misc@nStep:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x8
  1103  0000AD                     	ds	1
  1104  0000AE                     PED_Control@i:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x9
  1108  0000AE                     	ds	1
  1109  0000AF                     PED_Control@i_1511:
  1110                           	opt stack 0
  1111  0000AF                     Wait_N_Seconds@seconds:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0xA
  1115  0000AF                     	ds	1
  1116  0000B0                     PED_Control@direction:
  1117                           	opt stack 0
  1118  0000B0                     Wait_N_Seconds@I:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0xB
  1122  0000B0                     	ds	1
  1123  0000B1                     main@nStep:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0xC
  1127  0000B1                     	ds	2
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           
  1137                           	psect	cstackCOMRAM
  1138  000001                     __pcstackCOMRAM:
  1139                           	opt stack 0
  1140  000001                     ??_chkisr:
  1141  000001                     
  1142                           ; 0 bytes @ 0x0
  1143  000001                     	ds	14
  1144  00000F                     ?_strlen:
  1145                           	opt stack 0
  1146  00000F                     ?_get_full_ADC:
  1147                           	opt stack 0
  1148  00000F                     ?___wmul:
  1149                           	opt stack 0
  1150  00000F                     ?___awdiv:
  1151                           	opt stack 0
  1152  00000F                     ?___awmod:
  1153                           	opt stack 0
  1154  00000F                     ?___ftpack:
  1155                           	opt stack 0
  1156  00000F                     spiwrite@x:
  1157                           	opt stack 0
  1158  00000F                     OpenUSART@spbrg:
  1159                           	opt stack 0
  1160  00000F                     ___wmul@multiplier:
  1161                           	opt stack 0
  1162  00000F                     ___awdiv@dividend:
  1163                           	opt stack 0
  1164  00000F                     ___awmod@dividend:
  1165                           	opt stack 0
  1166  00000F                     strcpy@to:
  1167                           	opt stack 0
  1168  00000F                     strlen@s:
  1169                           	opt stack 0
  1170  00000F                     ___ftpack@arg:
  1171                           	opt stack 0
  1172  00000F                     ___ftge@ff1:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0xE
  1176  00000F                     	ds	1
  1177  000010                     spiwrite@spidata:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0xF
  1181  000010                     	ds	1
  1182  000011                     ??_strlen:
  1183  000011                     ??_get_full_ADC:
  1184  000011                     write_command@cmd_:
  1185                           	opt stack 0
  1186  000011                     write_data@data_:
  1187                           	opt stack 0
  1188  000011                     OpenUSART@config:
  1189                           	opt stack 0
  1190  000011                     ___wmul@multiplicand:
  1191                           	opt stack 0
  1192  000011                     ___awdiv@divisor:
  1193                           	opt stack 0
  1194  000011                     ___awmod@divisor:
  1195                           	opt stack 0
  1196  000011                     strcpy@from:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x10
  1200  000011                     	ds	1
  1201  000012                     setAddrWindow@y0:
  1202                           	opt stack 0
  1203  000012                     ___ftpack@exp:
  1204                           	opt stack 0
  1205  000012                     ___ftge@ff2:
  1206                           	opt stack 0
  1207                           
  1208                           ; 3 bytes @ 0x11
  1209  000012                     	ds	1
  1210  000013                     setAddrWindow@x1:
  1211                           	opt stack 0
  1212  000013                     ___awdiv@counter:
  1213                           	opt stack 0
  1214  000013                     ___awmod@counter:
  1215                           	opt stack 0
  1216  000013                     ___ftpack@sign:
  1217                           	opt stack 0
  1218  000013                     get_full_ADC@result:
  1219                           	opt stack 0
  1220  000013                     ___wmul@product:
  1221                           	opt stack 0
  1222  000013                     strcpy@cp:
  1223                           	opt stack 0
  1224  000013                     strlen@cp:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x12
  1228  000013                     	ds	1
  1229  000014                     ??___ftpack:
  1230  000014                     setAddrWindow@y1:
  1231                           	opt stack 0
  1232  000014                     ___awdiv@sign:
  1233                           	opt stack 0
  1234  000014                     ___awmod@sign:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x13
  1238  000014                     	ds	1
  1239  000015                     ??___ftge:
  1240  000015                     setAddrWindow@x0:
  1241                           	opt stack 0
  1242  000015                     delay_ms@ms:
  1243                           	opt stack 0
  1244  000015                     ___awdiv@quotient:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x14
  1248  000015                     	ds	1
  1249  000016                     drawPixel@y:
  1250                           	opt stack 0
  1251  000016                     drawFastVLine@y:
  1252                           	opt stack 0
  1253  000016                     fillRectangle@y:
  1254                           	opt stack 0
  1255  000016                     drawFastHLine@y:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x15
  1259  000016                     	ds	1
  1260  000017                     ??_delay_ms:
  1261  000017                     ?___awtoft:
  1262                           	opt stack 0
  1263  000017                     drawFastVLine@h:
  1264                           	opt stack 0
  1265  000017                     fillRectangle@w:
  1266                           	opt stack 0
  1267  000017                     drawFastHLine@w:
  1268                           	opt stack 0
  1269  000017                     drawPixel@color:
  1270                           	opt stack 0
  1271  000017                     ___awtoft@c:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x16
  1275  000017                     	ds	1
  1276  000018                     fillRectangle@h:
  1277                           	opt stack 0
  1278  000018                     drawFastVLine@color:
  1279                           	opt stack 0
  1280  000018                     drawFastHLine@color:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x17
  1284  000018                     	ds	1
  1285  000019                     drawPixel@x:
  1286                           	opt stack 0
  1287  000019                     delay_ms@count:
  1288                           	opt stack 0
  1289  000019                     fillRectangle@color:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x18
  1293  000019                     	ds	1
  1294  00001A                     ??_drawFastVLine:
  1295  00001A                     ??_drawFastHLine:
  1296  00001A                     ___awtoft@sign:
  1297                           	opt stack 0
  1298  00001A                     drawCircle@x0:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x19
  1302  00001A                     	ds	1
  1303  00001B                     ??_fillRectangle:
  1304  00001B                     ?___ftdiv:
  1305                           	opt stack 0
  1306  00001B                     ___ftdiv@f1:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x1A
  1310  00001B                     	ds	1
  1311  00001C                     drawCircle@y0:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x1B
  1315  00001C                     	ds	2
  1316  00001E                     drawFastVLine@hi:
  1317                           	opt stack 0
  1318  00001E                     drawFastHLine@hi:
  1319                           	opt stack 0
  1320  00001E                     drawCircle@r:
  1321                           	opt stack 0
  1322  00001E                     ___ftdiv@f2:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x1D
  1326  00001E                     	ds	1
  1327  00001F                     drawFastVLine@lo:
  1328                           	opt stack 0
  1329  00001F                     fillRectangle@hi:
  1330                           	opt stack 0
  1331  00001F                     drawFastHLine@lo:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x1E
  1335  00001F                     	ds	1
  1336  000020                     drawFastVLine@x:
  1337                           	opt stack 0
  1338  000020                     fillRectangle@lo:
  1339                           	opt stack 0
  1340  000020                     drawFastHLine@x:
  1341                           	opt stack 0
  1342  000020                     drawCircle@color:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x1F
  1346  000020                     	ds	1
  1347  000021                     ??___ftdiv:
  1348  000021                     fillRect@y:
  1349                           	opt stack 0
  1350  000021                     fillRectangle@x:
  1351                           	opt stack 0
  1352  000021                     fillCircleHelper@x0:
  1353                           	opt stack 0
  1354  000021                     drawRect@x:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x20
  1358  000021                     	ds	1
  1359  000022                     ??_drawCircle:
  1360  000022                     fillRect@w:
  1361                           	opt stack 0
  1362  000022                     fillScreen@color:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x21
  1366  000022                     	ds	1
  1367  000023                     fillRect@h:
  1368                           	opt stack 0
  1369  000023                     fillCircleHelper@y0:
  1370                           	opt stack 0
  1371  000023                     drawRect@y:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x22
  1375  000023                     	ds	1
  1376  000024                     ___ftdiv@cntr:
  1377                           	opt stack 0
  1378  000024                     fillRect@color:
  1379                           	opt stack 0
  1380  000024                     drawCircle@ddF_x:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x23
  1384  000024                     	ds	1
  1385  000025                     fillCircleHelper@r:
  1386                           	opt stack 0
  1387  000025                     drawRect@w:
  1388                           	opt stack 0
  1389  000025                     ___ftdiv@f3:
  1390                           	opt stack 0
  1391                           
  1392                           ; 3 bytes @ 0x24
  1393  000025                     	ds	1
  1394  000026                     ??_fillRect:
  1395  000026                     drawCircle@ddF_y:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x25
  1399  000026                     	ds	1
  1400  000027                     fillCircleHelper@cornername:
  1401                           	opt stack 0
  1402  000027                     drawRect@h:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x26
  1406  000027                     	ds	1
  1407  000028                     ___ftdiv@exp:
  1408                           	opt stack 0
  1409  000028                     drawCircle@f:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x27
  1413  000028                     	ds	1
  1414  000029                     fillRect@x:
  1415                           	opt stack 0
  1416  000029                     ___ftdiv@sign:
  1417                           	opt stack 0
  1418  000029                     fillCircleHelper@delta:
  1419                           	opt stack 0
  1420  000029                     drawRect@color:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x28
  1424  000029                     	ds	1
  1425  00002A                     fillRect@i:
  1426                           	opt stack 0
  1427  00002A                     drawCircle@x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x29
  1431  00002A                     	ds	1
  1432  00002B                     ??_drawRect:
  1433  00002B                     fillCircleHelper@color:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x2A
  1437  00002B                     	ds	1
  1438  00002C                     drawChar@y:
  1439                           	opt stack 0
  1440  00002C                     drawCircle@y:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x2B
  1444  00002C                     	ds	1
  1445  00002D                     ??_fillCircleHelper:
  1446  00002D                     drawChar@c:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x2C
  1450  00002D                     	ds	1
  1451  00002E                     drawChar@color:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x2D
  1455  00002E                     	ds	1
  1456  00002F                     fillCircleHelper@ddF_x:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x2E
  1460  00002F                     	ds	1
  1461  000030                     drawChar@bg:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x2F
  1465  000030                     	ds	1
  1466  000031                     fillCircleHelper@ddF_y:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x30
  1470  000031                     	ds	1
  1471  000032                     drawChar@size:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x31
  1475  000032                     	ds	1
  1476  000033                     drawChar@line:
  1477                           	opt stack 0
  1478  000033                     fillCircleHelper@f:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x32
  1482  000033                     	ds	1
  1483  000034                     drawChar@x:
  1484                           	opt stack 0
  1485                           
  1486                           ; 1 bytes @ 0x33
  1487  000034                     	ds	1
  1488  000035                     drawChar@j:
  1489                           	opt stack 0
  1490  000035                     fillCircleHelper@x:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x34
  1494  000035                     	ds	1
  1495  000036                     drawChar@i:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x35
  1499  000036                     	ds	1
  1500  000037                     drawtext@y:
  1501                           	opt stack 0
  1502  000037                     fillCircleHelper@y:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x36
  1506  000037                     	ds	1
  1507  000038                     drawtext@_text:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x37
  1511  000038                     	ds	1
  1512  000039                     fillCircle@x0:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x38
  1516  000039                     	ds	1
  1517  00003A                     drawtext@color:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x39
  1521  00003A                     	ds	1
  1522  00003B                     fillCircle@y0:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x3A
  1526  00003B                     	ds	1
  1527  00003C                     drawtext@bg:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x3B
  1531  00003C                     	ds	1
  1532  00003D                     fillCircle@r:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x3C
  1536  00003D                     	ds	1
  1537  00003E                     drawtext@size:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x3D
  1541  00003E                     	ds	1
  1542  00003F                     ??_drawtext:
  1543  00003F                     fillCircle@color:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x3E
  1547  00003F                     	ds	2
  1548  000041                     update_LCD_color@color:
  1549                           	opt stack 0
  1550  000041                     update_LCD_count@count:
  1551                           	opt stack 0
  1552  000041                     update_LCD_PED_Count@count:
  1553                           	opt stack 0
  1554                           
  1555                           ; 1 bytes @ 0x40
  1556  000041                     	ds	1
  1557  000042                     tblptru	equ	0xFF8
  1558                           tblptrh	equ	0xFF7
  1559                           tblptrl	equ	0xFF6
  1560                           tablat	equ	0xFF5
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           postdec1	equ	0xFE5
  1564                           fsr1l	equ	0xFE1
  1565                           
  1566                           ; 0 bytes @ 0x41
  1567 ;;
  1568 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1569 ;;
  1570 ;; *************** function _main *****************
  1571 ;; Defined at:
  1572 ;;		line 344 in file "Lab8_redo.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  nStep           2   12[BANK0 ] int 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;		None               void
  1579 ;; Registers used:
  1580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;Total ram usage:        2 bytes
  1591 ;; Hardware stack levels required when called:   13
  1592 ;; This function calls:
  1593 ;;		_Day_Mode
  1594 ;;		_Do_Flashing
  1595 ;;		_Do_Init
  1596 ;;		_Init_ADC
  1597 ;;		_Initialize_Screen
  1598 ;;		_Night_Mode
  1599 ;;		___awtoft
  1600 ;;		___ftdiv
  1601 ;;		___ftge
  1602 ;;		___wmul
  1603 ;;		_get_full_ADC
  1604 ;;		_init_IO
  1605 ;;		_init_UART
  1606 ;; This function is called by:
  1607 ;;		Startup code after reset
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text0
  1612  0019B2                     __ptext0:
  1613                           	opt stack 0
  1614  0019B2                     _main:
  1615                           	opt stack 18
  1616                           
  1617                           ;Lab8_redo.c: 346: init_IO();
  1618                           
  1619                           ;incstack = 0
  1620  0019B2  ECD3  F012         	call	_init_IO	;wreg free
  1621                           
  1622                           ;Lab8_redo.c: 347: Init_ADC();
  1623  0019B6  EC13  F013         	call	_Init_ADC	;wreg free
  1624                           
  1625                           ;Lab8_redo.c: 348: init_UART();
  1626  0019BA  ECDD  F012         	call	_init_UART	;wreg free
  1627                           
  1628                           ;Lab8_redo.c: 349: OSCCON = 0x70;
  1629  0019BE  0E70               	movlw	112
  1630  0019C0  6ED3               	movwf	4051,c	;volatile
  1631                           
  1632                           ;Lab8_redo.c: 350: Initialize_Screen();
  1633  0019C2  EC0E  F000         	call	_Initialize_Screen	;wreg free
  1634                           
  1635                           ;Lab8_redo.c: 352: Do_Init();
  1636  0019C6  EC63  F012         	call	_Do_Init	;wreg free
  1637  0019CA  D000               	goto	l5614
  1638  0019CC                     l5614:
  1639                           
  1640                           ;Lab8_redo.c: 360: {
  1641                           ;Lab8_redo.c: 361: int nStep = get_full_ADC();
  1642  0019CC  EC76  F012         	call	_get_full_ADC	;wreg free
  1643  0019D0  C00F  F0B1         	movff	?_get_full_ADC,main@nStep
  1644  0019D4  C010  F0B2         	movff	?_get_full_ADC+1,main@nStep+1
  1645                           
  1646                           ;Lab8_redo.c: 362: volt = nStep * 5 /1024.0;
  1647  0019D8  C0B1  F00F         	movff	main@nStep,___wmul@multiplier
  1648  0019DC  C0B2  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1649  0019E0  0E00               	movlw	0
  1650  0019E2  6E12               	movwf	___wmul@multiplicand+1,c
  1651  0019E4  0E05               	movlw	5
  1652  0019E6  6E11               	movwf	___wmul@multiplicand,c
  1653  0019E8  EC4F  F012         	call	___wmul	;wreg free
  1654  0019EC  C00F  F017         	movff	?___wmul,___awtoft@c
  1655  0019F0  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1656  0019F4  ECB3  F011         	call	___awtoft	;wreg free
  1657  0019F8  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  1658  0019FC  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  1659  001A00  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  1660  001A04  0E00               	movlw	0
  1661  001A06  6E1E               	movwf	___ftdiv@f2,c
  1662  001A08  0E80               	movlw	128
  1663  001A0A  6E1F               	movwf	___ftdiv@f2+1,c
  1664  001A0C  0E44               	movlw	68
  1665  001A0E  6E20               	movwf	___ftdiv@f2+2,c
  1666  001A10  ECCA  F00A         	call	___ftdiv	;wreg free
  1667  001A14  C01B  F042         	movff	?___ftdiv,_volt
  1668  001A18  C01C  F043         	movff	?___ftdiv+1,_volt+1
  1669  001A1C  C01D  F044         	movff	?___ftdiv+2,_volt+2
  1670                           
  1671                           ;Lab8_redo.c: 363: SW_MODE = volt < 2.5 ? 1:0;
  1672  001A20  C042  F00F         	movff	_volt,___ftge@ff1
  1673  001A24  C043  F010         	movff	_volt+1,___ftge@ff1+1
  1674  001A28  C044  F011         	movff	_volt+2,___ftge@ff1+2
  1675  001A2C  0E00               	movlw	0
  1676  001A2E  6E12               	movwf	___ftge@ff2,c
  1677  001A30  0E20               	movlw	32
  1678  001A32  6E13               	movwf	___ftge@ff2+1,c
  1679  001A34  0E40               	movlw	64
  1680  001A36  6E14               	movwf	___ftge@ff2+2,c
  1681  001A38  EC8A  F00D         	call	___ftge	;wreg free
  1682  001A3C  B0D8               	btfsc	status,0,c
  1683  001A3E  D002               	goto	u4100
  1684  001A40  0E01               	movlw	1
  1685  001A42  D001               	goto	u4110
  1686  001A44                     u4100:
  1687  001A44  0E00               	movlw	0
  1688  001A46                     u4110:
  1689  001A46  6E53               	movwf	_SW_MODE,c
  1690                           
  1691                           ;Lab8_redo.c: 387: if (SW_MODE)
  1692  001A48  5053               	movf	_SW_MODE,w,c
  1693  001A4A  B4D8               	btfsc	status,2,c
  1694  001A4C  D003               	goto	l5624
  1695                           
  1696                           ;Lab8_redo.c: 388: {
  1697                           ;Lab8_redo.c: 389: Day_Mode();
  1698  001A4E  EC11  F00C         	call	_Day_Mode	;wreg free
  1699                           
  1700                           ;Lab8_redo.c: 390: }
  1701  001A52  D003               	goto	l5626
  1702  001A54                     l5624:
  1703                           
  1704                           ;Lab8_redo.c: 391: else
  1705                           ;Lab8_redo.c: 392: {
  1706                           ;Lab8_redo.c: 393: Night_Mode();
  1707  001A54  EC37  F00D         	call	_Night_Mode	;wreg free
  1708  001A58  D000               	goto	l5626
  1709  001A5A                     l5626:
  1710                           
  1711                           ;Lab8_redo.c: 394: }
  1712                           ;Lab8_redo.c: 396: if(FLASHING_REQUEST == 1)
  1713  001A5A  044E               	decf	_FLASHING_REQUEST,w,c
  1714  001A5C  A4D8               	btfss	status,2,c
  1715  001A5E  D7B6               	goto	l5614
  1716                           
  1717                           ;Lab8_redo.c: 397: {
  1718                           ;Lab8_redo.c: 398: FLASHING_REQUEST = 0;
  1719  001A60  0E00               	movlw	0
  1720  001A62  6E4E               	movwf	_FLASHING_REQUEST,c
  1721                           
  1722                           ;Lab8_redo.c: 399: Do_Flashing();
  1723  001A64  ECD1  F011         	call	_Do_Flashing	;wreg free
  1724  001A68  D7B1               	goto	l5614
  1725  001A6A  EF0C  F000         	goto	start
  1726  001A6E                     __end_of_main:
  1727                           	opt stack 0
  1728                           tblptru	equ	0xFF8
  1729                           tblptrh	equ	0xFF7
  1730                           tblptrl	equ	0xFF6
  1731                           tablat	equ	0xFF5
  1732                           postinc0	equ	0xFEE
  1733                           wreg	equ	0xFE8
  1734                           postdec1	equ	0xFE5
  1735                           fsr1l	equ	0xFE1
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _init_IO *****************
  1739 ;; Defined at:
  1740 ;;		line 405 in file "Lab8_redo.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;		None               void
  1747 ;; Registers used:
  1748 ;;		wreg, status,2
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;Total ram usage:        0 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    2
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_main
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text1
  1769  0025A6                     __ptext1:
  1770                           	opt stack 0
  1771  0025A6                     _init_IO:
  1772                           	opt stack 28
  1773                           
  1774                           ;Lab8_redo.c: 407: TRISA = 0xFF;
  1775                           
  1776                           ;incstack = 0
  1777  0025A6  6892               	setf	3986,c	;volatile
  1778                           
  1779                           ;Lab8_redo.c: 408: TRISB = 0x47;
  1780  0025A8  0E47               	movlw	71
  1781  0025AA  6E93               	movwf	3987,c	;volatile
  1782                           
  1783                           ;Lab8_redo.c: 409: TRISC = 0x00;
  1784  0025AC  0E00               	movlw	0
  1785  0025AE  6E94               	movwf	3988,c	;volatile
  1786                           
  1787                           ;Lab8_redo.c: 410: TRISD = 0x00;
  1788  0025B0  0E00               	movlw	0
  1789  0025B2  6E95               	movwf	3989,c	;volatile
  1790                           
  1791                           ;Lab8_redo.c: 411: TRISE = 0x00;
  1792  0025B4  0E00               	movlw	0
  1793  0025B6  6E96               	movwf	3990,c	;volatile
  1794  0025B8  0012               	return		;funcret
  1795  0025BA                     __end_of_init_IO:
  1796                           	opt stack 0
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1l	equ	0xFE1
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function _Night_Mode *****************
  1808 ;; Defined at:
  1809 ;;		line 600 in file "Lab8_redo.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;		None               void
  1816 ;; Registers used:
  1817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;Total ram usage:        0 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:   12
  1830 ;; This function calls:
  1831 ;;		_Set_EW
  1832 ;;		_Set_EW_LT
  1833 ;;		_Set_NS
  1834 ;;		_Set_NS_LT
  1835 ;;		_Wait_N_Seconds
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text2
  1842  001A6E                     __ptext2:
  1843                           	opt stack 0
  1844  001A6E                     _Night_Mode:
  1845                           	opt stack 18
  1846                           
  1847                           ;Lab8_redo.c: 602: MODE = 0;
  1848                           
  1849                           ;incstack = 0
  1850  001A6E  0E00               	movlw	0
  1851  001A70  6E46               	movwf	_MODE+1,c
  1852  001A72  0E00               	movlw	0
  1853  001A74  6E45               	movwf	_MODE,c
  1854                           
  1855                           ;Lab8_redo.c: 603: PORTBbits.RB7 = 0;
  1856  001A76  9E81               	bcf	3969,7,c	;volatile
  1857                           
  1858                           ;Lab8_redo.c: 604: Act_Mode_Txt[0] = 'N';
  1859  001A78  0E4E               	movlw	78
  1860  001A7A  6E62               	movwf	_Act_Mode_Txt,c
  1861                           
  1862                           ;Lab8_redo.c: 606: Set_NS(2);
  1863  001A7C  0E02               	movlw	2
  1864  001A7E  EC09  F011         	call	_Set_NS
  1865                           
  1866                           ;Lab8_redo.c: 608: Set_EW(1);
  1867  001A82  0E01               	movlw	1
  1868  001A84  EC51  F011         	call	_Set_EW
  1869                           
  1870                           ;Lab8_redo.c: 609: Set_NS_LT(1);
  1871  001A88  0E01               	movlw	1
  1872  001A8A  ECE5  F010         	call	_Set_NS_LT
  1873                           
  1874                           ;Lab8_redo.c: 610: Set_EW_LT(1);
  1875  001A8E  0E01               	movlw	1
  1876  001A90  EC2D  F011         	call	_Set_EW_LT
  1877                           
  1878                           ;Lab8_redo.c: 612: Wait_N_Seconds(6);
  1879  001A94  0E06               	movlw	6
  1880  001A96  ECEE  F011         	call	_Wait_N_Seconds
  1881                           
  1882                           ;Lab8_redo.c: 614: Set_NS(3);
  1883  001A9A  0E03               	movlw	3
  1884  001A9C  EC09  F011         	call	_Set_NS
  1885                           
  1886                           ;Lab8_redo.c: 615: Wait_N_Seconds(3);
  1887  001AA0  0E03               	movlw	3
  1888  001AA2  ECEE  F011         	call	_Wait_N_Seconds
  1889                           
  1890                           ;Lab8_redo.c: 617: Set_NS(1);
  1891  001AA6  0E01               	movlw	1
  1892  001AA8  EC09  F011         	call	_Set_NS
  1893                           
  1894                           ;Lab8_redo.c: 620: if (PORTAbits.RA5 == 1)
  1895  001AAC  AA80               	btfss	3968,5,c	;volatile
  1896  001AAE  D010               	goto	l5336
  1897                           
  1898                           ;Lab8_redo.c: 621: {
  1899                           ;Lab8_redo.c: 622: Set_EW_LT(2);
  1900  001AB0  0E02               	movlw	2
  1901  001AB2  EC2D  F011         	call	_Set_EW_LT
  1902                           
  1903                           ;Lab8_redo.c: 623: Wait_N_Seconds(6);
  1904  001AB6  0E06               	movlw	6
  1905  001AB8  ECEE  F011         	call	_Wait_N_Seconds
  1906                           
  1907                           ;Lab8_redo.c: 625: Set_EW_LT(3);
  1908  001ABC  0E03               	movlw	3
  1909  001ABE  EC2D  F011         	call	_Set_EW_LT
  1910                           
  1911                           ;Lab8_redo.c: 626: Wait_N_Seconds(3);
  1912  001AC2  0E03               	movlw	3
  1913  001AC4  ECEE  F011         	call	_Wait_N_Seconds
  1914                           
  1915                           ;Lab8_redo.c: 628: Set_EW_LT(1);
  1916  001AC8  0E01               	movlw	1
  1917  001ACA  EC2D  F011         	call	_Set_EW_LT
  1918  001ACE  D000               	goto	l5336
  1919  001AD0                     l5336:
  1920                           
  1921                           ;Lab8_redo.c: 630: }
  1922                           ;Lab8_redo.c: 632: Set_EW(2);
  1923  001AD0  0E02               	movlw	2
  1924  001AD2  EC51  F011         	call	_Set_EW
  1925                           
  1926                           ;Lab8_redo.c: 633: Wait_N_Seconds(6);
  1927  001AD6  0E06               	movlw	6
  1928  001AD8  ECEE  F011         	call	_Wait_N_Seconds
  1929                           
  1930                           ;Lab8_redo.c: 635: Set_EW(3);
  1931  001ADC  0E03               	movlw	3
  1932  001ADE  EC51  F011         	call	_Set_EW
  1933                           
  1934                           ;Lab8_redo.c: 636: Wait_N_Seconds(3);
  1935  001AE2  0E03               	movlw	3
  1936  001AE4  ECEE  F011         	call	_Wait_N_Seconds
  1937                           
  1938                           ;Lab8_redo.c: 638: Set_EW(1);
  1939  001AE8  0E01               	movlw	1
  1940  001AEA  EC51  F011         	call	_Set_EW
  1941                           
  1942                           ;Lab8_redo.c: 642: if ( PORTAbits.RA4 == 1 )
  1943  001AEE  A880               	btfss	3968,4,c	;volatile
  1944  001AF0  D010               	goto	l487
  1945                           
  1946                           ;Lab8_redo.c: 643: {
  1947                           ;Lab8_redo.c: 644: Set_NS_LT(2);
  1948  001AF2  0E02               	movlw	2
  1949  001AF4  ECE5  F010         	call	_Set_NS_LT
  1950                           
  1951                           ;Lab8_redo.c: 645: Wait_N_Seconds(8);
  1952  001AF8  0E08               	movlw	8
  1953  001AFA  ECEE  F011         	call	_Wait_N_Seconds
  1954                           
  1955                           ;Lab8_redo.c: 647: Set_NS_LT(3);
  1956  001AFE  0E03               	movlw	3
  1957  001B00  ECE5  F010         	call	_Set_NS_LT
  1958                           
  1959                           ;Lab8_redo.c: 648: Wait_N_Seconds(3);
  1960  001B04  0E03               	movlw	3
  1961  001B06  ECEE  F011         	call	_Wait_N_Seconds
  1962                           
  1963                           ;Lab8_redo.c: 650: Set_NS_LT(1);
  1964  001B0A  0E01               	movlw	1
  1965  001B0C  ECE5  F010         	call	_Set_NS_LT
  1966  001B10  D000               	goto	l487
  1967  001B12                     l487:
  1968  001B12  0012               	return		;funcret
  1969  001B14                     __end_of_Night_Mode:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           postinc0	equ	0xFEE
  1976                           wreg	equ	0xFE8
  1977                           postdec1	equ	0xFE5
  1978                           fsr1l	equ	0xFE1
  1979                           status	equ	0xFD8
  1980                           
  1981 ;; *************** function _Initialize_Screen *****************
  1982 ;; Defined at:
  1983 ;;		line 174 in file "Lab8_redo.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;		None
  1988 ;; Return value:  Size  Location     Type
  1989 ;;		None               void
  1990 ;; Registers used:
  1991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;Total ram usage:        0 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    9
  2004 ;; This function calls:
  2005 ;;		_LCD_Reset
  2006 ;;		_TFT_GreenTab_Initialize
  2007 ;;		_drawCircle
  2008 ;;		_drawRect
  2009 ;;		_drawtext
  2010 ;;		_fillCircle
  2011 ;;		_fillScreen
  2012 ;;		_strcpy
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text3
  2019  00001C                     __ptext3:
  2020                           	opt stack 0
  2021  00001C                     _Initialize_Screen:
  2022                           	opt stack 21
  2023                           
  2024                           ;Lab8_redo.c: 176: LCD_Reset();
  2025                           
  2026                           ;incstack = 0
  2027  00001C  ECF1  F012         	call	_LCD_Reset	;wreg free
  2028                           
  2029                           ;Lab8_redo.c: 177: TFT_GreenTab_Initialize();
  2030  000020  EC3A  F012         	call	_TFT_GreenTab_Initialize	;wreg free
  2031                           
  2032                           ;Lab8_redo.c: 178: fillScreen(0x0000);
  2033  000024  0E00               	movlw	0
  2034  000026  6E23               	movwf	fillScreen@color+1,c
  2035  000028  0E00               	movlw	0
  2036  00002A  6E22               	movwf	fillScreen@color,c
  2037  00002C  EC89  F012         	call	_fillScreen	;wreg free
  2038                           
  2039                           ;Lab8_redo.c: 181: txt = buffer;
  2040  000030  0E86               	movlw	low _buffer
  2041  000032  6E49               	movwf	_txt,c
  2042  000034  0E00               	movlw	high _buffer
  2043  000036  6E4A               	movwf	_txt+1,c
  2044                           
  2045                           ;Lab8_redo.c: 182: strcpy(txt, "ECE3301L Fall 21-S3");
  2046  000038  C049  F00F         	movff	_txt,strcpy@to
  2047  00003C  C04A  F010         	movff	_txt+1,strcpy@to+1
  2048  000040  0EDD               	movlw	low STR_1
  2049  000042  6E11               	movwf	strcpy@from,c
  2050  000044  0EFC               	movlw	high STR_1
  2051  000046  6E12               	movwf	strcpy@from+1,c
  2052  000048  EC09  F012         	call	_strcpy	;wreg free
  2053                           
  2054                           ;Lab8_redo.c: 183: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2055  00004C  0E02               	movlw	2
  2056  00004E  6E37               	movwf	drawtext@y,c
  2057  000050  C049  F038         	movff	_txt,drawtext@_text
  2058  000054  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2059  000058  0EFF               	movlw	255
  2060  00005A  6E3B               	movwf	drawtext@color+1,c
  2061  00005C  683A               	setf	drawtext@color,c
  2062  00005E  0E00               	movlw	0
  2063  000060  6E3D               	movwf	drawtext@bg+1,c
  2064  000062  0E00               	movlw	0
  2065  000064  6E3C               	movwf	drawtext@bg,c
  2066  000066  0E01               	movlw	1
  2067  000068  6E3E               	movwf	drawtext@size,c
  2068  00006A  0E02               	movlw	2
  2069  00006C  ECCC  F009         	call	_drawtext
  2070                           
  2071                           ;Lab8_redo.c: 186: strcpy(txt, "Mode:");
  2072  000070  C049  F00F         	movff	_txt,strcpy@to
  2073  000074  C04A  F010         	movff	_txt+1,strcpy@to+1
  2074  000078  0E15               	movlw	low STR_2
  2075  00007A  6E11               	movwf	strcpy@from,c
  2076  00007C  0EFD               	movlw	high STR_2
  2077  00007E  6E12               	movwf	strcpy@from+1,c
  2078  000080  EC09  F012         	call	_strcpy	;wreg free
  2079                           
  2080                           ;Lab8_redo.c: 187: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2081  000084  0E0A               	movlw	10
  2082  000086  6E37               	movwf	drawtext@y,c
  2083  000088  C049  F038         	movff	_txt,drawtext@_text
  2084  00008C  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2085  000090  0EFF               	movlw	255
  2086  000092  6E3B               	movwf	drawtext@color+1,c
  2087  000094  683A               	setf	drawtext@color,c
  2088  000096  0E00               	movlw	0
  2089  000098  6E3D               	movwf	drawtext@bg+1,c
  2090  00009A  0E00               	movlw	0
  2091  00009C  6E3C               	movwf	drawtext@bg,c
  2092  00009E  0E01               	movlw	1
  2093  0000A0  6E3E               	movwf	drawtext@size,c
  2094  0000A2  0E02               	movlw	2
  2095  0000A4  ECCC  F009         	call	_drawtext
  2096                           
  2097                           ;Lab8_redo.c: 188: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2098  0000A8  0E0A               	movlw	10
  2099  0000AA  6E37               	movwf	drawtext@y,c
  2100  0000AC  0E62               	movlw	low _Act_Mode_Txt
  2101  0000AE  6E38               	movwf	drawtext@_text,c
  2102  0000B0  0E00               	movlw	high _Act_Mode_Txt
  2103  0000B2  6E39               	movwf	drawtext@_text+1,c
  2104  0000B4  0EFF               	movlw	255
  2105  0000B6  6E3B               	movwf	drawtext@color+1,c
  2106  0000B8  683A               	setf	drawtext@color,c
  2107  0000BA  0E00               	movlw	0
  2108  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2109  0000BE  0E00               	movlw	0
  2110  0000C0  6E3C               	movwf	drawtext@bg,c
  2111  0000C2  0E01               	movlw	1
  2112  0000C4  6E3E               	movwf	drawtext@size,c
  2113  0000C6  0E23               	movlw	35
  2114  0000C8  ECCC  F009         	call	_drawtext
  2115                           
  2116                           ;Lab8_redo.c: 191: strcpy(txt, "FR:");
  2117  0000CC  C049  F00F         	movff	_txt,strcpy@to
  2118  0000D0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2119  0000D4  0E1B               	movlw	low STR_3
  2120  0000D6  6E11               	movwf	strcpy@from,c
  2121  0000D8  0EFD               	movlw	high STR_3
  2122  0000DA  6E12               	movwf	strcpy@from+1,c
  2123  0000DC  EC09  F012         	call	_strcpy	;wreg free
  2124                           
  2125                           ;Lab8_redo.c: 192: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2126  0000E0  0E0A               	movlw	10
  2127  0000E2  6E37               	movwf	drawtext@y,c
  2128  0000E4  C049  F038         	movff	_txt,drawtext@_text
  2129  0000E8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2130  0000EC  0EFF               	movlw	255
  2131  0000EE  6E3B               	movwf	drawtext@color+1,c
  2132  0000F0  683A               	setf	drawtext@color,c
  2133  0000F2  0E00               	movlw	0
  2134  0000F4  6E3D               	movwf	drawtext@bg+1,c
  2135  0000F6  0E00               	movlw	0
  2136  0000F8  6E3C               	movwf	drawtext@bg,c
  2137  0000FA  0E01               	movlw	1
  2138  0000FC  6E3E               	movwf	drawtext@size,c
  2139  0000FE  0E32               	movlw	50
  2140  000100  ECCC  F009         	call	_drawtext
  2141                           
  2142                           ;Lab8_redo.c: 193: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2143  000104  0E0A               	movlw	10
  2144  000106  6E37               	movwf	drawtext@y,c
  2145  000108  0E64               	movlw	low _FlashingR_Txt
  2146  00010A  6E38               	movwf	drawtext@_text,c
  2147  00010C  0E00               	movlw	high _FlashingR_Txt
  2148  00010E  6E39               	movwf	drawtext@_text+1,c
  2149  000110  0EFF               	movlw	255
  2150  000112  6E3B               	movwf	drawtext@color+1,c
  2151  000114  683A               	setf	drawtext@color,c
  2152  000116  0E00               	movlw	0
  2153  000118  6E3D               	movwf	drawtext@bg+1,c
  2154  00011A  0E00               	movlw	0
  2155  00011C  6E3C               	movwf	drawtext@bg,c
  2156  00011E  0E01               	movlw	1
  2157  000120  6E3E               	movwf	drawtext@size,c
  2158  000122  0E46               	movlw	70
  2159  000124  ECCC  F009         	call	_drawtext
  2160                           
  2161                           ;Lab8_redo.c: 196: strcpy(txt, "FS:");
  2162  000128  C049  F00F         	movff	_txt,strcpy@to
  2163  00012C  C04A  F010         	movff	_txt+1,strcpy@to+1
  2164  000130  0E1F               	movlw	low STR_4
  2165  000132  6E11               	movwf	strcpy@from,c
  2166  000134  0EFD               	movlw	high STR_4
  2167  000136  6E12               	movwf	strcpy@from+1,c
  2168  000138  EC09  F012         	call	_strcpy	;wreg free
  2169                           
  2170                           ;Lab8_redo.c: 197: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2171  00013C  0E0A               	movlw	10
  2172  00013E  6E37               	movwf	drawtext@y,c
  2173  000140  C049  F038         	movff	_txt,drawtext@_text
  2174  000144  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2175  000148  0EFF               	movlw	255
  2176  00014A  6E3B               	movwf	drawtext@color+1,c
  2177  00014C  683A               	setf	drawtext@color,c
  2178  00014E  0E00               	movlw	0
  2179  000150  6E3D               	movwf	drawtext@bg+1,c
  2180  000152  0E00               	movlw	0
  2181  000154  6E3C               	movwf	drawtext@bg,c
  2182  000156  0E01               	movlw	1
  2183  000158  6E3E               	movwf	drawtext@size,c
  2184  00015A  0E50               	movlw	80
  2185  00015C  ECCC  F009         	call	_drawtext
  2186                           
  2187                           ;Lab8_redo.c: 198: drawtext(100, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2188  000160  0E0A               	movlw	10
  2189  000162  6E37               	movwf	drawtext@y,c
  2190  000164  0E64               	movlw	low _FlashingR_Txt
  2191  000166  6E38               	movwf	drawtext@_text,c
  2192  000168  0E00               	movlw	high _FlashingR_Txt
  2193  00016A  6E39               	movwf	drawtext@_text+1,c
  2194  00016C  0EFF               	movlw	255
  2195  00016E  6E3B               	movwf	drawtext@color+1,c
  2196  000170  683A               	setf	drawtext@color,c
  2197  000172  0E00               	movlw	0
  2198  000174  6E3D               	movwf	drawtext@bg+1,c
  2199  000176  0E00               	movlw	0
  2200  000178  6E3C               	movwf	drawtext@bg,c
  2201  00017A  0E01               	movlw	1
  2202  00017C  6E3E               	movwf	drawtext@size,c
  2203  00017E  0E64               	movlw	100
  2204  000180  ECCC  F009         	call	_drawtext
  2205                           
  2206                           ;Lab8_redo.c: 201: strcpy(txt, "*");
  2207  000184  C049  F00F         	movff	_txt,strcpy@to
  2208  000188  C04A  F010         	movff	_txt+1,strcpy@to+1
  2209  00018C  0E2D               	movlw	low STR_5
  2210  00018E  6E11               	movwf	strcpy@from,c
  2211  000190  0EFD               	movlw	high STR_5
  2212  000192  6E12               	movwf	strcpy@from+1,c
  2213  000194  EC09  F012         	call	_strcpy	;wreg free
  2214                           
  2215                           ;Lab8_redo.c: 202: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2216  000198  0E0A               	movlw	10
  2217  00019A  6E37               	movwf	drawtext@y,c
  2218  00019C  C049  F038         	movff	_txt,drawtext@_text
  2219  0001A0  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2220  0001A4  0EFF               	movlw	255
  2221  0001A6  6E3B               	movwf	drawtext@color+1,c
  2222  0001A8  683A               	setf	drawtext@color,c
  2223  0001AA  0E00               	movlw	0
  2224  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2225  0001AE  0E00               	movlw	0
  2226  0001B0  6E3C               	movwf	drawtext@bg,c
  2227  0001B2  0E01               	movlw	1
  2228  0001B4  6E3E               	movwf	drawtext@size,c
  2229  0001B6  0E78               	movlw	120
  2230  0001B8  ECCC  F009         	call	_drawtext
  2231                           
  2232                           ;Lab8_redo.c: 205: strcpy(txt, "NORTH/SOUTH");
  2233  0001BC  C049  F00F         	movff	_txt,strcpy@to
  2234  0001C0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2235  0001C4  0EF1               	movlw	low STR_6
  2236  0001C6  6E11               	movwf	strcpy@from,c
  2237  0001C8  0EFC               	movlw	high STR_6
  2238  0001CA  6E12               	movwf	strcpy@from+1,c
  2239  0001CC  EC09  F012         	call	_strcpy	;wreg free
  2240                           
  2241                           ;Lab8_redo.c: 206: drawtext (30, 20 , txt, 0x001F, 0x0000, 1);
  2242  0001D0  0E14               	movlw	20
  2243  0001D2  6E37               	movwf	drawtext@y,c
  2244  0001D4  C049  F038         	movff	_txt,drawtext@_text
  2245  0001D8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2246  0001DC  0E00               	movlw	0
  2247  0001DE  6E3B               	movwf	drawtext@color+1,c
  2248  0001E0  0E1F               	movlw	31
  2249  0001E2  6E3A               	movwf	drawtext@color,c
  2250  0001E4  0E00               	movlw	0
  2251  0001E6  6E3D               	movwf	drawtext@bg+1,c
  2252  0001E8  0E00               	movlw	0
  2253  0001EA  6E3C               	movwf	drawtext@bg,c
  2254  0001EC  0E01               	movlw	1
  2255  0001EE  6E3E               	movwf	drawtext@size,c
  2256  0001F0  0E1E               	movlw	30
  2257  0001F2  ECCC  F009         	call	_drawtext
  2258                           
  2259                           ;Lab8_redo.c: 207: drawRect (30, 20 + 15-8, 60, 18, 0x001F);
  2260  0001F6  0E00               	movlw	0
  2261  0001F8  6E22               	movwf	drawRect@x+1,c
  2262  0001FA  0E1E               	movlw	30
  2263  0001FC  6E21               	movwf	drawRect@x,c
  2264  0001FE  0E00               	movlw	0
  2265  000200  6E24               	movwf	drawRect@y+1,c
  2266  000202  0E1B               	movlw	27
  2267  000204  6E23               	movwf	drawRect@y,c
  2268  000206  0E00               	movlw	0
  2269  000208  6E26               	movwf	drawRect@w+1,c
  2270  00020A  0E3C               	movlw	60
  2271  00020C  6E25               	movwf	drawRect@w,c
  2272  00020E  0E00               	movlw	0
  2273  000210  6E28               	movwf	drawRect@h+1,c
  2274  000212  0E12               	movlw	18
  2275  000214  6E27               	movwf	drawRect@h,c
  2276  000216  0E00               	movlw	0
  2277  000218  6E2A               	movwf	drawRect@color+1,c
  2278  00021A  0E1F               	movlw	31
  2279  00021C  6E29               	movwf	drawRect@color,c
  2280  00021E  ECE3  F00F         	call	_drawRect	;wreg free
  2281                           
  2282                           ;Lab8_redo.c: 208: drawCircle(40, 20 + 15 , 7, 0xF800);
  2283  000222  0E00               	movlw	0
  2284  000224  6E1B               	movwf	drawCircle@x0+1,c
  2285  000226  0E28               	movlw	40
  2286  000228  6E1A               	movwf	drawCircle@x0,c
  2287  00022A  0E00               	movlw	0
  2288  00022C  6E1D               	movwf	drawCircle@y0+1,c
  2289  00022E  0E23               	movlw	35
  2290  000230  6E1C               	movwf	drawCircle@y0,c
  2291  000232  0E00               	movlw	0
  2292  000234  6E1F               	movwf	drawCircle@r+1,c
  2293  000236  0E07               	movlw	7
  2294  000238  6E1E               	movwf	drawCircle@r,c
  2295  00023A  0EF8               	movlw	248
  2296  00023C  6E21               	movwf	drawCircle@color+1,c
  2297  00023E  0E00               	movlw	0
  2298  000240  6E20               	movwf	drawCircle@color,c
  2299  000242  EC61  F006         	call	_drawCircle	;wreg free
  2300                           
  2301                           ;Lab8_redo.c: 209: drawCircle(60, 20 + 15 , 7, 0xFFE0);
  2302  000246  0E00               	movlw	0
  2303  000248  6E1B               	movwf	drawCircle@x0+1,c
  2304  00024A  0E3C               	movlw	60
  2305  00024C  6E1A               	movwf	drawCircle@x0,c
  2306  00024E  0E00               	movlw	0
  2307  000250  6E1D               	movwf	drawCircle@y0+1,c
  2308  000252  0E23               	movlw	35
  2309  000254  6E1C               	movwf	drawCircle@y0,c
  2310  000256  0E00               	movlw	0
  2311  000258  6E1F               	movwf	drawCircle@r+1,c
  2312  00025A  0E07               	movlw	7
  2313  00025C  6E1E               	movwf	drawCircle@r,c
  2314  00025E  0EFF               	movlw	255
  2315  000260  6E21               	movwf	drawCircle@color+1,c
  2316  000262  0EE0               	movlw	224
  2317  000264  6E20               	movwf	drawCircle@color,c
  2318  000266  EC61  F006         	call	_drawCircle	;wreg free
  2319                           
  2320                           ;Lab8_redo.c: 210: fillCircle(80, 20 + 15 , 7, 0x07E0);
  2321  00026A  0E00               	movlw	0
  2322  00026C  6E3A               	movwf	fillCircle@x0+1,c
  2323  00026E  0E50               	movlw	80
  2324  000270  6E39               	movwf	fillCircle@x0,c
  2325  000272  0E00               	movlw	0
  2326  000274  6E3C               	movwf	fillCircle@y0+1,c
  2327  000276  0E23               	movlw	35
  2328  000278  6E3B               	movwf	fillCircle@y0,c
  2329  00027A  0E00               	movlw	0
  2330  00027C  6E3E               	movwf	fillCircle@r+1,c
  2331  00027E  0E07               	movlw	7
  2332  000280  6E3D               	movwf	fillCircle@r,c
  2333  000282  0E07               	movlw	7
  2334  000284  6E40               	movwf	fillCircle@color+1,c
  2335  000286  0EE0               	movlw	224
  2336  000288  6E3F               	movwf	fillCircle@color,c
  2337  00028A  EC70  F010         	call	_fillCircle	;wreg free
  2338                           
  2339                           ;Lab8_redo.c: 211: drawtext (100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  2340  00028E  0E1E               	movlw	30
  2341  000290  6E37               	movwf	drawtext@y,c
  2342  000292  0E5F               	movlw	low _NS_Count
  2343  000294  6E38               	movwf	drawtext@_text,c
  2344  000296  0E00               	movlw	high _NS_Count
  2345  000298  6E39               	movwf	drawtext@_text+1,c
  2346  00029A  0E00               	movlw	0
  2347  00029C  6E3B               	movwf	drawtext@color+1,c
  2348  00029E  0E1F               	movlw	31
  2349  0002A0  6E3A               	movwf	drawtext@color,c
  2350  0002A2  0E00               	movlw	0
  2351  0002A4  6E3D               	movwf	drawtext@bg+1,c
  2352  0002A6  0E00               	movlw	0
  2353  0002A8  6E3C               	movwf	drawtext@bg,c
  2354  0002AA  0E02               	movlw	2
  2355  0002AC  6E3E               	movwf	drawtext@size,c
  2356  0002AE  0E64               	movlw	100
  2357  0002B0  ECCC  F009         	call	_drawtext
  2358                           
  2359                           ;Lab8_redo.c: 214: strcpy(txt, "N/S LT");
  2360  0002B4  C049  F00F         	movff	_txt,strcpy@to
  2361  0002B8  C04A  F010         	movff	_txt+1,strcpy@to+1
  2362  0002BC  0E07               	movlw	low STR_7
  2363  0002BE  6E11               	movwf	strcpy@from,c
  2364  0002C0  0EFD               	movlw	high STR_7
  2365  0002C2  6E12               	movwf	strcpy@from+1,c
  2366  0002C4  EC09  F012         	call	_strcpy	;wreg free
  2367                           
  2368                           ;Lab8_redo.c: 215: drawtext (30, 50, txt, 0xF81F, 0x0000, 1);
  2369  0002C8  0E32               	movlw	50
  2370  0002CA  6E37               	movwf	drawtext@y,c
  2371  0002CC  C049  F038         	movff	_txt,drawtext@_text
  2372  0002D0  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2373  0002D4  0EF8               	movlw	248
  2374  0002D6  6E3B               	movwf	drawtext@color+1,c
  2375  0002D8  0E1F               	movlw	31
  2376  0002DA  6E3A               	movwf	drawtext@color,c
  2377  0002DC  0E00               	movlw	0
  2378  0002DE  6E3D               	movwf	drawtext@bg+1,c
  2379  0002E0  0E00               	movlw	0
  2380  0002E2  6E3C               	movwf	drawtext@bg,c
  2381  0002E4  0E01               	movlw	1
  2382  0002E6  6E3E               	movwf	drawtext@size,c
  2383  0002E8  0E1E               	movlw	30
  2384  0002EA  ECCC  F009         	call	_drawtext
  2385                           
  2386                           ;Lab8_redo.c: 216: drawRect (30, 50 + 15-8, 60, 18, 0xF81F);
  2387  0002EE  0E00               	movlw	0
  2388  0002F0  6E22               	movwf	drawRect@x+1,c
  2389  0002F2  0E1E               	movlw	30
  2390  0002F4  6E21               	movwf	drawRect@x,c
  2391  0002F6  0E00               	movlw	0
  2392  0002F8  6E24               	movwf	drawRect@y+1,c
  2393  0002FA  0E39               	movlw	57
  2394  0002FC  6E23               	movwf	drawRect@y,c
  2395  0002FE  0E00               	movlw	0
  2396  000300  6E26               	movwf	drawRect@w+1,c
  2397  000302  0E3C               	movlw	60
  2398  000304  6E25               	movwf	drawRect@w,c
  2399  000306  0E00               	movlw	0
  2400  000308  6E28               	movwf	drawRect@h+1,c
  2401  00030A  0E12               	movlw	18
  2402  00030C  6E27               	movwf	drawRect@h,c
  2403  00030E  0EF8               	movlw	248
  2404  000310  6E2A               	movwf	drawRect@color+1,c
  2405  000312  0E1F               	movlw	31
  2406  000314  6E29               	movwf	drawRect@color,c
  2407  000316  ECE3  F00F         	call	_drawRect	;wreg free
  2408                           
  2409                           ;Lab8_redo.c: 217: fillCircle(40, 50 + 15, 7, 0xF800);
  2410  00031A  0E00               	movlw	0
  2411  00031C  6E3A               	movwf	fillCircle@x0+1,c
  2412  00031E  0E28               	movlw	40
  2413  000320  6E39               	movwf	fillCircle@x0,c
  2414  000322  0E00               	movlw	0
  2415  000324  6E3C               	movwf	fillCircle@y0+1,c
  2416  000326  0E41               	movlw	65
  2417  000328  6E3B               	movwf	fillCircle@y0,c
  2418  00032A  0E00               	movlw	0
  2419  00032C  6E3E               	movwf	fillCircle@r+1,c
  2420  00032E  0E07               	movlw	7
  2421  000330  6E3D               	movwf	fillCircle@r,c
  2422  000332  0EF8               	movlw	248
  2423  000334  6E40               	movwf	fillCircle@color+1,c
  2424  000336  0E00               	movlw	0
  2425  000338  6E3F               	movwf	fillCircle@color,c
  2426  00033A  EC70  F010         	call	_fillCircle	;wreg free
  2427                           
  2428                           ;Lab8_redo.c: 218: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2429  00033E  0E00               	movlw	0
  2430  000340  6E1B               	movwf	drawCircle@x0+1,c
  2431  000342  0E3C               	movlw	60
  2432  000344  6E1A               	movwf	drawCircle@x0,c
  2433  000346  0E00               	movlw	0
  2434  000348  6E1D               	movwf	drawCircle@y0+1,c
  2435  00034A  0E41               	movlw	65
  2436  00034C  6E1C               	movwf	drawCircle@y0,c
  2437  00034E  0E00               	movlw	0
  2438  000350  6E1F               	movwf	drawCircle@r+1,c
  2439  000352  0E07               	movlw	7
  2440  000354  6E1E               	movwf	drawCircle@r,c
  2441  000356  0EFF               	movlw	255
  2442  000358  6E21               	movwf	drawCircle@color+1,c
  2443  00035A  0EE0               	movlw	224
  2444  00035C  6E20               	movwf	drawCircle@color,c
  2445  00035E  EC61  F006         	call	_drawCircle	;wreg free
  2446                           
  2447                           ;Lab8_redo.c: 219: drawCircle(80, 50 + 15, 7, 0x07E0);
  2448  000362  0E00               	movlw	0
  2449  000364  6E1B               	movwf	drawCircle@x0+1,c
  2450  000366  0E50               	movlw	80
  2451  000368  6E1A               	movwf	drawCircle@x0,c
  2452  00036A  0E00               	movlw	0
  2453  00036C  6E1D               	movwf	drawCircle@y0+1,c
  2454  00036E  0E41               	movlw	65
  2455  000370  6E1C               	movwf	drawCircle@y0,c
  2456  000372  0E00               	movlw	0
  2457  000374  6E1F               	movwf	drawCircle@r+1,c
  2458  000376  0E07               	movlw	7
  2459  000378  6E1E               	movwf	drawCircle@r,c
  2460  00037A  0E07               	movlw	7
  2461  00037C  6E21               	movwf	drawCircle@color+1,c
  2462  00037E  0EE0               	movlw	224
  2463  000380  6E20               	movwf	drawCircle@color,c
  2464  000382  EC61  F006         	call	_drawCircle	;wreg free
  2465                           
  2466                           ;Lab8_redo.c: 220: drawtext (100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2467  000386  0E3C               	movlw	60
  2468  000388  6E37               	movwf	drawtext@y,c
  2469  00038A  0E5C               	movlw	low _NSLT_Count
  2470  00038C  6E38               	movwf	drawtext@_text,c
  2471  00038E  0E00               	movlw	high _NSLT_Count
  2472  000390  6E39               	movwf	drawtext@_text+1,c
  2473  000392  0EF8               	movlw	248
  2474  000394  6E3B               	movwf	drawtext@color+1,c
  2475  000396  0E1F               	movlw	31
  2476  000398  6E3A               	movwf	drawtext@color,c
  2477  00039A  0E00               	movlw	0
  2478  00039C  6E3D               	movwf	drawtext@bg+1,c
  2479  00039E  0E00               	movlw	0
  2480  0003A0  6E3C               	movwf	drawtext@bg,c
  2481  0003A2  0E02               	movlw	2
  2482  0003A4  6E3E               	movwf	drawtext@size,c
  2483  0003A6  0E64               	movlw	100
  2484  0003A8  ECCC  F009         	call	_drawtext
  2485                           
  2486                           ;Lab8_redo.c: 223: strcpy(txt, "EAST/WEST");
  2487  0003AC  C049  F00F         	movff	_txt,strcpy@to
  2488  0003B0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2489  0003B4  0EFD               	movlw	low STR_8
  2490  0003B6  6E11               	movwf	strcpy@from,c
  2491  0003B8  0EFC               	movlw	high STR_8
  2492  0003BA  6E12               	movwf	strcpy@from+1,c
  2493  0003BC  EC09  F012         	call	_strcpy	;wreg free
  2494                           
  2495                           ;Lab8_redo.c: 224: drawtext (30, 80, txt, 0x07FF, 0x0000, 1);
  2496  0003C0  0E50               	movlw	80
  2497  0003C2  6E37               	movwf	drawtext@y,c
  2498  0003C4  C049  F038         	movff	_txt,drawtext@_text
  2499  0003C8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2500  0003CC  0E07               	movlw	7
  2501  0003CE  6E3B               	movwf	drawtext@color+1,c
  2502  0003D0  683A               	setf	drawtext@color,c
  2503  0003D2  0E00               	movlw	0
  2504  0003D4  6E3D               	movwf	drawtext@bg+1,c
  2505  0003D6  0E00               	movlw	0
  2506  0003D8  6E3C               	movwf	drawtext@bg,c
  2507  0003DA  0E01               	movlw	1
  2508  0003DC  6E3E               	movwf	drawtext@size,c
  2509  0003DE  0E1E               	movlw	30
  2510  0003E0  ECCC  F009         	call	_drawtext
  2511                           
  2512                           ;Lab8_redo.c: 225: drawRect (30, 80 + 15-8, 60, 18, 0x07FF);
  2513  0003E4  0E00               	movlw	0
  2514  0003E6  6E22               	movwf	drawRect@x+1,c
  2515  0003E8  0E1E               	movlw	30
  2516  0003EA  6E21               	movwf	drawRect@x,c
  2517  0003EC  0E00               	movlw	0
  2518  0003EE  6E24               	movwf	drawRect@y+1,c
  2519  0003F0  0E57               	movlw	87
  2520  0003F2  6E23               	movwf	drawRect@y,c
  2521  0003F4  0E00               	movlw	0
  2522  0003F6  6E26               	movwf	drawRect@w+1,c
  2523  0003F8  0E3C               	movlw	60
  2524  0003FA  6E25               	movwf	drawRect@w,c
  2525  0003FC  0E00               	movlw	0
  2526  0003FE  6E28               	movwf	drawRect@h+1,c
  2527  000400  0E12               	movlw	18
  2528  000402  6E27               	movwf	drawRect@h,c
  2529  000404  0E07               	movlw	7
  2530  000406  6E2A               	movwf	drawRect@color+1,c
  2531  000408  6829               	setf	drawRect@color,c
  2532  00040A  ECE3  F00F         	call	_drawRect	;wreg free
  2533                           
  2534                           ;Lab8_redo.c: 226: fillCircle(40, 80 + 15, 7, 0xF800);
  2535  00040E  0E00               	movlw	0
  2536  000410  6E3A               	movwf	fillCircle@x0+1,c
  2537  000412  0E28               	movlw	40
  2538  000414  6E39               	movwf	fillCircle@x0,c
  2539  000416  0E00               	movlw	0
  2540  000418  6E3C               	movwf	fillCircle@y0+1,c
  2541  00041A  0E5F               	movlw	95
  2542  00041C  6E3B               	movwf	fillCircle@y0,c
  2543  00041E  0E00               	movlw	0
  2544  000420  6E3E               	movwf	fillCircle@r+1,c
  2545  000422  0E07               	movlw	7
  2546  000424  6E3D               	movwf	fillCircle@r,c
  2547  000426  0EF8               	movlw	248
  2548  000428  6E40               	movwf	fillCircle@color+1,c
  2549  00042A  0E00               	movlw	0
  2550  00042C  6E3F               	movwf	fillCircle@color,c
  2551  00042E  EC70  F010         	call	_fillCircle	;wreg free
  2552                           
  2553                           ;Lab8_redo.c: 227: drawCircle(60, 80 + 15, 7, 0xFFE0);
  2554  000432  0E00               	movlw	0
  2555  000434  6E1B               	movwf	drawCircle@x0+1,c
  2556  000436  0E3C               	movlw	60
  2557  000438  6E1A               	movwf	drawCircle@x0,c
  2558  00043A  0E00               	movlw	0
  2559  00043C  6E1D               	movwf	drawCircle@y0+1,c
  2560  00043E  0E5F               	movlw	95
  2561  000440  6E1C               	movwf	drawCircle@y0,c
  2562  000442  0E00               	movlw	0
  2563  000444  6E1F               	movwf	drawCircle@r+1,c
  2564  000446  0E07               	movlw	7
  2565  000448  6E1E               	movwf	drawCircle@r,c
  2566  00044A  0EFF               	movlw	255
  2567  00044C  6E21               	movwf	drawCircle@color+1,c
  2568  00044E  0EE0               	movlw	224
  2569  000450  6E20               	movwf	drawCircle@color,c
  2570  000452  EC61  F006         	call	_drawCircle	;wreg free
  2571                           
  2572                           ;Lab8_redo.c: 228: drawCircle(80, 80 + 15, 7, 0x07E0);
  2573  000456  0E00               	movlw	0
  2574  000458  6E1B               	movwf	drawCircle@x0+1,c
  2575  00045A  0E50               	movlw	80
  2576  00045C  6E1A               	movwf	drawCircle@x0,c
  2577  00045E  0E00               	movlw	0
  2578  000460  6E1D               	movwf	drawCircle@y0+1,c
  2579  000462  0E5F               	movlw	95
  2580  000464  6E1C               	movwf	drawCircle@y0,c
  2581  000466  0E00               	movlw	0
  2582  000468  6E1F               	movwf	drawCircle@r+1,c
  2583  00046A  0E07               	movlw	7
  2584  00046C  6E1E               	movwf	drawCircle@r,c
  2585  00046E  0E07               	movlw	7
  2586  000470  6E21               	movwf	drawCircle@color+1,c
  2587  000472  0EE0               	movlw	224
  2588  000474  6E20               	movwf	drawCircle@color,c
  2589  000476  EC61  F006         	call	_drawCircle	;wreg free
  2590                           
  2591                           ;Lab8_redo.c: 229: drawtext (100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2592  00047A  0E5A               	movlw	90
  2593  00047C  6E37               	movwf	drawtext@y,c
  2594  00047E  0EB6               	movlw	low _EW_Count
  2595  000480  6E38               	movwf	drawtext@_text,c
  2596  000482  0E00               	movlw	high _EW_Count
  2597  000484  6E39               	movwf	drawtext@_text+1,c
  2598  000486  0E07               	movlw	7
  2599  000488  6E3B               	movwf	drawtext@color+1,c
  2600  00048A  683A               	setf	drawtext@color,c
  2601  00048C  0E00               	movlw	0
  2602  00048E  6E3D               	movwf	drawtext@bg+1,c
  2603  000490  0E00               	movlw	0
  2604  000492  6E3C               	movwf	drawtext@bg,c
  2605  000494  0E02               	movlw	2
  2606  000496  6E3E               	movwf	drawtext@size,c
  2607  000498  0E64               	movlw	100
  2608  00049A  ECCC  F009         	call	_drawtext
  2609                           
  2610                           ;Lab8_redo.c: 232: strcpy(txt, "E/W LT");
  2611  00049E  C049  F00F         	movff	_txt,strcpy@to
  2612  0004A2  C04A  F010         	movff	_txt+1,strcpy@to+1
  2613  0004A6  0E0E               	movlw	low STR_9
  2614  0004A8  6E11               	movwf	strcpy@from,c
  2615  0004AA  0EFD               	movlw	high STR_9
  2616  0004AC  6E12               	movwf	strcpy@from+1,c
  2617  0004AE  EC09  F012         	call	_strcpy	;wreg free
  2618                           
  2619                           ;Lab8_redo.c: 233: drawtext (30, 110, txt, 0xFFFF, 0x0000, 1);
  2620  0004B2  0E6E               	movlw	110
  2621  0004B4  6E37               	movwf	drawtext@y,c
  2622  0004B6  C049  F038         	movff	_txt,drawtext@_text
  2623  0004BA  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2624  0004BE  0EFF               	movlw	255
  2625  0004C0  6E3B               	movwf	drawtext@color+1,c
  2626  0004C2  683A               	setf	drawtext@color,c
  2627  0004C4  0E00               	movlw	0
  2628  0004C6  6E3D               	movwf	drawtext@bg+1,c
  2629  0004C8  0E00               	movlw	0
  2630  0004CA  6E3C               	movwf	drawtext@bg,c
  2631  0004CC  0E01               	movlw	1
  2632  0004CE  6E3E               	movwf	drawtext@size,c
  2633  0004D0  0E1E               	movlw	30
  2634  0004D2  ECCC  F009         	call	_drawtext
  2635                           
  2636                           ;Lab8_redo.c: 234: drawRect (30, 110 + 15-8, 60, 18, 0xFFFF);
  2637  0004D6  0E00               	movlw	0
  2638  0004D8  6E22               	movwf	drawRect@x+1,c
  2639  0004DA  0E1E               	movlw	30
  2640  0004DC  6E21               	movwf	drawRect@x,c
  2641  0004DE  0E00               	movlw	0
  2642  0004E0  6E24               	movwf	drawRect@y+1,c
  2643  0004E2  0E75               	movlw	117
  2644  0004E4  6E23               	movwf	drawRect@y,c
  2645  0004E6  0E00               	movlw	0
  2646  0004E8  6E26               	movwf	drawRect@w+1,c
  2647  0004EA  0E3C               	movlw	60
  2648  0004EC  6E25               	movwf	drawRect@w,c
  2649  0004EE  0E00               	movlw	0
  2650  0004F0  6E28               	movwf	drawRect@h+1,c
  2651  0004F2  0E12               	movlw	18
  2652  0004F4  6E27               	movwf	drawRect@h,c
  2653  0004F6  0EFF               	movlw	255
  2654  0004F8  6E2A               	movwf	drawRect@color+1,c
  2655  0004FA  6829               	setf	drawRect@color,c
  2656  0004FC  ECE3  F00F         	call	_drawRect	;wreg free
  2657                           
  2658                           ;Lab8_redo.c: 235: fillCircle(40, 110 + 15, 7, 0xF800);
  2659  000500  0E00               	movlw	0
  2660  000502  6E3A               	movwf	fillCircle@x0+1,c
  2661  000504  0E28               	movlw	40
  2662  000506  6E39               	movwf	fillCircle@x0,c
  2663  000508  0E00               	movlw	0
  2664  00050A  6E3C               	movwf	fillCircle@y0+1,c
  2665  00050C  0E7D               	movlw	125
  2666  00050E  6E3B               	movwf	fillCircle@y0,c
  2667  000510  0E00               	movlw	0
  2668  000512  6E3E               	movwf	fillCircle@r+1,c
  2669  000514  0E07               	movlw	7
  2670  000516  6E3D               	movwf	fillCircle@r,c
  2671  000518  0EF8               	movlw	248
  2672  00051A  6E40               	movwf	fillCircle@color+1,c
  2673  00051C  0E00               	movlw	0
  2674  00051E  6E3F               	movwf	fillCircle@color,c
  2675  000520  EC70  F010         	call	_fillCircle	;wreg free
  2676                           
  2677                           ;Lab8_redo.c: 236: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2678  000524  0E00               	movlw	0
  2679  000526  6E1B               	movwf	drawCircle@x0+1,c
  2680  000528  0E3C               	movlw	60
  2681  00052A  6E1A               	movwf	drawCircle@x0,c
  2682  00052C  0E00               	movlw	0
  2683  00052E  6E1D               	movwf	drawCircle@y0+1,c
  2684  000530  0E7D               	movlw	125
  2685  000532  6E1C               	movwf	drawCircle@y0,c
  2686  000534  0E00               	movlw	0
  2687  000536  6E1F               	movwf	drawCircle@r+1,c
  2688  000538  0E07               	movlw	7
  2689  00053A  6E1E               	movwf	drawCircle@r,c
  2690  00053C  0EFF               	movlw	255
  2691  00053E  6E21               	movwf	drawCircle@color+1,c
  2692  000540  0EE0               	movlw	224
  2693  000542  6E20               	movwf	drawCircle@color,c
  2694  000544  EC61  F006         	call	_drawCircle	;wreg free
  2695                           
  2696                           ;Lab8_redo.c: 237: drawCircle(80, 110 + 15, 7, 0x07E0);
  2697  000548  0E00               	movlw	0
  2698  00054A  6E1B               	movwf	drawCircle@x0+1,c
  2699  00054C  0E50               	movlw	80
  2700  00054E  6E1A               	movwf	drawCircle@x0,c
  2701  000550  0E00               	movlw	0
  2702  000552  6E1D               	movwf	drawCircle@y0+1,c
  2703  000554  0E7D               	movlw	125
  2704  000556  6E1C               	movwf	drawCircle@y0,c
  2705  000558  0E00               	movlw	0
  2706  00055A  6E1F               	movwf	drawCircle@r+1,c
  2707  00055C  0E07               	movlw	7
  2708  00055E  6E1E               	movwf	drawCircle@r,c
  2709  000560  0E07               	movlw	7
  2710  000562  6E21               	movwf	drawCircle@color+1,c
  2711  000564  0EE0               	movlw	224
  2712  000566  6E20               	movwf	drawCircle@color,c
  2713  000568  EC61  F006         	call	_drawCircle	;wreg free
  2714                           
  2715                           ;Lab8_redo.c: 238: drawtext (100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2716  00056C  0E78               	movlw	120
  2717  00056E  6E37               	movwf	drawtext@y,c
  2718  000570  0EB3               	movlw	low _EWLT_Count
  2719  000572  6E38               	movwf	drawtext@_text,c
  2720  000574  0E00               	movlw	high _EWLT_Count
  2721  000576  6E39               	movwf	drawtext@_text+1,c
  2722  000578  0EFF               	movlw	255
  2723  00057A  6E3B               	movwf	drawtext@color+1,c
  2724  00057C  683A               	setf	drawtext@color,c
  2725  00057E  0E00               	movlw	0
  2726  000580  6E3D               	movwf	drawtext@bg+1,c
  2727  000582  0E00               	movlw	0
  2728  000584  6E3C               	movwf	drawtext@bg,c
  2729  000586  0E02               	movlw	2
  2730  000588  6E3E               	movwf	drawtext@size,c
  2731  00058A  0E64               	movlw	100
  2732  00058C  ECCC  F009         	call	_drawtext
  2733                           
  2734                           ;Lab8_redo.c: 241: strcpy(txt, "PNS");
  2735  000590  C049  F00F         	movff	_txt,strcpy@to
  2736  000594  C04A  F010         	movff	_txt+1,strcpy@to+1
  2737  000598  0E23               	movlw	low STR_10
  2738  00059A  6E11               	movwf	strcpy@from,c
  2739  00059C  0EFD               	movlw	high STR_10
  2740  00059E  6E12               	movwf	strcpy@from+1,c
  2741  0005A0  EC09  F012         	call	_strcpy	;wreg free
  2742                           
  2743                           ;Lab8_redo.c: 242: drawtext(3, 20, txt, 0x001F, 0x0000, 1);
  2744  0005A4  0E14               	movlw	20
  2745  0005A6  6E37               	movwf	drawtext@y,c
  2746  0005A8  C049  F038         	movff	_txt,drawtext@_text
  2747  0005AC  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2748  0005B0  0E00               	movlw	0
  2749  0005B2  6E3B               	movwf	drawtext@color+1,c
  2750  0005B4  0E1F               	movlw	31
  2751  0005B6  6E3A               	movwf	drawtext@color,c
  2752  0005B8  0E00               	movlw	0
  2753  0005BA  6E3D               	movwf	drawtext@bg+1,c
  2754  0005BC  0E00               	movlw	0
  2755  0005BE  6E3C               	movwf	drawtext@bg,c
  2756  0005C0  0E01               	movlw	1
  2757  0005C2  6E3E               	movwf	drawtext@size,c
  2758  0005C4  0E03               	movlw	3
  2759  0005C6  ECCC  F009         	call	_drawtext
  2760                           
  2761                           ;Lab8_redo.c: 243: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  2762  0005CA  0E1E               	movlw	30
  2763  0005CC  6E37               	movwf	drawtext@y,c
  2764  0005CE  0EBC               	movlw	low _PED_NS_Count
  2765  0005D0  6E38               	movwf	drawtext@_text,c
  2766  0005D2  0E00               	movlw	high _PED_NS_Count
  2767  0005D4  6E39               	movwf	drawtext@_text+1,c
  2768  0005D6  0E00               	movlw	0
  2769  0005D8  6E3B               	movwf	drawtext@color+1,c
  2770  0005DA  0E1F               	movlw	31
  2771  0005DC  6E3A               	movwf	drawtext@color,c
  2772  0005DE  0E00               	movlw	0
  2773  0005E0  6E3D               	movwf	drawtext@bg+1,c
  2774  0005E2  0E00               	movlw	0
  2775  0005E4  6E3C               	movwf	drawtext@bg,c
  2776  0005E6  0E02               	movlw	2
  2777  0005E8  6E3E               	movwf	drawtext@size,c
  2778  0005EA  0E02               	movlw	2
  2779  0005EC  ECCC  F009         	call	_drawtext
  2780                           
  2781                           ;Lab8_redo.c: 246: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  2782  0005F0  0E5A               	movlw	90
  2783  0005F2  6E37               	movwf	drawtext@y,c
  2784  0005F4  0EB9               	movlw	low _PED_EW_Count
  2785  0005F6  6E38               	movwf	drawtext@_text,c
  2786  0005F8  0E00               	movlw	high _PED_EW_Count
  2787  0005FA  6E39               	movwf	drawtext@_text+1,c
  2788  0005FC  0E07               	movlw	7
  2789  0005FE  6E3B               	movwf	drawtext@color+1,c
  2790  000600  683A               	setf	drawtext@color,c
  2791  000602  0E00               	movlw	0
  2792  000604  6E3D               	movwf	drawtext@bg+1,c
  2793  000606  0E00               	movlw	0
  2794  000608  6E3C               	movwf	drawtext@bg,c
  2795  00060A  0E02               	movlw	2
  2796  00060C  6E3E               	movwf	drawtext@size,c
  2797  00060E  0E02               	movlw	2
  2798  000610  ECCC  F009         	call	_drawtext
  2799                           
  2800                           ;Lab8_redo.c: 247: strcpy(txt, "PEW");
  2801  000614  C049  F00F         	movff	_txt,strcpy@to
  2802  000618  C04A  F010         	movff	_txt+1,strcpy@to+1
  2803  00061C  0E27               	movlw	low STR_11
  2804  00061E  6E11               	movwf	strcpy@from,c
  2805  000620  0EFD               	movlw	high STR_11
  2806  000622  6E12               	movwf	strcpy@from+1,c
  2807  000624  EC09  F012         	call	_strcpy	;wreg free
  2808                           
  2809                           ;Lab8_redo.c: 248: drawtext(3, 80, txt, 0x07FF, 0x0000, 1);
  2810  000628  0E50               	movlw	80
  2811  00062A  6E37               	movwf	drawtext@y,c
  2812  00062C  C049  F038         	movff	_txt,drawtext@_text
  2813  000630  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2814  000634  0E07               	movlw	7
  2815  000636  6E3B               	movwf	drawtext@color+1,c
  2816  000638  683A               	setf	drawtext@color,c
  2817  00063A  0E00               	movlw	0
  2818  00063C  6E3D               	movwf	drawtext@bg+1,c
  2819  00063E  0E00               	movlw	0
  2820  000640  6E3C               	movwf	drawtext@bg,c
  2821  000642  0E01               	movlw	1
  2822  000644  6E3E               	movwf	drawtext@size,c
  2823  000646  0E03               	movlw	3
  2824  000648  ECCC  F009         	call	_drawtext
  2825                           
  2826                           ;Lab8_redo.c: 251: strcpy(txt, "NSP NSLT EWP EWLT MR");
  2827  00064C  C049  F00F         	movff	_txt,strcpy@to
  2828  000650  C04A  F010         	movff	_txt+1,strcpy@to+1
  2829  000654  0EC8               	movlw	low STR_12
  2830  000656  6E11               	movwf	strcpy@from,c
  2831  000658  0EFC               	movlw	high STR_12
  2832  00065A  6E12               	movwf	strcpy@from+1,c
  2833  00065C  EC09  F012         	call	_strcpy	;wreg free
  2834                           
  2835                           ;Lab8_redo.c: 252: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2836  000660  0E8C               	movlw	140
  2837  000662  6E37               	movwf	drawtext@y,c
  2838  000664  C049  F038         	movff	_txt,drawtext@_text
  2839  000668  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2840  00066C  0EFF               	movlw	255
  2841  00066E  6E3B               	movwf	drawtext@color+1,c
  2842  000670  683A               	setf	drawtext@color,c
  2843  000672  0E00               	movlw	0
  2844  000674  6E3D               	movwf	drawtext@bg+1,c
  2845  000676  0E00               	movlw	0
  2846  000678  6E3C               	movwf	drawtext@bg,c
  2847  00067A  0E01               	movlw	1
  2848  00067C  6E3E               	movwf	drawtext@size,c
  2849  00067E  0E01               	movlw	1
  2850  000680  ECCC  F009         	call	_drawtext
  2851                           
  2852                           ;Lab8_redo.c: 253: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2853  000684  0E95               	movlw	149
  2854  000686  6E37               	movwf	drawtext@y,c
  2855  000688  0E70               	movlw	low _SW_NSPED_Txt
  2856  00068A  6E38               	movwf	drawtext@_text,c
  2857  00068C  0E00               	movlw	high _SW_NSPED_Txt
  2858  00068E  6E39               	movwf	drawtext@_text+1,c
  2859  000690  0EFF               	movlw	255
  2860  000692  6E3B               	movwf	drawtext@color+1,c
  2861  000694  683A               	setf	drawtext@color,c
  2862  000696  0E00               	movlw	0
  2863  000698  6E3D               	movwf	drawtext@bg+1,c
  2864  00069A  0E00               	movlw	0
  2865  00069C  6E3C               	movwf	drawtext@bg,c
  2866  00069E  0E01               	movlw	1
  2867  0006A0  6E3E               	movwf	drawtext@size,c
  2868  0006A2  0E06               	movlw	6
  2869  0006A4  ECCC  F009         	call	_drawtext
  2870                           
  2871                           ;Lab8_redo.c: 254: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2872  0006A8  0E95               	movlw	149
  2873  0006AA  6E37               	movwf	drawtext@y,c
  2874  0006AC  0E6E               	movlw	low _SW_NSLT_Txt
  2875  0006AE  6E38               	movwf	drawtext@_text,c
  2876  0006B0  0E00               	movlw	high _SW_NSLT_Txt
  2877  0006B2  6E39               	movwf	drawtext@_text+1,c
  2878  0006B4  0EFF               	movlw	255
  2879  0006B6  6E3B               	movwf	drawtext@color+1,c
  2880  0006B8  683A               	setf	drawtext@color,c
  2881  0006BA  0E00               	movlw	0
  2882  0006BC  6E3D               	movwf	drawtext@bg+1,c
  2883  0006BE  0E00               	movlw	0
  2884  0006C0  6E3C               	movwf	drawtext@bg,c
  2885  0006C2  0E01               	movlw	1
  2886  0006C4  6E3E               	movwf	drawtext@size,c
  2887  0006C6  0E20               	movlw	32
  2888  0006C8  ECCC  F009         	call	_drawtext
  2889                           
  2890                           ;Lab8_redo.c: 255: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2891  0006CC  0E95               	movlw	149
  2892  0006CE  6E37               	movwf	drawtext@y,c
  2893  0006D0  0E6A               	movlw	low _SW_EWPED_Txt
  2894  0006D2  6E38               	movwf	drawtext@_text,c
  2895  0006D4  0E00               	movlw	high _SW_EWPED_Txt
  2896  0006D6  6E39               	movwf	drawtext@_text+1,c
  2897  0006D8  0EFF               	movlw	255
  2898  0006DA  6E3B               	movwf	drawtext@color+1,c
  2899  0006DC  683A               	setf	drawtext@color,c
  2900  0006DE  0E00               	movlw	0
  2901  0006E0  6E3D               	movwf	drawtext@bg+1,c
  2902  0006E2  0E00               	movlw	0
  2903  0006E4  6E3C               	movwf	drawtext@bg,c
  2904  0006E6  0E01               	movlw	1
  2905  0006E8  6E3E               	movwf	drawtext@size,c
  2906  0006EA  0E3A               	movlw	58
  2907  0006EC  ECCC  F009         	call	_drawtext
  2908                           
  2909                           ;Lab8_redo.c: 256: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2910  0006F0  0E95               	movlw	149
  2911  0006F2  6E37               	movwf	drawtext@y,c
  2912  0006F4  0E68               	movlw	low _SW_EWLT_Txt
  2913  0006F6  6E38               	movwf	drawtext@_text,c
  2914  0006F8  0E00               	movlw	high _SW_EWLT_Txt
  2915  0006FA  6E39               	movwf	drawtext@_text+1,c
  2916  0006FC  0EFF               	movlw	255
  2917  0006FE  6E3B               	movwf	drawtext@color+1,c
  2918  000700  683A               	setf	drawtext@color,c
  2919  000702  0E00               	movlw	0
  2920  000704  6E3D               	movwf	drawtext@bg+1,c
  2921  000706  0E00               	movlw	0
  2922  000708  6E3C               	movwf	drawtext@bg,c
  2923  00070A  0E01               	movlw	1
  2924  00070C  6E3E               	movwf	drawtext@size,c
  2925  00070E  0E57               	movlw	87
  2926  000710  ECCC  F009         	call	_drawtext
  2927                           
  2928                           ;Lab8_redo.c: 257: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  2929  000714  0E95               	movlw	149
  2930  000716  6E37               	movwf	drawtext@y,c
  2931  000718  0E6C               	movlw	low _SW_MODE_Txt
  2932  00071A  6E38               	movwf	drawtext@_text,c
  2933  00071C  0E00               	movlw	high _SW_MODE_Txt
  2934  00071E  6E39               	movwf	drawtext@_text+1,c
  2935  000720  0EFF               	movlw	255
  2936  000722  6E3B               	movwf	drawtext@color+1,c
  2937  000724  683A               	setf	drawtext@color,c
  2938  000726  0E00               	movlw	0
  2939  000728  6E3D               	movwf	drawtext@bg+1,c
  2940  00072A  0E00               	movlw	0
  2941  00072C  6E3C               	movwf	drawtext@bg,c
  2942  00072E  0E01               	movlw	1
  2943  000730  6E3E               	movwf	drawtext@size,c
  2944  000732  0E70               	movlw	112
  2945  000734  ECCC  F009         	call	_drawtext
  2946  000738  0012               	return		;funcret
  2947  00073A                     __end_of_Initialize_Screen:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           postdec1	equ	0xFE5
  2956                           fsr1l	equ	0xFE1
  2957                           status	equ	0xFD8
  2958                           
  2959 ;; *************** function _fillScreen *****************
  2960 ;; Defined at:
  2961 ;;		line 652 in file "ST7735_TFT.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  color           2   33[COMRAM] unsigned int 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;		None               void
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;Total ram usage:        2 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    6
  2982 ;; This function calls:
  2983 ;;		_fillRectangle
  2984 ;; This function is called by:
  2985 ;;		_Initialize_Screen
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text4
  2990  002512                     __ptext4:
  2991                           	opt stack 0
  2992  002512                     _fillScreen:
  2993                           	opt stack 23
  2994                           
  2995                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  2996                           
  2997                           ;incstack = 0
  2998  002512  0E00               	movlw	0
  2999  002514  6E16               	movwf	fillRectangle@y,c
  3000  002516  0E80               	movlw	128
  3001  002518  6E17               	movwf	fillRectangle@w,c
  3002  00251A  0EA0               	movlw	160
  3003  00251C  6E18               	movwf	fillRectangle@h,c
  3004  00251E  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3005  002522  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3006  002526  0E00               	movlw	0
  3007  002528  EC3B  F00B         	call	_fillRectangle
  3008  00252C  0012               	return		;funcret
  3009  00252E                     __end_of_fillScreen:
  3010                           	opt stack 0
  3011                           tblptru	equ	0xFF8
  3012                           tblptrh	equ	0xFF7
  3013                           tblptrl	equ	0xFF6
  3014                           tablat	equ	0xFF5
  3015                           postinc0	equ	0xFEE
  3016                           wreg	equ	0xFE8
  3017                           postdec1	equ	0xFE5
  3018                           fsr1l	equ	0xFE1
  3019                           status	equ	0xFD8
  3020                           
  3021 ;; *************** function _fillRectangle *****************
  3022 ;; Defined at:
  3023 ;;		line 536 in file "ST7735_TFT.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  x               1    wreg     unsigned char 
  3026 ;;  y               1   21[COMRAM] unsigned char 
  3027 ;;  w               1   22[COMRAM] unsigned char 
  3028 ;;  h               1   23[COMRAM] unsigned char 
  3029 ;;  color           2   24[COMRAM] unsigned int 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  x               1   32[COMRAM] unsigned char 
  3032 ;;  lo              1   31[COMRAM] unsigned char 
  3033 ;;  hi              1   30[COMRAM] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;		None               void
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3043 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;Total ram usage:       12 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    5
  3050 ;; This function calls:
  3051 ;;		_setAddrWindow
  3052 ;;		_spiwrite
  3053 ;; This function is called by:
  3054 ;;		_fillScreen
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text5
  3059  001676                     __ptext5:
  3060                           	opt stack 0
  3061  001676                     _fillRectangle:
  3062                           	opt stack 23
  3063                           
  3064                           ;incstack = 0
  3065                           ;fillRectangle@x stored from wreg
  3066  001676  6E21               	movwf	fillRectangle@x,c
  3067                           
  3068                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3069                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3070  001678  0E80               	movlw	128
  3071  00167A  6021               	cpfslt	fillRectangle@x,c
  3072  00167C  D069               	goto	l238
  3073  00167E  0E9F               	movlw	159
  3074  001680  6416               	cpfsgt	fillRectangle@y,c
  3075  001682  D001               	goto	l4812
  3076                           
  3077                           ;ST7735_TFT.c: 540: return;
  3078  001684  D065               	goto	l238
  3079  001686                     l4812:
  3080                           
  3081                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3082  001686  0EFF               	movlw	255
  3083  001688  6E1B               	movwf	??_fillRectangle& (0+255),c
  3084  00168A  0EFF               	movlw	255
  3085  00168C  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3086  00168E  5017               	movf	fillRectangle@w,w,c
  3087  001690  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3088  001694  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3089  001696  261D               	addwf	??_fillRectangle+2,f,c
  3090  001698  0E00               	movlw	0
  3091  00169A  221E               	addwfc	??_fillRectangle+3,f,c
  3092  00169C  501B               	movf	??_fillRectangle,w,c
  3093  00169E  261D               	addwf	??_fillRectangle+2,f,c
  3094  0016A0  501C               	movf	??_fillRectangle+1,w,c
  3095  0016A2  221E               	addwfc	??_fillRectangle+3,f,c
  3096  0016A4  BE1E               	btfsc	??_fillRectangle+3,7,c
  3097  0016A6  D00A               	goto	l239
  3098  0016A8  501E               	movf	??_fillRectangle+3,w,c
  3099  0016AA  E104               	bnz	u3570
  3100  0016AC  0E80               	movlw	128
  3101  0016AE  5C1D               	subwf	??_fillRectangle+2,w,c
  3102  0016B0  A0D8               	btfss	status,0,c
  3103  0016B2  D004               	goto	l239
  3104  0016B4                     u3570:
  3105                           
  3106                           ;ST7735_TFT.c: 542: w = 128 - x;
  3107  0016B4  5021               	movf	fillRectangle@x,w,c
  3108  0016B6  0800               	sublw	0
  3109  0016B8  0F80               	addlw	128
  3110  0016BA  6E17               	movwf	fillRectangle@w,c
  3111  0016BC                     l239:
  3112                           
  3113                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3114  0016BC  0EFF               	movlw	255
  3115  0016BE  6E1B               	movwf	??_fillRectangle& (0+255),c
  3116  0016C0  0EFF               	movlw	255
  3117  0016C2  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3118  0016C4  5018               	movf	fillRectangle@h,w,c
  3119  0016C6  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3120  0016CA  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3121  0016CC  261D               	addwf	??_fillRectangle+2,f,c
  3122  0016CE  0E00               	movlw	0
  3123  0016D0  221E               	addwfc	??_fillRectangle+3,f,c
  3124  0016D2  501B               	movf	??_fillRectangle,w,c
  3125  0016D4  261D               	addwf	??_fillRectangle+2,f,c
  3126  0016D6  501C               	movf	??_fillRectangle+1,w,c
  3127  0016D8  221E               	addwfc	??_fillRectangle+3,f,c
  3128  0016DA  BE1E               	btfsc	??_fillRectangle+3,7,c
  3129  0016DC  D00B               	goto	l4818
  3130  0016DE  501E               	movf	??_fillRectangle+3,w,c
  3131  0016E0  E104               	bnz	u3580
  3132  0016E2  0EA0               	movlw	160
  3133  0016E4  5C1D               	subwf	??_fillRectangle+2,w,c
  3134  0016E6  A0D8               	btfss	status,0,c
  3135  0016E8  D005               	goto	l4818
  3136  0016EA                     u3580:
  3137                           
  3138                           ;ST7735_TFT.c: 544: h = 160 - y;
  3139  0016EA  5016               	movf	fillRectangle@y,w,c
  3140  0016EC  0800               	sublw	0
  3141  0016EE  0FA0               	addlw	160
  3142  0016F0  6E18               	movwf	fillRectangle@h,c
  3143  0016F2  D000               	goto	l4818
  3144  0016F4                     l4818:
  3145                           
  3146                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3147  0016F4  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3148  0016F8  5021               	movf	fillRectangle@x,w,c
  3149  0016FA  2417               	addwf	fillRectangle@w,w,c
  3150  0016FC  6E1B               	movwf	??_fillRectangle& (0+255),c
  3151  0016FE  041B               	decf	??_fillRectangle,w,c
  3152  001700  6E13               	movwf	setAddrWindow@x1,c
  3153  001702  5016               	movf	fillRectangle@y,w,c
  3154  001704  2418               	addwf	fillRectangle@h,w,c
  3155  001706  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3156  001708  041C               	decf	??_fillRectangle+1,w,c
  3157  00170A  6E14               	movwf	setAddrWindow@y1,c
  3158  00170C  5021               	movf	fillRectangle@x,w,c
  3159  00170E  EC99  F010         	call	_setAddrWindow
  3160                           
  3161                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3162  001712  501A               	movf	fillRectangle@color+1,w,c
  3163  001714  6E1F               	movwf	fillRectangle@hi,c
  3164  001716  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3165                           
  3166                           ;ST7735_TFT.c: 547: PORTDbits.RD3 = 1;
  3167  00171A  8683               	bsf	3971,3,c	;volatile
  3168                           
  3169                           ;ST7735_TFT.c: 548: PORTDbits.RD4 = 0;
  3170  00171C  9883               	bcf	3971,4,c	;volatile
  3171                           
  3172                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3173  00171E  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3174  001722                     l4830:
  3175  001722  5016               	movf	fillRectangle@y,w,c
  3176  001724  B4D8               	btfsc	status,2,c
  3177  001726  D013               	goto	l242
  3178  001728  D001               	goto	l241
  3179  00172A  D011               	goto	l242
  3180  00172C                     l241:
  3181                           
  3182                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3183  00172C  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3184  001730                     l4834:
  3185  001730  5021               	movf	fillRectangle@x,w,c
  3186  001732  B4D8               	btfsc	status,2,c
  3187  001734  D00A               	goto	l4844
  3188  001736  D001               	goto	l4838
  3189  001738  D008               	goto	l4844
  3190  00173A                     l4838:
  3191                           
  3192                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3193  00173A  501F               	movf	fillRectangle@hi,w,c
  3194  00173C  ECE7  F012         	call	_spiwrite
  3195                           
  3196                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3197  001740  5020               	movf	fillRectangle@lo,w,c
  3198  001742  ECE7  F012         	call	_spiwrite
  3199  001746  0621               	decf	fillRectangle@x,f,c
  3200  001748  D7F3               	goto	l4834
  3201  00174A                     l4844:
  3202  00174A  0616               	decf	fillRectangle@y,f,c
  3203  00174C  D7EA               	goto	l4830
  3204  00174E                     l242:
  3205                           
  3206                           ;ST7735_TFT.c: 554: }
  3207                           ;ST7735_TFT.c: 555: }
  3208                           ;ST7735_TFT.c: 556: PORTDbits.RD4 = 1;
  3209  00174E  8883               	bsf	3971,4,c	;volatile
  3210  001750                     l238:
  3211  001750  0012               	return		;funcret
  3212  001752                     __end_of_fillRectangle:
  3213                           	opt stack 0
  3214                           tblptru	equ	0xFF8
  3215                           tblptrh	equ	0xFF7
  3216                           tblptrl	equ	0xFF6
  3217                           tablat	equ	0xFF5
  3218                           postinc0	equ	0xFEE
  3219                           wreg	equ	0xFE8
  3220                           postdec1	equ	0xFE5
  3221                           fsr1l	equ	0xFE1
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _drawRect *****************
  3225 ;; Defined at:
  3226 ;;		line 718 in file "ST7735_TFT.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;  x               2   32[COMRAM] unsigned int 
  3229 ;;  y               2   34[COMRAM] unsigned int 
  3230 ;;  w               2   36[COMRAM] unsigned int 
  3231 ;;  h               2   38[COMRAM] unsigned int 
  3232 ;;  color           2   40[COMRAM] unsigned int 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;		None
  3235 ;; Return value:  Size  Location     Type
  3236 ;;		None               void
  3237 ;; Registers used:
  3238 ;;		wreg, status,2, status,0, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3244 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;Total ram usage:       11 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    6
  3251 ;; This function calls:
  3252 ;;		_drawFastHLine
  3253 ;;		_drawFastVLine
  3254 ;; This function is called by:
  3255 ;;		_Initialize_Screen
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text6
  3260  001FC6                     __ptext6:
  3261                           	opt stack 0
  3262  001FC6                     _drawRect:
  3263                           	opt stack 23
  3264                           
  3265                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3266                           
  3267                           ;incstack = 0
  3268  001FC6  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3269  001FCA  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3270  001FCE  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3271  001FD2  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3272  001FD6  5021               	movf	drawRect@x,w,c
  3273  001FD8  EC20  F00E         	call	_drawFastHLine
  3274                           
  3275                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3276  001FDC  5023               	movf	drawRect@y,w,c
  3277  001FDE  2427               	addwf	drawRect@h,w,c
  3278  001FE0  6E2B               	movwf	??_drawRect& (0+255),c
  3279  001FE2  042B               	decf	??_drawRect,w,c
  3280  001FE4  6E16               	movwf	drawFastHLine@y,c
  3281  001FE6  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3282  001FEA  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3283  001FEE  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3284  001FF2  5021               	movf	drawRect@x,w,c
  3285  001FF4  EC20  F00E         	call	_drawFastHLine
  3286                           
  3287                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3288  001FF8  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3289  001FFC  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3290  002000  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3291  002004  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3292  002008  5021               	movf	drawRect@x,w,c
  3293  00200A  EC64  F00E         	call	_drawFastVLine
  3294                           
  3295                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3296  00200E  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3297  002012  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3298  002016  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3299  00201A  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3300  00201E  5021               	movf	drawRect@x,w,c
  3301  002020  2425               	addwf	drawRect@w,w,c
  3302  002022  6E2B               	movwf	??_drawRect& (0+255),c
  3303  002024  042B               	decf	??_drawRect,w,c
  3304  002026  EC64  F00E         	call	_drawFastVLine
  3305  00202A  0012               	return		;funcret
  3306  00202C                     __end_of_drawRect:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           postinc0	equ	0xFEE
  3313                           wreg	equ	0xFE8
  3314                           postdec1	equ	0xFE5
  3315                           fsr1l	equ	0xFE1
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function _drawFastHLine *****************
  3319 ;; Defined at:
  3320 ;;		line 657 in file "ST7735_TFT.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  x               1    wreg     unsigned char 
  3323 ;;  y               1   21[COMRAM] unsigned char 
  3324 ;;  w               1   22[COMRAM] unsigned char 
  3325 ;;  color           2   23[COMRAM] unsigned int 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  x               1   31[COMRAM] unsigned char 
  3328 ;;  lo              1   30[COMRAM] unsigned char 
  3329 ;;  hi              1   29[COMRAM] unsigned char 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;		None               void
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;Total ram usage:       11 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    5
  3346 ;; This function calls:
  3347 ;;		_setAddrWindow
  3348 ;;		_spiwrite
  3349 ;; This function is called by:
  3350 ;;		_drawRect
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text7
  3355  001C40                     __ptext7:
  3356                           	opt stack 0
  3357  001C40                     _drawFastHLine:
  3358                           	opt stack 23
  3359                           
  3360                           ;incstack = 0
  3361                           ;drawFastHLine@x stored from wreg
  3362  001C40  6E20               	movwf	drawFastHLine@x,c
  3363                           
  3364                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3365                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3366  001C42  0E80               	movlw	128
  3367  001C44  6020               	cpfslt	drawFastHLine@x,c
  3368  001C46  D03F               	goto	l283
  3369  001C48  0E9F               	movlw	159
  3370  001C4A  6416               	cpfsgt	drawFastHLine@y,c
  3371  001C4C  D001               	goto	l4852
  3372                           
  3373                           ;ST7735_TFT.c: 661: return;
  3374  001C4E  D03B               	goto	l283
  3375  001C50                     l4852:
  3376                           
  3377                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3378  001C50  0EFF               	movlw	255
  3379  001C52  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3380  001C54  0EFF               	movlw	255
  3381  001C56  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3382  001C58  5017               	movf	drawFastHLine@w,w,c
  3383  001C5A  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3384  001C5E  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3385  001C60  261C               	addwf	??_drawFastHLine+2,f,c
  3386  001C62  0E00               	movlw	0
  3387  001C64  221D               	addwfc	??_drawFastHLine+3,f,c
  3388  001C66  501A               	movf	??_drawFastHLine,w,c
  3389  001C68  261C               	addwf	??_drawFastHLine+2,f,c
  3390  001C6A  501B               	movf	??_drawFastHLine+1,w,c
  3391  001C6C  221D               	addwfc	??_drawFastHLine+3,f,c
  3392  001C6E  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3393  001C70  D00B               	goto	l4856
  3394  001C72  501D               	movf	??_drawFastHLine+3,w,c
  3395  001C74  E104               	bnz	u3650
  3396  001C76  0E80               	movlw	128
  3397  001C78  5C1C               	subwf	??_drawFastHLine+2,w,c
  3398  001C7A  A0D8               	btfss	status,0,c
  3399  001C7C  D005               	goto	l4856
  3400  001C7E                     u3650:
  3401                           
  3402                           ;ST7735_TFT.c: 663: w = 128 - x;
  3403  001C7E  5020               	movf	drawFastHLine@x,w,c
  3404  001C80  0800               	sublw	0
  3405  001C82  0F80               	addlw	128
  3406  001C84  6E17               	movwf	drawFastHLine@w,c
  3407  001C86  D000               	goto	l4856
  3408  001C88                     l4856:
  3409                           
  3410                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3411  001C88  5019               	movf	drawFastHLine@color+1,w,c
  3412  001C8A  6E1E               	movwf	drawFastHLine@hi,c
  3413  001C8C  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3414                           
  3415                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3416  001C90  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3417  001C94  5020               	movf	drawFastHLine@x,w,c
  3418  001C96  2417               	addwf	drawFastHLine@w,w,c
  3419  001C98  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3420  001C9A  041A               	decf	??_drawFastHLine,w,c
  3421  001C9C  6E13               	movwf	setAddrWindow@x1,c
  3422  001C9E  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3423  001CA2  5020               	movf	drawFastHLine@x,w,c
  3424  001CA4  EC99  F010         	call	_setAddrWindow
  3425                           
  3426                           ;ST7735_TFT.c: 666: PORTDbits.RD3 = 1;
  3427  001CA8  8683               	bsf	3971,3,c	;volatile
  3428                           
  3429                           ;ST7735_TFT.c: 667: PORTDbits.RD4 = 0;
  3430  001CAA  9883               	bcf	3971,4,c	;volatile
  3431                           
  3432                           ;ST7735_TFT.c: 669: while (w--) {
  3433  001CAC  D007               	goto	l4868
  3434  001CAE                     l4866:
  3435                           
  3436                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3437  001CAE  501E               	movf	drawFastHLine@hi,w,c
  3438  001CB0  ECE7  F012         	call	_spiwrite
  3439                           
  3440                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3441  001CB4  501F               	movf	drawFastHLine@lo,w,c
  3442  001CB6  ECE7  F012         	call	_spiwrite
  3443  001CBA  D000               	goto	l4868
  3444  001CBC                     l4868:
  3445  001CBC  0617               	decf	drawFastHLine@w,f,c
  3446  001CBE  2817               	incf	drawFastHLine@w,w,c
  3447  001CC0  A4D8               	btfss	status,2,c
  3448  001CC2  D7F5               	goto	l4866
  3449                           
  3450                           ;ST7735_TFT.c: 672: }
  3451                           ;ST7735_TFT.c: 673: PORTDbits.RD4 = 1;
  3452  001CC4  8883               	bsf	3971,4,c	;volatile
  3453  001CC6                     l283:
  3454  001CC6  0012               	return		;funcret
  3455  001CC8                     __end_of_drawFastHLine:
  3456                           	opt stack 0
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           postdec1	equ	0xFE5
  3464                           fsr1l	equ	0xFE1
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _TFT_GreenTab_Initialize *****************
  3468 ;; Defined at:
  3469 ;;		line 677 in file "ST7735_TFT.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;		None               void
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;Total ram usage:        0 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    5
  3490 ;; This function calls:
  3491 ;;		_Rcmd1
  3492 ;;		_Rcmd2red
  3493 ;;		_Rcmd3
  3494 ;;		_write_command
  3495 ;;		_write_data
  3496 ;; This function is called by:
  3497 ;;		_Initialize_Screen
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text8
  3502  002474                     __ptext8:
  3503                           	opt stack 0
  3504  002474                     _TFT_GreenTab_Initialize:
  3505                           	opt stack 24
  3506                           
  3507                           ;ST7735_TFT.c: 679: PORTDbits.RD4 = 1;
  3508                           
  3509                           ;incstack = 0
  3510  002474  8883               	bsf	3971,4,c	;volatile
  3511                           
  3512                           ;ST7735_TFT.c: 680: PORTDbits.RD3 = 0;
  3513  002476  9683               	bcf	3971,3,c	;volatile
  3514                           
  3515                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3516  002478  0E80               	movlw	128
  3517  00247A  6EC7               	movwf	4039,c	;volatile
  3518                           
  3519                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3520  00247C  0E30               	movlw	48
  3521  00247E  6EC6               	movwf	4038,c	;volatile
  3522                           
  3523                           ;ST7735_TFT.c: 686: Rcmd1();
  3524  002480  EC44  F009         	call	_Rcmd1	;wreg free
  3525                           
  3526                           ;ST7735_TFT.c: 687: Rcmd2red();
  3527  002484  EC75  F011         	call	_Rcmd2red	;wreg free
  3528                           
  3529                           ;ST7735_TFT.c: 688: Rcmd3();
  3530  002488  EC51  F00A         	call	_Rcmd3	;wreg free
  3531                           
  3532                           ;ST7735_TFT.c: 689: write_command(0x36);
  3533  00248C  0E36               	movlw	54
  3534  00248E  EC0B  F013         	call	_write_command
  3535                           
  3536                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3537  002492  0EC0               	movlw	192
  3538  002494  EC03  F013         	call	_write_data
  3539                           
  3540                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3541  002498  0E01               	movlw	1
  3542  00249A  6E56               	movwf	__tft_type,c
  3543  00249C  0012               	return		;funcret
  3544  00249E                     __end_of_TFT_GreenTab_Initialize:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postdec1	equ	0xFE5
  3553                           fsr1l	equ	0xFE1
  3554                           status	equ	0xFD8
  3555                           
  3556 ;; *************** function _Rcmd3 *****************
  3557 ;; Defined at:
  3558 ;;		line 371 in file "ST7735_TFT.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;Total ram usage:        0 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    4
  3579 ;; This function calls:
  3580 ;;		_delay_ms
  3581 ;;		_write_command
  3582 ;;		_write_data
  3583 ;; This function is called by:
  3584 ;;		_TFT_GreenTab_Initialize
  3585 ;;		_TFT_BlackTab_Initialize
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text9
  3590  0014A2                     __ptext9:
  3591                           	opt stack 0
  3592  0014A2                     _Rcmd3:
  3593                           	opt stack 24
  3594                           
  3595                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3596                           
  3597                           ;incstack = 0
  3598  0014A2  0EE0               	movlw	224
  3599  0014A4  EC0B  F013         	call	_write_command
  3600                           
  3601                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3602  0014A8  0E02               	movlw	2
  3603  0014AA  EC03  F013         	call	_write_data
  3604  0014AE  0E1C               	movlw	28
  3605  0014B0  EC03  F013         	call	_write_data
  3606  0014B4  0E07               	movlw	7
  3607  0014B6  EC03  F013         	call	_write_data
  3608  0014BA  0E12               	movlw	18
  3609  0014BC  EC03  F013         	call	_write_data
  3610                           
  3611                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3612  0014C0  0E37               	movlw	55
  3613  0014C2  EC03  F013         	call	_write_data
  3614  0014C6  0E32               	movlw	50
  3615  0014C8  EC03  F013         	call	_write_data
  3616  0014CC  0E29               	movlw	41
  3617  0014CE  EC03  F013         	call	_write_data
  3618  0014D2  0E2D               	movlw	45
  3619  0014D4  EC03  F013         	call	_write_data
  3620                           
  3621                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3622  0014D8  0E29               	movlw	41
  3623  0014DA  EC03  F013         	call	_write_data
  3624  0014DE  0E25               	movlw	37
  3625  0014E0  EC03  F013         	call	_write_data
  3626  0014E4  0E2B               	movlw	43
  3627  0014E6  EC03  F013         	call	_write_data
  3628  0014EA  0E39               	movlw	57
  3629  0014EC  EC03  F013         	call	_write_data
  3630                           
  3631                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3632  0014F0  0E00               	movlw	0
  3633  0014F2  EC03  F013         	call	_write_data
  3634  0014F6  0E01               	movlw	1
  3635  0014F8  EC03  F013         	call	_write_data
  3636  0014FC  0E03               	movlw	3
  3637  0014FE  EC03  F013         	call	_write_data
  3638  001502  0E10               	movlw	16
  3639  001504  EC03  F013         	call	_write_data
  3640                           
  3641                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3642  001508  0EE1               	movlw	225
  3643  00150A  EC0B  F013         	call	_write_command
  3644                           
  3645                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3646  00150E  0E03               	movlw	3
  3647  001510  EC03  F013         	call	_write_data
  3648  001514  0E1D               	movlw	29
  3649  001516  EC03  F013         	call	_write_data
  3650  00151A  0E07               	movlw	7
  3651  00151C  EC03  F013         	call	_write_data
  3652  001520  0E06               	movlw	6
  3653  001522  EC03  F013         	call	_write_data
  3654                           
  3655                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3656  001526  0E2E               	movlw	46
  3657  001528  EC03  F013         	call	_write_data
  3658  00152C  0E2C               	movlw	44
  3659  00152E  EC03  F013         	call	_write_data
  3660  001532  0E29               	movlw	41
  3661  001534  EC03  F013         	call	_write_data
  3662  001538  0E2D               	movlw	45
  3663  00153A  EC03  F013         	call	_write_data
  3664                           
  3665                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3666  00153E  0E2E               	movlw	46
  3667  001540  EC03  F013         	call	_write_data
  3668  001544  0E2E               	movlw	46
  3669  001546  EC03  F013         	call	_write_data
  3670  00154A  0E37               	movlw	55
  3671  00154C  EC03  F013         	call	_write_data
  3672  001550  0E3F               	movlw	63
  3673  001552  EC03  F013         	call	_write_data
  3674                           
  3675                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3676  001556  0E00               	movlw	0
  3677  001558  EC03  F013         	call	_write_data
  3678  00155C  0E00               	movlw	0
  3679  00155E  EC03  F013         	call	_write_data
  3680  001562  0E02               	movlw	2
  3681  001564  EC03  F013         	call	_write_data
  3682  001568  0E10               	movlw	16
  3683  00156A  EC03  F013         	call	_write_data
  3684                           
  3685                           ;ST7735_TFT.c: 383: write_command(0x13);
  3686  00156E  0E13               	movlw	19
  3687  001570  EC0B  F013         	call	_write_command
  3688                           
  3689                           ;ST7735_TFT.c: 384: delay_ms(10);
  3690  001574  0E00               	movlw	0
  3691  001576  6E16               	movwf	delay_ms@ms+1,c
  3692  001578  0E0A               	movlw	10
  3693  00157A  6E15               	movwf	delay_ms@ms,c
  3694  00157C  EC47  F010         	call	_delay_ms	;wreg free
  3695                           
  3696                           ;ST7735_TFT.c: 385: write_command(0x29);
  3697  001580  0E29               	movlw	41
  3698  001582  EC0B  F013         	call	_write_command
  3699                           
  3700                           ;ST7735_TFT.c: 386: delay_ms(100);
  3701  001586  0E00               	movlw	0
  3702  001588  6E16               	movwf	delay_ms@ms+1,c
  3703  00158A  0E64               	movlw	100
  3704  00158C  6E15               	movwf	delay_ms@ms,c
  3705  00158E  EC47  F010         	call	_delay_ms	;wreg free
  3706  001592  0012               	return		;funcret
  3707  001594                     __end_of_Rcmd3:
  3708                           	opt stack 0
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           postinc0	equ	0xFEE
  3714                           wreg	equ	0xFE8
  3715                           postdec1	equ	0xFE5
  3716                           fsr1l	equ	0xFE1
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _Rcmd2red *****************
  3720 ;; Defined at:
  3721 ;;		line 361 in file "ST7735_TFT.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;		None               void
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;Total ram usage:        0 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    4
  3742 ;; This function calls:
  3743 ;;		_write_command
  3744 ;;		_write_data
  3745 ;; This function is called by:
  3746 ;;		_TFT_GreenTab_Initialize
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text10
  3751  0022EA                     __ptext10:
  3752                           	opt stack 0
  3753  0022EA                     _Rcmd2red:
  3754                           	opt stack 24
  3755                           
  3756                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3757                           
  3758                           ;incstack = 0
  3759  0022EA  0E2A               	movlw	42
  3760  0022EC  EC0B  F013         	call	_write_command
  3761                           
  3762                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3763  0022F0  0E00               	movlw	0
  3764  0022F2  EC03  F013         	call	_write_data
  3765  0022F6  0E00               	movlw	0
  3766  0022F8  EC03  F013         	call	_write_data
  3767                           
  3768                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3769  0022FC  0E00               	movlw	0
  3770  0022FE  EC03  F013         	call	_write_data
  3771  002302  0E7F               	movlw	127
  3772  002304  EC03  F013         	call	_write_data
  3773                           
  3774                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3775  002308  0E2B               	movlw	43
  3776  00230A  EC0B  F013         	call	_write_command
  3777                           
  3778                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3779  00230E  0E00               	movlw	0
  3780  002310  EC03  F013         	call	_write_data
  3781  002314  0E00               	movlw	0
  3782  002316  EC03  F013         	call	_write_data
  3783                           
  3784                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3785  00231A  0E00               	movlw	0
  3786  00231C  EC03  F013         	call	_write_data
  3787  002320  0E9F               	movlw	159
  3788  002322  EC03  F013         	call	_write_data
  3789  002326  0012               	return		;funcret
  3790  002328                     __end_of_Rcmd2red:
  3791                           	opt stack 0
  3792                           tblptru	equ	0xFF8
  3793                           tblptrh	equ	0xFF7
  3794                           tblptrl	equ	0xFF6
  3795                           tablat	equ	0xFF5
  3796                           postinc0	equ	0xFEE
  3797                           wreg	equ	0xFE8
  3798                           postdec1	equ	0xFE5
  3799                           fsr1l	equ	0xFE1
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _Rcmd1 *****************
  3803 ;; Defined at:
  3804 ;;		line 314 in file "ST7735_TFT.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;		None
  3809 ;; Return value:  Size  Location     Type
  3810 ;;		None               void
  3811 ;; Registers used:
  3812 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;Total ram usage:        0 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    4
  3825 ;; This function calls:
  3826 ;;		_delay_ms
  3827 ;;		_write_command
  3828 ;;		_write_data
  3829 ;; This function is called by:
  3830 ;;		_TFT_GreenTab_Initialize
  3831 ;;		_TFT_BlackTab_Initialize
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text11
  3836  001288                     __ptext11:
  3837                           	opt stack 0
  3838  001288                     _Rcmd1:
  3839                           	opt stack 24
  3840                           
  3841                           ;ST7735_TFT.c: 316: write_command(0x01);
  3842                           
  3843                           ;incstack = 0
  3844  001288  0E01               	movlw	1
  3845  00128A  EC0B  F013         	call	_write_command
  3846                           
  3847                           ;ST7735_TFT.c: 317: delay_ms(150);
  3848  00128E  0E00               	movlw	0
  3849  001290  6E16               	movwf	delay_ms@ms+1,c
  3850  001292  0E96               	movlw	150
  3851  001294  6E15               	movwf	delay_ms@ms,c
  3852  001296  EC47  F010         	call	_delay_ms	;wreg free
  3853                           
  3854                           ;ST7735_TFT.c: 318: write_command(0x11);
  3855  00129A  0E11               	movlw	17
  3856  00129C  EC0B  F013         	call	_write_command
  3857                           
  3858                           ;ST7735_TFT.c: 319: delay_ms(500);
  3859  0012A0  0E01               	movlw	1
  3860  0012A2  6E16               	movwf	delay_ms@ms+1,c
  3861  0012A4  0EF4               	movlw	244
  3862  0012A6  6E15               	movwf	delay_ms@ms,c
  3863  0012A8  EC47  F010         	call	_delay_ms	;wreg free
  3864                           
  3865                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3866  0012AC  0EB1               	movlw	177
  3867  0012AE  EC0B  F013         	call	_write_command
  3868                           
  3869                           ;ST7735_TFT.c: 321: write_data(0x01);
  3870  0012B2  0E01               	movlw	1
  3871  0012B4  EC03  F013         	call	_write_data
  3872                           
  3873                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3874  0012B8  0E2C               	movlw	44
  3875  0012BA  EC03  F013         	call	_write_data
  3876                           
  3877                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3878  0012BE  0E2D               	movlw	45
  3879  0012C0  EC03  F013         	call	_write_data
  3880                           
  3881                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3882  0012C4  0EB2               	movlw	178
  3883  0012C6  EC0B  F013         	call	_write_command
  3884                           
  3885                           ;ST7735_TFT.c: 325: write_data(0x01);
  3886  0012CA  0E01               	movlw	1
  3887  0012CC  EC03  F013         	call	_write_data
  3888                           
  3889                           ;ST7735_TFT.c: 326: write_data(0x2C);
  3890  0012D0  0E2C               	movlw	44
  3891  0012D2  EC03  F013         	call	_write_data
  3892                           
  3893                           ;ST7735_TFT.c: 327: write_data(0x2D);
  3894  0012D6  0E2D               	movlw	45
  3895  0012D8  EC03  F013         	call	_write_data
  3896                           
  3897                           ;ST7735_TFT.c: 328: write_command(0xB3);
  3898  0012DC  0EB3               	movlw	179
  3899  0012DE  EC0B  F013         	call	_write_command
  3900                           
  3901                           ;ST7735_TFT.c: 329: write_data(0x01);
  3902  0012E2  0E01               	movlw	1
  3903  0012E4  EC03  F013         	call	_write_data
  3904                           
  3905                           ;ST7735_TFT.c: 330: write_data(0x2C);
  3906  0012E8  0E2C               	movlw	44
  3907  0012EA  EC03  F013         	call	_write_data
  3908                           
  3909                           ;ST7735_TFT.c: 331: write_data(0x2D);
  3910  0012EE  0E2D               	movlw	45
  3911  0012F0  EC03  F013         	call	_write_data
  3912                           
  3913                           ;ST7735_TFT.c: 332: write_data(0x01);
  3914  0012F4  0E01               	movlw	1
  3915  0012F6  EC03  F013         	call	_write_data
  3916                           
  3917                           ;ST7735_TFT.c: 333: write_data(0x2C);
  3918  0012FA  0E2C               	movlw	44
  3919  0012FC  EC03  F013         	call	_write_data
  3920                           
  3921                           ;ST7735_TFT.c: 334: write_data(0x2D);
  3922  001300  0E2D               	movlw	45
  3923  001302  EC03  F013         	call	_write_data
  3924                           
  3925                           ;ST7735_TFT.c: 335: write_command(0xB4);
  3926  001306  0EB4               	movlw	180
  3927  001308  EC0B  F013         	call	_write_command
  3928                           
  3929                           ;ST7735_TFT.c: 336: write_data(0x07);
  3930  00130C  0E07               	movlw	7
  3931  00130E  EC03  F013         	call	_write_data
  3932                           
  3933                           ;ST7735_TFT.c: 337: write_command(0xC0);
  3934  001312  0EC0               	movlw	192
  3935  001314  EC0B  F013         	call	_write_command
  3936                           
  3937                           ;ST7735_TFT.c: 338: write_data(0xA2);
  3938  001318  0EA2               	movlw	162
  3939  00131A  EC03  F013         	call	_write_data
  3940                           
  3941                           ;ST7735_TFT.c: 339: write_data(0x02);
  3942  00131E  0E02               	movlw	2
  3943  001320  EC03  F013         	call	_write_data
  3944                           
  3945                           ;ST7735_TFT.c: 340: write_data(0x84);
  3946  001324  0E84               	movlw	132
  3947  001326  EC03  F013         	call	_write_data
  3948                           
  3949                           ;ST7735_TFT.c: 341: write_command(0xC1);
  3950  00132A  0EC1               	movlw	193
  3951  00132C  EC0B  F013         	call	_write_command
  3952                           
  3953                           ;ST7735_TFT.c: 342: write_data(0xC5);
  3954  001330  0EC5               	movlw	197
  3955  001332  EC03  F013         	call	_write_data
  3956                           
  3957                           ;ST7735_TFT.c: 343: write_command(0xC2);
  3958  001336  0EC2               	movlw	194
  3959  001338  EC0B  F013         	call	_write_command
  3960                           
  3961                           ;ST7735_TFT.c: 344: write_data(0x0A);
  3962  00133C  0E0A               	movlw	10
  3963  00133E  EC03  F013         	call	_write_data
  3964                           
  3965                           ;ST7735_TFT.c: 345: write_data(0x00);
  3966  001342  0E00               	movlw	0
  3967  001344  EC03  F013         	call	_write_data
  3968                           
  3969                           ;ST7735_TFT.c: 346: write_command(0xC3);
  3970  001348  0EC3               	movlw	195
  3971  00134A  EC0B  F013         	call	_write_command
  3972                           
  3973                           ;ST7735_TFT.c: 347: write_data(0x8A);
  3974  00134E  0E8A               	movlw	138
  3975  001350  EC03  F013         	call	_write_data
  3976                           
  3977                           ;ST7735_TFT.c: 348: write_data(0x2A);
  3978  001354  0E2A               	movlw	42
  3979  001356  EC03  F013         	call	_write_data
  3980                           
  3981                           ;ST7735_TFT.c: 349: write_command(0xC4);
  3982  00135A  0EC4               	movlw	196
  3983  00135C  EC0B  F013         	call	_write_command
  3984                           
  3985                           ;ST7735_TFT.c: 350: write_data(0x8A);
  3986  001360  0E8A               	movlw	138
  3987  001362  EC03  F013         	call	_write_data
  3988                           
  3989                           ;ST7735_TFT.c: 351: write_data(0xEE);
  3990  001366  0EEE               	movlw	238
  3991  001368  EC03  F013         	call	_write_data
  3992                           
  3993                           ;ST7735_TFT.c: 352: write_command(0xC5);
  3994  00136C  0EC5               	movlw	197
  3995  00136E  EC0B  F013         	call	_write_command
  3996                           
  3997                           ;ST7735_TFT.c: 353: write_data(0x0E);
  3998  001372  0E0E               	movlw	14
  3999  001374  EC03  F013         	call	_write_data
  4000                           
  4001                           ;ST7735_TFT.c: 354: write_command(0x20);
  4002  001378  0E20               	movlw	32
  4003  00137A  EC0B  F013         	call	_write_command
  4004                           
  4005                           ;ST7735_TFT.c: 355: write_command(0x36);
  4006  00137E  0E36               	movlw	54
  4007  001380  EC0B  F013         	call	_write_command
  4008                           
  4009                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4010  001384  0EC8               	movlw	200
  4011  001386  EC03  F013         	call	_write_data
  4012                           
  4013                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4014  00138A  0E3A               	movlw	58
  4015  00138C  EC0B  F013         	call	_write_command
  4016                           
  4017                           ;ST7735_TFT.c: 358: write_data(0x05);
  4018  001390  0E05               	movlw	5
  4019  001392  EC03  F013         	call	_write_data
  4020  001396  0012               	return		;funcret
  4021  001398                     __end_of_Rcmd1:
  4022                           	opt stack 0
  4023                           tblptru	equ	0xFF8
  4024                           tblptrh	equ	0xFF7
  4025                           tblptrl	equ	0xFF6
  4026                           tablat	equ	0xFF5
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           postdec1	equ	0xFE5
  4030                           fsr1l	equ	0xFE1
  4031                           status	equ	0xFD8
  4032                           
  4033 ;; *************** function _LCD_Reset *****************
  4034 ;; Defined at:
  4035 ;;		line 250 in file "ST7735_TFT.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;		None
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;		None
  4040 ;; Return value:  Size  Location     Type
  4041 ;;		None               void
  4042 ;; Registers used:
  4043 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;Total ram usage:        0 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    4
  4056 ;; This function calls:
  4057 ;;		_delay_ms
  4058 ;; This function is called by:
  4059 ;;		_Initialize_Screen
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text12
  4064  0025E2                     __ptext12:
  4065                           	opt stack 0
  4066  0025E2                     _LCD_Reset:
  4067                           	opt stack 25
  4068                           
  4069                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  4070                           
  4071                           ;incstack = 0
  4072  0025E2  9483               	bcf	3971,2,c	;volatile
  4073                           
  4074                           ;ST7735_TFT.c: 253: delay_ms(100);
  4075  0025E4  0E00               	movlw	0
  4076  0025E6  6E16               	movwf	delay_ms@ms+1,c
  4077  0025E8  0E64               	movlw	100
  4078  0025EA  6E15               	movwf	delay_ms@ms,c
  4079  0025EC  EC47  F010         	call	_delay_ms	;wreg free
  4080                           
  4081                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4082  0025F0  8483               	bsf	3971,2,c	;volatile
  4083  0025F2  0012               	return		;funcret
  4084  0025F4                     __end_of_LCD_Reset:
  4085                           	opt stack 0
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           postinc0	equ	0xFEE
  4091                           wreg	equ	0xFE8
  4092                           postdec1	equ	0xFE5
  4093                           fsr1l	equ	0xFE1
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _delay_ms *****************
  4097 ;; Defined at:
  4098 ;;		line 97 in file "ST7735_TFT.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  ms              2   20[COMRAM] int 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  count           2   24[COMRAM] int 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;		None               void
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;Total ram usage:        6 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    3
  4119 ;; This function calls:
  4120 ;;		___wmul
  4121 ;; This function is called by:
  4122 ;;		_LCD_Reset
  4123 ;;		_Rcmd1
  4124 ;;		_Rcmd3
  4125 ;;		_Bcmd
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text13
  4130  00208E                     __ptext13:
  4131                           	opt stack 0
  4132  00208E                     _delay_ms:
  4133                           	opt stack 24
  4134                           
  4135                           ;ST7735_TFT.c: 103: int count;
  4136                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4137                           
  4138                           ;incstack = 0
  4139  00208E  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4140  002092  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4141  002096  0E00               	movlw	0
  4142  002098  6E12               	movwf	___wmul@multiplicand+1,c
  4143  00209A  0EFA               	movlw	250
  4144  00209C  6E11               	movwf	___wmul@multiplicand,c
  4145  00209E  EC4F  F012         	call	___wmul	;wreg free
  4146  0020A2  C00F  F019         	movff	?___wmul,delay_ms@count
  4147  0020A6  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4148                           
  4149                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4150  0020AA  C019  F017         	movff	delay_ms@count,??_delay_ms
  4151  0020AE  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4152  0020B2  1E17               	comf	??_delay_ms,f,c
  4153  0020B4  1E18               	comf	??_delay_ms+1,f,c
  4154  0020B6  4A17               	infsnz	??_delay_ms,f,c
  4155  0020B8  2A18               	incf	??_delay_ms+1,f,c
  4156  0020BA  0EFF               	movlw	255
  4157  0020BC  2417               	addwf	??_delay_ms,w,c
  4158  0020BE  6E19               	movwf	delay_ms@count,c
  4159  0020C0  0EFF               	movlw	255
  4160  0020C2  2018               	addwfc	??_delay_ms+1,w,c
  4161  0020C4  6E1A               	movwf	delay_ms@count+1,c
  4162                           
  4163                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4164  0020C6  0EB8               	movlw	184
  4165  0020C8  6EB1               	movwf	4017,c	;volatile
  4166                           
  4167                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4168  0020CA  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4169                           
  4170                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4171  0020CE  501A               	movf	delay_ms@count+1,w,c
  4172  0020D0  6ED7               	movwf	4055,c	;volatile
  4173                           
  4174                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4175  0020D2  92A1               	bcf	4001,1,c	;volatile
  4176                           
  4177                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4178  0020D4  80B1               	bsf	4017,0,c	;volatile
  4179                           
  4180                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4181  0020D6  D000               	goto	l125
  4182  0020D8                     l125:
  4183  0020D8  A2A1               	btfss	4001,1,c	;volatile
  4184  0020DA  D7FE               	goto	l125
  4185                           
  4186                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4187  0020DC  90B1               	bcf	4017,0,c	;volatile
  4188  0020DE  0012               	return		;funcret
  4189  0020E0                     __end_of_delay_ms:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           postdec1	equ	0xFE5
  4198                           fsr1l	equ	0xFE1
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _Do_Init *****************
  4202 ;; Defined at:
  4203 ;;		line 275 in file "Lab8_redo.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		wreg, status,2, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    4
  4224 ;; This function calls:
  4225 ;;		_Init_ADC
  4226 ;;		_init_UART
  4227 ;; This function is called by:
  4228 ;;		_main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text14
  4233  0024C6                     __ptext14:
  4234                           	opt stack 0
  4235  0024C6                     _Do_Init:
  4236                           	opt stack 26
  4237                           
  4238                           ;Lab8_redo.c: 277: init_UART();
  4239                           
  4240                           ;incstack = 0
  4241  0024C6  ECDD  F012         	call	_init_UART	;wreg free
  4242                           
  4243                           ;Lab8_redo.c: 278: Init_ADC();
  4244  0024CA  EC13  F013         	call	_Init_ADC	;wreg free
  4245                           
  4246                           ;Lab8_redo.c: 280: OSCCON=0x70;
  4247  0024CE  0E70               	movlw	112
  4248  0024D0  6ED3               	movwf	4051,c	;volatile
  4249                           
  4250                           ;Lab8_redo.c: 281: TRISB = 0x47;
  4251  0024D2  0E47               	movlw	71
  4252  0024D4  6E93               	movwf	3987,c	;volatile
  4253                           
  4254                           ;Lab8_redo.c: 284: INTCONbits.INT0IF = 0;
  4255  0024D6  92F2               	bcf	intcon,1,c	;volatile
  4256                           
  4257                           ;Lab8_redo.c: 285: INTCON3bits.INT1IF = 0;
  4258  0024D8  90F0               	bcf	intcon3,0,c	;volatile
  4259                           
  4260                           ;Lab8_redo.c: 286: INTCON3bits.INT2IF =0;
  4261  0024DA  92F0               	bcf	intcon3,1,c	;volatile
  4262                           
  4263                           ;Lab8_redo.c: 287: INTCON2bits.INTEDG0=0 ;
  4264  0024DC  9CF1               	bcf	intcon2,6,c	;volatile
  4265                           
  4266                           ;Lab8_redo.c: 288: INTCON2bits.INTEDG1=0;
  4267  0024DE  9AF1               	bcf	intcon2,5,c	;volatile
  4268                           
  4269                           ;Lab8_redo.c: 289: INTCON2bits.INTEDG2=1;
  4270  0024E0  88F1               	bsf	intcon2,4,c	;volatile
  4271                           
  4272                           ;Lab8_redo.c: 290: INTCONbits.INT0IE =1;
  4273  0024E2  88F2               	bsf	intcon,4,c	;volatile
  4274                           
  4275                           ;Lab8_redo.c: 291: INTCON3bits.INT1IE=1;
  4276  0024E4  86F0               	bsf	intcon3,3,c	;volatile
  4277                           
  4278                           ;Lab8_redo.c: 292: INTCON3bits.INT2IE=1;
  4279  0024E6  88F0               	bsf	intcon3,4,c	;volatile
  4280                           
  4281                           ;Lab8_redo.c: 293: INTCONbits.GIE=1;
  4282  0024E8  8EF2               	bsf	intcon,7,c	;volatile
  4283  0024EA  0012               	return		;funcret
  4284  0024EC                     __end_of_Do_Init:
  4285                           	opt stack 0
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           intcon	equ	0xFF2
  4291                           intcon2	equ	0xFF1
  4292                           intcon3	equ	0xFF0
  4293                           postinc0	equ	0xFEE
  4294                           wreg	equ	0xFE8
  4295                           postdec1	equ	0xFE5
  4296                           fsr1l	equ	0xFE1
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function _init_UART *****************
  4300 ;; Defined at:
  4301 ;;		line 260 in file "Lab8_redo.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;		None               void
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    3
  4322 ;; This function calls:
  4323 ;;		_OpenUSART
  4324 ;; This function is called by:
  4325 ;;		_Do_Init
  4326 ;;		_main
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text15
  4331  0025BA                     __ptext15:
  4332                           	opt stack 0
  4333  0025BA                     _init_UART:
  4334                           	opt stack 27
  4335                           
  4336                           ;Lab8_redo.c: 262: OpenUSART (0b01111111 & 0b10111111 &
  4337                           ;Lab8_redo.c: 263: 0b11111110 & 0b11111101 & 0b11111111 &
  4338                           ;Lab8_redo.c: 264: 0b11111111, 25);
  4339                           
  4340                           ;incstack = 0
  4341  0025BA  0E00               	movlw	0
  4342  0025BC  6E10               	movwf	OpenUSART@spbrg+1,c
  4343  0025BE  0E19               	movlw	25
  4344  0025C0  6E0F               	movwf	OpenUSART@spbrg,c
  4345  0025C2  0E3C               	movlw	60
  4346  0025C4  ECAB  F00F         	call	_OpenUSART
  4347                           
  4348                           ;Lab8_redo.c: 265: OSCCON = 0x60;
  4349  0025C8  0E60               	movlw	96
  4350  0025CA  6ED3               	movwf	4051,c	;volatile
  4351  0025CC  0012               	return		;funcret
  4352  0025CE                     __end_of_init_UART:
  4353                           	opt stack 0
  4354                           tblptru	equ	0xFF8
  4355                           tblptrh	equ	0xFF7
  4356                           tblptrl	equ	0xFF6
  4357                           tablat	equ	0xFF5
  4358                           intcon	equ	0xFF2
  4359                           intcon2	equ	0xFF1
  4360                           intcon3	equ	0xFF0
  4361                           postinc0	equ	0xFEE
  4362                           wreg	equ	0xFE8
  4363                           postdec1	equ	0xFE5
  4364                           fsr1l	equ	0xFE1
  4365                           status	equ	0xFD8
  4366                           
  4367 ;; *************** function _OpenUSART *****************
  4368 ;; Defined at:
  4369 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  config          1    wreg     unsigned char 
  4372 ;;  spbrg           2   14[COMRAM] unsigned int 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  config          1   16[COMRAM] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;		None               void
  4377 ;; Registers used:
  4378 ;;		wreg, status,2
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4384 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;Total ram usage:        3 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    2
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_init_UART
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text16
  4399  001F56                     __ptext16:
  4400                           	opt stack 0
  4401  001F56                     _OpenUSART:
  4402                           	opt stack 27
  4403                           
  4404                           ;incstack = 0
  4405                           ;OpenUSART@config stored from wreg
  4406  001F56  6E11               	movwf	OpenUSART@config,c
  4407  001F58  0E00               	movlw	0
  4408  001F5A  6EAC               	movwf	4012,c	;volatile
  4409  001F5C  0E00               	movlw	0
  4410  001F5E  6EAB               	movwf	4011,c	;volatile
  4411  001F60  A011               	btfss	OpenUSART@config,0,c
  4412  001F62  D002               	goto	l4876
  4413  001F64  88AC               	bsf	4012,4,c	;volatile
  4414  001F66  D000               	goto	l4876
  4415  001F68                     l4876:
  4416  001F68  A211               	btfss	OpenUSART@config,1,c
  4417  001F6A  D003               	goto	l4880
  4418  001F6C  8CAC               	bsf	4012,6,c	;volatile
  4419  001F6E  8CAB               	bsf	4011,6,c	;volatile
  4420  001F70  D000               	goto	l4880
  4421  001F72                     l4880:
  4422  001F72  A411               	btfss	OpenUSART@config,2,c
  4423  001F74  D002               	goto	l4884
  4424  001F76  8EAC               	bsf	4012,7,c	;volatile
  4425  001F78  D000               	goto	l4884
  4426  001F7A                     l4884:
  4427  001F7A  A611               	btfss	OpenUSART@config,3,c
  4428  001F7C  D002               	goto	l579
  4429  001F7E  88AB               	bsf	4011,4,c	;volatile
  4430  001F80  D002               	goto	l4888
  4431  001F82                     l579:
  4432  001F82  8AAB               	bsf	4011,5,c	;volatile
  4433  001F84  D000               	goto	l4888
  4434  001F86                     l4888:
  4435  001F86  B811               	btfsc	OpenUSART@config,4,c
  4436  001F88  84AC               	bsf	4012,2,c	;volatile
  4437  001F8A  989E               	bcf	3998,4,c	;volatile
  4438  001F8C  AA11               	btfss	OpenUSART@config,5,c
  4439  001F8E  D002               	goto	l4896
  4440  001F90  86AB               	bsf	4011,3,c	;volatile
  4441  001F92  D000               	goto	l4896
  4442  001F94                     l4896:
  4443  001F94  AC11               	btfss	OpenUSART@config,6,c
  4444  001F96  D002               	goto	l583
  4445  001F98  8A9D               	bsf	3997,5,c	;volatile
  4446  001F9A  D001               	goto	l584
  4447  001F9C                     l583:
  4448  001F9C  9A9D               	bcf	3997,5,c	;volatile
  4449  001F9E                     l584:
  4450  001F9E  9A9E               	bcf	3998,5,c	;volatile
  4451  001FA0  AE11               	btfss	OpenUSART@config,7,c
  4452  001FA2  D002               	goto	l585
  4453  001FA4  889D               	bsf	3997,4,c	;volatile
  4454  001FA6  D001               	goto	l586
  4455  001FA8                     l585:
  4456  001FA8  989D               	bcf	3997,4,c	;volatile
  4457  001FAA                     l586:
  4458  001FAA  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4459  001FAE  5010               	movf	OpenUSART@spbrg+1,w,c
  4460  001FB0  6EB0               	movwf	4016,c	;volatile
  4461  001FB2  8AAC               	bsf	4012,5,c	;volatile
  4462  001FB4  8EAB               	bsf	4011,7,c	;volatile
  4463  001FB6  9C94               	bcf	3988,6,c	;volatile
  4464  001FB8  8E94               	bsf	3988,7,c	;volatile
  4465  001FBA  B8AC               	btfsc	4012,4,c	;volatile
  4466  001FBC  BEAC               	btfsc	4012,7,c	;volatile
  4467  001FBE  D002               	goto	l588
  4468  001FC0  8C94               	bsf	3988,6,c	;volatile
  4469  001FC2  D000               	goto	l588
  4470  001FC4                     l588:
  4471  001FC4  0012               	return		;funcret
  4472  001FC6                     __end_of_OpenUSART:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           intcon	equ	0xFF2
  4479                           intcon2	equ	0xFF1
  4480                           intcon3	equ	0xFF0
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           postdec1	equ	0xFE5
  4484                           fsr1l	equ	0xFE1
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _Init_ADC *****************
  4488 ;; Defined at:
  4489 ;;		line 414 in file "Lab8_redo.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;		None               void
  4496 ;; Registers used:
  4497 ;;		wreg, status,2
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;Total ram usage:        0 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    2
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_Do_Init
  4514 ;;		_main
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text17
  4519  002626                     __ptext17:
  4520                           	opt stack 0
  4521  002626                     _Init_ADC:
  4522                           	opt stack 28
  4523                           
  4524                           ;Lab8_redo.c: 416: ADCON0 = 0x01;
  4525                           
  4526                           ;incstack = 0
  4527  002626  0E01               	movlw	1
  4528  002628  6EC2               	movwf	4034,c	;volatile
  4529                           
  4530                           ;Lab8_redo.c: 417: ADCON1= 0x0E;
  4531  00262A  0E0E               	movlw	14
  4532  00262C  6EC1               	movwf	4033,c	;volatile
  4533                           
  4534                           ;Lab8_redo.c: 418: ADCON2= 0xA9;
  4535  00262E  0EA9               	movlw	169
  4536  002630  6EC0               	movwf	4032,c	;volatile
  4537  002632  0012               	return		;funcret
  4538  002634                     __end_of_Init_ADC:
  4539                           	opt stack 0
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           intcon	equ	0xFF2
  4545                           intcon2	equ	0xFF1
  4546                           intcon3	equ	0xFF0
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           postdec1	equ	0xFE5
  4550                           fsr1l	equ	0xFE1
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function _Do_Flashing *****************
  4554 ;; Defined at:
  4555 ;;		line 852 in file "Lab8_redo.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;		None
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;		None               void
  4562 ;; Registers used:
  4563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;Total ram usage:        0 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:   12
  4576 ;; This function calls:
  4577 ;;		_Wait_N_Seconds
  4578 ;; This function is called by:
  4579 ;;		_main
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text18
  4584  0023A2                     __ptext18:
  4585                           	opt stack 0
  4586  0023A2                     _Do_Flashing:
  4587                           	opt stack 18
  4588                           
  4589                           ;Lab8_redo.c: 854: FLASHING = 1;
  4590                           
  4591                           ;incstack = 0
  4592  0023A2  0E01               	movlw	1
  4593  0023A4  D006               	goto	L1
  4594  0023A6                     l5354:
  4595                           
  4596                           ;Lab8_redo.c: 857: {
  4597                           ;Lab8_redo.c: 858: if( FLASHING_REQUEST == 1)
  4598  0023A6  044E               	decf	_FLASHING_REQUEST,w,c
  4599  0023A8  A4D8               	btfss	status,2,c
  4600  0023AA  D005               	goto	l552
  4601                           
  4602                           ;Lab8_redo.c: 859: {
  4603                           ;Lab8_redo.c: 860: FLASHING_REQUEST = 0;
  4604  0023AC  0E00               	movlw	0
  4605  0023AE  6E4E               	movwf	_FLASHING_REQUEST,c
  4606                           
  4607                           ;Lab8_redo.c: 861: FLASHING = 0;
  4608  0023B0  0E00               	movlw	0
  4609  0023B2                     L1:
  4610  0023B2  6E4D               	movwf	_FLASHING,c
  4611                           
  4612                           ;Lab8_redo.c: 862: }
  4613  0023B4  D00F               	goto	l5368
  4614  0023B6                     l552:
  4615                           
  4616                           ;Lab8_redo.c: 864: else
  4617                           ;Lab8_redo.c: 865: {
  4618                           ;Lab8_redo.c: 866: PORTBbits.RB4 = 1;
  4619  0023B6  8881               	bsf	3969,4,c	;volatile
  4620                           
  4621                           ;Lab8_redo.c: 867: PORTDbits.RD0 = 1;
  4622  0023B8  8083               	bsf	3971,0,c	;volatile
  4623                           
  4624                           ;Lab8_redo.c: 868: PORTCbits.RC0 = 1;
  4625  0023BA  8082               	bsf	3970,0,c	;volatile
  4626                           
  4627                           ;Lab8_redo.c: 869: PORTEbits.RE1 = 1;
  4628  0023BC  8284               	bsf	3972,1,c	;volatile
  4629                           
  4630                           ;Lab8_redo.c: 871: Wait_N_Seconds(1);
  4631  0023BE  0E01               	movlw	1
  4632  0023C0  ECEE  F011         	call	_Wait_N_Seconds
  4633                           
  4634                           ;Lab8_redo.c: 873: PORTBbits.RB4 = 0;
  4635  0023C4  9881               	bcf	3969,4,c	;volatile
  4636                           
  4637                           ;Lab8_redo.c: 874: PORTDbits.RD0 = 0;
  4638  0023C6  9083               	bcf	3971,0,c	;volatile
  4639                           
  4640                           ;Lab8_redo.c: 875: PORTCbits.RC0 = 0;
  4641  0023C8  9082               	bcf	3970,0,c	;volatile
  4642                           
  4643                           ;Lab8_redo.c: 876: PORTEbits.RE1 = 0;
  4644  0023CA  9284               	bcf	3972,1,c	;volatile
  4645                           
  4646                           ;Lab8_redo.c: 878: Wait_N_Seconds(1);
  4647  0023CC  0E01               	movlw	1
  4648  0023CE  ECEE  F011         	call	_Wait_N_Seconds
  4649  0023D2  D000               	goto	l5368
  4650  0023D4                     l5368:
  4651  0023D4  044D               	decf	_FLASHING,w,c
  4652  0023D6  B4D8               	btfsc	status,2,c
  4653  0023D8  D7E6               	goto	l5354
  4654  0023DA  0012               	return		;funcret
  4655  0023DC                     __end_of_Do_Flashing:
  4656                           	opt stack 0
  4657                           tblptru	equ	0xFF8
  4658                           tblptrh	equ	0xFF7
  4659                           tblptrl	equ	0xFF6
  4660                           tablat	equ	0xFF5
  4661                           intcon	equ	0xFF2
  4662                           intcon2	equ	0xFF1
  4663                           intcon3	equ	0xFF0
  4664                           postinc0	equ	0xFEE
  4665                           wreg	equ	0xFE8
  4666                           postdec1	equ	0xFE5
  4667                           fsr1l	equ	0xFE1
  4668                           status	equ	0xFD8
  4669                           
  4670 ;; *************** function _Day_Mode *****************
  4671 ;; Defined at:
  4672 ;;		line 529 in file "Lab8_redo.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;		None
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;		None
  4677 ;; Return value:  Size  Location     Type
  4678 ;;		None               void
  4679 ;; Registers used:
  4680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;Total ram usage:        0 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:   12
  4693 ;; This function calls:
  4694 ;;		_PED_Control
  4695 ;;		_Set_EW
  4696 ;;		_Set_EW_LT
  4697 ;;		_Set_NS
  4698 ;;		_Set_NS_LT
  4699 ;;		_Wait_N_Seconds
  4700 ;; This function is called by:
  4701 ;;		_main
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text19
  4706  001822                     __ptext19:
  4707                           	opt stack 0
  4708  001822                     _Day_Mode:
  4709                           	opt stack 18
  4710                           
  4711                           ;Lab8_redo.c: 531: MODE = 1;
  4712                           
  4713                           ;incstack = 0
  4714  001822  0E00               	movlw	0
  4715  001824  6E46               	movwf	_MODE+1,c
  4716  001826  0E01               	movlw	1
  4717  001828  6E45               	movwf	_MODE,c
  4718                           
  4719                           ;Lab8_redo.c: 532: PORTBbits.RB7 = 1;
  4720  00182A  8E81               	bsf	3969,7,c	;volatile
  4721                           
  4722                           ;Lab8_redo.c: 533: Act_Mode_Txt[0] = 'D';
  4723  00182C  0E44               	movlw	68
  4724  00182E  6E62               	movwf	_Act_Mode_Txt,c
  4725                           
  4726                           ;Lab8_redo.c: 535: Set_NS(2);
  4727  001830  0E02               	movlw	2
  4728  001832  EC09  F011         	call	_Set_NS
  4729                           
  4730                           ;Lab8_redo.c: 537: Set_EW(1);
  4731  001836  0E01               	movlw	1
  4732  001838  EC51  F011         	call	_Set_EW
  4733                           
  4734                           ;Lab8_redo.c: 538: Set_NS_LT(1);
  4735  00183C  0E01               	movlw	1
  4736  00183E  ECE5  F010         	call	_Set_NS_LT
  4737                           
  4738                           ;Lab8_redo.c: 539: Set_EW_LT(1);
  4739  001842  0E01               	movlw	1
  4740  001844  EC2D  F011         	call	_Set_EW_LT
  4741                           
  4742                           ;Lab8_redo.c: 541: if(NS_PED_SW == 1)
  4743  001848  044F               	decf	_NS_PED_SW,w,c
  4744  00184A  A4D8               	btfss	status,2,c
  4745  00184C  D006               	goto	l478
  4746                           
  4747                           ;Lab8_redo.c: 542: {
  4748                           ;Lab8_redo.c: 543: PED_Control(0,8);
  4749  00184E  0E08               	movlw	8
  4750  001850  0100               	movlb	0	; () banked
  4751  001852  6FAD               	movwf	PED_Control@Num_Sec& (0+255),b
  4752  001854  0E00               	movlw	0
  4753  001856  EC6D  F00F         	call	_PED_Control
  4754  00185A                     l478:
  4755                           
  4756                           ;Lab8_redo.c: 545: }
  4757                           ;Lab8_redo.c: 549: Wait_N_Seconds(7);
  4758  00185A  0E07               	movlw	7
  4759  00185C  ECEE  F011         	call	_Wait_N_Seconds
  4760                           
  4761                           ;Lab8_redo.c: 551: Set_NS(3);
  4762  001860  0E03               	movlw	3
  4763  001862  EC09  F011         	call	_Set_NS
  4764                           
  4765                           ;Lab8_redo.c: 552: Wait_N_Seconds(3);
  4766  001866  0E03               	movlw	3
  4767  001868  ECEE  F011         	call	_Wait_N_Seconds
  4768                           
  4769                           ;Lab8_redo.c: 554: Set_NS(1);
  4770  00186C  0E01               	movlw	1
  4771  00186E  EC09  F011         	call	_Set_NS
  4772                           
  4773                           ;Lab8_redo.c: 558: if(PORTAbits.RA5 == 1)
  4774  001872  AA80               	btfss	3968,5,c	;volatile
  4775  001874  D010               	goto	l5286
  4776                           
  4777                           ;Lab8_redo.c: 559: {
  4778                           ;Lab8_redo.c: 560: Set_EW_LT(2);
  4779  001876  0E02               	movlw	2
  4780  001878  EC2D  F011         	call	_Set_EW_LT
  4781                           
  4782                           ;Lab8_redo.c: 561: Wait_N_Seconds(8);
  4783  00187C  0E08               	movlw	8
  4784  00187E  ECEE  F011         	call	_Wait_N_Seconds
  4785                           
  4786                           ;Lab8_redo.c: 563: Set_EW_LT(3);
  4787  001882  0E03               	movlw	3
  4788  001884  EC2D  F011         	call	_Set_EW_LT
  4789                           
  4790                           ;Lab8_redo.c: 564: Wait_N_Seconds(3);
  4791  001888  0E03               	movlw	3
  4792  00188A  ECEE  F011         	call	_Wait_N_Seconds
  4793                           
  4794                           ;Lab8_redo.c: 566: Set_EW_LT(1);
  4795  00188E  0E01               	movlw	1
  4796  001890  EC2D  F011         	call	_Set_EW_LT
  4797  001894  D000               	goto	l5286
  4798  001896                     l5286:
  4799                           
  4800                           ;Lab8_redo.c: 568: }
  4801                           ;Lab8_redo.c: 570: Set_EW(2);
  4802  001896  0E02               	movlw	2
  4803  001898  EC51  F011         	call	_Set_EW
  4804                           
  4805                           ;Lab8_redo.c: 572: if( EW_PED_SW == 1 )
  4806  00189C  044C               	decf	_EW_PED_SW,w,c
  4807  00189E  A4D8               	btfss	status,2,c
  4808  0018A0  D006               	goto	l480
  4809                           
  4810                           ;Lab8_redo.c: 573: {
  4811                           ;Lab8_redo.c: 574: PED_Control(2,9);
  4812  0018A2  0E09               	movlw	9
  4813  0018A4  0100               	movlb	0	; () banked
  4814  0018A6  6FAD               	movwf	PED_Control@Num_Sec& (0+255),b
  4815  0018A8  0E02               	movlw	2
  4816  0018AA  EC6D  F00F         	call	_PED_Control
  4817  0018AE                     l480:
  4818                           
  4819                           ;Lab8_redo.c: 575: }
  4820                           ;Lab8_redo.c: 579: Wait_N_Seconds(9);
  4821  0018AE  0E09               	movlw	9
  4822  0018B0  ECEE  F011         	call	_Wait_N_Seconds
  4823                           
  4824                           ;Lab8_redo.c: 581: Set_EW(3);
  4825  0018B4  0E03               	movlw	3
  4826  0018B6  EC51  F011         	call	_Set_EW
  4827                           
  4828                           ;Lab8_redo.c: 582: Wait_N_Seconds(3);
  4829  0018BA  0E03               	movlw	3
  4830  0018BC  ECEE  F011         	call	_Wait_N_Seconds
  4831                           
  4832                           ;Lab8_redo.c: 584: Set_EW(1);
  4833  0018C0  0E01               	movlw	1
  4834  0018C2  EC51  F011         	call	_Set_EW
  4835                           
  4836                           ;Lab8_redo.c: 588: if(PORTAbits.RA4 == 1)
  4837  0018C6  A880               	btfss	3968,4,c	;volatile
  4838  0018C8  D010               	goto	l482
  4839                           
  4840                           ;Lab8_redo.c: 589: {
  4841                           ;Lab8_redo.c: 590: Set_NS_LT(2);
  4842  0018CA  0E02               	movlw	2
  4843  0018CC  ECE5  F010         	call	_Set_NS_LT
  4844                           
  4845                           ;Lab8_redo.c: 591: Wait_N_Seconds(8);
  4846  0018D0  0E08               	movlw	8
  4847  0018D2  ECEE  F011         	call	_Wait_N_Seconds
  4848                           
  4849                           ;Lab8_redo.c: 593: Set_NS_LT(3);
  4850  0018D6  0E03               	movlw	3
  4851  0018D8  ECE5  F010         	call	_Set_NS_LT
  4852                           
  4853                           ;Lab8_redo.c: 594: Wait_N_Seconds(3);
  4854  0018DC  0E03               	movlw	3
  4855  0018DE  ECEE  F011         	call	_Wait_N_Seconds
  4856                           
  4857                           ;Lab8_redo.c: 596: Set_NS_LT(1);
  4858  0018E2  0E01               	movlw	1
  4859  0018E4  ECE5  F010         	call	_Set_NS_LT
  4860  0018E8  D000               	goto	l482
  4861  0018EA                     l482:
  4862  0018EA  0012               	return		;funcret
  4863  0018EC                     __end_of_Day_Mode:
  4864                           	opt stack 0
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           intcon	equ	0xFF2
  4870                           intcon2	equ	0xFF1
  4871                           intcon3	equ	0xFF0
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           postdec1	equ	0xFE5
  4875                           fsr1l	equ	0xFE1
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function _Wait_N_Seconds *****************
  4879 ;; Defined at:
  4880 ;;		line 701 in file "Lab8_redo.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  seconds         1    wreg     unsigned char 
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;  seconds         1   10[BANK0 ] unsigned char 
  4885 ;;  I               1   11[BANK0 ] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;Total ram usage:        2 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:   11
  4902 ;; This function calls:
  4903 ;;		_Wait_One_Second
  4904 ;;		_update_LCD_count
  4905 ;; This function is called by:
  4906 ;;		_Day_Mode
  4907 ;;		_Night_Mode
  4908 ;;		_Do_Flashing
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text20
  4913  0023DC                     __ptext20:
  4914                           	opt stack 0
  4915  0023DC                     _Wait_N_Seconds:
  4916                           	opt stack 18
  4917                           
  4918                           ;incstack = 0
  4919                           ;Wait_N_Seconds@seconds stored from wreg
  4920  0023DC  0100               	movlb	0	; () banked
  4921  0023DE  6FAF               	movwf	Wait_N_Seconds@seconds& (0+255),b
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;Lab8_redo.c: 703: char I;
  4925                           ;Lab8_redo.c: 704: for (I = seconds; I> 0; I--)
  4926  0023E0  C0AF  F0B0         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4927  0023E4                     l5098:
  4928                           
  4929                           ; BSR set to: 0
  4930  0023E4  0100               	movlb	0	; () banked
  4931  0023E6  51B0               	movf	Wait_N_Seconds@I& (0+255),w,b
  4932  0023E8  0100               	movlb	0	; () banked
  4933  0023EA  B4D8               	btfsc	status,2,c
  4934  0023EC  D00C               	goto	l5108
  4935  0023EE  D001               	goto	l5102
  4936                           
  4937                           ; BSR set to: 0
  4938  0023F0  D00A               	goto	l5108
  4939  0023F2                     l5102:
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;Lab8_redo.c: 705: {
  4943                           ;Lab8_redo.c: 706: update_LCD_count(direction, I);
  4944  0023F2  C0B0  F041         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4945  0023F6  5059               	movf	_direction,w,c
  4946  0023F8  EC38  F007         	call	_update_LCD_count
  4947                           
  4948                           ;Lab8_redo.c: 707: Wait_One_Second();
  4949  0023FC  ECEB  F00E         	call	_Wait_One_Second	;wreg free
  4950  002400  0100               	movlb	0	; () banked
  4951  002402  07B0               	decf	Wait_N_Seconds@I& (0+255),f,b
  4952  002404  D7EF               	goto	l5098
  4953  002406                     l5108:
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;Lab8_redo.c: 708: }
  4957                           ;Lab8_redo.c: 709: update_LCD_count(direction, 0);
  4958  002406  0E00               	movlw	0
  4959  002408  6E41               	movwf	update_LCD_count@count,c
  4960  00240A  5059               	movf	_direction,w,c
  4961  00240C  EC38  F007         	call	_update_LCD_count
  4962  002410  0012               	return		;funcret
  4963  002412                     __end_of_Wait_N_Seconds:
  4964                           	opt stack 0
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           intcon	equ	0xFF2
  4970                           intcon2	equ	0xFF1
  4971                           intcon3	equ	0xFF0
  4972                           postinc0	equ	0xFEE
  4973                           wreg	equ	0xFE8
  4974                           postdec1	equ	0xFE5
  4975                           fsr1l	equ	0xFE1
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _update_LCD_count *****************
  4979 ;; Defined at:
  4980 ;;		line 758 in file "Lab8_redo.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  direction       1    wreg     unsigned char 
  4983 ;;  count           1   64[COMRAM] unsigned char 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  direction       1    7[BANK0 ] unsigned char 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;		None               void
  4988 ;; Registers used:
  4989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4995 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;Total ram usage:        2 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    9
  5002 ;; This function calls:
  5003 ;;		___awdiv
  5004 ;;		___awmod
  5005 ;;		_drawtext
  5006 ;; This function is called by:
  5007 ;;		_Wait_N_Seconds
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text21
  5012  000E70                     __ptext21:
  5013                           	opt stack 0
  5014  000E70                     _update_LCD_count:
  5015                           	opt stack 19
  5016                           
  5017                           ;incstack = 0
  5018                           ;update_LCD_count@direction stored from wreg
  5019  000E70  0100               	movlb	0	; () banked
  5020  000E72  6FAC               	movwf	update_LCD_count@direction& (0+255),b
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;Lab8_redo.c: 760: switch (direction)
  5024  000E74  D0B2               	goto	l4994
  5025  000E76                     l4976:
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;Lab8_redo.c: 763: NS_Count[0] = count/10 + '0';
  5029  000E76  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5030  000E7A  6A10               	clrf	___awdiv@dividend+1,c
  5031  000E7C  0E00               	movlw	0
  5032  000E7E  6E12               	movwf	___awdiv@divisor+1,c
  5033  000E80  0E0A               	movlw	10
  5034  000E82  6E11               	movwf	___awdiv@divisor,c
  5035  000E84  ECD5  F00D         	call	___awdiv	;wreg free
  5036  000E88  500F               	movf	?___awdiv,w,c
  5037  000E8A  0F30               	addlw	48
  5038  000E8C  6E5F               	movwf	_NS_Count,c
  5039                           
  5040                           ;Lab8_redo.c: 764: NS_Count[1] = count%10 + '0';
  5041  000E8E  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5042  000E92  6A10               	clrf	___awmod@dividend+1,c
  5043  000E94  0E00               	movlw	0
  5044  000E96  6E12               	movwf	___awmod@divisor+1,c
  5045  000E98  0E0A               	movlw	10
  5046  000E9A  6E11               	movwf	___awmod@divisor,c
  5047  000E9C  EC2C  F00F         	call	___awmod	;wreg free
  5048  000EA0  500F               	movf	?___awmod,w,c
  5049  000EA2  0F30               	addlw	48
  5050  000EA4  6E60               	movwf	_NS_Count+1,c
  5051                           
  5052                           ;Lab8_redo.c: 765: drawtext(100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  5053  000EA6  0E1E               	movlw	30
  5054  000EA8  6E37               	movwf	drawtext@y,c
  5055  000EAA  0E5F               	movlw	low _NS_Count
  5056  000EAC  6E38               	movwf	drawtext@_text,c
  5057  000EAE  0E00               	movlw	high _NS_Count
  5058  000EB0  6E39               	movwf	drawtext@_text+1,c
  5059  000EB2  0E00               	movlw	0
  5060  000EB4  6E3B               	movwf	drawtext@color+1,c
  5061  000EB6  0E1F               	movlw	31
  5062  000EB8  6E3A               	movwf	drawtext@color,c
  5063  000EBA  0E00               	movlw	0
  5064  000EBC  6E3D               	movwf	drawtext@bg+1,c
  5065  000EBE  0E00               	movlw	0
  5066  000EC0  6E3C               	movwf	drawtext@bg,c
  5067  000EC2  0E02               	movlw	2
  5068  000EC4  6E3E               	movwf	drawtext@size,c
  5069  000EC6  0E64               	movlw	100
  5070  000EC8  ECCC  F009         	call	_drawtext
  5071                           
  5072                           ;Lab8_redo.c: 766: break;
  5073  000ECC  D095               	goto	l523
  5074  000ECE                     l4980:
  5075                           
  5076                           ;Lab8_redo.c: 769: NSLT_Count[0] = count/10 + '0';
  5077  000ECE  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5078  000ED2  6A10               	clrf	___awdiv@dividend+1,c
  5079  000ED4  0E00               	movlw	0
  5080  000ED6  6E12               	movwf	___awdiv@divisor+1,c
  5081  000ED8  0E0A               	movlw	10
  5082  000EDA  6E11               	movwf	___awdiv@divisor,c
  5083  000EDC  ECD5  F00D         	call	___awdiv	;wreg free
  5084  000EE0  500F               	movf	?___awdiv,w,c
  5085  000EE2  0F30               	addlw	48
  5086  000EE4  6E5C               	movwf	_NSLT_Count,c
  5087                           
  5088                           ;Lab8_redo.c: 770: NSLT_Count[1] = count%10 + '0';
  5089  000EE6  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5090  000EEA  6A10               	clrf	___awmod@dividend+1,c
  5091  000EEC  0E00               	movlw	0
  5092  000EEE  6E12               	movwf	___awmod@divisor+1,c
  5093  000EF0  0E0A               	movlw	10
  5094  000EF2  6E11               	movwf	___awmod@divisor,c
  5095  000EF4  EC2C  F00F         	call	___awmod	;wreg free
  5096  000EF8  500F               	movf	?___awmod,w,c
  5097  000EFA  0F30               	addlw	48
  5098  000EFC  6E5D               	movwf	_NSLT_Count+1,c
  5099                           
  5100                           ;Lab8_redo.c: 771: drawtext(100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5101  000EFE  0E3C               	movlw	60
  5102  000F00  6E37               	movwf	drawtext@y,c
  5103  000F02  0E5C               	movlw	low _NSLT_Count
  5104  000F04  6E38               	movwf	drawtext@_text,c
  5105  000F06  0E00               	movlw	high _NSLT_Count
  5106  000F08  6E39               	movwf	drawtext@_text+1,c
  5107  000F0A  0EF8               	movlw	248
  5108  000F0C  6E3B               	movwf	drawtext@color+1,c
  5109  000F0E  0E1F               	movlw	31
  5110  000F10  6E3A               	movwf	drawtext@color,c
  5111  000F12  0E00               	movlw	0
  5112  000F14  6E3D               	movwf	drawtext@bg+1,c
  5113  000F16  0E00               	movlw	0
  5114  000F18  6E3C               	movwf	drawtext@bg,c
  5115  000F1A  0E02               	movlw	2
  5116  000F1C  6E3E               	movwf	drawtext@size,c
  5117  000F1E  0E64               	movlw	100
  5118  000F20  ECCC  F009         	call	_drawtext
  5119                           
  5120                           ;Lab8_redo.c: 772: break;
  5121  000F24  D069               	goto	l523
  5122  000F26                     l4984:
  5123                           
  5124                           ;Lab8_redo.c: 775: EW_Count[0] = count/10 + '0';
  5125  000F26  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5126  000F2A  6A10               	clrf	___awdiv@dividend+1,c
  5127  000F2C  0E00               	movlw	0
  5128  000F2E  6E12               	movwf	___awdiv@divisor+1,c
  5129  000F30  0E0A               	movlw	10
  5130  000F32  6E11               	movwf	___awdiv@divisor,c
  5131  000F34  ECD5  F00D         	call	___awdiv	;wreg free
  5132  000F38  500F               	movf	?___awdiv,w,c
  5133  000F3A  0F30               	addlw	48
  5134  000F3C  0100               	movlb	0	; () banked
  5135  000F3E  6FB6               	movwf	_EW_Count& (0+255),b
  5136                           
  5137                           ;Lab8_redo.c: 776: EW_Count[1] = count%10 + '0';
  5138  000F40  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5139  000F44  6A10               	clrf	___awmod@dividend+1,c
  5140  000F46  0E00               	movlw	0
  5141  000F48  6E12               	movwf	___awmod@divisor+1,c
  5142  000F4A  0E0A               	movlw	10
  5143  000F4C  6E11               	movwf	___awmod@divisor,c
  5144  000F4E  EC2C  F00F         	call	___awmod	;wreg free
  5145  000F52  500F               	movf	?___awmod,w,c
  5146  000F54  0F30               	addlw	48
  5147  000F56  0100               	movlb	0	; () banked
  5148  000F58  6FB7               	movwf	(_EW_Count+1)& (0+255),b
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;Lab8_redo.c: 777: drawtext(100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5152  000F5A  0E5A               	movlw	90
  5153  000F5C  6E37               	movwf	drawtext@y,c
  5154  000F5E  0EB6               	movlw	low _EW_Count
  5155  000F60  6E38               	movwf	drawtext@_text,c
  5156  000F62  0E00               	movlw	high _EW_Count
  5157  000F64  6E39               	movwf	drawtext@_text+1,c
  5158  000F66  0E07               	movlw	7
  5159  000F68  6E3B               	movwf	drawtext@color+1,c
  5160  000F6A  683A               	setf	drawtext@color,c
  5161  000F6C  0E00               	movlw	0
  5162  000F6E  6E3D               	movwf	drawtext@bg+1,c
  5163  000F70  0E00               	movlw	0
  5164  000F72  6E3C               	movwf	drawtext@bg,c
  5165  000F74  0E02               	movlw	2
  5166  000F76  6E3E               	movwf	drawtext@size,c
  5167  000F78  0E64               	movlw	100
  5168  000F7A  ECCC  F009         	call	_drawtext
  5169                           
  5170                           ;Lab8_redo.c: 778: break;
  5171  000F7E  D03C               	goto	l523
  5172  000F80                     l4988:
  5173                           
  5174                           ;Lab8_redo.c: 781: EWLT_Count[0] = count/10 + '0';
  5175  000F80  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5176  000F84  6A10               	clrf	___awdiv@dividend+1,c
  5177  000F86  0E00               	movlw	0
  5178  000F88  6E12               	movwf	___awdiv@divisor+1,c
  5179  000F8A  0E0A               	movlw	10
  5180  000F8C  6E11               	movwf	___awdiv@divisor,c
  5181  000F8E  ECD5  F00D         	call	___awdiv	;wreg free
  5182  000F92  500F               	movf	?___awdiv,w,c
  5183  000F94  0F30               	addlw	48
  5184  000F96  0100               	movlb	0	; () banked
  5185  000F98  6FB3               	movwf	_EWLT_Count& (0+255),b
  5186                           
  5187                           ;Lab8_redo.c: 782: EWLT_Count[1] = count%10 + '0';
  5188  000F9A  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5189  000F9E  6A10               	clrf	___awmod@dividend+1,c
  5190  000FA0  0E00               	movlw	0
  5191  000FA2  6E12               	movwf	___awmod@divisor+1,c
  5192  000FA4  0E0A               	movlw	10
  5193  000FA6  6E11               	movwf	___awmod@divisor,c
  5194  000FA8  EC2C  F00F         	call	___awmod	;wreg free
  5195  000FAC  500F               	movf	?___awmod,w,c
  5196  000FAE  0F30               	addlw	48
  5197  000FB0  0100               	movlb	0	; () banked
  5198  000FB2  6FB4               	movwf	(_EWLT_Count+1)& (0+255),b
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;Lab8_redo.c: 783: drawtext(100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5202  000FB4  0E78               	movlw	120
  5203  000FB6  6E37               	movwf	drawtext@y,c
  5204  000FB8  0EB3               	movlw	low _EWLT_Count
  5205  000FBA  6E38               	movwf	drawtext@_text,c
  5206  000FBC  0E00               	movlw	high _EWLT_Count
  5207  000FBE  6E39               	movwf	drawtext@_text+1,c
  5208  000FC0  0EFF               	movlw	255
  5209  000FC2  6E3B               	movwf	drawtext@color+1,c
  5210  000FC4  683A               	setf	drawtext@color,c
  5211  000FC6  0E00               	movlw	0
  5212  000FC8  6E3D               	movwf	drawtext@bg+1,c
  5213  000FCA  0E00               	movlw	0
  5214  000FCC  6E3C               	movwf	drawtext@bg,c
  5215  000FCE  0E02               	movlw	2
  5216  000FD0  6E3E               	movwf	drawtext@size,c
  5217  000FD2  0E64               	movlw	100
  5218  000FD4  ECCC  F009         	call	_drawtext
  5219                           
  5220                           ;Lab8_redo.c: 789: }
  5221                           
  5222                           ;Lab8_redo.c: 784: break;
  5223  000FD8  D00F               	goto	l523
  5224  000FDA                     l4994:
  5225  000FDA  0100               	movlb	0	; () banked
  5226  000FDC  51AC               	movf	update_LCD_count@direction& (0+255),w,b
  5227                           
  5228                           ; Switch size 1, requested type "space"
  5229                           ; Number of cases is 4, Range of values is 0 to 3
  5230                           ; switch strategies available:
  5231                           ; Name         Instructions Cycles
  5232                           ; simple_byte           13     7 (average)
  5233                           ;	Chosen strategy is simple_byte
  5234  000FDE  0A00               	xorlw	0	; case 0
  5235  000FE0  B4D8               	btfsc	status,2,c
  5236  000FE2  D749               	goto	l4976
  5237  000FE4  0A01               	xorlw	1	; case 1
  5238  000FE6  B4D8               	btfsc	status,2,c
  5239  000FE8  D772               	goto	l4980
  5240  000FEA  0A03               	xorlw	3	; case 2
  5241  000FEC  B4D8               	btfsc	status,2,c
  5242  000FEE  D79B               	goto	l4984
  5243  000FF0  0A01               	xorlw	1	; case 3
  5244  000FF2  B4D8               	btfsc	status,2,c
  5245  000FF4  D7C5               	goto	l4988
  5246  000FF6  D000               	goto	l523
  5247  000FF8                     l523:
  5248  000FF8  0012               	return		;funcret
  5249  000FFA                     __end_of_update_LCD_count:
  5250                           	opt stack 0
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           intcon	equ	0xFF2
  5256                           intcon2	equ	0xFF1
  5257                           intcon3	equ	0xFF0
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           postdec1	equ	0xFE5
  5261                           fsr1l	equ	0xFE1
  5262                           status	equ	0xFD8
  5263                           
  5264 ;; *************** function _Wait_One_Second *****************
  5265 ;; Defined at:
  5266 ;;		line 666 in file "Lab8_redo.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;		None
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;		None
  5271 ;; Return value:  Size  Location     Type
  5272 ;;		None               void
  5273 ;; Registers used:
  5274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;Total ram usage:        0 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:   10
  5287 ;; This function calls:
  5288 ;;		_Wait_Half_Second
  5289 ;;		_drawtext
  5290 ;;		_strcpy
  5291 ;;		_update_LCD_misc
  5292 ;; This function is called by:
  5293 ;;		_Wait_N_Seconds
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           	psect	text22
  5298  001DD6                     __ptext22:
  5299                           	opt stack 0
  5300  001DD6                     _Wait_One_Second:
  5301                           	opt stack 18
  5302                           
  5303                           ;Lab8_redo.c: 668: PORTDbits.RD7 = 1;
  5304                           
  5305                           ;incstack = 0
  5306  001DD6  8E83               	bsf	3971,7,c	;volatile
  5307                           
  5308                           ;Lab8_redo.c: 669: strcpy(txt,"*");
  5309  001DD8  C049  F00F         	movff	_txt,strcpy@to
  5310  001DDC  C04A  F010         	movff	_txt+1,strcpy@to+1
  5311  001DE0  0E2D               	movlw	low STR_5
  5312  001DE2  6E11               	movwf	strcpy@from,c
  5313  001DE4  0EFD               	movlw	high STR_5
  5314  001DE6  6E12               	movwf	strcpy@from+1,c
  5315  001DE8  EC09  F012         	call	_strcpy	;wreg free
  5316                           
  5317                           ;Lab8_redo.c: 670: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5318  001DEC  0E0A               	movlw	10
  5319  001DEE  6E37               	movwf	drawtext@y,c
  5320  001DF0  C049  F038         	movff	_txt,drawtext@_text
  5321  001DF4  C04A  F039         	movff	_txt+1,drawtext@_text+1
  5322  001DF8  0EFF               	movlw	255
  5323  001DFA  6E3B               	movwf	drawtext@color+1,c
  5324  001DFC  683A               	setf	drawtext@color,c
  5325  001DFE  0E00               	movlw	0
  5326  001E00  6E3D               	movwf	drawtext@bg+1,c
  5327  001E02  0E00               	movlw	0
  5328  001E04  6E3C               	movwf	drawtext@bg,c
  5329  001E06  0E01               	movlw	1
  5330  001E08  6E3E               	movwf	drawtext@size,c
  5331  001E0A  0E78               	movlw	120
  5332  001E0C  ECCC  F009         	call	_drawtext
  5333                           
  5334                           ;Lab8_redo.c: 671: Wait_Half_Second();
  5335  001E10  EC97  F012         	call	_Wait_Half_Second	;wreg free
  5336                           
  5337                           ;Lab8_redo.c: 673: PORTDbits.RD7 = 0;
  5338  001E14  9E83               	bcf	3971,7,c	;volatile
  5339                           
  5340                           ;Lab8_redo.c: 674: strcpy(txt," ");
  5341  001E16  C049  F00F         	movff	_txt,strcpy@to
  5342  001E1A  C04A  F010         	movff	_txt+1,strcpy@to+1
  5343  001E1E  0E2B               	movlw	low STR_14
  5344  001E20  6E11               	movwf	strcpy@from,c
  5345  001E22  0EFD               	movlw	high STR_14
  5346  001E24  6E12               	movwf	strcpy@from+1,c
  5347  001E26  EC09  F012         	call	_strcpy	;wreg free
  5348                           
  5349                           ;Lab8_redo.c: 675: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5350  001E2A  0E0A               	movlw	10
  5351  001E2C  6E37               	movwf	drawtext@y,c
  5352  001E2E  C049  F038         	movff	_txt,drawtext@_text
  5353  001E32  C04A  F039         	movff	_txt+1,drawtext@_text+1
  5354  001E36  0EFF               	movlw	255
  5355  001E38  6E3B               	movwf	drawtext@color+1,c
  5356  001E3A  683A               	setf	drawtext@color,c
  5357  001E3C  0E00               	movlw	0
  5358  001E3E  6E3D               	movwf	drawtext@bg+1,c
  5359  001E40  0E00               	movlw	0
  5360  001E42  6E3C               	movwf	drawtext@bg,c
  5361  001E44  0E01               	movlw	1
  5362  001E46  6E3E               	movwf	drawtext@size,c
  5363  001E48  0E78               	movlw	120
  5364  001E4A  ECCC  F009         	call	_drawtext
  5365                           
  5366                           ;Lab8_redo.c: 676: Wait_Half_Second();
  5367  001E4E  EC97  F012         	call	_Wait_Half_Second	;wreg free
  5368                           
  5369                           ;Lab8_redo.c: 677: update_LCD_misc();
  5370  001E52  EC51  F005         	call	_update_LCD_misc	;wreg free
  5371  001E56  0012               	return		;funcret
  5372  001E58                     __end_of_Wait_One_Second:
  5373                           	opt stack 0
  5374                           tblptru	equ	0xFF8
  5375                           tblptrh	equ	0xFF7
  5376                           tblptrl	equ	0xFF6
  5377                           tablat	equ	0xFF5
  5378                           intcon	equ	0xFF2
  5379                           intcon2	equ	0xFF1
  5380                           intcon3	equ	0xFF0
  5381                           postinc0	equ	0xFEE
  5382                           wreg	equ	0xFE8
  5383                           postdec1	equ	0xFE5
  5384                           fsr1l	equ	0xFE1
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _update_LCD_misc *****************
  5388 ;; Defined at:
  5389 ;;		line 814 in file "Lab8_redo.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;		None
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  nStep           2    8[BANK0 ] int 
  5394 ;;  ch              1    7[BANK0 ] unsigned char 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;		None               void
  5397 ;; Registers used:
  5398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;Total ram usage:        3 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    9
  5411 ;; This function calls:
  5412 ;;		___awtoft
  5413 ;;		___ftdiv
  5414 ;;		___ftge
  5415 ;;		___wmul
  5416 ;;		_drawtext
  5417 ;;		_get_full_ADC
  5418 ;; This function is called by:
  5419 ;;		_Wait_One_Second
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text23
  5424  000AA2                     __ptext23:
  5425                           	opt stack 0
  5426  000AA2                     _update_LCD_misc:
  5427                           	opt stack 18
  5428                           
  5429                           ;incstack = 0
  5430  000AA2  0E00               	movlw	0
  5431  000AA4  0100               	movlb	0	; () banked
  5432  000AA6  6FAC               	movwf	update_LCD_misc@ch& (0+255),b
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;Lab8_redo.c: 816: int nStep = get_full_ADC();
  5436  000AA8  EC76  F012         	call	_get_full_ADC	;wreg free
  5437  000AAC  C00F  F0AD         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5438  000AB0  C010  F0AE         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5439                           
  5440                           ;Lab8_redo.c: 817: volt = nStep * 5 /1024.0;
  5441  000AB4  C0AD  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5442  000AB8  C0AE  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5443  000ABC  0E00               	movlw	0
  5444  000ABE  6E12               	movwf	___wmul@multiplicand+1,c
  5445  000AC0  0E05               	movlw	5
  5446  000AC2  6E11               	movwf	___wmul@multiplicand,c
  5447  000AC4  EC4F  F012         	call	___wmul	;wreg free
  5448  000AC8  C00F  F017         	movff	?___wmul,___awtoft@c
  5449  000ACC  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  5450  000AD0  ECB3  F011         	call	___awtoft	;wreg free
  5451  000AD4  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  5452  000AD8  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  5453  000ADC  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  5454  000AE0  0E00               	movlw	0
  5455  000AE2  6E1E               	movwf	___ftdiv@f2,c
  5456  000AE4  0E80               	movlw	128
  5457  000AE6  6E1F               	movwf	___ftdiv@f2+1,c
  5458  000AE8  0E44               	movlw	68
  5459  000AEA  6E20               	movwf	___ftdiv@f2+2,c
  5460  000AEC  ECCA  F00A         	call	___ftdiv	;wreg free
  5461  000AF0  C01B  F042         	movff	?___ftdiv,_volt
  5462  000AF4  C01C  F043         	movff	?___ftdiv+1,_volt+1
  5463  000AF8  C01D  F044         	movff	?___ftdiv+2,_volt+2
  5464                           
  5465                           ;Lab8_redo.c: 818: SW_MODE = volt < 3.5 ? 1:0;
  5466  000AFC  C042  F00F         	movff	_volt,___ftge@ff1
  5467  000B00  C043  F010         	movff	_volt+1,___ftge@ff1+1
  5468  000B04  C044  F011         	movff	_volt+2,___ftge@ff1+2
  5469  000B08  0E00               	movlw	0
  5470  000B0A  6E12               	movwf	___ftge@ff2,c
  5471  000B0C  0E60               	movlw	96
  5472  000B0E  6E13               	movwf	___ftge@ff2+1,c
  5473  000B10  0E40               	movlw	64
  5474  000B12  6E14               	movwf	___ftge@ff2+2,c
  5475  000B14  EC8A  F00D         	call	___ftge	;wreg free
  5476  000B18  B0D8               	btfsc	status,0,c
  5477  000B1A  D002               	goto	u3340
  5478  000B1C  0E01               	movlw	1
  5479  000B1E  D001               	goto	u3350
  5480  000B20                     u3340:
  5481  000B20  0E00               	movlw	0
  5482  000B22                     u3350:
  5483  000B22  6E53               	movwf	_SW_MODE,c
  5484                           
  5485                           ;Lab8_redo.c: 820: SW_NSPED = NS_PED_SW;
  5486  000B24  C04F  F055         	movff	_NS_PED_SW,_SW_NSPED
  5487                           
  5488                           ;Lab8_redo.c: 821: SW_NSLT = PORTAbits.RA4;
  5489  000B28  0E00               	movlw	0
  5490  000B2A  B880               	btfsc	3968,4,c	;volatile
  5491  000B2C  0E01               	movlw	1
  5492  000B2E  6E54               	movwf	_SW_NSLT,c
  5493                           
  5494                           ;Lab8_redo.c: 822: SW_EWPED = EW_PED_SW;
  5495  000B30  C04C  F052         	movff	_EW_PED_SW,_SW_EWPED
  5496                           
  5497                           ;Lab8_redo.c: 823: SW_EWLT = PORTAbits.RA5;
  5498  000B34  0E00               	movlw	0
  5499  000B36  BA80               	btfsc	3968,5,c	;volatile
  5500  000B38  0E01               	movlw	1
  5501  000B3A  6E51               	movwf	_SW_EWLT,c
  5502                           
  5503                           ;Lab8_redo.c: 825: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5504  000B3C  5053               	movf	_SW_MODE,w,c
  5505  000B3E  A4D8               	btfss	status,2,c
  5506  000B40  D002               	goto	l4594
  5507  000B42  0E4E               	movlw	78
  5508  000B44  D001               	goto	L2
  5509  000B46                     l4594:
  5510  000B46  0E44               	movlw	68
  5511  000B48                     L2:
  5512  000B48  6E6C               	movwf	_SW_MODE_Txt,c
  5513                           
  5514                           ;Lab8_redo.c: 826: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5515  000B4A  5055               	movf	_SW_NSPED,w,c
  5516  000B4C  A4D8               	btfss	status,2,c
  5517  000B4E  D002               	goto	l4598
  5518  000B50  0E30               	movlw	48
  5519  000B52  D001               	goto	L3
  5520  000B54                     l4598:
  5521  000B54  0E31               	movlw	49
  5522  000B56                     L3:
  5523  000B56  6E70               	movwf	_SW_NSPED_Txt,c
  5524                           
  5525                           ;Lab8_redo.c: 827: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5526  000B58  5052               	movf	_SW_EWPED,w,c
  5527  000B5A  A4D8               	btfss	status,2,c
  5528  000B5C  D002               	goto	l4602
  5529  000B5E  0E30               	movlw	48
  5530  000B60  D001               	goto	L4
  5531  000B62                     l4602:
  5532  000B62  0E31               	movlw	49
  5533  000B64                     L4:
  5534  000B64  6E6A               	movwf	_SW_EWPED_Txt,c
  5535                           
  5536                           ;Lab8_redo.c: 829: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5537  000B66  5054               	movf	_SW_NSLT,w,c
  5538  000B68  A4D8               	btfss	status,2,c
  5539  000B6A  D002               	goto	l4606
  5540  000B6C  0E30               	movlw	48
  5541  000B6E  D001               	goto	L5
  5542  000B70                     l4606:
  5543  000B70  0E31               	movlw	49
  5544  000B72                     L5:
  5545  000B72  6E6E               	movwf	_SW_NSLT_Txt,c
  5546                           
  5547                           ;Lab8_redo.c: 830: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5548  000B74  5051               	movf	_SW_EWLT,w,c
  5549  000B76  A4D8               	btfss	status,2,c
  5550  000B78  D002               	goto	l4610
  5551  000B7A  0E30               	movlw	48
  5552  000B7C  D001               	goto	L6
  5553  000B7E                     l4610:
  5554  000B7E  0E31               	movlw	49
  5555  000B80                     L6:
  5556  000B80  6E68               	movwf	_SW_EWLT_Txt,c
  5557                           
  5558                           ;Lab8_redo.c: 832: if (FLASHING_REQUEST == 0) FlashingR_Txt[0] = '0'; else FlashingR_Txt
      +                          [0] = '1';
  5559  000B82  504E               	movf	_FLASHING_REQUEST,w,c
  5560  000B84  A4D8               	btfss	status,2,c
  5561  000B86  D002               	goto	l4614
  5562  000B88  0E30               	movlw	48
  5563  000B8A  D001               	goto	L7
  5564  000B8C                     l4614:
  5565  000B8C  0E31               	movlw	49
  5566  000B8E                     L7:
  5567  000B8E  6E64               	movwf	_FlashingR_Txt,c
  5568                           
  5569                           ;Lab8_redo.c: 833: if (FLASHING == 0) FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1
      +                          ';
  5570  000B90  504D               	movf	_FLASHING,w,c
  5571  000B92  A4D8               	btfss	status,2,c
  5572  000B94  D002               	goto	l4618
  5573  000B96  0E30               	movlw	48
  5574  000B98  D001               	goto	L8
  5575  000B9A                     l4618:
  5576  000B9A  0E31               	movlw	49
  5577  000B9C                     L8:
  5578  000B9C  6E66               	movwf	_FlashingS_Txt,c
  5579  000B9E  D000               	goto	l4620
  5580  000BA0                     l4620:
  5581                           
  5582                           ;Lab8_redo.c: 838: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5583  000BA0  0E0A               	movlw	10
  5584  000BA2  6E37               	movwf	drawtext@y,c
  5585  000BA4  0E62               	movlw	low _Act_Mode_Txt
  5586  000BA6  6E38               	movwf	drawtext@_text,c
  5587  000BA8  0E00               	movlw	high _Act_Mode_Txt
  5588  000BAA  6E39               	movwf	drawtext@_text+1,c
  5589  000BAC  0EFF               	movlw	255
  5590  000BAE  6E3B               	movwf	drawtext@color+1,c
  5591  000BB0  683A               	setf	drawtext@color,c
  5592  000BB2  0E00               	movlw	0
  5593  000BB4  6E3D               	movwf	drawtext@bg+1,c
  5594  000BB6  0E00               	movlw	0
  5595  000BB8  6E3C               	movwf	drawtext@bg,c
  5596  000BBA  0E01               	movlw	1
  5597  000BBC  6E3E               	movwf	drawtext@size,c
  5598  000BBE  0E23               	movlw	35
  5599  000BC0  ECCC  F009         	call	_drawtext
  5600                           
  5601                           ;Lab8_redo.c: 839: drawtext(70,10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  5602  000BC4  0E0A               	movlw	10
  5603  000BC6  6E37               	movwf	drawtext@y,c
  5604  000BC8  0E64               	movlw	low _FlashingR_Txt
  5605  000BCA  6E38               	movwf	drawtext@_text,c
  5606  000BCC  0E00               	movlw	high _FlashingR_Txt
  5607  000BCE  6E39               	movwf	drawtext@_text+1,c
  5608  000BD0  0EFF               	movlw	255
  5609  000BD2  6E3B               	movwf	drawtext@color+1,c
  5610  000BD4  683A               	setf	drawtext@color,c
  5611  000BD6  0E00               	movlw	0
  5612  000BD8  6E3D               	movwf	drawtext@bg+1,c
  5613  000BDA  0E00               	movlw	0
  5614  000BDC  6E3C               	movwf	drawtext@bg,c
  5615  000BDE  0E01               	movlw	1
  5616  000BE0  6E3E               	movwf	drawtext@size,c
  5617  000BE2  0E46               	movlw	70
  5618  000BE4  ECCC  F009         	call	_drawtext
  5619                           
  5620                           ;Lab8_redo.c: 840: drawtext(100,10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  5621  000BE8  0E0A               	movlw	10
  5622  000BEA  6E37               	movwf	drawtext@y,c
  5623  000BEC  0E66               	movlw	low _FlashingS_Txt
  5624  000BEE  6E38               	movwf	drawtext@_text,c
  5625  000BF0  0E00               	movlw	high _FlashingS_Txt
  5626  000BF2  6E39               	movwf	drawtext@_text+1,c
  5627  000BF4  0EFF               	movlw	255
  5628  000BF6  6E3B               	movwf	drawtext@color+1,c
  5629  000BF8  683A               	setf	drawtext@color,c
  5630  000BFA  0E00               	movlw	0
  5631  000BFC  6E3D               	movwf	drawtext@bg+1,c
  5632  000BFE  0E00               	movlw	0
  5633  000C00  6E3C               	movwf	drawtext@bg,c
  5634  000C02  0E01               	movlw	1
  5635  000C04  6E3E               	movwf	drawtext@size,c
  5636  000C06  0E64               	movlw	100
  5637  000C08  ECCC  F009         	call	_drawtext
  5638                           
  5639                           ;Lab8_redo.c: 841: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5640  000C0C  0E95               	movlw	149
  5641  000C0E  6E37               	movwf	drawtext@y,c
  5642  000C10  0E70               	movlw	low _SW_NSPED_Txt
  5643  000C12  6E38               	movwf	drawtext@_text,c
  5644  000C14  0E00               	movlw	high _SW_NSPED_Txt
  5645  000C16  6E39               	movwf	drawtext@_text+1,c
  5646  000C18  0EFF               	movlw	255
  5647  000C1A  6E3B               	movwf	drawtext@color+1,c
  5648  000C1C  683A               	setf	drawtext@color,c
  5649  000C1E  0E00               	movlw	0
  5650  000C20  6E3D               	movwf	drawtext@bg+1,c
  5651  000C22  0E00               	movlw	0
  5652  000C24  6E3C               	movwf	drawtext@bg,c
  5653  000C26  0E01               	movlw	1
  5654  000C28  6E3E               	movwf	drawtext@size,c
  5655  000C2A  0E06               	movlw	6
  5656  000C2C  ECCC  F009         	call	_drawtext
  5657                           
  5658                           ;Lab8_redo.c: 842: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5659  000C30  0E95               	movlw	149
  5660  000C32  6E37               	movwf	drawtext@y,c
  5661  000C34  0E6E               	movlw	low _SW_NSLT_Txt
  5662  000C36  6E38               	movwf	drawtext@_text,c
  5663  000C38  0E00               	movlw	high _SW_NSLT_Txt
  5664  000C3A  6E39               	movwf	drawtext@_text+1,c
  5665  000C3C  0EFF               	movlw	255
  5666  000C3E  6E3B               	movwf	drawtext@color+1,c
  5667  000C40  683A               	setf	drawtext@color,c
  5668  000C42  0E00               	movlw	0
  5669  000C44  6E3D               	movwf	drawtext@bg+1,c
  5670  000C46  0E00               	movlw	0
  5671  000C48  6E3C               	movwf	drawtext@bg,c
  5672  000C4A  0E01               	movlw	1
  5673  000C4C  6E3E               	movwf	drawtext@size,c
  5674  000C4E  0E20               	movlw	32
  5675  000C50  ECCC  F009         	call	_drawtext
  5676                           
  5677                           ;Lab8_redo.c: 843: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5678  000C54  0E95               	movlw	149
  5679  000C56  6E37               	movwf	drawtext@y,c
  5680  000C58  0E6A               	movlw	low _SW_EWPED_Txt
  5681  000C5A  6E38               	movwf	drawtext@_text,c
  5682  000C5C  0E00               	movlw	high _SW_EWPED_Txt
  5683  000C5E  6E39               	movwf	drawtext@_text+1,c
  5684  000C60  0EFF               	movlw	255
  5685  000C62  6E3B               	movwf	drawtext@color+1,c
  5686  000C64  683A               	setf	drawtext@color,c
  5687  000C66  0E00               	movlw	0
  5688  000C68  6E3D               	movwf	drawtext@bg+1,c
  5689  000C6A  0E00               	movlw	0
  5690  000C6C  6E3C               	movwf	drawtext@bg,c
  5691  000C6E  0E01               	movlw	1
  5692  000C70  6E3E               	movwf	drawtext@size,c
  5693  000C72  0E3A               	movlw	58
  5694  000C74  ECCC  F009         	call	_drawtext
  5695                           
  5696                           ;Lab8_redo.c: 844: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5697  000C78  0E95               	movlw	149
  5698  000C7A  6E37               	movwf	drawtext@y,c
  5699  000C7C  0E68               	movlw	low _SW_EWLT_Txt
  5700  000C7E  6E38               	movwf	drawtext@_text,c
  5701  000C80  0E00               	movlw	high _SW_EWLT_Txt
  5702  000C82  6E39               	movwf	drawtext@_text+1,c
  5703  000C84  0EFF               	movlw	255
  5704  000C86  6E3B               	movwf	drawtext@color+1,c
  5705  000C88  683A               	setf	drawtext@color,c
  5706  000C8A  0E00               	movlw	0
  5707  000C8C  6E3D               	movwf	drawtext@bg+1,c
  5708  000C8E  0E00               	movlw	0
  5709  000C90  6E3C               	movwf	drawtext@bg,c
  5710  000C92  0E01               	movlw	1
  5711  000C94  6E3E               	movwf	drawtext@size,c
  5712  000C96  0E57               	movlw	87
  5713  000C98  ECCC  F009         	call	_drawtext
  5714                           
  5715                           ;Lab8_redo.c: 845: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5716  000C9C  0E95               	movlw	149
  5717  000C9E  6E37               	movwf	drawtext@y,c
  5718  000CA0  0E6C               	movlw	low _SW_MODE_Txt
  5719  000CA2  6E38               	movwf	drawtext@_text,c
  5720  000CA4  0E00               	movlw	high _SW_MODE_Txt
  5721  000CA6  6E39               	movwf	drawtext@_text+1,c
  5722  000CA8  0EFF               	movlw	255
  5723  000CAA  6E3B               	movwf	drawtext@color+1,c
  5724  000CAC  683A               	setf	drawtext@color,c
  5725  000CAE  0E00               	movlw	0
  5726  000CB0  6E3D               	movwf	drawtext@bg+1,c
  5727  000CB2  0E00               	movlw	0
  5728  000CB4  6E3C               	movwf	drawtext@bg,c
  5729  000CB6  0E01               	movlw	1
  5730  000CB8  6E3E               	movwf	drawtext@size,c
  5731  000CBA  0E70               	movlw	112
  5732  000CBC  ECCC  F009         	call	_drawtext
  5733  000CC0  0012               	return		;funcret
  5734  000CC2                     __end_of_update_LCD_misc:
  5735                           	opt stack 0
  5736                           tblptru	equ	0xFF8
  5737                           tblptrh	equ	0xFF7
  5738                           tblptrl	equ	0xFF6
  5739                           tablat	equ	0xFF5
  5740                           intcon	equ	0xFF2
  5741                           intcon2	equ	0xFF1
  5742                           intcon3	equ	0xFF0
  5743                           postinc0	equ	0xFEE
  5744                           wreg	equ	0xFE8
  5745                           postdec1	equ	0xFE5
  5746                           fsr1l	equ	0xFE1
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function _get_full_ADC *****************
  5750 ;; Defined at:
  5751 ;;		line 421 in file "Lab8_redo.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;  result          2   18[COMRAM] unsigned int 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  2   14[COMRAM] unsigned int 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;Total ram usage:        6 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    2
  5772 ;; This function calls:
  5773 ;;		Nothing
  5774 ;; This function is called by:
  5775 ;;		_main
  5776 ;;		_update_LCD_misc
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           	psect	text24
  5781  0024EC                     __ptext24:
  5782                           	opt stack 0
  5783  0024EC                     _get_full_ADC:
  5784                           	opt stack 28
  5785                           
  5786                           ;Lab8_redo.c: 423: unsigned int result;
  5787                           ;Lab8_redo.c: 424: ADCON0bits.GO=1;
  5788                           
  5789                           ;incstack = 0
  5790  0024EC  82C2               	bsf	4034,1,c	;volatile
  5791                           
  5792                           ;Lab8_redo.c: 425: while(ADCON0bits.DONE==1);
  5793  0024EE  D000               	goto	l421
  5794  0024F0                     l421:
  5795  0024F0  B2C2               	btfsc	4034,1,c	;volatile
  5796  0024F2  D7FE               	goto	l421
  5797                           
  5798                           ;Lab8_redo.c: 426: result = (ADRESH * 0x100) + ADRESL;
  5799  0024F4  50C4               	movf	4036,w,c	;volatile
  5800  0024F6  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  5801  0024F8  6A11               	clrf	??_get_full_ADC& (0+255),c
  5802  0024FA  50C3               	movf	4035,w,c	;volatile
  5803  0024FC  2411               	addwf	??_get_full_ADC,w,c
  5804  0024FE  6E13               	movwf	get_full_ADC@result,c
  5805  002500  0E00               	movlw	0
  5806  002502  2012               	addwfc	??_get_full_ADC+1,w,c
  5807  002504  6E14               	movwf	get_full_ADC@result+1,c
  5808                           
  5809                           ;Lab8_redo.c: 428: return result;
  5810  002506  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  5811  00250A  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5812  00250E  D000               	goto	l424
  5813  002510                     l424:
  5814  002510  0012               	return		;funcret
  5815  002512                     __end_of_get_full_ADC:
  5816                           	opt stack 0
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           intcon	equ	0xFF2
  5822                           intcon2	equ	0xFF1
  5823                           intcon3	equ	0xFF0
  5824                           postinc0	equ	0xFEE
  5825                           wreg	equ	0xFE8
  5826                           postdec1	equ	0xFE5
  5827                           fsr1l	equ	0xFE1
  5828                           status	equ	0xFD8
  5829                           
  5830 ;; *************** function ___ftge *****************
  5831 ;; Defined at:
  5832 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;  ff1             3   14[COMRAM] float 
  5835 ;;  ff2             3   17[COMRAM] float 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;		None
  5838 ;; Return value:  Size  Location     Type
  5839 ;;		None               void
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5847 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;Total ram usage:        9 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    2
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_main
  5858 ;;		_update_LCD_misc
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text25
  5863  001B14                     __ptext25:
  5864                           	opt stack 0
  5865  001B14                     ___ftge:
  5866                           	opt stack 28
  5867                           
  5868                           ;incstack = 0
  5869  001B14  AE11               	btfss	___ftge@ff1+2,7,c
  5870  001B16  D017               	goto	l4478
  5871  001B18  C00F  F015         	movff	___ftge@ff1,??___ftge
  5872  001B1C  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  5873  001B20  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  5874  001B24  1E15               	comf	??___ftge,f,c
  5875  001B26  1E16               	comf	??___ftge+1,f,c
  5876  001B28  1E17               	comf	??___ftge+2,f,c
  5877  001B2A  2A15               	incf	??___ftge,f,c
  5878  001B2C  0E00               	movlw	0
  5879  001B2E  2216               	addwfc	??___ftge+1,f,c
  5880  001B30  2217               	addwfc	??___ftge+2,f,c
  5881  001B32  0E00               	movlw	0
  5882  001B34  2415               	addwf	??___ftge,w,c
  5883  001B36  6E0F               	movwf	___ftge@ff1,c
  5884  001B38  0E00               	movlw	0
  5885  001B3A  2016               	addwfc	??___ftge+1,w,c
  5886  001B3C  6E10               	movwf	___ftge@ff1+1,c
  5887  001B3E  0E80               	movlw	128
  5888  001B40  2017               	addwfc	??___ftge+2,w,c
  5889  001B42  6E11               	movwf	___ftge@ff1+2,c
  5890  001B44  D000               	goto	l4478
  5891  001B46                     l4478:
  5892  001B46  AE14               	btfss	___ftge@ff2+2,7,c
  5893  001B48  D017               	goto	l4482
  5894  001B4A  C012  F015         	movff	___ftge@ff2,??___ftge
  5895  001B4E  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  5896  001B52  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  5897  001B56  1E15               	comf	??___ftge,f,c
  5898  001B58  1E16               	comf	??___ftge+1,f,c
  5899  001B5A  1E17               	comf	??___ftge+2,f,c
  5900  001B5C  2A15               	incf	??___ftge,f,c
  5901  001B5E  0E00               	movlw	0
  5902  001B60  2216               	addwfc	??___ftge+1,f,c
  5903  001B62  2217               	addwfc	??___ftge+2,f,c
  5904  001B64  0E00               	movlw	0
  5905  001B66  2415               	addwf	??___ftge,w,c
  5906  001B68  6E12               	movwf	___ftge@ff2,c
  5907  001B6A  0E00               	movlw	0
  5908  001B6C  2016               	addwfc	??___ftge+1,w,c
  5909  001B6E  6E13               	movwf	___ftge@ff2+1,c
  5910  001B70  0E80               	movlw	128
  5911  001B72  2017               	addwfc	??___ftge+2,w,c
  5912  001B74  6E14               	movwf	___ftge@ff2+2,c
  5913  001B76  D000               	goto	l4482
  5914  001B78                     l4482:
  5915  001B78  0E00               	movlw	0
  5916  001B7A  1A0F               	xorwf	___ftge@ff1,f,c
  5917  001B7C  0E00               	movlw	0
  5918  001B7E  1A10               	xorwf	___ftge@ff1+1,f,c
  5919  001B80  0E80               	movlw	128
  5920  001B82  1A11               	xorwf	___ftge@ff1+2,f,c
  5921  001B84  0E00               	movlw	0
  5922  001B86  1A12               	xorwf	___ftge@ff2,f,c
  5923  001B88  0E00               	movlw	0
  5924  001B8A  1A13               	xorwf	___ftge@ff2+1,f,c
  5925  001B8C  0E80               	movlw	128
  5926  001B8E  1A14               	xorwf	___ftge@ff2+2,f,c
  5927  001B90  5012               	movf	___ftge@ff2,w,c
  5928  001B92  5C0F               	subwf	___ftge@ff1,w,c
  5929  001B94  5013               	movf	___ftge@ff2+1,w,c
  5930  001B96  5810               	subwfb	___ftge@ff1+1,w,c
  5931  001B98  5014               	movf	___ftge@ff2+2,w,c
  5932  001B9A  5811               	subwfb	___ftge@ff1+2,w,c
  5933  001B9C  B0D8               	btfsc	status,0,c
  5934  001B9E  D002               	goto	l4488
  5935  001BA0  90D8               	bcf	status,0,c
  5936  001BA2  D002               	goto	l980
  5937  001BA4                     l4488:
  5938  001BA4  80D8               	bsf	status,0,c
  5939  001BA6  D000               	goto	l980
  5940  001BA8                     l980:
  5941  001BA8  0012               	return		;funcret
  5942  001BAA                     __end_of___ftge:
  5943                           	opt stack 0
  5944                           tblptru	equ	0xFF8
  5945                           tblptrh	equ	0xFF7
  5946                           tblptrl	equ	0xFF6
  5947                           tablat	equ	0xFF5
  5948                           intcon	equ	0xFF2
  5949                           intcon2	equ	0xFF1
  5950                           intcon3	equ	0xFF0
  5951                           postinc0	equ	0xFEE
  5952                           wreg	equ	0xFE8
  5953                           postdec1	equ	0xFE5
  5954                           fsr1l	equ	0xFE1
  5955                           status	equ	0xFD8
  5956                           
  5957 ;; *************** function ___ftdiv *****************
  5958 ;; Defined at:
  5959 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;  f1              3   26[COMRAM] float 
  5962 ;;  f2              3   29[COMRAM] float 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  f3              3   36[COMRAM] float 
  5965 ;;  sign            1   40[COMRAM] unsigned char 
  5966 ;;  exp             1   39[COMRAM] unsigned char 
  5967 ;;  cntr            1   35[COMRAM] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  3   26[COMRAM] float 
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5977 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;Total ram usage:       15 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    3
  5984 ;; This function calls:
  5985 ;;		___ftpack
  5986 ;; This function is called by:
  5987 ;;		_main
  5988 ;;		_update_LCD_misc
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text26
  5993  001594                     __ptext26:
  5994                           	opt stack 0
  5995  001594                     ___ftdiv:
  5996                           	opt stack 27
  5997                           
  5998                           ;incstack = 0
  5999  001594  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  6000  001598  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  6001  00159A  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  6002  00159C  341C               	rlcf	___ftdiv@f1+1,w,c
  6003  00159E  3621               	rlcf	??___ftdiv& (0+255),f,c
  6004  0015A0  E301               	bnc	u3201
  6005  0015A2  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  6006  0015A4                     u3201:
  6007  0015A4  5021               	movf	??___ftdiv,w,c
  6008  0015A6  6E28               	movwf	___ftdiv@exp,c
  6009  0015A8  5028               	movf	___ftdiv@exp,w,c
  6010  0015AA  A4D8               	btfss	status,2,c
  6011  0015AC  D002               	goto	l4422
  6012  0015AE  D00E               	goto	l4424
  6013  0015B0  D061               	goto	l971
  6014  0015B2                     l4422:
  6015  0015B2  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  6016  0015B6  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  6017  0015B8  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  6018  0015BA  341F               	rlcf	___ftdiv@f2+1,w,c
  6019  0015BC  3621               	rlcf	??___ftdiv& (0+255),f,c
  6020  0015BE  E301               	bnc	u3221
  6021  0015C0  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  6022  0015C2                     u3221:
  6023  0015C2  5021               	movf	??___ftdiv,w,c
  6024  0015C4  6E29               	movwf	___ftdiv@sign,c
  6025  0015C6  5029               	movf	___ftdiv@sign,w,c
  6026  0015C8  A4D8               	btfss	status,2,c
  6027  0015CA  D007               	goto	l4428
  6028  0015CC                     l4424:
  6029  0015CC  0E00               	movlw	0
  6030  0015CE  6E1B               	movwf	?___ftdiv,c
  6031  0015D0  0E00               	movlw	0
  6032  0015D2  6E1C               	movwf	?___ftdiv+1,c
  6033  0015D4  0E00               	movlw	0
  6034  0015D6  6E1D               	movwf	?___ftdiv+2,c
  6035  0015D8  D04D               	goto	l971
  6036  0015DA                     l4428:
  6037  0015DA  0E00               	movlw	0
  6038  0015DC  6E25               	movwf	___ftdiv@f3,c
  6039  0015DE  0E00               	movlw	0
  6040  0015E0  6E26               	movwf	___ftdiv@f3+1,c
  6041  0015E2  0E00               	movlw	0
  6042  0015E4  6E27               	movwf	___ftdiv@f3+2,c
  6043  0015E6  5029               	movf	___ftdiv@sign,w,c
  6044  0015E8  0F89               	addlw	137
  6045  0015EA  5E28               	subwf	___ftdiv@exp,f,c
  6046  0015EC  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  6047  0015F0  5020               	movf	___ftdiv@f2+2,w,c
  6048  0015F2  1A29               	xorwf	___ftdiv@sign,f,c
  6049  0015F4  0E80               	movlw	128
  6050  0015F6  1629               	andwf	___ftdiv@sign,f,c
  6051  0015F8  8E1C               	bsf	___ftdiv@f1+1,7,c
  6052  0015FA  0EFF               	movlw	255
  6053  0015FC  161B               	andwf	___ftdiv@f1,f,c
  6054  0015FE  0EFF               	movlw	255
  6055  001600  161C               	andwf	___ftdiv@f1+1,f,c
  6056  001602  0E00               	movlw	0
  6057  001604  161D               	andwf	___ftdiv@f1+2,f,c
  6058  001606  8E1F               	bsf	___ftdiv@f2+1,7,c
  6059  001608  0EFF               	movlw	255
  6060  00160A  161E               	andwf	___ftdiv@f2,f,c
  6061  00160C  0EFF               	movlw	255
  6062  00160E  161F               	andwf	___ftdiv@f2+1,f,c
  6063  001610  0E00               	movlw	0
  6064  001612  1620               	andwf	___ftdiv@f2+2,f,c
  6065  001614  0E18               	movlw	24
  6066  001616  6E24               	movwf	___ftdiv@cntr,c
  6067  001618  D000               	goto	l4448
  6068  00161A                     l4448:
  6069  00161A  90D8               	bcf	status,0,c
  6070  00161C  3625               	rlcf	___ftdiv@f3,f,c
  6071  00161E  3626               	rlcf	___ftdiv@f3+1,f,c
  6072  001620  3627               	rlcf	___ftdiv@f3+2,f,c
  6073  001622  501E               	movf	___ftdiv@f2,w,c
  6074  001624  5C1B               	subwf	___ftdiv@f1,w,c
  6075  001626  501F               	movf	___ftdiv@f2+1,w,c
  6076  001628  581C               	subwfb	___ftdiv@f1+1,w,c
  6077  00162A  5020               	movf	___ftdiv@f2+2,w,c
  6078  00162C  581D               	subwfb	___ftdiv@f1+2,w,c
  6079  00162E  A0D8               	btfss	status,0,c
  6080  001630  D007               	goto	l974
  6081  001632  501E               	movf	___ftdiv@f2,w,c
  6082  001634  5E1B               	subwf	___ftdiv@f1,f,c
  6083  001636  501F               	movf	___ftdiv@f2+1,w,c
  6084  001638  5A1C               	subwfb	___ftdiv@f1+1,f,c
  6085  00163A  5020               	movf	___ftdiv@f2+2,w,c
  6086  00163C  5A1D               	subwfb	___ftdiv@f1+2,f,c
  6087  00163E  8025               	bsf	___ftdiv@f3,0,c
  6088  001640                     l974:
  6089  001640  90D8               	bcf	status,0,c
  6090  001642  361B               	rlcf	___ftdiv@f1,f,c
  6091  001644  361C               	rlcf	___ftdiv@f1+1,f,c
  6092  001646  361D               	rlcf	___ftdiv@f1+2,f,c
  6093  001648  2E24               	decfsz	___ftdiv@cntr,f,c
  6094  00164A  D7E7               	goto	l4448
  6095  00164C  D000               	goto	l4458
  6096  00164E                     l4458:
  6097  00164E  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  6098  001652  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6099  001656  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6100  00165A  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  6101  00165E  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  6102  001662  EC76  F00C         	call	___ftpack	;wreg free
  6103  001666  C00F  F01B         	movff	?___ftpack,?___ftdiv
  6104  00166A  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  6105  00166E  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  6106  001672  D000               	goto	l971
  6107  001674                     l971:
  6108  001674  0012               	return		;funcret
  6109  001676                     __end_of___ftdiv:
  6110                           	opt stack 0
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           intcon	equ	0xFF2
  6116                           intcon2	equ	0xFF1
  6117                           intcon3	equ	0xFF0
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           postdec1	equ	0xFE5
  6121                           fsr1l	equ	0xFE1
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function ___awtoft *****************
  6125 ;; Defined at:
  6126 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  c               2   22[COMRAM] int 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  sign            1   25[COMRAM] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  3   22[COMRAM] float 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6140 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;Total ram usage:        4 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    3
  6147 ;; This function calls:
  6148 ;;		___ftpack
  6149 ;; This function is called by:
  6150 ;;		_main
  6151 ;;		_update_LCD_misc
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           	psect	text27
  6156  002366                     __ptext27:
  6157                           	opt stack 0
  6158  002366                     ___awtoft:
  6159                           	opt stack 27
  6160                           
  6161                           ;incstack = 0
  6162  002366  0E00               	movlw	0
  6163  002368  6E1A               	movwf	___awtoft@sign,c
  6164  00236A  AE18               	btfss	___awtoft@c+1,7,c
  6165  00236C  D007               	goto	l4470
  6166  00236E  6C17               	negf	___awtoft@c,c
  6167  002370  1E18               	comf	___awtoft@c+1,f,c
  6168  002372  B0D8               	btfsc	status,0,c
  6169  002374  2A18               	incf	___awtoft@c+1,f,c
  6170  002376  0E01               	movlw	1
  6171  002378  6E1A               	movwf	___awtoft@sign,c
  6172  00237A  D000               	goto	l4470
  6173  00237C                     l4470:
  6174  00237C  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  6175  002380  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  6176  002384  6A11               	clrf	___ftpack@arg+2,c
  6177  002386  0E8E               	movlw	142
  6178  002388  6E12               	movwf	___ftpack@exp,c
  6179  00238A  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  6180  00238E  EC76  F00C         	call	___ftpack	;wreg free
  6181  002392  C00F  F017         	movff	?___ftpack,?___awtoft
  6182  002396  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  6183  00239A  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  6184  00239E  D000               	goto	l809
  6185  0023A0                     l809:
  6186  0023A0  0012               	return		;funcret
  6187  0023A2                     __end_of___awtoft:
  6188                           	opt stack 0
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           intcon	equ	0xFF2
  6194                           intcon2	equ	0xFF1
  6195                           intcon3	equ	0xFF0
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           fsr1l	equ	0xFE1
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function ___ftpack *****************
  6203 ;; Defined at:
  6204 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  arg             3   14[COMRAM] unsigned um
  6207 ;;  exp             1   17[COMRAM] unsigned char 
  6208 ;;  sign            1   18[COMRAM] unsigned char 
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;		None
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  3   14[COMRAM] float 
  6213 ;; Registers used:
  6214 ;;		wreg, status,2, status,0
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6220 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;Total ram usage:        8 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    2
  6227 ;; This function calls:
  6228 ;;		Nothing
  6229 ;; This function is called by:
  6230 ;;		___awtoft
  6231 ;;		___ftdiv
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           	psect	text28
  6236  0018EC                     __ptext28:
  6237                           	opt stack 0
  6238  0018EC                     ___ftpack:
  6239                           	opt stack 27
  6240                           
  6241                           ;incstack = 0
  6242  0018EC  5012               	movf	___ftpack@exp,w,c
  6243  0018EE  B4D8               	btfsc	status,2,c
  6244  0018F0  D005               	goto	l4308
  6245  0018F2  500F               	movf	___ftpack@arg,w,c
  6246  0018F4  1010               	iorwf	___ftpack@arg+1,w,c
  6247  0018F6  1011               	iorwf	___ftpack@arg+2,w,c
  6248  0018F8  A4D8               	btfss	status,2,c
  6249  0018FA  D00E               	goto	l4314
  6250  0018FC                     l4308:
  6251  0018FC  0E00               	movlw	0
  6252  0018FE  6E0F               	movwf	?___ftpack,c
  6253  001900  0E00               	movlw	0
  6254  001902  6E10               	movwf	?___ftpack+1,c
  6255  001904  0E00               	movlw	0
  6256  001906  6E11               	movwf	?___ftpack+2,c
  6257  001908  D053               	goto	l899
  6258  00190A  D006               	goto	l4314
  6259  00190C                     l4312:
  6260  00190C  2A12               	incf	___ftpack@exp,f,c
  6261  00190E  90D8               	bcf	status,0,c
  6262  001910  3211               	rrcf	___ftpack@arg+2,f,c
  6263  001912  3210               	rrcf	___ftpack@arg+1,f,c
  6264  001914  320F               	rrcf	___ftpack@arg,f,c
  6265  001916  D000               	goto	l4314
  6266  001918                     l4314:
  6267  001918  0E00               	movlw	0
  6268  00191A  140F               	andwf	___ftpack@arg,w,c
  6269  00191C  6E14               	movwf	??___ftpack& (0+255),c
  6270  00191E  0E00               	movlw	0
  6271  001920  1410               	andwf	___ftpack@arg+1,w,c
  6272  001922  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6273  001924  0EFE               	movlw	254
  6274  001926  1411               	andwf	___ftpack@arg+2,w,c
  6275  001928  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6276  00192A  5014               	movf	??___ftpack,w,c
  6277  00192C  1015               	iorwf	??___ftpack+1,w,c
  6278  00192E  1016               	iorwf	??___ftpack+2,w,c
  6279  001930  B4D8               	btfsc	status,2,c
  6280  001932  D00E               	goto	l4320
  6281  001934  D7EB               	goto	l4312
  6282  001936  D00C               	goto	l4320
  6283  001938                     l4316:
  6284  001938  2A12               	incf	___ftpack@exp,f,c
  6285  00193A  0E01               	movlw	1
  6286  00193C  260F               	addwf	___ftpack@arg,f,c
  6287  00193E  0E00               	movlw	0
  6288  001940  2210               	addwfc	___ftpack@arg+1,f,c
  6289  001942  0E00               	movlw	0
  6290  001944  2211               	addwfc	___ftpack@arg+2,f,c
  6291  001946  90D8               	bcf	status,0,c
  6292  001948  3211               	rrcf	___ftpack@arg+2,f,c
  6293  00194A  3210               	rrcf	___ftpack@arg+1,f,c
  6294  00194C  320F               	rrcf	___ftpack@arg,f,c
  6295  00194E  D000               	goto	l4320
  6296  001950                     l4320:
  6297  001950  0E00               	movlw	0
  6298  001952  140F               	andwf	___ftpack@arg,w,c
  6299  001954  6E14               	movwf	??___ftpack& (0+255),c
  6300  001956  0E00               	movlw	0
  6301  001958  1410               	andwf	___ftpack@arg+1,w,c
  6302  00195A  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6303  00195C  0EFF               	movlw	255
  6304  00195E  1411               	andwf	___ftpack@arg+2,w,c
  6305  001960  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6306  001962  5014               	movf	??___ftpack,w,c
  6307  001964  1015               	iorwf	??___ftpack+1,w,c
  6308  001966  1016               	iorwf	??___ftpack+2,w,c
  6309  001968  B4D8               	btfsc	status,2,c
  6310  00196A  D008               	goto	l4324
  6311  00196C  D7E5               	goto	l4316
  6312  00196E  D006               	goto	l4324
  6313  001970                     l4322:
  6314  001970  0612               	decf	___ftpack@exp,f,c
  6315  001972  90D8               	bcf	status,0,c
  6316  001974  360F               	rlcf	___ftpack@arg,f,c
  6317  001976  3610               	rlcf	___ftpack@arg+1,f,c
  6318  001978  3611               	rlcf	___ftpack@arg+2,f,c
  6319  00197A  D000               	goto	l4324
  6320  00197C                     l4324:
  6321  00197C  BE10               	btfsc	___ftpack@arg+1,7,c
  6322  00197E  D004               	goto	l910
  6323  001980  0E02               	movlw	2
  6324  001982  6012               	cpfslt	___ftpack@exp,c
  6325  001984  D7F5               	goto	l4322
  6326  001986  D000               	goto	l910
  6327  001988                     l910:
  6328  001988  B012               	btfsc	___ftpack@exp,0,c
  6329  00198A  D002               	goto	l4330
  6330  00198C  9E10               	bcf	___ftpack@arg+1,7,c
  6331  00198E  D000               	goto	l4330
  6332  001990                     l4330:
  6333  001990  90D8               	bcf	status,0,c
  6334  001992  3212               	rrcf	___ftpack@exp,f,c
  6335  001994  5012               	movf	___ftpack@exp,w,c
  6336  001996  1211               	iorwf	___ftpack@arg+2,f,c
  6337  001998  5013               	movf	___ftpack@sign,w,c
  6338  00199A  B4D8               	btfsc	status,2,c
  6339  00199C  D002               	goto	l4336
  6340  00199E  8E11               	bsf	___ftpack@arg+2,7,c
  6341  0019A0  D000               	goto	l4336
  6342  0019A2                     l4336:
  6343  0019A2  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  6344  0019A6  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  6345  0019AA  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  6346  0019AE  D000               	goto	l899
  6347  0019B0                     l899:
  6348  0019B0  0012               	return		;funcret
  6349  0019B2                     __end_of___ftpack:
  6350                           	opt stack 0
  6351                           tblptru	equ	0xFF8
  6352                           tblptrh	equ	0xFF7
  6353                           tblptrl	equ	0xFF6
  6354                           tablat	equ	0xFF5
  6355                           intcon	equ	0xFF2
  6356                           intcon2	equ	0xFF1
  6357                           intcon3	equ	0xFF0
  6358                           postinc0	equ	0xFEE
  6359                           wreg	equ	0xFE8
  6360                           postdec1	equ	0xFE5
  6361                           fsr1l	equ	0xFE1
  6362                           status	equ	0xFD8
  6363                           
  6364 ;; *************** function _strcpy *****************
  6365 ;; Defined at:
  6366 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;  to              2   14[COMRAM] PTR unsigned char 
  6369 ;;		 -> NULL(0), buffer(31), 
  6370 ;;  from            2   16[COMRAM] PTR const unsigned char 
  6371 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  6372 ;;		 -> STR_10(4), STR_9(7), STR_8(10), STR_7(7), 
  6373 ;;		 -> STR_6(12), STR_5(2), STR_4(4), STR_3(4), 
  6374 ;;		 -> STR_2(6), STR_1(20), 
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;  cp              2   18[COMRAM] PTR unsigned char 
  6377 ;;		 -> NULL(0), buffer(31), 
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  2   14[COMRAM] PTR unsigned char 
  6380 ;; Registers used:
  6381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;Total ram usage:        6 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    2
  6394 ;; This function calls:
  6395 ;;		Nothing
  6396 ;; This function is called by:
  6397 ;;		_Initialize_Screen
  6398 ;;		_Wait_One_Second
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text29
  6403  002412                     __ptext29:
  6404                           	opt stack 0
  6405  002412                     _strcpy:
  6406                           	opt stack 25
  6407                           
  6408                           ;incstack = 0
  6409  002412  C00F  F013         	movff	strcpy@to,strcpy@cp
  6410  002416  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  6411  00241A  D005               	goto	l4560
  6412  00241C                     l4558:
  6413  00241C  4A13               	infsnz	strcpy@cp,f,c
  6414  00241E  2A14               	incf	strcpy@cp+1,f,c
  6415  002420  4A11               	infsnz	strcpy@from,f,c
  6416  002422  2A12               	incf	strcpy@from+1,f,c
  6417  002424  D000               	goto	l4560
  6418  002426                     l4560:
  6419  002426  C011  FFF6         	movff	strcpy@from,tblptrl
  6420  00242A  C012  FFF7         	movff	strcpy@from+1,tblptrh
  6421  00242E                     	if	0	;tblptru may be non-zero
  6422  00242E                     	endif
  6423  00242E                     	if	0	;tblptru may be non-zero
  6424  00242E                     	endif
  6425  00242E  C013  FFD9         	movff	strcpy@cp,fsr2l
  6426  002432  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  6427  002436  0008               	tblrd		*
  6428  002438  CFF5 FFDF          	movff	tablat,indf2
  6429  00243C  50DF               	movf	indf2,w,c
  6430  00243E  A4D8               	btfss	status,2,c
  6431  002440  D7ED               	goto	l4558
  6432                           
  6433                           ;	Return value of _strcpy is never used
  6434  002442  0012               	return		;funcret
  6435  002444                     __end_of_strcpy:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           intcon	equ	0xFF2
  6442                           intcon2	equ	0xFF1
  6443                           intcon3	equ	0xFF0
  6444                           postinc0	equ	0xFEE
  6445                           wreg	equ	0xFE8
  6446                           postdec1	equ	0xFE5
  6447                           fsr1l	equ	0xFE1
  6448                           indf2	equ	0xFDF
  6449                           fsr2h	equ	0xFDA
  6450                           fsr2l	equ	0xFD9
  6451                           status	equ	0xFD8
  6452                           
  6453 ;; *************** function _Set_NS_LT *****************
  6454 ;; Defined at:
  6455 ;;		line 445 in file "Lab8_redo.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  color           1    wreg     unsigned char 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  color           1    2[BANK0 ] unsigned char 
  6460 ;; Return value:  Size  Location     Type
  6461 ;;		None               void
  6462 ;; Registers used:
  6463 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;Total ram usage:        1 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    9
  6476 ;; This function calls:
  6477 ;;		_update_LCD_color
  6478 ;; This function is called by:
  6479 ;;		_Day_Mode
  6480 ;;		_Night_Mode
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           	psect	text30
  6485  0021CA                     __ptext30:
  6486                           	opt stack 0
  6487  0021CA                     _Set_NS_LT:
  6488                           	opt stack 20
  6489                           
  6490                           ;incstack = 0
  6491                           ;Set_NS_LT@color stored from wreg
  6492  0021CA  0100               	movlb	0	; () banked
  6493  0021CC  6FA7               	movwf	Set_NS_LT@color& (0+255),b
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;Lab8_redo.c: 447: direction = 1;
  6497  0021CE  0E01               	movlw	1
  6498  0021D0  6E59               	movwf	_direction,c
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;Lab8_redo.c: 448: update_LCD_color(direction, color);
  6502  0021D2  C0A7  F041         	movff	Set_NS_LT@color,update_LCD_color@color
  6503  0021D6  5059               	movf	_direction,w,c
  6504  0021D8  EC9D  F003         	call	_update_LCD_color
  6505                           
  6506                           ;Lab8_redo.c: 450: switch (color)
  6507  0021DC  D00A               	goto	l5042
  6508  0021DE                     l437:
  6509                           
  6510                           ; BSR set to: 0
  6511  0021DE  9082               	bcf	3970,0,c	;volatile
  6512  0021E0  D001               	goto	L9
  6513  0021E2                     l439:
  6514                           
  6515                           ; BSR set to: 0
  6516  0021E2  8082               	bsf	3970,0,c	;volatile
  6517  0021E4                     L9:
  6518  0021E4  9282               	bcf	3970,1,c	;volatile
  6519  0021E6  D014               	goto	l442
  6520  0021E8                     l440:
  6521                           
  6522                           ; BSR set to: 0
  6523  0021E8  9082               	bcf	3970,0,c	;volatile
  6524  0021EA  D001               	goto	L10
  6525  0021EC                     l441:
  6526                           
  6527                           ; BSR set to: 0
  6528  0021EC  8082               	bsf	3970,0,c	;volatile
  6529  0021EE                     L10:
  6530  0021EE  8282               	bsf	3970,1,c	;volatile
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;Lab8_redo.c: 456: }
  6534  0021F0  D00F               	goto	l442
  6535  0021F2                     l5042:
  6536  0021F2  0100               	movlb	0	; () banked
  6537  0021F4  51A7               	movf	Set_NS_LT@color& (0+255),w,b
  6538                           
  6539                           ; Switch size 1, requested type "space"
  6540                           ; Number of cases is 4, Range of values is 0 to 3
  6541                           ; switch strategies available:
  6542                           ; Name         Instructions Cycles
  6543                           ; simple_byte           13     7 (average)
  6544                           ;	Chosen strategy is simple_byte
  6545  0021F6  0A00               	xorlw	0	; case 0
  6546  0021F8  B4D8               	btfsc	status,2,c
  6547  0021FA  D7F1               	goto	l437
  6548  0021FC  0A01               	xorlw	1	; case 1
  6549  0021FE  B4D8               	btfsc	status,2,c
  6550  002200  D7F0               	goto	l439
  6551  002202  0A03               	xorlw	3	; case 2
  6552  002204  B4D8               	btfsc	status,2,c
  6553  002206  D7F0               	goto	l440
  6554  002208  0A01               	xorlw	1	; case 3
  6555  00220A  B4D8               	btfsc	status,2,c
  6556  00220C  D7EF               	goto	l441
  6557  00220E  D000               	goto	l442
  6558  002210                     l442:
  6559                           
  6560                           ; BSR set to: 0
  6561  002210  0012               	return		;funcret
  6562  002212                     __end_of_Set_NS_LT:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           intcon	equ	0xFF2
  6569                           intcon2	equ	0xFF1
  6570                           intcon3	equ	0xFF0
  6571                           postinc0	equ	0xFEE
  6572                           wreg	equ	0xFE8
  6573                           postdec1	equ	0xFE5
  6574                           fsr1l	equ	0xFE1
  6575                           indf2	equ	0xFDF
  6576                           fsr2h	equ	0xFDA
  6577                           fsr2l	equ	0xFD9
  6578                           status	equ	0xFD8
  6579                           
  6580 ;; *************** function _Set_NS *****************
  6581 ;; Defined at:
  6582 ;;		line 431 in file "Lab8_redo.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  color           1    wreg     unsigned char 
  6585 ;; Auto vars:     Size  Location     Type
  6586 ;;  color           1    2[BANK0 ] unsigned char 
  6587 ;; Return value:  Size  Location     Type
  6588 ;;		None               void
  6589 ;; Registers used:
  6590 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6591 ;; Tracked objects:
  6592 ;;		On entry : 0/0
  6593 ;;		On exit  : 0/0
  6594 ;;		Unchanged: 0/0
  6595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;Total ram usage:        1 bytes
  6601 ;; Hardware stack levels used:    1
  6602 ;; Hardware stack levels required when called:    9
  6603 ;; This function calls:
  6604 ;;		_update_LCD_color
  6605 ;; This function is called by:
  6606 ;;		_Day_Mode
  6607 ;;		_Night_Mode
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           	psect	text31
  6612  002212                     __ptext31:
  6613                           	opt stack 0
  6614  002212                     _Set_NS:
  6615                           	opt stack 20
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;incstack = 0
  6619                           ;Set_NS@color stored from wreg
  6620  002212  0100               	movlb	0	; () banked
  6621  002214  6FA7               	movwf	Set_NS@color& (0+255),b
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;Lab8_redo.c: 433: direction = 0;
  6625  002216  0E00               	movlw	0
  6626  002218  6E59               	movwf	_direction,c
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;Lab8_redo.c: 434: update_LCD_color(direction, color);
  6630  00221A  C0A7  F041         	movff	Set_NS@color,update_LCD_color@color
  6631  00221E  5059               	movf	_direction,w,c
  6632  002220  EC9D  F003         	call	_update_LCD_color
  6633                           
  6634                           ;Lab8_redo.c: 436: switch (color)
  6635  002224  D00A               	goto	l5034
  6636  002226                     l428:
  6637                           
  6638                           ; BSR set to: 0
  6639  002226  9881               	bcf	3969,4,c	;volatile
  6640  002228  D001               	goto	L11
  6641  00222A                     l430:
  6642                           
  6643                           ; BSR set to: 0
  6644  00222A  8881               	bsf	3969,4,c	;volatile
  6645  00222C                     L11:
  6646  00222C  9A81               	bcf	3969,5,c	;volatile
  6647  00222E  D014               	goto	l433
  6648  002230                     l431:
  6649                           
  6650                           ; BSR set to: 0
  6651  002230  9881               	bcf	3969,4,c	;volatile
  6652  002232  D001               	goto	L12
  6653  002234                     l432:
  6654                           
  6655                           ; BSR set to: 0
  6656  002234  8881               	bsf	3969,4,c	;volatile
  6657  002236                     L12:
  6658  002236  8A81               	bsf	3969,5,c	;volatile
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;Lab8_redo.c: 442: }
  6662  002238  D00F               	goto	l433
  6663  00223A                     l5034:
  6664  00223A  0100               	movlb	0	; () banked
  6665  00223C  51A7               	movf	Set_NS@color& (0+255),w,b
  6666                           
  6667                           ; Switch size 1, requested type "space"
  6668                           ; Number of cases is 4, Range of values is 0 to 3
  6669                           ; switch strategies available:
  6670                           ; Name         Instructions Cycles
  6671                           ; simple_byte           13     7 (average)
  6672                           ;	Chosen strategy is simple_byte
  6673  00223E  0A00               	xorlw	0	; case 0
  6674  002240  B4D8               	btfsc	status,2,c
  6675  002242  D7F1               	goto	l428
  6676  002244  0A01               	xorlw	1	; case 1
  6677  002246  B4D8               	btfsc	status,2,c
  6678  002248  D7F0               	goto	l430
  6679  00224A  0A03               	xorlw	3	; case 2
  6680  00224C  B4D8               	btfsc	status,2,c
  6681  00224E  D7F0               	goto	l431
  6682  002250  0A01               	xorlw	1	; case 3
  6683  002252  B4D8               	btfsc	status,2,c
  6684  002254  D7EF               	goto	l432
  6685  002256  D000               	goto	l433
  6686  002258                     l433:
  6687                           
  6688                           ; BSR set to: 0
  6689  002258  0012               	return		;funcret
  6690  00225A                     __end_of_Set_NS:
  6691                           	opt stack 0
  6692                           tblptru	equ	0xFF8
  6693                           tblptrh	equ	0xFF7
  6694                           tblptrl	equ	0xFF6
  6695                           tablat	equ	0xFF5
  6696                           intcon	equ	0xFF2
  6697                           intcon2	equ	0xFF1
  6698                           intcon3	equ	0xFF0
  6699                           postinc0	equ	0xFEE
  6700                           wreg	equ	0xFE8
  6701                           postdec1	equ	0xFE5
  6702                           fsr1l	equ	0xFE1
  6703                           indf2	equ	0xFDF
  6704                           fsr2h	equ	0xFDA
  6705                           fsr2l	equ	0xFD9
  6706                           status	equ	0xFD8
  6707                           
  6708 ;; *************** function _Set_EW_LT *****************
  6709 ;; Defined at:
  6710 ;;		line 473 in file "Lab8_redo.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;  color           1    wreg     unsigned char 
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;  color           1    2[BANK0 ] unsigned char 
  6715 ;; Return value:  Size  Location     Type
  6716 ;;		None               void
  6717 ;; Registers used:
  6718 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;Total ram usage:        1 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; Hardware stack levels required when called:    9
  6731 ;; This function calls:
  6732 ;;		_update_LCD_color
  6733 ;; This function is called by:
  6734 ;;		_Day_Mode
  6735 ;;		_Night_Mode
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text32
  6740  00225A                     __ptext32:
  6741                           	opt stack 0
  6742  00225A                     _Set_EW_LT:
  6743                           	opt stack 20
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;incstack = 0
  6747                           ;Set_EW_LT@color stored from wreg
  6748  00225A  0100               	movlb	0	; () banked
  6749  00225C  6FA7               	movwf	Set_EW_LT@color& (0+255),b
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;Lab8_redo.c: 475: direction = 3;
  6753  00225E  0E03               	movlw	3
  6754  002260  6E59               	movwf	_direction,c
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;Lab8_redo.c: 476: update_LCD_color(direction, color);
  6758  002262  C0A7  F041         	movff	Set_EW_LT@color,update_LCD_color@color
  6759  002266  5059               	movf	_direction,w,c
  6760  002268  EC9D  F003         	call	_update_LCD_color
  6761                           
  6762                           ;Lab8_redo.c: 478: switch (color)
  6763  00226C  D00A               	goto	l5058
  6764  00226E                     l455:
  6765                           
  6766                           ; BSR set to: 0
  6767  00226E  9284               	bcf	3972,1,c	;volatile
  6768  002270  D001               	goto	L13
  6769  002272                     l457:
  6770                           
  6771                           ; BSR set to: 0
  6772  002272  8284               	bsf	3972,1,c	;volatile
  6773  002274                     L13:
  6774  002274  9484               	bcf	3972,2,c	;volatile
  6775  002276  D014               	goto	l460
  6776  002278                     l458:
  6777                           
  6778                           ; BSR set to: 0
  6779  002278  9284               	bcf	3972,1,c	;volatile
  6780  00227A  D001               	goto	L14
  6781  00227C                     l459:
  6782                           
  6783                           ; BSR set to: 0
  6784  00227C  8284               	bsf	3972,1,c	;volatile
  6785  00227E                     L14:
  6786  00227E  8484               	bsf	3972,2,c	;volatile
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;Lab8_redo.c: 484: }
  6790  002280  D00F               	goto	l460
  6791  002282                     l5058:
  6792  002282  0100               	movlb	0	; () banked
  6793  002284  51A7               	movf	Set_EW_LT@color& (0+255),w,b
  6794                           
  6795                           ; Switch size 1, requested type "space"
  6796                           ; Number of cases is 4, Range of values is 0 to 3
  6797                           ; switch strategies available:
  6798                           ; Name         Instructions Cycles
  6799                           ; simple_byte           13     7 (average)
  6800                           ;	Chosen strategy is simple_byte
  6801  002286  0A00               	xorlw	0	; case 0
  6802  002288  B4D8               	btfsc	status,2,c
  6803  00228A  D7F1               	goto	l455
  6804  00228C  0A01               	xorlw	1	; case 1
  6805  00228E  B4D8               	btfsc	status,2,c
  6806  002290  D7F0               	goto	l457
  6807  002292  0A03               	xorlw	3	; case 2
  6808  002294  B4D8               	btfsc	status,2,c
  6809  002296  D7F0               	goto	l458
  6810  002298  0A01               	xorlw	1	; case 3
  6811  00229A  B4D8               	btfsc	status,2,c
  6812  00229C  D7EF               	goto	l459
  6813  00229E  D000               	goto	l460
  6814  0022A0                     l460:
  6815                           
  6816                           ; BSR set to: 0
  6817  0022A0  0012               	return		;funcret
  6818  0022A2                     __end_of_Set_EW_LT:
  6819                           	opt stack 0
  6820                           tblptru	equ	0xFF8
  6821                           tblptrh	equ	0xFF7
  6822                           tblptrl	equ	0xFF6
  6823                           tablat	equ	0xFF5
  6824                           intcon	equ	0xFF2
  6825                           intcon2	equ	0xFF1
  6826                           intcon3	equ	0xFF0
  6827                           postinc0	equ	0xFEE
  6828                           wreg	equ	0xFE8
  6829                           postdec1	equ	0xFE5
  6830                           fsr1l	equ	0xFE1
  6831                           indf2	equ	0xFDF
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8
  6835                           
  6836 ;; *************** function _Set_EW *****************
  6837 ;; Defined at:
  6838 ;;		line 459 in file "Lab8_redo.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  color           1    wreg     unsigned char 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  color           1    2[BANK0 ] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;		None               void
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;Total ram usage:        1 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    9
  6859 ;; This function calls:
  6860 ;;		_update_LCD_color
  6861 ;; This function is called by:
  6862 ;;		_Day_Mode
  6863 ;;		_Night_Mode
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text33
  6868  0022A2                     __ptext33:
  6869                           	opt stack 0
  6870  0022A2                     _Set_EW:
  6871                           	opt stack 20
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;incstack = 0
  6875                           ;Set_EW@color stored from wreg
  6876  0022A2  0100               	movlb	0	; () banked
  6877  0022A4  6FA7               	movwf	Set_EW@color& (0+255),b
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;Lab8_redo.c: 461: direction = 2;
  6881  0022A6  0E02               	movlw	2
  6882  0022A8  6E59               	movwf	_direction,c
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;Lab8_redo.c: 462: update_LCD_color(direction, color);
  6886  0022AA  C0A7  F041         	movff	Set_EW@color,update_LCD_color@color
  6887  0022AE  5059               	movf	_direction,w,c
  6888  0022B0  EC9D  F003         	call	_update_LCD_color
  6889                           
  6890                           ;Lab8_redo.c: 464: switch (color)
  6891  0022B4  D00A               	goto	l5050
  6892  0022B6                     l446:
  6893                           
  6894                           ; BSR set to: 0
  6895  0022B6  9083               	bcf	3971,0,c	;volatile
  6896  0022B8  D001               	goto	L15
  6897  0022BA                     l448:
  6898                           
  6899                           ; BSR set to: 0
  6900  0022BA  8083               	bsf	3971,0,c	;volatile
  6901  0022BC                     L15:
  6902  0022BC  9283               	bcf	3971,1,c	;volatile
  6903  0022BE  D014               	goto	l451
  6904  0022C0                     l449:
  6905                           
  6906                           ; BSR set to: 0
  6907  0022C0  9083               	bcf	3971,0,c	;volatile
  6908  0022C2  D001               	goto	L16
  6909  0022C4                     l450:
  6910                           
  6911                           ; BSR set to: 0
  6912  0022C4  8083               	bsf	3971,0,c	;volatile
  6913  0022C6                     L16:
  6914  0022C6  8283               	bsf	3971,1,c	;volatile
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;Lab8_redo.c: 470: }
  6918  0022C8  D00F               	goto	l451
  6919  0022CA                     l5050:
  6920  0022CA  0100               	movlb	0	; () banked
  6921  0022CC  51A7               	movf	Set_EW@color& (0+255),w,b
  6922                           
  6923                           ; Switch size 1, requested type "space"
  6924                           ; Number of cases is 4, Range of values is 0 to 3
  6925                           ; switch strategies available:
  6926                           ; Name         Instructions Cycles
  6927                           ; simple_byte           13     7 (average)
  6928                           ;	Chosen strategy is simple_byte
  6929  0022CE  0A00               	xorlw	0	; case 0
  6930  0022D0  B4D8               	btfsc	status,2,c
  6931  0022D2  D7F1               	goto	l446
  6932  0022D4  0A01               	xorlw	1	; case 1
  6933  0022D6  B4D8               	btfsc	status,2,c
  6934  0022D8  D7F0               	goto	l448
  6935  0022DA  0A03               	xorlw	3	; case 2
  6936  0022DC  B4D8               	btfsc	status,2,c
  6937  0022DE  D7F0               	goto	l449
  6938  0022E0  0A01               	xorlw	1	; case 3
  6939  0022E2  B4D8               	btfsc	status,2,c
  6940  0022E4  D7EF               	goto	l450
  6941  0022E6  D000               	goto	l451
  6942  0022E8                     l451:
  6943                           
  6944                           ; BSR set to: 0
  6945  0022E8  0012               	return		;funcret
  6946  0022EA                     __end_of_Set_EW:
  6947                           	opt stack 0
  6948                           tblptru	equ	0xFF8
  6949                           tblptrh	equ	0xFF7
  6950                           tblptrl	equ	0xFF6
  6951                           tablat	equ	0xFF5
  6952                           intcon	equ	0xFF2
  6953                           intcon2	equ	0xFF1
  6954                           intcon3	equ	0xFF0
  6955                           postinc0	equ	0xFEE
  6956                           wreg	equ	0xFE8
  6957                           postdec1	equ	0xFE5
  6958                           fsr1l	equ	0xFE1
  6959                           indf2	equ	0xFDF
  6960                           fsr2h	equ	0xFDA
  6961                           fsr2l	equ	0xFD9
  6962                           status	equ	0xFD8
  6963                           
  6964 ;; *************** function _update_LCD_color *****************
  6965 ;; Defined at:
  6966 ;;		line 712 in file "Lab8_redo.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  direction       1    wreg     unsigned char 
  6969 ;;  color           1   64[COMRAM] unsigned char 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  direction       1    0[BANK0 ] unsigned char 
  6972 ;;  Circle_Y        1    1[BANK0 ] unsigned char 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;		None               void
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6982 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;Total ram usage:        3 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    8
  6989 ;; This function calls:
  6990 ;;		_drawCircle
  6991 ;;		_fillCircle
  6992 ;; This function is called by:
  6993 ;;		_Set_NS
  6994 ;;		_Set_NS_LT
  6995 ;;		_Set_EW
  6996 ;;		_Set_EW_LT
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text34
  7001  00073A                     __ptext34:
  7002                           	opt stack 0
  7003  00073A                     _update_LCD_color:
  7004                           	opt stack 20
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;incstack = 0
  7008                           ;update_LCD_color@direction stored from wreg
  7009  00073A  0100               	movlb	0	; () banked
  7010  00073C  6FA5               	movwf	update_LCD_color@direction& (0+255),b
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;Lab8_redo.c: 714: char Circle_Y;
  7014                           ;Lab8_redo.c: 715: Circle_Y = 20 + 15 + direction * 30;
  7015  00073E  0100               	movlb	0	; () banked
  7016  000740  51A5               	movf	update_LCD_color@direction& (0+255),w,b
  7017  000742  0D1E               	mullw	30
  7018  000744  50F3               	movf	prodl,w,c
  7019  000746  0F23               	addlw	35
  7020  000748  0100               	movlb	0	; () banked
  7021  00074A  6FA6               	movwf	update_LCD_color@Circle_Y& (0+255),b
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;Lab8_redo.c: 717: if (color == 0)
  7025  00074C  5041               	movf	update_LCD_color@color,w,c
  7026  00074E  A4D8               	btfss	status,2,c
  7027  000750  D067               	goto	l4926
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;Lab8_redo.c: 718: {
  7031                           ;Lab8_redo.c: 719: fillCircle(40, Circle_Y, 7, 0x0000);
  7032  000752  0E00               	movlw	0
  7033  000754  6E3A               	movwf	fillCircle@x0+1,c
  7034  000756  0E28               	movlw	40
  7035  000758  6E39               	movwf	fillCircle@x0,c
  7036  00075A  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7037  00075E  6A3C               	clrf	fillCircle@y0+1,c
  7038  000760  0E00               	movlw	0
  7039  000762  6E3E               	movwf	fillCircle@r+1,c
  7040  000764  0E07               	movlw	7
  7041  000766  6E3D               	movwf	fillCircle@r,c
  7042  000768  0E00               	movlw	0
  7043  00076A  6E40               	movwf	fillCircle@color+1,c
  7044  00076C  0E00               	movlw	0
  7045  00076E  6E3F               	movwf	fillCircle@color,c
  7046  000770  EC70  F010         	call	_fillCircle	;wreg free
  7047                           
  7048                           ;Lab8_redo.c: 720: fillCircle(60, Circle_Y, 7, 0x0000);
  7049  000774  0E00               	movlw	0
  7050  000776  6E3A               	movwf	fillCircle@x0+1,c
  7051  000778  0E3C               	movlw	60
  7052  00077A  6E39               	movwf	fillCircle@x0,c
  7053  00077C  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7054  000780  6A3C               	clrf	fillCircle@y0+1,c
  7055  000782  0E00               	movlw	0
  7056  000784  6E3E               	movwf	fillCircle@r+1,c
  7057  000786  0E07               	movlw	7
  7058  000788  6E3D               	movwf	fillCircle@r,c
  7059  00078A  0E00               	movlw	0
  7060  00078C  6E40               	movwf	fillCircle@color+1,c
  7061  00078E  0E00               	movlw	0
  7062  000790  6E3F               	movwf	fillCircle@color,c
  7063  000792  EC70  F010         	call	_fillCircle	;wreg free
  7064                           
  7065                           ;Lab8_redo.c: 721: fillCircle(80, Circle_Y, 7, 0x0000);
  7066  000796  0E00               	movlw	0
  7067  000798  6E3A               	movwf	fillCircle@x0+1,c
  7068  00079A  0E50               	movlw	80
  7069  00079C  6E39               	movwf	fillCircle@x0,c
  7070  00079E  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7071  0007A2  6A3C               	clrf	fillCircle@y0+1,c
  7072  0007A4  0E00               	movlw	0
  7073  0007A6  6E3E               	movwf	fillCircle@r+1,c
  7074  0007A8  0E07               	movlw	7
  7075  0007AA  6E3D               	movwf	fillCircle@r,c
  7076  0007AC  0E00               	movlw	0
  7077  0007AE  6E40               	movwf	fillCircle@color+1,c
  7078  0007B0  0E00               	movlw	0
  7079  0007B2  6E3F               	movwf	fillCircle@color,c
  7080  0007B4  EC70  F010         	call	_fillCircle	;wreg free
  7081                           
  7082                           ;Lab8_redo.c: 722: drawCircle(40, Circle_Y, 7, 0xF800);
  7083  0007B8  0E00               	movlw	0
  7084  0007BA  6E1B               	movwf	drawCircle@x0+1,c
  7085  0007BC  0E28               	movlw	40
  7086  0007BE  6E1A               	movwf	drawCircle@x0,c
  7087  0007C0  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7088  0007C4  6A1D               	clrf	drawCircle@y0+1,c
  7089  0007C6  0E00               	movlw	0
  7090  0007C8  6E1F               	movwf	drawCircle@r+1,c
  7091  0007CA  0E07               	movlw	7
  7092  0007CC  6E1E               	movwf	drawCircle@r,c
  7093  0007CE  0EF8               	movlw	248
  7094  0007D0  6E21               	movwf	drawCircle@color+1,c
  7095  0007D2  0E00               	movlw	0
  7096  0007D4  6E20               	movwf	drawCircle@color,c
  7097  0007D6  EC61  F006         	call	_drawCircle	;wreg free
  7098                           
  7099                           ;Lab8_redo.c: 723: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7100  0007DA  0E00               	movlw	0
  7101  0007DC  6E1B               	movwf	drawCircle@x0+1,c
  7102  0007DE  0E3C               	movlw	60
  7103  0007E0  6E1A               	movwf	drawCircle@x0,c
  7104  0007E2  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7105  0007E6  6A1D               	clrf	drawCircle@y0+1,c
  7106  0007E8  0E00               	movlw	0
  7107  0007EA  6E1F               	movwf	drawCircle@r+1,c
  7108  0007EC  0E07               	movlw	7
  7109  0007EE  6E1E               	movwf	drawCircle@r,c
  7110  0007F0  0EFF               	movlw	255
  7111  0007F2  6E21               	movwf	drawCircle@color+1,c
  7112  0007F4  0EE0               	movlw	224
  7113  0007F6  6E20               	movwf	drawCircle@color,c
  7114  0007F8  EC61  F006         	call	_drawCircle	;wreg free
  7115                           
  7116                           ;Lab8_redo.c: 724: drawCircle(80, Circle_Y, 7, 0x07E0);
  7117  0007FC  0E00               	movlw	0
  7118  0007FE  6E1B               	movwf	drawCircle@x0+1,c
  7119  000800  0E50               	movlw	80
  7120  000802  6E1A               	movwf	drawCircle@x0,c
  7121  000804  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7122  000808  6A1D               	clrf	drawCircle@y0+1,c
  7123  00080A  0E00               	movlw	0
  7124  00080C  6E1F               	movwf	drawCircle@r+1,c
  7125  00080E  0E07               	movlw	7
  7126  000810  6E1E               	movwf	drawCircle@r,c
  7127  000812  0E07               	movlw	7
  7128  000814  6E21               	movwf	drawCircle@color+1,c
  7129  000816  0EE0               	movlw	224
  7130  000818  6E20               	movwf	drawCircle@color,c
  7131  00081A  EC61  F006         	call	_drawCircle	;wreg free
  7132  00081E  D000               	goto	l4926
  7133  000820                     l4926:
  7134                           
  7135                           ;Lab8_redo.c: 725: }
  7136                           ;Lab8_redo.c: 727: if (color == 1)
  7137  000820  0441               	decf	update_LCD_color@color,w,c
  7138  000822  A4D8               	btfss	status,2,c
  7139  000824  D067               	goto	l4930
  7140                           
  7141                           ;Lab8_redo.c: 728: {
  7142                           ;Lab8_redo.c: 729: fillCircle(40, Circle_Y, 7, 0xF800);
  7143  000826  0E00               	movlw	0
  7144  000828  6E3A               	movwf	fillCircle@x0+1,c
  7145  00082A  0E28               	movlw	40
  7146  00082C  6E39               	movwf	fillCircle@x0,c
  7147  00082E  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7148  000832  6A3C               	clrf	fillCircle@y0+1,c
  7149  000834  0E00               	movlw	0
  7150  000836  6E3E               	movwf	fillCircle@r+1,c
  7151  000838  0E07               	movlw	7
  7152  00083A  6E3D               	movwf	fillCircle@r,c
  7153  00083C  0EF8               	movlw	248
  7154  00083E  6E40               	movwf	fillCircle@color+1,c
  7155  000840  0E00               	movlw	0
  7156  000842  6E3F               	movwf	fillCircle@color,c
  7157  000844  EC70  F010         	call	_fillCircle	;wreg free
  7158                           
  7159                           ;Lab8_redo.c: 730: fillCircle(60, Circle_Y, 7, 0x0000);
  7160  000848  0E00               	movlw	0
  7161  00084A  6E3A               	movwf	fillCircle@x0+1,c
  7162  00084C  0E3C               	movlw	60
  7163  00084E  6E39               	movwf	fillCircle@x0,c
  7164  000850  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7165  000854  6A3C               	clrf	fillCircle@y0+1,c
  7166  000856  0E00               	movlw	0
  7167  000858  6E3E               	movwf	fillCircle@r+1,c
  7168  00085A  0E07               	movlw	7
  7169  00085C  6E3D               	movwf	fillCircle@r,c
  7170  00085E  0E00               	movlw	0
  7171  000860  6E40               	movwf	fillCircle@color+1,c
  7172  000862  0E00               	movlw	0
  7173  000864  6E3F               	movwf	fillCircle@color,c
  7174  000866  EC70  F010         	call	_fillCircle	;wreg free
  7175                           
  7176                           ;Lab8_redo.c: 731: fillCircle(80, Circle_Y, 7, 0x0000);
  7177  00086A  0E00               	movlw	0
  7178  00086C  6E3A               	movwf	fillCircle@x0+1,c
  7179  00086E  0E50               	movlw	80
  7180  000870  6E39               	movwf	fillCircle@x0,c
  7181  000872  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7182  000876  6A3C               	clrf	fillCircle@y0+1,c
  7183  000878  0E00               	movlw	0
  7184  00087A  6E3E               	movwf	fillCircle@r+1,c
  7185  00087C  0E07               	movlw	7
  7186  00087E  6E3D               	movwf	fillCircle@r,c
  7187  000880  0E00               	movlw	0
  7188  000882  6E40               	movwf	fillCircle@color+1,c
  7189  000884  0E00               	movlw	0
  7190  000886  6E3F               	movwf	fillCircle@color,c
  7191  000888  EC70  F010         	call	_fillCircle	;wreg free
  7192                           
  7193                           ;Lab8_redo.c: 732: drawCircle(40, Circle_Y, 7, 0xF800);
  7194  00088C  0E00               	movlw	0
  7195  00088E  6E1B               	movwf	drawCircle@x0+1,c
  7196  000890  0E28               	movlw	40
  7197  000892  6E1A               	movwf	drawCircle@x0,c
  7198  000894  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7199  000898  6A1D               	clrf	drawCircle@y0+1,c
  7200  00089A  0E00               	movlw	0
  7201  00089C  6E1F               	movwf	drawCircle@r+1,c
  7202  00089E  0E07               	movlw	7
  7203  0008A0  6E1E               	movwf	drawCircle@r,c
  7204  0008A2  0EF8               	movlw	248
  7205  0008A4  6E21               	movwf	drawCircle@color+1,c
  7206  0008A6  0E00               	movlw	0
  7207  0008A8  6E20               	movwf	drawCircle@color,c
  7208  0008AA  EC61  F006         	call	_drawCircle	;wreg free
  7209                           
  7210                           ;Lab8_redo.c: 733: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7211  0008AE  0E00               	movlw	0
  7212  0008B0  6E1B               	movwf	drawCircle@x0+1,c
  7213  0008B2  0E3C               	movlw	60
  7214  0008B4  6E1A               	movwf	drawCircle@x0,c
  7215  0008B6  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7216  0008BA  6A1D               	clrf	drawCircle@y0+1,c
  7217  0008BC  0E00               	movlw	0
  7218  0008BE  6E1F               	movwf	drawCircle@r+1,c
  7219  0008C0  0E07               	movlw	7
  7220  0008C2  6E1E               	movwf	drawCircle@r,c
  7221  0008C4  0EFF               	movlw	255
  7222  0008C6  6E21               	movwf	drawCircle@color+1,c
  7223  0008C8  0EE0               	movlw	224
  7224  0008CA  6E20               	movwf	drawCircle@color,c
  7225  0008CC  EC61  F006         	call	_drawCircle	;wreg free
  7226                           
  7227                           ;Lab8_redo.c: 734: drawCircle(80, Circle_Y, 7, 0x07E0);
  7228  0008D0  0E00               	movlw	0
  7229  0008D2  6E1B               	movwf	drawCircle@x0+1,c
  7230  0008D4  0E50               	movlw	80
  7231  0008D6  6E1A               	movwf	drawCircle@x0,c
  7232  0008D8  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7233  0008DC  6A1D               	clrf	drawCircle@y0+1,c
  7234  0008DE  0E00               	movlw	0
  7235  0008E0  6E1F               	movwf	drawCircle@r+1,c
  7236  0008E2  0E07               	movlw	7
  7237  0008E4  6E1E               	movwf	drawCircle@r,c
  7238  0008E6  0E07               	movlw	7
  7239  0008E8  6E21               	movwf	drawCircle@color+1,c
  7240  0008EA  0EE0               	movlw	224
  7241  0008EC  6E20               	movwf	drawCircle@color,c
  7242  0008EE  EC61  F006         	call	_drawCircle	;wreg free
  7243  0008F2  D000               	goto	l4930
  7244  0008F4                     l4930:
  7245                           
  7246                           ;Lab8_redo.c: 735: }
  7247                           ;Lab8_redo.c: 736: if (color == 3)
  7248  0008F4  0E03               	movlw	3
  7249  0008F6  1841               	xorwf	update_LCD_color@color,w,c
  7250  0008F8  A4D8               	btfss	status,2,c
  7251  0008FA  D067               	goto	l4934
  7252                           
  7253                           ;Lab8_redo.c: 737: {
  7254                           ;Lab8_redo.c: 738: fillCircle(40, Circle_Y, 7, 0x0000);
  7255  0008FC  0E00               	movlw	0
  7256  0008FE  6E3A               	movwf	fillCircle@x0+1,c
  7257  000900  0E28               	movlw	40
  7258  000902  6E39               	movwf	fillCircle@x0,c
  7259  000904  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7260  000908  6A3C               	clrf	fillCircle@y0+1,c
  7261  00090A  0E00               	movlw	0
  7262  00090C  6E3E               	movwf	fillCircle@r+1,c
  7263  00090E  0E07               	movlw	7
  7264  000910  6E3D               	movwf	fillCircle@r,c
  7265  000912  0E00               	movlw	0
  7266  000914  6E40               	movwf	fillCircle@color+1,c
  7267  000916  0E00               	movlw	0
  7268  000918  6E3F               	movwf	fillCircle@color,c
  7269  00091A  EC70  F010         	call	_fillCircle	;wreg free
  7270                           
  7271                           ;Lab8_redo.c: 739: fillCircle(60, Circle_Y, 7, 0xFFE0);
  7272  00091E  0E00               	movlw	0
  7273  000920  6E3A               	movwf	fillCircle@x0+1,c
  7274  000922  0E3C               	movlw	60
  7275  000924  6E39               	movwf	fillCircle@x0,c
  7276  000926  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7277  00092A  6A3C               	clrf	fillCircle@y0+1,c
  7278  00092C  0E00               	movlw	0
  7279  00092E  6E3E               	movwf	fillCircle@r+1,c
  7280  000930  0E07               	movlw	7
  7281  000932  6E3D               	movwf	fillCircle@r,c
  7282  000934  0EFF               	movlw	255
  7283  000936  6E40               	movwf	fillCircle@color+1,c
  7284  000938  0EE0               	movlw	224
  7285  00093A  6E3F               	movwf	fillCircle@color,c
  7286  00093C  EC70  F010         	call	_fillCircle	;wreg free
  7287                           
  7288                           ;Lab8_redo.c: 740: fillCircle(80, Circle_Y, 7, 0x0000);
  7289  000940  0E00               	movlw	0
  7290  000942  6E3A               	movwf	fillCircle@x0+1,c
  7291  000944  0E50               	movlw	80
  7292  000946  6E39               	movwf	fillCircle@x0,c
  7293  000948  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7294  00094C  6A3C               	clrf	fillCircle@y0+1,c
  7295  00094E  0E00               	movlw	0
  7296  000950  6E3E               	movwf	fillCircle@r+1,c
  7297  000952  0E07               	movlw	7
  7298  000954  6E3D               	movwf	fillCircle@r,c
  7299  000956  0E00               	movlw	0
  7300  000958  6E40               	movwf	fillCircle@color+1,c
  7301  00095A  0E00               	movlw	0
  7302  00095C  6E3F               	movwf	fillCircle@color,c
  7303  00095E  EC70  F010         	call	_fillCircle	;wreg free
  7304                           
  7305                           ;Lab8_redo.c: 741: drawCircle(40, Circle_Y, 7, 0xF800);
  7306  000962  0E00               	movlw	0
  7307  000964  6E1B               	movwf	drawCircle@x0+1,c
  7308  000966  0E28               	movlw	40
  7309  000968  6E1A               	movwf	drawCircle@x0,c
  7310  00096A  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7311  00096E  6A1D               	clrf	drawCircle@y0+1,c
  7312  000970  0E00               	movlw	0
  7313  000972  6E1F               	movwf	drawCircle@r+1,c
  7314  000974  0E07               	movlw	7
  7315  000976  6E1E               	movwf	drawCircle@r,c
  7316  000978  0EF8               	movlw	248
  7317  00097A  6E21               	movwf	drawCircle@color+1,c
  7318  00097C  0E00               	movlw	0
  7319  00097E  6E20               	movwf	drawCircle@color,c
  7320  000980  EC61  F006         	call	_drawCircle	;wreg free
  7321                           
  7322                           ;Lab8_redo.c: 742: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7323  000984  0E00               	movlw	0
  7324  000986  6E1B               	movwf	drawCircle@x0+1,c
  7325  000988  0E3C               	movlw	60
  7326  00098A  6E1A               	movwf	drawCircle@x0,c
  7327  00098C  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7328  000990  6A1D               	clrf	drawCircle@y0+1,c
  7329  000992  0E00               	movlw	0
  7330  000994  6E1F               	movwf	drawCircle@r+1,c
  7331  000996  0E07               	movlw	7
  7332  000998  6E1E               	movwf	drawCircle@r,c
  7333  00099A  0EFF               	movlw	255
  7334  00099C  6E21               	movwf	drawCircle@color+1,c
  7335  00099E  0EE0               	movlw	224
  7336  0009A0  6E20               	movwf	drawCircle@color,c
  7337  0009A2  EC61  F006         	call	_drawCircle	;wreg free
  7338                           
  7339                           ;Lab8_redo.c: 743: drawCircle(80, Circle_Y, 7, 0x07E0);
  7340  0009A6  0E00               	movlw	0
  7341  0009A8  6E1B               	movwf	drawCircle@x0+1,c
  7342  0009AA  0E50               	movlw	80
  7343  0009AC  6E1A               	movwf	drawCircle@x0,c
  7344  0009AE  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7345  0009B2  6A1D               	clrf	drawCircle@y0+1,c
  7346  0009B4  0E00               	movlw	0
  7347  0009B6  6E1F               	movwf	drawCircle@r+1,c
  7348  0009B8  0E07               	movlw	7
  7349  0009BA  6E1E               	movwf	drawCircle@r,c
  7350  0009BC  0E07               	movlw	7
  7351  0009BE  6E21               	movwf	drawCircle@color+1,c
  7352  0009C0  0EE0               	movlw	224
  7353  0009C2  6E20               	movwf	drawCircle@color,c
  7354  0009C4  EC61  F006         	call	_drawCircle	;wreg free
  7355  0009C8  D000               	goto	l4934
  7356  0009CA                     l4934:
  7357                           
  7358                           ;Lab8_redo.c: 744: }
  7359                           ;Lab8_redo.c: 747: if (color == 2)
  7360  0009CA  0E02               	movlw	2
  7361  0009CC  1841               	xorwf	update_LCD_color@color,w,c
  7362  0009CE  A4D8               	btfss	status,2,c
  7363  0009D0  D067               	goto	l514
  7364                           
  7365                           ;Lab8_redo.c: 748: {
  7366                           ;Lab8_redo.c: 749: fillCircle(40, Circle_Y, 7, 0x0000);
  7367  0009D2  0E00               	movlw	0
  7368  0009D4  6E3A               	movwf	fillCircle@x0+1,c
  7369  0009D6  0E28               	movlw	40
  7370  0009D8  6E39               	movwf	fillCircle@x0,c
  7371  0009DA  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7372  0009DE  6A3C               	clrf	fillCircle@y0+1,c
  7373  0009E0  0E00               	movlw	0
  7374  0009E2  6E3E               	movwf	fillCircle@r+1,c
  7375  0009E4  0E07               	movlw	7
  7376  0009E6  6E3D               	movwf	fillCircle@r,c
  7377  0009E8  0E00               	movlw	0
  7378  0009EA  6E40               	movwf	fillCircle@color+1,c
  7379  0009EC  0E00               	movlw	0
  7380  0009EE  6E3F               	movwf	fillCircle@color,c
  7381  0009F0  EC70  F010         	call	_fillCircle	;wreg free
  7382                           
  7383                           ;Lab8_redo.c: 750: fillCircle(60, Circle_Y, 7, 0x0000);
  7384  0009F4  0E00               	movlw	0
  7385  0009F6  6E3A               	movwf	fillCircle@x0+1,c
  7386  0009F8  0E3C               	movlw	60
  7387  0009FA  6E39               	movwf	fillCircle@x0,c
  7388  0009FC  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7389  000A00  6A3C               	clrf	fillCircle@y0+1,c
  7390  000A02  0E00               	movlw	0
  7391  000A04  6E3E               	movwf	fillCircle@r+1,c
  7392  000A06  0E07               	movlw	7
  7393  000A08  6E3D               	movwf	fillCircle@r,c
  7394  000A0A  0E00               	movlw	0
  7395  000A0C  6E40               	movwf	fillCircle@color+1,c
  7396  000A0E  0E00               	movlw	0
  7397  000A10  6E3F               	movwf	fillCircle@color,c
  7398  000A12  EC70  F010         	call	_fillCircle	;wreg free
  7399                           
  7400                           ;Lab8_redo.c: 751: fillCircle(80, Circle_Y, 7, 0x07E0);
  7401  000A16  0E00               	movlw	0
  7402  000A18  6E3A               	movwf	fillCircle@x0+1,c
  7403  000A1A  0E50               	movlw	80
  7404  000A1C  6E39               	movwf	fillCircle@x0,c
  7405  000A1E  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7406  000A22  6A3C               	clrf	fillCircle@y0+1,c
  7407  000A24  0E00               	movlw	0
  7408  000A26  6E3E               	movwf	fillCircle@r+1,c
  7409  000A28  0E07               	movlw	7
  7410  000A2A  6E3D               	movwf	fillCircle@r,c
  7411  000A2C  0E07               	movlw	7
  7412  000A2E  6E40               	movwf	fillCircle@color+1,c
  7413  000A30  0EE0               	movlw	224
  7414  000A32  6E3F               	movwf	fillCircle@color,c
  7415  000A34  EC70  F010         	call	_fillCircle	;wreg free
  7416                           
  7417                           ;Lab8_redo.c: 752: drawCircle(40, Circle_Y, 7, 0xF800);
  7418  000A38  0E00               	movlw	0
  7419  000A3A  6E1B               	movwf	drawCircle@x0+1,c
  7420  000A3C  0E28               	movlw	40
  7421  000A3E  6E1A               	movwf	drawCircle@x0,c
  7422  000A40  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7423  000A44  6A1D               	clrf	drawCircle@y0+1,c
  7424  000A46  0E00               	movlw	0
  7425  000A48  6E1F               	movwf	drawCircle@r+1,c
  7426  000A4A  0E07               	movlw	7
  7427  000A4C  6E1E               	movwf	drawCircle@r,c
  7428  000A4E  0EF8               	movlw	248
  7429  000A50  6E21               	movwf	drawCircle@color+1,c
  7430  000A52  0E00               	movlw	0
  7431  000A54  6E20               	movwf	drawCircle@color,c
  7432  000A56  EC61  F006         	call	_drawCircle	;wreg free
  7433                           
  7434                           ;Lab8_redo.c: 753: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7435  000A5A  0E00               	movlw	0
  7436  000A5C  6E1B               	movwf	drawCircle@x0+1,c
  7437  000A5E  0E3C               	movlw	60
  7438  000A60  6E1A               	movwf	drawCircle@x0,c
  7439  000A62  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7440  000A66  6A1D               	clrf	drawCircle@y0+1,c
  7441  000A68  0E00               	movlw	0
  7442  000A6A  6E1F               	movwf	drawCircle@r+1,c
  7443  000A6C  0E07               	movlw	7
  7444  000A6E  6E1E               	movwf	drawCircle@r,c
  7445  000A70  0EFF               	movlw	255
  7446  000A72  6E21               	movwf	drawCircle@color+1,c
  7447  000A74  0EE0               	movlw	224
  7448  000A76  6E20               	movwf	drawCircle@color,c
  7449  000A78  EC61  F006         	call	_drawCircle	;wreg free
  7450                           
  7451                           ;Lab8_redo.c: 754: drawCircle(80, Circle_Y, 7, 0x07E0);
  7452  000A7C  0E00               	movlw	0
  7453  000A7E  6E1B               	movwf	drawCircle@x0+1,c
  7454  000A80  0E50               	movlw	80
  7455  000A82  6E1A               	movwf	drawCircle@x0,c
  7456  000A84  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7457  000A88  6A1D               	clrf	drawCircle@y0+1,c
  7458  000A8A  0E00               	movlw	0
  7459  000A8C  6E1F               	movwf	drawCircle@r+1,c
  7460  000A8E  0E07               	movlw	7
  7461  000A90  6E1E               	movwf	drawCircle@r,c
  7462  000A92  0E07               	movlw	7
  7463  000A94  6E21               	movwf	drawCircle@color+1,c
  7464  000A96  0EE0               	movlw	224
  7465  000A98  6E20               	movwf	drawCircle@color,c
  7466  000A9A  EC61  F006         	call	_drawCircle	;wreg free
  7467  000A9E  D000               	goto	l514
  7468  000AA0                     l514:
  7469  000AA0  0012               	return		;funcret
  7470  000AA2                     __end_of_update_LCD_color:
  7471                           	opt stack 0
  7472                           tblptru	equ	0xFF8
  7473                           tblptrh	equ	0xFF7
  7474                           tblptrl	equ	0xFF6
  7475                           tablat	equ	0xFF5
  7476                           prodl	equ	0xFF3
  7477                           intcon	equ	0xFF2
  7478                           intcon2	equ	0xFF1
  7479                           intcon3	equ	0xFF0
  7480                           postinc0	equ	0xFEE
  7481                           wreg	equ	0xFE8
  7482                           postdec1	equ	0xFE5
  7483                           fsr1l	equ	0xFE1
  7484                           indf2	equ	0xFDF
  7485                           fsr2h	equ	0xFDA
  7486                           fsr2l	equ	0xFD9
  7487                           status	equ	0xFD8
  7488                           
  7489 ;; *************** function _fillCircle *****************
  7490 ;; Defined at:
  7491 ;;		line 647 in file "ST7735_TFT.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;  x0              2   56[COMRAM] int 
  7494 ;;  y0              2   58[COMRAM] int 
  7495 ;;  r               2   60[COMRAM] int 
  7496 ;;  color           2   62[COMRAM] unsigned int 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;		None
  7499 ;; Return value:  Size  Location     Type
  7500 ;;		None               void
  7501 ;; Registers used:
  7502 ;;		wreg, status,2, status,0, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7508 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;Total ram usage:        8 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    7
  7515 ;; This function calls:
  7516 ;;		_drawFastVLine
  7517 ;;		_fillCircleHelper
  7518 ;; This function is called by:
  7519 ;;		_Initialize_Screen
  7520 ;;		_update_LCD_color
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text35
  7525  0020E0                     __ptext35:
  7526                           	opt stack 0
  7527  0020E0                     _fillCircle:
  7528                           	opt stack 20
  7529                           
  7530                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7531                           
  7532                           ;incstack = 0
  7533  0020E0  503D               	movf	fillCircle@r,w,c
  7534  0020E2  0800               	sublw	0
  7535  0020E4  243B               	addwf	fillCircle@y0,w,c
  7536  0020E6  6E16               	movwf	drawFastVLine@y,c
  7537  0020E8  80D8               	bsf	status,0,c
  7538  0020EA  343D               	rlcf	fillCircle@r,w,c
  7539  0020EC  6E17               	movwf	drawFastVLine@h,c
  7540  0020EE  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  7541  0020F2  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  7542  0020F6  5039               	movf	fillCircle@x0,w,c
  7543  0020F8  EC64  F00E         	call	_drawFastVLine
  7544                           
  7545                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  7546  0020FC  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  7547  002100  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7548  002104  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  7549  002108  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7550  00210C  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  7551  002110  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7552  002114  0E00               	movlw	0
  7553  002116  6E28               	movwf	fillCircleHelper@cornername+1,c
  7554  002118  0E03               	movlw	3
  7555  00211A  6E27               	movwf	fillCircleHelper@cornername,c
  7556  00211C  0E00               	movlw	0
  7557  00211E  6E2A               	movwf	fillCircleHelper@delta+1,c
  7558  002120  0E00               	movlw	0
  7559  002122  6E29               	movwf	fillCircleHelper@delta,c
  7560  002124  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  7561  002128  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7562  00212C  ECA8  F008         	call	_fillCircleHelper	;wreg free
  7563  002130  0012               	return		;funcret
  7564  002132                     __end_of_fillCircle:
  7565                           	opt stack 0
  7566                           tblptru	equ	0xFF8
  7567                           tblptrh	equ	0xFF7
  7568                           tblptrl	equ	0xFF6
  7569                           tablat	equ	0xFF5
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           intcon2	equ	0xFF1
  7573                           intcon3	equ	0xFF0
  7574                           postinc0	equ	0xFEE
  7575                           wreg	equ	0xFE8
  7576                           postdec1	equ	0xFE5
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function _fillCircleHelper *****************
  7584 ;; Defined at:
  7585 ;;		line 622 in file "ST7735_TFT.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  x0              2   32[COMRAM] int 
  7588 ;;  y0              2   34[COMRAM] int 
  7589 ;;  r               2   36[COMRAM] int 
  7590 ;;  cornername      2   38[COMRAM] unsigned int 
  7591 ;;  delta           2   40[COMRAM] int 
  7592 ;;  color           2   42[COMRAM] unsigned int 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;  y               2   54[COMRAM] int 
  7595 ;;  x               2   52[COMRAM] int 
  7596 ;;  f               2   50[COMRAM] int 
  7597 ;;  ddF_y           2   48[COMRAM] int 
  7598 ;;  ddF_x           2   46[COMRAM] int 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;		None               void
  7601 ;; Registers used:
  7602 ;;		wreg, status,2, status,0, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7608 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;Total ram usage:       24 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    6
  7615 ;; This function calls:
  7616 ;;		_drawFastVLine
  7617 ;; This function is called by:
  7618 ;;		_fillCircle
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text36
  7623  001150                     __ptext36:
  7624                           	opt stack 0
  7625  001150                     _fillCircleHelper:
  7626                           	opt stack 20
  7627                           
  7628                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  7629                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7630                           
  7631                           ;incstack = 0
  7632  001150  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7633  001154  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7634  001158  1E2D               	comf	??_fillCircleHelper,f,c
  7635  00115A  1E2E               	comf	??_fillCircleHelper+1,f,c
  7636  00115C  4A2D               	infsnz	??_fillCircleHelper,f,c
  7637  00115E  2A2E               	incf	??_fillCircleHelper+1,f,c
  7638  001160  0E01               	movlw	1
  7639  001162  242D               	addwf	??_fillCircleHelper,w,c
  7640  001164  6E33               	movwf	fillCircleHelper@f,c
  7641  001166  0E00               	movlw	0
  7642  001168  202E               	addwfc	??_fillCircleHelper+1,w,c
  7643  00116A  6E34               	movwf	fillCircleHelper@f+1,c
  7644  00116C  0E00               	movlw	0
  7645  00116E  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  7646  001170  0E01               	movlw	1
  7647  001172  6E2F               	movwf	fillCircleHelper@ddF_x,c
  7648  001174  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7649  001178  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7650  00117C  90D8               	bcf	status,0,c
  7651  00117E  362D               	rlcf	??_fillCircleHelper,f,c
  7652  001180  362E               	rlcf	??_fillCircleHelper+1,f,c
  7653  001182  1E2D               	comf	??_fillCircleHelper,f,c
  7654  001184  1E2E               	comf	??_fillCircleHelper+1,f,c
  7655  001186  4A2D               	infsnz	??_fillCircleHelper,f,c
  7656  001188  2A2E               	incf	??_fillCircleHelper+1,f,c
  7657  00118A  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7658  00118E  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7659  001192  0E00               	movlw	0
  7660  001194  6E36               	movwf	fillCircleHelper@x+1,c
  7661  001196  0E00               	movlw	0
  7662  001198  6E35               	movwf	fillCircleHelper@x,c
  7663  00119A  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  7664  00119E  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7665                           
  7666                           ;ST7735_TFT.c: 626: while (x<y) {
  7667  0011A2  D067               	goto	l4406
  7668  0011A4                     l4386:
  7669                           
  7670                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7671  0011A4  BE34               	btfsc	fillCircleHelper@f+1,7,c
  7672  0011A6  D00B               	goto	l267
  7673                           
  7674                           ;ST7735_TFT.c: 628: y--;
  7675  0011A8  0637               	decf	fillCircleHelper@y,f,c
  7676  0011AA  A0D8               	btfss	status,0,c
  7677  0011AC  0638               	decf	fillCircleHelper@y+1,f,c
  7678                           
  7679                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7680  0011AE  0E02               	movlw	2
  7681  0011B0  2631               	addwf	fillCircleHelper@ddF_y,f,c
  7682  0011B2  0E00               	movlw	0
  7683  0011B4  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7684                           
  7685                           ;ST7735_TFT.c: 630: f += ddF_y;
  7686  0011B6  5031               	movf	fillCircleHelper@ddF_y,w,c
  7687  0011B8  2633               	addwf	fillCircleHelper@f,f,c
  7688  0011BA  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  7689  0011BC  2234               	addwfc	fillCircleHelper@f+1,f,c
  7690  0011BE                     l267:
  7691                           
  7692                           ;ST7735_TFT.c: 631: }
  7693                           ;ST7735_TFT.c: 632: x++;
  7694  0011BE  4A35               	infsnz	fillCircleHelper@x,f,c
  7695  0011C0  2A36               	incf	fillCircleHelper@x+1,f,c
  7696                           
  7697                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7698  0011C2  0E02               	movlw	2
  7699  0011C4  262F               	addwf	fillCircleHelper@ddF_x,f,c
  7700  0011C6  0E00               	movlw	0
  7701  0011C8  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7702                           
  7703                           ;ST7735_TFT.c: 634: f += ddF_x;
  7704  0011CA  502F               	movf	fillCircleHelper@ddF_x,w,c
  7705  0011CC  2633               	addwf	fillCircleHelper@f,f,c
  7706  0011CE  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  7707  0011D0  2234               	addwfc	fillCircleHelper@f+1,f,c
  7708                           
  7709                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7710  0011D2  A027               	btfss	fillCircleHelper@cornername,0,c
  7711  0011D4  D025               	goto	l4402
  7712                           
  7713                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7714  0011D6  5037               	movf	fillCircleHelper@y,w,c
  7715  0011D8  0800               	sublw	0
  7716  0011DA  2423               	addwf	fillCircleHelper@y0,w,c
  7717  0011DC  6E16               	movwf	drawFastVLine@y,c
  7718  0011DE  5037               	movf	fillCircleHelper@y,w,c
  7719  0011E0  2437               	addwf	fillCircleHelper@y,w,c
  7720  0011E2  2429               	addwf	fillCircleHelper@delta,w,c
  7721  0011E4  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7722  0011E6  282D               	incf	??_fillCircleHelper,w,c
  7723  0011E8  6E17               	movwf	drawFastVLine@h,c
  7724  0011EA  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7725  0011EE  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7726  0011F2  5021               	movf	fillCircleHelper@x0,w,c
  7727  0011F4  2435               	addwf	fillCircleHelper@x,w,c
  7728  0011F6  EC64  F00E         	call	_drawFastVLine
  7729                           
  7730                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7731  0011FA  5035               	movf	fillCircleHelper@x,w,c
  7732  0011FC  0800               	sublw	0
  7733  0011FE  2423               	addwf	fillCircleHelper@y0,w,c
  7734  001200  6E16               	movwf	drawFastVLine@y,c
  7735  001202  5035               	movf	fillCircleHelper@x,w,c
  7736  001204  2435               	addwf	fillCircleHelper@x,w,c
  7737  001206  2429               	addwf	fillCircleHelper@delta,w,c
  7738  001208  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7739  00120A  282D               	incf	??_fillCircleHelper,w,c
  7740  00120C  6E17               	movwf	drawFastVLine@h,c
  7741  00120E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7742  001212  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7743  001216  5021               	movf	fillCircleHelper@x0,w,c
  7744  001218  2437               	addwf	fillCircleHelper@y,w,c
  7745  00121A  EC64  F00E         	call	_drawFastVLine
  7746  00121E  D000               	goto	l4402
  7747  001220                     l4402:
  7748                           
  7749                           ;ST7735_TFT.c: 639: }
  7750                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7751  001220  A227               	btfss	fillCircleHelper@cornername,1,c
  7752  001222  D027               	goto	l4406
  7753                           
  7754                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7755  001224  5037               	movf	fillCircleHelper@y,w,c
  7756  001226  0800               	sublw	0
  7757  001228  2423               	addwf	fillCircleHelper@y0,w,c
  7758  00122A  6E16               	movwf	drawFastVLine@y,c
  7759  00122C  5037               	movf	fillCircleHelper@y,w,c
  7760  00122E  2437               	addwf	fillCircleHelper@y,w,c
  7761  001230  2429               	addwf	fillCircleHelper@delta,w,c
  7762  001232  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7763  001234  282D               	incf	??_fillCircleHelper,w,c
  7764  001236  6E17               	movwf	drawFastVLine@h,c
  7765  001238  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7766  00123C  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7767  001240  5035               	movf	fillCircleHelper@x,w,c
  7768  001242  0800               	sublw	0
  7769  001244  2421               	addwf	fillCircleHelper@x0,w,c
  7770  001246  EC64  F00E         	call	_drawFastVLine
  7771                           
  7772                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7773  00124A  5035               	movf	fillCircleHelper@x,w,c
  7774  00124C  0800               	sublw	0
  7775  00124E  2423               	addwf	fillCircleHelper@y0,w,c
  7776  001250  6E16               	movwf	drawFastVLine@y,c
  7777  001252  5035               	movf	fillCircleHelper@x,w,c
  7778  001254  2435               	addwf	fillCircleHelper@x,w,c
  7779  001256  2429               	addwf	fillCircleHelper@delta,w,c
  7780  001258  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7781  00125A  282D               	incf	??_fillCircleHelper,w,c
  7782  00125C  6E17               	movwf	drawFastVLine@h,c
  7783  00125E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7784  001262  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7785  001266  5037               	movf	fillCircleHelper@y,w,c
  7786  001268  0800               	sublw	0
  7787  00126A  2421               	addwf	fillCircleHelper@x0,w,c
  7788  00126C  EC64  F00E         	call	_drawFastVLine
  7789  001270  D000               	goto	l4406
  7790  001272                     l4406:
  7791  001272  5037               	movf	fillCircleHelper@y,w,c
  7792  001274  5C35               	subwf	fillCircleHelper@x,w,c
  7793  001276  5036               	movf	fillCircleHelper@x+1,w,c
  7794  001278  0A80               	xorlw	128
  7795  00127A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7796  00127C  5038               	movf	fillCircleHelper@y+1,w,c
  7797  00127E  0A80               	xorlw	128
  7798  001280  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  7799  001282  A0D8               	btfss	status,0,c
  7800  001284  D78F               	goto	l4386
  7801  001286  0012               	return		;funcret
  7802  001288                     __end_of_fillCircleHelper:
  7803                           	opt stack 0
  7804                           tblptru	equ	0xFF8
  7805                           tblptrh	equ	0xFF7
  7806                           tblptrl	equ	0xFF6
  7807                           tablat	equ	0xFF5
  7808                           prodl	equ	0xFF3
  7809                           intcon	equ	0xFF2
  7810                           intcon2	equ	0xFF1
  7811                           intcon3	equ	0xFF0
  7812                           postinc0	equ	0xFEE
  7813                           wreg	equ	0xFE8
  7814                           postdec1	equ	0xFE5
  7815                           fsr1l	equ	0xFE1
  7816                           indf2	equ	0xFDF
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function _drawCircle *****************
  7822 ;; Defined at:
  7823 ;;		line 561 in file "ST7735_TFT.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  x0              2   25[COMRAM] int 
  7826 ;;  y0              2   27[COMRAM] int 
  7827 ;;  r               2   29[COMRAM] int 
  7828 ;;  color           2   31[COMRAM] unsigned int 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;  y               2   43[COMRAM] int 
  7831 ;;  x               2   41[COMRAM] int 
  7832 ;;  f               2   39[COMRAM] int 
  7833 ;;  ddF_y           2   37[COMRAM] int 
  7834 ;;  ddF_x           2   35[COMRAM] int 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;		None               void
  7837 ;; Registers used:
  7838 ;;		wreg, status,2, status,0, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7844 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7846 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;Total ram usage:       20 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    6
  7851 ;; This function calls:
  7852 ;;		_drawPixel
  7853 ;; This function is called by:
  7854 ;;		_Initialize_Screen
  7855 ;;		_update_LCD_color
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           	psect	text37
  7860  000CC2                     __ptext37:
  7861                           	opt stack 0
  7862  000CC2                     _drawCircle:
  7863                           	opt stack 21
  7864                           
  7865                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7866                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7867                           
  7868                           ;incstack = 0
  7869  000CC2  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7870  000CC6  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7871  000CCA  1E22               	comf	??_drawCircle,f,c
  7872  000CCC  1E23               	comf	??_drawCircle+1,f,c
  7873  000CCE  4A22               	infsnz	??_drawCircle,f,c
  7874  000CD0  2A23               	incf	??_drawCircle+1,f,c
  7875  000CD2  0E01               	movlw	1
  7876  000CD4  2422               	addwf	??_drawCircle,w,c
  7877  000CD6  6E28               	movwf	drawCircle@f,c
  7878  000CD8  0E00               	movlw	0
  7879  000CDA  2023               	addwfc	??_drawCircle+1,w,c
  7880  000CDC  6E29               	movwf	drawCircle@f+1,c
  7881  000CDE  0E00               	movlw	0
  7882  000CE0  6E25               	movwf	drawCircle@ddF_x+1,c
  7883  000CE2  0E01               	movlw	1
  7884  000CE4  6E24               	movwf	drawCircle@ddF_x,c
  7885  000CE6  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7886  000CEA  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7887  000CEE  90D8               	bcf	status,0,c
  7888  000CF0  3622               	rlcf	??_drawCircle,f,c
  7889  000CF2  3623               	rlcf	??_drawCircle+1,f,c
  7890  000CF4  1E22               	comf	??_drawCircle,f,c
  7891  000CF6  1E23               	comf	??_drawCircle+1,f,c
  7892  000CF8  4A22               	infsnz	??_drawCircle,f,c
  7893  000CFA  2A23               	incf	??_drawCircle+1,f,c
  7894  000CFC  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  7895  000D00  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7896  000D04  0E00               	movlw	0
  7897  000D06  6E2B               	movwf	drawCircle@x+1,c
  7898  000D08  0E00               	movlw	0
  7899  000D0A  6E2A               	movwf	drawCircle@x,c
  7900  000D0C  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  7901  000D10  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  7902                           
  7903                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7904  000D14  501C               	movf	drawCircle@y0,w,c
  7905  000D16  241E               	addwf	drawCircle@r,w,c
  7906  000D18  6E16               	movwf	drawPixel@y,c
  7907  000D1A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7908  000D1E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7909  000D22  501A               	movf	drawCircle@x0,w,c
  7910  000D24  EC22  F012         	call	_drawPixel
  7911                           
  7912                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7913  000D28  501E               	movf	drawCircle@r,w,c
  7914  000D2A  0800               	sublw	0
  7915  000D2C  241C               	addwf	drawCircle@y0,w,c
  7916  000D2E  6E16               	movwf	drawPixel@y,c
  7917  000D30  C020  F017         	movff	drawCircle@color,drawPixel@color
  7918  000D34  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7919  000D38  501A               	movf	drawCircle@x0,w,c
  7920  000D3A  EC22  F012         	call	_drawPixel
  7921                           
  7922                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7923  000D3E  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7924  000D42  C020  F017         	movff	drawCircle@color,drawPixel@color
  7925  000D46  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7926  000D4A  501A               	movf	drawCircle@x0,w,c
  7927  000D4C  241E               	addwf	drawCircle@r,w,c
  7928  000D4E  EC22  F012         	call	_drawPixel
  7929                           
  7930                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7931  000D52  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7932  000D56  C020  F017         	movff	drawCircle@color,drawPixel@color
  7933  000D5A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7934  000D5E  501E               	movf	drawCircle@r,w,c
  7935  000D60  0800               	sublw	0
  7936  000D62  241A               	addwf	drawCircle@x0,w,c
  7937  000D64  EC22  F012         	call	_drawPixel
  7938                           
  7939                           ;ST7735_TFT.c: 569: while (x < y) {
  7940  000D68  D078               	goto	l4552
  7941  000D6A                     l4524:
  7942                           
  7943                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7944  000D6A  BE29               	btfsc	drawCircle@f+1,7,c
  7945  000D6C  D00B               	goto	l249
  7946                           
  7947                           ;ST7735_TFT.c: 571: y--;
  7948  000D6E  062C               	decf	drawCircle@y,f,c
  7949  000D70  A0D8               	btfss	status,0,c
  7950  000D72  062D               	decf	drawCircle@y+1,f,c
  7951                           
  7952                           ;ST7735_TFT.c: 572: ddF_y += 2;
  7953  000D74  0E02               	movlw	2
  7954  000D76  2626               	addwf	drawCircle@ddF_y,f,c
  7955  000D78  0E00               	movlw	0
  7956  000D7A  2227               	addwfc	drawCircle@ddF_y+1,f,c
  7957                           
  7958                           ;ST7735_TFT.c: 573: f += ddF_y;
  7959  000D7C  5026               	movf	drawCircle@ddF_y,w,c
  7960  000D7E  2628               	addwf	drawCircle@f,f,c
  7961  000D80  5027               	movf	drawCircle@ddF_y+1,w,c
  7962  000D82  2229               	addwfc	drawCircle@f+1,f,c
  7963  000D84                     l249:
  7964                           
  7965                           ;ST7735_TFT.c: 574: }
  7966                           ;ST7735_TFT.c: 575: x++;
  7967  000D84  4A2A               	infsnz	drawCircle@x,f,c
  7968  000D86  2A2B               	incf	drawCircle@x+1,f,c
  7969                           
  7970                           ;ST7735_TFT.c: 576: ddF_x += 2;
  7971  000D88  0E02               	movlw	2
  7972  000D8A  2624               	addwf	drawCircle@ddF_x,f,c
  7973  000D8C  0E00               	movlw	0
  7974  000D8E  2225               	addwfc	drawCircle@ddF_x+1,f,c
  7975                           
  7976                           ;ST7735_TFT.c: 577: f += ddF_x;
  7977  000D90  5024               	movf	drawCircle@ddF_x,w,c
  7978  000D92  2628               	addwf	drawCircle@f,f,c
  7979  000D94  5025               	movf	drawCircle@ddF_x+1,w,c
  7980  000D96  2229               	addwfc	drawCircle@f+1,f,c
  7981                           
  7982                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  7983  000D98  501C               	movf	drawCircle@y0,w,c
  7984  000D9A  242C               	addwf	drawCircle@y,w,c
  7985  000D9C  6E16               	movwf	drawPixel@y,c
  7986  000D9E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7987  000DA2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7988  000DA6  501A               	movf	drawCircle@x0,w,c
  7989  000DA8  242A               	addwf	drawCircle@x,w,c
  7990  000DAA  EC22  F012         	call	_drawPixel
  7991                           
  7992                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  7993  000DAE  501C               	movf	drawCircle@y0,w,c
  7994  000DB0  242C               	addwf	drawCircle@y,w,c
  7995  000DB2  6E16               	movwf	drawPixel@y,c
  7996  000DB4  C020  F017         	movff	drawCircle@color,drawPixel@color
  7997  000DB8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7998  000DBC  502A               	movf	drawCircle@x,w,c
  7999  000DBE  0800               	sublw	0
  8000  000DC0  241A               	addwf	drawCircle@x0,w,c
  8001  000DC2  EC22  F012         	call	_drawPixel
  8002                           
  8003                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  8004  000DC6  502C               	movf	drawCircle@y,w,c
  8005  000DC8  0800               	sublw	0
  8006  000DCA  241C               	addwf	drawCircle@y0,w,c
  8007  000DCC  6E16               	movwf	drawPixel@y,c
  8008  000DCE  C020  F017         	movff	drawCircle@color,drawPixel@color
  8009  000DD2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8010  000DD6  501A               	movf	drawCircle@x0,w,c
  8011  000DD8  242A               	addwf	drawCircle@x,w,c
  8012  000DDA  EC22  F012         	call	_drawPixel
  8013                           
  8014                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  8015  000DDE  502C               	movf	drawCircle@y,w,c
  8016  000DE0  0800               	sublw	0
  8017  000DE2  241C               	addwf	drawCircle@y0,w,c
  8018  000DE4  6E16               	movwf	drawPixel@y,c
  8019  000DE6  C020  F017         	movff	drawCircle@color,drawPixel@color
  8020  000DEA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8021  000DEE  502A               	movf	drawCircle@x,w,c
  8022  000DF0  0800               	sublw	0
  8023  000DF2  241A               	addwf	drawCircle@x0,w,c
  8024  000DF4  EC22  F012         	call	_drawPixel
  8025                           
  8026                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  8027  000DF8  501C               	movf	drawCircle@y0,w,c
  8028  000DFA  242A               	addwf	drawCircle@x,w,c
  8029  000DFC  6E16               	movwf	drawPixel@y,c
  8030  000DFE  C020  F017         	movff	drawCircle@color,drawPixel@color
  8031  000E02  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8032  000E06  501A               	movf	drawCircle@x0,w,c
  8033  000E08  242C               	addwf	drawCircle@y,w,c
  8034  000E0A  EC22  F012         	call	_drawPixel
  8035                           
  8036                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  8037  000E0E  501C               	movf	drawCircle@y0,w,c
  8038  000E10  242A               	addwf	drawCircle@x,w,c
  8039  000E12  6E16               	movwf	drawPixel@y,c
  8040  000E14  C020  F017         	movff	drawCircle@color,drawPixel@color
  8041  000E18  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8042  000E1C  502C               	movf	drawCircle@y,w,c
  8043  000E1E  0800               	sublw	0
  8044  000E20  241A               	addwf	drawCircle@x0,w,c
  8045  000E22  EC22  F012         	call	_drawPixel
  8046                           
  8047                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  8048  000E26  502A               	movf	drawCircle@x,w,c
  8049  000E28  0800               	sublw	0
  8050  000E2A  241C               	addwf	drawCircle@y0,w,c
  8051  000E2C  6E16               	movwf	drawPixel@y,c
  8052  000E2E  C020  F017         	movff	drawCircle@color,drawPixel@color
  8053  000E32  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8054  000E36  501A               	movf	drawCircle@x0,w,c
  8055  000E38  242C               	addwf	drawCircle@y,w,c
  8056  000E3A  EC22  F012         	call	_drawPixel
  8057                           
  8058                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  8059  000E3E  502A               	movf	drawCircle@x,w,c
  8060  000E40  0800               	sublw	0
  8061  000E42  241C               	addwf	drawCircle@y0,w,c
  8062  000E44  6E16               	movwf	drawPixel@y,c
  8063  000E46  C020  F017         	movff	drawCircle@color,drawPixel@color
  8064  000E4A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  8065  000E4E  502C               	movf	drawCircle@y,w,c
  8066  000E50  0800               	sublw	0
  8067  000E52  241A               	addwf	drawCircle@x0,w,c
  8068  000E54  EC22  F012         	call	_drawPixel
  8069  000E58  D000               	goto	l4552
  8070  000E5A                     l4552:
  8071  000E5A  502C               	movf	drawCircle@y,w,c
  8072  000E5C  5C2A               	subwf	drawCircle@x,w,c
  8073  000E5E  502B               	movf	drawCircle@x+1,w,c
  8074  000E60  0A80               	xorlw	128
  8075  000E62  6E22               	movwf	??_drawCircle& (0+255),c
  8076  000E64  502D               	movf	drawCircle@y+1,w,c
  8077  000E66  0A80               	xorlw	128
  8078  000E68  5822               	subwfb	??_drawCircle& (0+255),w,c
  8079  000E6A  A0D8               	btfss	status,0,c
  8080  000E6C  D77E               	goto	l4524
  8081  000E6E  0012               	return		;funcret
  8082  000E70                     __end_of_drawCircle:
  8083                           	opt stack 0
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           intcon2	equ	0xFF1
  8091                           intcon3	equ	0xFF0
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           postdec1	equ	0xFE5
  8095                           fsr1l	equ	0xFE1
  8096                           indf2	equ	0xFDF
  8097                           fsr2h	equ	0xFDA
  8098                           fsr2l	equ	0xFD9
  8099                           status	equ	0xFD8
  8100                           
  8101 ;; *************** function _PED_Control *****************
  8102 ;; Defined at:
  8103 ;;		line 501 in file "Lab8_redo.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;  direction       1    wreg     unsigned char 
  8106 ;;  Num_Sec         1    8[BANK0 ] unsigned char 
  8107 ;; Auto vars:     Size  Location     Type
  8108 ;;  direction       1   11[BANK0 ] unsigned char 
  8109 ;;  i               1   10[BANK0 ] unsigned char 
  8110 ;;  i               1    9[BANK0 ] unsigned char 
  8111 ;; Return value:  Size  Location     Type
  8112 ;;		None               void
  8113 ;; Registers used:
  8114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8120 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;Total ram usage:        4 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:   10
  8127 ;; This function calls:
  8128 ;;		_Wait_One_Second_With_Beep
  8129 ;;		_update_LCD_PED_Count
  8130 ;; This function is called by:
  8131 ;;		_Day_Mode
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           	psect	text38
  8136  001EDA                     __ptext38:
  8137                           	opt stack 0
  8138  001EDA                     _PED_Control:
  8139                           	opt stack 19
  8140                           
  8141                           ;incstack = 0
  8142                           ;PED_Control@direction stored from wreg
  8143  001EDA  0100               	movlb	0	; () banked
  8144  001EDC  6FB0               	movwf	PED_Control@direction& (0+255),b
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;Lab8_redo.c: 503: if (direction == 0)
  8148  001EDE  0100               	movlb	0	; () banked
  8149  001EE0  51B0               	movf	PED_Control@direction& (0+255),w,b
  8150  001EE2  0100               	movlb	0	; () banked
  8151  001EE4  A4D8               	btfss	status,2,c
  8152  001EE6  D036               	goto	l475
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;Lab8_redo.c: 504: {
  8156                           ;Lab8_redo.c: 505: for(char i = Num_Sec-1;i>0; i--)
  8157  001EE8  0100               	movlb	0	; () banked
  8158  001EEA  05AD               	decf	PED_Control@Num_Sec& (0+255),w,b
  8159  001EEC  0100               	movlb	0	; () banked
  8160  001EEE  6FAE               	movwf	PED_Control@i& (0+255),b
  8161  001EF0                     l5064:
  8162                           
  8163                           ; BSR set to: 0
  8164  001EF0  0100               	movlb	0	; () banked
  8165  001EF2  51AE               	movf	PED_Control@i& (0+255),w,b
  8166  001EF4  0100               	movlb	0	; () banked
  8167  001EF6  B4D8               	btfsc	status,2,c
  8168  001EF8  D00D               	goto	l5076
  8169  001EFA  D001               	goto	l5068
  8170                           
  8171                           ; BSR set to: 0
  8172  001EFC  D00B               	goto	l5076
  8173  001EFE                     l5068:
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;Lab8_redo.c: 506: {
  8177                           ;Lab8_redo.c: 507: update_LCD_PED_Count(direction, i);
  8178  001EFE  C0AE  F041         	movff	PED_Control@i,update_LCD_PED_Count@count
  8179  001F02  0100               	movlb	0	; () banked
  8180  001F04  51B0               	movf	PED_Control@direction& (0+255),w,b
  8181  001F06  ECA9  F00B         	call	_update_LCD_PED_Count
  8182                           
  8183                           ;Lab8_redo.c: 508: Wait_One_Second_With_Beep();
  8184  001F0A  ECC8  F012         	call	_Wait_One_Second_With_Beep	;wreg free
  8185  001F0E  0100               	movlb	0	; () banked
  8186  001F10  07AE               	decf	PED_Control@i& (0+255),f,b
  8187  001F12  D7EE               	goto	l5064
  8188  001F14                     l5076:
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;Lab8_redo.c: 509: }
  8192                           ;Lab8_redo.c: 511: NS_PED_SW = 0;
  8193  001F14  0E00               	movlw	0
  8194  001F16  6E4F               	movwf	_NS_PED_SW,c
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;Lab8_redo.c: 513: if (direction == 2)
  8198  001F18  0E02               	movlw	2
  8199  001F1A  0100               	movlb	0	; () banked
  8200  001F1C  19B0               	xorwf	PED_Control@direction& (0+255),w,b
  8201  001F1E  A4D8               	btfss	status,2,c
  8202  001F20  D019               	goto	l475
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;Lab8_redo.c: 514: {
  8206                           ;Lab8_redo.c: 515: for(char i = Num_Sec-1;i>0; i--)
  8207  001F22  0100               	movlb	0	; () banked
  8208  001F24  05AD               	decf	PED_Control@Num_Sec& (0+255),w,b
  8209  001F26  0100               	movlb	0	; () banked
  8210  001F28  6FAF               	movwf	PED_Control@i_1511& (0+255),b
  8211  001F2A                     l5082:
  8212                           
  8213                           ; BSR set to: 0
  8214  001F2A  0100               	movlb	0	; () banked
  8215  001F2C  51AF               	movf	PED_Control@i_1511& (0+255),w,b
  8216  001F2E  0100               	movlb	0	; () banked
  8217  001F30  B4D8               	btfsc	status,2,c
  8218  001F32  D00D               	goto	l5094
  8219  001F34  D001               	goto	l5086
  8220                           
  8221                           ; BSR set to: 0
  8222  001F36  D00B               	goto	l5094
  8223  001F38                     l5086:
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;Lab8_redo.c: 516: {
  8227                           ;Lab8_redo.c: 517: update_LCD_PED_Count(direction, i);
  8228  001F38  C0AF  F041         	movff	PED_Control@i_1511,update_LCD_PED_Count@count
  8229  001F3C  0100               	movlb	0	; () banked
  8230  001F3E  51B0               	movf	PED_Control@direction& (0+255),w,b
  8231  001F40  ECA9  F00B         	call	_update_LCD_PED_Count
  8232                           
  8233                           ;Lab8_redo.c: 518: Wait_One_Second_With_Beep();
  8234  001F44  ECC8  F012         	call	_Wait_One_Second_With_Beep	;wreg free
  8235  001F48  0100               	movlb	0	; () banked
  8236  001F4A  07AF               	decf	PED_Control@i_1511& (0+255),f,b
  8237  001F4C  D7EE               	goto	l5082
  8238  001F4E                     l5094:
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;Lab8_redo.c: 519: }
  8242                           ;Lab8_redo.c: 521: EW_PED_SW = 0;
  8243  001F4E  0E00               	movlw	0
  8244  001F50  6E4C               	movwf	_EW_PED_SW,c
  8245                           
  8246                           ; BSR set to: 0
  8247  001F52  D000               	goto	l475
  8248  001F54                     l475:
  8249                           
  8250                           ; BSR set to: 0
  8251  001F54  0012               	return		;funcret
  8252  001F56                     __end_of_PED_Control:
  8253                           	opt stack 0
  8254                           tblptru	equ	0xFF8
  8255                           tblptrh	equ	0xFF7
  8256                           tblptrl	equ	0xFF6
  8257                           tablat	equ	0xFF5
  8258                           prodl	equ	0xFF3
  8259                           intcon	equ	0xFF2
  8260                           intcon2	equ	0xFF1
  8261                           intcon3	equ	0xFF0
  8262                           postinc0	equ	0xFEE
  8263                           wreg	equ	0xFE8
  8264                           postdec1	equ	0xFE5
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           
  8271 ;; *************** function _update_LCD_PED_Count *****************
  8272 ;; Defined at:
  8273 ;;		line 794 in file "Lab8_redo.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;  direction       1    wreg     unsigned char 
  8276 ;;  count           1   64[COMRAM] unsigned char 
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  direction       1    7[BANK0 ] unsigned char 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;		None               void
  8281 ;; Registers used:
  8282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8283 ;; Tracked objects:
  8284 ;;		On entry : 0/0
  8285 ;;		On exit  : 0/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8288 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;Total ram usage:        2 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    9
  8295 ;; This function calls:
  8296 ;;		___awdiv
  8297 ;;		___awmod
  8298 ;;		_drawtext
  8299 ;; This function is called by:
  8300 ;;		_PED_Control
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text39
  8305  001752                     __ptext39:
  8306                           	opt stack 0
  8307  001752                     _update_LCD_PED_Count:
  8308                           	opt stack 19
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;incstack = 0
  8312                           ;update_LCD_PED_Count@direction stored from wreg
  8313  001752  0100               	movlb	0	; () banked
  8314  001754  6FAC               	movwf	update_LCD_PED_Count@direction& (0+255),b
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;Lab8_redo.c: 796: switch (direction)
  8318  001756  D05B               	goto	l4950
  8319  001758                     l4940:
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;Lab8_redo.c: 799: PED_NS_Count[0] = count/10 + '0';
  8323  001758  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8324  00175C  6A10               	clrf	___awdiv@dividend+1,c
  8325  00175E  0E00               	movlw	0
  8326  001760  6E12               	movwf	___awdiv@divisor+1,c
  8327  001762  0E0A               	movlw	10
  8328  001764  6E11               	movwf	___awdiv@divisor,c
  8329  001766  ECD5  F00D         	call	___awdiv	;wreg free
  8330  00176A  500F               	movf	?___awdiv,w,c
  8331  00176C  0F30               	addlw	48
  8332  00176E  0100               	movlb	0	; () banked
  8333  001770  6FBC               	movwf	_PED_NS_Count& (0+255),b
  8334                           
  8335                           ;Lab8_redo.c: 800: PED_NS_Count[1] = count%10 + '0';
  8336  001772  C041  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8337  001776  6A10               	clrf	___awmod@dividend+1,c
  8338  001778  0E00               	movlw	0
  8339  00177A  6E12               	movwf	___awmod@divisor+1,c
  8340  00177C  0E0A               	movlw	10
  8341  00177E  6E11               	movwf	___awmod@divisor,c
  8342  001780  EC2C  F00F         	call	___awmod	;wreg free
  8343  001784  500F               	movf	?___awmod,w,c
  8344  001786  0F30               	addlw	48
  8345  001788  0100               	movlb	0	; () banked
  8346  00178A  6FBD               	movwf	(_PED_NS_Count+1)& (0+255),b
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;Lab8_redo.c: 801: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  8350  00178C  0E1E               	movlw	30
  8351  00178E  6E37               	movwf	drawtext@y,c
  8352  001790  0EBC               	movlw	low _PED_NS_Count
  8353  001792  6E38               	movwf	drawtext@_text,c
  8354  001794  0E00               	movlw	high _PED_NS_Count
  8355  001796  6E39               	movwf	drawtext@_text+1,c
  8356  001798  0E00               	movlw	0
  8357  00179A  6E3B               	movwf	drawtext@color+1,c
  8358  00179C  0E1F               	movlw	31
  8359  00179E  6E3A               	movwf	drawtext@color,c
  8360  0017A0  0E00               	movlw	0
  8361  0017A2  6E3D               	movwf	drawtext@bg+1,c
  8362  0017A4  0E00               	movlw	0
  8363  0017A6  6E3C               	movwf	drawtext@bg,c
  8364  0017A8  0E02               	movlw	2
  8365  0017AA  6E3E               	movwf	drawtext@size,c
  8366  0017AC  0E02               	movlw	2
  8367  0017AE  ECCC  F009         	call	_drawtext
  8368                           
  8369                           ;Lab8_redo.c: 802: break;
  8370  0017B2  D036               	goto	l530
  8371  0017B4                     l4944:
  8372                           
  8373                           ;Lab8_redo.c: 805: PED_EW_Count[0] = count/10 + '0';
  8374  0017B4  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8375  0017B8  6A10               	clrf	___awdiv@dividend+1,c
  8376  0017BA  0E00               	movlw	0
  8377  0017BC  6E12               	movwf	___awdiv@divisor+1,c
  8378  0017BE  0E0A               	movlw	10
  8379  0017C0  6E11               	movwf	___awdiv@divisor,c
  8380  0017C2  ECD5  F00D         	call	___awdiv	;wreg free
  8381  0017C6  500F               	movf	?___awdiv,w,c
  8382  0017C8  0F30               	addlw	48
  8383  0017CA  0100               	movlb	0	; () banked
  8384  0017CC  6FB9               	movwf	_PED_EW_Count& (0+255),b
  8385                           
  8386                           ;Lab8_redo.c: 806: PED_EW_Count[1] = count%10 + '0';
  8387  0017CE  C041  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8388  0017D2  6A10               	clrf	___awmod@dividend+1,c
  8389  0017D4  0E00               	movlw	0
  8390  0017D6  6E12               	movwf	___awmod@divisor+1,c
  8391  0017D8  0E0A               	movlw	10
  8392  0017DA  6E11               	movwf	___awmod@divisor,c
  8393  0017DC  EC2C  F00F         	call	___awmod	;wreg free
  8394  0017E0  500F               	movf	?___awmod,w,c
  8395  0017E2  0F30               	addlw	48
  8396  0017E4  0100               	movlb	0	; () banked
  8397  0017E6  6FBA               	movwf	(_PED_EW_Count+1)& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;Lab8_redo.c: 807: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  8401  0017E8  0E5A               	movlw	90
  8402  0017EA  6E37               	movwf	drawtext@y,c
  8403  0017EC  0EB9               	movlw	low _PED_EW_Count
  8404  0017EE  6E38               	movwf	drawtext@_text,c
  8405  0017F0  0E00               	movlw	high _PED_EW_Count
  8406  0017F2  6E39               	movwf	drawtext@_text+1,c
  8407  0017F4  0E07               	movlw	7
  8408  0017F6  6E3B               	movwf	drawtext@color+1,c
  8409  0017F8  683A               	setf	drawtext@color,c
  8410  0017FA  0E00               	movlw	0
  8411  0017FC  6E3D               	movwf	drawtext@bg+1,c
  8412  0017FE  0E00               	movlw	0
  8413  001800  6E3C               	movwf	drawtext@bg,c
  8414  001802  0E02               	movlw	2
  8415  001804  6E3E               	movwf	drawtext@size,c
  8416  001806  0E02               	movlw	2
  8417  001808  ECCC  F009         	call	_drawtext
  8418                           
  8419                           ;Lab8_redo.c: 810: }
  8420                           
  8421                           ;Lab8_redo.c: 808: break;
  8422  00180C  D009               	goto	l530
  8423  00180E                     l4950:
  8424  00180E  0100               	movlb	0	; () banked
  8425  001810  51AC               	movf	update_LCD_PED_Count@direction& (0+255),w,b
  8426                           
  8427                           ; Switch size 1, requested type "space"
  8428                           ; Number of cases is 2, Range of values is 0 to 2
  8429                           ; switch strategies available:
  8430                           ; Name         Instructions Cycles
  8431                           ; simple_byte            7     4 (average)
  8432                           ;	Chosen strategy is simple_byte
  8433  001812  0A00               	xorlw	0	; case 0
  8434  001814  B4D8               	btfsc	status,2,c
  8435  001816  D7A0               	goto	l4940
  8436  001818  0A02               	xorlw	2	; case 2
  8437  00181A  B4D8               	btfsc	status,2,c
  8438  00181C  D7CB               	goto	l4944
  8439  00181E  D000               	goto	l530
  8440  001820                     l530:
  8441  001820  0012               	return		;funcret
  8442  001822                     __end_of_update_LCD_PED_Count:
  8443                           	opt stack 0
  8444                           tblptru	equ	0xFF8
  8445                           tblptrh	equ	0xFF7
  8446                           tblptrl	equ	0xFF6
  8447                           tablat	equ	0xFF5
  8448                           prodl	equ	0xFF3
  8449                           intcon	equ	0xFF2
  8450                           intcon2	equ	0xFF1
  8451                           intcon3	equ	0xFF0
  8452                           postinc0	equ	0xFEE
  8453                           wreg	equ	0xFE8
  8454                           postdec1	equ	0xFE5
  8455                           fsr1l	equ	0xFE1
  8456                           indf2	equ	0xFDF
  8457                           fsr2h	equ	0xFDA
  8458                           fsr2l	equ	0xFD9
  8459                           status	equ	0xFD8
  8460                           
  8461 ;; *************** function _drawtext *****************
  8462 ;; Defined at:
  8463 ;;		line 507 in file "ST7735_TFT.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  x               1    wreg     unsigned char 
  8466 ;;  y               1   54[COMRAM] unsigned char 
  8467 ;;  _text           2   55[COMRAM] PTR unsigned char 
  8468 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8469 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8470 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8471 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8472 ;;  color           2   57[COMRAM] unsigned int 
  8473 ;;  bg              2   59[COMRAM] unsigned int 
  8474 ;;  size            1   61[COMRAM] unsigned char 
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;  x               1    0[BANK0 ] unsigned char 
  8477 ;;  i               2    3[BANK0 ] unsigned int 
  8478 ;;  textsize        2    1[BANK0 ] unsigned int 
  8479 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  8480 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  8481 ;; Return value:  Size  Location     Type
  8482 ;;		None               void
  8483 ;; Registers used:
  8484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8490 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8494 ;;Total ram usage:       17 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:    8
  8497 ;; This function calls:
  8498 ;;		_drawChar
  8499 ;;		_strlen
  8500 ;; This function is called by:
  8501 ;;		_Initialize_Screen
  8502 ;;		_Wait_One_Second
  8503 ;;		_update_LCD_count
  8504 ;;		_update_LCD_PED_Count
  8505 ;;		_update_LCD_misc
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text40
  8510  001398                     __ptext40:
  8511                           	opt stack 0
  8512  001398                     _drawtext:
  8513                           	opt stack 19
  8514                           
  8515                           ;incstack = 0
  8516                           ;drawtext@x stored from wreg
  8517  001398  0100               	movlb	0	; () banked
  8518  00139A  6FA5               	movwf	drawtext@x& (0+255),b
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  8522                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  8523                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  8524  00139C  C0A5  F0AB         	movff	drawtext@x,drawtext@cursor_x
  8525                           
  8526                           ; BSR set to: 0
  8527  0013A0  C037  F0AA         	movff	drawtext@y,drawtext@cursor_y
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  8531  0013A4  C038  F00F         	movff	drawtext@_text,strlen@s
  8532  0013A8  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  8533  0013AC  EC94  F011         	call	_strlen	;wreg free
  8534  0013B0  C00F  F0A6         	movff	?_strlen,drawtext@textsize
  8535  0013B4  C010  F0A7         	movff	?_strlen+1,drawtext@textsize+1
  8536                           
  8537                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  8538  0013B8  0E00               	movlw	0
  8539  0013BA  0100               	movlb	0	; () banked
  8540  0013BC  6FA9               	movwf	(drawtext@i+1)& (0+255),b
  8541  0013BE  0E00               	movlw	0
  8542  0013C0  6FA8               	movwf	drawtext@i& (0+255),b
  8543  0013C2  D064               	goto	l4374
  8544  0013C4                     l4348:
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  8548  0013C4  505B               	movf	_wrap,w,c
  8549  0013C6  B4D8               	btfsc	status,2,c
  8550  0013C8  D034               	goto	l4364
  8551                           
  8552                           ; BSR set to: 0
  8553  0013CA  503E               	movf	drawtext@size,w,c
  8554  0013CC  0D05               	mullw	5
  8555  0013CE  0100               	movlb	0	; () banked
  8556  0013D0  51AB               	movf	drawtext@cursor_x& (0+255),w,b
  8557  0013D2  6E3F               	movwf	??_drawtext& (0+255),c
  8558  0013D4  6A40               	clrf	(??_drawtext+1)& (0+255),c
  8559  0013D6  50F3               	movf	prodl,w,c
  8560  0013D8  263F               	addwf	??_drawtext,f,c
  8561  0013DA  50F4               	movf	prodh,w,c
  8562  0013DC  2240               	addwfc	??_drawtext+1,f,c
  8563  0013DE  BE40               	btfsc	??_drawtext+1,7,c
  8564  0013E0  D028               	goto	l4364
  8565  0013E2  5040               	movf	??_drawtext+1,w,c
  8566  0013E4  E104               	bnz	u3100
  8567  0013E6  0E81               	movlw	129
  8568  0013E8  5C3F               	subwf	??_drawtext,w,c
  8569  0013EA  A0D8               	btfss	status,0,c
  8570  0013EC  D022               	goto	l4364
  8571  0013EE                     u3100:
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;ST7735_TFT.c: 515: cursor_x = 0;
  8575  0013EE  0E00               	movlw	0
  8576  0013F0  0100               	movlb	0	; () banked
  8577  0013F2  6FAB               	movwf	drawtext@cursor_x& (0+255),b
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  8581  0013F4  503E               	movf	drawtext@size,w,c
  8582  0013F6  0D07               	mullw	7
  8583  0013F8  50F3               	movf	prodl,w,c
  8584  0013FA  0100               	movlb	0	; () banked
  8585  0013FC  25AA               	addwf	drawtext@cursor_y& (0+255),w,b
  8586  0013FE  0F03               	addlw	3
  8587  001400  0100               	movlb	0	; () banked
  8588  001402  6FAA               	movwf	drawtext@cursor_y& (0+255),b
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  8592  001404  0EA0               	movlw	160
  8593  001406  0100               	movlb	0	; () banked
  8594  001408  65AA               	cpfsgt	drawtext@cursor_y& (0+255),b
  8595  00140A  D004               	goto	l4360
  8596                           
  8597                           ; BSR set to: 0
  8598  00140C  0EA0               	movlw	160
  8599  00140E  0100               	movlb	0	; () banked
  8600  001410  6FAA               	movwf	drawtext@cursor_y& (0+255),b
  8601  001412  D000               	goto	l4360
  8602  001414                     l4360:
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  8606  001414  0100               	movlb	0	; () banked
  8607  001416  51A8               	movf	drawtext@i& (0+255),w,b
  8608  001418  2438               	addwf	drawtext@_text,w,c
  8609  00141A  6ED9               	movwf	fsr2l,c
  8610  00141C  0100               	movlb	0	; () banked
  8611  00141E  51A9               	movf	(drawtext@i+1)& (0+255),w,b
  8612  001420  2039               	addwfc	drawtext@_text+1,w,c
  8613  001422  6EDA               	movwf	fsr2h,c
  8614  001424  0E20               	movlw	32
  8615  001426  18DE               	xorwf	postinc2,w,c
  8616  001428  B4D8               	btfsc	status,2,c
  8617  00142A  D02C               	goto	l4372
  8618  00142C  D002               	goto	l4364
  8619                           
  8620                           ; BSR set to: 0
  8621  00142E  D02A               	goto	l4372
  8622                           
  8623                           ; BSR set to: 0
  8624  001430  D000               	goto	l4364
  8625  001432                     l4364:
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8629  001432  C0AA  F02C         	movff	drawtext@cursor_y,drawChar@y
  8630  001436  0100               	movlb	0	; () banked
  8631  001438  51A8               	movf	drawtext@i& (0+255),w,b
  8632  00143A  2438               	addwf	drawtext@_text,w,c
  8633  00143C  6ED9               	movwf	fsr2l,c
  8634  00143E  0100               	movlb	0	; () banked
  8635  001440  51A9               	movf	(drawtext@i+1)& (0+255),w,b
  8636  001442  2039               	addwfc	drawtext@_text+1,w,c
  8637  001444  6EDA               	movwf	fsr2h,c
  8638  001446  50DF               	movf	indf2,w,c
  8639  001448  6E2D               	movwf	drawChar@c,c
  8640  00144A  C03A  F02E         	movff	drawtext@color,drawChar@color
  8641  00144E  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  8642  001452  C03C  F030         	movff	drawtext@bg,drawChar@bg
  8643  001456  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  8644  00145A  C03E  F032         	movff	drawtext@size,drawChar@size
  8645  00145E  0100               	movlb	0	; () banked
  8646  001460  51AB               	movf	drawtext@cursor_x& (0+255),w,b
  8647  001462  ECFD  F007         	call	_drawChar
  8648                           
  8649                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  8650  001466  503E               	movf	drawtext@size,w,c
  8651  001468  0D06               	mullw	6
  8652  00146A  50F3               	movf	prodl,w,c
  8653  00146C  0100               	movlb	0	; () banked
  8654  00146E  25AB               	addwf	drawtext@cursor_x& (0+255),w,b
  8655  001470  0100               	movlb	0	; () banked
  8656  001472  6FAB               	movwf	drawtext@cursor_x& (0+255),b
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  8660  001474  0E80               	movlw	128
  8661  001476  0100               	movlb	0	; () banked
  8662  001478  65AB               	cpfsgt	drawtext@cursor_x& (0+255),b
  8663  00147A  D004               	goto	l4372
  8664                           
  8665                           ; BSR set to: 0
  8666  00147C  0E80               	movlw	128
  8667  00147E  0100               	movlb	0	; () banked
  8668  001480  6FAB               	movwf	drawtext@cursor_x& (0+255),b
  8669                           
  8670                           ; BSR set to: 0
  8671  001482  D000               	goto	l4372
  8672  001484                     l4372:
  8673                           
  8674                           ; BSR set to: 0
  8675  001484  0100               	movlb	0	; () banked
  8676  001486  4BA8               	infsnz	drawtext@i& (0+255),f,b
  8677  001488  2BA9               	incf	(drawtext@i+1)& (0+255),f,b
  8678  00148A  D000               	goto	l4374
  8679  00148C                     l4374:
  8680                           
  8681                           ; BSR set to: 0
  8682  00148C  0100               	movlb	0	; () banked
  8683  00148E  51A6               	movf	drawtext@textsize& (0+255),w,b
  8684  001490  0100               	movlb	0	; () banked
  8685  001492  5DA8               	subwf	drawtext@i& (0+255),w,b
  8686  001494  0100               	movlb	0	; () banked
  8687  001496  51A7               	movf	(drawtext@textsize+1)& (0+255),w,b
  8688  001498  0100               	movlb	0	; () banked
  8689  00149A  59A9               	subwfb	(drawtext@i+1)& (0+255),w,b
  8690  00149C  A0D8               	btfss	status,0,c
  8691  00149E  D792               	goto	l4348
  8692                           
  8693                           ; BSR set to: 0
  8694                           
  8695                           ; BSR set to: 0
  8696  0014A0  0012               	return		;funcret
  8697  0014A2                     __end_of_drawtext:
  8698                           	opt stack 0
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           intcon2	equ	0xFF1
  8707                           intcon3	equ	0xFF0
  8708                           postinc0	equ	0xFEE
  8709                           wreg	equ	0xFE8
  8710                           postdec1	equ	0xFE5
  8711                           fsr1l	equ	0xFE1
  8712                           indf2	equ	0xFDF
  8713                           postinc2	equ	0xFDE
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _strlen *****************
  8719 ;; Defined at:
  8720 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  s               2   14[COMRAM] PTR const unsigned char 
  8723 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8724 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8725 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8726 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8727 ;; Auto vars:     Size  Location     Type
  8728 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  8729 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8730 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8731 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8732 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8733 ;; Return value:  Size  Location     Type
  8734 ;;                  2   14[COMRAM] unsigned int 
  8735 ;; Registers used:
  8736 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8737 ;; Tracked objects:
  8738 ;;		On entry : 0/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;Total ram usage:        6 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:    2
  8749 ;; This function calls:
  8750 ;;		Nothing
  8751 ;; This function is called by:
  8752 ;;		_drawtext
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           	psect	text41
  8757  002328                     __ptext41:
  8758                           	opt stack 0
  8759  002328                     _strlen:
  8760                           	opt stack 24
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;incstack = 0
  8764  002328  C00F  F013         	movff	strlen@s,strlen@cp
  8765  00232C  C010  F014         	movff	strlen@s+1,strlen@cp+1
  8766  002330  D003               	goto	l4298
  8767  002332                     l4296:
  8768  002332  4A13               	infsnz	strlen@cp,f,c
  8769  002334  2A14               	incf	strlen@cp+1,f,c
  8770  002336  D000               	goto	l4298
  8771  002338                     l4298:
  8772  002338  C013  FFD9         	movff	strlen@cp,fsr2l
  8773  00233C  C014  FFDA         	movff	strlen@cp+1,fsr2h
  8774  002340  50DF               	movf	indf2,w,c
  8775  002342  A4D8               	btfss	status,2,c
  8776  002344  D7F6               	goto	l4296
  8777  002346  C00F  F011         	movff	strlen@s,??_strlen
  8778  00234A  C010  F012         	movff	strlen@s+1,??_strlen+1
  8779  00234E  1E11               	comf	??_strlen,f,c
  8780  002350  1E12               	comf	??_strlen+1,f,c
  8781  002352  4A11               	infsnz	??_strlen,f,c
  8782  002354  2A12               	incf	??_strlen+1,f,c
  8783  002356  5013               	movf	strlen@cp,w,c
  8784  002358  2411               	addwf	??_strlen,w,c
  8785  00235A  6E0F               	movwf	?_strlen,c
  8786  00235C  5014               	movf	strlen@cp+1,w,c
  8787  00235E  2012               	addwfc	??_strlen+1,w,c
  8788  002360  6E10               	movwf	?_strlen+1,c
  8789  002362  D000               	goto	l1148
  8790  002364                     l1148:
  8791  002364  0012               	return		;funcret
  8792  002366                     __end_of_strlen:
  8793                           	opt stack 0
  8794                           tblptru	equ	0xFF8
  8795                           tblptrh	equ	0xFF7
  8796                           tblptrl	equ	0xFF6
  8797                           tablat	equ	0xFF5
  8798                           prodh	equ	0xFF4
  8799                           prodl	equ	0xFF3
  8800                           intcon	equ	0xFF2
  8801                           intcon2	equ	0xFF1
  8802                           intcon3	equ	0xFF0
  8803                           postinc0	equ	0xFEE
  8804                           wreg	equ	0xFE8
  8805                           postdec1	equ	0xFE5
  8806                           fsr1l	equ	0xFE1
  8807                           indf2	equ	0xFDF
  8808                           postinc2	equ	0xFDE
  8809                           fsr2h	equ	0xFDA
  8810                           fsr2l	equ	0xFD9
  8811                           status	equ	0xFD8
  8812                           
  8813 ;; *************** function _drawChar *****************
  8814 ;; Defined at:
  8815 ;;		line 480 in file "ST7735_TFT.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  x               1    wreg     unsigned char 
  8818 ;;  y               1   43[COMRAM] unsigned char 
  8819 ;;  c               1   44[COMRAM] unsigned char 
  8820 ;;  color           2   45[COMRAM] unsigned int 
  8821 ;;  bg              2   47[COMRAM] unsigned int 
  8822 ;;  size            1   49[COMRAM] unsigned char 
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;  x               1   51[COMRAM] unsigned char 
  8825 ;;  line            1   50[COMRAM] unsigned char 
  8826 ;;  i               1   53[COMRAM] unsigned char 
  8827 ;;  j               1   52[COMRAM] unsigned char 
  8828 ;; Return value:  Size  Location     Type
  8829 ;;		None               void
  8830 ;; Registers used:
  8831 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8837 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8838 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8840 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8841 ;;Total ram usage:       11 bytes
  8842 ;; Hardware stack levels used:    1
  8843 ;; Hardware stack levels required when called:    7
  8844 ;; This function calls:
  8845 ;;		___wmul
  8846 ;;		_drawPixel
  8847 ;;		_fillRect
  8848 ;; This function is called by:
  8849 ;;		_drawtext
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text42
  8854  000FFA                     __ptext42:
  8855                           	opt stack 0
  8856  000FFA                     _drawChar:
  8857                           	opt stack 19
  8858                           
  8859                           ;incstack = 0
  8860                           ;drawChar@x stored from wreg
  8861  000FFA  6E34               	movwf	drawChar@x,c
  8862                           
  8863                           ;ST7735_TFT.c: 482: char i, j;
  8864                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  8865  000FFC  0E80               	movlw	128
  8866  000FFE  6034               	cpfslt	drawChar@x,c
  8867  001000  D0A6               	goto	l201
  8868  001002  0E9F               	movlw	159
  8869  001004  642C               	cpfsgt	drawChar@y,c
  8870  001006  D001               	goto	l4244
  8871                           
  8872                           ;ST7735_TFT.c: 484: return;
  8873  001008  D0A2               	goto	l201
  8874  00100A                     l4244:
  8875                           
  8876                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  8877  00100A  5032               	movf	drawChar@size,w,c
  8878  00100C  A4D8               	btfss	status,2,c
  8879  00100E  D003               	goto	l4248
  8880  001010  0E01               	movlw	1
  8881  001012  6E32               	movwf	drawChar@size,c
  8882  001014  D000               	goto	l4248
  8883  001016                     l4248:
  8884                           
  8885                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8886  001016  0E1F               	movlw	31
  8887  001018  642D               	cpfsgt	drawChar@c,c
  8888  00101A  D004               	goto	l4252
  8889  00101C  0E7E               	movlw	126
  8890  00101E  642D               	cpfsgt	drawChar@c,c
  8891  001020  D003               	goto	l203
  8892  001022  D000               	goto	l4252
  8893  001024                     l4252:
  8894                           
  8895                           ;ST7735_TFT.c: 487: c = '?';
  8896  001024  0E3F               	movlw	63
  8897  001026  6E2D               	movwf	drawChar@c,c
  8898  001028                     l203:
  8899                           
  8900                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8901  001028  0E00               	movlw	0
  8902  00102A  6E36               	movwf	drawChar@i,c
  8903  00102C                     l4254:
  8904  00102C  0E04               	movlw	4
  8905  00102E  6436               	cpfsgt	drawChar@i,c
  8906  001030  D001               	goto	l4258
  8907  001032  D08D               	goto	l201
  8908  001034                     l4258:
  8909                           
  8910                           ;ST7735_TFT.c: 489: unsigned char line;
  8911                           ;ST7735_TFT.c: 490: if(c < 'S')
  8912  001034  0E53               	movlw	83
  8913  001036  602D               	cpfslt	drawChar@c,c
  8914  001038  D015               	goto	l4262
  8915                           
  8916                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8917  00103A  0EE0               	movlw	224
  8918  00103C  242D               	addwf	drawChar@c,w,c
  8919  00103E  6E0F               	movwf	___wmul@multiplier,c
  8920  001040  6A10               	clrf	___wmul@multiplier+1,c
  8921  001042  0EFF               	movlw	255
  8922  001044  2210               	addwfc	___wmul@multiplier+1,f,c
  8923  001046  0E00               	movlw	0
  8924  001048  6E12               	movwf	___wmul@multiplicand+1,c
  8925  00104A  0E05               	movlw	5
  8926  00104C  6E11               	movwf	___wmul@multiplicand,c
  8927  00104E  EC4F  F012         	call	___wmul	;wreg free
  8928  001052  5036               	movf	drawChar@i,w,c
  8929  001054  260F               	addwf	?___wmul,f,c
  8930  001056  0E00               	movlw	0
  8931  001058  2210               	addwfc	?___wmul+1,f,c
  8932  00105A  0EED               	movlw	low _font
  8933  00105C  240F               	addwf	?___wmul,w,c
  8934  00105E  6EF6               	movwf	tblptrl,c
  8935  001060  0EFA               	movlw	high _font
  8936  001062  D014               	goto	L17
  8937  001064                     l4262:
  8938                           
  8939                           ;ST7735_TFT.c: 492: else
  8940                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8941  001064  0EAD               	movlw	173
  8942  001066  242D               	addwf	drawChar@c,w,c
  8943  001068  6E0F               	movwf	___wmul@multiplier,c
  8944  00106A  6A10               	clrf	___wmul@multiplier+1,c
  8945  00106C  0EFF               	movlw	255
  8946  00106E  2210               	addwfc	___wmul@multiplier+1,f,c
  8947  001070  0E00               	movlw	0
  8948  001072  6E12               	movwf	___wmul@multiplicand+1,c
  8949  001074  0E05               	movlw	5
  8950  001076  6E11               	movwf	___wmul@multiplicand,c
  8951  001078  EC4F  F012         	call	___wmul	;wreg free
  8952  00107C  5036               	movf	drawChar@i,w,c
  8953  00107E  260F               	addwf	?___wmul,f,c
  8954  001080  0E00               	movlw	0
  8955  001082  2210               	addwfc	?___wmul+1,f,c
  8956  001084  0EEC               	movlw	low _font2
  8957  001086  240F               	addwf	?___wmul,w,c
  8958  001088  6EF6               	movwf	tblptrl,c
  8959  00108A  0EFB               	movlw	high _font2
  8960  00108C                     L17:
  8961  00108C  2010               	addwfc	?___wmul+1,w,c
  8962  00108E  6EF7               	movwf	tblptrh,c
  8963  001090                     	if	0	;There are less than 3 active tblptr bytes
  8964  001090                     	endif
  8965  001090  0008               	tblrd		*
  8966  001092  CFF5 F033          	movff	tablat,drawChar@line
  8967  001096  D000               	goto	l4264
  8968  001098                     l4264:
  8969                           
  8970                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8971  001098  0E00               	movlw	0
  8972  00109A  6E35               	movwf	drawChar@j,c
  8973  00109C                     l4266:
  8974  00109C  0E06               	movlw	6
  8975  00109E  6435               	cpfsgt	drawChar@j,c
  8976  0010A0  D001               	goto	l210
  8977  0010A2  D053               	goto	l4290
  8978  0010A4                     l210:
  8979                           
  8980                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8981  0010A4  A033               	btfss	drawChar@line,0,c
  8982  0010A6  D023               	goto	l4276
  8983                           
  8984                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8985  0010A8  0432               	decf	drawChar@size,w,c
  8986  0010AA  A4D8               	btfss	status,2,c
  8987  0010AC  D00C               	goto	l4274
  8988  0010AE  502C               	movf	drawChar@y,w,c
  8989  0010B0  2435               	addwf	drawChar@j,w,c
  8990  0010B2  6E16               	movwf	drawPixel@y,c
  8991  0010B4  C02E  F017         	movff	drawChar@color,drawPixel@color
  8992  0010B8  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  8993  0010BC  5034               	movf	drawChar@x,w,c
  8994  0010BE  2436               	addwf	drawChar@i,w,c
  8995  0010C0  EC22  F012         	call	_drawPixel
  8996  0010C4  D03E               	goto	l4284
  8997  0010C6                     l4274:
  8998                           
  8999                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  9000  0010C6  5035               	movf	drawChar@j,w,c
  9001  0010C8  0232               	mulwf	drawChar@size,c
  9002  0010CA  50F3               	movf	prodl,w,c
  9003  0010CC  242C               	addwf	drawChar@y,w,c
  9004  0010CE  6E21               	movwf	fillRect@y,c
  9005  0010D0  C032  F022         	movff	drawChar@size,fillRect@w
  9006  0010D4  C032  F023         	movff	drawChar@size,fillRect@h
  9007  0010D8  C02E  F024         	movff	drawChar@color,fillRect@color
  9008  0010DC  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  9009  0010E0  5036               	movf	drawChar@i,w,c
  9010  0010E2  0232               	mulwf	drawChar@size,c
  9011  0010E4  50F3               	movf	prodl,w,c
  9012  0010E6  2434               	addwf	drawChar@x,w,c
  9013  0010E8  ECC0  F010         	call	_fillRect
  9014                           
  9015                           ;ST7735_TFT.c: 498: }
  9016  0010EC  D02A               	goto	l4284
  9017  0010EE                     l4276:
  9018                           
  9019                           ;ST7735_TFT.c: 499: else if(bg != color) {
  9020  0010EE  502E               	movf	drawChar@color,w,c
  9021  0010F0  1830               	xorwf	drawChar@bg,w,c
  9022  0010F2  E104               	bnz	u2960
  9023  0010F4  502F               	movf	drawChar@color+1,w,c
  9024  0010F6  1831               	xorwf	drawChar@bg+1,w,c
  9025  0010F8  B4D8               	btfsc	status,2,c
  9026  0010FA  D023               	goto	l4284
  9027  0010FC                     u2960:
  9028                           
  9029                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  9030  0010FC  0432               	decf	drawChar@size,w,c
  9031  0010FE  A4D8               	btfss	status,2,c
  9032  001100  D00C               	goto	l4282
  9033  001102  502C               	movf	drawChar@y,w,c
  9034  001104  2435               	addwf	drawChar@j,w,c
  9035  001106  6E16               	movwf	drawPixel@y,c
  9036  001108  C030  F017         	movff	drawChar@bg,drawPixel@color
  9037  00110C  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  9038  001110  5034               	movf	drawChar@x,w,c
  9039  001112  2436               	addwf	drawChar@i,w,c
  9040  001114  EC22  F012         	call	_drawPixel
  9041  001118  D014               	goto	l4284
  9042  00111A                     l4282:
  9043                           
  9044                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  9045  00111A  5035               	movf	drawChar@j,w,c
  9046  00111C  0232               	mulwf	drawChar@size,c
  9047  00111E  50F3               	movf	prodl,w,c
  9048  001120  242C               	addwf	drawChar@y,w,c
  9049  001122  6E21               	movwf	fillRect@y,c
  9050  001124  C032  F022         	movff	drawChar@size,fillRect@w
  9051  001128  C032  F023         	movff	drawChar@size,fillRect@h
  9052  00112C  C030  F024         	movff	drawChar@bg,fillRect@color
  9053  001130  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  9054  001134  5036               	movf	drawChar@i,w,c
  9055  001136  0232               	mulwf	drawChar@size,c
  9056  001138  50F3               	movf	prodl,w,c
  9057  00113A  2434               	addwf	drawChar@x,w,c
  9058  00113C  ECC0  F010         	call	_fillRect
  9059  001140  D000               	goto	l4284
  9060  001142                     l4284:
  9061  001142  2A35               	incf	drawChar@j,f,c
  9062  001144  90D8               	bcf	status,0,c
  9063  001146  3233               	rrcf	drawChar@line,f,c
  9064  001148  D7A9               	goto	l4266
  9065  00114A                     l4290:
  9066  00114A  2A36               	incf	drawChar@i,f,c
  9067  00114C  D76F               	goto	l4254
  9068  00114E                     l201:
  9069  00114E  0012               	return		;funcret
  9070  001150                     __end_of_drawChar:
  9071                           	opt stack 0
  9072                           tblptru	equ	0xFF8
  9073                           tblptrh	equ	0xFF7
  9074                           tblptrl	equ	0xFF6
  9075                           tablat	equ	0xFF5
  9076                           prodh	equ	0xFF4
  9077                           prodl	equ	0xFF3
  9078                           intcon	equ	0xFF2
  9079                           intcon2	equ	0xFF1
  9080                           intcon3	equ	0xFF0
  9081                           postinc0	equ	0xFEE
  9082                           wreg	equ	0xFE8
  9083                           postdec1	equ	0xFE5
  9084                           fsr1l	equ	0xFE1
  9085                           indf2	equ	0xFDF
  9086                           postinc2	equ	0xFDE
  9087                           fsr2h	equ	0xFDA
  9088                           fsr2l	equ	0xFD9
  9089                           status	equ	0xFD8
  9090                           
  9091 ;; *************** function _fillRect *****************
  9092 ;; Defined at:
  9093 ;;		line 470 in file "ST7735_TFT.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;  x               1    wreg     unsigned char 
  9096 ;;  y               1   32[COMRAM] unsigned char 
  9097 ;;  w               1   33[COMRAM] unsigned char 
  9098 ;;  h               1   34[COMRAM] unsigned char 
  9099 ;;  color           2   35[COMRAM] unsigned int 
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;  x               1   40[COMRAM] unsigned char 
  9102 ;;  i               2   41[COMRAM] int 
  9103 ;; Return value:  Size  Location     Type
  9104 ;;		None               void
  9105 ;; Registers used:
  9106 ;;		wreg, status,2, status,0, cstack
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9112 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;Total ram usage:       11 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:    6
  9119 ;; This function calls:
  9120 ;;		_drawFastVLine
  9121 ;; This function is called by:
  9122 ;;		_drawChar
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text43
  9127  002180                     __ptext43:
  9128                           	opt stack 0
  9129  002180                     _fillRect:
  9130                           	opt stack 19
  9131                           
  9132                           ;incstack = 0
  9133                           ;fillRect@x stored from wreg
  9134  002180  6E29               	movwf	fillRect@x,c
  9135                           
  9136                           ;ST7735_TFT.c: 472: signed int i;
  9137                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  9138  002182  C029  F02A         	movff	fillRect@x,fillRect@i
  9139  002186  6A2B               	clrf	fillRect@i+1,c
  9140  002188  D00E               	goto	l4232
  9141  00218A                     l4228:
  9142                           
  9143                           ;ST7735_TFT.c: 475: {
  9144                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  9145  00218A  C021  F016         	movff	fillRect@y,drawFastVLine@y
  9146  00218E  C023  F017         	movff	fillRect@h,drawFastVLine@h
  9147  002192  C024  F018         	movff	fillRect@color,drawFastVLine@color
  9148  002196  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  9149  00219A  502A               	movf	fillRect@i,w,c
  9150  00219C  EC64  F00E         	call	_drawFastVLine
  9151  0021A0  4A2A               	infsnz	fillRect@i,f,c
  9152  0021A2  2A2B               	incf	fillRect@i+1,f,c
  9153  0021A4  D000               	goto	l4232
  9154  0021A6                     l4232:
  9155  0021A6  5022               	movf	fillRect@w,w,c
  9156  0021A8  C029  F026         	movff	fillRect@x,??_fillRect
  9157  0021AC  6A27               	clrf	(??_fillRect+1)& (0+255),c
  9158  0021AE  2626               	addwf	??_fillRect,f,c
  9159  0021B0  0E00               	movlw	0
  9160  0021B2  2227               	addwfc	??_fillRect+1,f,c
  9161  0021B4  5026               	movf	??_fillRect,w,c
  9162  0021B6  5C2A               	subwf	fillRect@i,w,c
  9163  0021B8  502B               	movf	fillRect@i+1,w,c
  9164  0021BA  0A80               	xorlw	128
  9165  0021BC  6E28               	movwf	(??_fillRect+2)& (0+255),c
  9166  0021BE  5027               	movf	??_fillRect+1,w,c
  9167  0021C0  0A80               	xorlw	128
  9168  0021C2  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  9169  0021C4  A0D8               	btfss	status,0,c
  9170  0021C6  D7E1               	goto	l4228
  9171  0021C8  0012               	return		;funcret
  9172  0021CA                     __end_of_fillRect:
  9173                           	opt stack 0
  9174                           tblptru	equ	0xFF8
  9175                           tblptrh	equ	0xFF7
  9176                           tblptrl	equ	0xFF6
  9177                           tablat	equ	0xFF5
  9178                           prodh	equ	0xFF4
  9179                           prodl	equ	0xFF3
  9180                           intcon	equ	0xFF2
  9181                           intcon2	equ	0xFF1
  9182                           intcon3	equ	0xFF0
  9183                           postinc0	equ	0xFEE
  9184                           wreg	equ	0xFE8
  9185                           postdec1	equ	0xFE5
  9186                           fsr1l	equ	0xFE1
  9187                           indf2	equ	0xFDF
  9188                           postinc2	equ	0xFDE
  9189                           fsr2h	equ	0xFDA
  9190                           fsr2l	equ	0xFD9
  9191                           status	equ	0xFD8
  9192                           
  9193 ;; *************** function _drawFastVLine *****************
  9194 ;; Defined at:
  9195 ;;		line 449 in file "ST7735_TFT.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  x               1    wreg     unsigned char 
  9198 ;;  y               1   21[COMRAM] unsigned char 
  9199 ;;  h               1   22[COMRAM] unsigned char 
  9200 ;;  color           2   23[COMRAM] unsigned int 
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;  x               1   31[COMRAM] unsigned char 
  9203 ;;  lo              1   30[COMRAM] unsigned char 
  9204 ;;  hi              1   29[COMRAM] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;		None               void
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9214 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9217 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9218 ;;Total ram usage:       11 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    5
  9221 ;; This function calls:
  9222 ;;		_setAddrWindow
  9223 ;;		_spiwrite
  9224 ;; This function is called by:
  9225 ;;		_fillRect
  9226 ;;		_fillCircleHelper
  9227 ;;		_fillCircle
  9228 ;;		_drawRect
  9229 ;; This function uses a non-reentrant model
  9230 ;;
  9231                           
  9232                           	psect	text44
  9233  001CC8                     __ptext44:
  9234                           	opt stack 0
  9235  001CC8                     _drawFastVLine:
  9236                           	opt stack 19
  9237                           
  9238                           ;incstack = 0
  9239                           ;drawFastVLine@x stored from wreg
  9240  001CC8  6E20               	movwf	drawFastVLine@x,c
  9241                           
  9242                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  9243                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  9244  001CCA  0E80               	movlw	128
  9245  001CCC  6020               	cpfslt	drawFastVLine@x,c
  9246  001CCE  D03F               	goto	l185
  9247  001CD0  0E9F               	movlw	159
  9248  001CD2  6416               	cpfsgt	drawFastVLine@y,c
  9249  001CD4  D001               	goto	l4198
  9250                           
  9251                           ;ST7735_TFT.c: 453: return;
  9252  001CD6  D03B               	goto	l185
  9253  001CD8                     l4198:
  9254                           
  9255                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  9256  001CD8  0EFF               	movlw	255
  9257  001CDA  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9258  001CDC  0EFF               	movlw	255
  9259  001CDE  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  9260  001CE0  5017               	movf	drawFastVLine@h,w,c
  9261  001CE2  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  9262  001CE6  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  9263  001CE8  261C               	addwf	??_drawFastVLine+2,f,c
  9264  001CEA  0E00               	movlw	0
  9265  001CEC  221D               	addwfc	??_drawFastVLine+3,f,c
  9266  001CEE  501A               	movf	??_drawFastVLine,w,c
  9267  001CF0  261C               	addwf	??_drawFastVLine+2,f,c
  9268  001CF2  501B               	movf	??_drawFastVLine+1,w,c
  9269  001CF4  221D               	addwfc	??_drawFastVLine+3,f,c
  9270  001CF6  BE1D               	btfsc	??_drawFastVLine+3,7,c
  9271  001CF8  D00B               	goto	l4202
  9272  001CFA  501D               	movf	??_drawFastVLine+3,w,c
  9273  001CFC  E104               	bnz	u2810
  9274  001CFE  0EA0               	movlw	160
  9275  001D00  5C1C               	subwf	??_drawFastVLine+2,w,c
  9276  001D02  A0D8               	btfss	status,0,c
  9277  001D04  D005               	goto	l4202
  9278  001D06                     u2810:
  9279                           
  9280                           ;ST7735_TFT.c: 455: h = 160 - y;
  9281  001D06  5016               	movf	drawFastVLine@y,w,c
  9282  001D08  0800               	sublw	0
  9283  001D0A  0FA0               	addlw	160
  9284  001D0C  6E17               	movwf	drawFastVLine@h,c
  9285  001D0E  D000               	goto	l4202
  9286  001D10                     l4202:
  9287                           
  9288                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  9289  001D10  5019               	movf	drawFastVLine@color+1,w,c
  9290  001D12  6E1E               	movwf	drawFastVLine@hi,c
  9291  001D14  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  9292                           
  9293                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  9294  001D18  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  9295  001D1C  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  9296  001D20  5016               	movf	drawFastVLine@y,w,c
  9297  001D22  2417               	addwf	drawFastVLine@h,w,c
  9298  001D24  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9299  001D26  041A               	decf	??_drawFastVLine,w,c
  9300  001D28  6E14               	movwf	setAddrWindow@y1,c
  9301  001D2A  5020               	movf	drawFastVLine@x,w,c
  9302  001D2C  EC99  F010         	call	_setAddrWindow
  9303                           
  9304                           ;ST7735_TFT.c: 458: PORTDbits.RD3 = 1;
  9305  001D30  8683               	bsf	3971,3,c	;volatile
  9306                           
  9307                           ;ST7735_TFT.c: 459: PORTDbits.RD4 = 0;
  9308  001D32  9883               	bcf	3971,4,c	;volatile
  9309                           
  9310                           ;ST7735_TFT.c: 461: while (h--) {
  9311  001D34  D007               	goto	l4214
  9312  001D36                     l4212:
  9313                           
  9314                           ;ST7735_TFT.c: 462: spiwrite(hi);
  9315  001D36  501E               	movf	drawFastVLine@hi,w,c
  9316  001D38  ECE7  F012         	call	_spiwrite
  9317                           
  9318                           ;ST7735_TFT.c: 463: spiwrite(lo);
  9319  001D3C  501F               	movf	drawFastVLine@lo,w,c
  9320  001D3E  ECE7  F012         	call	_spiwrite
  9321  001D42  D000               	goto	l4214
  9322  001D44                     l4214:
  9323  001D44  0617               	decf	drawFastVLine@h,f,c
  9324  001D46  2817               	incf	drawFastVLine@h,w,c
  9325  001D48  A4D8               	btfss	status,2,c
  9326  001D4A  D7F5               	goto	l4212
  9327                           
  9328                           ;ST7735_TFT.c: 464: }
  9329                           ;ST7735_TFT.c: 465: PORTDbits.RD4 = 1;
  9330  001D4C  8883               	bsf	3971,4,c	;volatile
  9331  001D4E                     l185:
  9332  001D4E  0012               	return		;funcret
  9333  001D50                     __end_of_drawFastVLine:
  9334                           	opt stack 0
  9335                           tblptru	equ	0xFF8
  9336                           tblptrh	equ	0xFF7
  9337                           tblptrl	equ	0xFF6
  9338                           tablat	equ	0xFF5
  9339                           prodh	equ	0xFF4
  9340                           prodl	equ	0xFF3
  9341                           intcon	equ	0xFF2
  9342                           intcon2	equ	0xFF1
  9343                           intcon3	equ	0xFF0
  9344                           postinc0	equ	0xFEE
  9345                           wreg	equ	0xFE8
  9346                           postdec1	equ	0xFE5
  9347                           fsr1l	equ	0xFE1
  9348                           indf2	equ	0xFDF
  9349                           postinc2	equ	0xFDE
  9350                           fsr2h	equ	0xFDA
  9351                           fsr2l	equ	0xFD9
  9352                           status	equ	0xFD8
  9353                           
  9354 ;; *************** function _drawPixel *****************
  9355 ;; Defined at:
  9356 ;;		line 440 in file "ST7735_TFT.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  x               1    wreg     unsigned char 
  9359 ;;  y               1   21[COMRAM] unsigned char 
  9360 ;;  color           2   22[COMRAM] unsigned int 
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;  x               1   24[COMRAM] unsigned char 
  9363 ;; Return value:  Size  Location     Type
  9364 ;;		None               void
  9365 ;; Registers used:
  9366 ;;		wreg, status,2, status,0, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9372 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9375 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9376 ;;Total ram usage:        4 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    5
  9379 ;; This function calls:
  9380 ;;		_setAddrWindow
  9381 ;;		_write_data
  9382 ;; This function is called by:
  9383 ;;		_drawChar
  9384 ;;		_drawCircle
  9385 ;;		_drawCircleHelper
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           	psect	text45
  9390  002444                     __ptext45:
  9391                           	opt stack 0
  9392  002444                     _drawPixel:
  9393                           	opt stack 20
  9394                           
  9395                           ;incstack = 0
  9396                           ;drawPixel@x stored from wreg
  9397  002444  6E19               	movwf	drawPixel@x,c
  9398                           
  9399                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  9400  002446  0E80               	movlw	128
  9401  002448  6019               	cpfslt	drawPixel@x,c
  9402  00244A  D013               	goto	l179
  9403  00244C  0E9F               	movlw	159
  9404  00244E  6416               	cpfsgt	drawPixel@y,c
  9405  002450  D001               	goto	l4220
  9406                           
  9407                           ;ST7735_TFT.c: 443: return;
  9408  002452  D00F               	goto	l179
  9409  002454                     l4220:
  9410                           
  9411                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  9412  002454  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  9413  002458  2819               	incf	drawPixel@x,w,c
  9414  00245A  6E13               	movwf	setAddrWindow@x1,c
  9415  00245C  2816               	incf	drawPixel@y,w,c
  9416  00245E  6E14               	movwf	setAddrWindow@y1,c
  9417  002460  5019               	movf	drawPixel@x,w,c
  9418  002462  EC99  F010         	call	_setAddrWindow
  9419                           
  9420                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  9421  002466  5018               	movf	drawPixel@color+1,w,c
  9422  002468  EC03  F013         	call	_write_data
  9423                           
  9424                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  9425  00246C  5017               	movf	drawPixel@color,w,c
  9426  00246E  EC03  F013         	call	_write_data
  9427  002472                     l179:
  9428  002472  0012               	return		;funcret
  9429  002474                     __end_of_drawPixel:
  9430                           	opt stack 0
  9431                           tblptru	equ	0xFF8
  9432                           tblptrh	equ	0xFF7
  9433                           tblptrl	equ	0xFF6
  9434                           tablat	equ	0xFF5
  9435                           prodh	equ	0xFF4
  9436                           prodl	equ	0xFF3
  9437                           intcon	equ	0xFF2
  9438                           intcon2	equ	0xFF1
  9439                           intcon3	equ	0xFF0
  9440                           postinc0	equ	0xFEE
  9441                           wreg	equ	0xFE8
  9442                           postdec1	equ	0xFE5
  9443                           fsr1l	equ	0xFE1
  9444                           indf2	equ	0xFDF
  9445                           postinc2	equ	0xFDE
  9446                           fsr2h	equ	0xFDA
  9447                           fsr2l	equ	0xFD9
  9448                           status	equ	0xFD8
  9449                           
  9450 ;; *************** function _setAddrWindow *****************
  9451 ;; Defined at:
  9452 ;;		line 425 in file "ST7735_TFT.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;  x0              1    wreg     unsigned char 
  9455 ;;  y0              1   17[COMRAM] unsigned char 
  9456 ;;  x1              1   18[COMRAM] unsigned char 
  9457 ;;  y1              1   19[COMRAM] unsigned char 
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;  x0              1   20[COMRAM] unsigned char 
  9460 ;; Return value:  Size  Location     Type
  9461 ;;		None               void
  9462 ;; Registers used:
  9463 ;;		wreg, status,2, status,0, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9469 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;Total ram usage:        4 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    4
  9476 ;; This function calls:
  9477 ;;		_write_command
  9478 ;;		_write_data
  9479 ;; This function is called by:
  9480 ;;		_drawPixel
  9481 ;;		_drawFastVLine
  9482 ;;		_fillRectangle
  9483 ;;		_drawFastHLine
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           	psect	text46
  9488  002132                     __ptext46:
  9489                           	opt stack 0
  9490  002132                     _setAddrWindow:
  9491                           	opt stack 19
  9492                           
  9493                           ;incstack = 0
  9494                           ;setAddrWindow@x0 stored from wreg
  9495  002132  6E15               	movwf	setAddrWindow@x0,c
  9496                           
  9497                           ;ST7735_TFT.c: 427: write_command(0x2A);
  9498  002134  0E2A               	movlw	42
  9499  002136  EC0B  F013         	call	_write_command
  9500                           
  9501                           ;ST7735_TFT.c: 428: write_data(0);
  9502  00213A  0E00               	movlw	0
  9503  00213C  EC03  F013         	call	_write_data
  9504                           
  9505                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  9506  002140  5015               	movf	setAddrWindow@x0,w,c
  9507  002142  2457               	addwf	_colstart,w,c
  9508  002144  EC03  F013         	call	_write_data
  9509                           
  9510                           ;ST7735_TFT.c: 430: write_data(0);
  9511  002148  0E00               	movlw	0
  9512  00214A  EC03  F013         	call	_write_data
  9513                           
  9514                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  9515  00214E  5013               	movf	setAddrWindow@x1,w,c
  9516  002150  2457               	addwf	_colstart,w,c
  9517  002152  EC03  F013         	call	_write_data
  9518                           
  9519                           ;ST7735_TFT.c: 432: write_command(0x2B);
  9520  002156  0E2B               	movlw	43
  9521  002158  EC0B  F013         	call	_write_command
  9522                           
  9523                           ;ST7735_TFT.c: 433: write_data(0);
  9524  00215C  0E00               	movlw	0
  9525  00215E  EC03  F013         	call	_write_data
  9526                           
  9527                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  9528  002162  5012               	movf	setAddrWindow@y0,w,c
  9529  002164  245A               	addwf	_rowstart,w,c
  9530  002166  EC03  F013         	call	_write_data
  9531                           
  9532                           ;ST7735_TFT.c: 435: write_data(0);
  9533  00216A  0E00               	movlw	0
  9534  00216C  EC03  F013         	call	_write_data
  9535                           
  9536                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  9537  002170  5014               	movf	setAddrWindow@y1,w,c
  9538  002172  245A               	addwf	_rowstart,w,c
  9539  002174  EC03  F013         	call	_write_data
  9540                           
  9541                           ;ST7735_TFT.c: 437: write_command(0x2C);
  9542  002178  0E2C               	movlw	44
  9543  00217A  EC0B  F013         	call	_write_command
  9544  00217E  0012               	return		;funcret
  9545  002180                     __end_of_setAddrWindow:
  9546                           	opt stack 0
  9547                           tblptru	equ	0xFF8
  9548                           tblptrh	equ	0xFF7
  9549                           tblptrl	equ	0xFF6
  9550                           tablat	equ	0xFF5
  9551                           prodh	equ	0xFF4
  9552                           prodl	equ	0xFF3
  9553                           intcon	equ	0xFF2
  9554                           intcon2	equ	0xFF1
  9555                           intcon3	equ	0xFF0
  9556                           postinc0	equ	0xFEE
  9557                           wreg	equ	0xFE8
  9558                           postdec1	equ	0xFE5
  9559                           fsr1l	equ	0xFE1
  9560                           indf2	equ	0xFDF
  9561                           postinc2	equ	0xFDE
  9562                           fsr2h	equ	0xFDA
  9563                           fsr2l	equ	0xFD9
  9564                           status	equ	0xFD8
  9565                           
  9566 ;; *************** function _write_data *****************
  9567 ;; Defined at:
  9568 ;;		line 242 in file "ST7735_TFT.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;  data_           1    wreg     unsigned char 
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;  data_           1   16[COMRAM] unsigned char 
  9573 ;; Return value:  Size  Location     Type
  9574 ;;		None               void
  9575 ;; Registers used:
  9576 ;;		wreg, status,2, cstack
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9586 ;;Total ram usage:        1 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    3
  9589 ;; This function calls:
  9590 ;;		_spiwrite
  9591 ;; This function is called by:
  9592 ;;		_Rcmd1
  9593 ;;		_Rcmd2red
  9594 ;;		_Rcmd3
  9595 ;;		_setAddrWindow
  9596 ;;		_drawPixel
  9597 ;;		_TFT_GreenTab_Initialize
  9598 ;;		_Bcmd
  9599 ;;		_setScrollDefinition
  9600 ;;		_Rcmd2green
  9601 ;;		_VerticalScroll
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           	psect	text47
  9606  002606                     __ptext47:
  9607                           	opt stack 0
  9608  002606                     _write_data:
  9609                           	opt stack 19
  9610                           
  9611                           ;incstack = 0
  9612                           ;write_data@data_ stored from wreg
  9613  002606  6E11               	movwf	write_data@data_,c
  9614                           
  9615                           ;ST7735_TFT.c: 244: PORTDbits.RD4 = 0;
  9616  002608  9883               	bcf	3971,4,c	;volatile
  9617                           
  9618                           ;ST7735_TFT.c: 245: PORTDbits.RD3 = 1;
  9619  00260A  8683               	bsf	3971,3,c	;volatile
  9620                           
  9621                           ;ST7735_TFT.c: 246: spiwrite(data_);
  9622  00260C  5011               	movf	write_data@data_,w,c
  9623  00260E  ECE7  F012         	call	_spiwrite
  9624                           
  9625                           ;ST7735_TFT.c: 247: PORTDbits.RD4 = 1;
  9626  002612  8883               	bsf	3971,4,c	;volatile
  9627  002614  0012               	return		;funcret
  9628  002616                     __end_of_write_data:
  9629                           	opt stack 0
  9630                           tblptru	equ	0xFF8
  9631                           tblptrh	equ	0xFF7
  9632                           tblptrl	equ	0xFF6
  9633                           tablat	equ	0xFF5
  9634                           prodh	equ	0xFF4
  9635                           prodl	equ	0xFF3
  9636                           intcon	equ	0xFF2
  9637                           intcon2	equ	0xFF1
  9638                           intcon3	equ	0xFF0
  9639                           postinc0	equ	0xFEE
  9640                           wreg	equ	0xFE8
  9641                           postdec1	equ	0xFE5
  9642                           fsr1l	equ	0xFE1
  9643                           indf2	equ	0xFDF
  9644                           postinc2	equ	0xFDE
  9645                           fsr2h	equ	0xFDA
  9646                           fsr2l	equ	0xFD9
  9647                           status	equ	0xFD8
  9648                           
  9649 ;; *************** function _write_command *****************
  9650 ;; Defined at:
  9651 ;;		line 231 in file "ST7735_TFT.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;  cmd_            1    wreg     unsigned char 
  9654 ;; Auto vars:     Size  Location     Type
  9655 ;;  cmd_            1   16[COMRAM] unsigned char 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;		None               void
  9658 ;; Registers used:
  9659 ;;		wreg, status,2, cstack
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9668 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9669 ;;Total ram usage:        1 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    3
  9672 ;; This function calls:
  9673 ;;		_spiwrite
  9674 ;; This function is called by:
  9675 ;;		_Rcmd1
  9676 ;;		_Rcmd2red
  9677 ;;		_Rcmd3
  9678 ;;		_setAddrWindow
  9679 ;;		_TFT_GreenTab_Initialize
  9680 ;;		_Bcmd
  9681 ;;		_setScrollDefinition
  9682 ;;		_Rcmd2green
  9683 ;;		_VerticalScroll
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           	psect	text48
  9688  002616                     __ptext48:
  9689                           	opt stack 0
  9690  002616                     _write_command:
  9691                           	opt stack 19
  9692                           
  9693                           ;incstack = 0
  9694                           ;write_command@cmd_ stored from wreg
  9695  002616  6E11               	movwf	write_command@cmd_,c
  9696                           
  9697                           ;ST7735_TFT.c: 233: PORTDbits.RD4 = 0;
  9698  002618  9883               	bcf	3971,4,c	;volatile
  9699                           
  9700                           ;ST7735_TFT.c: 235: PORTDbits.RD3 = 0;
  9701  00261A  9683               	bcf	3971,3,c	;volatile
  9702                           
  9703                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  9704  00261C  5011               	movf	write_command@cmd_,w,c
  9705  00261E  ECE7  F012         	call	_spiwrite
  9706                           
  9707                           ;ST7735_TFT.c: 238: PORTDbits.RD4 = 1;
  9708  002622  8883               	bsf	3971,4,c	;volatile
  9709  002624  0012               	return		;funcret
  9710  002626                     __end_of_write_command:
  9711                           	opt stack 0
  9712                           tblptru	equ	0xFF8
  9713                           tblptrh	equ	0xFF7
  9714                           tblptrl	equ	0xFF6
  9715                           tablat	equ	0xFF5
  9716                           prodh	equ	0xFF4
  9717                           prodl	equ	0xFF3
  9718                           intcon	equ	0xFF2
  9719                           intcon2	equ	0xFF1
  9720                           intcon3	equ	0xFF0
  9721                           postinc0	equ	0xFEE
  9722                           wreg	equ	0xFE8
  9723                           postdec1	equ	0xFE5
  9724                           fsr1l	equ	0xFE1
  9725                           indf2	equ	0xFDF
  9726                           postinc2	equ	0xFDE
  9727                           fsr2h	equ	0xFDA
  9728                           fsr2l	equ	0xFD9
  9729                           status	equ	0xFD8
  9730                           
  9731 ;; *************** function _spiwrite *****************
  9732 ;; Defined at:
  9733 ;;		line 222 in file "ST7735_TFT.c"
  9734 ;; Parameters:    Size  Location     Type
  9735 ;;  spidata         1    wreg     unsigned char 
  9736 ;; Auto vars:     Size  Location     Type
  9737 ;;  spidata         1   15[COMRAM] unsigned char 
  9738 ;;  x               1   14[COMRAM] unsigned char 
  9739 ;; Return value:  Size  Location     Type
  9740 ;;		None               void
  9741 ;; Registers used:
  9742 ;;		wreg
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9749 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9751 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9752 ;;Total ram usage:        2 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    2
  9755 ;; This function calls:
  9756 ;;		Nothing
  9757 ;; This function is called by:
  9758 ;;		_write_command
  9759 ;;		_write_data
  9760 ;;		_drawFastVLine
  9761 ;;		_fillRectangle
  9762 ;;		_drawFastHLine
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           	psect	text49
  9767  0025CE                     __ptext49:
  9768                           	opt stack 0
  9769  0025CE                     _spiwrite:
  9770                           	opt stack 21
  9771                           
  9772                           ;incstack = 0
  9773                           ;spiwrite@spidata stored from wreg
  9774  0025CE  6E10               	movwf	spiwrite@spidata,c
  9775                           
  9776                           ;ST7735_TFT.c: 224: char x;
  9777                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  9778  0025D0  969E               	bcf	3998,3,c	;volatile
  9779                           
  9780                           ;ST7735_TFT.c: 226: x = SSPBUF;
  9781  0025D2  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  9782                           
  9783                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  9784  0025D6  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9785                           
  9786                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  9787  0025DA  D000               	goto	l135
  9788  0025DC                     l135:
  9789  0025DC  A0C7               	btfss	4039,0,c	;volatile
  9790  0025DE  D7FE               	goto	l135
  9791  0025E0  0012               	return		;funcret
  9792  0025E2                     __end_of_spiwrite:
  9793                           	opt stack 0
  9794                           tblptru	equ	0xFF8
  9795                           tblptrh	equ	0xFF7
  9796                           tblptrl	equ	0xFF6
  9797                           tablat	equ	0xFF5
  9798                           prodh	equ	0xFF4
  9799                           prodl	equ	0xFF3
  9800                           intcon	equ	0xFF2
  9801                           intcon2	equ	0xFF1
  9802                           intcon3	equ	0xFF0
  9803                           postinc0	equ	0xFEE
  9804                           wreg	equ	0xFE8
  9805                           postdec1	equ	0xFE5
  9806                           fsr1l	equ	0xFE1
  9807                           indf2	equ	0xFDF
  9808                           postinc2	equ	0xFDE
  9809                           fsr2h	equ	0xFDA
  9810                           fsr2l	equ	0xFD9
  9811                           status	equ	0xFD8
  9812                           
  9813 ;; *************** function ___wmul *****************
  9814 ;; Defined at:
  9815 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;  multiplier      2   14[COMRAM] unsigned int 
  9818 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;  product         2   18[COMRAM] unsigned int 
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  2   14[COMRAM] unsigned int 
  9823 ;; Registers used:
  9824 ;;		wreg, status,2, status,0, prodl, prodh
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9830 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;Total ram usage:        6 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; Hardware stack levels required when called:    2
  9837 ;; This function calls:
  9838 ;;		Nothing
  9839 ;; This function is called by:
  9840 ;;		_delay_ms
  9841 ;;		_drawChar
  9842 ;;		_main
  9843 ;;		_update_LCD_misc
  9844 ;; This function uses a non-reentrant model
  9845 ;;
  9846                           
  9847                           	psect	text50
  9848  00249E                     __ptext50:
  9849                           	opt stack 0
  9850  00249E                     ___wmul:
  9851                           	opt stack 28
  9852                           
  9853                           ;incstack = 0
  9854  00249E  500F               	movf	___wmul@multiplier,w,c
  9855  0024A0  0211               	mulwf	___wmul@multiplicand,c
  9856  0024A2  CFF3 F013          	movff	prodl,___wmul@product
  9857  0024A6  CFF4 F014          	movff	prodh,___wmul@product+1
  9858  0024AA  500F               	movf	___wmul@multiplier,w,c
  9859  0024AC  0212               	mulwf	___wmul@multiplicand+1,c
  9860  0024AE  50F3               	movf	prodl,w,c
  9861  0024B0  2614               	addwf	___wmul@product+1,f,c
  9862  0024B2  5010               	movf	___wmul@multiplier+1,w,c
  9863  0024B4  0211               	mulwf	___wmul@multiplicand,c
  9864  0024B6  50F3               	movf	prodl,w,c
  9865  0024B8  2614               	addwf	___wmul@product+1,f,c
  9866  0024BA  C013  F00F         	movff	___wmul@product,?___wmul
  9867  0024BE  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9868  0024C2  D000               	goto	l591
  9869  0024C4                     l591:
  9870  0024C4  0012               	return		;funcret
  9871  0024C6                     __end_of___wmul:
  9872                           	opt stack 0
  9873                           tblptru	equ	0xFF8
  9874                           tblptrh	equ	0xFF7
  9875                           tblptrl	equ	0xFF6
  9876                           tablat	equ	0xFF5
  9877                           prodh	equ	0xFF4
  9878                           prodl	equ	0xFF3
  9879                           intcon	equ	0xFF2
  9880                           intcon2	equ	0xFF1
  9881                           intcon3	equ	0xFF0
  9882                           postinc0	equ	0xFEE
  9883                           wreg	equ	0xFE8
  9884                           postdec1	equ	0xFE5
  9885                           fsr1l	equ	0xFE1
  9886                           indf2	equ	0xFDF
  9887                           postinc2	equ	0xFDE
  9888                           fsr2h	equ	0xFDA
  9889                           fsr2l	equ	0xFD9
  9890                           status	equ	0xFD8
  9891                           
  9892 ;; *************** function ___awmod *****************
  9893 ;; Defined at:
  9894 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  9895 ;; Parameters:    Size  Location     Type
  9896 ;;  dividend        2   14[COMRAM] int 
  9897 ;;  divisor         2   16[COMRAM] int 
  9898 ;; Auto vars:     Size  Location     Type
  9899 ;;  sign            1   19[COMRAM] unsigned char 
  9900 ;;  counter         1   18[COMRAM] unsigned char 
  9901 ;; Return value:  Size  Location     Type
  9902 ;;                  2   14[COMRAM] int 
  9903 ;; Registers used:
  9904 ;;		wreg, status,2, status,0
  9905 ;; Tracked objects:
  9906 ;;		On entry : 0/0
  9907 ;;		On exit  : 0/0
  9908 ;;		Unchanged: 0/0
  9909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9910 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9913 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9914 ;;Total ram usage:        6 bytes
  9915 ;; Hardware stack levels used:    1
  9916 ;; Hardware stack levels required when called:    2
  9917 ;; This function calls:
  9918 ;;		Nothing
  9919 ;; This function is called by:
  9920 ;;		_update_LCD_count
  9921 ;;		_update_LCD_PED_Count
  9922 ;; This function uses a non-reentrant model
  9923 ;;
  9924                           
  9925                           	psect	text51
  9926  001E58                     __ptext51:
  9927                           	opt stack 0
  9928  001E58                     ___awmod:
  9929                           	opt stack 25
  9930                           
  9931                           ;incstack = 0
  9932  001E58  0E00               	movlw	0
  9933  001E5A  6E14               	movwf	___awmod@sign,c
  9934  001E5C  AE10               	btfss	___awmod@dividend+1,7,c
  9935  001E5E  D007               	goto	l4688
  9936  001E60  6C0F               	negf	___awmod@dividend,c
  9937  001E62  1E10               	comf	___awmod@dividend+1,f,c
  9938  001E64  B0D8               	btfsc	status,0,c
  9939  001E66  2A10               	incf	___awmod@dividend+1,f,c
  9940  001E68  0E01               	movlw	1
  9941  001E6A  6E14               	movwf	___awmod@sign,c
  9942  001E6C  D000               	goto	l4688
  9943  001E6E                     l4688:
  9944  001E6E  AE12               	btfss	___awmod@divisor+1,7,c
  9945  001E70  D005               	goto	l4692
  9946  001E72  6C11               	negf	___awmod@divisor,c
  9947  001E74  1E12               	comf	___awmod@divisor+1,f,c
  9948  001E76  B0D8               	btfsc	status,0,c
  9949  001E78  2A12               	incf	___awmod@divisor+1,f,c
  9950  001E7A  D000               	goto	l4692
  9951  001E7C                     l4692:
  9952  001E7C  5011               	movf	___awmod@divisor,w,c
  9953  001E7E  1012               	iorwf	___awmod@divisor+1,w,c
  9954  001E80  B4D8               	btfsc	status,2,c
  9955  001E82  D01D               	goto	l4708
  9956  001E84  0E01               	movlw	1
  9957  001E86  6E13               	movwf	___awmod@counter,c
  9958  001E88  D005               	goto	l4698
  9959  001E8A                     l4696:
  9960  001E8A  90D8               	bcf	status,0,c
  9961  001E8C  3611               	rlcf	___awmod@divisor,f,c
  9962  001E8E  3612               	rlcf	___awmod@divisor+1,f,c
  9963  001E90  2A13               	incf	___awmod@counter,f,c
  9964  001E92  D000               	goto	l4698
  9965  001E94                     l4698:
  9966  001E94  BE12               	btfsc	___awmod@divisor+1,7,c
  9967  001E96  D002               	goto	l4700
  9968  001E98  D7F8               	goto	l4696
  9969  001E9A  D000               	goto	l4700
  9970  001E9C                     l4700:
  9971  001E9C  5011               	movf	___awmod@divisor,w,c
  9972  001E9E  5C0F               	subwf	___awmod@dividend,w,c
  9973  001EA0  5012               	movf	___awmod@divisor+1,w,c
  9974  001EA2  5810               	subwfb	___awmod@dividend+1,w,c
  9975  001EA4  A0D8               	btfss	status,0,c
  9976  001EA6  D005               	goto	l4704
  9977  001EA8  5011               	movf	___awmod@divisor,w,c
  9978  001EAA  5E0F               	subwf	___awmod@dividend,f,c
  9979  001EAC  5012               	movf	___awmod@divisor+1,w,c
  9980  001EAE  5A10               	subwfb	___awmod@dividend+1,f,c
  9981  001EB0  D000               	goto	l4704
  9982  001EB2                     l4704:
  9983  001EB2  90D8               	bcf	status,0,c
  9984  001EB4  3212               	rrcf	___awmod@divisor+1,f,c
  9985  001EB6  3211               	rrcf	___awmod@divisor,f,c
  9986  001EB8  2E13               	decfsz	___awmod@counter,f,c
  9987  001EBA  D7F0               	goto	l4700
  9988  001EBC  D000               	goto	l4708
  9989  001EBE                     l4708:
  9990  001EBE  5014               	movf	___awmod@sign,w,c
  9991  001EC0  B4D8               	btfsc	status,2,c
  9992  001EC2  D005               	goto	l4712
  9993  001EC4  6C0F               	negf	___awmod@dividend,c
  9994  001EC6  1E10               	comf	___awmod@dividend+1,f,c
  9995  001EC8  B0D8               	btfsc	status,0,c
  9996  001ECA  2A10               	incf	___awmod@dividend+1,f,c
  9997  001ECC  D000               	goto	l4712
  9998  001ECE                     l4712:
  9999  001ECE  C00F  F00F         	movff	___awmod@dividend,?___awmod
 10000  001ED2  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 10001  001ED6  D000               	goto	l797
 10002  001ED8                     l797:
 10003  001ED8  0012               	return		;funcret
 10004  001EDA                     __end_of___awmod:
 10005                           	opt stack 0
 10006                           tblptru	equ	0xFF8
 10007                           tblptrh	equ	0xFF7
 10008                           tblptrl	equ	0xFF6
 10009                           tablat	equ	0xFF5
 10010                           prodh	equ	0xFF4
 10011                           prodl	equ	0xFF3
 10012                           intcon	equ	0xFF2
 10013                           intcon2	equ	0xFF1
 10014                           intcon3	equ	0xFF0
 10015                           postinc0	equ	0xFEE
 10016                           wreg	equ	0xFE8
 10017                           postdec1	equ	0xFE5
 10018                           fsr1l	equ	0xFE1
 10019                           indf2	equ	0xFDF
 10020                           postinc2	equ	0xFDE
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025 ;; *************** function ___awdiv *****************
 10026 ;; Defined at:
 10027 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;  dividend        2   14[COMRAM] int 
 10030 ;;  divisor         2   16[COMRAM] int 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  quotient        2   20[COMRAM] int 
 10033 ;;  sign            1   19[COMRAM] unsigned char 
 10034 ;;  counter         1   18[COMRAM] unsigned char 
 10035 ;; Return value:  Size  Location     Type
 10036 ;;                  2   14[COMRAM] int 
 10037 ;; Registers used:
 10038 ;;		wreg, status,2, status,0
 10039 ;; Tracked objects:
 10040 ;;		On entry : 0/0
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10044 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10045 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10047 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10048 ;;Total ram usage:        8 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; Hardware stack levels required when called:    2
 10051 ;; This function calls:
 10052 ;;		Nothing
 10053 ;; This function is called by:
 10054 ;;		_update_LCD_count
 10055 ;;		_update_LCD_PED_Count
 10056 ;; This function uses a non-reentrant model
 10057 ;;
 10058                           
 10059                           	psect	text52
 10060  001BAA                     __ptext52:
 10061                           	opt stack 0
 10062  001BAA                     ___awdiv:
 10063                           	opt stack 25
 10064                           
 10065                           ;incstack = 0
 10066  001BAA  0E00               	movlw	0
 10067  001BAC  6E14               	movwf	___awdiv@sign,c
 10068  001BAE  AE12               	btfss	___awdiv@divisor+1,7,c
 10069  001BB0  D007               	goto	l4644
 10070  001BB2  6C11               	negf	___awdiv@divisor,c
 10071  001BB4  1E12               	comf	___awdiv@divisor+1,f,c
 10072  001BB6  B0D8               	btfsc	status,0,c
 10073  001BB8  2A12               	incf	___awdiv@divisor+1,f,c
 10074  001BBA  0E01               	movlw	1
 10075  001BBC  6E14               	movwf	___awdiv@sign,c
 10076  001BBE  D000               	goto	l4644
 10077  001BC0                     l4644:
 10078  001BC0  AE10               	btfss	___awdiv@dividend+1,7,c
 10079  001BC2  D007               	goto	l4650
 10080  001BC4  6C0F               	negf	___awdiv@dividend,c
 10081  001BC6  1E10               	comf	___awdiv@dividend+1,f,c
 10082  001BC8  B0D8               	btfsc	status,0,c
 10083  001BCA  2A10               	incf	___awdiv@dividend+1,f,c
 10084  001BCC  0E01               	movlw	1
 10085  001BCE  1A14               	xorwf	___awdiv@sign,f,c
 10086  001BD0  D000               	goto	l4650
 10087  001BD2                     l4650:
 10088  001BD2  0E00               	movlw	0
 10089  001BD4  6E16               	movwf	___awdiv@quotient+1,c
 10090  001BD6  0E00               	movlw	0
 10091  001BD8  6E15               	movwf	___awdiv@quotient,c
 10092  001BDA  5011               	movf	___awdiv@divisor,w,c
 10093  001BDC  1012               	iorwf	___awdiv@divisor+1,w,c
 10094  001BDE  B4D8               	btfsc	status,2,c
 10095  001BE0  D021               	goto	l4672
 10096  001BE2  0E01               	movlw	1
 10097  001BE4  6E13               	movwf	___awdiv@counter,c
 10098  001BE6  D005               	goto	l4658
 10099  001BE8                     l4656:
 10100  001BE8  90D8               	bcf	status,0,c
 10101  001BEA  3611               	rlcf	___awdiv@divisor,f,c
 10102  001BEC  3612               	rlcf	___awdiv@divisor+1,f,c
 10103  001BEE  2A13               	incf	___awdiv@counter,f,c
 10104  001BF0  D000               	goto	l4658
 10105  001BF2                     l4658:
 10106  001BF2  BE12               	btfsc	___awdiv@divisor+1,7,c
 10107  001BF4  D002               	goto	l4660
 10108  001BF6  D7F8               	goto	l4656
 10109  001BF8  D000               	goto	l4660
 10110  001BFA                     l4660:
 10111  001BFA  90D8               	bcf	status,0,c
 10112  001BFC  3615               	rlcf	___awdiv@quotient,f,c
 10113  001BFE  3616               	rlcf	___awdiv@quotient+1,f,c
 10114  001C00  5011               	movf	___awdiv@divisor,w,c
 10115  001C02  5C0F               	subwf	___awdiv@dividend,w,c
 10116  001C04  5012               	movf	___awdiv@divisor+1,w,c
 10117  001C06  5810               	subwfb	___awdiv@dividend+1,w,c
 10118  001C08  A0D8               	btfss	status,0,c
 10119  001C0A  D006               	goto	l4668
 10120  001C0C  5011               	movf	___awdiv@divisor,w,c
 10121  001C0E  5E0F               	subwf	___awdiv@dividend,f,c
 10122  001C10  5012               	movf	___awdiv@divisor+1,w,c
 10123  001C12  5A10               	subwfb	___awdiv@dividend+1,f,c
 10124  001C14  8015               	bsf	___awdiv@quotient,0,c
 10125  001C16  D000               	goto	l4668
 10126  001C18                     l4668:
 10127  001C18  90D8               	bcf	status,0,c
 10128  001C1A  3212               	rrcf	___awdiv@divisor+1,f,c
 10129  001C1C  3211               	rrcf	___awdiv@divisor,f,c
 10130  001C1E  2E13               	decfsz	___awdiv@counter,f,c
 10131  001C20  D7EC               	goto	l4660
 10132  001C22  D000               	goto	l4672
 10133  001C24                     l4672:
 10134  001C24  5014               	movf	___awdiv@sign,w,c
 10135  001C26  B4D8               	btfsc	status,2,c
 10136  001C28  D005               	goto	l4676
 10137  001C2A  6C15               	negf	___awdiv@quotient,c
 10138  001C2C  1E16               	comf	___awdiv@quotient+1,f,c
 10139  001C2E  B0D8               	btfsc	status,0,c
 10140  001C30  2A16               	incf	___awdiv@quotient+1,f,c
 10141  001C32  D000               	goto	l4676
 10142  001C34                     l4676:
 10143  001C34  C015  F00F         	movff	___awdiv@quotient,?___awdiv
 10144  001C38  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
 10145  001C3C  D000               	goto	l784
 10146  001C3E                     l784:
 10147  001C3E  0012               	return		;funcret
 10148  001C40                     __end_of___awdiv:
 10149                           	opt stack 0
 10150                           tblptru	equ	0xFF8
 10151                           tblptrh	equ	0xFF7
 10152                           tblptrl	equ	0xFF6
 10153                           tablat	equ	0xFF5
 10154                           prodh	equ	0xFF4
 10155                           prodl	equ	0xFF3
 10156                           intcon	equ	0xFF2
 10157                           intcon2	equ	0xFF1
 10158                           intcon3	equ	0xFF0
 10159                           postinc0	equ	0xFEE
 10160                           wreg	equ	0xFE8
 10161                           postdec1	equ	0xFE5
 10162                           fsr1l	equ	0xFE1
 10163                           indf2	equ	0xFDF
 10164                           postinc2	equ	0xFDE
 10165                           fsr2h	equ	0xFDA
 10166                           fsr2l	equ	0xFD9
 10167                           status	equ	0xFD8
 10168                           
 10169 ;; *************** function _Wait_One_Second_With_Beep *****************
 10170 ;; Defined at:
 10171 ;;		line 680 in file "Lab8_redo.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;		None
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;		None
 10176 ;; Return value:  Size  Location     Type
 10177 ;;		None               void
 10178 ;; Registers used:
 10179 ;;		wreg, status,2, cstack
 10180 ;; Tracked objects:
 10181 ;;		On entry : 0/0
 10182 ;;		On exit  : 0/0
 10183 ;;		Unchanged: 0/0
 10184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10189 ;;Total ram usage:        0 bytes
 10190 ;; Hardware stack levels used:    1
 10191 ;; Hardware stack levels required when called:    3
 10192 ;; This function calls:
 10193 ;;		_Activate_Buzzer
 10194 ;;		_Deactivate_Buzzer
 10195 ;;		_Wait_Half_Second
 10196 ;; This function is called by:
 10197 ;;		_PED_Control
 10198 ;; This function uses a non-reentrant model
 10199 ;;
 10200                           
 10201                           	psect	text53
 10202  002590                     __ptext53:
 10203                           	opt stack 0
 10204  002590                     _Wait_One_Second_With_Beep:
 10205                           	opt stack 25
 10206                           
 10207                           ;Lab8_redo.c: 682: PORTDbits.RD7 = 1;
 10208                           
 10209                           ;incstack = 0
 10210  002590  8E83               	bsf	3971,7,c	;volatile
 10211                           
 10212                           ;Lab8_redo.c: 683: Activate_Buzzer();
 10213  002592  ECFA  F012         	call	_Activate_Buzzer	;wreg free
 10214                           
 10215                           ;Lab8_redo.c: 684: Wait_Half_Second();
 10216  002596  EC97  F012         	call	_Wait_Half_Second	;wreg free
 10217                           
 10218                           ;Lab8_redo.c: 685: PORTDbits.RD7 = 0;
 10219  00259A  9E83               	bcf	3971,7,c	;volatile
 10220                           
 10221                           ;Lab8_redo.c: 686: Deactivate_Buzzer();
 10222  00259C  EC20  F013         	call	_Deactivate_Buzzer	;wreg free
 10223                           
 10224                           ;Lab8_redo.c: 687: Wait_Half_Second();
 10225  0025A0  EC97  F012         	call	_Wait_Half_Second	;wreg free
 10226  0025A4  0012               	return		;funcret
 10227  0025A6                     __end_of_Wait_One_Second_With_Beep:
 10228                           	opt stack 0
 10229                           tblptru	equ	0xFF8
 10230                           tblptrh	equ	0xFF7
 10231                           tblptrl	equ	0xFF6
 10232                           tablat	equ	0xFF5
 10233                           prodh	equ	0xFF4
 10234                           prodl	equ	0xFF3
 10235                           intcon	equ	0xFF2
 10236                           intcon2	equ	0xFF1
 10237                           intcon3	equ	0xFF0
 10238                           postinc0	equ	0xFEE
 10239                           wreg	equ	0xFE8
 10240                           postdec1	equ	0xFE5
 10241                           fsr1l	equ	0xFE1
 10242                           indf2	equ	0xFDF
 10243                           postinc2	equ	0xFDE
 10244                           fsr2h	equ	0xFDA
 10245                           fsr2l	equ	0xFD9
 10246                           status	equ	0xFD8
 10247                           
 10248 ;; *************** function _Wait_Half_Second *****************
 10249 ;; Defined at:
 10250 ;;		line 690 in file "Lab8_redo.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;		None
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;		None
 10255 ;; Return value:  Size  Location     Type
 10256 ;;		None               void
 10257 ;; Registers used:
 10258 ;;		wreg, status,2
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/0
 10261 ;;		On exit  : 0/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;Total ram usage:        0 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; Hardware stack levels required when called:    2
 10271 ;; This function calls:
 10272 ;;		Nothing
 10273 ;; This function is called by:
 10274 ;;		_Wait_One_Second
 10275 ;;		_Wait_One_Second_With_Beep
 10276 ;;		_Old_Wait_One_Second
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           	psect	text54
 10281  00252E                     __ptext54:
 10282                           	opt stack 0
 10283  00252E                     _Wait_Half_Second:
 10284                           	opt stack 25
 10285                           
 10286                           ;Lab8_redo.c: 692: T0CON = 0x03;
 10287                           
 10288                           ;incstack = 0
 10289  00252E  0E03               	movlw	3
 10290  002530  6ED5               	movwf	4053,c	;volatile
 10291                           
 10292                           ;Lab8_redo.c: 693: TMR0L = 0xDB;
 10293  002532  0EDB               	movlw	219
 10294  002534  6ED6               	movwf	4054,c	;volatile
 10295                           
 10296                           ;Lab8_redo.c: 694: TMR0H = 0x0B;
 10297  002536  0E0B               	movlw	11
 10298  002538  6ED7               	movwf	4055,c	;volatile
 10299                           
 10300                           ;Lab8_redo.c: 695: INTCONbits.TMR0IF = 0;
 10301  00253A  94F2               	bcf	intcon,2,c	;volatile
 10302                           
 10303                           ;Lab8_redo.c: 696: T0CONbits.TMR0ON = 1;
 10304  00253C  8ED5               	bsf	4053,7,c	;volatile
 10305                           
 10306                           ;Lab8_redo.c: 697: while (INTCONbits.TMR0IF == 0);
 10307  00253E  D000               	goto	l499
 10308  002540                     l499:
 10309  002540  A4F2               	btfss	intcon,2,c	;volatile
 10310  002542  D7FE               	goto	l499
 10311                           
 10312                           ;Lab8_redo.c: 698: T0CONbits.TMR0ON = 0;
 10313  002544  9ED5               	bcf	4053,7,c	;volatile
 10314  002546  0012               	return		;funcret
 10315  002548                     __end_of_Wait_Half_Second:
 10316                           	opt stack 0
 10317                           tblptru	equ	0xFF8
 10318                           tblptrh	equ	0xFF7
 10319                           tblptrl	equ	0xFF6
 10320                           tablat	equ	0xFF5
 10321                           prodh	equ	0xFF4
 10322                           prodl	equ	0xFF3
 10323                           intcon	equ	0xFF2
 10324                           intcon2	equ	0xFF1
 10325                           intcon3	equ	0xFF0
 10326                           postinc0	equ	0xFEE
 10327                           wreg	equ	0xFE8
 10328                           postdec1	equ	0xFE5
 10329                           fsr1l	equ	0xFE1
 10330                           indf2	equ	0xFDF
 10331                           postinc2	equ	0xFDE
 10332                           fsr2h	equ	0xFDA
 10333                           fsr2l	equ	0xFD9
 10334                           status	equ	0xFD8
 10335                           
 10336 ;; *************** function _Deactivate_Buzzer *****************
 10337 ;; Defined at:
 10338 ;;		line 495 in file "Lab8_redo.c"
 10339 ;; Parameters:    Size  Location     Type
 10340 ;;		None
 10341 ;; Auto vars:     Size  Location     Type
 10342 ;;		None
 10343 ;; Return value:  Size  Location     Type
 10344 ;;		None               void
 10345 ;; Registers used:
 10346 ;;		wreg, status,2
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10356 ;;Total ram usage:        0 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    2
 10359 ;; This function calls:
 10360 ;;		Nothing
 10361 ;; This function is called by:
 10362 ;;		_Wait_One_Second_With_Beep
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           	psect	text55
 10367  002640                     __ptext55:
 10368                           	opt stack 0
 10369  002640                     _Deactivate_Buzzer:
 10370                           	opt stack 25
 10371                           
 10372                           ;Lab8_redo.c: 497: CCP2CON = 0x0;
 10373                           
 10374                           ;incstack = 0
 10375  002640  0E00               	movlw	0
 10376  002642  6EBA               	movwf	4026,c	;volatile
 10377                           
 10378                           ;Lab8_redo.c: 498: PORTBbits.RB3 = 0;
 10379  002644  9681               	bcf	3969,3,c	;volatile
 10380  002646  0012               	return		;funcret
 10381  002648                     __end_of_Deactivate_Buzzer:
 10382                           	opt stack 0
 10383                           tblptru	equ	0xFF8
 10384                           tblptrh	equ	0xFF7
 10385                           tblptrl	equ	0xFF6
 10386                           tablat	equ	0xFF5
 10387                           prodh	equ	0xFF4
 10388                           prodl	equ	0xFF3
 10389                           intcon	equ	0xFF2
 10390                           intcon2	equ	0xFF1
 10391                           intcon3	equ	0xFF0
 10392                           postinc0	equ	0xFEE
 10393                           wreg	equ	0xFE8
 10394                           postdec1	equ	0xFE5
 10395                           fsr1l	equ	0xFE1
 10396                           indf2	equ	0xFDF
 10397                           postinc2	equ	0xFDE
 10398                           fsr2h	equ	0xFDA
 10399                           fsr2l	equ	0xFD9
 10400                           status	equ	0xFD8
 10401                           
 10402 ;; *************** function _Activate_Buzzer *****************
 10403 ;; Defined at:
 10404 ;;		line 487 in file "Lab8_redo.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;		None
 10407 ;; Auto vars:     Size  Location     Type
 10408 ;;		None
 10409 ;; Return value:  Size  Location     Type
 10410 ;;		None               void
 10411 ;; Registers used:
 10412 ;;		wreg, status,2
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10422 ;;Total ram usage:        0 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    2
 10425 ;; This function calls:
 10426 ;;		Nothing
 10427 ;; This function is called by:
 10428 ;;		_Wait_One_Second_With_Beep
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           	psect	text56
 10433  0025F4                     __ptext56:
 10434                           	opt stack 0
 10435  0025F4                     _Activate_Buzzer:
 10436                           	opt stack 25
 10437                           
 10438                           ;Lab8_redo.c: 489: PR2 = 0b11111001;
 10439                           
 10440                           ;incstack = 0
 10441  0025F4  0EF9               	movlw	249
 10442  0025F6  6ECB               	movwf	4043,c	;volatile
 10443                           
 10444                           ;Lab8_redo.c: 490: T2CON = 0b00000101;
 10445  0025F8  0E05               	movlw	5
 10446  0025FA  6ECA               	movwf	4042,c	;volatile
 10447                           
 10448                           ;Lab8_redo.c: 491: CCPR2L = 0b01001010;
 10449  0025FC  0E4A               	movlw	74
 10450  0025FE  6EBB               	movwf	4027,c	;volatile
 10451                           
 10452                           ;Lab8_redo.c: 492: CCP2CON = 0b00111100;
 10453  002600  0E3C               	movlw	60
 10454  002602  6EBA               	movwf	4026,c	;volatile
 10455  002604  0012               	return		;funcret
 10456  002606                     __end_of_Activate_Buzzer:
 10457                           	opt stack 0
 10458                           tblptru	equ	0xFF8
 10459                           tblptrh	equ	0xFF7
 10460                           tblptrl	equ	0xFF6
 10461                           tablat	equ	0xFF5
 10462                           prodh	equ	0xFF4
 10463                           prodl	equ	0xFF3
 10464                           intcon	equ	0xFF2
 10465                           intcon2	equ	0xFF1
 10466                           intcon3	equ	0xFF0
 10467                           postinc0	equ	0xFEE
 10468                           wreg	equ	0xFE8
 10469                           postdec1	equ	0xFE5
 10470                           fsr1l	equ	0xFE1
 10471                           indf2	equ	0xFDF
 10472                           postinc2	equ	0xFDE
 10473                           fsr2h	equ	0xFDA
 10474                           fsr2l	equ	0xFD9
 10475                           status	equ	0xFD8
 10476                           
 10477 ;; *************** function _chkisr *****************
 10478 ;; Defined at:
 10479 ;;		line 296 in file "Lab8_redo.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;		None
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;		None
 10484 ;; Return value:  Size  Location     Type
 10485 ;;		None               void
 10486 ;; Registers used:
 10487 ;;		wreg, status,2, status,0, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;Total ram usage:       14 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    1
 10500 ;; This function calls:
 10501 ;;		_INT0_ISR
 10502 ;;		_INT1_ISR
 10503 ;;		_INT2_ISR
 10504 ;; This function is called by:
 10505 ;;		Interrupt level 2
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	intcode
 10510  000008                     __pintcode:
 10511                           	opt stack 0
 10512  000008                     _chkisr:
 10513                           	opt stack 18
 10514                           
 10515                           ;incstack = 0
 10516  000008  CFFA F001          	movff	pclath,??_chkisr
 10517  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 10518  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 10519  000014  EDA8  F00E         	call	int_func,f	;refresh shadow registers
 10520                           pclatu	equ	0xFFB
 10521                           pclath	equ	0xFFA
 10522                           tblptru	equ	0xFF8
 10523                           tblptrh	equ	0xFF7
 10524                           tblptrl	equ	0xFF6
 10525                           tablat	equ	0xFF5
 10526                           prodh	equ	0xFF4
 10527                           prodl	equ	0xFF3
 10528                           intcon	equ	0xFF2
 10529                           intcon2	equ	0xFF1
 10530                           intcon3	equ	0xFF0
 10531                           postinc0	equ	0xFEE
 10532                           fsr0l	equ	0xFE9
 10533                           wreg	equ	0xFE8
 10534                           postdec1	equ	0xFE5
 10535                           fsr1l	equ	0xFE1
 10536                           indf2	equ	0xFDF
 10537                           postinc2	equ	0xFDE
 10538                           fsr2h	equ	0xFDA
 10539                           fsr2l	equ	0xFD9
 10540                           status	equ	0xFD8
 10541                           
 10542                           	psect	intcode_body
 10543  001D50                     __pintcode_body:
 10544                           	opt stack 18
 10545  001D50                     int_func:
 10546                           	opt stack 18
 10547  001D50  0006               	pop		; remove dummy address from shadow register refresh
 10548  001D52  CFEA F004          	movff	fsr0h,??_chkisr+3
 10549  001D56  CFE1 F005          	movff	fsr1l,??_chkisr+4
 10550  001D5A  CFE2 F006          	movff	fsr1h,??_chkisr+5
 10551  001D5E  CFD9 F007          	movff	fsr2l,??_chkisr+6
 10552  001D62  CFDA F008          	movff	fsr2h,??_chkisr+7
 10553  001D66  CFF3 F009          	movff	prodl,??_chkisr+8
 10554  001D6A  CFF4 F00A          	movff	prodh,??_chkisr+9
 10555  001D6E  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 10556  001D72  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 10557  001D76  CFF8 F00D          	movff	tblptru,??_chkisr+12
 10558  001D7A  CFF5 F00E          	movff	tablat,??_chkisr+13
 10559                           
 10560                           ;Lab8_redo.c: 298: if (INTCONbits.INT0IF == 1) INT0_ISR();
 10561  001D7E  A2F2               	btfss	intcon,1,c	;volatile
 10562  001D80  D003               	goto	i2l2672
 10563  001D82  ECB0  F012         	call	_INT0_ISR	;wreg free
 10564  001D86  D000               	goto	i2l2672
 10565  001D88                     i2l2672:
 10566                           
 10567                           ;Lab8_redo.c: 300: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 10568  001D88  A0F0               	btfss	intcon3,0,c	;volatile
 10569  001D8A  D003               	goto	i2l2676
 10570  001D8C  ECA4  F012         	call	_INT1_ISR	;wreg free
 10571  001D90  D000               	goto	i2l2676
 10572  001D92                     i2l2676:
 10573                           
 10574                           ;Lab8_redo.c: 301: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 10575  001D92  A2F0               	btfss	intcon3,1,c	;volatile
 10576  001D94  D003               	goto	i2l386
 10577  001D96  EC24  F013         	call	_INT2_ISR	;wreg free
 10578  001D9A  D000               	goto	i2l386
 10579  001D9C                     i2l386:
 10580  001D9C  C00E  FFF5         	movff	??_chkisr+13,tablat
 10581  001DA0  C00D  FFF8         	movff	??_chkisr+12,tblptru
 10582  001DA4  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 10583  001DA8  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 10584  001DAC  C00A  FFF4         	movff	??_chkisr+9,prodh
 10585  001DB0  C009  FFF3         	movff	??_chkisr+8,prodl
 10586  001DB4  C008  FFDA         	movff	??_chkisr+7,fsr2h
 10587  001DB8  C007  FFD9         	movff	??_chkisr+6,fsr2l
 10588  001DBC  C006  FFE2         	movff	??_chkisr+5,fsr1h
 10589  001DC0  C005  FFE1         	movff	??_chkisr+4,fsr1l
 10590  001DC4  C004  FFEA         	movff	??_chkisr+3,fsr0h
 10591  001DC8  C003  FFE9         	movff	??_chkisr+2,fsr0l
 10592  001DCC  C002  FFFB         	movff	??_chkisr+1,pclatu
 10593  001DD0  C001  FFFA         	movff	??_chkisr,pclath
 10594  001DD4  0011               	retfie		f
 10595  001DD6                     __end_of_chkisr:
 10596                           	opt stack 0
 10597                           pclatu	equ	0xFFB
 10598                           pclath	equ	0xFFA
 10599                           tblptru	equ	0xFF8
 10600                           tblptrh	equ	0xFF7
 10601                           tblptrl	equ	0xFF6
 10602                           tablat	equ	0xFF5
 10603                           prodh	equ	0xFF4
 10604                           prodl	equ	0xFF3
 10605                           intcon	equ	0xFF2
 10606                           intcon2	equ	0xFF1
 10607                           intcon3	equ	0xFF0
 10608                           postinc0	equ	0xFEE
 10609                           fsr0h	equ	0xFEA
 10610                           fsr0l	equ	0xFE9
 10611                           wreg	equ	0xFE8
 10612                           postdec1	equ	0xFE5
 10613                           fsr1h	equ	0xFE2
 10614                           fsr1l	equ	0xFE1
 10615                           indf2	equ	0xFDF
 10616                           postinc2	equ	0xFDE
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621 ;; *************** function _INT2_ISR *****************
 10622 ;; Defined at:
 10623 ;;		line 336 in file "Lab8_redo.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;		None
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;		None
 10628 ;; Return value:  Size  Location     Type
 10629 ;;		None               void
 10630 ;; Registers used:
 10631 ;;		wreg, status,2
 10632 ;; Tracked objects:
 10633 ;;		On entry : 0/0
 10634 ;;		On exit  : 0/0
 10635 ;;		Unchanged: 0/0
 10636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10641 ;;Total ram usage:        0 bytes
 10642 ;; Hardware stack levels used:    1
 10643 ;; This function calls:
 10644 ;;		Nothing
 10645 ;; This function is called by:
 10646 ;;		_chkisr
 10647 ;; This function uses a non-reentrant model
 10648 ;;
 10649                           
 10650                           	psect	text58
 10651  002648                     __ptext58:
 10652                           	opt stack 0
 10653  002648                     _INT2_ISR:
 10654                           	opt stack 18
 10655                           
 10656                           ;Lab8_redo.c: 338: INTCON3bits.INT2IF=0;
 10657                           
 10658                           ;incstack = 0
 10659  002648  92F0               	bcf	intcon3,1,c	;volatile
 10660                           
 10661                           ;Lab8_redo.c: 339: FLASHING_REQUEST = 1;
 10662  00264A  0E01               	movlw	1
 10663  00264C  6E4E               	movwf	_FLASHING_REQUEST,c
 10664  00264E  0012               	return		;funcret
 10665  002650                     __end_of_INT2_ISR:
 10666                           	opt stack 0
 10667                           pclatu	equ	0xFFB
 10668                           pclath	equ	0xFFA
 10669                           tblptru	equ	0xFF8
 10670                           tblptrh	equ	0xFF7
 10671                           tblptrl	equ	0xFF6
 10672                           tablat	equ	0xFF5
 10673                           prodh	equ	0xFF4
 10674                           prodl	equ	0xFF3
 10675                           intcon	equ	0xFF2
 10676                           intcon2	equ	0xFF1
 10677                           intcon3	equ	0xFF0
 10678                           postinc0	equ	0xFEE
 10679                           fsr0h	equ	0xFEA
 10680                           fsr0l	equ	0xFE9
 10681                           wreg	equ	0xFE8
 10682                           postdec1	equ	0xFE5
 10683                           fsr1h	equ	0xFE2
 10684                           fsr1l	equ	0xFE1
 10685                           indf2	equ	0xFDF
 10686                           postinc2	equ	0xFDE
 10687                           fsr2h	equ	0xFDA
 10688                           fsr2l	equ	0xFD9
 10689                           status	equ	0xFD8
 10690                           
 10691 ;; *************** function _INT1_ISR *****************
 10692 ;; Defined at:
 10693 ;;		line 323 in file "Lab8_redo.c"
 10694 ;; Parameters:    Size  Location     Type
 10695 ;;		None
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;		None
 10698 ;; Return value:  Size  Location     Type
 10699 ;;		None               void
 10700 ;; Registers used:
 10701 ;;		wreg, status,2, status,0
 10702 ;; Tracked objects:
 10703 ;;		On entry : 0/0
 10704 ;;		On exit  : 0/0
 10705 ;;		Unchanged: 0/0
 10706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10711 ;;Total ram usage:        0 bytes
 10712 ;; Hardware stack levels used:    1
 10713 ;; This function calls:
 10714 ;;		Nothing
 10715 ;; This function is called by:
 10716 ;;		_chkisr
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           	psect	text59
 10721  002548                     __ptext59:
 10722                           	opt stack 0
 10723  002548                     _INT1_ISR:
 10724                           	opt stack 18
 10725                           
 10726                           ;Lab8_redo.c: 325: if(MODE)
 10727                           
 10728                           ;incstack = 0
 10729  002548  5045               	movf	_MODE,w,c
 10730  00254A  1046               	iorwf	_MODE+1,w,c
 10731  00254C  B4D8               	btfsc	status,2,c
 10732  00254E  D003               	goto	i2l398
 10733                           
 10734                           ;Lab8_redo.c: 326: {
 10735                           ;Lab8_redo.c: 327: INTCON3bits.INT1IF=0;
 10736  002550  90F0               	bcf	intcon3,0,c	;volatile
 10737                           
 10738                           ;Lab8_redo.c: 328: EW_PED_SW = 1;
 10739  002552  0E01               	movlw	1
 10740  002554  D002               	goto	L18
 10741  002556                     i2l398:
 10742                           
 10743                           ;Lab8_redo.c: 330: else
 10744                           ;Lab8_redo.c: 331: {
 10745                           ;Lab8_redo.c: 332: INTCON3bits.INT1IF=0;
 10746  002556  90F0               	bcf	intcon3,0,c	;volatile
 10747                           
 10748                           ;Lab8_redo.c: 333: EW_PED_SW = 0;
 10749  002558  0E00               	movlw	0
 10750  00255A                     L18:
 10751  00255A  6E4C               	movwf	_EW_PED_SW,c
 10752  00255C  D000               	goto	i2l400
 10753  00255E                     i2l400:
 10754  00255E  0012               	return		;funcret
 10755  002560                     __end_of_INT1_ISR:
 10756                           	opt stack 0
 10757                           pclatu	equ	0xFFB
 10758                           pclath	equ	0xFFA
 10759                           tblptru	equ	0xFF8
 10760                           tblptrh	equ	0xFF7
 10761                           tblptrl	equ	0xFF6
 10762                           tablat	equ	0xFF5
 10763                           prodh	equ	0xFF4
 10764                           prodl	equ	0xFF3
 10765                           intcon	equ	0xFF2
 10766                           intcon2	equ	0xFF1
 10767                           intcon3	equ	0xFF0
 10768                           postinc0	equ	0xFEE
 10769                           fsr0h	equ	0xFEA
 10770                           fsr0l	equ	0xFE9
 10771                           wreg	equ	0xFE8
 10772                           postdec1	equ	0xFE5
 10773                           fsr1h	equ	0xFE2
 10774                           fsr1l	equ	0xFE1
 10775                           indf2	equ	0xFDF
 10776                           postinc2	equ	0xFDE
 10777                           fsr2h	equ	0xFDA
 10778                           fsr2l	equ	0xFD9
 10779                           status	equ	0xFD8
 10780                           
 10781 ;; *************** function _INT0_ISR *****************
 10782 ;; Defined at:
 10783 ;;		line 307 in file "Lab8_redo.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;		None
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;		None
 10788 ;; Return value:  Size  Location     Type
 10789 ;;		None               void
 10790 ;; Registers used:
 10791 ;;		wreg, status,2, status,0
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;Total ram usage:        0 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; This function calls:
 10804 ;;		Nothing
 10805 ;; This function is called by:
 10806 ;;		_chkisr
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           	psect	text60
 10811  002560                     __ptext60:
 10812                           	opt stack 0
 10813  002560                     _INT0_ISR:
 10814                           	opt stack 18
 10815                           
 10816                           ;incstack = 0
 10817  002560  5045               	movf	_MODE,w,c
 10818  002562  1046               	iorwf	_MODE+1,w,c
 10819  002564  B4D8               	btfsc	status,2,c
 10820  002566  D003               	goto	i2l393
 10821                           
 10822                           ;Lab8_redo.c: 309: {
 10823                           ;Lab8_redo.c: 311: INTCONbits.INT0IF=0;
 10824  002568  92F2               	bcf	intcon,1,c	;volatile
 10825                           
 10826                           ;Lab8_redo.c: 312: NS_PED_SW = 1;
 10827  00256A  0E01               	movlw	1
 10828  00256C  D002               	goto	L19
 10829  00256E                     i2l393:
 10830                           
 10831                           ;Lab8_redo.c: 315: else
 10832                           ;Lab8_redo.c: 316: {
 10833                           ;Lab8_redo.c: 317: INTCONbits.INT0IF=0;
 10834  00256E  92F2               	bcf	intcon,1,c	;volatile
 10835                           
 10836                           ;Lab8_redo.c: 318: NS_PED_SW = 0;
 10837  002570  0E00               	movlw	0
 10838  002572                     L19:
 10839  002572  6E4F               	movwf	_NS_PED_SW,c
 10840  002574  D000               	goto	i2l395
 10841  002576                     i2l395:
 10842  002576  0012               	return		;funcret
 10843  002578                     __end_of_INT0_ISR:
 10844                           	opt stack 0
 10845                           pclatu	equ	0xFFB
 10846                           pclath	equ	0xFFA
 10847                           tblptru	equ	0xFF8
 10848                           tblptrh	equ	0xFF7
 10849                           tblptrl	equ	0xFF6
 10850                           tablat	equ	0xFF5
 10851                           prodh	equ	0xFF4
 10852                           prodl	equ	0xFF3
 10853                           intcon	equ	0xFF2
 10854                           intcon2	equ	0xFF1
 10855                           intcon3	equ	0xFF0
 10856                           postinc0	equ	0xFEE
 10857                           fsr0h	equ	0xFEA
 10858                           fsr0l	equ	0xFE9
 10859                           wreg	equ	0xFE8
 10860                           postdec1	equ	0xFE5
 10861                           fsr1h	equ	0xFE2
 10862                           fsr1l	equ	0xFE1
 10863                           indf2	equ	0xFDF
 10864                           postinc2	equ	0xFDE
 10865                           fsr2h	equ	0xFDA
 10866                           fsr2l	equ	0xFD9
 10867                           status	equ	0xFD8
 10868                           pclatu	equ	0xFFB
 10869                           pclath	equ	0xFFA
 10870                           tblptru	equ	0xFF8
 10871                           tblptrh	equ	0xFF7
 10872                           tblptrl	equ	0xFF6
 10873                           tablat	equ	0xFF5
 10874                           prodh	equ	0xFF4
 10875                           prodl	equ	0xFF3
 10876                           intcon	equ	0xFF2
 10877                           intcon2	equ	0xFF1
 10878                           intcon3	equ	0xFF0
 10879                           postinc0	equ	0xFEE
 10880                           fsr0h	equ	0xFEA
 10881                           fsr0l	equ	0xFE9
 10882                           wreg	equ	0xFE8
 10883                           postdec1	equ	0xFE5
 10884                           fsr1h	equ	0xFE2
 10885                           fsr1l	equ	0xFE1
 10886                           indf2	equ	0xFDF
 10887                           postinc2	equ	0xFDE
 10888                           fsr2h	equ	0xFDA
 10889                           fsr2l	equ	0xFD9
 10890                           status	equ	0xFD8
 10891                           
 10892                           	psect	rparam
 10893  0000                     pclatu	equ	0xFFB
 10894                           pclath	equ	0xFFA
 10895                           tblptru	equ	0xFF8
 10896                           tblptrh	equ	0xFF7
 10897                           tblptrl	equ	0xFF6
 10898                           tablat	equ	0xFF5
 10899                           prodh	equ	0xFF4
 10900                           prodl	equ	0xFF3
 10901                           intcon	equ	0xFF2
 10902                           intcon2	equ	0xFF1
 10903                           intcon3	equ	0xFF0
 10904                           postinc0	equ	0xFEE
 10905                           fsr0h	equ	0xFEA
 10906                           fsr0l	equ	0xFE9
 10907                           wreg	equ	0xFE8
 10908                           postdec1	equ	0xFE5
 10909                           fsr1h	equ	0xFE2
 10910                           fsr1l	equ	0xFE1
 10911                           indf2	equ	0xFDF
 10912                           postinc2	equ	0xFDE
 10913                           fsr2h	equ	0xFDA
 10914                           fsr2l	equ	0xFD9
 10915                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    475
    Data        35
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     113
    BANK0           128     14      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          244      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[10]), STR_7(CODE[7]), 
		 -> STR_6(CODE[12]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Initialize_Screen->_drawtext
    _Initialize_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _init_UART->_OpenUSART
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Wait_One_Second->_drawtext
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _Do_Flashing->_Wait_N_Seconds
    _Day_Mode->_PED_Control
    _Day_Mode->_Wait_N_Seconds
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  562806
                                             12 BANK0      2     2      0
                           _Day_Mode
                        _Do_Flashing
                            _Do_Init
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  186807
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   66298
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     375
                           _Init_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0   87239
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  215375
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   87239
                                             10 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28178
                                             64 COMRAM     1     0      1
                                              7 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   58931
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   31671
                                              7 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2718
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1929
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     1     0      1
                                              0 BANK0      2     2      0
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          4     3      1   28568
                                              8 BANK0      4     3      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28054
                                             64 COMRAM     1     0      1
                                              7 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25331
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10774
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     882
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1213
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1225
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Init
     _Init_ADC
     _init_UART
       _OpenUSART
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EF3      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           F4      0       0      33        0.0%
BANK14              F4      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      3F       5       49.2%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      71       1       89.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B0       6        0.0%
DATA                 0      0      B0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 14 19:43:22 2021

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 2590                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 00A6                                 l201 114E  
                               l210 10A4                                 l203 1028  
                               l125 20D8                                 l135 25DC  
                               l241 172C                                 l242 174E  
                               l421 24F0                                 l430 222A  
                               l238 1750                                 l431 2230  
                               l239 16BC                                 l432 2234  
                               l440 21E8                                 l424 2510  
                               l185 1D4E                                 l249 0D84  
                               l433 2258                                 l441 21EC  
                               l530 1820                                 l514 0AA0  
                               l450 22C4                                 l442 2210  
                               l179 2472                                 l267 11BE  
                               l451 22E8                                 l523 0FF8  
                               l283 1CC6                                 l460 22A0  
                               l428 2226                                 l437 21DE  
                               l446 22B6                                 l455 226E  
                               l439 21E2                                 l448 22BA  
                               l480 18AE                                 l552 23B6  
                               l449 22C0                                 l457 2272  
                               l458 2278                                 l482 18EA  
                               l475 1F54                                 l459 227C  
                               l910 1988                                 l478 185A  
                               l591 24C4                                 l583 1F9C  
                               l487 1B12                                 l584 1F9E  
                               l809 23A0                                 l585 1FA8  
                               l586 1FAA                                 l499 2540  
                               l579 1F82                                 l588 1FC4  
                               l784 1C3E                                 l971 1674  
                               l980 1BA8                                 l797 1ED8  
                               l974 1640                                 l899 19B0  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 00AC  
                               _PR2 000FCB                   _Deactivate_Buzzer 2640  
                               _dir 0058                                 _nbr 0047  
                               _txt 0049                      drawFastHLine@w 0017  
                    drawFastHLine@x 0020                      drawFastHLine@y 0016  
                      ___awmod@sign 0014             __end_of_update_LCD_misc 0CC2  
                               wreg 000FE8                  ??_Wait_Half_Second 000F  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 001B  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize 2474  
                      ___ftdiv@cntr 0024                        ___ftdiv@sign 0029  
                      __CFG_WDT$OFF 000000                      drawFastVLine@h 0017  
                              l1148 2364                      drawFastVLine@x 0020  
                    drawFastVLine@y 0016                                l4202 1D10  
                              l4220 2454                                l4212 1D36  
                              l4214 1D44                                l5102 23F2  
                              l4232 21A6                                l4320 1950  
                              l4312 190C                                l4402 1220  
                              l5050 22CA                                l5034 223A  
                              l5042 21F2                                l4330 1990  
                              l4322 1970                                l4314 1918  
                              l4228 218A                                l4252 1024  
                              l4244 100A                                l4324 197C  
                              l4316 1938                                l4308 18FC  
                              l5108 2406                                l4262 1064  
                              l4254 102C                                l4406 1272  
                              l4422 15B2                                l4264 1098  
                              l4248 1016                                l4360 1414  
                              l5064 1EF0                                l4336 19A2  
                              l4424 15CC                                l4282 111A  
                              l4274 10C6                                l4290 114A  
                              l4266 109C                                l4258 1034  
                              l5082 1F2A                                l5058 2282  
                              l4610 0B7E                                l4602 0B62  
                              l4700 1E9C                                l4284 1142  
                              l4276 10EE                                l4372 1484  
                              l4364 1432                                l4348 13C4  
                              l5076 1F14                                l5068 1EFE  
                              l4524 0D6A                                l4428 15DA  
                              l4620 0BA0                                l4198 1CD8  
                              l4374 148C                                l5094 1F4E  
                              l5086 1F38                                l4470 237C  
                              l4614 0B8C                                l4606 0B70  
                              l4712 1ECE                                l4704 1EB2  
                              l4296 2332                                l4552 0E5A  
                              l4560 2426                                l4448 161A  
                              l5336 1AD0                                l4650 1BD2  
                              l4298 2338                                l4386 11A4  
                              l4458 164E                                l4482 1B78  
                              l4618 0B9A                                l5098 23E4  
                              l5354 23A6                                l4660 1BFA  
                              l4644 1BC0                                l4708 1EBE  
                              l4812 1686                                l4558 241C  
                              l4478 1B46                                l5286 1896  
                              l4830 1722                                l5614 19CC  
                              l4656 1BE8                                l4672 1C24  
                              l4488 1BA4                                l5368 23D4  
                              l5624 1A54                                l4658 1BF2  
                              l4930 08F4                                l4594 0B46  
                              l4834 1730                                l4818 16F4  
                              l5626 1A5A                                l4676 1C34  
                              l4668 1C18                                l4692 1E7C  
                              l4940 1758                                l4852 1C50  
                              l4844 174A                                l4950 180E  
                              l4934 09CA                                l4926 0820  
                              l4598 0B54                                l4838 173A  
                              l4696 1E8A                                l4688 1E6E  
                              l4944 17B4                                l4880 1F72  
                              l4856 1C88                                l4698 1E94  
                              l4866 1CAE                                l4980 0ECE  
                              l4884 1F7A                                l4876 1F68  
                              l4868 1CBC                                l4984 0F26  
                              l4976 0E76                                l4896 1F94  
                              l4888 1F86                                l4994 0FDA  
                              l4988 0F80                                STR_1 FCDD  
                              STR_2 FD15                                STR_3 FD1B  
                              STR_4 FD1F                                STR_5 FD2D  
                              STR_6 FCF1                                STR_7 FD07  
                              STR_8 FCFD                                STR_9 FD0E  
                              u3100 13EE                                u3201 15A4  
                              u4100 1A44                                u3221 15C2  
                              u4110 1A46                                u3340 0B20  
                              u3350 0B22                                u2810 1D06  
                              u3650 1C7E                                u3570 16B4  
                              u3580 16EA                                u2960 10FC  
                              _MODE 0045                                _TRMT 007D61  
               ??_Deactivate_Buzzer 000F                                _main 19B2  
                              _font FAED                        ___ftpack@arg 000F  
                      ___ftpack@exp 0012                                fsr0h 000FEA  
                              fsr1h 000FE2                      ??_get_full_ADC 0011  
                              fsr0l 000FE9                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 005B  
                              _volt 0042                     drawFastHLine@hi 001E  
                   drawFastHLine@lo 001F            __end_of_update_LCD_color 0AA2  
                              pclat 000FFA            __end_of_update_LCD_count 0FFA  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0018  
                   __end_of_Do_Init 24EC                     ??_drawFastHLine 001A  
                   ??_drawFastVLine 001A                        ___param_bank 000010  
                      _Act_Mode_Txt 0062                    __end_of_INT0_ISR 2578  
                  __end_of_INT1_ISR 2560                    __end_of_INT2_ISR 2650  
                       _Do_Flashing 23A2           __end_of_Deactivate_Buzzer 2648  
                   drawFastVLine@hi 001E                     drawFastVLine@lo 001F  
                       _SW_EWLT_Txt 0068                         _SW_MODE_Txt 006C  
                             ?_main 0001                     __end_of___awdiv 1C40  
                   drawCircle@ddF_x 0024                               STR_10 FD23  
                   drawCircle@ddF_y 0026                               STR_11 FD27  
                             STR_12 FCC8                               STR_13 FD2D  
                             STR_14 FD2B                     __end_of___awmod 1EDA  
                   __end_of___ftdiv 1676                               _T0CON 000FD5  
                   ___awdiv@divisor 0011                               _T2CON 000FCA  
                             _T3CON 000FB1                               i2l400 255E  
                             i2l393 256E                               i2l386 1D9C  
                             i2l395 2576                               i2l398 2556  
                   ___awdiv@counter 0013                     drawCircle@color 0020  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 004B  
                      ?_PED_Control 00AD                               _Rcmd1 1288  
                             _Rcmd3 14A2                         _SW_NSLT_Txt 006E  
                     drawRect@color 0029                       ___awtoft@sign 001A  
                   __end_of_init_IO 25BA                               _font2 FBEC  
             fillCircleHelper@ddF_x 002F               fillCircleHelper@ddF_y 0031  
                 ??_Wait_One_Second 0041                       ___ftpack@sign 0013  
             fillCircleHelper@delta 0029               fillCircleHelper@color 002B  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 0042  
                  __end_of_Day_Mode 18EC                      _Wait_N_Seconds 23DC  
                   write_data@data_ 0011                     __initialization 202C  
                      __end_of_main 1A6E                        __end_of_font FBEC  
                  __end_of_Init_ADC 2634                    __end_of_Rcmd2red 2328  
                        _Night_Mode 1A6E                              ??_main 0042  
                     __activetblptr 000002               Wait_N_Seconds@seconds 00AF  
                 __end_of_LCD_Reset 25F4                        _SW_EWPED_Txt 006A  
         ??_TFT_GreenTab_Initialize 001B                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                              _ADRESH 000FC4  
                            _ADRESL 000FC3                              _CCPR2L 000FBB  
              PED_Control@direction 00B0                    ___awdiv@dividend 000F  
                  __end_of___awtoft 23A2                    __end_of___ftpack 19B2  
                            i2l2672 1D88                           ??_Do_Init 0012  
                            i2l2676 1D92                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds 2412                        _SW_NSPED_Txt 0070  
                  __end_of_delay_ms 20E0                              _Set_EW 22A2  
                            _Set_NS 2212                    __end_of_fillRect 21CA  
                  __end_of_drawChar 1150                    __end_of_drawRect 202C  
                __size_of_Set_EW_LT 0048                  __size_of_OpenUSART 0070  
                            ___ftge 1B14                  __size_of_Set_NS_LT 0048  
          __size_of_Activate_Buzzer 0012                              ___wmul 249E  
                         ??___awdiv 0013           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext 14A2                           ??___awmod 0013  
                         ??___ftdiv 0021                              _chkisr 0008  
                            _buffer 0086                              clear_0 2032  
                            clear_1 203E                    ___awdiv@quotient 0015  
                   ___awmod@divisor 0011          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 0013                        drawtext@size 003E  
                            _strcpy 2412                              _strlen 2328  
              __end_of_get_full_ADC 2512                           ??_init_IO 000F  
                      __pdataCOMRAM 005B  __size_of_Wait_One_Second_With_Beep 0016  
                       Set_EW@color 00A7                        __mediumconst FAEC  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                    __end_of_spiwrite 25E2  
                       Set_NS@color 00A7                          __accesstop 0080  
           __end_of__initialization 2084                           ?_INT0_ISR 0001  
                         ?_INT1_ISR 0001                           ?_INT2_ISR 0001  
                        ___ftge@ff1 000F                          ___ftge@ff2 0012  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 001B                          ___ftdiv@f2 001E  
                        ___ftdiv@f3 0025                          ___awtoft@c 0017  
                     __end_of_Rcmd1 1398                       __end_of_Rcmd3 1594  
                    __pcstackCOMRAM 0001                        __pidataBANK0 2634  
                     __end_of_font2 FCC8                         ?_Night_Mode 0001  
                    drawPixel@color 0017              __size_of_write_command 0010  
                         ?_Day_Mode 0001          fillCircleHelper@cornername 0027  
                           ??_Rcmd1 001B                             ??_Rcmd3 001B  
                __size_of_drawPixel 0030                   __end_of_Set_EW_LT 22A2  
                 __end_of_OpenUSART 1FC6                   __end_of_Set_NS_LT 2212  
              __size_of_PED_Control 007C                          __pbssBANK0 0080  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                __size_of_init_UART 0014                          ??_INT0_ISR 0001  
                        ??_INT1_ISR 0001           __size_of_Wait_Half_Second 001A  
                        ??_INT2_ISR 0001                     spiwrite@spidata 0010  
                 ?_update_LCD_color 0041                   ?_update_LCD_count 0041  
                           ?_Set_EW 0001                             ?_Set_NS 0001  
                __CFG_CCP2MX$PORTBE 000000                  ??_update_LCD_color 0042  
                ??_update_LCD_count 0042                             ?___ftge 000F  
                           ?___wmul 000F                             ?_chkisr 0001  
            __size_of_setAddrWindow 004E                             _CCP2CON 000FBA  
                      ?_Do_Flashing 0001           update_LCD_PED_Count@count 0041  
                         ?___awtoft 0017                           ?___ftpack 000F  
                   _Wait_One_Second 1DD6                          _fillCircle 20E0  
                           ?_strcpy 000F                             ?_strlen 000F  
                 ??_Activate_Buzzer 000F                          _fillScreen 2512  
                        _drawCircle 0CC2                          ??_Day_Mode 0042  
                         ?_delay_ms 0015                           ?_fillRect 0021  
         update_LCD_count@direction 00AC                           ?_drawChar 002C  
                           _SSPCON1 000FC6                           ?_drawRect 0021  
                           _SSPSTAT 000FC7               __end_of_fillRectangle 1752  
                         ?_drawtext 0037                             _SW_EWLT 0051  
                           _SW_MODE 0053                          ??_Init_ADC 000F  
                           _Do_Init 24C6                             _SW_NSLT 0054  
                        ??_Rcmd2red 0012                 __size_of_Night_Mode 00A6  
                     _write_command 2616                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0048  
                   __size_of_Set_NS 0048               __end_of_drawFastHLine 1CC8  
                 __end_of_drawPixel 2474               __end_of_drawFastVLine 1D50  
                  _fillCircleHelper 1150                     __size_of___ftge 0096  
                           ___awdiv 1BAA                             ___awmod 1E58  
                           ___ftdiv 1594                     __size_of___wmul 0028  
             __size_of_get_full_ADC 0026                     __size_of_chkisr 1DCE  
                         ?_spiwrite 0001                             __pcinit 202C  
                        ??___awtoft 001A                          ??___ftpack 0014  
                           __ramtop 1000                             __ptext0 19B2  
                           __ptext1 25A6                             __ptext2 1A6E  
                           __ptext3 001C                             __ptext4 2512  
                           __ptext5 1676                             __ptext6 1FC6  
                           __ptext7 1C40                             __ptext8 2474  
                           __ptext9 14A2                   __end_of_init_UART 25CE  
                         _T0CONbits 000FD5                     __size_of_strcpy 0032  
                   __size_of_strlen 003E                             _init_IO 25A6  
                         _T3CONbits 000FB1                    ___awmod@dividend 000F  
                        ??_delay_ms 0017                       drawtext@_text 0038  
                     drawtext@color 003A                          ??_fillRect 0026  
                        ??_drawChar 0033                           _LCD_Reset 25E2  
                        ??_drawRect 002B                       _setAddrWindow 2132  
                    __pintcode_body 1D50                  drawFastHLine@color 0018  
                        delay_ms@ms 0015                end_of_initialization 2084  
                         _INT0_flag 0080                           _INT1_flag 0082  
                         _INT2_flag 0084                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FAEC  
                           int_func 1D50                           _PED_Count 0050  
                      _get_full_ADC 24EC                        PED_Control@i 00AE  
                         _EW_PED_SW 004C       __size_of_update_LCD_PED_Count 00D0  
           __end_of_Wait_One_Second 1E58                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 000F  
                           strlen@s 000F                     fillCircle@color 003F  
                       ?_fillCircle 0039                           _PORTAbits 000F80  
                  drawtext@cursor_x 00AB                    drawtext@cursor_y 00AA  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0022                           _NS_PED_SW 004F  
                       ?_drawCircle 001A                          drawChar@bg 0030  
                         _TRISCbits 000F94                      ?_setAddrWindow 0012  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 0042  
                  drawtext@textsize 00A6            __size_of_update_LCD_misc 0220  
                        drawPixel@x 0019                          drawPixel@y 0016  
                  _Wait_Half_Second 252E                         ___ftdiv@exp 0028  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 00AD  
                get_full_ADC@result 0013                   __size_of_INT0_ISR 0018  
                 __size_of_INT1_ISR 0018                   __size_of_INT2_ISR 0008  
                    __end_of_Set_EW 22EA                      __end_of_Set_NS 225A  
                    __end_of___ftge 1BAA                      __end_of___wmul 24C6  
                     delay_ms@count 0019                          _write_data 2606  
                     __pidataCOMRAM 2578                      __end_of_chkisr 1DD6  
                      ??_Night_Mode 0042            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 003C                __size_of_Do_Flashing 003A  
                    __end_of_strcpy 2444                      __end_of_strlen 2366  
               start_initialization 202C                   __size_of_Day_Mode 00CA  
                   ??_write_command 0011                           _Set_EW_LT 225A  
                         _OpenUSART 1F56                           _Set_NS_LT 21CA  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode 1B14  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 00B0                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0042                            ??_Set_NS 0042  
                   _Activate_Buzzer 25F4                    ?_Wait_One_Second 0001  
                          ??___ftge 0015                            ??___wmul 0013  
                          ??_chkisr 0001                         __pdataBANK0 00B3  
                 update_LCD_misc@ch 00AC                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00B9  
         __size_of_update_LCD_color 0368           __size_of_update_LCD_count 018A  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0042                       ??_PED_Control 0042  
                   ??_setAddrWindow 0015                       __pcstackBANK0 00A5  
                      _PED_NS_Count 00BC                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 1288                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                            ?_Do_Init 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_Set_EW_LT 0001                          ?_OpenUSART 000F  
                 __size_of_drawRect 0066                          ?_Set_NS_LT 0001  
                 __size_of_drawtext 010A                   ??_update_LCD_misc 0041  
                         __pintcode 0008     __end_of_TFT_GreenTab_Initialize 249E  
                     __pmediumconst FAEC                            ?___awdiv 000F  
                          ?___awmod 000F                            ?___ftdiv 001B  
                         __tft_type 0056                           _direction 0059  
                drawFastVLine@color 0018                         ?_write_data 0001  
                         _drawPixel 2444                   __size_of_spiwrite 0014  
                          ?_init_IO 0001                   _Initialize_Screen 001C  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
                         _init_UART 25BA                  ?_Initialize_Screen 0001  
                          _FLASHING 004D   __end_of_Wait_One_Second_With_Beep 25A6  
               __end_of_PED_Control 1F56             __end_of_Activate_Buzzer 2606  
                          _INT0_ISR 2560                            _INT1_ISR 2548  
                          _INT2_ISR 2648                      ___wmul@product 0013  
               ??_Initialize_Screen 0041                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 00B6                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                         drawChar@c 002D                           drawChar@i 0036  
                         drawChar@j 0035                        ??_fillCircle 0041  
                         drawChar@x 0034                           drawChar@y 002C  
                        ?_drawPixel 0016              __size_of_fillRectangle 00DC  
                          _NS_Count 005F                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second 2548                   ___wmul@multiplier 000F  
         __end_of_Initialize_Screen 073A                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 0064                       _FlashingS_Txt 0066  
                 PED_Control@i_1511 00AF                        ??_drawCircle 0022  
      __end_of_update_LCD_PED_Count 1822                           main@nStep 00B1  
                          _SW_EWPED 0052               update_LCD_color@color 0041  
                          _Day_Mode 1822                            _SW_NSPED 0055  
         update_LCD_color@direction 00A5                          ?_init_UART 0001  
            __size_of_drawFastHLine 0088                         _INTCON2bits 000FF1  
                       _INTCON3bits 000FF0                           copy_data0 2058  
                         copy_data1 2078                           drawtext@i 00A8  
            __size_of_drawFastVLine 0088                           drawtext@x 00A5  
                         drawtext@y 0037                            _Init_ADC 2626  
                 write_command@cmd_ 0011                         ??_Set_EW_LT 0042  
                       ??_OpenUSART 0011                         ??_Set_NS_LT 0042  
                          _Rcmd2red 22EA                    __size_of_Do_Init 0026  
               __size_of_write_data 0010                     OpenUSART@config 0011  
                __end_of_fillCircle 2132                            __Hrparam 0000  
                __end_of_fillScreen 252E               update_LCD_count@count 0041  
                          __Lrparam 0000                  __end_of_drawCircle 0E70  
                  __size_of___awdiv 0096                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                            ___awtoft 2366  
                          ___ftpack 18EC                    _update_LCD_color 073A  
                  _update_LCD_count 0E70                    __size_of_init_IO 0014  
                       _PED_Control 1EDA                            _delay_ms 208E  
                          __ptext10 22EA                            __ptext11 1288  
                          __ptext20 23DC                            __ptext12 25E2  
                          __ptext21 0E70                            __ptext13 208E  
                          __ptext30 21CA                            __ptext22 1DD6  
                          __ptext14 24C6                            __ptext31 2212  
                          __ptext23 0AA2                            __ptext15 25BA  
                          __ptext40 1398                            __ptext32 225A  
                          __ptext24 24EC                            __ptext16 1F56  
                          __ptext41 2328                            __ptext33 22A2  
                          __ptext25 1B14                            __ptext17 2626  
                          __ptext50 249E                            __ptext42 0FFA  
                          __ptext34 073A                            __ptext26 1594  
                          __ptext18 23A2                            __ptext51 1E58  
                          __ptext43 2180                            __ptext35 20E0  
                          __ptext27 2366                            __ptext19 1822  
                          __ptext60 2560                            __ptext52 1BAA  
                          __ptext44 1CC8                            __ptext36 1150  
                          __ptext28 18EC                            __ptext53 2590  
                          __ptext45 2444                            __ptext37 0CC2  
                          __ptext29 2412                            __ptext54 252E  
                          __ptext46 2132                            __ptext38 1EDA  
                          __ptext55 2640                            __ptext47 2606  
                          __ptext39 1752                            __ptext56 25F4  
                          __ptext48 2616                            __ptext49 25CE  
                          __ptext58 2648                            __ptext59 2548  
                          _fillRect 2180                            _drawChar 0FFA  
                          _drawRect 1FC6    __size_of_TFT_GreenTab_Initialize 002A  
                  _FLASHING_REQUEST 004E                            _colstart 0057  
                          _drawtext 1398                          strcpy@from 0011  
                     _fillRectangle 1676                    ?_Activate_Buzzer 0001  
                     __size_of_main 00BC                     fillRectangle@hi 001F  
                   fillRectangle@lo 0020                       _drawFastHLine 1C40  
                    Set_EW_LT@color 00A7                       _drawFastVLine 1CC8  
                     ??_Do_Flashing 0042                            _spiwrite 25CE  
                       ??_drawPixel 0019                            _rowstart 005A  
                fillCircleHelper@x0 0021                  fillCircleHelper@y0 0023  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 000F                         ??_init_UART 0012  
                        _EWLT_Count 00B3                   ?_fillCircleHelper 0021  
                         spiwrite@x 000F         ??_Wait_One_Second_With_Beep 000F  
                          intlevel2 0000                     _update_LCD_misc 0AA2  
                    ?_fillRectangle 0016                  ??_fillCircleHelper 002D  
             __end_of_write_command 2626                     fillScreen@color 0022  
              update_LCD_misc@nStep 00AD                _update_LCD_PED_Count 1752  
           __size_of_Wait_N_Seconds 0036                        fillCircle@x0 0039  
                      fillCircle@y0 003B                      ?_drawFastHLine 0016  
                    fillRectangle@h 0018                      fillRectangle@w 0017  
                    fillRectangle@x 0021                      fillRectangle@y 0016  
                    ?_drawFastVLine 0016                   fillCircleHelper@f 0033  
                 fillCircleHelper@r 0025                   fillCircleHelper@x 0035  
                 fillCircleHelper@y 0037                        ??_write_data 0011  
                     fillRect@color 0024            __size_of_Wait_One_Second 0082  
                          strcpy@cp 0013                            strlen@cp 0013  
                          strcpy@to 000F                 __end_of_Do_Flashing 23DC  
                        _NSLT_Count 005C                         fillCircle@r 003D  
             __end_of_setAddrWindow 2180                  fillRectangle@color 0019  
                     drawChar@color 002E                  __end_of_write_data 2616  
                      drawChar@line 0033                      Set_NS_LT@color 00A7  
                     ?_get_full_ADC 000F                        drawChar@size 0032  
             ?_update_LCD_PED_Count 0041  
