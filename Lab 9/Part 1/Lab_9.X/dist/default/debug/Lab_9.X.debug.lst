

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 21 14:40:20 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	idataCOMRAM
    57  0013E0                     __pidataCOMRAM:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _array1
    61  0013E0  A2                 	db	162
    62  0013E1  62                 	db	98
    63  0013E2  E2                 	db	226
    64  0013E3  22                 	db	34
    65  0013E4  02                 	db	2
    66  0013E5  C2                 	db	194
    67  0013E6  E0                 	db	224
    68  0013E7  A8                 	db	168
    69  0013E8  90                 	db	144
    70  0013E9  68                 	db	104
    71  0013EA  98                 	db	152
    72  0013EB  B0                 	db	176
    73  0013EC  30                 	db	48
    74  0013ED  18                 	db	24
    75  0013EE  7A                 	db	122
    76  0013EF  10                 	db	16
    77  0013F0  38                 	db	56
    78  0013F1  5A                 	db	90
    79  0013F2  42                 	db	66
    80  0013F3  4A                 	db	74
    81  0013F4  52                 	db	82
    82                           
    83                           ;initializer for _wrap
    84  0013F5  01                 	db	1
    85                           
    86                           	psect	idataBANK0
    87  0013F6                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _D1
    91  0013F6  04                 	db	4
    92  0013F7  04                 	db	4
    93  0013F8  04                 	db	4
    94  0013F9  20                 	db	32
    95  0013FA  20                 	db	32
    96  0013FB  10                 	db	16
    97  0013FC  00                 	db	0
    98  0013FD  00                 	db	0
    99  0013FE  00                 	db	0
   100  0013FF  00                 	db	0
   101  001400  00                 	db	0
   102  001401  00                 	db	0
   103  001402  00                 	db	0
   104  001403  00                 	db	0
   105  001404  00                 	db	0
   106  001405  00                 	db	0
   107  001406  00                 	db	0
   108  001407  00                 	db	0
   109  001408  00                 	db	0
   110  001409  00                 	db	0
   111  00140A  00                 	db	0
   112                           
   113                           	psect	idataBANK1
   114  000FCC                     __pidataBANK1:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _color
   118  000FCC  F800               	dw	63488
   119  000FCE  F800               	dw	63488
   120  000FD0  F800               	dw	63488
   121  000FD2  001F               	dw	31
   122  000FD4  001F               	dw	31
   123  000FD6  07E0               	dw	2016
   124  000FD8  F81F               	dw	63519
   125  000FDA  F81F               	dw	63519
   126  000FDC  F81F               	dw	63519
   127  000FDE  0000               	dw	0
   128  000FE0  0000               	dw	0
   129  000FE2  0000               	dw	0
   130  000FE4  0000               	dw	0
   131  000FE6  0000               	dw	0
   132  000FE8  0000               	dw	0
   133  000FEA  0000               	dw	0
   134  000FEC  0000               	dw	0
   135  000FEE  0000               	dw	0
   136  000FF0  0000               	dw	0
   137  000FF2  0000               	dw	0
   138  000FF4  0000               	dw	0
   139                           
   140                           ;initializer for _txt1
   141  000FF6  43                 	db	67
   142  000FF7  48                 	db	72
   143  000FF8  2D                 	db	45
   144  000FF9  00                 	db	0
   145  000FFA  43                 	db	67
   146  000FFB  48                 	db	72
   147  000FFC  00                 	db	0
   148  000FFD  00                 	db	0
   149  000FFE  43                 	db	67
   150  000FFF  48                 	db	72
   151  001000  2B                 	db	43
   152  001001  00                 	db	0
   153  001002  7C                 	db	124
   154  001003  3C                 	db	60
   155  001004  3C                 	db	60
   156  001005  00                 	db	0
   157  001006  3E                 	db	62
   158  001007  3E                 	db	62
   159  001008  7C                 	db	124
   160  001009  00                 	db	0
   161  00100A  3E                 	db	62
   162  00100B  7C                 	db	124
   163  00100C  7C                 	db	124
   164  00100D  00                 	db	0
   165  00100E  20                 	db	32
   166  00100F  2D                 	db	45
   167  001010  20                 	db	32
   168  001011  00                 	db	0
   169  001012  20                 	db	32
   170  001013  2B                 	db	43
   171  001014  20                 	db	32
   172  001015  00                 	db	0
   173  001016  45                 	db	69
   174  001017  51                 	db	81
   175  001018  20                 	db	32
   176  001019  00                 	db	0
   177  00101A  20                 	db	32
   178  00101B  30                 	db	48
   179  00101C  20                 	db	32
   180  00101D  00                 	db	0
   181  00101E  31                 	db	49
   182  00101F  30                 	db	48
   183  001020  30                 	db	48
   184  001021  00                 	db	0
   185  001022  32                 	db	50
   186  001023  30                 	db	48
   187  001024  30                 	db	48
   188  001025  00                 	db	0
   189  001026  20                 	db	32
   190  001027  31                 	db	49
   191  001028  20                 	db	32
   192  001029  00                 	db	0
   193  00102A  20                 	db	32
   194  00102B  32                 	db	50
   195  00102C  20                 	db	32
   196  00102D  00                 	db	0
   197  00102E  20                 	db	32
   198  00102F  33                 	db	51
   199  001030  20                 	db	32
   200  001031  00                 	db	0
   201  001032  20                 	db	32
   202  001033  34                 	db	52
   203  001034  20                 	db	32
   204  001035  00                 	db	0
   205  001036  20                 	db	32
   206  001037  35                 	db	53
   207  001038  20                 	db	32
   208  001039  00                 	db	0
   209  00103A  20                 	db	32
   210  00103B  36                 	db	54
   211  00103C  20                 	db	32
   212  00103D  00                 	db	0
   213  00103E  20                 	db	32
   214  00103F  37                 	db	55
   215  001040  20                 	db	32
   216  001041  00                 	db	0
   217  001042  20                 	db	32
   218  001043  38                 	db	56
   219  001044  20                 	db	32
   220  001045  00                 	db	0
   221  001046  20                 	db	32
   222  001047  39                 	db	57
   223  001048  20                 	db	32
   224  001049  00                 	db	0
   225                           
   226                           	psect	mediumconst
   227  00FADC                     __pmediumconst:
   228                           	opt stack 0
   229  00FADC  00                 	db	0
   230  00FADD                     _font:
   231                           	opt stack 0
   232  00FADD  00                 	db	0
   233  00FADE  00                 	db	0
   234  00FADF  00                 	db	0
   235  00FAE0  00                 	db	0
   236  00FAE1  00                 	db	0
   237  00FAE2  00                 	db	0
   238  00FAE3  00                 	db	0
   239  00FAE4  5F                 	db	95
   240  00FAE5  00                 	db	0
   241  00FAE6  00                 	db	0
   242  00FAE7  00                 	db	0
   243  00FAE8  07                 	db	7
   244  00FAE9  00                 	db	0
   245  00FAEA  07                 	db	7
   246  00FAEB  00                 	db	0
   247  00FAEC  14                 	db	20
   248  00FAED  7F                 	db	127
   249  00FAEE  14                 	db	20
   250  00FAEF  7F                 	db	127
   251  00FAF0  14                 	db	20
   252  00FAF1  24                 	db	36
   253  00FAF2  2A                 	db	42
   254  00FAF3  7F                 	db	127
   255  00FAF4  2A                 	db	42
   256  00FAF5  12                 	db	18
   257  00FAF6  23                 	db	35
   258  00FAF7  13                 	db	19
   259  00FAF8  08                 	db	8
   260  00FAF9  64                 	db	100
   261  00FAFA  62                 	db	98
   262  00FAFB  36                 	db	54
   263  00FAFC  49                 	db	73
   264  00FAFD  56                 	db	86
   265  00FAFE  20                 	db	32
   266  00FAFF  50                 	db	80
   267  00FB00  00                 	db	0
   268  00FB01  08                 	db	8
   269  00FB02  07                 	db	7
   270  00FB03  03                 	db	3
   271  00FB04  00                 	db	0
   272  00FB05  00                 	db	0
   273  00FB06  1C                 	db	28
   274  00FB07  22                 	db	34
   275  00FB08  41                 	db	65
   276  00FB09  00                 	db	0
   277  00FB0A  00                 	db	0
   278  00FB0B  41                 	db	65
   279  00FB0C  22                 	db	34
   280  00FB0D  1C                 	db	28
   281  00FB0E  00                 	db	0
   282  00FB0F  2A                 	db	42
   283  00FB10  1C                 	db	28
   284  00FB11  7F                 	db	127
   285  00FB12  1C                 	db	28
   286  00FB13  2A                 	db	42
   287  00FB14  08                 	db	8
   288  00FB15  08                 	db	8
   289  00FB16  3E                 	db	62
   290  00FB17  08                 	db	8
   291  00FB18  08                 	db	8
   292  00FB19  00                 	db	0
   293  00FB1A  80                 	db	128
   294  00FB1B  70                 	db	112
   295  00FB1C  30                 	db	48
   296  00FB1D  00                 	db	0
   297  00FB1E  08                 	db	8
   298  00FB1F  08                 	db	8
   299  00FB20  08                 	db	8
   300  00FB21  08                 	db	8
   301  00FB22  08                 	db	8
   302  00FB23  00                 	db	0
   303  00FB24  00                 	db	0
   304  00FB25  60                 	db	96
   305  00FB26  60                 	db	96
   306  00FB27  00                 	db	0
   307  00FB28  20                 	db	32
   308  00FB29  10                 	db	16
   309  00FB2A  08                 	db	8
   310  00FB2B  04                 	db	4
   311  00FB2C  02                 	db	2
   312  00FB2D  3E                 	db	62
   313  00FB2E  51                 	db	81
   314  00FB2F  49                 	db	73
   315  00FB30  45                 	db	69
   316  00FB31  3E                 	db	62
   317  00FB32  00                 	db	0
   318  00FB33  42                 	db	66
   319  00FB34  7F                 	db	127
   320  00FB35  40                 	db	64
   321  00FB36  00                 	db	0
   322  00FB37  72                 	db	114
   323  00FB38  49                 	db	73
   324  00FB39  49                 	db	73
   325  00FB3A  49                 	db	73
   326  00FB3B  46                 	db	70
   327  00FB3C  21                 	db	33
   328  00FB3D  41                 	db	65
   329  00FB3E  49                 	db	73
   330  00FB3F  4D                 	db	77
   331  00FB40  33                 	db	51
   332  00FB41  18                 	db	24
   333  00FB42  14                 	db	20
   334  00FB43  12                 	db	18
   335  00FB44  7F                 	db	127
   336  00FB45  10                 	db	16
   337  00FB46  27                 	db	39
   338  00FB47  45                 	db	69
   339  00FB48  45                 	db	69
   340  00FB49  45                 	db	69
   341  00FB4A  39                 	db	57
   342  00FB4B  3C                 	db	60
   343  00FB4C  4A                 	db	74
   344  00FB4D  49                 	db	73
   345  00FB4E  49                 	db	73
   346  00FB4F  31                 	db	49
   347  00FB50  41                 	db	65
   348  00FB51  21                 	db	33
   349  00FB52  11                 	db	17
   350  00FB53  09                 	db	9
   351  00FB54  07                 	db	7
   352  00FB55  36                 	db	54
   353  00FB56  49                 	db	73
   354  00FB57  49                 	db	73
   355  00FB58  49                 	db	73
   356  00FB59  36                 	db	54
   357  00FB5A  46                 	db	70
   358  00FB5B  49                 	db	73
   359  00FB5C  49                 	db	73
   360  00FB5D  29                 	db	41
   361  00FB5E  1E                 	db	30
   362  00FB5F  00                 	db	0
   363  00FB60  00                 	db	0
   364  00FB61  14                 	db	20
   365  00FB62  00                 	db	0
   366  00FB63  00                 	db	0
   367  00FB64  00                 	db	0
   368  00FB65  40                 	db	64
   369  00FB66  34                 	db	52
   370  00FB67  00                 	db	0
   371  00FB68  00                 	db	0
   372  00FB69  00                 	db	0
   373  00FB6A  08                 	db	8
   374  00FB6B  14                 	db	20
   375  00FB6C  22                 	db	34
   376  00FB6D  41                 	db	65
   377  00FB6E  14                 	db	20
   378  00FB6F  14                 	db	20
   379  00FB70  14                 	db	20
   380  00FB71  14                 	db	20
   381  00FB72  14                 	db	20
   382  00FB73  00                 	db	0
   383  00FB74  41                 	db	65
   384  00FB75  22                 	db	34
   385  00FB76  14                 	db	20
   386  00FB77  08                 	db	8
   387  00FB78  02                 	db	2
   388  00FB79  01                 	db	1
   389  00FB7A  59                 	db	89
   390  00FB7B  09                 	db	9
   391  00FB7C  06                 	db	6
   392  00FB7D  3E                 	db	62
   393  00FB7E  41                 	db	65
   394  00FB7F  5D                 	db	93
   395  00FB80  59                 	db	89
   396  00FB81  4E                 	db	78
   397  00FB82  7C                 	db	124
   398  00FB83  12                 	db	18
   399  00FB84  11                 	db	17
   400  00FB85  12                 	db	18
   401  00FB86  7C                 	db	124
   402  00FB87  7F                 	db	127
   403  00FB88  49                 	db	73
   404  00FB89  49                 	db	73
   405  00FB8A  49                 	db	73
   406  00FB8B  36                 	db	54
   407  00FB8C  3E                 	db	62
   408  00FB8D  41                 	db	65
   409  00FB8E  41                 	db	65
   410  00FB8F  41                 	db	65
   411  00FB90  22                 	db	34
   412  00FB91  7F                 	db	127
   413  00FB92  41                 	db	65
   414  00FB93  41                 	db	65
   415  00FB94  41                 	db	65
   416  00FB95  3E                 	db	62
   417  00FB96  7F                 	db	127
   418  00FB97  49                 	db	73
   419  00FB98  49                 	db	73
   420  00FB99  49                 	db	73
   421  00FB9A  41                 	db	65
   422  00FB9B  7F                 	db	127
   423  00FB9C  09                 	db	9
   424  00FB9D  09                 	db	9
   425  00FB9E  09                 	db	9
   426  00FB9F  01                 	db	1
   427  00FBA0  3E                 	db	62
   428  00FBA1  41                 	db	65
   429  00FBA2  41                 	db	65
   430  00FBA3  51                 	db	81
   431  00FBA4  73                 	db	115
   432  00FBA5  7F                 	db	127
   433  00FBA6  08                 	db	8
   434  00FBA7  08                 	db	8
   435  00FBA8  08                 	db	8
   436  00FBA9  7F                 	db	127
   437  00FBAA  00                 	db	0
   438  00FBAB  41                 	db	65
   439  00FBAC  7F                 	db	127
   440  00FBAD  41                 	db	65
   441  00FBAE  00                 	db	0
   442  00FBAF  20                 	db	32
   443  00FBB0  40                 	db	64
   444  00FBB1  41                 	db	65
   445  00FBB2  3F                 	db	63
   446  00FBB3  01                 	db	1
   447  00FBB4  7F                 	db	127
   448  00FBB5  08                 	db	8
   449  00FBB6  14                 	db	20
   450  00FBB7  22                 	db	34
   451  00FBB8  41                 	db	65
   452  00FBB9  7F                 	db	127
   453  00FBBA  40                 	db	64
   454  00FBBB  40                 	db	64
   455  00FBBC  40                 	db	64
   456  00FBBD  40                 	db	64
   457  00FBBE  7F                 	db	127
   458  00FBBF  02                 	db	2
   459  00FBC0  1C                 	db	28
   460  00FBC1  02                 	db	2
   461  00FBC2  7F                 	db	127
   462  00FBC3  7F                 	db	127
   463  00FBC4  04                 	db	4
   464  00FBC5  08                 	db	8
   465  00FBC6  10                 	db	16
   466  00FBC7  7F                 	db	127
   467  00FBC8  3E                 	db	62
   468  00FBC9  41                 	db	65
   469  00FBCA  41                 	db	65
   470  00FBCB  41                 	db	65
   471  00FBCC  3E                 	db	62
   472  00FBCD  7F                 	db	127
   473  00FBCE  09                 	db	9
   474  00FBCF  09                 	db	9
   475  00FBD0  09                 	db	9
   476  00FBD1  06                 	db	6
   477  00FBD2  3E                 	db	62
   478  00FBD3  41                 	db	65
   479  00FBD4  51                 	db	81
   480  00FBD5  21                 	db	33
   481  00FBD6  5E                 	db	94
   482  00FBD7  7F                 	db	127
   483  00FBD8  09                 	db	9
   484  00FBD9  19                 	db	25
   485  00FBDA  29                 	db	41
   486  00FBDB  46                 	db	70
   487  00FBDC                     __end_of_font:
   488                           	opt stack 0
   489  00FBDC                     _font2:
   490                           	opt stack 0
   491  00FBDC  26                 	db	38
   492  00FBDD  49                 	db	73
   493  00FBDE  49                 	db	73
   494  00FBDF  49                 	db	73
   495  00FBE0  32                 	db	50
   496  00FBE1  03                 	db	3
   497  00FBE2  01                 	db	1
   498  00FBE3  7F                 	db	127
   499  00FBE4  01                 	db	1
   500  00FBE5  03                 	db	3
   501  00FBE6  3F                 	db	63
   502  00FBE7  40                 	db	64
   503  00FBE8  40                 	db	64
   504  00FBE9  40                 	db	64
   505  00FBEA  3F                 	db	63
   506  00FBEB  1F                 	db	31
   507  00FBEC  20                 	db	32
   508  00FBED  40                 	db	64
   509  00FBEE  20                 	db	32
   510  00FBEF  1F                 	db	31
   511  00FBF0  3F                 	db	63
   512  00FBF1  40                 	db	64
   513  00FBF2  38                 	db	56
   514  00FBF3  40                 	db	64
   515  00FBF4  3F                 	db	63
   516  00FBF5  63                 	db	99
   517  00FBF6  14                 	db	20
   518  00FBF7  08                 	db	8
   519  00FBF8  14                 	db	20
   520  00FBF9  63                 	db	99
   521  00FBFA  03                 	db	3
   522  00FBFB  04                 	db	4
   523  00FBFC  78                 	db	120
   524  00FBFD  04                 	db	4
   525  00FBFE  03                 	db	3
   526  00FBFF  61                 	db	97
   527  00FC00  59                 	db	89
   528  00FC01  49                 	db	73
   529  00FC02  4D                 	db	77
   530  00FC03  43                 	db	67
   531  00FC04  00                 	db	0
   532  00FC05  7F                 	db	127
   533  00FC06  41                 	db	65
   534  00FC07  41                 	db	65
   535  00FC08  41                 	db	65
   536  00FC09  02                 	db	2
   537  00FC0A  04                 	db	4
   538  00FC0B  08                 	db	8
   539  00FC0C  10                 	db	16
   540  00FC0D  20                 	db	32
   541  00FC0E  00                 	db	0
   542  00FC0F  41                 	db	65
   543  00FC10  41                 	db	65
   544  00FC11  41                 	db	65
   545  00FC12  7F                 	db	127
   546  00FC13  04                 	db	4
   547  00FC14  02                 	db	2
   548  00FC15  01                 	db	1
   549  00FC16  02                 	db	2
   550  00FC17  04                 	db	4
   551  00FC18  40                 	db	64
   552  00FC19  40                 	db	64
   553  00FC1A  40                 	db	64
   554  00FC1B  40                 	db	64
   555  00FC1C  40                 	db	64
   556  00FC1D  00                 	db	0
   557  00FC1E  03                 	db	3
   558  00FC1F  07                 	db	7
   559  00FC20  08                 	db	8
   560  00FC21  00                 	db	0
   561  00FC22  20                 	db	32
   562  00FC23  54                 	db	84
   563  00FC24  54                 	db	84
   564  00FC25  78                 	db	120
   565  00FC26  40                 	db	64
   566  00FC27  7F                 	db	127
   567  00FC28  28                 	db	40
   568  00FC29  44                 	db	68
   569  00FC2A  44                 	db	68
   570  00FC2B  38                 	db	56
   571  00FC2C  38                 	db	56
   572  00FC2D  44                 	db	68
   573  00FC2E  44                 	db	68
   574  00FC2F  44                 	db	68
   575  00FC30  28                 	db	40
   576  00FC31  38                 	db	56
   577  00FC32  44                 	db	68
   578  00FC33  44                 	db	68
   579  00FC34  28                 	db	40
   580  00FC35  7F                 	db	127
   581  00FC36  38                 	db	56
   582  00FC37  54                 	db	84
   583  00FC38  54                 	db	84
   584  00FC39  54                 	db	84
   585  00FC3A  18                 	db	24
   586  00FC3B  00                 	db	0
   587  00FC3C  08                 	db	8
   588  00FC3D  7E                 	db	126
   589  00FC3E  09                 	db	9
   590  00FC3F  02                 	db	2
   591  00FC40  18                 	db	24
   592  00FC41  A4                 	db	164
   593  00FC42  A4                 	db	164
   594  00FC43  9C                 	db	156
   595  00FC44  78                 	db	120
   596  00FC45  7F                 	db	127
   597  00FC46  08                 	db	8
   598  00FC47  04                 	db	4
   599  00FC48  04                 	db	4
   600  00FC49  78                 	db	120
   601  00FC4A  00                 	db	0
   602  00FC4B  44                 	db	68
   603  00FC4C  7D                 	db	125
   604  00FC4D  40                 	db	64
   605  00FC4E  00                 	db	0
   606  00FC4F  20                 	db	32
   607  00FC50  40                 	db	64
   608  00FC51  40                 	db	64
   609  00FC52  3D                 	db	61
   610  00FC53  00                 	db	0
   611  00FC54  7F                 	db	127
   612  00FC55  10                 	db	16
   613  00FC56  28                 	db	40
   614  00FC57  44                 	db	68
   615  00FC58  00                 	db	0
   616  00FC59  00                 	db	0
   617  00FC5A  41                 	db	65
   618  00FC5B  7F                 	db	127
   619  00FC5C  40                 	db	64
   620  00FC5D  00                 	db	0
   621  00FC5E  7C                 	db	124
   622  00FC5F  04                 	db	4
   623  00FC60  78                 	db	120
   624  00FC61  04                 	db	4
   625  00FC62  78                 	db	120
   626  00FC63  7C                 	db	124
   627  00FC64  08                 	db	8
   628  00FC65  04                 	db	4
   629  00FC66  04                 	db	4
   630  00FC67  78                 	db	120
   631  00FC68  38                 	db	56
   632  00FC69  44                 	db	68
   633  00FC6A  44                 	db	68
   634  00FC6B  44                 	db	68
   635  00FC6C  38                 	db	56
   636  00FC6D  FC                 	db	252
   637  00FC6E  18                 	db	24
   638  00FC6F  24                 	db	36
   639  00FC70  24                 	db	36
   640  00FC71  18                 	db	24
   641  00FC72  18                 	db	24
   642  00FC73  24                 	db	36
   643  00FC74  24                 	db	36
   644  00FC75  18                 	db	24
   645  00FC76  FC                 	db	252
   646  00FC77  7C                 	db	124
   647  00FC78  08                 	db	8
   648  00FC79  04                 	db	4
   649  00FC7A  04                 	db	4
   650  00FC7B  08                 	db	8
   651  00FC7C  48                 	db	72
   652  00FC7D  54                 	db	84
   653  00FC7E  54                 	db	84
   654  00FC7F  54                 	db	84
   655  00FC80  24                 	db	36
   656  00FC81  04                 	db	4
   657  00FC82  04                 	db	4
   658  00FC83  3F                 	db	63
   659  00FC84  44                 	db	68
   660  00FC85  24                 	db	36
   661  00FC86  3C                 	db	60
   662  00FC87  40                 	db	64
   663  00FC88  40                 	db	64
   664  00FC89  20                 	db	32
   665  00FC8A  7C                 	db	124
   666  00FC8B  1C                 	db	28
   667  00FC8C  20                 	db	32
   668  00FC8D  40                 	db	64
   669  00FC8E  20                 	db	32
   670  00FC8F  1C                 	db	28
   671  00FC90  3C                 	db	60
   672  00FC91  40                 	db	64
   673  00FC92  30                 	db	48
   674  00FC93  40                 	db	64
   675  00FC94  3C                 	db	60
   676  00FC95  44                 	db	68
   677  00FC96  28                 	db	40
   678  00FC97  10                 	db	16
   679  00FC98  28                 	db	40
   680  00FC99  44                 	db	68
   681  00FC9A  4C                 	db	76
   682  00FC9B  90                 	db	144
   683  00FC9C  90                 	db	144
   684  00FC9D  90                 	db	144
   685  00FC9E  7C                 	db	124
   686  00FC9F  44                 	db	68
   687  00FCA0  64                 	db	100
   688  00FCA1  54                 	db	84
   689  00FCA2  4C                 	db	76
   690  00FCA3  44                 	db	68
   691  00FCA4  00                 	db	0
   692  00FCA5  08                 	db	8
   693  00FCA6  36                 	db	54
   694  00FCA7  41                 	db	65
   695  00FCA8  00                 	db	0
   696  00FCA9  00                 	db	0
   697  00FCAA  00                 	db	0
   698  00FCAB  77                 	db	119
   699  00FCAC  00                 	db	0
   700  00FCAD  00                 	db	0
   701  00FCAE  00                 	db	0
   702  00FCAF  41                 	db	65
   703  00FCB0  36                 	db	54
   704  00FCB1  08                 	db	8
   705  00FCB2  00                 	db	0
   706  00FCB3  02                 	db	2
   707  00FCB4  01                 	db	1
   708  00FCB5  02                 	db	2
   709  00FCB6  04                 	db	4
   710  00FCB7  02                 	db	2
   711  00FCB8                     __end_of_font2:
   712                           	opt stack 0
   713  00FCB8                     _hexpowers:
   714                           	opt stack 0
   715  00FCB8  0001               	dw	1
   716  00FCBA  0000               	dw	0
   717  00FCBC  0010               	dw	16
   718  00FCBE  0000               	dw	0
   719  00FCC0  0100               	dw	256
   720  00FCC2  0000               	dw	0
   721  00FCC4  1000               	dw	4096
   722  00FCC6  0000               	dw	0
   723  00FCC8  0000               	dw	0
   724  00FCCA  0001               	dw	1
   725  00FCCC  0000               	dw	0
   726  00FCCE  0010               	dw	16
   727  00FCD0  0000               	dw	0
   728  00FCD2  0100               	dw	256
   729  00FCD4  0000               	dw	0
   730  00FCD6  1000               	dw	4096
   731  00FCD8                     __end_of_hexpowers:
   732                           	opt stack 0
   733  0000                     _PORTDbits	set	3971
   734  0000                     _TRISA	set	3986
   735  0000                     _TRISB	set	3987
   736  0000                     _TRISC	set	3988
   737  0000                     _TRISCbits	set	3988
   738  0000                     _TRISD	set	3989
   739  0000                     _TRISE	set	3990
   740  0000                     _ADCON1	set	4033
   741  0000                     _OSCCON	set	4051
   742  0000                     _PIE1bits	set	3997
   743  0000                     _PIR1bits	set	3998
   744  0000                     _PIR2bits	set	4001
   745  0000                     _RCSTA	set	4011
   746  0000                     _RCSTAbits	set	4011
   747  0000                     _SPBRG	set	4015
   748  0000                     _SPBRGH	set	4016
   749  0000                     _SSPBUF	set	4041
   750  0000                     _SSPCON1	set	4038
   751  0000                     _SSPSTAT	set	4039
   752  0000                     _SSPSTATbits	set	4039
   753  0000                     _T1CON	set	4045
   754  0000                     _T1CONbits	set	4045
   755  0000                     _T3CON	set	4017
   756  0000                     _T3CONbits	set	4017
   757  0000                     _TMR1H	set	4047
   758  0000                     _TMR1L	set	4046
   759  0000                     _TXREG	set	4013
   760  0000                     _TXSTA	set	4012
   761  0000                     _TXSTAbits	set	4012
   762  0000                     _TRMT	set	32097
   763  0000                     _TMR0H	set	4055
   764  0000                     _TMR0L	set	4054
   765  0000                     _INTCON2bits	set	4081
   766  0000                     _INTCONbits	set	4082
   767  0000                     _nRBPU	set	32655
   768  00FCD8                     STR_2:
   769  00FCD8  4E                 	db	78	;'N'
   770  00FCD9  65                 	db	101	;'e'
   771  00FCDA  63                 	db	99	;'c'
   772  00FCDB  5F                 	db	95	;'_'
   773  00FCDC  63                 	db	99	;'c'
   774  00FCDD  6F                 	db	111	;'o'
   775  00FCDE  64                 	db	100	;'d'
   776  00FCDF  65                 	db	101	;'e'
   777  00FCE0  20                 	db	32
   778  00FCE1  3D                 	db	61	;'='
   779  00FCE2  20                 	db	32
   780  00FCE3  25                 	db	37
   781  00FCE4  30                 	db	48	;'0'
   782  00FCE5  38                 	db	56	;'8'
   783  00FCE6  31                 	db	49	;'1'
   784  00FCE7  78                 	db	120	;'x'
   785  00FCE8  20                 	db	32
   786  00FCE9  25                 	db	37
   787  00FCEA  78                 	db	120	;'x'
   788  00FCEB  0D                 	db	13
   789  00FCEC  0A                 	db	10
   790  00FCED  00                 	db	0
   791  00FCEE                     STR_1:
   792  00FCEE  4E                 	db	78	;'N'
   793  00FCEF  45                 	db	69	;'E'
   794  00FCF0  43                 	db	67	;'C'
   795  00FCF1  5F                 	db	95	;'_'
   796  00FCF2  43                 	db	67	;'C'
   797  00FCF3  6F                 	db	111	;'o'
   798  00FCF4  64                 	db	100	;'d'
   799  00FCF5  65                 	db	101	;'e'
   800  00FCF6  20                 	db	32
   801  00FCF7  3D                 	db	61	;'='
   802  00FCF8  20                 	db	32
   803  00FCF9  25                 	db	37
   804  00FCFA  30                 	db	48	;'0'
   805  00FCFB  38                 	db	56	;'8'
   806  00FCFC  6C                 	db	108	;'l'
   807  00FCFD  78                 	db	120	;'x'
   808  00FCFE  20                 	db	32
   809  00FCFF  25                 	db	37
   810  00FD00  78                 	db	120	;'x'
   811  00FD01  0D                 	db	13
   812  00FD02  0A                 	db	10
   813  00FD03  00                 	db	0
   814  00FD04                     STR_3:
   815  00FD04  45                 	db	69	;'E'
   816  00FD05  43                 	db	67	;'C'
   817  00FD06  45                 	db	69	;'E'
   818  00FD07  33                 	db	51	;'3'
   819  00FD08  33                 	db	51	;'3'
   820  00FD09  30                 	db	48	;'0'
   821  00FD0A  31                 	db	49	;'1'
   822  00FD0B  4C                 	db	76	;'L'
   823  00FD0C  20                 	db	32
   824  00FD0D  46                 	db	70	;'F'
   825  00FD0E  61                 	db	97	;'a'
   826  00FD0F  6C                 	db	108	;'l'
   827  00FD10  6C                 	db	108	;'l'
   828  00FD11  20                 	db	32
   829  00FD12  32                 	db	50	;'2'
   830  00FD13  31                 	db	49	;'1'
   831  00FD14  2D                 	db	45
   832  00FD15  53                 	db	83	;'S'
   833  00FD16  33                 	db	51	;'3'
   834  00FD17  00                 	db	0
   835  00FD18                     STR_5:
   836  00FD18  30                 	db	48	;'0'
   837  00FD19  31                 	db	49	;'1'
   838  00FD1A  32                 	db	50	;'2'
   839  00FD1B  33                 	db	51	;'3'
   840  00FD1C  34                 	db	52	;'4'
   841  00FD1D  35                 	db	53	;'5'
   842  00FD1E  36                 	db	54	;'6'
   843  00FD1F  37                 	db	55	;'7'
   844  00FD20  38                 	db	56	;'8'
   845  00FD21  39                 	db	57	;'9'
   846  00FD22  61                 	db	97	;'a'
   847  00FD23  62                 	db	98	;'b'
   848  00FD24  63                 	db	99	;'c'
   849  00FD25  64                 	db	100	;'d'
   850  00FD26  65                 	db	101	;'e'
   851  00FD27  66                 	db	102	;'f'
   852  00FD28  00                 	db	0
   853  00FD29                     STR_4:
   854  00FD29  4C                 	db	76	;'L'
   855  00FD2A  41                 	db	65	;'A'
   856  00FD2B  42                 	db	66	;'B'
   857  00FD2C  20                 	db	32
   858  00FD2D  39                 	db	57	;'9'
   859  00FD2E  00                 	db	0
   860                           
   861                           ; #config settings
   862  00FD2F  00                 	db	0	; dummy byte at the end
   863  0000                     
   864                           	psect	cinit
   865  000F4A                     __pcinit:
   866                           	opt stack 0
   867  000F4A                     start_initialization:
   868                           	opt stack 0
   869  000F4A                     __initialization:
   870                           	opt stack 0
   871                           
   872                           ; Clear objects allocated to BANK0 (73 bytes)
   873  000F4A  EE00  F080         	lfsr	0,__pbssBANK0
   874  000F4E  0E49               	movlw	73
   875  000F50                     clear_0:
   876  000F50  6AEE               	clrf	postinc0,c
   877  000F52  06E8               	decf	wreg,f,c
   878  000F54  E1FD               	bnz	clear_0
   879                           
   880                           ; Clear objects allocated to COMRAM (19 bytes)
   881  000F56  EE00  F05C         	lfsr	0,__pbssCOMRAM
   882  000F5A  0E13               	movlw	19
   883  000F5C                     clear_1:
   884  000F5C  6AEE               	clrf	postinc0,c
   885  000F5E  06E8               	decf	wreg,f,c
   886  000F60  E1FD               	bnz	clear_1
   887                           
   888                           ; Initialize objects allocated to BANK1 (126 bytes)
   889                           ; load TBLPTR registers with __pidataBANK1
   890  000F62  0ECC               	movlw	low __pidataBANK1
   891  000F64  6EF6               	movwf	tblptrl,c
   892  000F66  0E0F               	movlw	high __pidataBANK1
   893  000F68  6EF7               	movwf	tblptrh,c
   894  000F6A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   895  000F6C  6EF8               	movwf	tblptru,c
   896  000F6E  EE01  F000         	lfsr	0,__pdataBANK1
   897  000F72  EE10 F07E          	lfsr	1,126
   898  000F76                     copy_data0:
   899  000F76  0009               	tblrd		*+
   900  000F78  CFF5 FFEE          	movff	tablat,postinc0
   901  000F7C  50E5               	movf	postdec1,w,c
   902  000F7E  50E1               	movf	fsr1l,w,c
   903  000F80  E1FA               	bnz	copy_data0
   904                           
   905                           ; Initialize objects allocated to BANK0 (21 bytes)
   906                           ; load TBLPTR registers with __pidataBANK0
   907  000F82  0EF6               	movlw	low __pidataBANK0
   908  000F84  6EF6               	movwf	tblptrl,c
   909  000F86  0E13               	movlw	high __pidataBANK0
   910  000F88  6EF7               	movwf	tblptrh,c
   911  000F8A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   912  000F8C  6EF8               	movwf	tblptru,c
   913  000F8E  EE00  F0C9         	lfsr	0,__pdataBANK0
   914  000F92  EE10 F015          	lfsr	1,21
   915  000F96                     copy_data1:
   916  000F96  0009               	tblrd		*+
   917  000F98  CFF5 FFEE          	movff	tablat,postinc0
   918  000F9C  50E5               	movf	postdec1,w,c
   919  000F9E  50E1               	movf	fsr1l,w,c
   920  000FA0  E1FA               	bnz	copy_data1
   921                           
   922                           ; Initialize objects allocated to COMRAM (22 bytes)
   923                           ; load TBLPTR registers with __pidataCOMRAM
   924  000FA2  0EE0               	movlw	low __pidataCOMRAM
   925  000FA4  6EF6               	movwf	tblptrl,c
   926  000FA6  0E13               	movlw	high __pidataCOMRAM
   927  000FA8  6EF7               	movwf	tblptrh,c
   928  000FAA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   929  000FAC  6EF8               	movwf	tblptru,c
   930  000FAE  EE00  F046         	lfsr	0,__pdataCOMRAM
   931  000FB2  EE10 F016          	lfsr	1,22
   932  000FB6                     copy_data2:
   933  000FB6  0009               	tblrd		*+
   934  000FB8  CFF5 FFEE          	movff	tablat,postinc0
   935  000FBC  50E5               	movf	postdec1,w,c
   936  000FBE  50E1               	movf	fsr1l,w,c
   937  000FC0  E1FA               	bnz	copy_data2
   938  000FC2                     end_of_initialization:
   939                           	opt stack 0
   940  000FC2                     __end_of__initialization:
   941                           	opt stack 0
   942  000FC2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   943  000FC4  6EF8               	movwf	tblptru,c
   944  000FC6  0100               	movlb	0
   945  000FC8  EF36  F002         	goto	_main	;jump to C main() function
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1l	equ	0xFE1
   954                           
   955                           	psect	bssCOMRAM
   956  00005C                     __pbssCOMRAM:
   957                           	opt stack 0
   958  00005C                     _Nec_code:
   959                           	opt stack 0
   960  00005C                     	ds	4
   961  000060                     _Time_Elapsed:
   962                           	opt stack 0
   963  000060                     	ds	2
   964  000062                     _nbr:
   965                           	opt stack 0
   966  000062                     	ds	2
   967  000064                     _nec_ok:
   968                           	opt stack 0
   969  000064                     	ds	2
   970  000066                     _txt:
   971                           	opt stack 0
   972  000066                     	ds	2
   973  000068                     _Nec_code1:
   974                           	opt stack 0
   975  000068                     	ds	1
   976  000069                     _Nec_state:
   977                           	opt stack 0
   978  000069                     	ds	1
   979  00006A                     __tft_type:
   980                           	opt stack 0
   981  00006A                     	ds	1
   982  00006B                     _bit_count:
   983                           	opt stack 0
   984  00006B                     	ds	1
   985  00006C                     _colstart:
   986                           	opt stack 0
   987  00006C                     	ds	1
   988  00006D                     _i:
   989                           	opt stack 0
   990  00006D                     	ds	1
   991  00006E                     _rowstart:
   992                           	opt stack 0
   993  00006E                     	ds	1
   994                           tblptru	equ	0xFF8
   995                           tblptrh	equ	0xFF7
   996                           tblptrl	equ	0xFF6
   997                           tablat	equ	0xFF5
   998                           postinc0	equ	0xFEE
   999                           wreg	equ	0xFE8
  1000                           postdec1	equ	0xFE5
  1001                           fsr1l	equ	0xFE1
  1002                           
  1003                           	psect	dataCOMRAM
  1004  000046                     __pdataCOMRAM:
  1005                           	opt stack 0
  1006  000046                     _array1:
  1007                           	opt stack 0
  1008  000046                     	ds	21
  1009  00005B                     _wrap:
  1010                           	opt stack 0
  1011  00005B                     	ds	1
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           postdec1	equ	0xFE5
  1019                           fsr1l	equ	0xFE1
  1020                           
  1021                           	psect	bssBANK0
  1022  000080                     __pbssBANK0:
  1023                           	opt stack 0
  1024  000080                     _D2:
  1025                           	opt stack 0
  1026  000080                     	ds	21
  1027  000095                     _D3:
  1028                           	opt stack 0
  1029  000095                     	ds	21
  1030  0000AA                     _buffer:
  1031                           	opt stack 0
  1032  0000AA                     	ds	31
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           fsr1l	equ	0xFE1
  1041                           
  1042                           	psect	dataBANK0
  1043  0000C9                     __pdataBANK0:
  1044                           	opt stack 0
  1045  0000C9                     _D1:
  1046                           	opt stack 0
  1047  0000C9                     	ds	21
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           postdec1	equ	0xFE5
  1055                           fsr1l	equ	0xFE1
  1056                           
  1057                           	psect	dataBANK1
  1058  000100                     __pdataBANK1:
  1059                           	opt stack 0
  1060  000100                     _color:
  1061                           	opt stack 0
  1062  000100                     	ds	42
  1063  00012A                     _txt1:
  1064                           	opt stack 0
  1065  00012A                     	ds	84
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           postdec1	equ	0xFE5
  1073                           fsr1l	equ	0xFE1
  1074                           
  1075                           	psect	cstackBANK0
  1076  0000DE                     __pcstackBANK0:
  1077                           	opt stack 0
  1078  0000DE                     drawtext@x:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x0
  1082  0000DE                     	ds	1
  1083  0000DF                     drawtext@textsize:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x1
  1087  0000DF                     	ds	2
  1088  0000E1                     drawtext@i:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x3
  1092  0000E1                     	ds	2
  1093  0000E3                     drawtext@cursor_y:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x5
  1097  0000E3                     	ds	1
  1098  0000E4                     drawtext@cursor_x:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x6
  1102  0000E4                     	ds	1
  1103                           tblptru	equ	0xFF8
  1104                           tblptrh	equ	0xFF7
  1105                           tblptrl	equ	0xFF6
  1106                           tablat	equ	0xFF5
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           postdec1	equ	0xFE5
  1110                           fsr1l	equ	0xFE1
  1111                           
  1112                           	psect	cstackCOMRAM
  1113  000001                     __pcstackCOMRAM:
  1114                           	opt stack 0
  1115  000001                     ??_INT0_isr:
  1116  000001                     
  1117                           ; 0 bytes @ 0x0
  1118  000001                     	ds	2
  1119  000003                     ??_chkisr:
  1120                           
  1121                           ; 0 bytes @ 0x2
  1122  000003                     	ds	14
  1123  000011                     ??_isdigit:
  1124  000011                     ?_strlen:
  1125                           	opt stack 0
  1126  000011                     ?___wmul:
  1127                           	opt stack 0
  1128  000011                     ?___lldiv:
  1129                           	opt stack 0
  1130  000011                     putch@c:
  1131                           	opt stack 0
  1132  000011                     spiwrite@x:
  1133                           	opt stack 0
  1134  000011                     OpenUSART@spbrg:
  1135                           	opt stack 0
  1136  000011                     ___wmul@multiplier:
  1137                           	opt stack 0
  1138  000011                     strcpy@to:
  1139                           	opt stack 0
  1140  000011                     strlen@s:
  1141                           	opt stack 0
  1142  000011                     ___lldiv@dividend:
  1143                           	opt stack 0
  1144                           
  1145                           ; 4 bytes @ 0x10
  1146  000011                     	ds	1
  1147  000012                     spiwrite@spidata:
  1148                           	opt stack 0
  1149  000012                     _isdigit$1509:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x11
  1153  000012                     	ds	1
  1154  000013                     ??_strlen:
  1155  000013                     write_command@cmd_:
  1156                           	opt stack 0
  1157  000013                     write_data@data_:
  1158                           	opt stack 0
  1159  000013                     OpenUSART@config:
  1160                           	opt stack 0
  1161  000013                     isdigit@c:
  1162                           	opt stack 0
  1163  000013                     ___wmul@multiplicand:
  1164                           	opt stack 0
  1165  000013                     strcpy@from:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x12
  1169  000013                     	ds	1
  1170  000014                     setAddrWindow@y0:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x13
  1174  000014                     	ds	1
  1175  000015                     setAddrWindow@x1:
  1176                           	opt stack 0
  1177  000015                     ___wmul@product:
  1178                           	opt stack 0
  1179  000015                     strcpy@cp:
  1180                           	opt stack 0
  1181  000015                     strlen@cp:
  1182                           	opt stack 0
  1183  000015                     ___lldiv@divisor:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x14
  1187  000015                     	ds	1
  1188  000016                     setAddrWindow@y1:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x15
  1192  000016                     	ds	1
  1193  000017                     setAddrWindow@x0:
  1194                           	opt stack 0
  1195  000017                     delay_ms@ms:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x16
  1199  000017                     	ds	1
  1200  000018                     drawPixel@y:
  1201                           	opt stack 0
  1202  000018                     drawFastVLine@y:
  1203                           	opt stack 0
  1204  000018                     fillRectangle@y:
  1205                           	opt stack 0
  1206                           
  1207                           ; 1 bytes @ 0x17
  1208  000018                     	ds	1
  1209  000019                     ??_delay_ms:
  1210  000019                     drawFastVLine@h:
  1211                           	opt stack 0
  1212  000019                     fillRectangle@w:
  1213                           	opt stack 0
  1214  000019                     drawPixel@color:
  1215                           	opt stack 0
  1216  000019                     ___lldiv@quotient:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x18
  1220  000019                     	ds	1
  1221  00001A                     fillRectangle@h:
  1222                           	opt stack 0
  1223  00001A                     drawFastVLine@color:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x19
  1227  00001A                     	ds	1
  1228  00001B                     drawPixel@x:
  1229                           	opt stack 0
  1230  00001B                     delay_ms@count:
  1231                           	opt stack 0
  1232  00001B                     fillRectangle@color:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x1A
  1236  00001B                     	ds	1
  1237  00001C                     ??_drawFastVLine:
  1238  00001C                     drawCircle@x0:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x1B
  1242  00001C                     	ds	1
  1243  00001D                     ??_fillRectangle:
  1244  00001D                     ___lldiv@counter:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x1C
  1248  00001D                     	ds	1
  1249  00001E                     ?_printf:
  1250                           	opt stack 0
  1251  00001E                     drawCircle@y0:
  1252                           	opt stack 0
  1253  00001E                     printf@f:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x1D
  1257  00001E                     	ds	2
  1258  000020                     drawFastVLine@hi:
  1259                           	opt stack 0
  1260  000020                     drawCircle@r:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x1F
  1264  000020                     	ds	1
  1265  000021                     drawFastVLine@lo:
  1266                           	opt stack 0
  1267  000021                     fillRectangle@hi:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x20
  1271  000021                     	ds	1
  1272  000022                     drawFastVLine@x:
  1273                           	opt stack 0
  1274  000022                     fillRectangle@lo:
  1275                           	opt stack 0
  1276  000022                     drawCircle@color:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x21
  1280  000022                     	ds	1
  1281  000023                     fillRect@y:
  1282                           	opt stack 0
  1283  000023                     fillRectangle@x:
  1284                           	opt stack 0
  1285  000023                     fillCircleHelper@x0:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x22
  1289  000023                     	ds	1
  1290  000024                     ??_drawCircle:
  1291  000024                     fillRect@w:
  1292                           	opt stack 0
  1293  000024                     fillScreen@color:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x23
  1297  000024                     	ds	1
  1298  000025                     fillRect@h:
  1299                           	opt stack 0
  1300  000025                     fillCircleHelper@y0:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x24
  1304  000025                     	ds	1
  1305  000026                     ??_printf:
  1306  000026                     fillRect@color:
  1307                           	opt stack 0
  1308  000026                     drawCircle@ddF_x:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x25
  1312  000026                     	ds	1
  1313  000027                     fillCircleHelper@r:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x26
  1317  000027                     	ds	1
  1318  000028                     ??_fillRect:
  1319  000028                     drawCircle@ddF_y:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x27
  1323  000028                     	ds	1
  1324  000029                     fillCircleHelper@cornername:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x28
  1328  000029                     	ds	1
  1329  00002A                     printf@idx:
  1330                           	opt stack 0
  1331  00002A                     drawCircle@f:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x29
  1335  00002A                     	ds	1
  1336  00002B                     fillRect@x:
  1337                           	opt stack 0
  1338  00002B                     fillCircleHelper@delta:
  1339                           	opt stack 0
  1340  00002B                     printf@prec:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x2A
  1344  00002B                     	ds	1
  1345  00002C                     fillRect@i:
  1346                           	opt stack 0
  1347  00002C                     drawCircle@x:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x2B
  1351  00002C                     	ds	1
  1352  00002D                     fillCircleHelper@color:
  1353                           	opt stack 0
  1354  00002D                     printf@val:
  1355                           	opt stack 0
  1356                           
  1357                           ; 4 bytes @ 0x2C
  1358  00002D                     	ds	1
  1359  00002E                     drawChar@y:
  1360                           	opt stack 0
  1361  00002E                     drawCircle@y:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x2D
  1365  00002E                     	ds	1
  1366  00002F                     ??_fillCircleHelper:
  1367  00002F                     drawChar@c:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x2E
  1371  00002F                     	ds	1
  1372  000030                     drawChar@color:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x2F
  1376  000030                     	ds	1
  1377  000031                     fillCircleHelper@ddF_x:
  1378                           	opt stack 0
  1379  000031                     printf@ap:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x30
  1383  000031                     	ds	1
  1384  000032                     drawChar@bg:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x31
  1388  000032                     	ds	1
  1389  000033                     printf@flag:
  1390                           	opt stack 0
  1391  000033                     fillCircleHelper@ddF_y:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x32
  1395  000033                     	ds	1
  1396  000034                     drawChar@size:
  1397                           	opt stack 0
  1398  000034                     printf@width:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x33
  1402  000034                     	ds	1
  1403  000035                     drawChar@line:
  1404                           	opt stack 0
  1405  000035                     fillCircleHelper@f:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x34
  1409  000035                     	ds	1
  1410  000036                     drawChar@x:
  1411                           	opt stack 0
  1412  000036                     printf@c:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x35
  1416  000036                     	ds	1
  1417  000037                     drawChar@j:
  1418                           	opt stack 0
  1419  000037                     fillCircleHelper@x:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x36
  1423  000037                     	ds	1
  1424  000038                     drawChar@i:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x37
  1428  000038                     	ds	1
  1429  000039                     drawtext@y:
  1430                           	opt stack 0
  1431  000039                     fillCircleHelper@y:
  1432                           	opt stack 0
  1433                           
  1434                           ; 2 bytes @ 0x38
  1435  000039                     	ds	1
  1436  00003A                     drawtext@_text:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x39
  1440  00003A                     	ds	1
  1441  00003B                     fillCircle@x0:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x3A
  1445  00003B                     	ds	1
  1446  00003C                     drawtext@color:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x3B
  1450  00003C                     	ds	1
  1451  00003D                     fillCircle@y0:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x3C
  1455  00003D                     	ds	1
  1456  00003E                     drawtext@bg:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x3D
  1460  00003E                     	ds	1
  1461  00003F                     fillCircle@r:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x3E
  1465  00003F                     	ds	1
  1466  000040                     drawtext@size:
  1467                           	opt stack 0
  1468                           
  1469                           ; 1 bytes @ 0x3F
  1470  000040                     	ds	1
  1471  000041                     ??_drawtext:
  1472  000041                     fillCircle@color:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x40
  1476  000041                     	ds	2
  1477  000043                     
  1478                           ; 0 bytes @ 0x42
  1479  000043                     	ds	1
  1480  000044                     main@found:
  1481                           	opt stack 0
  1482                           
  1483                           ; 1 bytes @ 0x43
  1484  000044                     	ds	1
  1485  000045                     main@i:
  1486                           	opt stack 0
  1487                           
  1488                           ; 1 bytes @ 0x44
  1489  000045                     	ds	1
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499 ;;
  1500 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1501 ;;
  1502 ;; *************** function _main *****************
  1503 ;; Defined at:
  1504 ;;		line 253 in file "Lab9_sample_3.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  i               1   68[COMRAM] unsigned char 
  1509 ;;  found           1   67[COMRAM] unsigned char 
  1510 ;; Return value:  Size  Location     Type
  1511 ;;		None               void
  1512 ;; Registers used:
  1513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;Total ram usage:        3 bytes
  1524 ;; Hardware stack levels required when called:   11
  1525 ;; This function calls:
  1526 ;;		_Initialize_Screen
  1527 ;;		_drawCircle
  1528 ;;		_drawtext
  1529 ;;		_fillCircle
  1530 ;;		_init_UART
  1531 ;;		_printf
  1532 ;; This function is called by:
  1533 ;;		Startup code after reset
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text0
  1538  00046C                     __ptext0:
  1539                           	opt stack 0
  1540  00046C                     _main:
  1541                           	opt stack 20
  1542                           
  1543                           ;Lab9_sample_3.c: 255: init_UART();
  1544                           
  1545                           ;incstack = 0
  1546  00046C  EC06  F00A         	call	_init_UART	;wreg free
  1547                           
  1548                           ;Lab9_sample_3.c: 256: OSCCON = 0x70;
  1549  000470  0E70               	movlw	112
  1550  000472  6ED3               	movwf	4051,c	;volatile
  1551                           
  1552                           ;Lab9_sample_3.c: 257: nRBPU = 0;
  1553  000474  9EF1               	bcf	intcon2,7,c	;volatile
  1554                           
  1555                           ;Lab9_sample_3.c: 258: TRISA = 0x00;
  1556  000476  0E00               	movlw	0
  1557  000478  6E92               	movwf	3986,c	;volatile
  1558                           
  1559                           ;Lab9_sample_3.c: 259: TRISB = 0x01;
  1560  00047A  0E01               	movlw	1
  1561  00047C  6E93               	movwf	3987,c	;volatile
  1562                           
  1563                           ;Lab9_sample_3.c: 260: TRISC = 0x00;
  1564  00047E  0E00               	movlw	0
  1565  000480  6E94               	movwf	3988,c	;volatile
  1566                           
  1567                           ;Lab9_sample_3.c: 261: TRISD = 0x00;
  1568  000482  0E00               	movlw	0
  1569  000484  6E95               	movwf	3989,c	;volatile
  1570                           
  1571                           ;Lab9_sample_3.c: 262: TRISE = 0x00;
  1572  000486  0E00               	movlw	0
  1573  000488  6E96               	movwf	3990,c	;volatile
  1574                           
  1575                           ;Lab9_sample_3.c: 263: ADCON1 = 0x0F;
  1576  00048A  0E0F               	movlw	15
  1577  00048C  6EC1               	movwf	4033,c	;volatile
  1578                           
  1579                           ;Lab9_sample_3.c: 264: Initialize_Screen();
  1580  00048E  ECD4  F006         	call	_Initialize_Screen	;wreg free
  1581                           
  1582                           ;Lab9_sample_3.c: 265: INTCONbits.INT0IF = 0;
  1583  000492  92F2               	bcf	intcon,1,c	;volatile
  1584                           
  1585                           ;Lab9_sample_3.c: 266: INTCON2bits.INTEDG0 = 0;
  1586  000494  9CF1               	bcf	intcon2,6,c	;volatile
  1587                           
  1588                           ;Lab9_sample_3.c: 267: INTCONbits.INT0IE = 1;
  1589  000496  88F2               	bsf	intcon,4,c	;volatile
  1590                           
  1591                           ;Lab9_sample_3.c: 268: TMR1H = 0;
  1592  000498  0E00               	movlw	0
  1593  00049A  6ECF               	movwf	4047,c	;volatile
  1594                           
  1595                           ;Lab9_sample_3.c: 269: TMR1L = 0;
  1596  00049C  0E00               	movlw	0
  1597  00049E  6ECE               	movwf	4046,c	;volatile
  1598                           
  1599                           ;Lab9_sample_3.c: 270: PIR1bits.TMR1IF = 0;
  1600  0004A0  909E               	bcf	3998,0,c	;volatile
  1601                           
  1602                           ;Lab9_sample_3.c: 271: PIE1bits.TMR1IE = 1;
  1603  0004A2  809D               	bsf	3997,0,c	;volatile
  1604                           
  1605                           ;Lab9_sample_3.c: 272: INTCONbits.PEIE = 1;
  1606  0004A4  8CF2               	bsf	intcon,6,c	;volatile
  1607                           
  1608                           ;Lab9_sample_3.c: 273: INTCONbits.GIE = 1;
  1609  0004A6  8EF2               	bsf	intcon,7,c	;volatile
  1610                           
  1611                           ;Lab9_sample_3.c: 274: nec_ok = 0;
  1612  0004A8  0E00               	movlw	0
  1613  0004AA  6E65               	movwf	_nec_ok+1,c
  1614  0004AC  0E00               	movlw	0
  1615  0004AE  6E64               	movwf	_nec_ok,c
  1616                           
  1617                           ;Lab9_sample_3.c: 275: Nec_code = 0x0;
  1618  0004B0  0E00               	movlw	0
  1619  0004B2  6E5C               	movwf	_Nec_code,c
  1620  0004B4  0E00               	movlw	0
  1621  0004B6  6E5D               	movwf	_Nec_code+1,c
  1622  0004B8  0E00               	movlw	0
  1623  0004BA  6E5E               	movwf	_Nec_code+2,c
  1624  0004BC  0E00               	movlw	0
  1625  0004BE  6E5F               	movwf	_Nec_code+3,c
  1626  0004C0  D000               	goto	l3679
  1627  0004C2                     l3679:
  1628                           
  1629                           ;Lab9_sample_3.c: 278: {
  1630                           ;Lab9_sample_3.c: 279: if (nec_ok == 1)
  1631  0004C2  0464               	decf	_nec_ok,w,c
  1632  0004C4  1065               	iorwf	_nec_ok+1,w,c
  1633  0004C6  A4D8               	btfss	status,2,c
  1634  0004C8  D7FC               	goto	l3679
  1635                           
  1636                           ;Lab9_sample_3.c: 280: {
  1637                           ;Lab9_sample_3.c: 281: nec_ok = 0;
  1638  0004CA  0E00               	movlw	0
  1639  0004CC  6E65               	movwf	_nec_ok+1,c
  1640  0004CE  0E00               	movlw	0
  1641  0004D0  6E64               	movwf	_nec_ok,c
  1642                           
  1643                           ;Lab9_sample_3.c: 283: Nec_code1 = (char) ((Nec_code >> 8));
  1644  0004D2  C05D  F068         	movff	_Nec_code+1,_Nec_code1
  1645                           
  1646                           ;Lab9_sample_3.c: 284: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  1647  0004D6  0EEE               	movlw	low STR_1
  1648  0004D8  6E1E               	movwf	printf@f,c
  1649  0004DA  0EFC               	movlw	high STR_1
  1650  0004DC  6E1F               	movwf	printf@f+1,c
  1651  0004DE  C05C  F020         	movff	_Nec_code,?_printf+2
  1652  0004E2  C05D  F021         	movff	_Nec_code+1,?_printf+3
  1653  0004E6  C05E  F022         	movff	_Nec_code+2,?_printf+4
  1654  0004EA  C05F  F023         	movff	_Nec_code+3,?_printf+5
  1655  0004EE  C068  F024         	movff	_Nec_code1,?_printf+6
  1656  0004F2  6A25               	clrf	?_printf+7,c
  1657  0004F4  EC0E  F000         	call	_printf	;wreg free
  1658                           
  1659                           ;Lab9_sample_3.c: 285: INTCONbits.INT0IE = 1;
  1660  0004F8  88F2               	bsf	intcon,4,c	;volatile
  1661                           
  1662                           ;Lab9_sample_3.c: 286: INTCON2bits.INTEDG0 = 0;
  1663  0004FA  9CF1               	bcf	intcon2,6,c	;volatile
  1664                           
  1665                           ;Lab9_sample_3.c: 288: char found = 0xff;
  1666  0004FC  6844               	setf	main@found,c
  1667                           
  1668                           ;Lab9_sample_3.c: 290: for( char i = 0; i < 20; i++ )
  1669  0004FE  0E00               	movlw	0
  1670  000500  6E45               	movwf	main@i,c
  1671  000502                     l3695:
  1672  000502  0E13               	movlw	19
  1673  000504  6445               	cpfsgt	main@i,c
  1674  000506  D001               	goto	l3699
  1675  000508  D011               	goto	l3707
  1676  00050A                     l3699:
  1677                           
  1678                           ;Lab9_sample_3.c: 291: {
  1679                           ;Lab9_sample_3.c: 292: if( Nec_code1 == array1[i] )
  1680  00050A  5045               	movf	main@i,w,c
  1681  00050C  0D01               	mullw	1
  1682  00050E  0E46               	movlw	low _array1
  1683  000510  24F3               	addwf	prodl,w,c
  1684  000512  6ED9               	movwf	fsr2l,c
  1685  000514  0E00               	movlw	high _array1
  1686  000516  20F4               	addwfc	prodh,w,c
  1687  000518  6EDA               	movwf	fsr2h,c
  1688  00051A  5068               	movf	_Nec_code1,w,c
  1689  00051C  18DE               	xorwf	postinc2,w,c
  1690  00051E  A4D8               	btfss	status,2,c
  1691  000520  D003               	goto	l3703
  1692                           
  1693                           ;Lab9_sample_3.c: 293: {
  1694                           ;Lab9_sample_3.c: 294: found = i;
  1695  000522  C045  F044         	movff	main@i,main@found
  1696  000526  D000               	goto	l3703
  1697  000528                     l3703:
  1698  000528  2A45               	incf	main@i,f,c
  1699  00052A  D7EB               	goto	l3695
  1700  00052C                     l3707:
  1701                           
  1702                           ;Lab9_sample_3.c: 295: }
  1703                           ;Lab9_sample_3.c: 297: }
  1704                           ;Lab9_sample_3.c: 300: if (found != 0xff)
  1705  00052C  2844               	incf	main@found,w,c
  1706  00052E  B4D8               	btfsc	status,2,c
  1707  000530  D7C8               	goto	l3679
  1708                           
  1709                           ;Lab9_sample_3.c: 301: {
  1710                           ;Lab9_sample_3.c: 302: printf("Nec_code = %081x %x\r\n",Nec_code,found);
  1711  000532  0ED8               	movlw	low STR_2
  1712  000534  6E1E               	movwf	printf@f,c
  1713  000536  0EFC               	movlw	high STR_2
  1714  000538  6E1F               	movwf	printf@f+1,c
  1715  00053A  C05C  F020         	movff	_Nec_code,?_printf+2
  1716  00053E  C05D  F021         	movff	_Nec_code+1,?_printf+3
  1717  000542  C05E  F022         	movff	_Nec_code+2,?_printf+4
  1718  000546  C05F  F023         	movff	_Nec_code+3,?_printf+5
  1719  00054A  C044  F024         	movff	main@found,?_printf+6
  1720  00054E  6A25               	clrf	?_printf+7,c
  1721  000550  EC0E  F000         	call	_printf	;wreg free
  1722                           
  1723                           ;Lab9_sample_3.c: 303: fillCircle(60, 80, 20, color[found]);
  1724  000554  0E00               	movlw	0
  1725  000556  6E3C               	movwf	fillCircle@x0+1,c
  1726  000558  0E3C               	movlw	60
  1727  00055A  6E3B               	movwf	fillCircle@x0,c
  1728  00055C  0E00               	movlw	0
  1729  00055E  6E3E               	movwf	fillCircle@y0+1,c
  1730  000560  0E50               	movlw	80
  1731  000562  6E3D               	movwf	fillCircle@y0,c
  1732  000564  0E00               	movlw	0
  1733  000566  6E40               	movwf	fillCircle@r+1,c
  1734  000568  0E14               	movlw	20
  1735  00056A  6E3F               	movwf	fillCircle@r,c
  1736  00056C  5044               	movf	main@found,w,c
  1737  00056E  0D02               	mullw	2
  1738  000570  0E00               	movlw	low _color
  1739  000572  24F3               	addwf	prodl,w,c
  1740  000574  6ED9               	movwf	fsr2l,c
  1741  000576  0E01               	movlw	high _color
  1742  000578  20F4               	addwfc	prodh,w,c
  1743  00057A  6EDA               	movwf	fsr2h,c
  1744  00057C  CFDE F041          	movff	postinc2,fillCircle@color
  1745  000580  CFDD F042          	movff	postdec2,fillCircle@color+1
  1746  000584  EC9B  F008         	call	_fillCircle	;wreg free
  1747                           
  1748                           ;Lab9_sample_3.c: 304: drawCircle(60, 80, 20, 0xFFFF);
  1749  000588  0E00               	movlw	0
  1750  00058A  6E1D               	movwf	drawCircle@x0+1,c
  1751  00058C  0E3C               	movlw	60
  1752  00058E  6E1C               	movwf	drawCircle@x0,c
  1753  000590  0E00               	movlw	0
  1754  000592  6E1F               	movwf	drawCircle@y0+1,c
  1755  000594  0E50               	movlw	80
  1756  000596  6E1E               	movwf	drawCircle@y0,c
  1757  000598  0E00               	movlw	0
  1758  00059A  6E21               	movwf	drawCircle@r+1,c
  1759  00059C  0E14               	movlw	20
  1760  00059E  6E20               	movwf	drawCircle@r,c
  1761  0005A0  0EFF               	movlw	255
  1762  0005A2  6E23               	movwf	drawCircle@color+1,c
  1763  0005A4  6822               	setf	drawCircle@color,c
  1764  0005A6  EC5F  F001         	call	_drawCircle	;wreg free
  1765                           
  1766                           ;Lab9_sample_3.c: 305: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1767  0005AA  0E4D               	movlw	77
  1768  0005AC  6E39               	movwf	drawtext@y,c
  1769  0005AE  5044               	movf	main@found,w,c
  1770  0005B0  0D04               	mullw	4
  1771  0005B2  0E2A               	movlw	low _txt1
  1772  0005B4  24F3               	addwf	prodl,w,c
  1773  0005B6  6E3A               	movwf	drawtext@_text,c
  1774  0005B8  0E01               	movlw	high _txt1
  1775  0005BA  20F4               	addwfc	prodh,w,c
  1776  0005BC  6E3B               	movwf	drawtext@_text+1,c
  1777  0005BE  0EFF               	movlw	255
  1778  0005C0  6E3D               	movwf	drawtext@color+1,c
  1779  0005C2  683C               	setf	drawtext@color,c
  1780  0005C4  0E00               	movlw	0
  1781  0005C6  6E3F               	movwf	drawtext@bg+1,c
  1782  0005C8  0E00               	movlw	0
  1783  0005CA  6E3E               	movwf	drawtext@bg,c
  1784  0005CC  0E01               	movlw	1
  1785  0005CE  6E40               	movwf	drawtext@size,c
  1786  0005D0  0E34               	movlw	52
  1787  0005D2  EC68  F005         	call	_drawtext
  1788  0005D6  D775               	goto	l3679
  1789  0005D8  EF0C  F000         	goto	start
  1790  0005DC                     __end_of_main:
  1791                           	opt stack 0
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           prodh	equ	0xFF4
  1797                           prodl	equ	0xFF3
  1798                           intcon	equ	0xFF2
  1799                           intcon2	equ	0xFF1
  1800                           postinc0	equ	0xFEE
  1801                           wreg	equ	0xFE8
  1802                           postdec1	equ	0xFE5
  1803                           fsr1l	equ	0xFE1
  1804                           postinc2	equ	0xFDE
  1805                           postdec2	equ	0xFDD
  1806                           fsr2h	equ	0xFDA
  1807                           fsr2l	equ	0xFD9
  1808                           status	equ	0xFD8
  1809                           
  1810 ;; *************** function _printf *****************
  1811 ;; Defined at:
  1812 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  f               2   29[COMRAM] PTR const unsigned char 
  1815 ;;		 -> STR_2(22), STR_1(22), 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  idx             1   41[COMRAM] unsigned char 
  1818 ;;  val             4   44[COMRAM] unsigned long 
  1819 ;;  tmpval          4    0        struct .
  1820 ;;  cp              3    0        PTR const unsigned char 
  1821 ;;  width           2   51[COMRAM] int 
  1822 ;;  ap              2   48[COMRAM] PTR void [1]
  1823 ;;		 -> ?_printf(2), 
  1824 ;;  prec            2   42[COMRAM] int 
  1825 ;;  len             2    0        unsigned int 
  1826 ;;  c               1   53[COMRAM] char 
  1827 ;;  flag            1   50[COMRAM] unsigned char 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  2   29[COMRAM] int 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1837 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;Total ram usage:       25 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    4
  1844 ;; This function calls:
  1845 ;;		___lldiv
  1846 ;;		___wmul
  1847 ;;		_isdigit
  1848 ;;		_putch
  1849 ;; This function is called by:
  1850 ;;		_main
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text1
  1855  00001C                     __ptext1:
  1856                           	opt stack 0
  1857  00001C                     _printf:
  1858                           	opt stack 26
  1859                           
  1860                           ;doprnt.c: 466: va_list ap;
  1861                           ;doprnt.c: 499: signed char c;
  1862                           ;doprnt.c: 501: int width;
  1863                           ;doprnt.c: 504: int prec;
  1864                           ;doprnt.c: 508: unsigned char flag;
  1865                           ;doprnt.c: 523: union {
  1866                           ;doprnt.c: 524: unsigned long vd;
  1867                           ;doprnt.c: 525: double integ;
  1868                           ;doprnt.c: 526: } tmpval;
  1869                           ;doprnt.c: 528: unsigned long val;
  1870                           ;doprnt.c: 529: unsigned len;
  1871                           ;doprnt.c: 530: const char * cp;
  1872                           ;doprnt.c: 533: *ap = __va_start();
  1873                           
  1874                           ;incstack = 0
  1875  00001C  0E20               	movlw	low (?_printf+2)
  1876  00001E  6E31               	movwf	printf@ap,c
  1877  000020  0E00               	movlw	high (?_printf+2)
  1878  000022  6E32               	movwf	printf@ap+1,c
  1879                           
  1880                           ;doprnt.c: 536: while(c = *f++) {
  1881  000024  D13D               	goto	l3561
  1882  000026                     l3479:
  1883                           
  1884                           ;doprnt.c: 538: if(c != '%')
  1885  000026  0E25               	movlw	37
  1886  000028  1836               	xorwf	printf@c,w,c
  1887  00002A  B4D8               	btfsc	status,2,c
  1888  00002C  D004               	goto	l3483
  1889                           
  1890                           ;doprnt.c: 540: {
  1891                           ;doprnt.c: 541: (putch(c) );
  1892  00002E  5036               	movf	printf@c,w,c
  1893  000030  EC33  F00A         	call	_putch
  1894                           
  1895                           ;doprnt.c: 542: continue;
  1896  000034  D135               	goto	l3561
  1897  000036                     l3483:
  1898                           
  1899                           ;doprnt.c: 543: }
  1900                           ;doprnt.c: 546: width = 0;
  1901  000036  0E00               	movlw	0
  1902  000038  6E35               	movwf	printf@width+1,c
  1903  00003A  0E00               	movlw	0
  1904  00003C  6E34               	movwf	printf@width,c
  1905                           
  1906                           ;doprnt.c: 548: flag = 0;
  1907  00003E  0E00               	movlw	0
  1908  000040  6E33               	movwf	printf@flag,c
  1909                           
  1910                           ;doprnt.c: 551: switch(*f) {
  1911                           
  1912                           ;doprnt.c: 550: for(;;) {
  1913  000042  D005               	goto	l3489
  1914  000044                     l3485:
  1915                           
  1916                           ;doprnt.c: 580: flag |= 0x04;
  1917  000044  8433               	bsf	printf@flag,2,c
  1918                           
  1919                           ;doprnt.c: 581: f++;
  1920  000046  4A1E               	infsnz	printf@f,f,c
  1921  000048  2A1F               	incf	printf@f+1,f,c
  1922                           
  1923                           ;doprnt.c: 582: continue;
  1924  00004A  D001               	goto	l3489
  1925                           
  1926                           ;doprnt.c: 584: }
  1927  00004C  D00B               	goto	l3491
  1928  00004E                     l3489:
  1929  00004E  C01E  FFF6         	movff	printf@f,tblptrl
  1930  000052  C01F  FFF7         	movff	printf@f+1,tblptrh
  1931  000056                     	if	0	;tblptru may be non-zero
  1932  000056                     	endif
  1933  000056                     	if	0	;tblptru may be non-zero
  1934  000056                     	endif
  1935  000056  0008               	tblrd		*
  1936  000058  50F5               	movf	tablat,w,c
  1937                           
  1938                           ; Switch size 1, requested type "space"
  1939                           ; Number of cases is 1, Range of values is 48 to 48
  1940                           ; switch strategies available:
  1941                           ; Name         Instructions Cycles
  1942                           ; simple_byte            4     3 (average)
  1943                           ;	Chosen strategy is simple_byte
  1944  00005A  0A30               	xorlw	48	; case 48
  1945  00005C  B4D8               	btfsc	status,2,c
  1946  00005E  D7F2               	goto	l3485
  1947                           
  1948                           ;doprnt.c: 585: break;
  1949  000060  D001               	goto	l3491
  1950                           
  1951                           ;doprnt.c: 586: }
  1952  000062  D7F5               	goto	l3489
  1953  000064                     l3491:
  1954                           
  1955                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1956  000064  C01E  FFF6         	movff	printf@f,tblptrl
  1957  000068  C01F  FFF7         	movff	printf@f+1,tblptrh
  1958  00006C                     	if	0	;tblptru may be non-zero
  1959  00006C                     	endif
  1960  00006C                     	if	0	;tblptru may be non-zero
  1961  00006C                     	endif
  1962  00006C  0008               	tblrd		*
  1963  00006E  50F5               	movf	tablat,w,c
  1964  000070  ECD1  F009         	call	_isdigit
  1965  000074  A0D8               	btfss	status,0,c
  1966  000076  D03B               	goto	l3507
  1967                           
  1968                           ;doprnt.c: 598: width = 0;
  1969  000078  0E00               	movlw	0
  1970  00007A  6E35               	movwf	printf@width+1,c
  1971  00007C  0E00               	movlw	0
  1972  00007E  6E34               	movwf	printf@width,c
  1973  000080  D000               	goto	l3495
  1974  000082                     l3495:
  1975                           
  1976                           ;doprnt.c: 600: width *= 10;
  1977  000082  C034  F011         	movff	printf@width,___wmul@multiplier
  1978  000086  C035  F012         	movff	printf@width+1,___wmul@multiplier+1
  1979  00008A  0E00               	movlw	0
  1980  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  1981  00008E  0E0A               	movlw	10
  1982  000090  6E13               	movwf	___wmul@multiplicand,c
  1983  000092  ECBD  F009         	call	___wmul	;wreg free
  1984  000096  C011  F034         	movff	?___wmul,printf@width
  1985  00009A  C012  F035         	movff	?___wmul+1,printf@width+1
  1986                           
  1987                           ;doprnt.c: 601: width += *f++ - '0';
  1988  00009E  0ED0               	movlw	208
  1989  0000A0  6E26               	movwf	??_printf& (0+255),c
  1990  0000A2  0EFF               	movlw	255
  1991  0000A4  6E27               	movwf	(??_printf+1)& (0+255),c
  1992  0000A6  C01E  FFF6         	movff	printf@f,tblptrl
  1993  0000AA  C01F  FFF7         	movff	printf@f+1,tblptrh
  1994  0000AE                     	if	0	;tblptru may be non-zero
  1995  0000AE                     	endif
  1996  0000AE                     	if	0	;tblptru may be non-zero
  1997  0000AE                     	endif
  1998  0000AE  0008               	tblrd		*
  1999  0000B0  50F5               	movf	tablat,w,c
  2000  0000B2  6E28               	movwf	(??_printf+2)& (0+255),c
  2001  0000B4  6A29               	clrf	(??_printf+3)& (0+255),c
  2002  0000B6  5026               	movf	??_printf,w,c
  2003  0000B8  2628               	addwf	??_printf+2,f,c
  2004  0000BA  5027               	movf	??_printf+1,w,c
  2005  0000BC  2229               	addwfc	??_printf+3,f,c
  2006  0000BE  5028               	movf	??_printf+2,w,c
  2007  0000C0  2634               	addwf	printf@width,f,c
  2008  0000C2  5029               	movf	??_printf+3,w,c
  2009  0000C4  2235               	addwfc	printf@width+1,f,c
  2010  0000C6  4A1E               	infsnz	printf@f,f,c
  2011  0000C8  2A1F               	incf	printf@f+1,f,c
  2012                           
  2013                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2014  0000CA  C01E  FFF6         	movff	printf@f,tblptrl
  2015  0000CE  C01F  FFF7         	movff	printf@f+1,tblptrh
  2016  0000D2                     	if	0	;tblptru may be non-zero
  2017  0000D2                     	endif
  2018  0000D2                     	if	0	;tblptru may be non-zero
  2019  0000D2                     	endif
  2020  0000D2  0008               	tblrd		*
  2021  0000D4  50F5               	movf	tablat,w,c
  2022  0000D6  ECD1  F009         	call	_isdigit
  2023  0000DA  A0D8               	btfss	status,0,c
  2024  0000DC  D008               	goto	l3507
  2025  0000DE  D7D1               	goto	l3495
  2026                           
  2027                           ;doprnt.c: 635: switch(c = *f++) {
  2028                           
  2029                           ;doprnt.c: 608: }
  2030                           ;doprnt.c: 633: loop:
  2031  0000E0  D006               	goto	l3507
  2032                           
  2033                           ;doprnt.c: 638: goto alldone;
  2034                           
  2035                           ;doprnt.c: 637: case 0:
  2036  0000E2  D0EC               	goto	l407
  2037  0000E4                     l3503:
  2038                           
  2039                           ;doprnt.c: 643: flag |= 0x10;
  2040  0000E4  8833               	bsf	printf@flag,4,c
  2041                           
  2042                           ;doprnt.c: 644: goto loop;
  2043  0000E6  D003               	goto	l3507
  2044                           
  2045                           ;doprnt.c: 723: break;
  2046                           
  2047                           ;doprnt.c: 718: case 'x':
  2048  0000E8  D015               	goto	l386
  2049                           
  2050                           ;doprnt.c: 813: continue;
  2051                           
  2052                           ;doprnt.c: 802: default:
  2053  0000EA  D0DA               	goto	l3561
  2054                           
  2055                           ;doprnt.c: 822: }
  2056  0000EC  D013               	goto	l386
  2057  0000EE                     l3507:
  2058  0000EE  C01E  FFF6         	movff	printf@f,tblptrl
  2059  0000F2  C01F  FFF7         	movff	printf@f+1,tblptrh
  2060  0000F6  4A1E               	infsnz	printf@f,f,c
  2061  0000F8  2A1F               	incf	printf@f+1,f,c
  2062  0000FA                     	if	0	;tblptru may be non-zero
  2063  0000FA                     	endif
  2064  0000FA                     	if	0	;tblptru may be non-zero
  2065  0000FA                     	endif
  2066  0000FA  0008               	tblrd		*
  2067  0000FC  CFF5 F036          	movff	tablat,printf@c
  2068  000100  5036               	movf	printf@c,w,c
  2069                           
  2070                           ; Switch size 1, requested type "space"
  2071                           ; Number of cases is 3, Range of values is 0 to 120
  2072                           ; switch strategies available:
  2073                           ; Name         Instructions Cycles
  2074                           ; simple_byte           10     6 (average)
  2075                           ;	Chosen strategy is simple_byte
  2076  000102  0A00               	xorlw	0	; case 0
  2077  000104  B4D8               	btfsc	status,2,c
  2078  000106  D0DA               	goto	l407
  2079  000108  0A6C               	xorlw	108	; case 108
  2080  00010A  B4D8               	btfsc	status,2,c
  2081  00010C  D7EB               	goto	l3503
  2082  00010E  0A14               	xorlw	20	; case 120
  2083  000110  A4D8               	btfss	status,2,c
  2084  000112  D0C6               	goto	l3561
  2085  000114                     l386:
  2086                           
  2087                           ;doprnt.c: 1273: {
  2088                           ;doprnt.c: 1281: if(flag & 0x10)
  2089  000114  A833               	btfss	printf@flag,4,c
  2090  000116  D00E               	goto	l3513
  2091                           
  2092                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2093  000118  C031  FFD9         	movff	printf@ap,fsr2l
  2094  00011C  C032  FFDA         	movff	printf@ap+1,fsr2h
  2095  000120  CFDE F02D          	movff	postinc2,printf@val
  2096  000124  CFDE F02E          	movff	postinc2,printf@val+1
  2097  000128  CFDE F02F          	movff	postinc2,printf@val+2
  2098  00012C  CFDE F030          	movff	postinc2,printf@val+3
  2099  000130  0E04               	movlw	4
  2100  000132  D00F               	goto	L1
  2101  000134                     l3513:
  2102                           
  2103                           ;doprnt.c: 1283: else
  2104                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2105  000134  C031  FFD9         	movff	printf@ap,fsr2l
  2106  000138  C032  FFDA         	movff	printf@ap+1,fsr2h
  2107  00013C  CFDE F026          	movff	postinc2,??_printf
  2108  000140  CFDD F027          	movff	postdec2,??_printf+1
  2109  000144  C026  F02D         	movff	??_printf,printf@val
  2110  000148  C027  F02E         	movff	??_printf+1,printf@val+1
  2111  00014C  6A2F               	clrf	printf@val+2,c
  2112  00014E  6A30               	clrf	printf@val+3,c
  2113  000150  0E02               	movlw	2
  2114  000152                     L1:
  2115  000152  2631               	addwf	printf@ap,f,c
  2116  000154  0E00               	movlw	0
  2117  000156  2232               	addwfc	printf@ap+1,f,c
  2118  000158  D000               	goto	l3517
  2119  00015A                     l3517:
  2120                           
  2121                           ;doprnt.c: 1287: }
  2122                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2123  00015A  0E01               	movlw	1
  2124  00015C  6E36               	movwf	printf@c,c
  2125  00015E                     l3519:
  2126  00015E  0E08               	movlw	8
  2127  000160  1836               	xorwf	printf@c,w,c
  2128  000162  B4D8               	btfsc	status,2,c
  2129  000164  D01C               	goto	l3531
  2130  000166  D001               	goto	l3523
  2131  000168  D01A               	goto	l3531
  2132  00016A                     l3523:
  2133                           
  2134                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2135  00016A  5036               	movf	printf@c,w,c
  2136  00016C  0D04               	mullw	4
  2137  00016E  0EB8               	movlw	low _hexpowers
  2138  000170  24F3               	addwf	prodl,w,c
  2139  000172  6EF6               	movwf	tblptrl,c
  2140  000174  0EFC               	movlw	high _hexpowers
  2141  000176  20F4               	addwfc	prodh,w,c
  2142  000178  6EF7               	movwf	tblptrh,c
  2143  00017A                     	if	0	;There are less than 3 active tblptr bytes
  2144  00017A                     	endif
  2145  00017A  0009               	tblrd		*+
  2146  00017C  50F5               	movf	tablat,w,c
  2147  00017E  5C2D               	subwf	printf@val,w,c
  2148  000180  0009               	tblrd		*+
  2149  000182  50F5               	movf	tablat,w,c
  2150  000184  582E               	subwfb	printf@val+1,w,c
  2151  000186  0009               	tblrd		*+
  2152  000188  50F5               	movf	tablat,w,c
  2153  00018A  582F               	subwfb	printf@val+2,w,c
  2154  00018C  0009               	tblrd		*+
  2155  00018E  50F5               	movf	tablat,w,c
  2156  000190  5830               	subwfb	printf@val+3,w,c
  2157  000192  A0D8               	btfss	status,0,c
  2158  000194  D004               	goto	l3531
  2159  000196  D001               	goto	l3527
  2160                           
  2161                           ;doprnt.c: 1318: break;
  2162  000198  D002               	goto	l3531
  2163  00019A                     l3527:
  2164  00019A  2A36               	incf	printf@c,f,c
  2165  00019C  D7E0               	goto	l3519
  2166  00019E                     l3531:
  2167                           
  2168                           ;doprnt.c: 1381: if(width > c)
  2169  00019E  0E80               	movlw	128
  2170  0001A0  BE36               	btfsc	printf@c,7,c
  2171  0001A2  0E7F               	movlw	127
  2172  0001A4  6E26               	movwf	??_printf& (0+255),c
  2173  0001A6  5034               	movf	printf@width,w,c
  2174  0001A8  5C36               	subwf	printf@c,w,c
  2175  0001AA  5035               	movf	printf@width+1,w,c
  2176  0001AC  0A80               	xorlw	128
  2177  0001AE  5826               	subwfb	??_printf& (0+255),w,c
  2178  0001B0  B0D8               	btfsc	status,0,c
  2179  0001B2  D007               	goto	l3535
  2180                           
  2181                           ;doprnt.c: 1382: width -= c;
  2182  0001B4  5036               	movf	printf@c,w,c
  2183  0001B6  5E34               	subwf	printf@width,f,c
  2184  0001B8  0E00               	movlw	0
  2185  0001BA  BE36               	btfsc	printf@c,7,c
  2186  0001BC  0EFF               	movlw	255
  2187  0001BE  5A35               	subwfb	printf@width+1,f,c
  2188  0001C0  D005               	goto	l3537
  2189  0001C2                     l3535:
  2190                           
  2191                           ;doprnt.c: 1383: else
  2192                           ;doprnt.c: 1384: width = 0;
  2193  0001C2  0E00               	movlw	0
  2194  0001C4  6E35               	movwf	printf@width+1,c
  2195  0001C6  0E00               	movlw	0
  2196  0001C8  6E34               	movwf	printf@width,c
  2197  0001CA  D000               	goto	l3537
  2198  0001CC                     l3537:
  2199                           
  2200                           ;doprnt.c: 1387: if(flag & 0x04) {
  2201  0001CC  A433               	btfss	printf@flag,2,c
  2202  0001CE  D010               	goto	l3545
  2203                           
  2204                           ;doprnt.c: 1415: if(width)
  2205  0001D0  5034               	movf	printf@width,w,c
  2206  0001D2  1035               	iorwf	printf@width+1,w,c
  2207  0001D4  B4D8               	btfsc	status,2,c
  2208  0001D6  D01C               	goto	l3551
  2209  0001D8                     l3541:
  2210                           
  2211                           ;doprnt.c: 1417: (putch('0') );
  2212  0001D8  0E30               	movlw	48
  2213  0001DA  EC33  F00A         	call	_putch
  2214                           
  2215                           ;doprnt.c: 1418: while(--width);
  2216  0001DE  0634               	decf	printf@width,f,c
  2217  0001E0  A0D8               	btfss	status,0,c
  2218  0001E2  0635               	decf	printf@width+1,f,c
  2219  0001E4  5034               	movf	printf@width,w,c
  2220  0001E6  1035               	iorwf	printf@width+1,w,c
  2221  0001E8  B4D8               	btfsc	status,2,c
  2222  0001EA  D012               	goto	l3551
  2223  0001EC  D7F5               	goto	l3541
  2224                           
  2225                           ;doprnt.c: 1420: } else
  2226  0001EE  D010               	goto	l3551
  2227  0001F0                     l3545:
  2228                           
  2229                           ;doprnt.c: 1422: {
  2230                           ;doprnt.c: 1424: if(width
  2231                           ;doprnt.c: 1428: )
  2232  0001F0  5034               	movf	printf@width,w,c
  2233  0001F2  1035               	iorwf	printf@width+1,w,c
  2234  0001F4  B4D8               	btfsc	status,2,c
  2235  0001F6  D00C               	goto	l3551
  2236  0001F8                     l3547:
  2237                           
  2238                           ;doprnt.c: 1430: (putch(' ') );
  2239  0001F8  0E20               	movlw	32
  2240  0001FA  EC33  F00A         	call	_putch
  2241                           
  2242                           ;doprnt.c: 1431: while(--width);
  2243  0001FE  0634               	decf	printf@width,f,c
  2244  000200  A0D8               	btfss	status,0,c
  2245  000202  0635               	decf	printf@width+1,f,c
  2246  000204  5034               	movf	printf@width,w,c
  2247  000206  1035               	iorwf	printf@width+1,w,c
  2248  000208  B4D8               	btfsc	status,2,c
  2249  00020A  D002               	goto	l3551
  2250  00020C  D7F5               	goto	l3547
  2251  00020E  D000               	goto	l3551
  2252  000210                     l3551:
  2253                           
  2254                           ;doprnt.c: 1469: }
  2255                           ;doprnt.c: 1472: prec = c;
  2256  000210  5036               	movf	printf@c,w,c
  2257  000212  6E2B               	movwf	printf@prec,c
  2258  000214  6A2C               	clrf	printf@prec+1,c
  2259  000216  BE2B               	btfsc	printf@prec,7,c
  2260  000218  062C               	decf	printf@prec+1,f,c
  2261                           
  2262                           ;doprnt.c: 1474: while(prec--) {
  2263  00021A  D038               	goto	l3559
  2264  00021C                     l3553:
  2265                           
  2266                           ;doprnt.c: 1478: {
  2267                           ;doprnt.c: 1499: {
  2268                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2269  00021C  C02D  F011         	movff	printf@val,___lldiv@dividend
  2270  000220  C02E  F012         	movff	printf@val+1,___lldiv@dividend+1
  2271  000224  C02F  F013         	movff	printf@val+2,___lldiv@dividend+2
  2272  000228  C030  F014         	movff	printf@val+3,___lldiv@dividend+3
  2273  00022C  C02B  F026         	movff	printf@prec,??_printf
  2274  000230  C02C  F027         	movff	printf@prec+1,??_printf+1
  2275  000234  90D8               	bcf	status,0,c
  2276  000236  3626               	rlcf	??_printf,f,c
  2277  000238  3627               	rlcf	??_printf+1,f,c
  2278  00023A  90D8               	bcf	status,0,c
  2279  00023C  3626               	rlcf	??_printf,f,c
  2280  00023E  3627               	rlcf	??_printf+1,f,c
  2281  000240  0EB8               	movlw	low _hexpowers
  2282  000242  2426               	addwf	??_printf,w,c
  2283  000244  6EF6               	movwf	tblptrl,c
  2284  000246  0EFC               	movlw	high _hexpowers
  2285  000248  2027               	addwfc	??_printf+1,w,c
  2286  00024A  6EF7               	movwf	tblptrh,c
  2287  00024C                     	if	0	;There are less than 3 active tblptr bytes
  2288  00024C                     	endif
  2289  00024C  0009               	tblrd		*+
  2290  00024E  CFF5 F015          	movff	tablat,___lldiv@divisor
  2291  000252  0009               	tblrd		*+
  2292  000254  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2293  000258  0009               	tblrd		*+
  2294  00025A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2295  00025E  000A               	tblrd		*-
  2296  000260  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2297  000264  EC1B  F007         	call	___lldiv	;wreg free
  2298  000268  5011               	movf	?___lldiv,w,c
  2299  00026A  0B0F               	andlw	15
  2300  00026C  6E2A               	movwf	printf@idx,c
  2301                           
  2302                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2303  00026E  502A               	movf	printf@idx,w,c
  2304  000270  0D01               	mullw	1
  2305  000272  0E18               	movlw	low STR_5
  2306  000274  24F3               	addwf	prodl,w,c
  2307  000276  6EF6               	movwf	tblptrl,c
  2308  000278  0EFD               	movlw	high STR_5
  2309  00027A  20F4               	addwfc	prodh,w,c
  2310  00027C  6EF7               	movwf	tblptrh,c
  2311  00027E                     	if	0	;There are less than 3 active tblptr bytes
  2312  00027E                     	endif
  2313  00027E  0008               	tblrd		*
  2314  000280  CFF5 F036          	movff	tablat,printf@c
  2315                           
  2316                           ;doprnt.c: 1508: }
  2317                           ;doprnt.c: 1523: }
  2318                           ;doprnt.c: 1524: (putch(c) );
  2319  000284  5036               	movf	printf@c,w,c
  2320  000286  EC33  F00A         	call	_putch
  2321  00028A  D000               	goto	l3559
  2322  00028C                     l3559:
  2323  00028C  062B               	decf	printf@prec,f,c
  2324  00028E  A0D8               	btfss	status,0,c
  2325  000290  062C               	decf	printf@prec+1,f,c
  2326  000292  282B               	incf	printf@prec,w,c
  2327  000294  E1C3               	bnz	l3553
  2328  000296  282C               	incf	printf@prec+1,w,c
  2329  000298  B4D8               	btfsc	status,2,c
  2330  00029A  D002               	goto	l3561
  2331  00029C  D7BF               	goto	l3553
  2332  00029E  D000               	goto	l3561
  2333  0002A0                     l3561:
  2334  0002A0  C01E  FFF6         	movff	printf@f,tblptrl
  2335  0002A4  C01F  FFF7         	movff	printf@f+1,tblptrh
  2336  0002A8  4A1E               	infsnz	printf@f,f,c
  2337  0002AA  2A1F               	incf	printf@f+1,f,c
  2338  0002AC                     	if	0	;tblptru may be non-zero
  2339  0002AC                     	endif
  2340  0002AC                     	if	0	;tblptru may be non-zero
  2341  0002AC                     	endif
  2342  0002AC  0008               	tblrd		*
  2343  0002AE  CFF5 F036          	movff	tablat,printf@c
  2344  0002B2  5036               	movf	printf@c,w,c
  2345  0002B4  B4D8               	btfsc	status,2,c
  2346  0002B6  D002               	goto	l407
  2347  0002B8  D6B6               	goto	l3479
  2348  0002BA  D000               	goto	l407
  2349  0002BC                     l407:
  2350  0002BC  0012               	return		;funcret
  2351  0002BE                     __end_of_printf:
  2352                           	opt stack 0
  2353                           tblptru	equ	0xFF8
  2354                           tblptrh	equ	0xFF7
  2355                           tblptrl	equ	0xFF6
  2356                           tablat	equ	0xFF5
  2357                           prodh	equ	0xFF4
  2358                           prodl	equ	0xFF3
  2359                           intcon	equ	0xFF2
  2360                           intcon2	equ	0xFF1
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           postdec1	equ	0xFE5
  2364                           fsr1l	equ	0xFE1
  2365                           postinc2	equ	0xFDE
  2366                           postdec2	equ	0xFDD
  2367                           fsr2h	equ	0xFDA
  2368                           fsr2l	equ	0xFD9
  2369                           status	equ	0xFD8
  2370                           
  2371 ;; *************** function _putch *****************
  2372 ;; Defined at:
  2373 ;;		line 117 in file "Lab9_sample_3.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;  c               1    wreg     unsigned char 
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;  c               1   16[COMRAM] unsigned char 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;		None               void
  2380 ;; Registers used:
  2381 ;;		wreg
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;Total ram usage:        1 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    3
  2394 ;; This function calls:
  2395 ;;		Nothing
  2396 ;; This function is called by:
  2397 ;;		_printf
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text2
  2402  001466                     __ptext2:
  2403                           	opt stack 0
  2404  001466                     _putch:
  2405                           	opt stack 26
  2406                           
  2407                           ;incstack = 0
  2408                           ;putch@c stored from wreg
  2409  001466  6E11               	movwf	putch@c,c
  2410                           
  2411                           ;Lab9_sample_3.c: 119: while (!TRMT);
  2412  001468  D000               	goto	l95
  2413  00146A                     l95:
  2414  00146A  A2AC               	btfss	4012,1,c	;volatile
  2415  00146C  D7FE               	goto	l95
  2416                           
  2417                           ;Lab9_sample_3.c: 120: TXREG = c;
  2418  00146E  C011  FFAD         	movff	putch@c,4013	;volatile
  2419  001472  0012               	return		;funcret
  2420  001474                     __end_of_putch:
  2421                           	opt stack 0
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           prodh	equ	0xFF4
  2427                           prodl	equ	0xFF3
  2428                           intcon	equ	0xFF2
  2429                           intcon2	equ	0xFF1
  2430                           postinc0	equ	0xFEE
  2431                           wreg	equ	0xFE8
  2432                           postdec1	equ	0xFE5
  2433                           fsr1l	equ	0xFE1
  2434                           postinc2	equ	0xFDE
  2435                           postdec2	equ	0xFDD
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _isdigit *****************
  2441 ;; Defined at:
  2442 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  c               1    wreg     unsigned char 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  c               1   18[COMRAM] unsigned char 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;		None               void
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;Total ram usage:        3 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    3
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_printf
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text3
  2471  0013A2                     __ptext3:
  2472                           	opt stack 0
  2473  0013A2                     _isdigit:
  2474                           	opt stack 26
  2475                           
  2476                           ;incstack = 0
  2477                           ;isdigit@c stored from wreg
  2478  0013A2  6E13               	movwf	isdigit@c,c
  2479  0013A4  0E00               	movlw	0
  2480  0013A6  6E12               	movwf	_isdigit$1509,c
  2481  0013A8  0E3A               	movlw	58
  2482  0013AA  6013               	cpfslt	isdigit@c,c
  2483  0013AC  D006               	goto	l2563
  2484  0013AE  0E2F               	movlw	47
  2485  0013B0  6413               	cpfsgt	isdigit@c,c
  2486  0013B2  D003               	goto	l2563
  2487  0013B4  0E01               	movlw	1
  2488  0013B6  6E12               	movwf	_isdigit$1509,c
  2489  0013B8  D000               	goto	l2563
  2490  0013BA                     l2563:
  2491  0013BA  C012  F011         	movff	_isdigit$1509,??_isdigit
  2492  0013BE  3011               	rrcf	??_isdigit,w,c
  2493  0013C0  D000               	goto	l874
  2494  0013C2                     l874:
  2495  0013C2  0012               	return		;funcret
  2496  0013C4                     __end_of_isdigit:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           prodh	equ	0xFF4
  2503                           prodl	equ	0xFF3
  2504                           intcon	equ	0xFF2
  2505                           intcon2	equ	0xFF1
  2506                           postinc0	equ	0xFEE
  2507                           wreg	equ	0xFE8
  2508                           postdec1	equ	0xFE5
  2509                           fsr1l	equ	0xFE1
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           fsr2h	equ	0xFDA
  2513                           fsr2l	equ	0xFD9
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function ___lldiv *****************
  2517 ;; Defined at:
  2518 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  dividend        4   16[COMRAM] unsigned long 
  2521 ;;  divisor         4   20[COMRAM] unsigned long 
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  quotient        4   24[COMRAM] unsigned long 
  2524 ;;  counter         1   28[COMRAM] unsigned char 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  4   16[COMRAM] unsigned long 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2534 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;Total ram usage:       13 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    3
  2541 ;; This function calls:
  2542 ;;		Nothing
  2543 ;; This function is called by:
  2544 ;;		_printf
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text4
  2549  000E36                     __ptext4:
  2550                           	opt stack 0
  2551  000E36                     ___lldiv:
  2552                           	opt stack 26
  2553                           
  2554                           ;incstack = 0
  2555  000E36  0E00               	movlw	0
  2556  000E38  6E19               	movwf	___lldiv@quotient,c
  2557  000E3A  0E00               	movlw	0
  2558  000E3C  6E1A               	movwf	___lldiv@quotient+1,c
  2559  000E3E  0E00               	movlw	0
  2560  000E40  6E1B               	movwf	___lldiv@quotient+2,c
  2561  000E42  0E00               	movlw	0
  2562  000E44  6E1C               	movwf	___lldiv@quotient+3,c
  2563  000E46  5015               	movf	___lldiv@divisor,w,c
  2564  000E48  1016               	iorwf	___lldiv@divisor+1,w,c
  2565  000E4A  1017               	iorwf	___lldiv@divisor+2,w,c
  2566  000E4C  1018               	iorwf	___lldiv@divisor+3,w,c
  2567  000E4E  B4D8               	btfsc	status,2,c
  2568  000E50  D02F               	goto	l903
  2569  000E52  0E01               	movlw	1
  2570  000E54  6E1D               	movwf	___lldiv@counter,c
  2571  000E56  D007               	goto	l2575
  2572  000E58                     l2573:
  2573  000E58  90D8               	bcf	status,0,c
  2574  000E5A  3615               	rlcf	___lldiv@divisor,f,c
  2575  000E5C  3616               	rlcf	___lldiv@divisor+1,f,c
  2576  000E5E  3617               	rlcf	___lldiv@divisor+2,f,c
  2577  000E60  3618               	rlcf	___lldiv@divisor+3,f,c
  2578  000E62  2A1D               	incf	___lldiv@counter,f,c
  2579  000E64  D000               	goto	l2575
  2580  000E66                     l2575:
  2581  000E66  BE18               	btfsc	___lldiv@divisor+3,7,c
  2582  000E68  D002               	goto	l2577
  2583  000E6A  D7F6               	goto	l2573
  2584  000E6C  D000               	goto	l2577
  2585  000E6E                     l2577:
  2586  000E6E  90D8               	bcf	status,0,c
  2587  000E70  3619               	rlcf	___lldiv@quotient,f,c
  2588  000E72  361A               	rlcf	___lldiv@quotient+1,f,c
  2589  000E74  361B               	rlcf	___lldiv@quotient+2,f,c
  2590  000E76  361C               	rlcf	___lldiv@quotient+3,f,c
  2591  000E78  5015               	movf	___lldiv@divisor,w,c
  2592  000E7A  5C11               	subwf	___lldiv@dividend,w,c
  2593  000E7C  5016               	movf	___lldiv@divisor+1,w,c
  2594  000E7E  5812               	subwfb	___lldiv@dividend+1,w,c
  2595  000E80  5017               	movf	___lldiv@divisor+2,w,c
  2596  000E82  5813               	subwfb	___lldiv@dividend+2,w,c
  2597  000E84  5018               	movf	___lldiv@divisor+3,w,c
  2598  000E86  5814               	subwfb	___lldiv@dividend+3,w,c
  2599  000E88  A0D8               	btfss	status,0,c
  2600  000E8A  D00A               	goto	l2585
  2601  000E8C  5015               	movf	___lldiv@divisor,w,c
  2602  000E8E  5E11               	subwf	___lldiv@dividend,f,c
  2603  000E90  5016               	movf	___lldiv@divisor+1,w,c
  2604  000E92  5A12               	subwfb	___lldiv@dividend+1,f,c
  2605  000E94  5017               	movf	___lldiv@divisor+2,w,c
  2606  000E96  5A13               	subwfb	___lldiv@dividend+2,f,c
  2607  000E98  5018               	movf	___lldiv@divisor+3,w,c
  2608  000E9A  5A14               	subwfb	___lldiv@dividend+3,f,c
  2609  000E9C  8019               	bsf	___lldiv@quotient,0,c
  2610  000E9E  D000               	goto	l2585
  2611  000EA0                     l2585:
  2612  000EA0  90D8               	bcf	status,0,c
  2613  000EA2  3218               	rrcf	___lldiv@divisor+3,f,c
  2614  000EA4  3217               	rrcf	___lldiv@divisor+2,f,c
  2615  000EA6  3216               	rrcf	___lldiv@divisor+1,f,c
  2616  000EA8  3215               	rrcf	___lldiv@divisor,f,c
  2617  000EAA  2E1D               	decfsz	___lldiv@counter,f,c
  2618  000EAC  D7E0               	goto	l2577
  2619  000EAE  D000               	goto	l903
  2620  000EB0                     l903:
  2621  000EB0  C019  F011         	movff	___lldiv@quotient,?___lldiv
  2622  000EB4  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  2623  000EB8  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  2624  000EBC  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  2625  000EC0  0012               	return		;funcret
  2626  000EC2                     __end_of___lldiv:
  2627                           	opt stack 0
  2628                           tblptru	equ	0xFF8
  2629                           tblptrh	equ	0xFF7
  2630                           tblptrl	equ	0xFF6
  2631                           tablat	equ	0xFF5
  2632                           prodh	equ	0xFF4
  2633                           prodl	equ	0xFF3
  2634                           intcon	equ	0xFF2
  2635                           intcon2	equ	0xFF1
  2636                           postinc0	equ	0xFEE
  2637                           wreg	equ	0xFE8
  2638                           postdec1	equ	0xFE5
  2639                           fsr1l	equ	0xFE1
  2640                           postinc2	equ	0xFDE
  2641                           postdec2	equ	0xFDD
  2642                           fsr2h	equ	0xFDA
  2643                           fsr2l	equ	0xFD9
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _init_UART *****************
  2647 ;; Defined at:
  2648 ;;		line 122 in file "Lab9_sample_3.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;		None
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;		None
  2653 ;; Return value:  Size  Location     Type
  2654 ;;		None               void
  2655 ;; Registers used:
  2656 ;;		wreg, status,2, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;Total ram usage:        0 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    4
  2669 ;; This function calls:
  2670 ;;		_OpenUSART
  2671 ;; This function is called by:
  2672 ;;		_main
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           	psect	text5
  2677  00140C                     __ptext5:
  2678                           	opt stack 0
  2679  00140C                     _init_UART:
  2680                           	opt stack 26
  2681                           
  2682                           ;Lab9_sample_3.c: 124: OpenUSART (0b01111111 & 0b10111111 &
  2683                           ;Lab9_sample_3.c: 125: 0b11111110 & 0b11111101 & 0b11111111 &
  2684                           ;Lab9_sample_3.c: 126: 0b11111111, 25);
  2685                           
  2686                           ;incstack = 0
  2687  00140C  0E00               	movlw	0
  2688  00140E  6E12               	movwf	OpenUSART@spbrg+1,c
  2689  001410  0E19               	movlw	25
  2690  001412  6E11               	movwf	OpenUSART@spbrg,c
  2691  001414  0E3C               	movlw	60
  2692  001416  EC63  F008         	call	_OpenUSART
  2693                           
  2694                           ;Lab9_sample_3.c: 127: OSCCON = 0x60;
  2695  00141A  0E60               	movlw	96
  2696  00141C  6ED3               	movwf	4051,c	;volatile
  2697  00141E  0012               	return		;funcret
  2698  001420                     __end_of_init_UART:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           intcon	equ	0xFF2
  2707                           intcon2	equ	0xFF1
  2708                           postinc0	equ	0xFEE
  2709                           wreg	equ	0xFE8
  2710                           postdec1	equ	0xFE5
  2711                           fsr1l	equ	0xFE1
  2712                           postinc2	equ	0xFDE
  2713                           postdec2	equ	0xFDD
  2714                           fsr2h	equ	0xFDA
  2715                           fsr2l	equ	0xFD9
  2716                           status	equ	0xFD8
  2717                           
  2718 ;; *************** function _OpenUSART *****************
  2719 ;; Defined at:
  2720 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  config          1    wreg     unsigned char 
  2723 ;;  spbrg           2   16[COMRAM] unsigned int 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  config          1   18[COMRAM] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;		None               void
  2728 ;; Registers used:
  2729 ;;		wreg, status,2
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2735 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;Total ram usage:        3 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    3
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_init_UART
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text6
  2750  0010C6                     __ptext6:
  2751                           	opt stack 0
  2752  0010C6                     _OpenUSART:
  2753                           	opt stack 26
  2754                           
  2755                           ;incstack = 0
  2756                           ;OpenUSART@config stored from wreg
  2757  0010C6  6E13               	movwf	OpenUSART@config,c
  2758  0010C8  0E00               	movlw	0
  2759  0010CA  6EAC               	movwf	4012,c	;volatile
  2760  0010CC  0E00               	movlw	0
  2761  0010CE  6EAB               	movwf	4011,c	;volatile
  2762  0010D0  A013               	btfss	OpenUSART@config,0,c
  2763  0010D2  D002               	goto	l2413
  2764  0010D4  88AC               	bsf	4012,4,c	;volatile
  2765  0010D6  D000               	goto	l2413
  2766  0010D8                     l2413:
  2767  0010D8  A213               	btfss	OpenUSART@config,1,c
  2768  0010DA  D003               	goto	l2417
  2769  0010DC  8CAC               	bsf	4012,6,c	;volatile
  2770  0010DE  8CAB               	bsf	4011,6,c	;volatile
  2771  0010E0  D000               	goto	l2417
  2772  0010E2                     l2417:
  2773  0010E2  A413               	btfss	OpenUSART@config,2,c
  2774  0010E4  D002               	goto	l2421
  2775  0010E6  8EAC               	bsf	4012,7,c	;volatile
  2776  0010E8  D000               	goto	l2421
  2777  0010EA                     l2421:
  2778  0010EA  A613               	btfss	OpenUSART@config,3,c
  2779  0010EC  D002               	goto	l431
  2780  0010EE  88AB               	bsf	4011,4,c	;volatile
  2781  0010F0  D002               	goto	l2425
  2782  0010F2                     l431:
  2783  0010F2  8AAB               	bsf	4011,5,c	;volatile
  2784  0010F4  D000               	goto	l2425
  2785  0010F6                     l2425:
  2786  0010F6  B813               	btfsc	OpenUSART@config,4,c
  2787  0010F8  84AC               	bsf	4012,2,c	;volatile
  2788  0010FA  989E               	bcf	3998,4,c	;volatile
  2789  0010FC  AA13               	btfss	OpenUSART@config,5,c
  2790  0010FE  D002               	goto	l2433
  2791  001100  86AB               	bsf	4011,3,c	;volatile
  2792  001102  D000               	goto	l2433
  2793  001104                     l2433:
  2794  001104  AC13               	btfss	OpenUSART@config,6,c
  2795  001106  D002               	goto	l435
  2796  001108  8A9D               	bsf	3997,5,c	;volatile
  2797  00110A  D001               	goto	l436
  2798  00110C                     l435:
  2799  00110C  9A9D               	bcf	3997,5,c	;volatile
  2800  00110E                     l436:
  2801  00110E  9A9E               	bcf	3998,5,c	;volatile
  2802  001110  AE13               	btfss	OpenUSART@config,7,c
  2803  001112  D002               	goto	l437
  2804  001114  889D               	bsf	3997,4,c	;volatile
  2805  001116  D001               	goto	l438
  2806  001118                     l437:
  2807  001118  989D               	bcf	3997,4,c	;volatile
  2808  00111A                     l438:
  2809  00111A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2810  00111E  5012               	movf	OpenUSART@spbrg+1,w,c
  2811  001120  6EB0               	movwf	4016,c	;volatile
  2812  001122  8AAC               	bsf	4012,5,c	;volatile
  2813  001124  8EAB               	bsf	4011,7,c	;volatile
  2814  001126  9C94               	bcf	3988,6,c	;volatile
  2815  001128  8E94               	bsf	3988,7,c	;volatile
  2816  00112A  B8AC               	btfsc	4012,4,c	;volatile
  2817  00112C  BEAC               	btfsc	4012,7,c	;volatile
  2818  00112E  D002               	goto	l440
  2819  001130  8C94               	bsf	3988,6,c	;volatile
  2820  001132  D000               	goto	l440
  2821  001134                     l440:
  2822  001134  0012               	return		;funcret
  2823  001136                     __end_of_OpenUSART:
  2824                           	opt stack 0
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           prodh	equ	0xFF4
  2830                           prodl	equ	0xFF3
  2831                           intcon	equ	0xFF2
  2832                           intcon2	equ	0xFF1
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           postdec1	equ	0xFE5
  2836                           fsr1l	equ	0xFE1
  2837                           postinc2	equ	0xFDE
  2838                           postdec2	equ	0xFDD
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _fillCircle *****************
  2844 ;; Defined at:
  2845 ;;		line 651 in file "ST7735_TFT.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  x0              2   58[COMRAM] int 
  2848 ;;  y0              2   60[COMRAM] int 
  2849 ;;  r               2   62[COMRAM] int 
  2850 ;;  color           2   64[COMRAM] unsigned int 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;		None               void
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2862 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;Total ram usage:        8 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    8
  2869 ;; This function calls:
  2870 ;;		_drawFastVLine
  2871 ;;		_fillCircleHelper
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text7
  2878  001136                     __ptext7:
  2879                           	opt stack 0
  2880  001136                     _fillCircle:
  2881                           	opt stack 22
  2882                           
  2883                           ;ST7735_TFT.c: 653: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  2884                           
  2885                           ;incstack = 0
  2886  001136  503F               	movf	fillCircle@r,w,c
  2887  001138  0800               	sublw	0
  2888  00113A  243D               	addwf	fillCircle@y0,w,c
  2889  00113C  6E18               	movwf	drawFastVLine@y,c
  2890  00113E  80D8               	bsf	status,0,c
  2891  001140  343F               	rlcf	fillCircle@r,w,c
  2892  001142  6E19               	movwf	drawFastVLine@h,c
  2893  001144  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  2894  001148  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  2895  00114C  503B               	movf	fillCircle@x0,w,c
  2896  00114E  EC61  F007         	call	_drawFastVLine
  2897                           
  2898                           ;ST7735_TFT.c: 654: fillCircleHelper(x0, y0, r, 3, 0, color);
  2899  001152  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  2900  001156  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  2901  00115A  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  2902  00115E  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  2903  001162  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  2904  001166  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  2905  00116A  0E00               	movlw	0
  2906  00116C  6E2A               	movwf	fillCircleHelper@cornername+1,c
  2907  00116E  0E03               	movlw	3
  2908  001170  6E29               	movwf	fillCircleHelper@cornername,c
  2909  001172  0E00               	movlw	0
  2910  001174  6E2C               	movwf	fillCircleHelper@delta+1,c
  2911  001176  0E00               	movlw	0
  2912  001178  6E2B               	movwf	fillCircleHelper@delta,c
  2913  00117A  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  2914  00117E  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  2915  001182  EC44  F004         	call	_fillCircleHelper	;wreg free
  2916  001186  0012               	return		;funcret
  2917  001188                     __end_of_fillCircle:
  2918                           	opt stack 0
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           prodh	equ	0xFF4
  2924                           prodl	equ	0xFF3
  2925                           intcon	equ	0xFF2
  2926                           intcon2	equ	0xFF1
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1l	equ	0xFE1
  2931                           postinc2	equ	0xFDE
  2932                           postdec2	equ	0xFDD
  2933                           fsr2h	equ	0xFDA
  2934                           fsr2l	equ	0xFD9
  2935                           status	equ	0xFD8
  2936                           
  2937 ;; *************** function _fillCircleHelper *****************
  2938 ;; Defined at:
  2939 ;;		line 626 in file "ST7735_TFT.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  x0              2   34[COMRAM] int 
  2942 ;;  y0              2   36[COMRAM] int 
  2943 ;;  r               2   38[COMRAM] int 
  2944 ;;  cornername      2   40[COMRAM] unsigned int 
  2945 ;;  delta           2   42[COMRAM] int 
  2946 ;;  color           2   44[COMRAM] unsigned int 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  y               2   56[COMRAM] int 
  2949 ;;  x               2   54[COMRAM] int 
  2950 ;;  f               2   52[COMRAM] int 
  2951 ;;  ddF_y           2   50[COMRAM] int 
  2952 ;;  ddF_x           2   48[COMRAM] int 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;		None               void
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2962 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;Total ram usage:       24 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    7
  2969 ;; This function calls:
  2970 ;;		_drawFastVLine
  2971 ;; This function is called by:
  2972 ;;		_fillCircle
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text8
  2977  000888                     __ptext8:
  2978                           	opt stack 0
  2979  000888                     _fillCircleHelper:
  2980                           	opt stack 22
  2981                           
  2982                           ;ST7735_TFT.c: 628: signed int f, ddF_x, ddF_y, x, y;
  2983                           ;ST7735_TFT.c: 629: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  2984                           
  2985                           ;incstack = 0
  2986  000888  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2987  00088C  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  2988  000890  1E2F               	comf	??_fillCircleHelper,f,c
  2989  000892  1E30               	comf	??_fillCircleHelper+1,f,c
  2990  000894  4A2F               	infsnz	??_fillCircleHelper,f,c
  2991  000896  2A30               	incf	??_fillCircleHelper+1,f,c
  2992  000898  0E01               	movlw	1
  2993  00089A  242F               	addwf	??_fillCircleHelper,w,c
  2994  00089C  6E35               	movwf	fillCircleHelper@f,c
  2995  00089E  0E00               	movlw	0
  2996  0008A0  2030               	addwfc	??_fillCircleHelper+1,w,c
  2997  0008A2  6E36               	movwf	fillCircleHelper@f+1,c
  2998  0008A4  0E00               	movlw	0
  2999  0008A6  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3000  0008A8  0E01               	movlw	1
  3001  0008AA  6E31               	movwf	fillCircleHelper@ddF_x,c
  3002  0008AC  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3003  0008B0  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3004  0008B4  90D8               	bcf	status,0,c
  3005  0008B6  362F               	rlcf	??_fillCircleHelper,f,c
  3006  0008B8  3630               	rlcf	??_fillCircleHelper+1,f,c
  3007  0008BA  1E2F               	comf	??_fillCircleHelper,f,c
  3008  0008BC  1E30               	comf	??_fillCircleHelper+1,f,c
  3009  0008BE  4A2F               	infsnz	??_fillCircleHelper,f,c
  3010  0008C0  2A30               	incf	??_fillCircleHelper+1,f,c
  3011  0008C2  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3012  0008C6  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3013  0008CA  0E00               	movlw	0
  3014  0008CC  6E38               	movwf	fillCircleHelper@x+1,c
  3015  0008CE  0E00               	movlw	0
  3016  0008D0  6E37               	movwf	fillCircleHelper@x,c
  3017  0008D2  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3018  0008D6  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3019                           
  3020                           ;ST7735_TFT.c: 630: while (x<y) {
  3021  0008DA  D067               	goto	l3461
  3022  0008DC                     l3441:
  3023                           
  3024                           ;ST7735_TFT.c: 631: if (f >= 0) {
  3025  0008DC  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3026  0008DE  D00B               	goto	l323
  3027                           
  3028                           ;ST7735_TFT.c: 632: y--;
  3029  0008E0  0639               	decf	fillCircleHelper@y,f,c
  3030  0008E2  A0D8               	btfss	status,0,c
  3031  0008E4  063A               	decf	fillCircleHelper@y+1,f,c
  3032                           
  3033                           ;ST7735_TFT.c: 633: ddF_y += 2;
  3034  0008E6  0E02               	movlw	2
  3035  0008E8  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3036  0008EA  0E00               	movlw	0
  3037  0008EC  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3038                           
  3039                           ;ST7735_TFT.c: 634: f += ddF_y;
  3040  0008EE  5033               	movf	fillCircleHelper@ddF_y,w,c
  3041  0008F0  2635               	addwf	fillCircleHelper@f,f,c
  3042  0008F2  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3043  0008F4  2236               	addwfc	fillCircleHelper@f+1,f,c
  3044  0008F6                     l323:
  3045                           
  3046                           ;ST7735_TFT.c: 635: }
  3047                           ;ST7735_TFT.c: 636: x++;
  3048  0008F6  4A37               	infsnz	fillCircleHelper@x,f,c
  3049  0008F8  2A38               	incf	fillCircleHelper@x+1,f,c
  3050                           
  3051                           ;ST7735_TFT.c: 637: ddF_x += 2;
  3052  0008FA  0E02               	movlw	2
  3053  0008FC  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3054  0008FE  0E00               	movlw	0
  3055  000900  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3056                           
  3057                           ;ST7735_TFT.c: 638: f += ddF_x;
  3058  000902  5031               	movf	fillCircleHelper@ddF_x,w,c
  3059  000904  2635               	addwf	fillCircleHelper@f,f,c
  3060  000906  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3061  000908  2236               	addwfc	fillCircleHelper@f+1,f,c
  3062                           
  3063                           ;ST7735_TFT.c: 640: if (cornername & 0x1) {
  3064  00090A  A029               	btfss	fillCircleHelper@cornername,0,c
  3065  00090C  D025               	goto	l3457
  3066                           
  3067                           ;ST7735_TFT.c: 641: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3068  00090E  5039               	movf	fillCircleHelper@y,w,c
  3069  000910  0800               	sublw	0
  3070  000912  2425               	addwf	fillCircleHelper@y0,w,c
  3071  000914  6E18               	movwf	drawFastVLine@y,c
  3072  000916  5039               	movf	fillCircleHelper@y,w,c
  3073  000918  2439               	addwf	fillCircleHelper@y,w,c
  3074  00091A  242B               	addwf	fillCircleHelper@delta,w,c
  3075  00091C  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3076  00091E  282F               	incf	??_fillCircleHelper,w,c
  3077  000920  6E19               	movwf	drawFastVLine@h,c
  3078  000922  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3079  000926  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3080  00092A  5023               	movf	fillCircleHelper@x0,w,c
  3081  00092C  2437               	addwf	fillCircleHelper@x,w,c
  3082  00092E  EC61  F007         	call	_drawFastVLine
  3083                           
  3084                           ;ST7735_TFT.c: 642: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3085  000932  5037               	movf	fillCircleHelper@x,w,c
  3086  000934  0800               	sublw	0
  3087  000936  2425               	addwf	fillCircleHelper@y0,w,c
  3088  000938  6E18               	movwf	drawFastVLine@y,c
  3089  00093A  5037               	movf	fillCircleHelper@x,w,c
  3090  00093C  2437               	addwf	fillCircleHelper@x,w,c
  3091  00093E  242B               	addwf	fillCircleHelper@delta,w,c
  3092  000940  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3093  000942  282F               	incf	??_fillCircleHelper,w,c
  3094  000944  6E19               	movwf	drawFastVLine@h,c
  3095  000946  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3096  00094A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3097  00094E  5023               	movf	fillCircleHelper@x0,w,c
  3098  000950  2439               	addwf	fillCircleHelper@y,w,c
  3099  000952  EC61  F007         	call	_drawFastVLine
  3100  000956  D000               	goto	l3457
  3101  000958                     l3457:
  3102                           
  3103                           ;ST7735_TFT.c: 643: }
  3104                           ;ST7735_TFT.c: 644: if (cornername & 0x2) {
  3105  000958  A229               	btfss	fillCircleHelper@cornername,1,c
  3106  00095A  D027               	goto	l3461
  3107                           
  3108                           ;ST7735_TFT.c: 645: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3109  00095C  5039               	movf	fillCircleHelper@y,w,c
  3110  00095E  0800               	sublw	0
  3111  000960  2425               	addwf	fillCircleHelper@y0,w,c
  3112  000962  6E18               	movwf	drawFastVLine@y,c
  3113  000964  5039               	movf	fillCircleHelper@y,w,c
  3114  000966  2439               	addwf	fillCircleHelper@y,w,c
  3115  000968  242B               	addwf	fillCircleHelper@delta,w,c
  3116  00096A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3117  00096C  282F               	incf	??_fillCircleHelper,w,c
  3118  00096E  6E19               	movwf	drawFastVLine@h,c
  3119  000970  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3120  000974  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3121  000978  5037               	movf	fillCircleHelper@x,w,c
  3122  00097A  0800               	sublw	0
  3123  00097C  2423               	addwf	fillCircleHelper@x0,w,c
  3124  00097E  EC61  F007         	call	_drawFastVLine
  3125                           
  3126                           ;ST7735_TFT.c: 646: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3127  000982  5037               	movf	fillCircleHelper@x,w,c
  3128  000984  0800               	sublw	0
  3129  000986  2425               	addwf	fillCircleHelper@y0,w,c
  3130  000988  6E18               	movwf	drawFastVLine@y,c
  3131  00098A  5037               	movf	fillCircleHelper@x,w,c
  3132  00098C  2437               	addwf	fillCircleHelper@x,w,c
  3133  00098E  242B               	addwf	fillCircleHelper@delta,w,c
  3134  000990  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3135  000992  282F               	incf	??_fillCircleHelper,w,c
  3136  000994  6E19               	movwf	drawFastVLine@h,c
  3137  000996  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3138  00099A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3139  00099E  5039               	movf	fillCircleHelper@y,w,c
  3140  0009A0  0800               	sublw	0
  3141  0009A2  2423               	addwf	fillCircleHelper@x0,w,c
  3142  0009A4  EC61  F007         	call	_drawFastVLine
  3143  0009A8  D000               	goto	l3461
  3144  0009AA                     l3461:
  3145  0009AA  5039               	movf	fillCircleHelper@y,w,c
  3146  0009AC  5C37               	subwf	fillCircleHelper@x,w,c
  3147  0009AE  5038               	movf	fillCircleHelper@x+1,w,c
  3148  0009B0  0A80               	xorlw	128
  3149  0009B2  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3150  0009B4  503A               	movf	fillCircleHelper@y+1,w,c
  3151  0009B6  0A80               	xorlw	128
  3152  0009B8  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3153  0009BA  A0D8               	btfss	status,0,c
  3154  0009BC  D78F               	goto	l3441
  3155  0009BE  0012               	return		;funcret
  3156  0009C0                     __end_of_fillCircleHelper:
  3157                           	opt stack 0
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           prodh	equ	0xFF4
  3163                           prodl	equ	0xFF3
  3164                           intcon	equ	0xFF2
  3165                           intcon2	equ	0xFF1
  3166                           postinc0	equ	0xFEE
  3167                           wreg	equ	0xFE8
  3168                           postdec1	equ	0xFE5
  3169                           fsr1l	equ	0xFE1
  3170                           postinc2	equ	0xFDE
  3171                           postdec2	equ	0xFDD
  3172                           fsr2h	equ	0xFDA
  3173                           fsr2l	equ	0xFD9
  3174                           status	equ	0xFD8
  3175                           
  3176 ;; *************** function _drawCircle *****************
  3177 ;; Defined at:
  3178 ;;		line 565 in file "ST7735_TFT.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  x0              2   27[COMRAM] int 
  3181 ;;  y0              2   29[COMRAM] int 
  3182 ;;  r               2   31[COMRAM] int 
  3183 ;;  color           2   33[COMRAM] unsigned int 
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;  y               2   45[COMRAM] int 
  3186 ;;  x               2   43[COMRAM] int 
  3187 ;;  f               2   41[COMRAM] int 
  3188 ;;  ddF_y           2   39[COMRAM] int 
  3189 ;;  ddF_x           2   37[COMRAM] int 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3199 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;Total ram usage:       20 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    7
  3206 ;; This function calls:
  3207 ;;		_drawPixel
  3208 ;; This function is called by:
  3209 ;;		_main
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text9
  3214  0002BE                     __ptext9:
  3215                           	opt stack 0
  3216  0002BE                     _drawCircle:
  3217                           	opt stack 23
  3218                           
  3219                           ;ST7735_TFT.c: 567: signed int f, ddF_x, ddF_y, x, y;
  3220                           ;ST7735_TFT.c: 568: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3221                           
  3222                           ;incstack = 0
  3223  0002BE  C020  F024         	movff	drawCircle@r,??_drawCircle
  3224  0002C2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3225  0002C6  1E24               	comf	??_drawCircle,f,c
  3226  0002C8  1E25               	comf	??_drawCircle+1,f,c
  3227  0002CA  4A24               	infsnz	??_drawCircle,f,c
  3228  0002CC  2A25               	incf	??_drawCircle+1,f,c
  3229  0002CE  0E01               	movlw	1
  3230  0002D0  2424               	addwf	??_drawCircle,w,c
  3231  0002D2  6E2A               	movwf	drawCircle@f,c
  3232  0002D4  0E00               	movlw	0
  3233  0002D6  2025               	addwfc	??_drawCircle+1,w,c
  3234  0002D8  6E2B               	movwf	drawCircle@f+1,c
  3235  0002DA  0E00               	movlw	0
  3236  0002DC  6E27               	movwf	drawCircle@ddF_x+1,c
  3237  0002DE  0E01               	movlw	1
  3238  0002E0  6E26               	movwf	drawCircle@ddF_x,c
  3239  0002E2  C020  F024         	movff	drawCircle@r,??_drawCircle
  3240  0002E6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3241  0002EA  90D8               	bcf	status,0,c
  3242  0002EC  3624               	rlcf	??_drawCircle,f,c
  3243  0002EE  3625               	rlcf	??_drawCircle+1,f,c
  3244  0002F0  1E24               	comf	??_drawCircle,f,c
  3245  0002F2  1E25               	comf	??_drawCircle+1,f,c
  3246  0002F4  4A24               	infsnz	??_drawCircle,f,c
  3247  0002F6  2A25               	incf	??_drawCircle+1,f,c
  3248  0002F8  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3249  0002FC  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3250  000300  0E00               	movlw	0
  3251  000302  6E2D               	movwf	drawCircle@x+1,c
  3252  000304  0E00               	movlw	0
  3253  000306  6E2C               	movwf	drawCircle@x,c
  3254  000308  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3255  00030C  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3256                           
  3257                           ;ST7735_TFT.c: 569: drawPixel(x0 , y0 + r, color);
  3258  000310  501E               	movf	drawCircle@y0,w,c
  3259  000312  2420               	addwf	drawCircle@r,w,c
  3260  000314  6E18               	movwf	drawPixel@y,c
  3261  000316  C022  F019         	movff	drawCircle@color,drawPixel@color
  3262  00031A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3263  00031E  501C               	movf	drawCircle@x0,w,c
  3264  000320  EC90  F009         	call	_drawPixel
  3265                           
  3266                           ;ST7735_TFT.c: 570: drawPixel(x0 , y0 - r, color);
  3267  000324  5020               	movf	drawCircle@r,w,c
  3268  000326  0800               	sublw	0
  3269  000328  241E               	addwf	drawCircle@y0,w,c
  3270  00032A  6E18               	movwf	drawPixel@y,c
  3271  00032C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3272  000330  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3273  000334  501C               	movf	drawCircle@x0,w,c
  3274  000336  EC90  F009         	call	_drawPixel
  3275                           
  3276                           ;ST7735_TFT.c: 571: drawPixel(x0+r, y0 , color);
  3277  00033A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3278  00033E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3279  000342  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3280  000346  501C               	movf	drawCircle@x0,w,c
  3281  000348  2420               	addwf	drawCircle@r,w,c
  3282  00034A  EC90  F009         	call	_drawPixel
  3283                           
  3284                           ;ST7735_TFT.c: 572: drawPixel(x0-r, y0 , color);
  3285  00034E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3286  000352  C022  F019         	movff	drawCircle@color,drawPixel@color
  3287  000356  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3288  00035A  5020               	movf	drawCircle@r,w,c
  3289  00035C  0800               	sublw	0
  3290  00035E  241C               	addwf	drawCircle@x0,w,c
  3291  000360  EC90  F009         	call	_drawPixel
  3292                           
  3293                           ;ST7735_TFT.c: 573: while (x < y) {
  3294  000364  D078               	goto	l3611
  3295  000366                     l3583:
  3296                           
  3297                           ;ST7735_TFT.c: 574: if (f >= 0) {
  3298  000366  BE2B               	btfsc	drawCircle@f+1,7,c
  3299  000368  D00B               	goto	l305
  3300                           
  3301                           ;ST7735_TFT.c: 575: y--;
  3302  00036A  062E               	decf	drawCircle@y,f,c
  3303  00036C  A0D8               	btfss	status,0,c
  3304  00036E  062F               	decf	drawCircle@y+1,f,c
  3305                           
  3306                           ;ST7735_TFT.c: 576: ddF_y += 2;
  3307  000370  0E02               	movlw	2
  3308  000372  2628               	addwf	drawCircle@ddF_y,f,c
  3309  000374  0E00               	movlw	0
  3310  000376  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3311                           
  3312                           ;ST7735_TFT.c: 577: f += ddF_y;
  3313  000378  5028               	movf	drawCircle@ddF_y,w,c
  3314  00037A  262A               	addwf	drawCircle@f,f,c
  3315  00037C  5029               	movf	drawCircle@ddF_y+1,w,c
  3316  00037E  222B               	addwfc	drawCircle@f+1,f,c
  3317  000380                     l305:
  3318                           
  3319                           ;ST7735_TFT.c: 578: }
  3320                           ;ST7735_TFT.c: 579: x++;
  3321  000380  4A2C               	infsnz	drawCircle@x,f,c
  3322  000382  2A2D               	incf	drawCircle@x+1,f,c
  3323                           
  3324                           ;ST7735_TFT.c: 580: ddF_x += 2;
  3325  000384  0E02               	movlw	2
  3326  000386  2626               	addwf	drawCircle@ddF_x,f,c
  3327  000388  0E00               	movlw	0
  3328  00038A  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3329                           
  3330                           ;ST7735_TFT.c: 581: f += ddF_x;
  3331  00038C  5026               	movf	drawCircle@ddF_x,w,c
  3332  00038E  262A               	addwf	drawCircle@f,f,c
  3333  000390  5027               	movf	drawCircle@ddF_x+1,w,c
  3334  000392  222B               	addwfc	drawCircle@f+1,f,c
  3335                           
  3336                           ;ST7735_TFT.c: 582: drawPixel(x0 + x, y0 + y, color);
  3337  000394  501E               	movf	drawCircle@y0,w,c
  3338  000396  242E               	addwf	drawCircle@y,w,c
  3339  000398  6E18               	movwf	drawPixel@y,c
  3340  00039A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3341  00039E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3342  0003A2  501C               	movf	drawCircle@x0,w,c
  3343  0003A4  242C               	addwf	drawCircle@x,w,c
  3344  0003A6  EC90  F009         	call	_drawPixel
  3345                           
  3346                           ;ST7735_TFT.c: 583: drawPixel(x0 - x, y0 + y, color);
  3347  0003AA  501E               	movf	drawCircle@y0,w,c
  3348  0003AC  242E               	addwf	drawCircle@y,w,c
  3349  0003AE  6E18               	movwf	drawPixel@y,c
  3350  0003B0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3351  0003B4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3352  0003B8  502C               	movf	drawCircle@x,w,c
  3353  0003BA  0800               	sublw	0
  3354  0003BC  241C               	addwf	drawCircle@x0,w,c
  3355  0003BE  EC90  F009         	call	_drawPixel
  3356                           
  3357                           ;ST7735_TFT.c: 584: drawPixel(x0 + x, y0 - y, color);
  3358  0003C2  502E               	movf	drawCircle@y,w,c
  3359  0003C4  0800               	sublw	0
  3360  0003C6  241E               	addwf	drawCircle@y0,w,c
  3361  0003C8  6E18               	movwf	drawPixel@y,c
  3362  0003CA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3363  0003CE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3364  0003D2  501C               	movf	drawCircle@x0,w,c
  3365  0003D4  242C               	addwf	drawCircle@x,w,c
  3366  0003D6  EC90  F009         	call	_drawPixel
  3367                           
  3368                           ;ST7735_TFT.c: 585: drawPixel(x0 - x, y0 - y, color);
  3369  0003DA  502E               	movf	drawCircle@y,w,c
  3370  0003DC  0800               	sublw	0
  3371  0003DE  241E               	addwf	drawCircle@y0,w,c
  3372  0003E0  6E18               	movwf	drawPixel@y,c
  3373  0003E2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3374  0003E6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3375  0003EA  502C               	movf	drawCircle@x,w,c
  3376  0003EC  0800               	sublw	0
  3377  0003EE  241C               	addwf	drawCircle@x0,w,c
  3378  0003F0  EC90  F009         	call	_drawPixel
  3379                           
  3380                           ;ST7735_TFT.c: 586: drawPixel(x0 + y, y0 + x, color);
  3381  0003F4  501E               	movf	drawCircle@y0,w,c
  3382  0003F6  242C               	addwf	drawCircle@x,w,c
  3383  0003F8  6E18               	movwf	drawPixel@y,c
  3384  0003FA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3385  0003FE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3386  000402  501C               	movf	drawCircle@x0,w,c
  3387  000404  242E               	addwf	drawCircle@y,w,c
  3388  000406  EC90  F009         	call	_drawPixel
  3389                           
  3390                           ;ST7735_TFT.c: 587: drawPixel(x0 - y, y0 + x, color);
  3391  00040A  501E               	movf	drawCircle@y0,w,c
  3392  00040C  242C               	addwf	drawCircle@x,w,c
  3393  00040E  6E18               	movwf	drawPixel@y,c
  3394  000410  C022  F019         	movff	drawCircle@color,drawPixel@color
  3395  000414  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3396  000418  502E               	movf	drawCircle@y,w,c
  3397  00041A  0800               	sublw	0
  3398  00041C  241C               	addwf	drawCircle@x0,w,c
  3399  00041E  EC90  F009         	call	_drawPixel
  3400                           
  3401                           ;ST7735_TFT.c: 588: drawPixel(x0 + y, y0 - x, color);
  3402  000422  502C               	movf	drawCircle@x,w,c
  3403  000424  0800               	sublw	0
  3404  000426  241E               	addwf	drawCircle@y0,w,c
  3405  000428  6E18               	movwf	drawPixel@y,c
  3406  00042A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3407  00042E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3408  000432  501C               	movf	drawCircle@x0,w,c
  3409  000434  242E               	addwf	drawCircle@y,w,c
  3410  000436  EC90  F009         	call	_drawPixel
  3411                           
  3412                           ;ST7735_TFT.c: 589: drawPixel(x0 - y, y0 - x, color);
  3413  00043A  502C               	movf	drawCircle@x,w,c
  3414  00043C  0800               	sublw	0
  3415  00043E  241E               	addwf	drawCircle@y0,w,c
  3416  000440  6E18               	movwf	drawPixel@y,c
  3417  000442  C022  F019         	movff	drawCircle@color,drawPixel@color
  3418  000446  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3419  00044A  502E               	movf	drawCircle@y,w,c
  3420  00044C  0800               	sublw	0
  3421  00044E  241C               	addwf	drawCircle@x0,w,c
  3422  000450  EC90  F009         	call	_drawPixel
  3423  000454  D000               	goto	l3611
  3424  000456                     l3611:
  3425  000456  502E               	movf	drawCircle@y,w,c
  3426  000458  5C2C               	subwf	drawCircle@x,w,c
  3427  00045A  502D               	movf	drawCircle@x+1,w,c
  3428  00045C  0A80               	xorlw	128
  3429  00045E  6E24               	movwf	??_drawCircle& (0+255),c
  3430  000460  502F               	movf	drawCircle@y+1,w,c
  3431  000462  0A80               	xorlw	128
  3432  000464  5824               	subwfb	??_drawCircle& (0+255),w,c
  3433  000466  A0D8               	btfss	status,0,c
  3434  000468  D77E               	goto	l3583
  3435  00046A  0012               	return		;funcret
  3436  00046C                     __end_of_drawCircle:
  3437                           	opt stack 0
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           prodh	equ	0xFF4
  3443                           prodl	equ	0xFF3
  3444                           intcon	equ	0xFF2
  3445                           intcon2	equ	0xFF1
  3446                           postinc0	equ	0xFEE
  3447                           wreg	equ	0xFE8
  3448                           postdec1	equ	0xFE5
  3449                           fsr1l	equ	0xFE1
  3450                           postinc2	equ	0xFDE
  3451                           postdec2	equ	0xFDD
  3452                           fsr2h	equ	0xFDA
  3453                           fsr2l	equ	0xFD9
  3454                           status	equ	0xFD8
  3455                           
  3456 ;; *************** function _Initialize_Screen *****************
  3457 ;; Defined at:
  3458 ;;		line 315 in file "Lab9_sample_3.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;		None
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;		None
  3463 ;; Return value:  Size  Location     Type
  3464 ;;		None               void
  3465 ;; Registers used:
  3466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;Total ram usage:        0 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:   10
  3479 ;; This function calls:
  3480 ;;		_LCD_Reset
  3481 ;;		_TFT_GreenTab_Initialize
  3482 ;;		_drawtext
  3483 ;;		_fillScreen
  3484 ;;		_strcpy
  3485 ;; This function is called by:
  3486 ;;		_main
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text10
  3491  000DA8                     __ptext10:
  3492                           	opt stack 0
  3493  000DA8                     _Initialize_Screen:
  3494                           	opt stack 20
  3495                           
  3496                           ;Lab9_sample_3.c: 317: LCD_Reset();
  3497                           
  3498                           ;incstack = 0
  3499  000DA8  EC1A  F00A         	call	_LCD_Reset	;wreg free
  3500                           
  3501                           ;Lab9_sample_3.c: 318: TFT_GreenTab_Initialize();
  3502  000DAC  ECA8  F009         	call	_TFT_GreenTab_Initialize	;wreg free
  3503                           
  3504                           ;Lab9_sample_3.c: 319: fillScreen(0x0000);
  3505  000DB0  0E00               	movlw	0
  3506  000DB2  6E25               	movwf	fillScreen@color+1,c
  3507  000DB4  0E00               	movlw	0
  3508  000DB6  6E24               	movwf	fillScreen@color,c
  3509  000DB8  ECE2  F009         	call	_fillScreen	;wreg free
  3510                           
  3511                           ;Lab9_sample_3.c: 322: txt = buffer;
  3512  000DBC  0EAA               	movlw	low _buffer
  3513  000DBE  6E66               	movwf	_txt,c
  3514  000DC0  0E00               	movlw	high _buffer
  3515  000DC2  6E67               	movwf	_txt+1,c
  3516                           
  3517                           ;Lab9_sample_3.c: 323: strcpy(txt, "ECE3301L Fall 21-S3");
  3518  000DC4  C066  F011         	movff	_txt,strcpy@to
  3519  000DC8  C067  F012         	movff	_txt+1,strcpy@to+1
  3520  000DCC  0E04               	movlw	low STR_3
  3521  000DCE  6E13               	movwf	strcpy@from,c
  3522  000DD0  0EFD               	movlw	high STR_3
  3523  000DD2  6E14               	movwf	strcpy@from+1,c
  3524  000DD4  EC77  F009         	call	_strcpy	;wreg free
  3525                           
  3526                           ;Lab9_sample_3.c: 324: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3527  000DD8  0E02               	movlw	2
  3528  000DDA  6E39               	movwf	drawtext@y,c
  3529  000DDC  C066  F03A         	movff	_txt,drawtext@_text
  3530  000DE0  C067  F03B         	movff	_txt+1,drawtext@_text+1
  3531  000DE4  0EFF               	movlw	255
  3532  000DE6  6E3D               	movwf	drawtext@color+1,c
  3533  000DE8  683C               	setf	drawtext@color,c
  3534  000DEA  0E00               	movlw	0
  3535  000DEC  6E3F               	movwf	drawtext@bg+1,c
  3536  000DEE  0E00               	movlw	0
  3537  000DF0  6E3E               	movwf	drawtext@bg,c
  3538  000DF2  0E01               	movlw	1
  3539  000DF4  6E40               	movwf	drawtext@size,c
  3540  000DF6  0E02               	movlw	2
  3541  000DF8  EC68  F005         	call	_drawtext
  3542                           
  3543                           ;Lab9_sample_3.c: 326: strcpy(txt, "LAB 9");
  3544  000DFC  C066  F011         	movff	_txt,strcpy@to
  3545  000E00  C067  F012         	movff	_txt+1,strcpy@to+1
  3546  000E04  0E29               	movlw	low STR_4
  3547  000E06  6E13               	movwf	strcpy@from,c
  3548  000E08  0EFD               	movlw	high STR_4
  3549  000E0A  6E14               	movwf	strcpy@from+1,c
  3550  000E0C  EC77  F009         	call	_strcpy	;wreg free
  3551                           
  3552                           ;Lab9_sample_3.c: 327: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3553  000E10  0E0A               	movlw	10
  3554  000E12  6E39               	movwf	drawtext@y,c
  3555  000E14  C066  F03A         	movff	_txt,drawtext@_text
  3556  000E18  C067  F03B         	movff	_txt+1,drawtext@_text+1
  3557  000E1C  0EFF               	movlw	255
  3558  000E1E  6E3D               	movwf	drawtext@color+1,c
  3559  000E20  683C               	setf	drawtext@color,c
  3560  000E22  0E00               	movlw	0
  3561  000E24  6E3F               	movwf	drawtext@bg+1,c
  3562  000E26  0E00               	movlw	0
  3563  000E28  6E3E               	movwf	drawtext@bg,c
  3564  000E2A  0E01               	movlw	1
  3565  000E2C  6E40               	movwf	drawtext@size,c
  3566  000E2E  0E32               	movlw	50
  3567  000E30  EC68  F005         	call	_drawtext
  3568  000E34  0012               	return		;funcret
  3569  000E36                     __end_of_Initialize_Screen:
  3570                           	opt stack 0
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           intcon	equ	0xFF2
  3578                           intcon2	equ	0xFF1
  3579                           postinc0	equ	0xFEE
  3580                           wreg	equ	0xFE8
  3581                           postdec1	equ	0xFE5
  3582                           fsr1l	equ	0xFE1
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function _strcpy *****************
  3590 ;; Defined at:
  3591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  to              2   16[COMRAM] PTR unsigned char 
  3594 ;;		 -> NULL(0), buffer(31), 
  3595 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3596 ;;		 -> STR_4(6), STR_3(20), 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3599 ;;		 -> NULL(0), buffer(31), 
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  2   16[COMRAM] PTR unsigned char 
  3602 ;; Registers used:
  3603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;Total ram usage:        6 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    3
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_Initialize_Screen
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text11
  3624  0012EE                     __ptext11:
  3625                           	opt stack 0
  3626  0012EE                     _strcpy:
  3627                           	opt stack 26
  3628                           
  3629                           ;incstack = 0
  3630  0012EE  C011  F015         	movff	strcpy@to,strcpy@cp
  3631  0012F2  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3632  0012F6  D005               	goto	l2521
  3633  0012F8                     l2519:
  3634  0012F8  4A15               	infsnz	strcpy@cp,f,c
  3635  0012FA  2A16               	incf	strcpy@cp+1,f,c
  3636  0012FC  4A13               	infsnz	strcpy@from,f,c
  3637  0012FE  2A14               	incf	strcpy@from+1,f,c
  3638  001300  D000               	goto	l2521
  3639  001302                     l2521:
  3640  001302  C013  FFF6         	movff	strcpy@from,tblptrl
  3641  001306  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3642  00130A                     	if	0	;tblptru may be non-zero
  3643  00130A                     	endif
  3644  00130A                     	if	0	;tblptru may be non-zero
  3645  00130A                     	endif
  3646  00130A  C015  FFD9         	movff	strcpy@cp,fsr2l
  3647  00130E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3648  001312  0008               	tblrd		*
  3649  001314  CFF5 FFDF          	movff	tablat,indf2
  3650  001318  50DF               	movf	indf2,w,c
  3651  00131A  A4D8               	btfss	status,2,c
  3652  00131C  D7ED               	goto	l2519
  3653                           
  3654                           ;	Return value of _strcpy is never used
  3655  00131E  0012               	return		;funcret
  3656  001320                     __end_of_strcpy:
  3657                           	opt stack 0
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           prodh	equ	0xFF4
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           intcon2	equ	0xFF1
  3666                           postinc0	equ	0xFEE
  3667                           wreg	equ	0xFE8
  3668                           postdec1	equ	0xFE5
  3669                           fsr1l	equ	0xFE1
  3670                           indf2	equ	0xFDF
  3671                           postinc2	equ	0xFDE
  3672                           postdec2	equ	0xFDD
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677 ;; *************** function _fillScreen *****************
  3678 ;; Defined at:
  3679 ;;		line 656 in file "ST7735_TFT.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  color           2   35[COMRAM] unsigned int 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;		None
  3684 ;; Return value:  Size  Location     Type
  3685 ;;		None               void
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3693 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;Total ram usage:        2 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    7
  3700 ;; This function calls:
  3701 ;;		_fillRectangle
  3702 ;; This function is called by:
  3703 ;;		_Initialize_Screen
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text12
  3708  0013C4                     __ptext12:
  3709                           	opt stack 0
  3710  0013C4                     _fillScreen:
  3711                           	opt stack 22
  3712                           
  3713                           ;ST7735_TFT.c: 658: fillRectangle(0, 0, 128, 160, color);
  3714                           
  3715                           ;incstack = 0
  3716  0013C4  0E00               	movlw	0
  3717  0013C6  6E18               	movwf	fillRectangle@y,c
  3718  0013C8  0E80               	movlw	128
  3719  0013CA  6E19               	movwf	fillRectangle@w,c
  3720  0013CC  0EA0               	movlw	160
  3721  0013CE  6E1A               	movwf	fillRectangle@h,c
  3722  0013D0  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  3723  0013D4  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  3724  0013D8  0E00               	movlw	0
  3725  0013DA  EC66  F006         	call	_fillRectangle
  3726  0013DE  0012               	return		;funcret
  3727  0013E0                     __end_of_fillScreen:
  3728                           	opt stack 0
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           intcon	equ	0xFF2
  3736                           intcon2	equ	0xFF1
  3737                           postinc0	equ	0xFEE
  3738                           wreg	equ	0xFE8
  3739                           postdec1	equ	0xFE5
  3740                           fsr1l	equ	0xFE1
  3741                           indf2	equ	0xFDF
  3742                           postinc2	equ	0xFDE
  3743                           postdec2	equ	0xFDD
  3744                           fsr2h	equ	0xFDA
  3745                           fsr2l	equ	0xFD9
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function _fillRectangle *****************
  3749 ;; Defined at:
  3750 ;;		line 540 in file "ST7735_TFT.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  x               1    wreg     unsigned char 
  3753 ;;  y               1   23[COMRAM] unsigned char 
  3754 ;;  w               1   24[COMRAM] unsigned char 
  3755 ;;  h               1   25[COMRAM] unsigned char 
  3756 ;;  color           2   26[COMRAM] unsigned int 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;  x               1   34[COMRAM] unsigned char 
  3759 ;;  lo              1   33[COMRAM] unsigned char 
  3760 ;;  hi              1   32[COMRAM] unsigned char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;		None               void
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3770 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;Total ram usage:       12 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    6
  3777 ;; This function calls:
  3778 ;;		_setAddrWindow
  3779 ;;		_spiwrite
  3780 ;; This function is called by:
  3781 ;;		_fillScreen
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text13
  3786  000CCC                     __ptext13:
  3787                           	opt stack 0
  3788  000CCC                     _fillRectangle:
  3789                           	opt stack 22
  3790                           
  3791                           ;incstack = 0
  3792                           ;fillRectangle@x stored from wreg
  3793  000CCC  6E23               	movwf	fillRectangle@x,c
  3794                           
  3795                           ;ST7735_TFT.c: 542: unsigned char hi, lo;
  3796                           ;ST7735_TFT.c: 543: if((x >= 128) || (y >= 160))
  3797  000CCE  0E80               	movlw	128
  3798  000CD0  6023               	cpfslt	fillRectangle@x,c
  3799  000CD2  D069               	goto	l294
  3800  000CD4  0E9F               	movlw	159
  3801  000CD6  6418               	cpfsgt	fillRectangle@y,c
  3802  000CD8  D001               	goto	l3335
  3803                           
  3804                           ;ST7735_TFT.c: 544: return;
  3805  000CDA  D065               	goto	l294
  3806  000CDC                     l3335:
  3807                           
  3808                           ;ST7735_TFT.c: 545: if((x + w - 1) >= 128)
  3809  000CDC  0EFF               	movlw	255
  3810  000CDE  6E1D               	movwf	??_fillRectangle& (0+255),c
  3811  000CE0  0EFF               	movlw	255
  3812  000CE2  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3813  000CE4  5019               	movf	fillRectangle@w,w,c
  3814  000CE6  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  3815  000CEA  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3816  000CEC  261F               	addwf	??_fillRectangle+2,f,c
  3817  000CEE  0E00               	movlw	0
  3818  000CF0  2220               	addwfc	??_fillRectangle+3,f,c
  3819  000CF2  501D               	movf	??_fillRectangle,w,c
  3820  000CF4  261F               	addwf	??_fillRectangle+2,f,c
  3821  000CF6  501E               	movf	??_fillRectangle+1,w,c
  3822  000CF8  2220               	addwfc	??_fillRectangle+3,f,c
  3823  000CFA  BE20               	btfsc	??_fillRectangle+3,7,c
  3824  000CFC  D00A               	goto	l295
  3825  000CFE  5020               	movf	??_fillRectangle+3,w,c
  3826  000D00  E104               	bnz	u2360
  3827  000D02  0E80               	movlw	128
  3828  000D04  5C1F               	subwf	??_fillRectangle+2,w,c
  3829  000D06  A0D8               	btfss	status,0,c
  3830  000D08  D004               	goto	l295
  3831  000D0A                     u2360:
  3832                           
  3833                           ;ST7735_TFT.c: 546: w = 128 - x;
  3834  000D0A  5023               	movf	fillRectangle@x,w,c
  3835  000D0C  0800               	sublw	0
  3836  000D0E  0F80               	addlw	128
  3837  000D10  6E19               	movwf	fillRectangle@w,c
  3838  000D12                     l295:
  3839                           
  3840                           ;ST7735_TFT.c: 547: if((y + h - 1) >= 160)
  3841  000D12  0EFF               	movlw	255
  3842  000D14  6E1D               	movwf	??_fillRectangle& (0+255),c
  3843  000D16  0EFF               	movlw	255
  3844  000D18  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3845  000D1A  501A               	movf	fillRectangle@h,w,c
  3846  000D1C  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  3847  000D20  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3848  000D22  261F               	addwf	??_fillRectangle+2,f,c
  3849  000D24  0E00               	movlw	0
  3850  000D26  2220               	addwfc	??_fillRectangle+3,f,c
  3851  000D28  501D               	movf	??_fillRectangle,w,c
  3852  000D2A  261F               	addwf	??_fillRectangle+2,f,c
  3853  000D2C  501E               	movf	??_fillRectangle+1,w,c
  3854  000D2E  2220               	addwfc	??_fillRectangle+3,f,c
  3855  000D30  BE20               	btfsc	??_fillRectangle+3,7,c
  3856  000D32  D00B               	goto	l3341
  3857  000D34  5020               	movf	??_fillRectangle+3,w,c
  3858  000D36  E104               	bnz	u2370
  3859  000D38  0EA0               	movlw	160
  3860  000D3A  5C1F               	subwf	??_fillRectangle+2,w,c
  3861  000D3C  A0D8               	btfss	status,0,c
  3862  000D3E  D005               	goto	l3341
  3863  000D40                     u2370:
  3864                           
  3865                           ;ST7735_TFT.c: 548: h = 160 - y;
  3866  000D40  5018               	movf	fillRectangle@y,w,c
  3867  000D42  0800               	sublw	0
  3868  000D44  0FA0               	addlw	160
  3869  000D46  6E1A               	movwf	fillRectangle@h,c
  3870  000D48  D000               	goto	l3341
  3871  000D4A                     l3341:
  3872                           
  3873                           ;ST7735_TFT.c: 549: setAddrWindow(x, y, x+w-1, y+h-1);
  3874  000D4A  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  3875  000D4E  5023               	movf	fillRectangle@x,w,c
  3876  000D50  2419               	addwf	fillRectangle@w,w,c
  3877  000D52  6E1D               	movwf	??_fillRectangle& (0+255),c
  3878  000D54  041D               	decf	??_fillRectangle,w,c
  3879  000D56  6E15               	movwf	setAddrWindow@x1,c
  3880  000D58  5018               	movf	fillRectangle@y,w,c
  3881  000D5A  241A               	addwf	fillRectangle@h,w,c
  3882  000D5C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3883  000D5E  041E               	decf	??_fillRectangle+1,w,c
  3884  000D60  6E16               	movwf	setAddrWindow@y1,c
  3885  000D62  5023               	movf	fillRectangle@x,w,c
  3886  000D64  ECED  F008         	call	_setAddrWindow
  3887                           
  3888                           ;ST7735_TFT.c: 550: hi = color >> 8; lo = color;
  3889  000D68  501C               	movf	fillRectangle@color+1,w,c
  3890  000D6A  6E21               	movwf	fillRectangle@hi,c
  3891  000D6C  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  3892                           
  3893                           ;ST7735_TFT.c: 551: PORTDbits.RD3 = 1;
  3894  000D70  8683               	bsf	3971,3,c	;volatile
  3895                           
  3896                           ;ST7735_TFT.c: 552: PORTDbits.RD4 = 0;
  3897  000D72  9883               	bcf	3971,4,c	;volatile
  3898                           
  3899                           ;ST7735_TFT.c: 554: for(y=h; y>0; y--) {
  3900  000D74  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  3901  000D78                     l3353:
  3902  000D78  5018               	movf	fillRectangle@y,w,c
  3903  000D7A  B4D8               	btfsc	status,2,c
  3904  000D7C  D013               	goto	l298
  3905  000D7E  D001               	goto	l297
  3906  000D80  D011               	goto	l298
  3907  000D82                     l297:
  3908                           
  3909                           ;ST7735_TFT.c: 555: for(x = w; x > 0; x--) {
  3910  000D82  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  3911  000D86                     l3357:
  3912  000D86  5023               	movf	fillRectangle@x,w,c
  3913  000D88  B4D8               	btfsc	status,2,c
  3914  000D8A  D00A               	goto	l3367
  3915  000D8C  D001               	goto	l3361
  3916  000D8E  D008               	goto	l3367
  3917  000D90                     l3361:
  3918                           
  3919                           ;ST7735_TFT.c: 556: spiwrite(hi);
  3920  000D90  5021               	movf	fillRectangle@hi,w,c
  3921  000D92  EC10  F00A         	call	_spiwrite
  3922                           
  3923                           ;ST7735_TFT.c: 557: spiwrite(lo);
  3924  000D96  5022               	movf	fillRectangle@lo,w,c
  3925  000D98  EC10  F00A         	call	_spiwrite
  3926  000D9C  0623               	decf	fillRectangle@x,f,c
  3927  000D9E  D7F3               	goto	l3357
  3928  000DA0                     l3367:
  3929  000DA0  0618               	decf	fillRectangle@y,f,c
  3930  000DA2  D7EA               	goto	l3353
  3931  000DA4                     l298:
  3932                           
  3933                           ;ST7735_TFT.c: 558: }
  3934                           ;ST7735_TFT.c: 559: }
  3935                           ;ST7735_TFT.c: 560: PORTDbits.RD4 = 1;
  3936  000DA4  8883               	bsf	3971,4,c	;volatile
  3937  000DA6                     l294:
  3938  000DA6  0012               	return		;funcret
  3939  000DA8                     __end_of_fillRectangle:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           intcon2	equ	0xFF1
  3949                           postinc0	equ	0xFEE
  3950                           wreg	equ	0xFE8
  3951                           postdec1	equ	0xFE5
  3952                           fsr1l	equ	0xFE1
  3953                           indf2	equ	0xFDF
  3954                           postinc2	equ	0xFDE
  3955                           postdec2	equ	0xFDD
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function _drawtext *****************
  3961 ;; Defined at:
  3962 ;;		line 511 in file "ST7735_TFT.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  x               1    wreg     unsigned char 
  3965 ;;  y               1   56[COMRAM] unsigned char 
  3966 ;;  _text           2   57[COMRAM] PTR unsigned char 
  3967 ;;		 -> NULL(0), buffer(31), txt1(84), 
  3968 ;;  color           2   59[COMRAM] unsigned int 
  3969 ;;  bg              2   61[COMRAM] unsigned int 
  3970 ;;  size            1   63[COMRAM] unsigned char 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  x               1    0[BANK0 ] unsigned char 
  3973 ;;  i               2    3[BANK0 ] unsigned int 
  3974 ;;  textsize        2    1[BANK0 ] unsigned int 
  3975 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  3976 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  3977 ;; Return value:  Size  Location     Type
  3978 ;;		None               void
  3979 ;; Registers used:
  3980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3986 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;Total ram usage:       17 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:    9
  3993 ;; This function calls:
  3994 ;;		_drawChar
  3995 ;;		_strlen
  3996 ;; This function is called by:
  3997 ;;		_main
  3998 ;;		_Initialize_Screen
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text14
  4003  000AD0                     __ptext14:
  4004                           	opt stack 0
  4005  000AD0                     _drawtext:
  4006                           	opt stack 21
  4007                           
  4008                           ;incstack = 0
  4009                           ;drawtext@x stored from wreg
  4010  000AD0  0100               	movlb	0	; () banked
  4011  000AD2  6FDE               	movwf	drawtext@x& (0+255),b
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;ST7735_TFT.c: 513: unsigned char cursor_x, cursor_y;
  4015                           ;ST7735_TFT.c: 514: unsigned int textsize, i;
  4016                           ;ST7735_TFT.c: 515: cursor_x = x, cursor_y = y;
  4017  000AD4  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4018                           
  4019                           ; BSR set to: 0
  4020  000AD8  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;ST7735_TFT.c: 516: textsize = strlen(_text);
  4024  000ADC  C03A  F011         	movff	drawtext@_text,strlen@s
  4025  000AE0  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4026  000AE4  EC39  F009         	call	_strlen	;wreg free
  4027  000AE8  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4028  000AEC  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4029                           
  4030                           ;ST7735_TFT.c: 517: for(i = 0; i < textsize; i++){
  4031  000AF0  0E00               	movlw	0
  4032  000AF2  0100               	movlb	0	; () banked
  4033  000AF4  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4034  000AF6  0E00               	movlw	0
  4035  000AF8  6FE1               	movwf	drawtext@i& (0+255),b
  4036  000AFA  D064               	goto	l3405
  4037  000AFC                     l3379:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;ST7735_TFT.c: 518: if(wrap && ((cursor_x + size * 5) > 128)){
  4041  000AFC  505B               	movf	_wrap,w,c
  4042  000AFE  B4D8               	btfsc	status,2,c
  4043  000B00  D034               	goto	l3395
  4044                           
  4045                           ; BSR set to: 0
  4046  000B02  5040               	movf	drawtext@size,w,c
  4047  000B04  0D05               	mullw	5
  4048  000B06  0100               	movlb	0	; () banked
  4049  000B08  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4050  000B0A  6E41               	movwf	??_drawtext& (0+255),c
  4051  000B0C  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4052  000B0E  50F3               	movf	prodl,w,c
  4053  000B10  2641               	addwf	??_drawtext,f,c
  4054  000B12  50F4               	movf	prodh,w,c
  4055  000B14  2242               	addwfc	??_drawtext+1,f,c
  4056  000B16  BE42               	btfsc	??_drawtext+1,7,c
  4057  000B18  D028               	goto	l3395
  4058  000B1A  5042               	movf	??_drawtext+1,w,c
  4059  000B1C  E104               	bnz	u2430
  4060  000B1E  0E81               	movlw	129
  4061  000B20  5C41               	subwf	??_drawtext,w,c
  4062  000B22  A0D8               	btfss	status,0,c
  4063  000B24  D022               	goto	l3395
  4064  000B26                     u2430:
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;ST7735_TFT.c: 519: cursor_x = 0;
  4068  000B26  0E00               	movlw	0
  4069  000B28  0100               	movlb	0	; () banked
  4070  000B2A  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;ST7735_TFT.c: 520: cursor_y = cursor_y + size * 7 + 3 ;
  4074  000B2C  5040               	movf	drawtext@size,w,c
  4075  000B2E  0D07               	mullw	7
  4076  000B30  50F3               	movf	prodl,w,c
  4077  000B32  0100               	movlb	0	; () banked
  4078  000B34  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4079  000B36  0F03               	addlw	3
  4080  000B38  0100               	movlb	0	; () banked
  4081  000B3A  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;ST7735_TFT.c: 521: if(cursor_y > 160) cursor_y = 160;
  4085  000B3C  0EA0               	movlw	160
  4086  000B3E  0100               	movlb	0	; () banked
  4087  000B40  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4088  000B42  D004               	goto	l3391
  4089                           
  4090                           ; BSR set to: 0
  4091  000B44  0EA0               	movlw	160
  4092  000B46  0100               	movlb	0	; () banked
  4093  000B48  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4094  000B4A  D000               	goto	l3391
  4095  000B4C                     l3391:
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;ST7735_TFT.c: 522: if(_text[i] == 0x20) goto _skip; }
  4099  000B4C  0100               	movlb	0	; () banked
  4100  000B4E  51E1               	movf	drawtext@i& (0+255),w,b
  4101  000B50  243A               	addwf	drawtext@_text,w,c
  4102  000B52  6ED9               	movwf	fsr2l,c
  4103  000B54  0100               	movlb	0	; () banked
  4104  000B56  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4105  000B58  203B               	addwfc	drawtext@_text+1,w,c
  4106  000B5A  6EDA               	movwf	fsr2h,c
  4107  000B5C  0E20               	movlw	32
  4108  000B5E  18DE               	xorwf	postinc2,w,c
  4109  000B60  B4D8               	btfsc	status,2,c
  4110  000B62  D02C               	goto	l3403
  4111  000B64  D002               	goto	l3395
  4112                           
  4113                           ; BSR set to: 0
  4114  000B66  D02A               	goto	l3403
  4115                           
  4116                           ; BSR set to: 0
  4117  000B68  D000               	goto	l3395
  4118  000B6A                     l3395:
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;ST7735_TFT.c: 523: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4122  000B6A  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4123  000B6E  0100               	movlb	0	; () banked
  4124  000B70  51E1               	movf	drawtext@i& (0+255),w,b
  4125  000B72  243A               	addwf	drawtext@_text,w,c
  4126  000B74  6ED9               	movwf	fsr2l,c
  4127  000B76  0100               	movlb	0	; () banked
  4128  000B78  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4129  000B7A  203B               	addwfc	drawtext@_text+1,w,c
  4130  000B7C  6EDA               	movwf	fsr2h,c
  4131  000B7E  50DF               	movf	indf2,w,c
  4132  000B80  6E2F               	movwf	drawChar@c,c
  4133  000B82  C03C  F030         	movff	drawtext@color,drawChar@color
  4134  000B86  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4135  000B8A  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4136  000B8E  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4137  000B92  C040  F034         	movff	drawtext@size,drawChar@size
  4138  000B96  0100               	movlb	0	; () banked
  4139  000B98  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4140  000B9A  ECEE  F002         	call	_drawChar
  4141                           
  4142                           ;ST7735_TFT.c: 524: cursor_x = cursor_x + size * 6;
  4143  000B9E  5040               	movf	drawtext@size,w,c
  4144  000BA0  0D06               	mullw	6
  4145  000BA2  50F3               	movf	prodl,w,c
  4146  000BA4  0100               	movlb	0	; () banked
  4147  000BA6  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4148  000BA8  0100               	movlb	0	; () banked
  4149  000BAA  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;ST7735_TFT.c: 525: if(cursor_x > 128) cursor_x = 128;
  4153  000BAC  0E80               	movlw	128
  4154  000BAE  0100               	movlb	0	; () banked
  4155  000BB0  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4156  000BB2  D004               	goto	l3403
  4157                           
  4158                           ; BSR set to: 0
  4159  000BB4  0E80               	movlw	128
  4160  000BB6  0100               	movlb	0	; () banked
  4161  000BB8  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4162                           
  4163                           ; BSR set to: 0
  4164  000BBA  D000               	goto	l3403
  4165  000BBC                     l3403:
  4166                           
  4167                           ; BSR set to: 0
  4168  000BBC  0100               	movlb	0	; () banked
  4169  000BBE  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4170  000BC0  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4171  000BC2  D000               	goto	l3405
  4172  000BC4                     l3405:
  4173                           
  4174                           ; BSR set to: 0
  4175  000BC4  0100               	movlb	0	; () banked
  4176  000BC6  51DF               	movf	drawtext@textsize& (0+255),w,b
  4177  000BC8  0100               	movlb	0	; () banked
  4178  000BCA  5DE1               	subwf	drawtext@i& (0+255),w,b
  4179  000BCC  0100               	movlb	0	; () banked
  4180  000BCE  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4181  000BD0  0100               	movlb	0	; () banked
  4182  000BD2  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4183  000BD4  A0D8               	btfss	status,0,c
  4184  000BD6  D792               	goto	l3379
  4185                           
  4186                           ; BSR set to: 0
  4187                           
  4188                           ; BSR set to: 0
  4189  000BD8  0012               	return		;funcret
  4190  000BDA                     __end_of_drawtext:
  4191                           	opt stack 0
  4192                           tblptru	equ	0xFF8
  4193                           tblptrh	equ	0xFF7
  4194                           tblptrl	equ	0xFF6
  4195                           tablat	equ	0xFF5
  4196                           prodh	equ	0xFF4
  4197                           prodl	equ	0xFF3
  4198                           intcon	equ	0xFF2
  4199                           intcon2	equ	0xFF1
  4200                           postinc0	equ	0xFEE
  4201                           wreg	equ	0xFE8
  4202                           postdec1	equ	0xFE5
  4203                           fsr1l	equ	0xFE1
  4204                           indf2	equ	0xFDF
  4205                           postinc2	equ	0xFDE
  4206                           postdec2	equ	0xFDD
  4207                           fsr2h	equ	0xFDA
  4208                           fsr2l	equ	0xFD9
  4209                           status	equ	0xFD8
  4210                           
  4211 ;; *************** function _strlen *****************
  4212 ;; Defined at:
  4213 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4216 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4219 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  2   16[COMRAM] unsigned int 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;Total ram usage:        6 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    3
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_drawtext
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text15
  4244  001272                     __ptext15:
  4245                           	opt stack 0
  4246  001272                     _strlen:
  4247                           	opt stack 26
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;incstack = 0
  4251  001272  C011  F015         	movff	strlen@s,strlen@cp
  4252  001276  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4253  00127A  D003               	goto	l3325
  4254  00127C                     l3323:
  4255  00127C  4A15               	infsnz	strlen@cp,f,c
  4256  00127E  2A16               	incf	strlen@cp+1,f,c
  4257  001280  D000               	goto	l3325
  4258  001282                     l3325:
  4259  001282  C015  FFD9         	movff	strlen@cp,fsr2l
  4260  001286  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4261  00128A  50DF               	movf	indf2,w,c
  4262  00128C  A4D8               	btfss	status,2,c
  4263  00128E  D7F6               	goto	l3323
  4264  001290  C011  F013         	movff	strlen@s,??_strlen
  4265  001294  C012  F014         	movff	strlen@s+1,??_strlen+1
  4266  001298  1E13               	comf	??_strlen,f,c
  4267  00129A  1E14               	comf	??_strlen+1,f,c
  4268  00129C  4A13               	infsnz	??_strlen,f,c
  4269  00129E  2A14               	incf	??_strlen+1,f,c
  4270  0012A0  5015               	movf	strlen@cp,w,c
  4271  0012A2  2413               	addwf	??_strlen,w,c
  4272  0012A4  6E11               	movwf	?_strlen,c
  4273  0012A6  5016               	movf	strlen@cp+1,w,c
  4274  0012A8  2014               	addwfc	??_strlen+1,w,c
  4275  0012AA  6E12               	movwf	?_strlen+1,c
  4276  0012AC  D000               	goto	l1005
  4277  0012AE                     l1005:
  4278  0012AE  0012               	return		;funcret
  4279  0012B0                     __end_of_strlen:
  4280                           	opt stack 0
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           intcon	equ	0xFF2
  4288                           intcon2	equ	0xFF1
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           postdec1	equ	0xFE5
  4292                           fsr1l	equ	0xFE1
  4293                           indf2	equ	0xFDF
  4294                           postinc2	equ	0xFDE
  4295                           postdec2	equ	0xFDD
  4296                           fsr2h	equ	0xFDA
  4297                           fsr2l	equ	0xFD9
  4298                           status	equ	0xFD8
  4299                           
  4300 ;; *************** function _drawChar *****************
  4301 ;; Defined at:
  4302 ;;		line 484 in file "ST7735_TFT.c"
  4303 ;; Parameters:    Size  Location     Type
  4304 ;;  x               1    wreg     unsigned char 
  4305 ;;  y               1   45[COMRAM] unsigned char 
  4306 ;;  c               1   46[COMRAM] unsigned char 
  4307 ;;  color           2   47[COMRAM] unsigned int 
  4308 ;;  bg              2   49[COMRAM] unsigned int 
  4309 ;;  size            1   51[COMRAM] unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  x               1   53[COMRAM] unsigned char 
  4312 ;;  line            1   52[COMRAM] unsigned char 
  4313 ;;  i               1   55[COMRAM] unsigned char 
  4314 ;;  j               1   54[COMRAM] unsigned char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;		None               void
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4324 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;Total ram usage:       11 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    8
  4331 ;; This function calls:
  4332 ;;		___wmul
  4333 ;;		_drawPixel
  4334 ;;		_fillRect
  4335 ;; This function is called by:
  4336 ;;		_drawtext
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text16
  4341  0005DC                     __ptext16:
  4342                           	opt stack 0
  4343  0005DC                     _drawChar:
  4344                           	opt stack 21
  4345                           
  4346                           ;incstack = 0
  4347                           ;drawChar@x stored from wreg
  4348  0005DC  6E36               	movwf	drawChar@x,c
  4349                           
  4350                           ;ST7735_TFT.c: 486: char i, j;
  4351                           ;ST7735_TFT.c: 487: if((x >= 128) || (y >= 160))
  4352  0005DE  0E80               	movlw	128
  4353  0005E0  6036               	cpfslt	drawChar@x,c
  4354  0005E2  D0A6               	goto	l257
  4355  0005E4  0E9F               	movlw	159
  4356  0005E6  642E               	cpfsgt	drawChar@y,c
  4357  0005E8  D001               	goto	l3271
  4358                           
  4359                           ;ST7735_TFT.c: 488: return;
  4360  0005EA  D0A2               	goto	l257
  4361  0005EC                     l3271:
  4362                           
  4363                           ;ST7735_TFT.c: 489: if(size < 1) size = 1;
  4364  0005EC  5034               	movf	drawChar@size,w,c
  4365  0005EE  A4D8               	btfss	status,2,c
  4366  0005F0  D003               	goto	l3275
  4367  0005F2  0E01               	movlw	1
  4368  0005F4  6E34               	movwf	drawChar@size,c
  4369  0005F6  D000               	goto	l3275
  4370  0005F8                     l3275:
  4371                           
  4372                           ;ST7735_TFT.c: 490: if((c < ' ') || (c > '~'))
  4373  0005F8  0E1F               	movlw	31
  4374  0005FA  642F               	cpfsgt	drawChar@c,c
  4375  0005FC  D004               	goto	l3279
  4376  0005FE  0E7E               	movlw	126
  4377  000600  642F               	cpfsgt	drawChar@c,c
  4378  000602  D003               	goto	l259
  4379  000604  D000               	goto	l3279
  4380  000606                     l3279:
  4381                           
  4382                           ;ST7735_TFT.c: 491: c = '?';
  4383  000606  0E3F               	movlw	63
  4384  000608  6E2F               	movwf	drawChar@c,c
  4385  00060A                     l259:
  4386                           
  4387                           ;ST7735_TFT.c: 492: for(i=0; i<5; i++ ) {
  4388  00060A  0E00               	movlw	0
  4389  00060C  6E38               	movwf	drawChar@i,c
  4390  00060E                     l3281:
  4391  00060E  0E04               	movlw	4
  4392  000610  6438               	cpfsgt	drawChar@i,c
  4393  000612  D001               	goto	l3285
  4394  000614  D08D               	goto	l257
  4395  000616                     l3285:
  4396                           
  4397                           ;ST7735_TFT.c: 493: unsigned char line;
  4398                           ;ST7735_TFT.c: 494: if(c < 'S')
  4399  000616  0E53               	movlw	83
  4400  000618  602F               	cpfslt	drawChar@c,c
  4401  00061A  D015               	goto	l3289
  4402                           
  4403                           ;ST7735_TFT.c: 495: line = font[(c - 32)*5 + i];
  4404  00061C  0EE0               	movlw	224
  4405  00061E  242F               	addwf	drawChar@c,w,c
  4406  000620  6E11               	movwf	___wmul@multiplier,c
  4407  000622  6A12               	clrf	___wmul@multiplier+1,c
  4408  000624  0EFF               	movlw	255
  4409  000626  2212               	addwfc	___wmul@multiplier+1,f,c
  4410  000628  0E00               	movlw	0
  4411  00062A  6E14               	movwf	___wmul@multiplicand+1,c
  4412  00062C  0E05               	movlw	5
  4413  00062E  6E13               	movwf	___wmul@multiplicand,c
  4414  000630  ECBD  F009         	call	___wmul	;wreg free
  4415  000634  5038               	movf	drawChar@i,w,c
  4416  000636  2611               	addwf	?___wmul,f,c
  4417  000638  0E00               	movlw	0
  4418  00063A  2212               	addwfc	?___wmul+1,f,c
  4419  00063C  0EDD               	movlw	low _font
  4420  00063E  2411               	addwf	?___wmul,w,c
  4421  000640  6EF6               	movwf	tblptrl,c
  4422  000642  0EFA               	movlw	high _font
  4423  000644  D014               	goto	L2
  4424  000646                     l3289:
  4425                           
  4426                           ;ST7735_TFT.c: 496: else
  4427                           ;ST7735_TFT.c: 497: line = font2[(c - 'S')*5 + i];
  4428  000646  0EAD               	movlw	173
  4429  000648  242F               	addwf	drawChar@c,w,c
  4430  00064A  6E11               	movwf	___wmul@multiplier,c
  4431  00064C  6A12               	clrf	___wmul@multiplier+1,c
  4432  00064E  0EFF               	movlw	255
  4433  000650  2212               	addwfc	___wmul@multiplier+1,f,c
  4434  000652  0E00               	movlw	0
  4435  000654  6E14               	movwf	___wmul@multiplicand+1,c
  4436  000656  0E05               	movlw	5
  4437  000658  6E13               	movwf	___wmul@multiplicand,c
  4438  00065A  ECBD  F009         	call	___wmul	;wreg free
  4439  00065E  5038               	movf	drawChar@i,w,c
  4440  000660  2611               	addwf	?___wmul,f,c
  4441  000662  0E00               	movlw	0
  4442  000664  2212               	addwfc	?___wmul+1,f,c
  4443  000666  0EDC               	movlw	low _font2
  4444  000668  2411               	addwf	?___wmul,w,c
  4445  00066A  6EF6               	movwf	tblptrl,c
  4446  00066C  0EFB               	movlw	high _font2
  4447  00066E                     L2:
  4448  00066E  2012               	addwfc	?___wmul+1,w,c
  4449  000670  6EF7               	movwf	tblptrh,c
  4450  000672                     	if	0	;There are less than 3 active tblptr bytes
  4451  000672                     	endif
  4452  000672  0008               	tblrd		*
  4453  000674  CFF5 F035          	movff	tablat,drawChar@line
  4454  000678  D000               	goto	l3291
  4455  00067A                     l3291:
  4456                           
  4457                           ;ST7735_TFT.c: 498: for(j=0; j<7; j++, line >>= 1) {
  4458  00067A  0E00               	movlw	0
  4459  00067C  6E37               	movwf	drawChar@j,c
  4460  00067E                     l3293:
  4461  00067E  0E06               	movlw	6
  4462  000680  6437               	cpfsgt	drawChar@j,c
  4463  000682  D001               	goto	l266
  4464  000684  D053               	goto	l3317
  4465  000686                     l266:
  4466                           
  4467                           ;ST7735_TFT.c: 499: if(line & 0x01) {
  4468  000686  A035               	btfss	drawChar@line,0,c
  4469  000688  D023               	goto	l3303
  4470                           
  4471                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, color);
  4472  00068A  0434               	decf	drawChar@size,w,c
  4473  00068C  A4D8               	btfss	status,2,c
  4474  00068E  D00C               	goto	l3301
  4475  000690  502E               	movf	drawChar@y,w,c
  4476  000692  2437               	addwf	drawChar@j,w,c
  4477  000694  6E18               	movwf	drawPixel@y,c
  4478  000696  C030  F019         	movff	drawChar@color,drawPixel@color
  4479  00069A  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  4480  00069E  5036               	movf	drawChar@x,w,c
  4481  0006A0  2438               	addwf	drawChar@i,w,c
  4482  0006A2  EC90  F009         	call	_drawPixel
  4483  0006A6  D03E               	goto	l3311
  4484  0006A8                     l3301:
  4485                           
  4486                           ;ST7735_TFT.c: 501: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4487  0006A8  5037               	movf	drawChar@j,w,c
  4488  0006AA  0234               	mulwf	drawChar@size,c
  4489  0006AC  50F3               	movf	prodl,w,c
  4490  0006AE  242E               	addwf	drawChar@y,w,c
  4491  0006B0  6E23               	movwf	fillRect@y,c
  4492  0006B2  C034  F024         	movff	drawChar@size,fillRect@w
  4493  0006B6  C034  F025         	movff	drawChar@size,fillRect@h
  4494  0006BA  C030  F026         	movff	drawChar@color,fillRect@color
  4495  0006BE  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  4496  0006C2  5038               	movf	drawChar@i,w,c
  4497  0006C4  0234               	mulwf	drawChar@size,c
  4498  0006C6  50F3               	movf	prodl,w,c
  4499  0006C8  2436               	addwf	drawChar@x,w,c
  4500  0006CA  EC14  F009         	call	_fillRect
  4501                           
  4502                           ;ST7735_TFT.c: 502: }
  4503  0006CE  D02A               	goto	l3311
  4504  0006D0                     l3303:
  4505                           
  4506                           ;ST7735_TFT.c: 503: else if(bg != color) {
  4507  0006D0  5030               	movf	drawChar@color,w,c
  4508  0006D2  1832               	xorwf	drawChar@bg,w,c
  4509  0006D4  E104               	bnz	u2290
  4510  0006D6  5031               	movf	drawChar@color+1,w,c
  4511  0006D8  1833               	xorwf	drawChar@bg+1,w,c
  4512  0006DA  B4D8               	btfsc	status,2,c
  4513  0006DC  D023               	goto	l3311
  4514  0006DE                     u2290:
  4515                           
  4516                           ;ST7735_TFT.c: 504: if(size == 1) drawPixel(x+i, y+j, bg);
  4517  0006DE  0434               	decf	drawChar@size,w,c
  4518  0006E0  A4D8               	btfss	status,2,c
  4519  0006E2  D00C               	goto	l3309
  4520  0006E4  502E               	movf	drawChar@y,w,c
  4521  0006E6  2437               	addwf	drawChar@j,w,c
  4522  0006E8  6E18               	movwf	drawPixel@y,c
  4523  0006EA  C032  F019         	movff	drawChar@bg,drawPixel@color
  4524  0006EE  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4525  0006F2  5036               	movf	drawChar@x,w,c
  4526  0006F4  2438               	addwf	drawChar@i,w,c
  4527  0006F6  EC90  F009         	call	_drawPixel
  4528  0006FA  D014               	goto	l3311
  4529  0006FC                     l3309:
  4530                           
  4531                           ;ST7735_TFT.c: 505: else fillRect(x+i*size, y+j*size, size, size, bg);
  4532  0006FC  5037               	movf	drawChar@j,w,c
  4533  0006FE  0234               	mulwf	drawChar@size,c
  4534  000700  50F3               	movf	prodl,w,c
  4535  000702  242E               	addwf	drawChar@y,w,c
  4536  000704  6E23               	movwf	fillRect@y,c
  4537  000706  C034  F024         	movff	drawChar@size,fillRect@w
  4538  00070A  C034  F025         	movff	drawChar@size,fillRect@h
  4539  00070E  C032  F026         	movff	drawChar@bg,fillRect@color
  4540  000712  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4541  000716  5038               	movf	drawChar@i,w,c
  4542  000718  0234               	mulwf	drawChar@size,c
  4543  00071A  50F3               	movf	prodl,w,c
  4544  00071C  2436               	addwf	drawChar@x,w,c
  4545  00071E  EC14  F009         	call	_fillRect
  4546  000722  D000               	goto	l3311
  4547  000724                     l3311:
  4548  000724  2A37               	incf	drawChar@j,f,c
  4549  000726  90D8               	bcf	status,0,c
  4550  000728  3235               	rrcf	drawChar@line,f,c
  4551  00072A  D7A9               	goto	l3293
  4552  00072C                     l3317:
  4553  00072C  2A38               	incf	drawChar@i,f,c
  4554  00072E  D76F               	goto	l3281
  4555  000730                     l257:
  4556  000730  0012               	return		;funcret
  4557  000732                     __end_of_drawChar:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           tblptrh	equ	0xFF7
  4561                           tblptrl	equ	0xFF6
  4562                           tablat	equ	0xFF5
  4563                           prodh	equ	0xFF4
  4564                           prodl	equ	0xFF3
  4565                           intcon	equ	0xFF2
  4566                           intcon2	equ	0xFF1
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           postdec1	equ	0xFE5
  4570                           fsr1l	equ	0xFE1
  4571                           indf2	equ	0xFDF
  4572                           postinc2	equ	0xFDE
  4573                           postdec2	equ	0xFDD
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function _fillRect *****************
  4579 ;; Defined at:
  4580 ;;		line 474 in file "ST7735_TFT.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  x               1    wreg     unsigned char 
  4583 ;;  y               1   34[COMRAM] unsigned char 
  4584 ;;  w               1   35[COMRAM] unsigned char 
  4585 ;;  h               1   36[COMRAM] unsigned char 
  4586 ;;  color           2   37[COMRAM] unsigned int 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  x               1   42[COMRAM] unsigned char 
  4589 ;;  i               2   43[COMRAM] int 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;		None               void
  4592 ;; Registers used:
  4593 ;;		wreg, status,2, status,0, cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4599 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;Total ram usage:       11 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    7
  4606 ;; This function calls:
  4607 ;;		_drawFastVLine
  4608 ;; This function is called by:
  4609 ;;		_drawChar
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text17
  4614  001228                     __ptext17:
  4615                           	opt stack 0
  4616  001228                     _fillRect:
  4617                           	opt stack 21
  4618                           
  4619                           ;incstack = 0
  4620                           ;fillRect@x stored from wreg
  4621  001228  6E2B               	movwf	fillRect@x,c
  4622                           
  4623                           ;ST7735_TFT.c: 476: signed int i;
  4624                           ;ST7735_TFT.c: 478: for (i = x; i < x + w; i++)
  4625  00122A  C02B  F02C         	movff	fillRect@x,fillRect@i
  4626  00122E  6A2D               	clrf	fillRect@i+1,c
  4627  001230  D00E               	goto	l3173
  4628  001232                     l3169:
  4629                           
  4630                           ;ST7735_TFT.c: 479: {
  4631                           ;ST7735_TFT.c: 480: drawFastVLine(i, y, h, color);
  4632  001232  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4633  001236  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4634  00123A  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4635  00123E  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4636  001242  502C               	movf	fillRect@i,w,c
  4637  001244  EC61  F007         	call	_drawFastVLine
  4638  001248  4A2C               	infsnz	fillRect@i,f,c
  4639  00124A  2A2D               	incf	fillRect@i+1,f,c
  4640  00124C  D000               	goto	l3173
  4641  00124E                     l3173:
  4642  00124E  5024               	movf	fillRect@w,w,c
  4643  001250  C02B  F028         	movff	fillRect@x,??_fillRect
  4644  001254  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4645  001256  2628               	addwf	??_fillRect,f,c
  4646  001258  0E00               	movlw	0
  4647  00125A  2229               	addwfc	??_fillRect+1,f,c
  4648  00125C  5028               	movf	??_fillRect,w,c
  4649  00125E  5C2C               	subwf	fillRect@i,w,c
  4650  001260  502D               	movf	fillRect@i+1,w,c
  4651  001262  0A80               	xorlw	128
  4652  001264  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4653  001266  5029               	movf	??_fillRect+1,w,c
  4654  001268  0A80               	xorlw	128
  4655  00126A  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4656  00126C  A0D8               	btfss	status,0,c
  4657  00126E  D7E1               	goto	l3169
  4658  001270  0012               	return		;funcret
  4659  001272                     __end_of_fillRect:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           intcon	equ	0xFF2
  4668                           intcon2	equ	0xFF1
  4669                           postinc0	equ	0xFEE
  4670                           wreg	equ	0xFE8
  4671                           postdec1	equ	0xFE5
  4672                           fsr1l	equ	0xFE1
  4673                           indf2	equ	0xFDF
  4674                           postinc2	equ	0xFDE
  4675                           postdec2	equ	0xFDD
  4676                           fsr2h	equ	0xFDA
  4677                           fsr2l	equ	0xFD9
  4678                           status	equ	0xFD8
  4679                           
  4680 ;; *************** function _drawFastVLine *****************
  4681 ;; Defined at:
  4682 ;;		line 453 in file "ST7735_TFT.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  x               1    wreg     unsigned char 
  4685 ;;  y               1   23[COMRAM] unsigned char 
  4686 ;;  h               1   24[COMRAM] unsigned char 
  4687 ;;  color           2   25[COMRAM] unsigned int 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  x               1   33[COMRAM] unsigned char 
  4690 ;;  lo              1   32[COMRAM] unsigned char 
  4691 ;;  hi              1   31[COMRAM] unsigned char 
  4692 ;; Return value:  Size  Location     Type
  4693 ;;		None               void
  4694 ;; Registers used:
  4695 ;;		wreg, status,2, status,0, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;Total ram usage:       11 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    6
  4708 ;; This function calls:
  4709 ;;		_setAddrWindow
  4710 ;;		_spiwrite
  4711 ;; This function is called by:
  4712 ;;		_fillRect
  4713 ;;		_fillCircleHelper
  4714 ;;		_fillCircle
  4715 ;;		_drawRect
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text18
  4720  000EC2                     __ptext18:
  4721                           	opt stack 0
  4722  000EC2                     _drawFastVLine:
  4723                           	opt stack 22
  4724                           
  4725                           ;incstack = 0
  4726                           ;drawFastVLine@x stored from wreg
  4727  000EC2  6E22               	movwf	drawFastVLine@x,c
  4728                           
  4729                           ;ST7735_TFT.c: 455: unsigned char hi, lo;
  4730                           ;ST7735_TFT.c: 456: if((x >= 128) || (y >= 160))
  4731  000EC4  0E80               	movlw	128
  4732  000EC6  6022               	cpfslt	drawFastVLine@x,c
  4733  000EC8  D03F               	goto	l241
  4734  000ECA  0E9F               	movlw	159
  4735  000ECC  6418               	cpfsgt	drawFastVLine@y,c
  4736  000ECE  D001               	goto	l3119
  4737                           
  4738                           ;ST7735_TFT.c: 457: return;
  4739  000ED0  D03B               	goto	l241
  4740  000ED2                     l3119:
  4741                           
  4742                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  4743  000ED2  0EFF               	movlw	255
  4744  000ED4  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4745  000ED6  0EFF               	movlw	255
  4746  000ED8  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4747  000EDA  5019               	movf	drawFastVLine@h,w,c
  4748  000EDC  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4749  000EE0  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4750  000EE2  261E               	addwf	??_drawFastVLine+2,f,c
  4751  000EE4  0E00               	movlw	0
  4752  000EE6  221F               	addwfc	??_drawFastVLine+3,f,c
  4753  000EE8  501C               	movf	??_drawFastVLine,w,c
  4754  000EEA  261E               	addwf	??_drawFastVLine+2,f,c
  4755  000EEC  501D               	movf	??_drawFastVLine+1,w,c
  4756  000EEE  221F               	addwfc	??_drawFastVLine+3,f,c
  4757  000EF0  BE1F               	btfsc	??_drawFastVLine+3,7,c
  4758  000EF2  D00B               	goto	l3123
  4759  000EF4  501F               	movf	??_drawFastVLine+3,w,c
  4760  000EF6  E104               	bnz	u2130
  4761  000EF8  0EA0               	movlw	160
  4762  000EFA  5C1E               	subwf	??_drawFastVLine+2,w,c
  4763  000EFC  A0D8               	btfss	status,0,c
  4764  000EFE  D005               	goto	l3123
  4765  000F00                     u2130:
  4766                           
  4767                           ;ST7735_TFT.c: 459: h = 160 - y;
  4768  000F00  5018               	movf	drawFastVLine@y,w,c
  4769  000F02  0800               	sublw	0
  4770  000F04  0FA0               	addlw	160
  4771  000F06  6E19               	movwf	drawFastVLine@h,c
  4772  000F08  D000               	goto	l3123
  4773  000F0A                     l3123:
  4774                           
  4775                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  4776  000F0A  501B               	movf	drawFastVLine@color+1,w,c
  4777  000F0C  6E20               	movwf	drawFastVLine@hi,c
  4778  000F0E  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  4779                           
  4780                           ;ST7735_TFT.c: 461: setAddrWindow(x, y, x, y + h - 1);
  4781  000F12  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  4782  000F16  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  4783  000F1A  5018               	movf	drawFastVLine@y,w,c
  4784  000F1C  2419               	addwf	drawFastVLine@h,w,c
  4785  000F1E  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4786  000F20  041C               	decf	??_drawFastVLine,w,c
  4787  000F22  6E16               	movwf	setAddrWindow@y1,c
  4788  000F24  5022               	movf	drawFastVLine@x,w,c
  4789  000F26  ECED  F008         	call	_setAddrWindow
  4790                           
  4791                           ;ST7735_TFT.c: 462: PORTDbits.RD3 = 1;
  4792  000F2A  8683               	bsf	3971,3,c	;volatile
  4793                           
  4794                           ;ST7735_TFT.c: 463: PORTDbits.RD4 = 0;
  4795  000F2C  9883               	bcf	3971,4,c	;volatile
  4796                           
  4797                           ;ST7735_TFT.c: 465: while (h--) {
  4798  000F2E  D007               	goto	l3135
  4799  000F30                     l3133:
  4800                           
  4801                           ;ST7735_TFT.c: 466: spiwrite(hi);
  4802  000F30  5020               	movf	drawFastVLine@hi,w,c
  4803  000F32  EC10  F00A         	call	_spiwrite
  4804                           
  4805                           ;ST7735_TFT.c: 467: spiwrite(lo);
  4806  000F36  5021               	movf	drawFastVLine@lo,w,c
  4807  000F38  EC10  F00A         	call	_spiwrite
  4808  000F3C  D000               	goto	l3135
  4809  000F3E                     l3135:
  4810  000F3E  0619               	decf	drawFastVLine@h,f,c
  4811  000F40  2819               	incf	drawFastVLine@h,w,c
  4812  000F42  A4D8               	btfss	status,2,c
  4813  000F44  D7F5               	goto	l3133
  4814                           
  4815                           ;ST7735_TFT.c: 468: }
  4816                           ;ST7735_TFT.c: 469: PORTDbits.RD4 = 1;
  4817  000F46  8883               	bsf	3971,4,c	;volatile
  4818  000F48                     l241:
  4819  000F48  0012               	return		;funcret
  4820  000F4A                     __end_of_drawFastVLine:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           intcon	equ	0xFF2
  4829                           intcon2	equ	0xFF1
  4830                           postinc0	equ	0xFEE
  4831                           wreg	equ	0xFE8
  4832                           postdec1	equ	0xFE5
  4833                           fsr1l	equ	0xFE1
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function _drawPixel *****************
  4842 ;; Defined at:
  4843 ;;		line 444 in file "ST7735_TFT.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  x               1    wreg     unsigned char 
  4846 ;;  y               1   23[COMRAM] unsigned char 
  4847 ;;  color           2   24[COMRAM] unsigned int 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  x               1   26[COMRAM] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;		None               void
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4859 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;Total ram usage:        4 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    6
  4866 ;; This function calls:
  4867 ;;		_setAddrWindow
  4868 ;;		_write_data
  4869 ;; This function is called by:
  4870 ;;		_drawChar
  4871 ;;		_drawCircle
  4872 ;;		_drawCircleHelper
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text19
  4877  001320                     __ptext19:
  4878                           	opt stack 0
  4879  001320                     _drawPixel:
  4880                           	opt stack 22
  4881                           
  4882                           ;incstack = 0
  4883                           ;drawPixel@x stored from wreg
  4884  001320  6E1B               	movwf	drawPixel@x,c
  4885                           
  4886                           ;ST7735_TFT.c: 446: if((x >= 128) || (y >= 160))
  4887  001322  0E80               	movlw	128
  4888  001324  601B               	cpfslt	drawPixel@x,c
  4889  001326  D013               	goto	l235
  4890  001328  0E9F               	movlw	159
  4891  00132A  6418               	cpfsgt	drawPixel@y,c
  4892  00132C  D001               	goto	l3161
  4893                           
  4894                           ;ST7735_TFT.c: 447: return;
  4895  00132E  D00F               	goto	l235
  4896  001330                     l3161:
  4897                           
  4898                           ;ST7735_TFT.c: 448: setAddrWindow(x,y,x+1,y+1);
  4899  001330  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  4900  001334  281B               	incf	drawPixel@x,w,c
  4901  001336  6E15               	movwf	setAddrWindow@x1,c
  4902  001338  2818               	incf	drawPixel@y,w,c
  4903  00133A  6E16               	movwf	setAddrWindow@y1,c
  4904  00133C  501B               	movf	drawPixel@x,w,c
  4905  00133E  ECED  F008         	call	_setAddrWindow
  4906                           
  4907                           ;ST7735_TFT.c: 449: write_data(color >> 8);
  4908  001342  501A               	movf	drawPixel@color+1,w,c
  4909  001344  EC23  F00A         	call	_write_data
  4910                           
  4911                           ;ST7735_TFT.c: 450: write_data(color & 0xFF);
  4912  001348  5019               	movf	drawPixel@color,w,c
  4913  00134A  EC23  F00A         	call	_write_data
  4914  00134E                     l235:
  4915  00134E  0012               	return		;funcret
  4916  001350                     __end_of_drawPixel:
  4917                           	opt stack 0
  4918                           tblptru	equ	0xFF8
  4919                           tblptrh	equ	0xFF7
  4920                           tblptrl	equ	0xFF6
  4921                           tablat	equ	0xFF5
  4922                           prodh	equ	0xFF4
  4923                           prodl	equ	0xFF3
  4924                           intcon	equ	0xFF2
  4925                           intcon2	equ	0xFF1
  4926                           postinc0	equ	0xFEE
  4927                           wreg	equ	0xFE8
  4928                           postdec1	equ	0xFE5
  4929                           fsr1l	equ	0xFE1
  4930                           indf2	equ	0xFDF
  4931                           postinc2	equ	0xFDE
  4932                           postdec2	equ	0xFDD
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _setAddrWindow *****************
  4938 ;; Defined at:
  4939 ;;		line 429 in file "ST7735_TFT.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  x0              1    wreg     unsigned char 
  4942 ;;  y0              1   19[COMRAM] unsigned char 
  4943 ;;  x1              1   20[COMRAM] unsigned char 
  4944 ;;  y1              1   21[COMRAM] unsigned char 
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;  x0              1   22[COMRAM] unsigned char 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;		None               void
  4949 ;; Registers used:
  4950 ;;		wreg, status,2, status,0, cstack
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4956 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;Total ram usage:        4 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:    5
  4963 ;; This function calls:
  4964 ;;		_write_command
  4965 ;;		_write_data
  4966 ;; This function is called by:
  4967 ;;		_drawPixel
  4968 ;;		_drawFastVLine
  4969 ;;		_fillRectangle
  4970 ;;		_drawFastHLine
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text20
  4975  0011DA                     __ptext20:
  4976                           	opt stack 0
  4977  0011DA                     _setAddrWindow:
  4978                           	opt stack 22
  4979                           
  4980                           ;incstack = 0
  4981                           ;setAddrWindow@x0 stored from wreg
  4982  0011DA  6E17               	movwf	setAddrWindow@x0,c
  4983                           
  4984                           ;ST7735_TFT.c: 431: write_command(0x2A);
  4985  0011DC  0E2A               	movlw	42
  4986  0011DE  EC2B  F00A         	call	_write_command
  4987                           
  4988                           ;ST7735_TFT.c: 432: write_data(0);
  4989  0011E2  0E00               	movlw	0
  4990  0011E4  EC23  F00A         	call	_write_data
  4991                           
  4992                           ;ST7735_TFT.c: 433: write_data(x0 + colstart);
  4993  0011E8  5017               	movf	setAddrWindow@x0,w,c
  4994  0011EA  246C               	addwf	_colstart,w,c
  4995  0011EC  EC23  F00A         	call	_write_data
  4996                           
  4997                           ;ST7735_TFT.c: 434: write_data(0);
  4998  0011F0  0E00               	movlw	0
  4999  0011F2  EC23  F00A         	call	_write_data
  5000                           
  5001                           ;ST7735_TFT.c: 435: write_data(x1 + colstart);
  5002  0011F6  5015               	movf	setAddrWindow@x1,w,c
  5003  0011F8  246C               	addwf	_colstart,w,c
  5004  0011FA  EC23  F00A         	call	_write_data
  5005                           
  5006                           ;ST7735_TFT.c: 436: write_command(0x2B);
  5007  0011FE  0E2B               	movlw	43
  5008  001200  EC2B  F00A         	call	_write_command
  5009                           
  5010                           ;ST7735_TFT.c: 437: write_data(0);
  5011  001204  0E00               	movlw	0
  5012  001206  EC23  F00A         	call	_write_data
  5013                           
  5014                           ;ST7735_TFT.c: 438: write_data(y0 + rowstart);
  5015  00120A  5014               	movf	setAddrWindow@y0,w,c
  5016  00120C  246E               	addwf	_rowstart,w,c
  5017  00120E  EC23  F00A         	call	_write_data
  5018                           
  5019                           ;ST7735_TFT.c: 439: write_data(0);
  5020  001212  0E00               	movlw	0
  5021  001214  EC23  F00A         	call	_write_data
  5022                           
  5023                           ;ST7735_TFT.c: 440: write_data(y1 + rowstart);
  5024  001218  5016               	movf	setAddrWindow@y1,w,c
  5025  00121A  246E               	addwf	_rowstart,w,c
  5026  00121C  EC23  F00A         	call	_write_data
  5027                           
  5028                           ;ST7735_TFT.c: 441: write_command(0x2C);
  5029  001220  0E2C               	movlw	44
  5030  001222  EC2B  F00A         	call	_write_command
  5031  001226  0012               	return		;funcret
  5032  001228                     __end_of_setAddrWindow:
  5033                           	opt stack 0
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           intcon	equ	0xFF2
  5041                           intcon2	equ	0xFF1
  5042                           postinc0	equ	0xFEE
  5043                           wreg	equ	0xFE8
  5044                           postdec1	equ	0xFE5
  5045                           fsr1l	equ	0xFE1
  5046                           indf2	equ	0xFDF
  5047                           postinc2	equ	0xFDE
  5048                           postdec2	equ	0xFDD
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function _TFT_GreenTab_Initialize *****************
  5054 ;; Defined at:
  5055 ;;		line 681 in file "ST7735_TFT.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;Total ram usage:        0 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    6
  5076 ;; This function calls:
  5077 ;;		_Rcmd1
  5078 ;;		_Rcmd2red
  5079 ;;		_Rcmd3
  5080 ;;		_write_command
  5081 ;;		_write_data
  5082 ;; This function is called by:
  5083 ;;		_Initialize_Screen
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text21
  5088  001350                     __ptext21:
  5089                           	opt stack 0
  5090  001350                     _TFT_GreenTab_Initialize:
  5091                           	opt stack 23
  5092                           
  5093                           ;ST7735_TFT.c: 683: PORTDbits.RD4 = 1;
  5094                           
  5095                           ;incstack = 0
  5096  001350  8883               	bsf	3971,4,c	;volatile
  5097                           
  5098                           ;ST7735_TFT.c: 684: PORTDbits.RD3 = 0;
  5099  001352  9683               	bcf	3971,3,c	;volatile
  5100                           
  5101                           ;ST7735_TFT.c: 686: SSPSTAT=0x80;
  5102  001354  0E80               	movlw	128
  5103  001356  6EC7               	movwf	4039,c	;volatile
  5104                           
  5105                           ;ST7735_TFT.c: 687: SSPCON1=0x30;
  5106  001358  0E30               	movlw	48
  5107  00135A  6EC6               	movwf	4038,c	;volatile
  5108                           
  5109                           ;ST7735_TFT.c: 690: Rcmd1();
  5110  00135C  ECE0  F004         	call	_Rcmd1	;wreg free
  5111                           
  5112                           ;ST7735_TFT.c: 691: Rcmd2red();
  5113  001360  EC58  F009         	call	_Rcmd2red	;wreg free
  5114                           
  5115                           ;ST7735_TFT.c: 692: Rcmd3();
  5116  001364  ECED  F005         	call	_Rcmd3	;wreg free
  5117                           
  5118                           ;ST7735_TFT.c: 693: write_command(0x36);
  5119  001368  0E36               	movlw	54
  5120  00136A  EC2B  F00A         	call	_write_command
  5121                           
  5122                           ;ST7735_TFT.c: 694: write_data(0xC0);
  5123  00136E  0EC0               	movlw	192
  5124  001370  EC23  F00A         	call	_write_data
  5125                           
  5126                           ;ST7735_TFT.c: 695: _tft_type = 1;
  5127  001374  0E01               	movlw	1
  5128  001376  6E6A               	movwf	__tft_type,c
  5129  001378  0012               	return		;funcret
  5130  00137A                     __end_of_TFT_GreenTab_Initialize:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodh	equ	0xFF4
  5137                           prodl	equ	0xFF3
  5138                           intcon	equ	0xFF2
  5139                           intcon2	equ	0xFF1
  5140                           postinc0	equ	0xFEE
  5141                           wreg	equ	0xFE8
  5142                           postdec1	equ	0xFE5
  5143                           fsr1l	equ	0xFE1
  5144                           indf2	equ	0xFDF
  5145                           postinc2	equ	0xFDE
  5146                           postdec2	equ	0xFDD
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function _Rcmd3 *****************
  5152 ;; Defined at:
  5153 ;;		line 375 in file "ST7735_TFT.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;		None
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;		None
  5158 ;; Return value:  Size  Location     Type
  5159 ;;		None               void
  5160 ;; Registers used:
  5161 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;Total ram usage:        0 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    5
  5174 ;; This function calls:
  5175 ;;		_delay_ms
  5176 ;;		_write_command
  5177 ;;		_write_data
  5178 ;; This function is called by:
  5179 ;;		_TFT_GreenTab_Initialize
  5180 ;;		_TFT_BlackTab_Initialize
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text22
  5185  000BDA                     __ptext22:
  5186                           	opt stack 0
  5187  000BDA                     _Rcmd3:
  5188                           	opt stack 23
  5189                           
  5190                           ;ST7735_TFT.c: 377: write_command(0xE0);
  5191                           
  5192                           ;incstack = 0
  5193  000BDA  0EE0               	movlw	224
  5194  000BDC  EC2B  F00A         	call	_write_command
  5195                           
  5196                           ;ST7735_TFT.c: 378: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5197  000BE0  0E02               	movlw	2
  5198  000BE2  EC23  F00A         	call	_write_data
  5199  000BE6  0E1C               	movlw	28
  5200  000BE8  EC23  F00A         	call	_write_data
  5201  000BEC  0E07               	movlw	7
  5202  000BEE  EC23  F00A         	call	_write_data
  5203  000BF2  0E12               	movlw	18
  5204  000BF4  EC23  F00A         	call	_write_data
  5205                           
  5206                           ;ST7735_TFT.c: 379: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5207  000BF8  0E37               	movlw	55
  5208  000BFA  EC23  F00A         	call	_write_data
  5209  000BFE  0E32               	movlw	50
  5210  000C00  EC23  F00A         	call	_write_data
  5211  000C04  0E29               	movlw	41
  5212  000C06  EC23  F00A         	call	_write_data
  5213  000C0A  0E2D               	movlw	45
  5214  000C0C  EC23  F00A         	call	_write_data
  5215                           
  5216                           ;ST7735_TFT.c: 380: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5217  000C10  0E29               	movlw	41
  5218  000C12  EC23  F00A         	call	_write_data
  5219  000C16  0E25               	movlw	37
  5220  000C18  EC23  F00A         	call	_write_data
  5221  000C1C  0E2B               	movlw	43
  5222  000C1E  EC23  F00A         	call	_write_data
  5223  000C22  0E39               	movlw	57
  5224  000C24  EC23  F00A         	call	_write_data
  5225                           
  5226                           ;ST7735_TFT.c: 381: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5227  000C28  0E00               	movlw	0
  5228  000C2A  EC23  F00A         	call	_write_data
  5229  000C2E  0E01               	movlw	1
  5230  000C30  EC23  F00A         	call	_write_data
  5231  000C34  0E03               	movlw	3
  5232  000C36  EC23  F00A         	call	_write_data
  5233  000C3A  0E10               	movlw	16
  5234  000C3C  EC23  F00A         	call	_write_data
  5235                           
  5236                           ;ST7735_TFT.c: 382: write_command(0xE1);
  5237  000C40  0EE1               	movlw	225
  5238  000C42  EC2B  F00A         	call	_write_command
  5239                           
  5240                           ;ST7735_TFT.c: 383: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5241  000C46  0E03               	movlw	3
  5242  000C48  EC23  F00A         	call	_write_data
  5243  000C4C  0E1D               	movlw	29
  5244  000C4E  EC23  F00A         	call	_write_data
  5245  000C52  0E07               	movlw	7
  5246  000C54  EC23  F00A         	call	_write_data
  5247  000C58  0E06               	movlw	6
  5248  000C5A  EC23  F00A         	call	_write_data
  5249                           
  5250                           ;ST7735_TFT.c: 384: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5251  000C5E  0E2E               	movlw	46
  5252  000C60  EC23  F00A         	call	_write_data
  5253  000C64  0E2C               	movlw	44
  5254  000C66  EC23  F00A         	call	_write_data
  5255  000C6A  0E29               	movlw	41
  5256  000C6C  EC23  F00A         	call	_write_data
  5257  000C70  0E2D               	movlw	45
  5258  000C72  EC23  F00A         	call	_write_data
  5259                           
  5260                           ;ST7735_TFT.c: 385: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5261  000C76  0E2E               	movlw	46
  5262  000C78  EC23  F00A         	call	_write_data
  5263  000C7C  0E2E               	movlw	46
  5264  000C7E  EC23  F00A         	call	_write_data
  5265  000C82  0E37               	movlw	55
  5266  000C84  EC23  F00A         	call	_write_data
  5267  000C88  0E3F               	movlw	63
  5268  000C8A  EC23  F00A         	call	_write_data
  5269                           
  5270                           ;ST7735_TFT.c: 386: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5271  000C8E  0E00               	movlw	0
  5272  000C90  EC23  F00A         	call	_write_data
  5273  000C94  0E00               	movlw	0
  5274  000C96  EC23  F00A         	call	_write_data
  5275  000C9A  0E02               	movlw	2
  5276  000C9C  EC23  F00A         	call	_write_data
  5277  000CA0  0E10               	movlw	16
  5278  000CA2  EC23  F00A         	call	_write_data
  5279                           
  5280                           ;ST7735_TFT.c: 387: write_command(0x13);
  5281  000CA6  0E13               	movlw	19
  5282  000CA8  EC2B  F00A         	call	_write_command
  5283                           
  5284                           ;ST7735_TFT.c: 388: delay_ms(10);
  5285  000CAC  0E00               	movlw	0
  5286  000CAE  6E18               	movwf	delay_ms@ms+1,c
  5287  000CB0  0E0A               	movlw	10
  5288  000CB2  6E17               	movwf	delay_ms@ms,c
  5289  000CB4  ECC4  F008         	call	_delay_ms	;wreg free
  5290                           
  5291                           ;ST7735_TFT.c: 389: write_command(0x29);
  5292  000CB8  0E29               	movlw	41
  5293  000CBA  EC2B  F00A         	call	_write_command
  5294                           
  5295                           ;ST7735_TFT.c: 390: delay_ms(100);
  5296  000CBE  0E00               	movlw	0
  5297  000CC0  6E18               	movwf	delay_ms@ms+1,c
  5298  000CC2  0E64               	movlw	100
  5299  000CC4  6E17               	movwf	delay_ms@ms,c
  5300  000CC6  ECC4  F008         	call	_delay_ms	;wreg free
  5301  000CCA  0012               	return		;funcret
  5302  000CCC                     __end_of_Rcmd3:
  5303                           	opt stack 0
  5304                           tblptru	equ	0xFF8
  5305                           tblptrh	equ	0xFF7
  5306                           tblptrl	equ	0xFF6
  5307                           tablat	equ	0xFF5
  5308                           prodh	equ	0xFF4
  5309                           prodl	equ	0xFF3
  5310                           intcon	equ	0xFF2
  5311                           intcon2	equ	0xFF1
  5312                           postinc0	equ	0xFEE
  5313                           wreg	equ	0xFE8
  5314                           postdec1	equ	0xFE5
  5315                           fsr1l	equ	0xFE1
  5316                           indf2	equ	0xFDF
  5317                           postinc2	equ	0xFDE
  5318                           postdec2	equ	0xFDD
  5319                           fsr2h	equ	0xFDA
  5320                           fsr2l	equ	0xFD9
  5321                           status	equ	0xFD8
  5322                           
  5323 ;; *************** function _Rcmd2red *****************
  5324 ;; Defined at:
  5325 ;;		line 365 in file "ST7735_TFT.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;		None
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;		None
  5330 ;; Return value:  Size  Location     Type
  5331 ;;		None               void
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;Total ram usage:        0 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    5
  5346 ;; This function calls:
  5347 ;;		_write_command
  5348 ;;		_write_data
  5349 ;; This function is called by:
  5350 ;;		_TFT_GreenTab_Initialize
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text23
  5355  0012B0                     __ptext23:
  5356                           	opt stack 0
  5357  0012B0                     _Rcmd2red:
  5358                           	opt stack 23
  5359                           
  5360                           ;ST7735_TFT.c: 367: write_command(0x2A);
  5361                           
  5362                           ;incstack = 0
  5363  0012B0  0E2A               	movlw	42
  5364  0012B2  EC2B  F00A         	call	_write_command
  5365                           
  5366                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x00);
  5367  0012B6  0E00               	movlw	0
  5368  0012B8  EC23  F00A         	call	_write_data
  5369  0012BC  0E00               	movlw	0
  5370  0012BE  EC23  F00A         	call	_write_data
  5371                           
  5372                           ;ST7735_TFT.c: 369: write_data(0x00); write_data(0x7F);
  5373  0012C2  0E00               	movlw	0
  5374  0012C4  EC23  F00A         	call	_write_data
  5375  0012C8  0E7F               	movlw	127
  5376  0012CA  EC23  F00A         	call	_write_data
  5377                           
  5378                           ;ST7735_TFT.c: 370: write_command(0x2B);
  5379  0012CE  0E2B               	movlw	43
  5380  0012D0  EC2B  F00A         	call	_write_command
  5381                           
  5382                           ;ST7735_TFT.c: 371: write_data(0x00); write_data(0x00);
  5383  0012D4  0E00               	movlw	0
  5384  0012D6  EC23  F00A         	call	_write_data
  5385  0012DA  0E00               	movlw	0
  5386  0012DC  EC23  F00A         	call	_write_data
  5387                           
  5388                           ;ST7735_TFT.c: 372: write_data(0x00); write_data(0x9F);
  5389  0012E0  0E00               	movlw	0
  5390  0012E2  EC23  F00A         	call	_write_data
  5391  0012E6  0E9F               	movlw	159
  5392  0012E8  EC23  F00A         	call	_write_data
  5393  0012EC  0012               	return		;funcret
  5394  0012EE                     __end_of_Rcmd2red:
  5395                           	opt stack 0
  5396                           tblptru	equ	0xFF8
  5397                           tblptrh	equ	0xFF7
  5398                           tblptrl	equ	0xFF6
  5399                           tablat	equ	0xFF5
  5400                           prodh	equ	0xFF4
  5401                           prodl	equ	0xFF3
  5402                           intcon	equ	0xFF2
  5403                           intcon2	equ	0xFF1
  5404                           postinc0	equ	0xFEE
  5405                           wreg	equ	0xFE8
  5406                           postdec1	equ	0xFE5
  5407                           fsr1l	equ	0xFE1
  5408                           indf2	equ	0xFDF
  5409                           postinc2	equ	0xFDE
  5410                           postdec2	equ	0xFDD
  5411                           fsr2h	equ	0xFDA
  5412                           fsr2l	equ	0xFD9
  5413                           status	equ	0xFD8
  5414                           
  5415 ;; *************** function _Rcmd1 *****************
  5416 ;; Defined at:
  5417 ;;		line 318 in file "ST7735_TFT.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;		None
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;		None
  5422 ;; Return value:  Size  Location     Type
  5423 ;;		None               void
  5424 ;; Registers used:
  5425 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5426 ;; Tracked objects:
  5427 ;;		On entry : 0/0
  5428 ;;		On exit  : 0/0
  5429 ;;		Unchanged: 0/0
  5430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5435 ;;Total ram usage:        0 bytes
  5436 ;; Hardware stack levels used:    1
  5437 ;; Hardware stack levels required when called:    5
  5438 ;; This function calls:
  5439 ;;		_delay_ms
  5440 ;;		_write_command
  5441 ;;		_write_data
  5442 ;; This function is called by:
  5443 ;;		_TFT_GreenTab_Initialize
  5444 ;;		_TFT_BlackTab_Initialize
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           	psect	text24
  5449  0009C0                     __ptext24:
  5450                           	opt stack 0
  5451  0009C0                     _Rcmd1:
  5452                           	opt stack 23
  5453                           
  5454                           ;ST7735_TFT.c: 320: write_command(0x01);
  5455                           
  5456                           ;incstack = 0
  5457  0009C0  0E01               	movlw	1
  5458  0009C2  EC2B  F00A         	call	_write_command
  5459                           
  5460                           ;ST7735_TFT.c: 321: delay_ms(150);
  5461  0009C6  0E00               	movlw	0
  5462  0009C8  6E18               	movwf	delay_ms@ms+1,c
  5463  0009CA  0E96               	movlw	150
  5464  0009CC  6E17               	movwf	delay_ms@ms,c
  5465  0009CE  ECC4  F008         	call	_delay_ms	;wreg free
  5466                           
  5467                           ;ST7735_TFT.c: 322: write_command(0x11);
  5468  0009D2  0E11               	movlw	17
  5469  0009D4  EC2B  F00A         	call	_write_command
  5470                           
  5471                           ;ST7735_TFT.c: 323: delay_ms(500);
  5472  0009D8  0E01               	movlw	1
  5473  0009DA  6E18               	movwf	delay_ms@ms+1,c
  5474  0009DC  0EF4               	movlw	244
  5475  0009DE  6E17               	movwf	delay_ms@ms,c
  5476  0009E0  ECC4  F008         	call	_delay_ms	;wreg free
  5477                           
  5478                           ;ST7735_TFT.c: 324: write_command(0xB1);
  5479  0009E4  0EB1               	movlw	177
  5480  0009E6  EC2B  F00A         	call	_write_command
  5481                           
  5482                           ;ST7735_TFT.c: 325: write_data(0x01);
  5483  0009EA  0E01               	movlw	1
  5484  0009EC  EC23  F00A         	call	_write_data
  5485                           
  5486                           ;ST7735_TFT.c: 326: write_data(0x2C);
  5487  0009F0  0E2C               	movlw	44
  5488  0009F2  EC23  F00A         	call	_write_data
  5489                           
  5490                           ;ST7735_TFT.c: 327: write_data(0x2D);
  5491  0009F6  0E2D               	movlw	45
  5492  0009F8  EC23  F00A         	call	_write_data
  5493                           
  5494                           ;ST7735_TFT.c: 328: write_command(0xB2);
  5495  0009FC  0EB2               	movlw	178
  5496  0009FE  EC2B  F00A         	call	_write_command
  5497                           
  5498                           ;ST7735_TFT.c: 329: write_data(0x01);
  5499  000A02  0E01               	movlw	1
  5500  000A04  EC23  F00A         	call	_write_data
  5501                           
  5502                           ;ST7735_TFT.c: 330: write_data(0x2C);
  5503  000A08  0E2C               	movlw	44
  5504  000A0A  EC23  F00A         	call	_write_data
  5505                           
  5506                           ;ST7735_TFT.c: 331: write_data(0x2D);
  5507  000A0E  0E2D               	movlw	45
  5508  000A10  EC23  F00A         	call	_write_data
  5509                           
  5510                           ;ST7735_TFT.c: 332: write_command(0xB3);
  5511  000A14  0EB3               	movlw	179
  5512  000A16  EC2B  F00A         	call	_write_command
  5513                           
  5514                           ;ST7735_TFT.c: 333: write_data(0x01);
  5515  000A1A  0E01               	movlw	1
  5516  000A1C  EC23  F00A         	call	_write_data
  5517                           
  5518                           ;ST7735_TFT.c: 334: write_data(0x2C);
  5519  000A20  0E2C               	movlw	44
  5520  000A22  EC23  F00A         	call	_write_data
  5521                           
  5522                           ;ST7735_TFT.c: 335: write_data(0x2D);
  5523  000A26  0E2D               	movlw	45
  5524  000A28  EC23  F00A         	call	_write_data
  5525                           
  5526                           ;ST7735_TFT.c: 336: write_data(0x01);
  5527  000A2C  0E01               	movlw	1
  5528  000A2E  EC23  F00A         	call	_write_data
  5529                           
  5530                           ;ST7735_TFT.c: 337: write_data(0x2C);
  5531  000A32  0E2C               	movlw	44
  5532  000A34  EC23  F00A         	call	_write_data
  5533                           
  5534                           ;ST7735_TFT.c: 338: write_data(0x2D);
  5535  000A38  0E2D               	movlw	45
  5536  000A3A  EC23  F00A         	call	_write_data
  5537                           
  5538                           ;ST7735_TFT.c: 339: write_command(0xB4);
  5539  000A3E  0EB4               	movlw	180
  5540  000A40  EC2B  F00A         	call	_write_command
  5541                           
  5542                           ;ST7735_TFT.c: 340: write_data(0x07);
  5543  000A44  0E07               	movlw	7
  5544  000A46  EC23  F00A         	call	_write_data
  5545                           
  5546                           ;ST7735_TFT.c: 341: write_command(0xC0);
  5547  000A4A  0EC0               	movlw	192
  5548  000A4C  EC2B  F00A         	call	_write_command
  5549                           
  5550                           ;ST7735_TFT.c: 342: write_data(0xA2);
  5551  000A50  0EA2               	movlw	162
  5552  000A52  EC23  F00A         	call	_write_data
  5553                           
  5554                           ;ST7735_TFT.c: 343: write_data(0x02);
  5555  000A56  0E02               	movlw	2
  5556  000A58  EC23  F00A         	call	_write_data
  5557                           
  5558                           ;ST7735_TFT.c: 344: write_data(0x84);
  5559  000A5C  0E84               	movlw	132
  5560  000A5E  EC23  F00A         	call	_write_data
  5561                           
  5562                           ;ST7735_TFT.c: 345: write_command(0xC1);
  5563  000A62  0EC1               	movlw	193
  5564  000A64  EC2B  F00A         	call	_write_command
  5565                           
  5566                           ;ST7735_TFT.c: 346: write_data(0xC5);
  5567  000A68  0EC5               	movlw	197
  5568  000A6A  EC23  F00A         	call	_write_data
  5569                           
  5570                           ;ST7735_TFT.c: 347: write_command(0xC2);
  5571  000A6E  0EC2               	movlw	194
  5572  000A70  EC2B  F00A         	call	_write_command
  5573                           
  5574                           ;ST7735_TFT.c: 348: write_data(0x0A);
  5575  000A74  0E0A               	movlw	10
  5576  000A76  EC23  F00A         	call	_write_data
  5577                           
  5578                           ;ST7735_TFT.c: 349: write_data(0x00);
  5579  000A7A  0E00               	movlw	0
  5580  000A7C  EC23  F00A         	call	_write_data
  5581                           
  5582                           ;ST7735_TFT.c: 350: write_command(0xC3);
  5583  000A80  0EC3               	movlw	195
  5584  000A82  EC2B  F00A         	call	_write_command
  5585                           
  5586                           ;ST7735_TFT.c: 351: write_data(0x8A);
  5587  000A86  0E8A               	movlw	138
  5588  000A88  EC23  F00A         	call	_write_data
  5589                           
  5590                           ;ST7735_TFT.c: 352: write_data(0x2A);
  5591  000A8C  0E2A               	movlw	42
  5592  000A8E  EC23  F00A         	call	_write_data
  5593                           
  5594                           ;ST7735_TFT.c: 353: write_command(0xC4);
  5595  000A92  0EC4               	movlw	196
  5596  000A94  EC2B  F00A         	call	_write_command
  5597                           
  5598                           ;ST7735_TFT.c: 354: write_data(0x8A);
  5599  000A98  0E8A               	movlw	138
  5600  000A9A  EC23  F00A         	call	_write_data
  5601                           
  5602                           ;ST7735_TFT.c: 355: write_data(0xEE);
  5603  000A9E  0EEE               	movlw	238
  5604  000AA0  EC23  F00A         	call	_write_data
  5605                           
  5606                           ;ST7735_TFT.c: 356: write_command(0xC5);
  5607  000AA4  0EC5               	movlw	197
  5608  000AA6  EC2B  F00A         	call	_write_command
  5609                           
  5610                           ;ST7735_TFT.c: 357: write_data(0x0E);
  5611  000AAA  0E0E               	movlw	14
  5612  000AAC  EC23  F00A         	call	_write_data
  5613                           
  5614                           ;ST7735_TFT.c: 358: write_command(0x20);
  5615  000AB0  0E20               	movlw	32
  5616  000AB2  EC2B  F00A         	call	_write_command
  5617                           
  5618                           ;ST7735_TFT.c: 359: write_command(0x36);
  5619  000AB6  0E36               	movlw	54
  5620  000AB8  EC2B  F00A         	call	_write_command
  5621                           
  5622                           ;ST7735_TFT.c: 360: write_data(0xC8);
  5623  000ABC  0EC8               	movlw	200
  5624  000ABE  EC23  F00A         	call	_write_data
  5625                           
  5626                           ;ST7735_TFT.c: 361: write_command(0x3A);
  5627  000AC2  0E3A               	movlw	58
  5628  000AC4  EC2B  F00A         	call	_write_command
  5629                           
  5630                           ;ST7735_TFT.c: 362: write_data(0x05);
  5631  000AC8  0E05               	movlw	5
  5632  000ACA  EC23  F00A         	call	_write_data
  5633  000ACE  0012               	return		;funcret
  5634  000AD0                     __end_of_Rcmd1:
  5635                           	opt stack 0
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           prodh	equ	0xFF4
  5641                           prodl	equ	0xFF3
  5642                           intcon	equ	0xFF2
  5643                           intcon2	equ	0xFF1
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           postdec1	equ	0xFE5
  5647                           fsr1l	equ	0xFE1
  5648                           indf2	equ	0xFDF
  5649                           postinc2	equ	0xFDE
  5650                           postdec2	equ	0xFDD
  5651                           fsr2h	equ	0xFDA
  5652                           fsr2l	equ	0xFD9
  5653                           status	equ	0xFD8
  5654                           
  5655 ;; *************** function _write_data *****************
  5656 ;; Defined at:
  5657 ;;		line 246 in file "ST7735_TFT.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  data_           1    wreg     unsigned char 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  data_           1   18[COMRAM] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;		None               void
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;Total ram usage:        1 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    4
  5678 ;; This function calls:
  5679 ;;		_spiwrite
  5680 ;; This function is called by:
  5681 ;;		_Rcmd1
  5682 ;;		_Rcmd2red
  5683 ;;		_Rcmd3
  5684 ;;		_setAddrWindow
  5685 ;;		_drawPixel
  5686 ;;		_TFT_GreenTab_Initialize
  5687 ;;		_Bcmd
  5688 ;;		_setScrollDefinition
  5689 ;;		_Rcmd2green
  5690 ;;		_VerticalScroll
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text25
  5695  001446                     __ptext25:
  5696                           	opt stack 0
  5697  001446                     _write_data:
  5698                           	opt stack 22
  5699                           
  5700                           ;incstack = 0
  5701                           ;write_data@data_ stored from wreg
  5702  001446  6E13               	movwf	write_data@data_,c
  5703                           
  5704                           ;ST7735_TFT.c: 248: PORTDbits.RD4 = 0;
  5705  001448  9883               	bcf	3971,4,c	;volatile
  5706                           
  5707                           ;ST7735_TFT.c: 249: PORTDbits.RD3 = 1;
  5708  00144A  8683               	bsf	3971,3,c	;volatile
  5709                           
  5710                           ;ST7735_TFT.c: 250: spiwrite(data_);
  5711  00144C  5013               	movf	write_data@data_,w,c
  5712  00144E  EC10  F00A         	call	_spiwrite
  5713                           
  5714                           ;ST7735_TFT.c: 251: PORTDbits.RD4 = 1;
  5715  001452  8883               	bsf	3971,4,c	;volatile
  5716  001454  0012               	return		;funcret
  5717  001456                     __end_of_write_data:
  5718                           	opt stack 0
  5719                           tblptru	equ	0xFF8
  5720                           tblptrh	equ	0xFF7
  5721                           tblptrl	equ	0xFF6
  5722                           tablat	equ	0xFF5
  5723                           prodh	equ	0xFF4
  5724                           prodl	equ	0xFF3
  5725                           intcon	equ	0xFF2
  5726                           intcon2	equ	0xFF1
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           postdec1	equ	0xFE5
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _write_command *****************
  5739 ;; Defined at:
  5740 ;;		line 235 in file "ST7735_TFT.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  cmd_            1    wreg     unsigned char 
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;  cmd_            1   18[COMRAM] unsigned char 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;		None               void
  5747 ;; Registers used:
  5748 ;;		wreg, status,2, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;Total ram usage:        1 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    4
  5761 ;; This function calls:
  5762 ;;		_spiwrite
  5763 ;; This function is called by:
  5764 ;;		_Rcmd1
  5765 ;;		_Rcmd2red
  5766 ;;		_Rcmd3
  5767 ;;		_setAddrWindow
  5768 ;;		_TFT_GreenTab_Initialize
  5769 ;;		_Bcmd
  5770 ;;		_setScrollDefinition
  5771 ;;		_Rcmd2green
  5772 ;;		_VerticalScroll
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text26
  5777  001456                     __ptext26:
  5778                           	opt stack 0
  5779  001456                     _write_command:
  5780                           	opt stack 22
  5781                           
  5782                           ;incstack = 0
  5783                           ;write_command@cmd_ stored from wreg
  5784  001456  6E13               	movwf	write_command@cmd_,c
  5785                           
  5786                           ;ST7735_TFT.c: 237: PORTDbits.RD4 = 0;
  5787  001458  9883               	bcf	3971,4,c	;volatile
  5788                           
  5789                           ;ST7735_TFT.c: 239: PORTDbits.RD3 = 0;
  5790  00145A  9683               	bcf	3971,3,c	;volatile
  5791                           
  5792                           ;ST7735_TFT.c: 240: spiwrite(cmd_);
  5793  00145C  5013               	movf	write_command@cmd_,w,c
  5794  00145E  EC10  F00A         	call	_spiwrite
  5795                           
  5796                           ;ST7735_TFT.c: 242: PORTDbits.RD4 = 1;
  5797  001462  8883               	bsf	3971,4,c	;volatile
  5798  001464  0012               	return		;funcret
  5799  001466                     __end_of_write_command:
  5800                           	opt stack 0
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           intcon	equ	0xFF2
  5808                           intcon2	equ	0xFF1
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           postdec1	equ	0xFE5
  5812                           fsr1l	equ	0xFE1
  5813                           indf2	equ	0xFDF
  5814                           postinc2	equ	0xFDE
  5815                           postdec2	equ	0xFDD
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function _spiwrite *****************
  5821 ;; Defined at:
  5822 ;;		line 226 in file "ST7735_TFT.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  spidata         1    wreg     unsigned char 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  spidata         1   17[COMRAM] unsigned char 
  5827 ;;  x               1   16[COMRAM] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;		None               void
  5830 ;; Registers used:
  5831 ;;		wreg
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:        2 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    3
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_write_command
  5848 ;;		_write_data
  5849 ;;		_drawFastVLine
  5850 ;;		_fillRectangle
  5851 ;;		_drawFastHLine
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text27
  5856  001420                     __ptext27:
  5857                           	opt stack 0
  5858  001420                     _spiwrite:
  5859                           	opt stack 24
  5860                           
  5861                           ;incstack = 0
  5862                           ;spiwrite@spidata stored from wreg
  5863  001420  6E12               	movwf	spiwrite@spidata,c
  5864                           
  5865                           ;ST7735_TFT.c: 228: char x;
  5866                           ;ST7735_TFT.c: 229: PIR1bits.SSPIF = 0;
  5867  001422  969E               	bcf	3998,3,c	;volatile
  5868                           
  5869                           ;ST7735_TFT.c: 230: x = SSPBUF;
  5870  001424  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  5871                           
  5872                           ;ST7735_TFT.c: 231: SSPBUF = spidata;
  5873  001428  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5874                           
  5875                           ;ST7735_TFT.c: 232: while (!SSPSTATbits.BF);
  5876  00142C  D000               	goto	l191
  5877  00142E                     l191:
  5878  00142E  A0C7               	btfss	4039,0,c	;volatile
  5879  001430  D7FE               	goto	l191
  5880  001432  0012               	return		;funcret
  5881  001434                     __end_of_spiwrite:
  5882                           	opt stack 0
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           prodh	equ	0xFF4
  5888                           prodl	equ	0xFF3
  5889                           intcon	equ	0xFF2
  5890                           intcon2	equ	0xFF1
  5891                           postinc0	equ	0xFEE
  5892                           wreg	equ	0xFE8
  5893                           postdec1	equ	0xFE5
  5894                           fsr1l	equ	0xFE1
  5895                           indf2	equ	0xFDF
  5896                           postinc2	equ	0xFDE
  5897                           postdec2	equ	0xFDD
  5898                           fsr2h	equ	0xFDA
  5899                           fsr2l	equ	0xFD9
  5900                           status	equ	0xFD8
  5901                           
  5902 ;; *************** function _LCD_Reset *****************
  5903 ;; Defined at:
  5904 ;;		line 254 in file "ST7735_TFT.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;		None
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;		None
  5909 ;; Return value:  Size  Location     Type
  5910 ;;		None               void
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;Total ram usage:        0 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    5
  5925 ;; This function calls:
  5926 ;;		_delay_ms
  5927 ;; This function is called by:
  5928 ;;		_Initialize_Screen
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text28
  5933  001434                     __ptext28:
  5934                           	opt stack 0
  5935  001434                     _LCD_Reset:
  5936                           	opt stack 24
  5937                           
  5938                           ;ST7735_TFT.c: 256: PORTDbits.RD2 = 0;
  5939                           
  5940                           ;incstack = 0
  5941  001434  9483               	bcf	3971,2,c	;volatile
  5942                           
  5943                           ;ST7735_TFT.c: 257: delay_ms(100);
  5944  001436  0E00               	movlw	0
  5945  001438  6E18               	movwf	delay_ms@ms+1,c
  5946  00143A  0E64               	movlw	100
  5947  00143C  6E17               	movwf	delay_ms@ms,c
  5948  00143E  ECC4  F008         	call	_delay_ms	;wreg free
  5949                           
  5950                           ;ST7735_TFT.c: 258: PORTDbits.RD2 = 1;
  5951  001442  8483               	bsf	3971,2,c	;volatile
  5952  001444  0012               	return		;funcret
  5953  001446                     __end_of_LCD_Reset:
  5954                           	opt stack 0
  5955                           tblptru	equ	0xFF8
  5956                           tblptrh	equ	0xFF7
  5957                           tblptrl	equ	0xFF6
  5958                           tablat	equ	0xFF5
  5959                           prodh	equ	0xFF4
  5960                           prodl	equ	0xFF3
  5961                           intcon	equ	0xFF2
  5962                           intcon2	equ	0xFF1
  5963                           postinc0	equ	0xFEE
  5964                           wreg	equ	0xFE8
  5965                           postdec1	equ	0xFE5
  5966                           fsr1l	equ	0xFE1
  5967                           indf2	equ	0xFDF
  5968                           postinc2	equ	0xFDE
  5969                           postdec2	equ	0xFDD
  5970                           fsr2h	equ	0xFDA
  5971                           fsr2l	equ	0xFD9
  5972                           status	equ	0xFD8
  5973                           
  5974 ;; *************** function _delay_ms *****************
  5975 ;; Defined at:
  5976 ;;		line 101 in file "ST7735_TFT.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  ms              2   22[COMRAM] int 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  count           2   26[COMRAM] int 
  5981 ;; Return value:  Size  Location     Type
  5982 ;;		None               void
  5983 ;; Registers used:
  5984 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5994 ;;Total ram usage:        6 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    4
  5997 ;; This function calls:
  5998 ;;		___wmul
  5999 ;; This function is called by:
  6000 ;;		_LCD_Reset
  6001 ;;		_Rcmd1
  6002 ;;		_Rcmd3
  6003 ;;		_Bcmd
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text29
  6008  001188                     __ptext29:
  6009                           	opt stack 0
  6010  001188                     _delay_ms:
  6011                           	opt stack 23
  6012                           
  6013                           ;ST7735_TFT.c: 107: int count;
  6014                           ;ST7735_TFT.c: 108: count = 8000000/4000/8 * ms;
  6015                           
  6016                           ;incstack = 0
  6017  001188  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6018  00118C  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6019  001190  0E00               	movlw	0
  6020  001192  6E14               	movwf	___wmul@multiplicand+1,c
  6021  001194  0EFA               	movlw	250
  6022  001196  6E13               	movwf	___wmul@multiplicand,c
  6023  001198  ECBD  F009         	call	___wmul	;wreg free
  6024  00119C  C011  F01B         	movff	?___wmul,delay_ms@count
  6025  0011A0  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6026                           
  6027                           ;ST7735_TFT.c: 109: count = (0xffff - count);
  6028  0011A4  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6029  0011A8  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6030  0011AC  1E19               	comf	??_delay_ms,f,c
  6031  0011AE  1E1A               	comf	??_delay_ms+1,f,c
  6032  0011B0  4A19               	infsnz	??_delay_ms,f,c
  6033  0011B2  2A1A               	incf	??_delay_ms+1,f,c
  6034  0011B4  0EFF               	movlw	255
  6035  0011B6  2419               	addwf	??_delay_ms,w,c
  6036  0011B8  6E1B               	movwf	delay_ms@count,c
  6037  0011BA  0EFF               	movlw	255
  6038  0011BC  201A               	addwfc	??_delay_ms+1,w,c
  6039  0011BE  6E1C               	movwf	delay_ms@count+1,c
  6040                           
  6041                           ;ST7735_TFT.c: 111: T3CON = 0xb8;
  6042  0011C0  0EB8               	movlw	184
  6043  0011C2  6EB1               	movwf	4017,c	;volatile
  6044                           
  6045                           ;ST7735_TFT.c: 113: TMR0L = count & 0x00ff;
  6046  0011C4  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  6047                           
  6048                           ;ST7735_TFT.c: 114: TMR0H = count >> 8;
  6049  0011C8  501C               	movf	delay_ms@count+1,w,c
  6050  0011CA  6ED7               	movwf	4055,c	;volatile
  6051                           
  6052                           ;ST7735_TFT.c: 116: PIR2bits.TMR3IF = 0;
  6053  0011CC  92A1               	bcf	4001,1,c	;volatile
  6054                           
  6055                           ;ST7735_TFT.c: 117: T3CONbits.TMR3ON = 1;
  6056  0011CE  80B1               	bsf	4017,0,c	;volatile
  6057                           
  6058                           ;ST7735_TFT.c: 119: while (PIR2bits.TMR3IF == 0);
  6059  0011D0  D000               	goto	l181
  6060  0011D2                     l181:
  6061  0011D2  A2A1               	btfss	4001,1,c	;volatile
  6062  0011D4  D7FE               	goto	l181
  6063                           
  6064                           ;ST7735_TFT.c: 120: T3CONbits.TMR3ON = 0;
  6065  0011D6  90B1               	bcf	4017,0,c	;volatile
  6066  0011D8  0012               	return		;funcret
  6067  0011DA                     __end_of_delay_ms:
  6068                           	opt stack 0
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           prodh	equ	0xFF4
  6074                           prodl	equ	0xFF3
  6075                           intcon	equ	0xFF2
  6076                           intcon2	equ	0xFF1
  6077                           postinc0	equ	0xFEE
  6078                           wreg	equ	0xFE8
  6079                           postdec1	equ	0xFE5
  6080                           fsr1l	equ	0xFE1
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function ___wmul *****************
  6089 ;; Defined at:
  6090 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  multiplier      2   16[COMRAM] unsigned int 
  6093 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  product         2   20[COMRAM] unsigned int 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  2   16[COMRAM] unsigned int 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0, prodl, prodh
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6105 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;Total ram usage:        6 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    3
  6112 ;; This function calls:
  6113 ;;		Nothing
  6114 ;; This function is called by:
  6115 ;;		_delay_ms
  6116 ;;		_drawChar
  6117 ;;		_printf
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           	psect	text30
  6122  00137A                     __ptext30:
  6123                           	opt stack 0
  6124  00137A                     ___wmul:
  6125                           	opt stack 26
  6126                           
  6127                           ;incstack = 0
  6128  00137A  5011               	movf	___wmul@multiplier,w,c
  6129  00137C  0213               	mulwf	___wmul@multiplicand,c
  6130  00137E  CFF3 F015          	movff	prodl,___wmul@product
  6131  001382  CFF4 F016          	movff	prodh,___wmul@product+1
  6132  001386  5011               	movf	___wmul@multiplier,w,c
  6133  001388  0214               	mulwf	___wmul@multiplicand+1,c
  6134  00138A  50F3               	movf	prodl,w,c
  6135  00138C  2616               	addwf	___wmul@product+1,f,c
  6136  00138E  5012               	movf	___wmul@multiplier+1,w,c
  6137  001390  0213               	mulwf	___wmul@multiplicand,c
  6138  001392  50F3               	movf	prodl,w,c
  6139  001394  2616               	addwf	___wmul@product+1,f,c
  6140  001396  C015  F011         	movff	___wmul@product,?___wmul
  6141  00139A  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6142  00139E  D000               	goto	l443
  6143  0013A0                     l443:
  6144  0013A0  0012               	return		;funcret
  6145  0013A2                     __end_of___wmul:
  6146                           	opt stack 0
  6147                           tblptru	equ	0xFF8
  6148                           tblptrh	equ	0xFF7
  6149                           tblptrl	equ	0xFF6
  6150                           tablat	equ	0xFF5
  6151                           prodh	equ	0xFF4
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           intcon2	equ	0xFF1
  6155                           postinc0	equ	0xFEE
  6156                           wreg	equ	0xFE8
  6157                           postdec1	equ	0xFE5
  6158                           fsr1l	equ	0xFE1
  6159                           indf2	equ	0xFDF
  6160                           postinc2	equ	0xFDE
  6161                           postdec2	equ	0xFDD
  6162                           fsr2h	equ	0xFDA
  6163                           fsr2l	equ	0xFD9
  6164                           status	equ	0xFD8
  6165                           
  6166 ;; *************** function _chkisr *****************
  6167 ;; Defined at:
  6168 ;;		line 130 in file "Lab9_sample_3.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;		None
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;		None
  6173 ;; Return value:  Size  Location     Type
  6174 ;;		None               void
  6175 ;; Registers used:
  6176 ;;		wreg, status,2, status,0, cstack
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;Total ram usage:       14 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; Hardware stack levels required when called:    2
  6189 ;; This function calls:
  6190 ;;		_INT0_isr
  6191 ;;		_TIMER1_isr
  6192 ;; This function is called by:
  6193 ;;		Interrupt level 2
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           	psect	intcode
  6198  000008                     __pintcode:
  6199                           	opt stack 0
  6200  000008                     _chkisr:
  6201                           	opt stack 20
  6202                           
  6203                           ;incstack = 0
  6204  000008  CFFA F003          	movff	pclath,??_chkisr
  6205  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6206  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6207  000014  ED25  F008         	call	int_func,f	;refresh shadow registers
  6208                           pclatu	equ	0xFFB
  6209                           pclath	equ	0xFFA
  6210                           tblptru	equ	0xFF8
  6211                           tblptrh	equ	0xFF7
  6212                           tblptrl	equ	0xFF6
  6213                           tablat	equ	0xFF5
  6214                           prodh	equ	0xFF4
  6215                           prodl	equ	0xFF3
  6216                           intcon	equ	0xFF2
  6217                           intcon2	equ	0xFF1
  6218                           postinc0	equ	0xFEE
  6219                           fsr0l	equ	0xFE9
  6220                           wreg	equ	0xFE8
  6221                           postdec1	equ	0xFE5
  6222                           fsr1l	equ	0xFE1
  6223                           indf2	equ	0xFDF
  6224                           postinc2	equ	0xFDE
  6225                           postdec2	equ	0xFDD
  6226                           fsr2h	equ	0xFDA
  6227                           fsr2l	equ	0xFD9
  6228                           status	equ	0xFD8
  6229                           
  6230                           	psect	intcode_body
  6231  00104A                     __pintcode_body:
  6232                           	opt stack 20
  6233  00104A                     int_func:
  6234                           	opt stack 20
  6235  00104A  0006               	pop		; remove dummy address from shadow register refresh
  6236  00104C  CFEA F006          	movff	fsr0h,??_chkisr+3
  6237  001050  CFE1 F007          	movff	fsr1l,??_chkisr+4
  6238  001054  CFE2 F008          	movff	fsr1h,??_chkisr+5
  6239  001058  CFD9 F009          	movff	fsr2l,??_chkisr+6
  6240  00105C  CFDA F00A          	movff	fsr2h,??_chkisr+7
  6241  001060  CFF3 F00B          	movff	prodl,??_chkisr+8
  6242  001064  CFF4 F00C          	movff	prodh,??_chkisr+9
  6243  001068  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  6244  00106C  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  6245  001070  CFF8 F00F          	movff	tblptru,??_chkisr+12
  6246  001074  CFF5 F010          	movff	tablat,??_chkisr+13
  6247                           
  6248                           ;Lab9_sample_3.c: 132: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  6249  001078  A09E               	btfss	3998,0,c	;volatile
  6250  00107A  D003               	goto	i2l1795
  6251  00107C  EC3A  F00A         	call	_TIMER1_isr	;wreg free
  6252  001080  D000               	goto	i2l1795
  6253  001082                     i2l1795:
  6254                           
  6255                           ;Lab9_sample_3.c: 133: if (INTCONbits.INT0IF == 1) INT0_isr();
  6256  001082  A2F2               	btfss	intcon,1,c	;volatile
  6257  001084  D003               	goto	i2l106
  6258  001086  EC99  F003         	call	_INT0_isr	;wreg free
  6259  00108A  D000               	goto	i2l106
  6260  00108C                     i2l106:
  6261  00108C  C010  FFF5         	movff	??_chkisr+13,tablat
  6262  001090  C00F  FFF8         	movff	??_chkisr+12,tblptru
  6263  001094  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  6264  001098  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  6265  00109C  C00C  FFF4         	movff	??_chkisr+9,prodh
  6266  0010A0  C00B  FFF3         	movff	??_chkisr+8,prodl
  6267  0010A4  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  6268  0010A8  C009  FFD9         	movff	??_chkisr+6,fsr2l
  6269  0010AC  C008  FFE2         	movff	??_chkisr+5,fsr1h
  6270  0010B0  C007  FFE1         	movff	??_chkisr+4,fsr1l
  6271  0010B4  C006  FFEA         	movff	??_chkisr+3,fsr0h
  6272  0010B8  C005  FFE9         	movff	??_chkisr+2,fsr0l
  6273  0010BC  C004  FFFB         	movff	??_chkisr+1,pclatu
  6274  0010C0  C003  FFFA         	movff	??_chkisr,pclath
  6275  0010C4  0011               	retfie		f
  6276  0010C6                     __end_of_chkisr:
  6277                           	opt stack 0
  6278                           pclatu	equ	0xFFB
  6279                           pclath	equ	0xFFA
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           intcon	equ	0xFF2
  6287                           intcon2	equ	0xFF1
  6288                           postinc0	equ	0xFEE
  6289                           fsr0h	equ	0xFEA
  6290                           fsr0l	equ	0xFE9
  6291                           wreg	equ	0xFE8
  6292                           postdec1	equ	0xFE5
  6293                           fsr1h	equ	0xFE2
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           fsr2h	equ	0xFDA
  6299                           fsr2l	equ	0xFD9
  6300                           status	equ	0xFD8
  6301                           
  6302 ;; *************** function _TIMER1_isr *****************
  6303 ;; Defined at:
  6304 ;;		line 136 in file "Lab9_sample_3.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;		None
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;		None
  6309 ;; Return value:  Size  Location     Type
  6310 ;;		None               void
  6311 ;; Registers used:
  6312 ;;		wreg, status,2
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;Total ram usage:        0 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_chkisr
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text32
  6332  001474                     __ptext32:
  6333                           	opt stack 0
  6334  001474                     _TIMER1_isr:
  6335                           	opt stack 21
  6336                           
  6337                           ;Lab9_sample_3.c: 138: Nec_state = 0;
  6338                           
  6339                           ;incstack = 0
  6340  001474  0E00               	movlw	0
  6341  001476  6E69               	movwf	_Nec_state,c
  6342                           
  6343                           ;Lab9_sample_3.c: 139: INTCON2bits.INTEDG0 = 0;
  6344  001478  9CF1               	bcf	intcon2,6,c	;volatile
  6345                           
  6346                           ;Lab9_sample_3.c: 140: T1CONbits.TMR1ON = 0;
  6347  00147A  90CD               	bcf	4045,0,c	;volatile
  6348                           
  6349                           ;Lab9_sample_3.c: 141: PIR1bits.TMR1IF = 0;
  6350  00147C  909E               	bcf	3998,0,c	;volatile
  6351  00147E  0012               	return		;funcret
  6352  001480                     __end_of_TIMER1_isr:
  6353                           	opt stack 0
  6354                           pclatu	equ	0xFFB
  6355                           pclath	equ	0xFFA
  6356                           tblptru	equ	0xFF8
  6357                           tblptrh	equ	0xFF7
  6358                           tblptrl	equ	0xFF6
  6359                           tablat	equ	0xFF5
  6360                           prodh	equ	0xFF4
  6361                           prodl	equ	0xFF3
  6362                           intcon	equ	0xFF2
  6363                           intcon2	equ	0xFF1
  6364                           postinc0	equ	0xFEE
  6365                           fsr0h	equ	0xFEA
  6366                           fsr0l	equ	0xFE9
  6367                           wreg	equ	0xFE8
  6368                           postdec1	equ	0xFE5
  6369                           fsr1h	equ	0xFE2
  6370                           fsr1l	equ	0xFE1
  6371                           indf2	equ	0xFDF
  6372                           postinc2	equ	0xFDE
  6373                           postdec2	equ	0xFDD
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _INT0_isr *****************
  6379 ;; Defined at:
  6380 ;;		line 150 in file "Lab9_sample_3.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, status,2, status,0, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;Total ram usage:        2 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    1
  6401 ;; This function calls:
  6402 ;;		_force_nec_state0
  6403 ;; This function is called by:
  6404 ;;		_chkisr
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           	psect	text33
  6409  000732                     __ptext33:
  6410                           	opt stack 0
  6411  000732                     _INT0_isr:
  6412                           	opt stack 20
  6413                           
  6414                           ;Lab9_sample_3.c: 152: INTCONbits.INT0IF = 0;
  6415                           
  6416                           ;incstack = 0
  6417  000732  92F2               	bcf	intcon,1,c	;volatile
  6418                           
  6419                           ;Lab9_sample_3.c: 153: if (Nec_state != 0)
  6420  000734  5069               	movf	_Nec_state,w,c
  6421  000736  B4D8               	btfsc	status,2,c
  6422  000738  D095               	goto	i2l1615
  6423                           
  6424                           ;Lab9_sample_3.c: 154: {
  6425                           ;Lab9_sample_3.c: 155: Time_Elapsed = (TMR1H << 8) | TMR1L;
  6426  00073A  50CE               	movf	4046,w,c	;volatile
  6427  00073C  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  6428  000740  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  6429  000742  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  6430  000746  6A01               	clrf	??_INT0_isr,c
  6431  000748  1001               	iorwf	??_INT0_isr,w,c
  6432  00074A  6E60               	movwf	_Time_Elapsed,c
  6433  00074C  5002               	movf	??_INT0_isr+1,w,c
  6434  00074E  6E61               	movwf	_Time_Elapsed+1,c
  6435                           
  6436                           ;Lab9_sample_3.c: 156: TMR1H = 0;
  6437  000750  0E00               	movlw	0
  6438  000752  6ECF               	movwf	4047,c	;volatile
  6439                           
  6440                           ;Lab9_sample_3.c: 157: TMR1L = 0;
  6441  000754  0E00               	movlw	0
  6442  000756  6ECE               	movwf	4046,c	;volatile
  6443                           
  6444                           ;Lab9_sample_3.c: 158: }
  6445                           ;Lab9_sample_3.c: 160: switch(Nec_state)
  6446  000758  D085               	goto	i2l1615
  6447  00075A                     i2l1545:
  6448                           
  6449                           ;Lab9_sample_3.c: 163: {
  6450                           ;Lab9_sample_3.c: 165: TMR1H = 0;
  6451  00075A  0E00               	movlw	0
  6452  00075C  6ECF               	movwf	4047,c	;volatile
  6453                           
  6454                           ;Lab9_sample_3.c: 166: TMR1L = 0;
  6455  00075E  0E00               	movlw	0
  6456  000760  6ECE               	movwf	4046,c	;volatile
  6457                           
  6458                           ;Lab9_sample_3.c: 167: PIR1bits.TMR1IF = 0;
  6459  000762  909E               	bcf	3998,0,c	;volatile
  6460                           
  6461                           ;Lab9_sample_3.c: 168: T1CON= 0x90;
  6462  000764  0E90               	movlw	144
  6463  000766  6ECD               	movwf	4045,c	;volatile
  6464                           
  6465                           ;Lab9_sample_3.c: 169: T1CONbits.TMR1ON = 1;
  6466  000768  80CD               	bsf	4045,0,c	;volatile
  6467                           
  6468                           ;Lab9_sample_3.c: 170: bit_count = 0;
  6469  00076A  0E00               	movlw	0
  6470  00076C  6E6B               	movwf	_bit_count,c
  6471                           
  6472                           ;Lab9_sample_3.c: 171: Nec_code = 0;
  6473  00076E  0E00               	movlw	0
  6474  000770  6E5C               	movwf	_Nec_code,c
  6475  000772  0E00               	movlw	0
  6476  000774  6E5D               	movwf	_Nec_code+1,c
  6477  000776  0E00               	movlw	0
  6478  000778  6E5E               	movwf	_Nec_code+2,c
  6479  00077A  0E00               	movlw	0
  6480  00077C  6E5F               	movwf	_Nec_code+3,c
  6481                           
  6482                           ;Lab9_sample_3.c: 172: Nec_state = 1;
  6483  00077E  0E01               	movlw	1
  6484  000780  6E69               	movwf	_Nec_state,c
  6485  000782  D06E               	goto	i2l1609
  6486                           
  6487                           ;Lab9_sample_3.c: 174: return;
  6488                           
  6489                           ;Lab9_sample_3.c: 173: INTCON2bits.INTEDG0 = 1;
  6490  000784  D080               	goto	i2l118
  6491  000786                     i2l1555:
  6492                           
  6493                           ;Lab9_sample_3.c: 178: {
  6494                           ;Lab9_sample_3.c: 179: if( (8500 < Time_Elapsed) && (Time_Elapsed < 9500))
  6495  000786  0E35               	movlw	53
  6496  000788  5C60               	subwf	_Time_Elapsed,w,c
  6497  00078A  0E21               	movlw	33
  6498  00078C  5861               	subwfb	_Time_Elapsed+1,w,c
  6499  00078E  A0D8               	btfss	status,0,c
  6500  000790  D009               	goto	i2l1561
  6501  000792  0E1C               	movlw	28
  6502  000794  5C60               	subwf	_Time_Elapsed,w,c
  6503  000796  0E25               	movlw	37
  6504  000798  5861               	subwfb	_Time_Elapsed+1,w,c
  6505  00079A  B0D8               	btfsc	status,0,c
  6506  00079C  D003               	goto	i2l1561
  6507                           
  6508                           ;Lab9_sample_3.c: 180: {
  6509                           ;Lab9_sample_3.c: 181: Nec_state = 2;
  6510  00079E  0E02               	movlw	2
  6511  0007A0  6E69               	movwf	_Nec_state,c
  6512                           
  6513                           ;Lab9_sample_3.c: 182: }
  6514  0007A2  D02A               	goto	i2l1587
  6515  0007A4                     i2l1561:
  6516                           
  6517                           ;Lab9_sample_3.c: 183: else
  6518                           ;Lab9_sample_3.c: 184: {
  6519                           ;Lab9_sample_3.c: 185: force_nec_state0();
  6520  0007A4  EC40  F00A         	call	_force_nec_state0	;wreg free
  6521  0007A8  D027               	goto	i2l1587
  6522  0007AA  D026               	goto	i2l1587
  6523                           
  6524                           ;Lab9_sample_3.c: 189: return;
  6525                           
  6526                           ;Lab9_sample_3.c: 186: }
  6527                           ;Lab9_sample_3.c: 188: INTCON2bits.INTEDG0 = 0;
  6528  0007AC  D06C               	goto	i2l118
  6529  0007AE                     i2l1567:
  6530                           
  6531                           ;Lab9_sample_3.c: 193: {
  6532                           ;Lab9_sample_3.c: 194: if( (4000 < Time_Elapsed) && (Time_Elapsed < 5000))
  6533  0007AE  0EA1               	movlw	161
  6534  0007B0  5C60               	subwf	_Time_Elapsed,w,c
  6535  0007B2  0E0F               	movlw	15
  6536  0007B4  5861               	subwfb	_Time_Elapsed+1,w,c
  6537  0007B6  A0D8               	btfss	status,0,c
  6538  0007B8  D009               	goto	i2l1573
  6539  0007BA  0E88               	movlw	136
  6540  0007BC  5C60               	subwf	_Time_Elapsed,w,c
  6541  0007BE  0E13               	movlw	19
  6542  0007C0  5861               	subwfb	_Time_Elapsed+1,w,c
  6543  0007C2  B0D8               	btfsc	status,0,c
  6544  0007C4  D003               	goto	i2l1573
  6545                           
  6546                           ;Lab9_sample_3.c: 195: {
  6547                           ;Lab9_sample_3.c: 196: Nec_state = 3;
  6548  0007C6  0E03               	movlw	3
  6549  0007C8  6E69               	movwf	_Nec_state,c
  6550                           
  6551                           ;Lab9_sample_3.c: 197: }
  6552  0007CA  D04A               	goto	i2l1609
  6553  0007CC                     i2l1573:
  6554                           
  6555                           ;Lab9_sample_3.c: 199: else
  6556                           ;Lab9_sample_3.c: 200: {
  6557                           ;Lab9_sample_3.c: 201: force_nec_state0();
  6558  0007CC  EC40  F00A         	call	_force_nec_state0	;wreg free
  6559  0007D0  D047               	goto	i2l1609
  6560  0007D2  D046               	goto	i2l1609
  6561                           
  6562                           ;Lab9_sample_3.c: 204: return;
  6563                           
  6564                           ;Lab9_sample_3.c: 202: }
  6565                           ;Lab9_sample_3.c: 203: INTCON2bits.INTEDG0 = 1;
  6566  0007D4  D058               	goto	i2l118
  6567  0007D6                     i2l1579:
  6568                           
  6569                           ;Lab9_sample_3.c: 208: {
  6570                           ;Lab9_sample_3.c: 209: if( (400 < Time_Elapsed) && (Time_Elapsed < 700))
  6571  0007D6  0E91               	movlw	145
  6572  0007D8  5C60               	subwf	_Time_Elapsed,w,c
  6573  0007DA  0E01               	movlw	1
  6574  0007DC  5861               	subwfb	_Time_Elapsed+1,w,c
  6575  0007DE  A0D8               	btfss	status,0,c
  6576  0007E0  D008               	goto	i2l1585
  6577  0007E2  0EBC               	movlw	188
  6578  0007E4  5C60               	subwf	_Time_Elapsed,w,c
  6579  0007E6  0E02               	movlw	2
  6580  0007E8  5861               	subwfb	_Time_Elapsed+1,w,c
  6581  0007EA  B0D8               	btfsc	status,0,c
  6582  0007EC  D002               	goto	i2l1585
  6583                           
  6584                           ;Lab9_sample_3.c: 210: {
  6585                           ;Lab9_sample_3.c: 211: Nec_state = 4;
  6586  0007EE  0E04               	movlw	4
  6587  0007F0  D7D7               	goto	L3
  6588  0007F2                     i2l1585:
  6589                           
  6590                           ;Lab9_sample_3.c: 214: else
  6591                           ;Lab9_sample_3.c: 215: {
  6592                           ;Lab9_sample_3.c: 216: force_nec_state0();
  6593  0007F2  EC40  F00A         	call	_force_nec_state0	;wreg free
  6594  0007F6  D000               	goto	i2l1587
  6595  0007F8                     i2l1587:
  6596                           
  6597                           ;Lab9_sample_3.c: 217: }
  6598                           ;Lab9_sample_3.c: 218: INTCON2bits.INTEDG0 = 0;
  6599  0007F8  9CF1               	bcf	intcon2,6,c	;volatile
  6600                           
  6601                           ;Lab9_sample_3.c: 219: return;
  6602  0007FA  D045               	goto	i2l118
  6603  0007FC                     i2l1591:
  6604                           
  6605                           ;Lab9_sample_3.c: 223: {
  6606                           ;Lab9_sample_3.c: 224: if( (400 < Time_Elapsed) && (Time_Elapsed < 1800))
  6607  0007FC  0E91               	movlw	145
  6608  0007FE  5C60               	subwf	_Time_Elapsed,w,c
  6609  000800  0E01               	movlw	1
  6610  000802  5861               	subwfb	_Time_Elapsed+1,w,c
  6611  000804  A0D8               	btfss	status,0,c
  6612  000806  D02A               	goto	i2l1607
  6613  000808  0E08               	movlw	8
  6614  00080A  5C60               	subwf	_Time_Elapsed,w,c
  6615  00080C  0E07               	movlw	7
  6616  00080E  5861               	subwfb	_Time_Elapsed+1,w,c
  6617  000810  B0D8               	btfsc	status,0,c
  6618  000812  D024               	goto	i2l1607
  6619                           
  6620                           ;Lab9_sample_3.c: 225: {
  6621                           ;Lab9_sample_3.c: 226: Nec_code = Nec_code << 1;
  6622  000814  90D8               	bcf	status,0,c
  6623  000816  345C               	rlcf	_Nec_code,w,c
  6624  000818  6E5C               	movwf	_Nec_code,c
  6625  00081A  345D               	rlcf	_Nec_code+1,w,c
  6626  00081C  6E5D               	movwf	_Nec_code+1,c
  6627  00081E  345E               	rlcf	_Nec_code+2,w,c
  6628  000820  6E5E               	movwf	_Nec_code+2,c
  6629  000822  345F               	rlcf	_Nec_code+3,w,c
  6630  000824  6E5F               	movwf	_Nec_code+3,c
  6631                           
  6632                           ;Lab9_sample_3.c: 228: if( Time_Elapsed > 1000 )
  6633  000826  0EE9               	movlw	233
  6634  000828  5C60               	subwf	_Time_Elapsed,w,c
  6635  00082A  0E03               	movlw	3
  6636  00082C  5861               	subwfb	_Time_Elapsed+1,w,c
  6637  00082E  A0D8               	btfss	status,0,c
  6638  000830  D007               	goto	i2l1599
  6639                           
  6640                           ;Lab9_sample_3.c: 229: {
  6641                           ;Lab9_sample_3.c: 230: Nec_code+=0x01;
  6642  000832  0E01               	movlw	1
  6643  000834  265C               	addwf	_Nec_code,f,c
  6644  000836  0E00               	movlw	0
  6645  000838  225D               	addwfc	_Nec_code+1,f,c
  6646  00083A  225E               	addwfc	_Nec_code+2,f,c
  6647  00083C  225F               	addwfc	_Nec_code+3,f,c
  6648  00083E  D000               	goto	i2l1599
  6649  000840                     i2l1599:
  6650                           
  6651                           ;Lab9_sample_3.c: 231: }
  6652                           ;Lab9_sample_3.c: 232: bit_count++;
  6653  000840  2A6B               	incf	_bit_count,f,c
  6654                           
  6655                           ;Lab9_sample_3.c: 234: if( bit_count > 31 )
  6656  000842  0E1F               	movlw	31
  6657  000844  646B               	cpfsgt	_bit_count,c
  6658  000846  D007               	goto	i2l131
  6659                           
  6660                           ;Lab9_sample_3.c: 235: {
  6661                           ;Lab9_sample_3.c: 236: nec_ok = 1;
  6662  000848  0E00               	movlw	0
  6663  00084A  6E65               	movwf	_nec_ok+1,c
  6664  00084C  0E01               	movlw	1
  6665  00084E  6E64               	movwf	_nec_ok,c
  6666                           
  6667                           ;Lab9_sample_3.c: 237: INTCONbits.INT0IE = 0;
  6668  000850  98F2               	bcf	intcon,4,c	;volatile
  6669                           
  6670                           ;Lab9_sample_3.c: 238: Nec_state = 0;
  6671  000852  0E00               	movlw	0
  6672  000854  6E69               	movwf	_Nec_state,c
  6673  000856                     i2l131:
  6674                           
  6675                           ;Lab9_sample_3.c: 239: }
  6676                           ;Lab9_sample_3.c: 241: Nec_state = 3;
  6677  000856  0E03               	movlw	3
  6678  000858  6E69               	movwf	_Nec_state,c
  6679  00085A  D000               	goto	i2l1607
  6680  00085C                     i2l1607:
  6681                           
  6682                           ;Lab9_sample_3.c: 244: }
  6683                           ;Lab9_sample_3.c: 246: force_nec_state0();
  6684  00085C  EC40  F00A         	call	_force_nec_state0	;wreg free
  6685  000860                     i2l1609:
  6686                           
  6687                           ;Lab9_sample_3.c: 247: INTCON2bits.INTEDG0 = 1;
  6688  000860  8CF1               	bsf	intcon2,6,c	;volatile
  6689                           
  6690                           ;Lab9_sample_3.c: 249: }
  6691                           ;Lab9_sample_3.c: 250: }
  6692                           
  6693                           ;Lab9_sample_3.c: 248: return;
  6694  000862  D011               	goto	i2l118
  6695  000864                     i2l1615:
  6696  000864  5069               	movf	_Nec_state,w,c
  6697                           
  6698                           ; Switch size 1, requested type "space"
  6699                           ; Number of cases is 5, Range of values is 0 to 4
  6700                           ; switch strategies available:
  6701                           ; Name         Instructions Cycles
  6702                           ; simple_byte           16     9 (average)
  6703                           ;	Chosen strategy is simple_byte
  6704  000866  0A00               	xorlw	0	; case 0
  6705  000868  B4D8               	btfsc	status,2,c
  6706  00086A  D777               	goto	i2l1545
  6707  00086C  0A01               	xorlw	1	; case 1
  6708  00086E  B4D8               	btfsc	status,2,c
  6709  000870  D78A               	goto	i2l1555
  6710  000872  0A03               	xorlw	3	; case 2
  6711  000874  B4D8               	btfsc	status,2,c
  6712  000876  D79B               	goto	i2l1567
  6713  000878  0A01               	xorlw	1	; case 3
  6714  00087A  B4D8               	btfsc	status,2,c
  6715  00087C  D7AC               	goto	i2l1579
  6716  00087E  0A07               	xorlw	7	; case 4
  6717  000880  B4D8               	btfsc	status,2,c
  6718  000882  D7BC               	goto	i2l1591
  6719  000884  D000               	goto	i2l118
  6720  000886                     i2l118:
  6721  000886  0012               	return		;funcret
  6722  000888                     __end_of_INT0_isr:
  6723                           	opt stack 0
  6724                           pclatu	equ	0xFFB
  6725                           pclath	equ	0xFFA
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon	equ	0xFF2
  6733                           intcon2	equ	0xFF1
  6734                           postinc0	equ	0xFEE
  6735                           fsr0h	equ	0xFEA
  6736                           fsr0l	equ	0xFE9
  6737                           wreg	equ	0xFE8
  6738                           postdec1	equ	0xFE5
  6739                           fsr1h	equ	0xFE2
  6740                           fsr1l	equ	0xFE1
  6741                           indf2	equ	0xFDF
  6742                           postinc2	equ	0xFDE
  6743                           postdec2	equ	0xFDD
  6744                           fsr2h	equ	0xFDA
  6745                           fsr2l	equ	0xFD9
  6746                           status	equ	0xFD8
  6747                           
  6748 ;; *************** function _force_nec_state0 *****************
  6749 ;; Defined at:
  6750 ;;		line 144 in file "Lab9_sample_3.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;		None
  6753 ;; Auto vars:     Size  Location     Type
  6754 ;;		None
  6755 ;; Return value:  Size  Location     Type
  6756 ;;		None               void
  6757 ;; Registers used:
  6758 ;;		wreg, status,2
  6759 ;; Tracked objects:
  6760 ;;		On entry : 0/0
  6761 ;;		On exit  : 0/0
  6762 ;;		Unchanged: 0/0
  6763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;Total ram usage:        0 bytes
  6769 ;; Hardware stack levels used:    1
  6770 ;; This function calls:
  6771 ;;		Nothing
  6772 ;; This function is called by:
  6773 ;;		_INT0_isr
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text34
  6778  001480                     __ptext34:
  6779                           	opt stack 0
  6780  001480                     _force_nec_state0:
  6781                           	opt stack 20
  6782                           
  6783                           ;Lab9_sample_3.c: 146: Nec_state=0;
  6784                           
  6785                           ;incstack = 0
  6786  001480  0E00               	movlw	0
  6787  001482  6E69               	movwf	_Nec_state,c
  6788                           
  6789                           ;Lab9_sample_3.c: 147: T1CONbits.TMR1ON = 0;
  6790  001484  90CD               	bcf	4045,0,c	;volatile
  6791  001486  0012               	return		;funcret
  6792  001488                     __end_of_force_nec_state0:
  6793                           	opt stack 0
  6794                           pclatu	equ	0xFFB
  6795                           pclath	equ	0xFFA
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon	equ	0xFF2
  6803                           intcon2	equ	0xFF1
  6804                           postinc0	equ	0xFEE
  6805                           fsr0h	equ	0xFEA
  6806                           fsr0l	equ	0xFE9
  6807                           wreg	equ	0xFE8
  6808                           postdec1	equ	0xFE5
  6809                           fsr1h	equ	0xFE2
  6810                           fsr1l	equ	0xFE1
  6811                           indf2	equ	0xFDF
  6812                           postinc2	equ	0xFDE
  6813                           postdec2	equ	0xFDD
  6814                           fsr2h	equ	0xFDA
  6815                           fsr2l	equ	0xFD9
  6816                           status	equ	0xFD8
  6817                           pclatu	equ	0xFFB
  6818                           pclath	equ	0xFFA
  6819                           tblptru	equ	0xFF8
  6820                           tblptrh	equ	0xFF7
  6821                           tblptrl	equ	0xFF6
  6822                           tablat	equ	0xFF5
  6823                           prodh	equ	0xFF4
  6824                           prodl	equ	0xFF3
  6825                           intcon	equ	0xFF2
  6826                           intcon2	equ	0xFF1
  6827                           postinc0	equ	0xFEE
  6828                           fsr0h	equ	0xFEA
  6829                           fsr0l	equ	0xFE9
  6830                           wreg	equ	0xFE8
  6831                           postdec1	equ	0xFE5
  6832                           fsr1h	equ	0xFE2
  6833                           fsr1l	equ	0xFE1
  6834                           indf2	equ	0xFDF
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841                           	psect	rparam
  6842  0000                     pclatu	equ	0xFFB
  6843                           pclath	equ	0xFFA
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           intcon2	equ	0xFF1
  6852                           postinc0	equ	0xFEE
  6853                           fsr0h	equ	0xFEA
  6854                           fsr0l	equ	0xFE9
  6855                           wreg	equ	0xFE8
  6856                           postdec1	equ	0xFE5
  6857                           fsr1h	equ	0xFE2
  6858                           fsr1l	equ	0xFE1
  6859                           indf2	equ	0xFDF
  6860                           postinc2	equ	0xFDE
  6861                           postdec2	equ	0xFDD
  6862                           fsr2h	equ	0xFDA
  6863                           fsr2l	equ	0xFD9
  6864                           status	equ	0xFD8


Data Sizes:
    Strings     87
    Constant    507
    Data        169
    BSS         92
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     110
    BANK0           128      7     101
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          244      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[6]), STR_3(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_2(CODE[22]), STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   51027
                                             66 COMRAM     3     3      0
                  _Initialize_Screen
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    2239
                                             29 COMRAM    25    17      8
                            ___lldiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     268
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20901
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EF3      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      7E       8       49.2%
BITBANK14           F4      0       0      33        0.0%
BANK14              F4      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      6E       1       86.6%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     151       6        0.0%
DATA                 0      0     151       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 21 14:40:20 2021

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006D                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _D1 00C9                                _D2 0080  
                              _D3 0095                                l95 146A  
             ___wmul@multiplicand 0013                               l241 0F48  
                             l305 0380                               l235 134E  
                             l323 08F6                               l181 11D2  
                             l191 142E                               l431 10F2  
                             l407 02BC                               l440 1134  
                             l257 0730                               l266 0686  
                             l443 13A0                               l259 060A  
                             l435 110C                               l436 110E  
                             l437 1118                               l294 0DA6  
                             l438 111A                               l295 0D12  
                             l297 0D82                               l298 0DA4  
                             l386 0114                               l903 0EB0  
                             l874 13C2                               _nbr 0062  
                             _txt 0066                               prod 000FF3  
                             wreg 000FE8                   ??_fillRectangle 001D  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 1350  
                    __CFG_WDT$OFF 000000                              l1005 12AE  
                  drawFastVLine@h 0019                              l3123 0F0A  
                  drawFastVLine@x 0022                              l3133 0F30  
                            l3301 06A8                              l2421 10EA  
                            l2413 10D8                    drawFastVLine@y 0018  
                            l3135 0F3E                              l3119 0ED2  
                            l3311 0724                              l3303 06D0  
                            l3161 1330                              l2521 1302  
                            l2433 1104                              l2425 10F6  
                            l2417 10E2                              l3323 127C  
                            l3403 0BBC                              l3173 124E  
                            l3309 06FC                              l3317 072C  
                            l3325 1282                              l3405 0BC4  
                            l3341 0D4A                              l3271 05EC  
                            l3335 0CDC                              l2519 12F8  
                            l3503 00E4                              l3169 1232  
                            l3281 060E                              l3361 0D90  
                            l3353 0D78                              l3441 08DC  
                            l3513 0134                              l3291 067A  
                            l3275 05F8                              l3611 0456  
                            l2563 13BA                              l3531 019E  
                            l3523 016A                              l3507 00EE  
                            l3293 067E                              l3285 0616  
                            l3357 0D86                              l3461 09AA  
                            l2573 0E58                              l3541 01D8  
                            l3517 015A                              l3279 0606  
                            l3391 0B4C                              l3367 0DA0  
                            l2575 0E66                              l3551 0210  
                            l3535 01C2                              l3527 019A  
                            l3519 015E                              l3703 0528  
                            l3289 0646                              l3457 0958  
                            l2585 0EA0                              l2577 0E6E  
                            l3553 021C                              l3545 01F0  
                            l3537 01CC                              l3561 02A0  
                            l3395 0B6A                              l3379 0AFC  
                            l3547 01F8                              l3491 0064  
                            l3483 0036                              l3707 052C  
                            l3485 0044                              l3583 0366  
                            l3559 028C                              l3495 0082  
                            l3479 0026                              l3489 004E  
                            l3695 0502                              l3679 04C2  
                            l3699 050A                              STR_1 FCEE  
                            STR_2 FCD8                              STR_3 FD04  
                            STR_4 FD29                              STR_5 FD18  
                            u2130 0F00                              u2430 0B26  
                            u2360 0D0A                              u2290 06DE  
                            u2370 0D40                              _TRMT 007D61  
                            _main 046C                              _font FADD  
                            fsr0h 000FEA                              _txt1 012A  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 005B                              pclat 000FFA  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
                 ??_drawFastVLine 001C                      ___param_bank 000010  
                     ?_TIMER1_isr 0001                  __end_of_INT0_isr 0888  
                 drawFastVLine@hi 0020                   drawFastVLine@lo 0021  
                           ?_main 0001                   drawCircle@ddF_x 0026  
                 drawCircle@ddF_y 0028                   __end_of___lldiv 0EC2  
                           _T1CON 000FCD                             _T3CON 000FB1  
                           i2l106 108C                             i2l131 0856  
                           i2l118 0886                   drawCircle@color 0022  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR1H 000FCF                             _TMR0L 000FD6  
                           _TMR1L 000FCE                             _SPBRG 000FAF  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _Rcmd1 09C0  
                           _Rcmd3 0BDA                             _nRBPU 007F8F  
                           _color 0100                             _font2 FBDC  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
                 __end_of_isdigit 13C4             fillCircleHelper@delta 002B  
                           _putch 1466             fillCircleHelper@color 002D  
                           main@i 0045                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
                 write_data@data_ 0013                   __initialization 0F4A  
                    __end_of_main 05DC                      __end_of_font FBDC  
                __end_of_Rcmd2red 12EE                            ??_main 0043  
                   __activetblptr 000002                 __end_of_LCD_Reset 1446  
       ??_TFT_GreenTab_Initialize 001D                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON1 000FC1  
                          ?_putch 0001                            i2l1607 085C  
                          i2l1615 0864                            i2l1609 0860  
                          i2l1561 07A4                            i2l1545 075A  
                          i2l1555 0786                            i2l1573 07CC  
                          i2l1591 07FC                            i2l1567 07AE  
                          i2l1585 07F2                            i2l1587 07F8  
                          i2l1579 07D6                            i2l1599 0840  
                          i2l1795 1082                            _OSCCON 000FD3  
             __size_of_TIMER1_isr 000C                            _SPBRGH 000FB0  
                          _SSPBUF 000FC9                  _force_nec_state0 1480  
                __end_of_delay_ms 11DA                  __end_of_fillRect 1272  
                __end_of_drawChar 0732                __size_of_OpenUSART 0070  
                          ___wmul 137A         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 0BDA                         ??___lldiv 0019  
                          _chkisr 0008                            _array1 0046  
                          _buffer 00AA                            _nec_ok 0064  
                          clear_0 0F50                            clear_1 0F5C  
                          _printf 001C                      drawtext@size 0040  
                          _strcpy 12EE                            _strlen 1272  
                    __pdataCOMRAM 0046                         ??_isdigit 0011  
                    __mediumconst FADC                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0011                  __end_of_spiwrite 1434  
                      __accesstop 0080           __end_of__initialization 0FC2  
                       ?_INT0_isr 0001                     ___rparam_used 000001  
                   __end_of_Rcmd1 0AD0                     __end_of_Rcmd3 0CCC  
                  __pcstackCOMRAM 0001                      __pidataBANK0 13F6  
                    __pidataBANK1 0FCC                     __end_of_font2 FCB8  
                   __end_of_putch 1474                    drawPixel@color 0019  
          __size_of_write_command 0010        fillCircleHelper@cornername 0029  
                         ??_Rcmd1 001D                           ??_Rcmd3 001D  
              __size_of_drawPixel 0030                 __end_of_OpenUSART 1136  
                         ??_putch 0011                        __pbssBANK0 0080  
                       ?_Rcmd2red 0001                __size_of_init_UART 0014  
                 spiwrite@spidata 0012                        ??_INT0_isr 0001  
              __CFG_CCP2MX$PORTBE 000000                           ?___wmul 0011  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                    ??_TIMER1_isr 0001                        _fillCircle 1136  
                         ?_printf 001E                           ?_strcpy 0011  
                         ?_strlen 0011                        _fillScreen 13C4  
                      _drawCircle 02BE                         ?_delay_ms 0017  
                       ?_fillRect 0023                         ?_drawChar 002E  
                         _SSPCON1 000FC6                           _SSPSTAT 000FC7  
           __end_of_fillRectangle 0DA8                         ?_drawtext 0039  
                      ??_Rcmd2red 0014                __end_of_TIMER1_isr 1480  
                   _write_command 1456                           __Hparam 0000  
                         __Lparam 0000                 __end_of_drawPixel 1350  
           __end_of_drawFastVLine 0F4A                  _fillCircleHelper 0888  
                         ___lldiv 0E36                   __size_of___wmul 0028  
                 __size_of_chkisr 10BE                         ?_spiwrite 0001  
                         __pcinit 0F4A                           __ramtop 1000  
                         __ptext0 046C                           __ptext1 001C  
                         __ptext2 1466                           __ptext3 13A2  
                         __ptext4 0E36                           __ptext5 140C  
                         __ptext6 10C6                           __ptext7 1136  
                         __ptext8 0888                           __ptext9 02BE  
                 __size_of_printf 02A2                 __end_of_init_UART 1420  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
               __end_of_hexpowers FCD8          __end_of_force_nec_state0 1488  
                       _T1CONbits 000FCD                           _isdigit 13A2  
                       _T3CONbits 000FB1                        ??_delay_ms 0019  
                   drawtext@_text 003A                     drawtext@color 003C  
                      ??_fillRect 0028                        ??_drawChar 0035  
                       _LCD_Reset 1434                     _setAddrWindow 11DA  
                  __pintcode_body 104A                        delay_ms@ms 0017  
            end_of_initialization 0FC2                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FADC  
                         int_func 104A                   ___lldiv@divisor 0015  
                 ___lldiv@counter 001D                         _RCSTAbits 000FAB  
                         printf@c 0036                           printf@f 001E  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                drawtext@cursor_x 00E4                  drawtext@cursor_y 00E3  
                       _PORTDbits 000F83                       ?_fillScreen 0024  
                     ?_drawCircle 001C                        drawChar@bg 0032  
                       _TRISCbits 000F94                    ?_setAddrWindow 0014  
                      ?_LCD_Reset 0001                  drawtext@textsize 00DF  
                      drawPixel@x 001B                        drawPixel@y 0018  
                     printf@width 0034                         _TXSTAbits 000FAC  
               __size_of_INT0_isr 0156                    __end_of___wmul 13A2  
                   delay_ms@count 001B                        _write_data 1446  
                   __pidataCOMRAM 13E0                    __end_of_chkisr 10C6  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 003E  
                       _Nec_code1 0068                    __end_of_printf 02BE  
                  __end_of_strcpy 1320                    __end_of_strlen 12B0  
                       _Nec_state 0069               start_initialization 0F4A  
                 ??_write_command 0013                         _OpenUSART 10C6  
             __size_of_fillCircle 0052                  __CFG_OSC$INTIO67 000000  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                          ??___wmul 0015  
                        ??_chkisr 0003                       __pdataBANK0 00C9  
                     __pdataBANK1 0100                   setAddrWindow@x0 0017  
                 setAddrWindow@x1 0015                   setAddrWindow@y0 0014  
                 setAddrWindow@y1 0016                          ??_printf 0026  
                        ??_strcpy 0015                          ??_strlen 0013  
                     __pbssCOMRAM 005C                   ??_setAddrWindow 0017  
                   __pcstackBANK0 00DE                       ??_LCD_Reset 001D  
                    _isdigit$1509 0012          __end_of_fillCircleHelper 09C0  
               __size_of_delay_ms 0052                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 0011  
               __size_of_drawtext 010A                         _bit_count 006B  
                       __pintcode 0008   __end_of_TFT_GreenTab_Initialize 137A  
                   __pmediumconst FADC                          ?___lldiv 0011  
                       __tft_type 006A                drawFastVLine@color 001A  
                     ?_write_data 0001                         _drawPixel 1320  
               __size_of_spiwrite 0014                 ?_force_nec_state0 0001  
                        ?_isdigit 0001                 _Initialize_Screen 0DA8  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART 140C                ??_force_nec_state0 0001  
                       _hexpowers FCB8                ?_Initialize_Screen 0001  
                  __size_of_putch 000E                    ___wmul@product 0015  
             ??_Initialize_Screen 0043                          _INT0_isr 0732  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                         fillRect@h 0025  
                       fillRect@i 002C                         fillRect@w 0024  
                       fillRect@x 002B                         fillRect@y 0023  
                       drawChar@c 002F                         drawChar@i 0038  
                       drawChar@j 0037                      ??_fillCircle 0043  
                       drawChar@x 0036                         drawChar@y 002E  
                      ?_drawPixel 0018            __size_of_fillRectangle 00DC  
               ___wmul@multiplier 0011         __end_of_Initialize_Screen 0E36  
                    ??_fillScreen 0026                      ??_drawCircle 0024  
                      printf@flag 0033                        printf@prec 002B  
                       main@found 0044                        ?_init_UART 0001  
                     _INTCON2bits 000FF1                         copy_data0 0F76  
                       copy_data1 0F96                         copy_data2 0FB6  
                       drawtext@i 00E1            __size_of_drawFastVLine 0088  
                       drawtext@x 00DE                         drawtext@y 0039  
                        _Nec_code 005C                 write_command@cmd_ 0013  
                     ??_OpenUSART 0013                          _Rcmd2red 12B0  
             __size_of_write_data 0010                   OpenUSART@config 0013  
                    _Time_Elapsed 0060                __end_of_fillCircle 1188  
                        __Hrparam 0000                __end_of_fillScreen 13E0  
                        __Lrparam 0000                __end_of_drawCircle 046C  
                __size_of___lldiv 008C                  __size_of_isdigit 0022  
                        _delay_ms 1188                          __ptext10 0DA8  
                        __ptext11 12EE                          __ptext20 11DA  
                        __ptext12 13C4                          __ptext21 1350  
                        __ptext13 0CCC                          __ptext30 137A  
                        __ptext22 0BDA                          __ptext14 0AD0  
                        __ptext23 12B0                          __ptext15 1272  
                        __ptext32 1474                          __ptext24 09C0  
                        __ptext16 05DC                          __ptext33 0732  
                        __ptext25 1446                          __ptext17 1228  
                        __ptext34 1480                          __ptext26 1456  
                        __ptext18 0EC2                          __ptext27 1420  
                        __ptext19 1320                          __ptext28 1434  
                        __ptext29 1188                          _fillRect 1228  
                        _drawChar 05DC  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 006C                          _drawtext 0AD0  
                      strcpy@from 0013                     _fillRectangle 0CCC  
                   __size_of_main 0170                   fillRectangle@hi 0021  
                 fillRectangle@lo 0022                     _drawFastVLine 0EC2  
                       printf@idx 002A                          _spiwrite 1420  
                       printf@val 002D                       ??_drawPixel 001B  
                        _rowstart 006E                fillCircleHelper@x0 0023  
              fillCircleHelper@y0 0025        __size_of_Initialize_Screen 008E  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 0011  
                     ??_init_UART 0014                          isdigit@c 0013  
               ?_fillCircleHelper 0023                         spiwrite@x 0011  
                        intlevel2 0000                    ?_fillRectangle 0018  
              ??_fillCircleHelper 002F             __end_of_write_command 1466  
                ___lldiv@dividend 0011                   fillScreen@color 0024  
                    fillCircle@x0 003B                      fillCircle@y0 003D  
                  fillRectangle@h 001A                    fillRectangle@w 0019  
                  fillRectangle@x 0023                    fillRectangle@y 0018  
                  ?_drawFastVLine 0018                          printf@ap 0031  
               fillCircleHelper@f 0035                 fillCircleHelper@r 0027  
               fillCircleHelper@x 0037                 fillCircleHelper@y 0039  
                    ??_write_data 0013                        _TIMER1_isr 1474  
                   fillRect@color 0026                  ___lldiv@quotient 0019  
                        strcpy@cp 0015                          strlen@cp 0015  
                        strcpy@to 0011                       fillCircle@r 003F  
           __end_of_setAddrWindow 1228                fillRectangle@color 001B  
                   drawChar@color 0030                __end_of_write_data 1456  
       __size_of_force_nec_state0 0008                      drawChar@line 0035  
                    drawChar@size 0034  
