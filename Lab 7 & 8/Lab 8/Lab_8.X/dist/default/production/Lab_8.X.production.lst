

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 14 12:43:12 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataCOMRAM
    84  002860                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _wrap
    88  002860  01                 	db	1
    89                           
    90                           ;initializer for _EW_Count
    91  002861  30                 	db	48
    92  002862  30                 	db	48
    93  002863  00                 	db	0
    94                           
    95                           ;initializer for _Act_Mode_Txt
    96  002864  44                 	db	68
    97  002865  00                 	db	0
    98                           
    99                           ;initializer for _FlashingR_Txt
   100  002866  30                 	db	48
   101  002867  00                 	db	0
   102                           
   103                           ;initializer for _FlashingS_Txt
   104  002868  30                 	db	48
   105  002869  00                 	db	0
   106                           
   107                           ;initializer for _SW_EWLT_Txt
   108  00286A  30                 	db	48
   109  00286B  00                 	db	0
   110                           
   111                           ;initializer for _SW_EWPED_Txt
   112  00286C  30                 	db	48
   113  00286D  00                 	db	0
   114                           
   115                           ;initializer for _SW_MODE_Txt
   116  00286E  44                 	db	68
   117  00286F  00                 	db	0
   118                           
   119                           ;initializer for _SW_NSLT_Txt
   120  002870  30                 	db	48
   121  002871  00                 	db	0
   122                           
   123                           ;initializer for _SW_NSPED_Txt
   124  002872  30                 	db	48
   125  002873  00                 	db	0
   126                           
   127                           	psect	idataBANK0
   128  0028F0                     __pidataBANK0:
   129                           	opt stack 0
   130                           
   131                           ;initializer for _EWLT_Count
   132  0028F0  30                 	db	48
   133  0028F1  30                 	db	48
   134  0028F2  00                 	db	0
   135                           
   136                           ;initializer for _NSLT_Count
   137  0028F3  30                 	db	48
   138  0028F4  30                 	db	48
   139  0028F5  00                 	db	0
   140                           
   141                           ;initializer for _NS_Count
   142  0028F6  30                 	db	48
   143  0028F7  30                 	db	48
   144  0028F8  00                 	db	0
   145                           
   146                           ;initializer for _PED_EW_Count
   147  0028F9  30                 	db	48
   148  0028FA  30                 	db	48
   149  0028FB  00                 	db	0
   150                           
   151                           ;initializer for _PED_NS_Count
   152  0028FC  30                 	db	48
   153  0028FD  30                 	db	48
   154  0028FE  00                 	db	0
   155                           
   156                           	psect	mediumconst
   157  00FD4E                     __pmediumconst:
   158                           	opt stack 0
   159  00FD4E  00                 	db	0
   160  00FD4F                     _font:
   161                           	opt stack 0
   162  00FD4F  00                 	db	0
   163  00FD50  00                 	db	0
   164  00FD51  00                 	db	0
   165  00FD52  00                 	db	0
   166  00FD53  00                 	db	0
   167  00FD54  00                 	db	0
   168  00FD55  00                 	db	0
   169  00FD56  5F                 	db	95
   170  00FD57  00                 	db	0
   171  00FD58  00                 	db	0
   172  00FD59  00                 	db	0
   173  00FD5A  07                 	db	7
   174  00FD5B  00                 	db	0
   175  00FD5C  07                 	db	7
   176  00FD5D  00                 	db	0
   177  00FD5E  14                 	db	20
   178  00FD5F  7F                 	db	127
   179  00FD60  14                 	db	20
   180  00FD61  7F                 	db	127
   181  00FD62  14                 	db	20
   182  00FD63  24                 	db	36
   183  00FD64  2A                 	db	42
   184  00FD65  7F                 	db	127
   185  00FD66  2A                 	db	42
   186  00FD67  12                 	db	18
   187  00FD68  23                 	db	35
   188  00FD69  13                 	db	19
   189  00FD6A  08                 	db	8
   190  00FD6B  64                 	db	100
   191  00FD6C  62                 	db	98
   192  00FD6D  36                 	db	54
   193  00FD6E  49                 	db	73
   194  00FD6F  56                 	db	86
   195  00FD70  20                 	db	32
   196  00FD71  50                 	db	80
   197  00FD72  00                 	db	0
   198  00FD73  08                 	db	8
   199  00FD74  07                 	db	7
   200  00FD75  03                 	db	3
   201  00FD76  00                 	db	0
   202  00FD77  00                 	db	0
   203  00FD78  1C                 	db	28
   204  00FD79  22                 	db	34
   205  00FD7A  41                 	db	65
   206  00FD7B  00                 	db	0
   207  00FD7C  00                 	db	0
   208  00FD7D  41                 	db	65
   209  00FD7E  22                 	db	34
   210  00FD7F  1C                 	db	28
   211  00FD80  00                 	db	0
   212  00FD81  2A                 	db	42
   213  00FD82  1C                 	db	28
   214  00FD83  7F                 	db	127
   215  00FD84  1C                 	db	28
   216  00FD85  2A                 	db	42
   217  00FD86  08                 	db	8
   218  00FD87  08                 	db	8
   219  00FD88  3E                 	db	62
   220  00FD89  08                 	db	8
   221  00FD8A  08                 	db	8
   222  00FD8B  00                 	db	0
   223  00FD8C  80                 	db	128
   224  00FD8D  70                 	db	112
   225  00FD8E  30                 	db	48
   226  00FD8F  00                 	db	0
   227  00FD90  08                 	db	8
   228  00FD91  08                 	db	8
   229  00FD92  08                 	db	8
   230  00FD93  08                 	db	8
   231  00FD94  08                 	db	8
   232  00FD95  00                 	db	0
   233  00FD96  00                 	db	0
   234  00FD97  60                 	db	96
   235  00FD98  60                 	db	96
   236  00FD99  00                 	db	0
   237  00FD9A  20                 	db	32
   238  00FD9B  10                 	db	16
   239  00FD9C  08                 	db	8
   240  00FD9D  04                 	db	4
   241  00FD9E  02                 	db	2
   242  00FD9F  3E                 	db	62
   243  00FDA0  51                 	db	81
   244  00FDA1  49                 	db	73
   245  00FDA2  45                 	db	69
   246  00FDA3  3E                 	db	62
   247  00FDA4  00                 	db	0
   248  00FDA5  42                 	db	66
   249  00FDA6  7F                 	db	127
   250  00FDA7  40                 	db	64
   251  00FDA8  00                 	db	0
   252  00FDA9  72                 	db	114
   253  00FDAA  49                 	db	73
   254  00FDAB  49                 	db	73
   255  00FDAC  49                 	db	73
   256  00FDAD  46                 	db	70
   257  00FDAE  21                 	db	33
   258  00FDAF  41                 	db	65
   259  00FDB0  49                 	db	73
   260  00FDB1  4D                 	db	77
   261  00FDB2  33                 	db	51
   262  00FDB3  18                 	db	24
   263  00FDB4  14                 	db	20
   264  00FDB5  12                 	db	18
   265  00FDB6  7F                 	db	127
   266  00FDB7  10                 	db	16
   267  00FDB8  27                 	db	39
   268  00FDB9  45                 	db	69
   269  00FDBA  45                 	db	69
   270  00FDBB  45                 	db	69
   271  00FDBC  39                 	db	57
   272  00FDBD  3C                 	db	60
   273  00FDBE  4A                 	db	74
   274  00FDBF  49                 	db	73
   275  00FDC0  49                 	db	73
   276  00FDC1  31                 	db	49
   277  00FDC2  41                 	db	65
   278  00FDC3  21                 	db	33
   279  00FDC4  11                 	db	17
   280  00FDC5  09                 	db	9
   281  00FDC6  07                 	db	7
   282  00FDC7  36                 	db	54
   283  00FDC8  49                 	db	73
   284  00FDC9  49                 	db	73
   285  00FDCA  49                 	db	73
   286  00FDCB  36                 	db	54
   287  00FDCC  46                 	db	70
   288  00FDCD  49                 	db	73
   289  00FDCE  49                 	db	73
   290  00FDCF  29                 	db	41
   291  00FDD0  1E                 	db	30
   292  00FDD1  00                 	db	0
   293  00FDD2  00                 	db	0
   294  00FDD3  14                 	db	20
   295  00FDD4  00                 	db	0
   296  00FDD5  00                 	db	0
   297  00FDD6  00                 	db	0
   298  00FDD7  40                 	db	64
   299  00FDD8  34                 	db	52
   300  00FDD9  00                 	db	0
   301  00FDDA  00                 	db	0
   302  00FDDB  00                 	db	0
   303  00FDDC  08                 	db	8
   304  00FDDD  14                 	db	20
   305  00FDDE  22                 	db	34
   306  00FDDF  41                 	db	65
   307  00FDE0  14                 	db	20
   308  00FDE1  14                 	db	20
   309  00FDE2  14                 	db	20
   310  00FDE3  14                 	db	20
   311  00FDE4  14                 	db	20
   312  00FDE5  00                 	db	0
   313  00FDE6  41                 	db	65
   314  00FDE7  22                 	db	34
   315  00FDE8  14                 	db	20
   316  00FDE9  08                 	db	8
   317  00FDEA  02                 	db	2
   318  00FDEB  01                 	db	1
   319  00FDEC  59                 	db	89
   320  00FDED  09                 	db	9
   321  00FDEE  06                 	db	6
   322  00FDEF  3E                 	db	62
   323  00FDF0  41                 	db	65
   324  00FDF1  5D                 	db	93
   325  00FDF2  59                 	db	89
   326  00FDF3  4E                 	db	78
   327  00FDF4  7C                 	db	124
   328  00FDF5  12                 	db	18
   329  00FDF6  11                 	db	17
   330  00FDF7  12                 	db	18
   331  00FDF8  7C                 	db	124
   332  00FDF9  7F                 	db	127
   333  00FDFA  49                 	db	73
   334  00FDFB  49                 	db	73
   335  00FDFC  49                 	db	73
   336  00FDFD  36                 	db	54
   337  00FDFE  3E                 	db	62
   338  00FDFF  41                 	db	65
   339  00FE00  41                 	db	65
   340  00FE01  41                 	db	65
   341  00FE02  22                 	db	34
   342  00FE03  7F                 	db	127
   343  00FE04  41                 	db	65
   344  00FE05  41                 	db	65
   345  00FE06  41                 	db	65
   346  00FE07  3E                 	db	62
   347  00FE08  7F                 	db	127
   348  00FE09  49                 	db	73
   349  00FE0A  49                 	db	73
   350  00FE0B  49                 	db	73
   351  00FE0C  41                 	db	65
   352  00FE0D  7F                 	db	127
   353  00FE0E  09                 	db	9
   354  00FE0F  09                 	db	9
   355  00FE10  09                 	db	9
   356  00FE11  01                 	db	1
   357  00FE12  3E                 	db	62
   358  00FE13  41                 	db	65
   359  00FE14  41                 	db	65
   360  00FE15  51                 	db	81
   361  00FE16  73                 	db	115
   362  00FE17  7F                 	db	127
   363  00FE18  08                 	db	8
   364  00FE19  08                 	db	8
   365  00FE1A  08                 	db	8
   366  00FE1B  7F                 	db	127
   367  00FE1C  00                 	db	0
   368  00FE1D  41                 	db	65
   369  00FE1E  7F                 	db	127
   370  00FE1F  41                 	db	65
   371  00FE20  00                 	db	0
   372  00FE21  20                 	db	32
   373  00FE22  40                 	db	64
   374  00FE23  41                 	db	65
   375  00FE24  3F                 	db	63
   376  00FE25  01                 	db	1
   377  00FE26  7F                 	db	127
   378  00FE27  08                 	db	8
   379  00FE28  14                 	db	20
   380  00FE29  22                 	db	34
   381  00FE2A  41                 	db	65
   382  00FE2B  7F                 	db	127
   383  00FE2C  40                 	db	64
   384  00FE2D  40                 	db	64
   385  00FE2E  40                 	db	64
   386  00FE2F  40                 	db	64
   387  00FE30  7F                 	db	127
   388  00FE31  02                 	db	2
   389  00FE32  1C                 	db	28
   390  00FE33  02                 	db	2
   391  00FE34  7F                 	db	127
   392  00FE35  7F                 	db	127
   393  00FE36  04                 	db	4
   394  00FE37  08                 	db	8
   395  00FE38  10                 	db	16
   396  00FE39  7F                 	db	127
   397  00FE3A  3E                 	db	62
   398  00FE3B  41                 	db	65
   399  00FE3C  41                 	db	65
   400  00FE3D  41                 	db	65
   401  00FE3E  3E                 	db	62
   402  00FE3F  7F                 	db	127
   403  00FE40  09                 	db	9
   404  00FE41  09                 	db	9
   405  00FE42  09                 	db	9
   406  00FE43  06                 	db	6
   407  00FE44  3E                 	db	62
   408  00FE45  41                 	db	65
   409  00FE46  51                 	db	81
   410  00FE47  21                 	db	33
   411  00FE48  5E                 	db	94
   412  00FE49  7F                 	db	127
   413  00FE4A  09                 	db	9
   414  00FE4B  19                 	db	25
   415  00FE4C  29                 	db	41
   416  00FE4D  46                 	db	70
   417  00FE4E                     __end_of_font:
   418                           	opt stack 0
   419  00FE4E                     _font2:
   420                           	opt stack 0
   421  00FE4E  26                 	db	38
   422  00FE4F  49                 	db	73
   423  00FE50  49                 	db	73
   424  00FE51  49                 	db	73
   425  00FE52  32                 	db	50
   426  00FE53  03                 	db	3
   427  00FE54  01                 	db	1
   428  00FE55  7F                 	db	127
   429  00FE56  01                 	db	1
   430  00FE57  03                 	db	3
   431  00FE58  3F                 	db	63
   432  00FE59  40                 	db	64
   433  00FE5A  40                 	db	64
   434  00FE5B  40                 	db	64
   435  00FE5C  3F                 	db	63
   436  00FE5D  1F                 	db	31
   437  00FE5E  20                 	db	32
   438  00FE5F  40                 	db	64
   439  00FE60  20                 	db	32
   440  00FE61  1F                 	db	31
   441  00FE62  3F                 	db	63
   442  00FE63  40                 	db	64
   443  00FE64  38                 	db	56
   444  00FE65  40                 	db	64
   445  00FE66  3F                 	db	63
   446  00FE67  63                 	db	99
   447  00FE68  14                 	db	20
   448  00FE69  08                 	db	8
   449  00FE6A  14                 	db	20
   450  00FE6B  63                 	db	99
   451  00FE6C  03                 	db	3
   452  00FE6D  04                 	db	4
   453  00FE6E  78                 	db	120
   454  00FE6F  04                 	db	4
   455  00FE70  03                 	db	3
   456  00FE71  61                 	db	97
   457  00FE72  59                 	db	89
   458  00FE73  49                 	db	73
   459  00FE74  4D                 	db	77
   460  00FE75  43                 	db	67
   461  00FE76  00                 	db	0
   462  00FE77  7F                 	db	127
   463  00FE78  41                 	db	65
   464  00FE79  41                 	db	65
   465  00FE7A  41                 	db	65
   466  00FE7B  02                 	db	2
   467  00FE7C  04                 	db	4
   468  00FE7D  08                 	db	8
   469  00FE7E  10                 	db	16
   470  00FE7F  20                 	db	32
   471  00FE80  00                 	db	0
   472  00FE81  41                 	db	65
   473  00FE82  41                 	db	65
   474  00FE83  41                 	db	65
   475  00FE84  7F                 	db	127
   476  00FE85  04                 	db	4
   477  00FE86  02                 	db	2
   478  00FE87  01                 	db	1
   479  00FE88  02                 	db	2
   480  00FE89  04                 	db	4
   481  00FE8A  40                 	db	64
   482  00FE8B  40                 	db	64
   483  00FE8C  40                 	db	64
   484  00FE8D  40                 	db	64
   485  00FE8E  40                 	db	64
   486  00FE8F  00                 	db	0
   487  00FE90  03                 	db	3
   488  00FE91  07                 	db	7
   489  00FE92  08                 	db	8
   490  00FE93  00                 	db	0
   491  00FE94  20                 	db	32
   492  00FE95  54                 	db	84
   493  00FE96  54                 	db	84
   494  00FE97  78                 	db	120
   495  00FE98  40                 	db	64
   496  00FE99  7F                 	db	127
   497  00FE9A  28                 	db	40
   498  00FE9B  44                 	db	68
   499  00FE9C  44                 	db	68
   500  00FE9D  38                 	db	56
   501  00FE9E  38                 	db	56
   502  00FE9F  44                 	db	68
   503  00FEA0  44                 	db	68
   504  00FEA1  44                 	db	68
   505  00FEA2  28                 	db	40
   506  00FEA3  38                 	db	56
   507  00FEA4  44                 	db	68
   508  00FEA5  44                 	db	68
   509  00FEA6  28                 	db	40
   510  00FEA7  7F                 	db	127
   511  00FEA8  38                 	db	56
   512  00FEA9  54                 	db	84
   513  00FEAA  54                 	db	84
   514  00FEAB  54                 	db	84
   515  00FEAC  18                 	db	24
   516  00FEAD  00                 	db	0
   517  00FEAE  08                 	db	8
   518  00FEAF  7E                 	db	126
   519  00FEB0  09                 	db	9
   520  00FEB1  02                 	db	2
   521  00FEB2  18                 	db	24
   522  00FEB3  A4                 	db	164
   523  00FEB4  A4                 	db	164
   524  00FEB5  9C                 	db	156
   525  00FEB6  78                 	db	120
   526  00FEB7  7F                 	db	127
   527  00FEB8  08                 	db	8
   528  00FEB9  04                 	db	4
   529  00FEBA  04                 	db	4
   530  00FEBB  78                 	db	120
   531  00FEBC  00                 	db	0
   532  00FEBD  44                 	db	68
   533  00FEBE  7D                 	db	125
   534  00FEBF  40                 	db	64
   535  00FEC0  00                 	db	0
   536  00FEC1  20                 	db	32
   537  00FEC2  40                 	db	64
   538  00FEC3  40                 	db	64
   539  00FEC4  3D                 	db	61
   540  00FEC5  00                 	db	0
   541  00FEC6  7F                 	db	127
   542  00FEC7  10                 	db	16
   543  00FEC8  28                 	db	40
   544  00FEC9  44                 	db	68
   545  00FECA  00                 	db	0
   546  00FECB  00                 	db	0
   547  00FECC  41                 	db	65
   548  00FECD  7F                 	db	127
   549  00FECE  40                 	db	64
   550  00FECF  00                 	db	0
   551  00FED0  7C                 	db	124
   552  00FED1  04                 	db	4
   553  00FED2  78                 	db	120
   554  00FED3  04                 	db	4
   555  00FED4  78                 	db	120
   556  00FED5  7C                 	db	124
   557  00FED6  08                 	db	8
   558  00FED7  04                 	db	4
   559  00FED8  04                 	db	4
   560  00FED9  78                 	db	120
   561  00FEDA  38                 	db	56
   562  00FEDB  44                 	db	68
   563  00FEDC  44                 	db	68
   564  00FEDD  44                 	db	68
   565  00FEDE  38                 	db	56
   566  00FEDF  FC                 	db	252
   567  00FEE0  18                 	db	24
   568  00FEE1  24                 	db	36
   569  00FEE2  24                 	db	36
   570  00FEE3  18                 	db	24
   571  00FEE4  18                 	db	24
   572  00FEE5  24                 	db	36
   573  00FEE6  24                 	db	36
   574  00FEE7  18                 	db	24
   575  00FEE8  FC                 	db	252
   576  00FEE9  7C                 	db	124
   577  00FEEA  08                 	db	8
   578  00FEEB  04                 	db	4
   579  00FEEC  04                 	db	4
   580  00FEED  08                 	db	8
   581  00FEEE  48                 	db	72
   582  00FEEF  54                 	db	84
   583  00FEF0  54                 	db	84
   584  00FEF1  54                 	db	84
   585  00FEF2  24                 	db	36
   586  00FEF3  04                 	db	4
   587  00FEF4  04                 	db	4
   588  00FEF5  3F                 	db	63
   589  00FEF6  44                 	db	68
   590  00FEF7  24                 	db	36
   591  00FEF8  3C                 	db	60
   592  00FEF9  40                 	db	64
   593  00FEFA  40                 	db	64
   594  00FEFB  20                 	db	32
   595  00FEFC  7C                 	db	124
   596  00FEFD  1C                 	db	28
   597  00FEFE  20                 	db	32
   598  00FEFF  40                 	db	64
   599  00FF00  20                 	db	32
   600  00FF01  1C                 	db	28
   601  00FF02  3C                 	db	60
   602  00FF03  40                 	db	64
   603  00FF04  30                 	db	48
   604  00FF05  40                 	db	64
   605  00FF06  3C                 	db	60
   606  00FF07  44                 	db	68
   607  00FF08  28                 	db	40
   608  00FF09  10                 	db	16
   609  00FF0A  28                 	db	40
   610  00FF0B  44                 	db	68
   611  00FF0C  4C                 	db	76
   612  00FF0D  90                 	db	144
   613  00FF0E  90                 	db	144
   614  00FF0F  90                 	db	144
   615  00FF10  7C                 	db	124
   616  00FF11  44                 	db	68
   617  00FF12  64                 	db	100
   618  00FF13  54                 	db	84
   619  00FF14  4C                 	db	76
   620  00FF15  44                 	db	68
   621  00FF16  00                 	db	0
   622  00FF17  08                 	db	8
   623  00FF18  36                 	db	54
   624  00FF19  41                 	db	65
   625  00FF1A  00                 	db	0
   626  00FF1B  00                 	db	0
   627  00FF1C  00                 	db	0
   628  00FF1D  77                 	db	119
   629  00FF1E  00                 	db	0
   630  00FF1F  00                 	db	0
   631  00FF20  00                 	db	0
   632  00FF21  41                 	db	65
   633  00FF22  36                 	db	54
   634  00FF23  08                 	db	8
   635  00FF24  00                 	db	0
   636  00FF25  02                 	db	2
   637  00FF26  01                 	db	1
   638  00FF27  02                 	db	2
   639  00FF28  04                 	db	4
   640  00FF29  02                 	db	2
   641  00FF2A                     __end_of_font2:
   642                           	opt stack 0
   643  00FF2A                     _dpowers:
   644                           	opt stack 0
   645  00FF2A  0001               	dw	1
   646  00FF2C  000A               	dw	10
   647  00FF2E  0064               	dw	100
   648  00FF30  03E8               	dw	1000
   649  00FF32  2710               	dw	10000
   650  00FF34                     __end_of_dpowers:
   651                           	opt stack 0
   652  0000                     _ADCON0	set	4034
   653  0000                     _ADCON0bits	set	4034
   654  0000                     _ADCON1	set	4033
   655  0000                     _ADCON2	set	4032
   656  0000                     _ADRESH	set	4036
   657  0000                     _ADRESL	set	4035
   658  0000                     _CCP2CON	set	4026
   659  0000                     _CCPR2L	set	4027
   660  0000                     _INTCON2bits	set	4081
   661  0000                     _INTCON3bits	set	4080
   662  0000                     _INTCONbits	set	4082
   663  0000                     _OSCCON	set	4051
   664  0000                     _PIE1bits	set	3997
   665  0000                     _PIR1bits	set	3998
   666  0000                     _PIR2bits	set	4001
   667  0000                     _PORTAbits	set	3968
   668  0000                     _PORTBbits	set	3969
   669  0000                     _PORTCbits	set	3970
   670  0000                     _PORTDbits	set	3971
   671  0000                     _PORTEbits	set	3972
   672  0000                     _PR2	set	4043
   673  0000                     _RCSTA	set	4011
   674  0000                     _RCSTAbits	set	4011
   675  0000                     _SPBRG	set	4015
   676  0000                     _SPBRGH	set	4016
   677  0000                     _SSPBUF	set	4041
   678  0000                     _SSPCON1	set	4038
   679  0000                     _SSPSTAT	set	4039
   680  0000                     _SSPSTATbits	set	4039
   681  0000                     _T0CON	set	4053
   682  0000                     _T0CONbits	set	4053
   683  0000                     _T2CON	set	4042
   684  0000                     _T3CON	set	4017
   685  0000                     _T3CONbits	set	4017
   686  0000                     _TMR0H	set	4055
   687  0000                     _TMR0L	set	4054
   688  0000                     _TRISA	set	3986
   689  0000                     _TRISB	set	3987
   690  0000                     _TRISC	set	3988
   691  0000                     _TRISCbits	set	3988
   692  0000                     _TRISD	set	3989
   693  0000                     _TRISE	set	3990
   694  0000                     _TXREG	set	4013
   695  0000                     _TXSTA	set	4012
   696  0000                     _TXSTAbits	set	4012
   697  0000                     _TRMT	set	32097
   698  00FF34                     STR_13:
   699  00FF34  49                 	db	73	;'I'
   700  00FF35  4E                 	db	78	;'N'
   701  00FF36  54                 	db	84	;'T'
   702  00FF37  30                 	db	48	;'0'
   703  00FF38  20                 	db	32
   704  00FF39  69                 	db	105	;'i'
   705  00FF3A  6E                 	db	110	;'n'
   706  00FF3B  74                 	db	116	;'t'
   707  00FF3C  65                 	db	101	;'e'
   708  00FF3D  72                 	db	114	;'r'
   709  00FF3E  72                 	db	114	;'r'
   710  00FF3F  75                 	db	117	;'u'
   711  00FF40  70                 	db	112	;'p'
   712  00FF41  74                 	db	116	;'t'
   713  00FF42  20                 	db	32
   714  00FF43  70                 	db	112	;'p'
   715  00FF44  69                 	db	105	;'i'
   716  00FF45  6E                 	db	110	;'n'
   717  00FF46  20                 	db	32
   718  00FF47  64                 	db	100	;'d'
   719  00FF48  65                 	db	101	;'e'
   720  00FF49  74                 	db	116	;'t'
   721  00FF4A  65                 	db	101	;'e'
   722  00FF4B  63                 	db	99	;'c'
   723  00FF4C  74                 	db	116	;'t'
   724  00FF4D  65                 	db	101	;'e'
   725  00FF4E  64                 	db	100	;'d'
   726  00FF4F  20                 	db	32
   727  00FF50  25                 	db	37
   728  00FF51  64                 	db	100	;'d'
   729  00FF52  0D                 	db	13
   730  00FF53  0A                 	db	10
   731  00FF54  00                 	db	0
   732  00FF55                     STR_14:
   733  00FF55  49                 	db	73	;'I'
   734  00FF56  4E                 	db	78	;'N'
   735  00FF57  54                 	db	84	;'T'
   736  00FF58  31                 	db	49	;'1'
   737  00FF59  20                 	db	32
   738  00FF5A  69                 	db	105	;'i'
   739  00FF5B  6E                 	db	110	;'n'
   740  00FF5C  74                 	db	116	;'t'
   741  00FF5D  65                 	db	101	;'e'
   742  00FF5E  72                 	db	114	;'r'
   743  00FF5F  72                 	db	114	;'r'
   744  00FF60  75                 	db	117	;'u'
   745  00FF61  70                 	db	112	;'p'
   746  00FF62  74                 	db	116	;'t'
   747  00FF63  20                 	db	32
   748  00FF64  70                 	db	112	;'p'
   749  00FF65  69                 	db	105	;'i'
   750  00FF66  6E                 	db	110	;'n'
   751  00FF67  20                 	db	32
   752  00FF68  64                 	db	100	;'d'
   753  00FF69  65                 	db	101	;'e'
   754  00FF6A  74                 	db	116	;'t'
   755  00FF6B  65                 	db	101	;'e'
   756  00FF6C  63                 	db	99	;'c'
   757  00FF6D  74                 	db	116	;'t'
   758  00FF6E  65                 	db	101	;'e'
   759  00FF6F  64                 	db	100	;'d'
   760  00FF70  20                 	db	32
   761  00FF71  25                 	db	37
   762  00FF72  64                 	db	100	;'d'
   763  00FF73  0D                 	db	13
   764  00FF74  0A                 	db	10
   765  00FF75  00                 	db	0
   766  00FF76                     STR_15:
   767  00FF76  49                 	db	73	;'I'
   768  00FF77  4E                 	db	78	;'N'
   769  00FF78  54                 	db	84	;'T'
   770  00FF79  32                 	db	50	;'2'
   771  00FF7A  20                 	db	32
   772  00FF7B  69                 	db	105	;'i'
   773  00FF7C  6E                 	db	110	;'n'
   774  00FF7D  74                 	db	116	;'t'
   775  00FF7E  65                 	db	101	;'e'
   776  00FF7F  72                 	db	114	;'r'
   777  00FF80  72                 	db	114	;'r'
   778  00FF81  75                 	db	117	;'u'
   779  00FF82  70                 	db	112	;'p'
   780  00FF83  74                 	db	116	;'t'
   781  00FF84  20                 	db	32
   782  00FF85  70                 	db	112	;'p'
   783  00FF86  69                 	db	105	;'i'
   784  00FF87  6E                 	db	110	;'n'
   785  00FF88  20                 	db	32
   786  00FF89  64                 	db	100	;'d'
   787  00FF8A  65                 	db	101	;'e'
   788  00FF8B  74                 	db	116	;'t'
   789  00FF8C  65                 	db	101	;'e'
   790  00FF8D  63                 	db	99	;'c'
   791  00FF8E  74                 	db	116	;'t'
   792  00FF8F  65                 	db	101	;'e'
   793  00FF90  64                 	db	100	;'d'
   794  00FF91  20                 	db	32
   795  00FF92  25                 	db	37
   796  00FF93  64                 	db	100	;'d'
   797  00FF94  0D                 	db	13
   798  00FF95  0A                 	db	10
   799  00FF96  00                 	db	0
   800  00FF97                     STR_12:
   801  00FF97  45                 	db	69	;'E'
   802  00FF98  57                 	db	87	;'W'
   803  00FF99  50                 	db	80	;'P'
   804  00FF9A  20                 	db	32
   805  00FF9B  45                 	db	69	;'E'
   806  00FF9C  57                 	db	87	;'W'
   807  00FF9D  4C                 	db	76	;'L'
   808  00FF9E  54                 	db	84	;'T'
   809  00FF9F  20                 	db	32
   810  00FFA0  4E                 	db	78	;'N'
   811  00FFA1  53                 	db	83	;'S'
   812  00FFA2  50                 	db	80	;'P'
   813  00FFA3  20                 	db	32
   814  00FFA4  4E                 	db	78	;'N'
   815  00FFA5  53                 	db	83	;'S'
   816  00FFA6  4C                 	db	76	;'L'
   817  00FFA7  54                 	db	84	;'T'
   818  00FFA8  20                 	db	32
   819  00FFA9  4D                 	db	77	;'M'
   820  00FFAA  44                 	db	68	;'D'
   821  00FFAB  00                 	db	0
   822  00FFAC                     STR_1:
   823  00FFAC  45                 	db	69	;'E'
   824  00FFAD  43                 	db	67	;'C'
   825  00FFAE  45                 	db	69	;'E'
   826  00FFAF  33                 	db	51	;'3'
   827  00FFB0  33                 	db	51	;'3'
   828  00FFB1  30                 	db	48	;'0'
   829  00FFB2  31                 	db	49	;'1'
   830  00FFB3  4C                 	db	76	;'L'
   831  00FFB4  20                 	db	32
   832  00FFB5  46                 	db	70	;'F'
   833  00FFB6  61                 	db	97	;'a'
   834  00FFB7  6C                 	db	108	;'l'
   835  00FFB8  6C                 	db	108	;'l'
   836  00FFB9  20                 	db	32
   837  00FFBA  32                 	db	50	;'2'
   838  00FFBB  31                 	db	49	;'1'
   839  00FFBC  2D                 	db	45
   840  00FFBD  53                 	db	83	;'S'
   841  00FFBE  33                 	db	51	;'3'
   842  00FFBF  00                 	db	0
   843  00FFC0                     STR_8:
   844  00FFC0  4E                 	db	78	;'N'
   845  00FFC1  4F                 	db	79	;'O'
   846  00FFC2  52                 	db	82	;'R'
   847  00FFC3  54                 	db	84	;'T'
   848  00FFC4  48                 	db	72	;'H'
   849  00FFC5  2F                 	db	47
   850  00FFC6  53                 	db	83	;'S'
   851  00FFC7  4F                 	db	79	;'O'
   852  00FFC8  55                 	db	85	;'U'
   853  00FFC9  54                 	db	84	;'T'
   854  00FFCA  48                 	db	72	;'H'
   855  00FFCB  00                 	db	0
   856  00FFCC                     STR_6:
   857  00FFCC  45                 	db	69	;'E'
   858  00FFCD  41                 	db	65	;'A'
   859  00FFCE  53                 	db	83	;'S'
   860  00FFCF  54                 	db	84	;'T'
   861  00FFD0  2F                 	db	47
   862  00FFD1  57                 	db	87	;'W'
   863  00FFD2  45                 	db	69	;'E'
   864  00FFD3  53                 	db	83	;'S'
   865  00FFD4  54                 	db	84	;'T'
   866  00FFD5  00                 	db	0
   867  00FFD6                     STR_9:
   868  00FFD6  4E                 	db	78	;'N'
   869  00FFD7  2F                 	db	47
   870  00FFD8  53                 	db	83	;'S'
   871  00FFD9  20                 	db	32
   872  00FFDA  4C                 	db	76	;'L'
   873  00FFDB  54                 	db	84	;'T'
   874  00FFDC  00                 	db	0
   875  00FFDD                     STR_7:
   876  00FFDD  45                 	db	69	;'E'
   877  00FFDE  2F                 	db	47
   878  00FFDF  57                 	db	87	;'W'
   879  00FFE0  20                 	db	32
   880  00FFE1  4C                 	db	76	;'L'
   881  00FFE2  54                 	db	84	;'T'
   882  00FFE3  00                 	db	0
   883  00FFE4                     STR_2:
   884  00FFE4  4D                 	db	77	;'M'
   885  00FFE5  6F                 	db	111	;'o'
   886  00FFE6  64                 	db	100	;'d'
   887  00FFE7  65                 	db	101	;'e'
   888  00FFE8  3A                 	db	58	;':'
   889  00FFE9  00                 	db	0
   890  00FFEA                     STR_3:
   891  00FFEA  46                 	db	70	;'F'
   892  00FFEB  52                 	db	82	;'R'
   893  00FFEC  3A                 	db	58	;':'
   894  00FFED  00                 	db	0
   895  00FFEE                     STR_4:
   896  00FFEE  46                 	db	70	;'F'
   897  00FFEF  53                 	db	83	;'S'
   898  00FFF0  3A                 	db	58	;':'
   899  00FFF1  00                 	db	0
   900  00FFF2                     STR_11:
   901  00FFF2  50                 	db	80	;'P'
   902  00FFF3  4E                 	db	78	;'N'
   903  00FFF4  53                 	db	83	;'S'
   904  00FFF5  00                 	db	0
   905  00FFF6                     STR_10:
   906  00FFF6  50                 	db	80	;'P'
   907  00FFF7  45                 	db	69	;'E'
   908  00FFF8  57                 	db	87	;'W'
   909  00FFF9  00                 	db	0
   910  00FFFA                     STR_17:
   911  00FFFA  20                 	db	32
   912  00FFFB  00                 	db	0
   913  00FFFC                     STR_5:
   914  00FFFC  2A                 	db	42
   915  00FFFD  00                 	db	0
   916  0000                     
   917                           ; #config settings
   918  00FFFE  00                 	db	0	; dummy byte at the end
   919  0000                     
   920                           	psect	cinit
   921  002282                     __pcinit:
   922                           	opt stack 0
   923  002282                     start_initialization:
   924                           	opt stack 0
   925  002282                     __initialization:
   926                           	opt stack 0
   927                           
   928                           ; Clear objects allocated to BANK0 (33 bytes)
   929  002282  EE00  F080         	lfsr	0,__pbssBANK0
   930  002286  0E21               	movlw	33
   931  002288                     clear_0:
   932  002288  6AEE               	clrf	postinc0,c
   933  00228A  06E8               	decf	wreg,f,c
   934  00228C  E1FD               	bnz	clear_0
   935                           
   936                           ; Clear objects allocated to COMRAM (29 bytes)
   937  00228E  EE00  F041         	lfsr	0,__pbssCOMRAM
   938  002292  0E1D               	movlw	29
   939  002294                     clear_1:
   940  002294  6AEE               	clrf	postinc0,c
   941  002296  06E8               	decf	wreg,f,c
   942  002298  E1FD               	bnz	clear_1
   943                           
   944                           ; Initialize objects allocated to BANK0 (15 bytes)
   945                           ; load TBLPTR registers with __pidataBANK0
   946  00229A  0EF0               	movlw	low __pidataBANK0
   947  00229C  6EF6               	movwf	tblptrl,c
   948  00229E  0E28               	movlw	high __pidataBANK0
   949  0022A0  6EF7               	movwf	tblptrh,c
   950  0022A2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   951  0022A4  6EF8               	movwf	tblptru,c
   952  0022A6  EE00  F0A1         	lfsr	0,__pdataBANK0
   953  0022AA  EE10 F00F          	lfsr	1,15
   954  0022AE                     copy_data0:
   955  0022AE  0009               	tblrd		*+
   956  0022B0  CFF5 FFEE          	movff	tablat,postinc0
   957  0022B4  50E5               	movf	postdec1,w,c
   958  0022B6  50E1               	movf	fsr1l,w,c
   959  0022B8  E1FA               	bnz	copy_data0
   960                           
   961                           ; Initialize objects allocated to COMRAM (20 bytes)
   962                           ; load TBLPTR registers with __pidataCOMRAM
   963  0022BA  0E60               	movlw	low __pidataCOMRAM
   964  0022BC  6EF6               	movwf	tblptrl,c
   965  0022BE  0E28               	movlw	high __pidataCOMRAM
   966  0022C0  6EF7               	movwf	tblptrh,c
   967  0022C2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   968  0022C4  6EF8               	movwf	tblptru,c
   969  0022C6  EE00  F05E         	lfsr	0,__pdataCOMRAM
   970  0022CA  EE10 F014          	lfsr	1,20
   971  0022CE                     copy_data1:
   972  0022CE  0009               	tblrd		*+
   973  0022D0  CFF5 FFEE          	movff	tablat,postinc0
   974  0022D4  50E5               	movf	postdec1,w,c
   975  0022D6  50E1               	movf	fsr1l,w,c
   976  0022D8  E1FA               	bnz	copy_data1
   977  0022DA                     end_of_initialization:
   978                           	opt stack 0
   979  0022DA                     __end_of__initialization:
   980                           	opt stack 0
   981  0022DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   982  0022DC  6EF8               	movwf	tblptru,c
   983  0022DE  0100               	movlb	0
   984  0022E0  EFAC  F008         	goto	_main	;jump to C main() function
   985                           tblptru	equ	0xFF8
   986                           tblptrh	equ	0xFF7
   987                           tblptrl	equ	0xFF6
   988                           tablat	equ	0xFF5
   989                           postinc0	equ	0xFEE
   990                           wreg	equ	0xFE8
   991                           postdec1	equ	0xFE5
   992                           fsr1l	equ	0xFE1
   993                           
   994                           	psect	bssCOMRAM
   995  000041                     __pbssCOMRAM:
   996                           	opt stack 0
   997  000041                     _volt:
   998                           	opt stack 0
   999  000041                     	ds	3
  1000  000044                     _INT0_flag:
  1001                           	opt stack 0
  1002  000044                     	ds	2
  1003  000046                     _INT1_flag:
  1004                           	opt stack 0
  1005  000046                     	ds	2
  1006  000048                     _INT2_flag:
  1007                           	opt stack 0
  1008  000048                     	ds	2
  1009  00004A                     _nbr:
  1010                           	opt stack 0
  1011  00004A                     	ds	2
  1012  00004C                     _txt:
  1013                           	opt stack 0
  1014  00004C                     	ds	2
  1015  00004E                     _Count:
  1016                           	opt stack 0
  1017  00004E                     	ds	1
  1018  00004F                     _EW_PED_SW:
  1019                           	opt stack 0
  1020  00004F                     	ds	1
  1021  000050                     _FLASHING:
  1022                           	opt stack 0
  1023  000050                     	ds	1
  1024  000051                     _FLASHING_REQUEST:
  1025                           	opt stack 0
  1026  000051                     	ds	1
  1027  000052                     _NS_PED_SW:
  1028                           	opt stack 0
  1029  000052                     	ds	1
  1030  000053                     _PED_Count:
  1031                           	opt stack 0
  1032  000053                     	ds	1
  1033  000054                     _SW_EWLT:
  1034                           	opt stack 0
  1035  000054                     	ds	1
  1036  000055                     _SW_EWPED:
  1037                           	opt stack 0
  1038  000055                     	ds	1
  1039  000056                     _SW_MODE:
  1040                           	opt stack 0
  1041  000056                     	ds	1
  1042  000057                     _SW_NSLT:
  1043                           	opt stack 0
  1044  000057                     	ds	1
  1045  000058                     _SW_NSPED:
  1046                           	opt stack 0
  1047  000058                     	ds	1
  1048  000059                     __tft_type:
  1049                           	opt stack 0
  1050  000059                     	ds	1
  1051  00005A                     _colstart:
  1052                           	opt stack 0
  1053  00005A                     	ds	1
  1054  00005B                     _dir:
  1055                           	opt stack 0
  1056  00005B                     	ds	1
  1057  00005C                     _direction:
  1058                           	opt stack 0
  1059  00005C                     	ds	1
  1060  00005D                     _rowstart:
  1061                           	opt stack 0
  1062  00005D                     	ds	1
  1063                           tblptru	equ	0xFF8
  1064                           tblptrh	equ	0xFF7
  1065                           tblptrl	equ	0xFF6
  1066                           tablat	equ	0xFF5
  1067                           postinc0	equ	0xFEE
  1068                           wreg	equ	0xFE8
  1069                           postdec1	equ	0xFE5
  1070                           fsr1l	equ	0xFE1
  1071                           
  1072                           	psect	dataCOMRAM
  1073  00005E                     __pdataCOMRAM:
  1074                           	opt stack 0
  1075  00005E                     _wrap:
  1076                           	opt stack 0
  1077  00005E                     	ds	1
  1078  00005F                     _EW_Count:
  1079                           	opt stack 0
  1080  00005F                     	ds	3
  1081  000062                     _Act_Mode_Txt:
  1082                           	opt stack 0
  1083  000062                     	ds	2
  1084  000064                     _FlashingR_Txt:
  1085                           	opt stack 0
  1086  000064                     	ds	2
  1087  000066                     _FlashingS_Txt:
  1088                           	opt stack 0
  1089  000066                     	ds	2
  1090  000068                     _SW_EWLT_Txt:
  1091                           	opt stack 0
  1092  000068                     	ds	2
  1093  00006A                     _SW_EWPED_Txt:
  1094                           	opt stack 0
  1095  00006A                     	ds	2
  1096  00006C                     _SW_MODE_Txt:
  1097                           	opt stack 0
  1098  00006C                     	ds	2
  1099  00006E                     _SW_NSLT_Txt:
  1100                           	opt stack 0
  1101  00006E                     	ds	2
  1102  000070                     _SW_NSPED_Txt:
  1103                           	opt stack 0
  1104  000070                     	ds	2
  1105                           tblptru	equ	0xFF8
  1106                           tblptrh	equ	0xFF7
  1107                           tblptrl	equ	0xFF6
  1108                           tablat	equ	0xFF5
  1109                           postinc0	equ	0xFEE
  1110                           wreg	equ	0xFE8
  1111                           postdec1	equ	0xFE5
  1112                           fsr1l	equ	0xFE1
  1113                           
  1114                           	psect	bssBANK0
  1115  000080                     __pbssBANK0:
  1116                           	opt stack 0
  1117  000080                     _MODE:
  1118                           	opt stack 0
  1119  000080                     	ds	2
  1120  000082                     _buffer:
  1121                           	opt stack 0
  1122  000082                     	ds	31
  1123                           tblptru	equ	0xFF8
  1124                           tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           tablat	equ	0xFF5
  1127                           postinc0	equ	0xFEE
  1128                           wreg	equ	0xFE8
  1129                           postdec1	equ	0xFE5
  1130                           fsr1l	equ	0xFE1
  1131                           
  1132                           	psect	dataBANK0
  1133  0000A1                     __pdataBANK0:
  1134                           	opt stack 0
  1135  0000A1                     _EWLT_Count:
  1136                           	opt stack 0
  1137  0000A1                     	ds	3
  1138  0000A4                     _NSLT_Count:
  1139                           	opt stack 0
  1140  0000A4                     	ds	3
  1141  0000A7                     _NS_Count:
  1142                           	opt stack 0
  1143  0000A7                     	ds	3
  1144  0000AA                     _PED_EW_Count:
  1145                           	opt stack 0
  1146  0000AA                     	ds	3
  1147  0000AD                     _PED_NS_Count:
  1148                           	opt stack 0
  1149  0000AD                     	ds	3
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1l	equ	0xFE1
  1158                           
  1159                           	psect	cstackBANK0
  1160  0000B0                     __pcstackBANK0:
  1161                           	opt stack 0
  1162  0000B0                     drawtext@x:
  1163                           	opt stack 0
  1164  0000B0                     update_LCD_color@color:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x0
  1168  0000B0                     	ds	1
  1169  0000B1                     update_LCD_color@direction:
  1170                           	opt stack 0
  1171  0000B1                     drawtext@textsize:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x1
  1175  0000B1                     	ds	1
  1176  0000B2                     update_LCD_color@Circle_Y:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x2
  1180  0000B2                     	ds	1
  1181  0000B3                     Set_NS@color:
  1182                           	opt stack 0
  1183  0000B3                     Set_NS_LT@color:
  1184                           	opt stack 0
  1185  0000B3                     Set_EW@color:
  1186                           	opt stack 0
  1187  0000B3                     Set_EW_LT@color:
  1188                           	opt stack 0
  1189  0000B3                     drawtext@i:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x3
  1193  0000B3                     	ds	2
  1194  0000B5                     drawtext@cursor_y:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x5
  1198  0000B5                     	ds	1
  1199  0000B6                     drawtext@cursor_x:
  1200                           	opt stack 0
  1201                           
  1202                           ; 1 bytes @ 0x6
  1203  0000B6                     	ds	1
  1204  0000B7                     update_LCD_count@count:
  1205                           	opt stack 0
  1206  0000B7                     update_LCD_PED_Count@count:
  1207                           	opt stack 0
  1208  0000B7                     update_LCD_misc@nStep:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x7
  1212  0000B7                     	ds	1
  1213  0000B8                     update_LCD_count@direction:
  1214                           	opt stack 0
  1215  0000B8                     update_LCD_PED_Count@direction:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x8
  1219  0000B8                     	ds	1
  1220  0000B9                     PED_Control@Num_Sec:
  1221                           	opt stack 0
  1222  0000B9                     Wait_N_Seconds@seconds:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x9
  1226  0000B9                     	ds	1
  1227  0000BA                     PED_Control@i:
  1228                           	opt stack 0
  1229  0000BA                     Wait_N_Seconds@I:
  1230                           	opt stack 0
  1231                           
  1232                           ; 1 bytes @ 0xA
  1233  0000BA                     	ds	1
  1234  0000BB                     PED_Control@direction:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0xB
  1238  0000BB                     	ds	1
  1239  0000BC                     main@nStep:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0xC
  1243  0000BC                     	ds	2
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           postdec1	equ	0xFE5
  1251                           fsr1l	equ	0xFE1
  1252                           
  1253                           	psect	cstackCOMRAM
  1254  000001                     __pcstackCOMRAM:
  1255                           	opt stack 0
  1256  000001                     ??_chkisr:
  1257  000001                     
  1258                           ; 0 bytes @ 0x0
  1259  000001                     	ds	14
  1260  00000F                     ?_strlen:
  1261                           	opt stack 0
  1262  00000F                     ?_get_full_ADC:
  1263                           	opt stack 0
  1264  00000F                     ?___wmul:
  1265                           	opt stack 0
  1266  00000F                     ?___awdiv:
  1267                           	opt stack 0
  1268  00000F                     ?___awmod:
  1269                           	opt stack 0
  1270  00000F                     ?___lwdiv:
  1271                           	opt stack 0
  1272  00000F                     ?___ftpack:
  1273                           	opt stack 0
  1274  00000F                     spiwrite@x:
  1275                           	opt stack 0
  1276  00000F                     putch@c:
  1277                           	opt stack 0
  1278  00000F                     OpenUSART@spbrg:
  1279                           	opt stack 0
  1280  00000F                     ___wmul@multiplier:
  1281                           	opt stack 0
  1282  00000F                     ___awdiv@dividend:
  1283                           	opt stack 0
  1284  00000F                     ___awmod@dividend:
  1285                           	opt stack 0
  1286  00000F                     ___lwdiv@dividend:
  1287                           	opt stack 0
  1288  00000F                     strcpy@to:
  1289                           	opt stack 0
  1290  00000F                     strlen@s:
  1291                           	opt stack 0
  1292  00000F                     ___ftpack@arg:
  1293                           	opt stack 0
  1294  00000F                     ___ftge@ff1:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0xE
  1298  00000F                     	ds	1
  1299  000010                     spiwrite@spidata:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0xF
  1303  000010                     	ds	1
  1304  000011                     ??_strlen:
  1305  000011                     ??_get_full_ADC:
  1306  000011                     write_command@cmd_:
  1307                           	opt stack 0
  1308  000011                     write_data@data_:
  1309                           	opt stack 0
  1310  000011                     OpenUSART@config:
  1311                           	opt stack 0
  1312  000011                     ___wmul@multiplicand:
  1313                           	opt stack 0
  1314  000011                     ___awdiv@divisor:
  1315                           	opt stack 0
  1316  000011                     ___awmod@divisor:
  1317                           	opt stack 0
  1318  000011                     ___lwdiv@divisor:
  1319                           	opt stack 0
  1320  000011                     strcpy@from:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0x10
  1324  000011                     	ds	1
  1325  000012                     setAddrWindow@y0:
  1326                           	opt stack 0
  1327  000012                     ___ftpack@exp:
  1328                           	opt stack 0
  1329  000012                     ___ftge@ff2:
  1330                           	opt stack 0
  1331                           
  1332                           ; 3 bytes @ 0x11
  1333  000012                     	ds	1
  1334  000013                     setAddrWindow@x1:
  1335                           	opt stack 0
  1336  000013                     ___awdiv@counter:
  1337                           	opt stack 0
  1338  000013                     ___awmod@counter:
  1339                           	opt stack 0
  1340  000013                     ___ftpack@sign:
  1341                           	opt stack 0
  1342  000013                     ___lwdiv@counter:
  1343                           	opt stack 0
  1344  000013                     get_full_ADC@result:
  1345                           	opt stack 0
  1346  000013                     ___wmul@product:
  1347                           	opt stack 0
  1348  000013                     strcpy@cp:
  1349                           	opt stack 0
  1350  000013                     strlen@cp:
  1351                           	opt stack 0
  1352                           
  1353                           ; 2 bytes @ 0x12
  1354  000013                     	ds	1
  1355  000014                     ??___ftpack:
  1356  000014                     setAddrWindow@y1:
  1357                           	opt stack 0
  1358  000014                     ___awdiv@sign:
  1359                           	opt stack 0
  1360  000014                     ___awmod@sign:
  1361                           	opt stack 0
  1362  000014                     ___lwdiv@quotient:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x13
  1366  000014                     	ds	1
  1367  000015                     ??___ftge:
  1368  000015                     setAddrWindow@x0:
  1369                           	opt stack 0
  1370  000015                     delay_ms@ms:
  1371                           	opt stack 0
  1372  000015                     ___awdiv@quotient:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x14
  1376  000015                     	ds	1
  1377  000016                     ?___lwmod:
  1378                           	opt stack 0
  1379  000016                     drawPixel@y:
  1380                           	opt stack 0
  1381  000016                     drawFastVLine@y:
  1382                           	opt stack 0
  1383  000016                     fillRectangle@y:
  1384                           	opt stack 0
  1385  000016                     drawFastHLine@y:
  1386                           	opt stack 0
  1387  000016                     ___lwmod@dividend:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x15
  1391  000016                     	ds	1
  1392  000017                     ??_delay_ms:
  1393  000017                     ?___awtoft:
  1394                           	opt stack 0
  1395  000017                     drawFastVLine@h:
  1396                           	opt stack 0
  1397  000017                     fillRectangle@w:
  1398                           	opt stack 0
  1399  000017                     drawFastHLine@w:
  1400                           	opt stack 0
  1401  000017                     drawPixel@color:
  1402                           	opt stack 0
  1403  000017                     ___awtoft@c:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x16
  1407  000017                     	ds	1
  1408  000018                     fillRectangle@h:
  1409                           	opt stack 0
  1410  000018                     drawFastVLine@color:
  1411                           	opt stack 0
  1412  000018                     drawFastHLine@color:
  1413                           	opt stack 0
  1414  000018                     ___lwmod@divisor:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x17
  1418  000018                     	ds	1
  1419  000019                     drawPixel@x:
  1420                           	opt stack 0
  1421  000019                     delay_ms@count:
  1422                           	opt stack 0
  1423  000019                     fillRectangle@color:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x18
  1427  000019                     	ds	1
  1428  00001A                     ??_drawFastVLine:
  1429  00001A                     ??_drawFastHLine:
  1430  00001A                     ___awtoft@sign:
  1431                           	opt stack 0
  1432  00001A                     ___lwmod@counter:
  1433                           	opt stack 0
  1434  00001A                     drawCircle@x0:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x19
  1438  00001A                     	ds	1
  1439  00001B                     ??_fillRectangle:
  1440  00001B                     ?_printf:
  1441                           	opt stack 0
  1442  00001B                     ?___ftdiv:
  1443                           	opt stack 0
  1444  00001B                     printf@f:
  1445                           	opt stack 0
  1446  00001B                     ___ftdiv@f1:
  1447                           	opt stack 0
  1448                           
  1449                           ; 3 bytes @ 0x1A
  1450  00001B                     	ds	1
  1451  00001C                     drawCircle@y0:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x1B
  1455  00001C                     	ds	2
  1456  00001E                     drawFastVLine@hi:
  1457                           	opt stack 0
  1458  00001E                     drawFastHLine@hi:
  1459                           	opt stack 0
  1460  00001E                     drawCircle@r:
  1461                           	opt stack 0
  1462  00001E                     ___ftdiv@f2:
  1463                           	opt stack 0
  1464                           
  1465                           ; 3 bytes @ 0x1D
  1466  00001E                     	ds	1
  1467  00001F                     ??_printf:
  1468  00001F                     drawFastVLine@lo:
  1469                           	opt stack 0
  1470  00001F                     fillRectangle@hi:
  1471                           	opt stack 0
  1472  00001F                     drawFastHLine@lo:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x1E
  1476  00001F                     	ds	1
  1477  000020                     drawFastVLine@x:
  1478                           	opt stack 0
  1479  000020                     fillRectangle@lo:
  1480                           	opt stack 0
  1481  000020                     drawFastHLine@x:
  1482                           	opt stack 0
  1483  000020                     drawCircle@color:
  1484                           	opt stack 0
  1485  000020                     printf@ap:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x1F
  1489  000020                     	ds	1
  1490  000021                     ??___ftdiv:
  1491  000021                     fillRect@y:
  1492                           	opt stack 0
  1493  000021                     fillRectangle@x:
  1494                           	opt stack 0
  1495  000021                     fillCircleHelper@x0:
  1496                           	opt stack 0
  1497  000021                     drawRect@x:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x20
  1501  000021                     	ds	1
  1502  000022                     ??_drawCircle:
  1503  000022                     fillRect@w:
  1504                           	opt stack 0
  1505  000022                     printf@flag:
  1506                           	opt stack 0
  1507  000022                     fillScreen@color:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x21
  1511  000022                     	ds	1
  1512  000023                     fillRect@h:
  1513                           	opt stack 0
  1514  000023                     printf@prec:
  1515                           	opt stack 0
  1516  000023                     fillCircleHelper@y0:
  1517                           	opt stack 0
  1518  000023                     drawRect@y:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x22
  1522  000023                     	ds	1
  1523  000024                     ___ftdiv@cntr:
  1524                           	opt stack 0
  1525  000024                     fillRect@color:
  1526                           	opt stack 0
  1527  000024                     drawCircle@ddF_x:
  1528                           	opt stack 0
  1529  000024                     printf@val:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x23
  1533  000024                     	ds	1
  1534  000025                     fillCircleHelper@r:
  1535                           	opt stack 0
  1536  000025                     drawRect@w:
  1537                           	opt stack 0
  1538  000025                     ___ftdiv@f3:
  1539                           	opt stack 0
  1540                           
  1541                           ; 3 bytes @ 0x24
  1542  000025                     	ds	1
  1543  000026                     ??_fillRect:
  1544  000026                     printf@c:
  1545                           	opt stack 0
  1546  000026                     drawCircle@ddF_y:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x25
  1550  000026                     	ds	1
  1551  000027                     fillCircleHelper@cornername:
  1552                           	opt stack 0
  1553  000027                     drawRect@h:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x26
  1557  000027                     	ds	1
  1558  000028                     ___ftdiv@exp:
  1559                           	opt stack 0
  1560  000028                     drawCircle@f:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x27
  1564  000028                     	ds	1
  1565  000029                     fillRect@x:
  1566                           	opt stack 0
  1567  000029                     ___ftdiv@sign:
  1568                           	opt stack 0
  1569  000029                     fillCircleHelper@delta:
  1570                           	opt stack 0
  1571  000029                     drawRect@color:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x28
  1575  000029                     	ds	1
  1576  00002A                     fillRect@i:
  1577                           	opt stack 0
  1578  00002A                     drawCircle@x:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x29
  1582  00002A                     	ds	1
  1583  00002B                     ??_drawRect:
  1584  00002B                     fillCircleHelper@color:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x2A
  1588  00002B                     	ds	1
  1589  00002C                     drawChar@y:
  1590                           	opt stack 0
  1591  00002C                     drawCircle@y:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x2B
  1595  00002C                     	ds	1
  1596  00002D                     ??_fillCircleHelper:
  1597  00002D                     drawChar@c:
  1598                           	opt stack 0
  1599                           
  1600                           ; 1 bytes @ 0x2C
  1601  00002D                     	ds	1
  1602  00002E                     drawChar@color:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x2D
  1606  00002E                     	ds	1
  1607  00002F                     fillCircleHelper@ddF_x:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x2E
  1611  00002F                     	ds	1
  1612  000030                     drawChar@bg:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x2F
  1616  000030                     	ds	1
  1617  000031                     fillCircleHelper@ddF_y:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x30
  1621  000031                     	ds	1
  1622  000032                     drawChar@size:
  1623                           	opt stack 0
  1624                           
  1625                           ; 1 bytes @ 0x31
  1626  000032                     	ds	1
  1627  000033                     drawChar@line:
  1628                           	opt stack 0
  1629  000033                     fillCircleHelper@f:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x32
  1633  000033                     	ds	1
  1634  000034                     drawChar@x:
  1635                           	opt stack 0
  1636                           
  1637                           ; 1 bytes @ 0x33
  1638  000034                     	ds	1
  1639  000035                     drawChar@j:
  1640                           	opt stack 0
  1641  000035                     fillCircleHelper@x:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x34
  1645  000035                     	ds	1
  1646  000036                     drawChar@i:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x35
  1650  000036                     	ds	1
  1651  000037                     drawtext@y:
  1652                           	opt stack 0
  1653  000037                     fillCircleHelper@y:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x36
  1657  000037                     	ds	1
  1658  000038                     drawtext@_text:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x37
  1662  000038                     	ds	1
  1663  000039                     fillCircle@x0:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x38
  1667  000039                     	ds	1
  1668  00003A                     drawtext@color:
  1669                           	opt stack 0
  1670                           
  1671                           ; 2 bytes @ 0x39
  1672  00003A                     	ds	1
  1673  00003B                     fillCircle@y0:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x3A
  1677  00003B                     	ds	1
  1678  00003C                     drawtext@bg:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x3B
  1682  00003C                     	ds	1
  1683  00003D                     fillCircle@r:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x3C
  1687  00003D                     	ds	1
  1688  00003E                     drawtext@size:
  1689                           	opt stack 0
  1690                           
  1691                           ; 1 bytes @ 0x3D
  1692  00003E                     	ds	1
  1693  00003F                     ??_drawtext:
  1694  00003F                     fillCircle@color:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x3E
  1698  00003F                     	ds	2
  1699  000041                     tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           postinc0	equ	0xFEE
  1704                           wreg	equ	0xFE8
  1705                           postdec1	equ	0xFE5
  1706                           fsr1l	equ	0xFE1
  1707                           
  1708                           ; 0 bytes @ 0x40
  1709 ;;
  1710 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1711 ;;
  1712 ;; *************** function _main *****************
  1713 ;; Defined at:
  1714 ;;		line 303 in file "Lab8.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;		None
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;  nStep           2   12[BANK0 ] int 
  1719 ;; Return value:  Size  Location     Type
  1720 ;;		None               void
  1721 ;; Registers used:
  1722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;Total ram usage:        2 bytes
  1733 ;; Hardware stack levels required when called:   13
  1734 ;; This function calls:
  1735 ;;		_Day_Mode
  1736 ;;		_Do_Flashing
  1737 ;;		_Init_ADC
  1738 ;;		_Initialize_Screen
  1739 ;;		_Night_Mode
  1740 ;;		___awtoft
  1741 ;;		___ftdiv
  1742 ;;		___ftge
  1743 ;;		___wmul
  1744 ;;		_get_full_ADC
  1745 ;;		_init_IO
  1746 ;;		_init_UART
  1747 ;;		_printf
  1748 ;; This function is called by:
  1749 ;;		Startup code after reset
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           	psect	text0
  1754  001158                     __ptext0:
  1755                           	opt stack 0
  1756  001158                     _main:
  1757                           	opt stack 18
  1758                           
  1759                           ;Lab8.c: 306: init_IO();
  1760                           
  1761                           ;incstack = 0
  1762  001158  EC25  F014         	call	_init_IO	;wreg free
  1763                           
  1764                           ;Lab8.c: 307: Init_ADC();
  1765  00115C  EC87  F014         	call	_Init_ADC	;wreg free
  1766                           
  1767                           ;Lab8.c: 308: init_UART();
  1768  001160  EC3A  F014         	call	_init_UART	;wreg free
  1769                           
  1770                           ;Lab8.c: 309: OSCCON = 0x70;
  1771  001164  0E70               	movlw	112
  1772  001166  6ED3               	movwf	4051,c	;volatile
  1773                           
  1774                           ;Lab8.c: 312: Initialize_Screen();
  1775  001168  EC0E  F000         	call	_Initialize_Screen	;wreg free
  1776                           
  1777                           ;Lab8.c: 314: INTCONbits.INT0IF = 0;
  1778  00116C  92F2               	bcf	intcon,1,c	;volatile
  1779                           
  1780                           ;Lab8.c: 315: INTCON3bits.INT1IF = 0;
  1781  00116E  90F0               	bcf	intcon3,0,c	;volatile
  1782                           
  1783                           ;Lab8.c: 316: INTCON3bits.INT2IF = 0;
  1784  001170  92F0               	bcf	intcon3,1,c	;volatile
  1785                           
  1786                           ;Lab8.c: 318: INTCON2bits.INTEDG0 = 0;
  1787  001172  9CF1               	bcf	intcon2,6,c	;volatile
  1788                           
  1789                           ;Lab8.c: 319: INTCON2bits.INTEDG1 = 0;
  1790  001174  9AF1               	bcf	intcon2,5,c	;volatile
  1791                           
  1792                           ;Lab8.c: 320: INTCON2bits.INTEDG2 = 1;
  1793  001176  88F1               	bsf	intcon2,4,c	;volatile
  1794                           
  1795                           ;Lab8.c: 322: INTCONbits.INT0IE = 1;
  1796  001178  88F2               	bsf	intcon,4,c	;volatile
  1797                           
  1798                           ;Lab8.c: 323: INTCON3bits.INT1IE = 1;
  1799  00117A  86F0               	bsf	intcon3,3,c	;volatile
  1800                           
  1801                           ;Lab8.c: 324: INTCON3bits.INT2IE = 1;
  1802  00117C  88F0               	bsf	intcon3,4,c	;volatile
  1803                           
  1804                           ;Lab8.c: 326: INTCONbits.GIE = 1;
  1805  00117E  8EF2               	bsf	intcon,7,c	;volatile
  1806                           
  1807                           ;Lab8.c: 329: int nStep = get_full_ADC();
  1808  001180  ECF7  F013         	call	_get_full_ADC	;wreg free
  1809  001184  C00F  F0BC         	movff	?_get_full_ADC,main@nStep
  1810  001188  C010  F0BD         	movff	?_get_full_ADC+1,main@nStep+1
  1811                           
  1812                           ;Lab8.c: 330: volt = nStep * 5 /1024.0;
  1813  00118C  C0BC  F00F         	movff	main@nStep,___wmul@multiplier
  1814  001190  C0BD  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1815  001194  0E00               	movlw	0
  1816  001196  6E12               	movwf	___wmul@multiplicand+1,c
  1817  001198  0E05               	movlw	5
  1818  00119A  6E11               	movwf	___wmul@multiplicand,c
  1819  00119C  ECE3  F013         	call	___wmul	;wreg free
  1820  0011A0  C00F  F017         	movff	?___wmul,___awtoft@c
  1821  0011A4  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1822  0011A8  EC7F  F013         	call	___awtoft	;wreg free
  1823  0011AC  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  1824  0011B0  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  1825  0011B4  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  1826  0011B8  0E00               	movlw	0
  1827  0011BA  6E1E               	movwf	___ftdiv@f2,c
  1828  0011BC  0E80               	movlw	128
  1829  0011BE  6E1F               	movwf	___ftdiv@f2+1,c
  1830  0011C0  0E44               	movlw	68
  1831  0011C2  6E20               	movwf	___ftdiv@f2+2,c
  1832  0011C4  EC0E  F00C         	call	___ftdiv	;wreg free
  1833  0011C8  C01B  F041         	movff	?___ftdiv,_volt
  1834  0011CC  C01C  F042         	movff	?___ftdiv+1,_volt+1
  1835  0011D0  C01D  F043         	movff	?___ftdiv+2,_volt+2
  1836                           
  1837                           ;Lab8.c: 331: SW_MODE = volt < 2.5 ? 1:0;
  1838  0011D4  C041  F00F         	movff	_volt,___ftge@ff1
  1839  0011D8  C042  F010         	movff	_volt+1,___ftge@ff1+1
  1840  0011DC  C043  F011         	movff	_volt+2,___ftge@ff1+2
  1841  0011E0  0E00               	movlw	0
  1842  0011E2  6E12               	movwf	___ftge@ff2,c
  1843  0011E4  0E20               	movlw	32
  1844  0011E6  6E13               	movwf	___ftge@ff2+1,c
  1845  0011E8  0E40               	movlw	64
  1846  0011EA  6E14               	movwf	___ftge@ff2+2,c
  1847  0011EC  ECC5  F00E         	call	___ftge	;wreg free
  1848  0011F0  B0D8               	btfsc	status,0,c
  1849  0011F2  D002               	goto	u4520
  1850  0011F4  0E01               	movlw	1
  1851  0011F6  D001               	goto	u4530
  1852  0011F8                     u4520:
  1853  0011F8  0E00               	movlw	0
  1854  0011FA                     u4530:
  1855  0011FA  6E56               	movwf	_SW_MODE,c
  1856  0011FC  D000               	goto	l6055
  1857  0011FE                     l6055:
  1858                           
  1859                           ;Lab8.c: 334: {
  1860                           ;Lab8.c: 336: if (INT0_flag == 1)
  1861  0011FE  0444               	decf	_INT0_flag,w,c
  1862  001200  1045               	iorwf	_INT0_flag+1,w,c
  1863  001202  A4D8               	btfss	status,2,c
  1864  001204  D010               	goto	l6061
  1865                           
  1866                           ;Lab8.c: 337: {
  1867                           ;Lab8.c: 338: INT0_flag = 0;
  1868  001206  0E00               	movlw	0
  1869  001208  6E45               	movwf	_INT0_flag+1,c
  1870  00120A  0E00               	movlw	0
  1871  00120C  6E44               	movwf	_INT0_flag,c
  1872                           
  1873                           ;Lab8.c: 339: SW_NSPED=0;
  1874  00120E  0E00               	movlw	0
  1875  001210  6E58               	movwf	_SW_NSPED,c
  1876                           
  1877                           ;Lab8.c: 340: printf("INT0 interrupt pin detected %d\r\n", SW_NSPED);
  1878  001212  0E34               	movlw	low STR_13
  1879  001214  6E1B               	movwf	printf@f,c
  1880  001216  0EFF               	movlw	high STR_13
  1881  001218  6E1C               	movwf	printf@f+1,c
  1882  00121A  C058  F01D         	movff	_SW_NSPED,?_printf+2
  1883  00121E  6A1E               	clrf	?_printf+3,c
  1884  001220  EC4D  F009         	call	_printf	;wreg free
  1885  001224  D000               	goto	l6061
  1886  001226                     l6061:
  1887                           
  1888                           ;Lab8.c: 342: }
  1889                           ;Lab8.c: 344: if (INT1_flag == 1)
  1890  001226  0446               	decf	_INT1_flag,w,c
  1891  001228  1047               	iorwf	_INT1_flag+1,w,c
  1892  00122A  A4D8               	btfss	status,2,c
  1893  00122C  D010               	goto	l6067
  1894                           
  1895                           ;Lab8.c: 345: {
  1896                           ;Lab8.c: 346: INT1_flag = 0;
  1897  00122E  0E00               	movlw	0
  1898  001230  6E47               	movwf	_INT1_flag+1,c
  1899  001232  0E00               	movlw	0
  1900  001234  6E46               	movwf	_INT1_flag,c
  1901                           
  1902                           ;Lab8.c: 347: SW_EWPED=0;
  1903  001236  0E00               	movlw	0
  1904  001238  6E55               	movwf	_SW_EWPED,c
  1905                           
  1906                           ;Lab8.c: 348: printf("INT1 interrupt pin detected %d\r\n", SW_EWPED);
  1907  00123A  0E55               	movlw	low STR_14
  1908  00123C  6E1B               	movwf	printf@f,c
  1909  00123E  0EFF               	movlw	high STR_14
  1910  001240  6E1C               	movwf	printf@f+1,c
  1911  001242  C055  F01D         	movff	_SW_EWPED,?_printf+2
  1912  001246  6A1E               	clrf	?_printf+3,c
  1913  001248  EC4D  F009         	call	_printf	;wreg free
  1914  00124C  D000               	goto	l6067
  1915  00124E                     l6067:
  1916                           
  1917                           ;Lab8.c: 350: }
  1918                           ;Lab8.c: 351: if (INT2_flag == 1)
  1919  00124E  0448               	decf	_INT2_flag,w,c
  1920  001250  1049               	iorwf	_INT2_flag+1,w,c
  1921  001252  A4D8               	btfss	status,2,c
  1922  001254  D00F               	goto	l6073
  1923                           
  1924                           ;Lab8.c: 352: {
  1925                           ;Lab8.c: 353: INT2_flag = 0;
  1926  001256  0E00               	movlw	0
  1927  001258  6E49               	movwf	_INT2_flag+1,c
  1928  00125A  0E00               	movlw	0
  1929  00125C  6E48               	movwf	_INT2_flag,c
  1930                           
  1931                           ;Lab8.c: 354: printf("INT2 interrupt pin detected %d\r\n", 7);
  1932  00125E  0E76               	movlw	low STR_15
  1933  001260  6E1B               	movwf	printf@f,c
  1934  001262  0EFF               	movlw	high STR_15
  1935  001264  6E1C               	movwf	printf@f+1,c
  1936  001266  0E00               	movlw	0
  1937  001268  6E1E               	movwf	?_printf+3,c
  1938  00126A  0E07               	movlw	7
  1939  00126C  6E1D               	movwf	?_printf+2,c
  1940  00126E  EC4D  F009         	call	_printf	;wreg free
  1941  001272  D000               	goto	l6073
  1942  001274                     l6073:
  1943                           
  1944                           ;Lab8.c: 356: }
  1945                           ;Lab8.c: 358: if(SW_MODE)
  1946  001274  5056               	movf	_SW_MODE,w,c
  1947  001276  B4D8               	btfsc	status,2,c
  1948  001278  D003               	goto	l6077
  1949                           
  1950                           ;Lab8.c: 359: {
  1951                           ;Lab8.c: 360: Day_Mode();
  1952  00127A  EC55  F00D         	call	_Day_Mode	;wreg free
  1953                           
  1954                           ;Lab8.c: 361: }
  1955  00127E  D003               	goto	l6079
  1956  001280                     l6077:
  1957                           
  1958                           ;Lab8.c: 362: else
  1959                           ;Lab8.c: 363: {
  1960                           ;Lab8.c: 364: Night_Mode();
  1961  001280  EC1E  F00E         	call	_Night_Mode	;wreg free
  1962  001284  D000               	goto	l6079
  1963  001286                     l6079:
  1964                           
  1965                           ;Lab8.c: 365: }
  1966                           ;Lab8.c: 366: if (FLASHING_REQUEST == 1)
  1967  001286  0451               	decf	_FLASHING_REQUEST,w,c
  1968  001288  A4D8               	btfss	status,2,c
  1969  00128A  D7B9               	goto	l6055
  1970                           
  1971                           ;Lab8.c: 367: {
  1972                           ;Lab8.c: 368: FLASHING_REQUEST = 0;
  1973  00128C  0E00               	movlw	0
  1974  00128E  6E51               	movwf	_FLASHING_REQUEST,c
  1975                           
  1976                           ;Lab8.c: 369: Do_Flashing();
  1977  001290  ECA0  F011         	call	_Do_Flashing	;wreg free
  1978  001294  D7B4               	goto	l6055
  1979  001296  EF0C  F000         	goto	start
  1980  00129A                     __end_of_main:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           intcon	equ	0xFF2
  1987                           intcon2	equ	0xFF1
  1988                           intcon3	equ	0xFF0
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           postdec1	equ	0xFE5
  1992                           fsr1l	equ	0xFE1
  1993                           status	equ	0xFD8
  1994                           
  1995 ;; *************** function _printf *****************
  1996 ;; Defined at:
  1997 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  f               2   26[COMRAM] PTR const unsigned char 
  2000 ;;		 -> STR_15(33), STR_14(33), STR_13(33), 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  tmpval          4    0        struct .
  2003 ;;  cp              3    0        PTR const unsigned char 
  2004 ;;  val             2   35[COMRAM] unsigned int 
  2005 ;;  ap              2   31[COMRAM] PTR void [1]
  2006 ;;		 -> ?_printf(2), 
  2007 ;;  len             2    0        unsigned int 
  2008 ;;  c               1   37[COMRAM] char 
  2009 ;;  prec            1   34[COMRAM] char 
  2010 ;;  flag            1   33[COMRAM] unsigned char 
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  2   26[COMRAM] int 
  2013 ;; Registers used:
  2014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2020 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;Total ram usage:       12 bytes
  2025 ;; Hardware stack levels used:    1
  2026 ;; Hardware stack levels required when called:    3
  2027 ;; This function calls:
  2028 ;;		___lwdiv
  2029 ;;		___lwmod
  2030 ;;		_putch
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text1
  2037  00129A                     __ptext1:
  2038                           	opt stack 0
  2039  00129A                     _printf:
  2040                           	opt stack 27
  2041                           
  2042                           ;doprnt.c: 466: va_list ap;
  2043                           ;doprnt.c: 499: signed char c;
  2044                           ;doprnt.c: 506: signed char prec;
  2045                           ;doprnt.c: 508: unsigned char flag;
  2046                           ;doprnt.c: 523: union {
  2047                           ;doprnt.c: 524: unsigned long vd;
  2048                           ;doprnt.c: 525: double integ;
  2049                           ;doprnt.c: 526: } tmpval;
  2050                           ;doprnt.c: 528: unsigned int val;
  2051                           ;doprnt.c: 529: unsigned len;
  2052                           ;doprnt.c: 530: const char * cp;
  2053                           ;doprnt.c: 533: *ap = __va_start();
  2054                           
  2055                           ;incstack = 0
  2056  00129A  0E1D               	movlw	low (?_printf+2)
  2057  00129C  6E20               	movwf	printf@ap,c
  2058  00129E  0E00               	movlw	high (?_printf+2)
  2059  0012A0  6E21               	movwf	printf@ap+1,c
  2060                           
  2061                           ;doprnt.c: 536: while(c = *f++) {
  2062  0012A2  D08B               	goto	l5631
  2063  0012A4                     l5585:
  2064                           
  2065                           ;doprnt.c: 538: if(c != '%')
  2066  0012A4  0E25               	movlw	37
  2067  0012A6  1826               	xorwf	printf@c,w,c
  2068  0012A8  B4D8               	btfsc	status,2,c
  2069  0012AA  D004               	goto	l5589
  2070                           
  2071                           ;doprnt.c: 540: {
  2072                           ;doprnt.c: 541: (putch(c) );
  2073  0012AC  5026               	movf	printf@c,w,c
  2074  0012AE  EC80  F014         	call	_putch
  2075                           
  2076                           ;doprnt.c: 542: continue;
  2077  0012B2  D083               	goto	l5631
  2078  0012B4                     l5589:
  2079                           
  2080                           ;doprnt.c: 543: }
  2081                           ;doprnt.c: 548: flag = 0;
  2082  0012B4  0E00               	movlw	0
  2083  0012B6  6E22               	movwf	printf@flag,c
  2084                           
  2085                           ;doprnt.c: 635: switch(c = *f++) {
  2086  0012B8  D004               	goto	l5593
  2087                           
  2088                           ;doprnt.c: 638: goto alldone;
  2089                           
  2090                           ;doprnt.c: 637: case 0:
  2091  0012BA  D08D               	goto	l596
  2092                           
  2093                           ;doprnt.c: 698: case 'i':
  2094                           ;doprnt.c: 699: break;
  2095                           
  2096                           ;doprnt.c: 697: case 'd':
  2097  0012BC  D015               	goto	l5595
  2098                           
  2099                           ;doprnt.c: 813: continue;
  2100                           
  2101                           ;doprnt.c: 802: default:
  2102  0012BE  D07D               	goto	l5631
  2103                           
  2104                           ;doprnt.c: 822: }
  2105  0012C0  D013               	goto	l5595
  2106  0012C2                     l5593:
  2107  0012C2  C01B  FFF6         	movff	printf@f,tblptrl
  2108  0012C6  C01C  FFF7         	movff	printf@f+1,tblptrh
  2109  0012CA  4A1B               	infsnz	printf@f,f,c
  2110  0012CC  2A1C               	incf	printf@f+1,f,c
  2111  0012CE                     	if	0	;tblptru may be non-zero
  2112  0012CE                     	endif
  2113  0012CE                     	if	0	;tblptru may be non-zero
  2114  0012CE                     	endif
  2115  0012CE  0008               	tblrd		*
  2116  0012D0  CFF5 F026          	movff	tablat,printf@c
  2117  0012D4  5026               	movf	printf@c,w,c
  2118                           
  2119                           ; Switch size 1, requested type "space"
  2120                           ; Number of cases is 3, Range of values is 0 to 105
  2121                           ; switch strategies available:
  2122                           ; Name         Instructions Cycles
  2123                           ; simple_byte           10     6 (average)
  2124                           ;	Chosen strategy is simple_byte
  2125  0012D6  0A00               	xorlw	0	; case 0
  2126  0012D8  B4D8               	btfsc	status,2,c
  2127  0012DA  D07D               	goto	l596
  2128  0012DC  0A64               	xorlw	100	; case 100
  2129  0012DE  B4D8               	btfsc	status,2,c
  2130  0012E0  D003               	goto	l5595
  2131  0012E2  0A0D               	xorlw	13	; case 105
  2132  0012E4  A4D8               	btfss	status,2,c
  2133  0012E6  D069               	goto	l5631
  2134  0012E8                     l5595:
  2135                           
  2136                           ;doprnt.c: 1253: {
  2137                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2138  0012E8  C020  FFD9         	movff	printf@ap,fsr2l
  2139  0012EC  C021  FFDA         	movff	printf@ap+1,fsr2h
  2140  0012F0  CFDE F024          	movff	postinc2,printf@val
  2141  0012F4  CFDD F025          	movff	postdec2,printf@val+1
  2142  0012F8  0E02               	movlw	2
  2143  0012FA  2620               	addwf	printf@ap,f,c
  2144  0012FC  0E00               	movlw	0
  2145  0012FE  2221               	addwfc	printf@ap+1,f,c
  2146                           
  2147                           ;doprnt.c: 1261: if((int)val < 0) {
  2148  001300  AE25               	btfss	printf@val+1,7,c
  2149  001302  D007               	goto	l5605
  2150                           
  2151                           ;doprnt.c: 1262: flag |= 0x03;
  2152  001304  0E03               	movlw	3
  2153  001306  1222               	iorwf	printf@flag,f,c
  2154                           
  2155                           ;doprnt.c: 1263: val = -val;
  2156  001308  6C24               	negf	printf@val,c
  2157  00130A  1E25               	comf	printf@val+1,f,c
  2158  00130C  B0D8               	btfsc	status,0,c
  2159  00130E  2A25               	incf	printf@val+1,f,c
  2160  001310  D000               	goto	l5605
  2161  001312                     l5605:
  2162                           
  2163                           ;doprnt.c: 1264: }
  2164                           ;doprnt.c: 1266: }
  2165                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2166  001312  0E01               	movlw	1
  2167  001314  6E26               	movwf	printf@c,c
  2168  001316                     l5607:
  2169  001316  0E05               	movlw	5
  2170  001318  1826               	xorwf	printf@c,w,c
  2171  00131A  B4D8               	btfsc	status,2,c
  2172  00131C  D016               	goto	l5619
  2173  00131E  D001               	goto	l5611
  2174  001320  D014               	goto	l5619
  2175  001322                     l5611:
  2176                           
  2177                           ;doprnt.c: 1306: if(val < dpowers[c])
  2178  001322  5026               	movf	printf@c,w,c
  2179  001324  0D02               	mullw	2
  2180  001326  0E2A               	movlw	low _dpowers
  2181  001328  24F3               	addwf	prodl,w,c
  2182  00132A  6EF6               	movwf	tblptrl,c
  2183  00132C  0EFF               	movlw	high _dpowers
  2184  00132E  20F4               	addwfc	prodh,w,c
  2185  001330  6EF7               	movwf	tblptrh,c
  2186  001332                     	if	0	;There are less than 3 active tblptr bytes
  2187  001332                     	endif
  2188  001332  0009               	tblrd		*+
  2189  001334  50F5               	movf	tablat,w,c
  2190  001336  5C24               	subwf	printf@val,w,c
  2191  001338  0009               	tblrd		*+
  2192  00133A  50F5               	movf	tablat,w,c
  2193  00133C  5825               	subwfb	printf@val+1,w,c
  2194  00133E  A0D8               	btfss	status,0,c
  2195  001340  D004               	goto	l5619
  2196  001342  D001               	goto	l5615
  2197                           
  2198                           ;doprnt.c: 1307: break;
  2199  001344  D002               	goto	l5619
  2200  001346                     l5615:
  2201  001346  2A26               	incf	printf@c,f,c
  2202  001348  D7E6               	goto	l5607
  2203  00134A                     l5619:
  2204                           
  2205                           ;doprnt.c: 1422: {
  2206                           ;doprnt.c: 1438: if(flag & 0x03)
  2207  00134A  C022  F01F         	movff	printf@flag,??_printf
  2208  00134E  0E03               	movlw	3
  2209  001350  161F               	andwf	??_printf,f,c
  2210  001352  B4D8               	btfsc	status,2,c
  2211  001354  D004               	goto	l5623
  2212                           
  2213                           ;doprnt.c: 1439: (putch('-') );
  2214  001356  0E2D               	movlw	45
  2215  001358  EC80  F014         	call	_putch
  2216  00135C  D000               	goto	l5623
  2217  00135E                     l5623:
  2218                           
  2219                           ;doprnt.c: 1469: }
  2220                           ;doprnt.c: 1472: prec = c;
  2221  00135E  C026  F023         	movff	printf@c,printf@prec
  2222                           
  2223                           ;doprnt.c: 1474: while(prec--) {
  2224  001362  D025               	goto	l5629
  2225  001364                     l5625:
  2226                           
  2227                           ;doprnt.c: 1478: {
  2228                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2229  001364  5023               	movf	printf@prec,w,c
  2230  001366  0D02               	mullw	2
  2231  001368  0E2A               	movlw	low _dpowers
  2232  00136A  24F3               	addwf	prodl,w,c
  2233  00136C  6EF6               	movwf	tblptrl,c
  2234  00136E  0EFF               	movlw	high _dpowers
  2235  001370  20F4               	addwfc	prodh,w,c
  2236  001372  6EF7               	movwf	tblptrh,c
  2237  001374                     	if	0	;There are less than 3 active tblptr bytes
  2238  001374                     	endif
  2239  001374  0009               	tblrd		*+
  2240  001376  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2241  00137A  000A               	tblrd		*-
  2242  00137C  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2243  001380  C024  F00F         	movff	printf@val,___lwdiv@dividend
  2244  001384  C025  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2245  001388  EC72  F011         	call	___lwdiv	;wreg free
  2246  00138C  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  2247  001390  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  2248  001394  0E00               	movlw	0
  2249  001396  6E19               	movwf	___lwmod@divisor+1,c
  2250  001398  0E0A               	movlw	10
  2251  00139A  6E18               	movwf	___lwmod@divisor,c
  2252  00139C  EC44  F012         	call	___lwmod	;wreg free
  2253  0013A0  5016               	movf	?___lwmod,w,c
  2254  0013A2  0F30               	addlw	48
  2255  0013A4  6E26               	movwf	printf@c,c
  2256                           
  2257                           ;doprnt.c: 1523: }
  2258                           ;doprnt.c: 1524: (putch(c) );
  2259  0013A6  5026               	movf	printf@c,w,c
  2260  0013A8  EC80  F014         	call	_putch
  2261  0013AC  D000               	goto	l5629
  2262  0013AE                     l5629:
  2263  0013AE  0623               	decf	printf@prec,f,c
  2264  0013B0  2823               	incf	printf@prec,w,c
  2265  0013B2  B4D8               	btfsc	status,2,c
  2266  0013B4  D002               	goto	l5631
  2267  0013B6  D7D6               	goto	l5625
  2268  0013B8  D000               	goto	l5631
  2269  0013BA                     l5631:
  2270  0013BA  C01B  FFF6         	movff	printf@f,tblptrl
  2271  0013BE  C01C  FFF7         	movff	printf@f+1,tblptrh
  2272  0013C2  4A1B               	infsnz	printf@f,f,c
  2273  0013C4  2A1C               	incf	printf@f+1,f,c
  2274  0013C6                     	if	0	;tblptru may be non-zero
  2275  0013C6                     	endif
  2276  0013C6                     	if	0	;tblptru may be non-zero
  2277  0013C6                     	endif
  2278  0013C6  0008               	tblrd		*
  2279  0013C8  CFF5 F026          	movff	tablat,printf@c
  2280  0013CC  5026               	movf	printf@c,w,c
  2281  0013CE  B4D8               	btfsc	status,2,c
  2282  0013D0  D002               	goto	l596
  2283  0013D2  D768               	goto	l5585
  2284  0013D4  D000               	goto	l596
  2285  0013D6                     l596:
  2286  0013D6  0012               	return		;funcret
  2287  0013D8                     __end_of_printf:
  2288                           	opt stack 0
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           prodh	equ	0xFF4
  2294                           prodl	equ	0xFF3
  2295                           intcon	equ	0xFF2
  2296                           intcon2	equ	0xFF1
  2297                           intcon3	equ	0xFF0
  2298                           postinc0	equ	0xFEE
  2299                           wreg	equ	0xFE8
  2300                           postdec1	equ	0xFE5
  2301                           fsr1l	equ	0xFE1
  2302                           postinc2	equ	0xFDE
  2303                           postdec2	equ	0xFDD
  2304                           fsr2h	equ	0xFDA
  2305                           fsr2l	equ	0xFD9
  2306                           status	equ	0xFD8
  2307                           
  2308 ;; *************** function _putch *****************
  2309 ;; Defined at:
  2310 ;;		line 297 in file "Lab8.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  c               1    wreg     unsigned char 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  c               1   14[COMRAM] unsigned char 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;		None               void
  2317 ;; Registers used:
  2318 ;;		wreg
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;Total ram usage:        1 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    2
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_printf
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text2
  2339  002900                     __ptext2:
  2340                           	opt stack 0
  2341  002900                     _putch:
  2342                           	opt stack 27
  2343                           
  2344                           ;incstack = 0
  2345                           ;putch@c stored from wreg
  2346  002900  6E0F               	movwf	putch@c,c
  2347                           
  2348                           ;Lab8.c: 299: while (!TRMT);
  2349  002902  D000               	goto	l395
  2350  002904                     l395:
  2351  002904  A2AC               	btfss	4012,1,c	;volatile
  2352  002906  D7FE               	goto	l395
  2353                           
  2354                           ;Lab8.c: 300: TXREG = c;
  2355  002908  C00F  FFAD         	movff	putch@c,4013	;volatile
  2356  00290C  0012               	return		;funcret
  2357  00290E                     __end_of_putch:
  2358                           	opt stack 0
  2359                           tblptru	equ	0xFF8
  2360                           tblptrh	equ	0xFF7
  2361                           tblptrl	equ	0xFF6
  2362                           tablat	equ	0xFF5
  2363                           prodh	equ	0xFF4
  2364                           prodl	equ	0xFF3
  2365                           intcon	equ	0xFF2
  2366                           intcon2	equ	0xFF1
  2367                           intcon3	equ	0xFF0
  2368                           postinc0	equ	0xFEE
  2369                           wreg	equ	0xFE8
  2370                           postdec1	equ	0xFE5
  2371                           fsr1l	equ	0xFE1
  2372                           postinc2	equ	0xFDE
  2373                           postdec2	equ	0xFDD
  2374                           fsr2h	equ	0xFDA
  2375                           fsr2l	equ	0xFD9
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function ___lwmod *****************
  2379 ;; Defined at:
  2380 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  dividend        2   21[COMRAM] unsigned int 
  2383 ;;  divisor         2   23[COMRAM] unsigned int 
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;  counter         1   25[COMRAM] unsigned char 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  2   21[COMRAM] unsigned int 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;Total ram usage:        5 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; Hardware stack levels required when called:    2
  2402 ;; This function calls:
  2403 ;;		Nothing
  2404 ;; This function is called by:
  2405 ;;		_printf
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text3
  2410  002488                     __ptext3:
  2411                           	opt stack 0
  2412  002488                     ___lwmod:
  2413                           	opt stack 27
  2414                           
  2415                           ;incstack = 0
  2416  002488  5018               	movf	___lwmod@divisor,w,c
  2417  00248A  1019               	iorwf	___lwmod@divisor+1,w,c
  2418  00248C  B4D8               	btfsc	status,2,c
  2419  00248E  D01D               	goto	l1160
  2420  002490  0E01               	movlw	1
  2421  002492  6E1A               	movwf	___lwmod@counter,c
  2422  002494  D005               	goto	l5449
  2423  002496                     l5447:
  2424  002496  90D8               	bcf	status,0,c
  2425  002498  3618               	rlcf	___lwmod@divisor,f,c
  2426  00249A  3619               	rlcf	___lwmod@divisor+1,f,c
  2427  00249C  2A1A               	incf	___lwmod@counter,f,c
  2428  00249E  D000               	goto	l5449
  2429  0024A0                     l5449:
  2430  0024A0  BE19               	btfsc	___lwmod@divisor+1,7,c
  2431  0024A2  D002               	goto	l5451
  2432  0024A4  D7F8               	goto	l5447
  2433  0024A6  D000               	goto	l5451
  2434  0024A8                     l5451:
  2435  0024A8  5018               	movf	___lwmod@divisor,w,c
  2436  0024AA  5C16               	subwf	___lwmod@dividend,w,c
  2437  0024AC  5019               	movf	___lwmod@divisor+1,w,c
  2438  0024AE  5817               	subwfb	___lwmod@dividend+1,w,c
  2439  0024B0  A0D8               	btfss	status,0,c
  2440  0024B2  D005               	goto	l5455
  2441  0024B4  5018               	movf	___lwmod@divisor,w,c
  2442  0024B6  5E16               	subwf	___lwmod@dividend,f,c
  2443  0024B8  5019               	movf	___lwmod@divisor+1,w,c
  2444  0024BA  5A17               	subwfb	___lwmod@dividend+1,f,c
  2445  0024BC  D000               	goto	l5455
  2446  0024BE                     l5455:
  2447  0024BE  90D8               	bcf	status,0,c
  2448  0024C0  3219               	rrcf	___lwmod@divisor+1,f,c
  2449  0024C2  3218               	rrcf	___lwmod@divisor,f,c
  2450  0024C4  2E1A               	decfsz	___lwmod@counter,f,c
  2451  0024C6  D7F0               	goto	l5451
  2452  0024C8  D000               	goto	l1160
  2453  0024CA                     l1160:
  2454  0024CA  C016  F016         	movff	___lwmod@dividend,?___lwmod
  2455  0024CE  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  2456  0024D2  0012               	return		;funcret
  2457  0024D4                     __end_of___lwmod:
  2458                           	opt stack 0
  2459                           tblptru	equ	0xFF8
  2460                           tblptrh	equ	0xFF7
  2461                           tblptrl	equ	0xFF6
  2462                           tablat	equ	0xFF5
  2463                           prodh	equ	0xFF4
  2464                           prodl	equ	0xFF3
  2465                           intcon	equ	0xFF2
  2466                           intcon2	equ	0xFF1
  2467                           intcon3	equ	0xFF0
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           postdec1	equ	0xFE5
  2471                           fsr1l	equ	0xFE1
  2472                           postinc2	equ	0xFDE
  2473                           postdec2	equ	0xFDD
  2474                           fsr2h	equ	0xFDA
  2475                           fsr2l	equ	0xFD9
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function ___lwdiv *****************
  2479 ;; Defined at:
  2480 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  dividend        2   14[COMRAM] unsigned int 
  2483 ;;  divisor         2   16[COMRAM] unsigned int 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  quotient        2   19[COMRAM] unsigned int 
  2486 ;;  counter         1   18[COMRAM] unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  2   14[COMRAM] unsigned int 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2496 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;Total ram usage:        7 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    2
  2503 ;; This function calls:
  2504 ;;		Nothing
  2505 ;; This function is called by:
  2506 ;;		_printf
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text4
  2511  0022E4                     __ptext4:
  2512                           	opt stack 0
  2513  0022E4                     ___lwdiv:
  2514                           	opt stack 27
  2515                           
  2516                           ;incstack = 0
  2517  0022E4  0E00               	movlw	0
  2518  0022E6  6E15               	movwf	___lwdiv@quotient+1,c
  2519  0022E8  0E00               	movlw	0
  2520  0022EA  6E14               	movwf	___lwdiv@quotient,c
  2521  0022EC  5011               	movf	___lwdiv@divisor,w,c
  2522  0022EE  1012               	iorwf	___lwdiv@divisor+1,w,c
  2523  0022F0  B4D8               	btfsc	status,2,c
  2524  0022F2  D021               	goto	l1150
  2525  0022F4  0E01               	movlw	1
  2526  0022F6  6E13               	movwf	___lwdiv@counter,c
  2527  0022F8  D005               	goto	l5429
  2528  0022FA                     l5427:
  2529  0022FA  90D8               	bcf	status,0,c
  2530  0022FC  3611               	rlcf	___lwdiv@divisor,f,c
  2531  0022FE  3612               	rlcf	___lwdiv@divisor+1,f,c
  2532  002300  2A13               	incf	___lwdiv@counter,f,c
  2533  002302  D000               	goto	l5429
  2534  002304                     l5429:
  2535  002304  BE12               	btfsc	___lwdiv@divisor+1,7,c
  2536  002306  D002               	goto	l5431
  2537  002308  D7F8               	goto	l5427
  2538  00230A  D000               	goto	l5431
  2539  00230C                     l5431:
  2540  00230C  90D8               	bcf	status,0,c
  2541  00230E  3614               	rlcf	___lwdiv@quotient,f,c
  2542  002310  3615               	rlcf	___lwdiv@quotient+1,f,c
  2543  002312  5011               	movf	___lwdiv@divisor,w,c
  2544  002314  5C0F               	subwf	___lwdiv@dividend,w,c
  2545  002316  5012               	movf	___lwdiv@divisor+1,w,c
  2546  002318  5810               	subwfb	___lwdiv@dividend+1,w,c
  2547  00231A  A0D8               	btfss	status,0,c
  2548  00231C  D006               	goto	l5439
  2549  00231E  5011               	movf	___lwdiv@divisor,w,c
  2550  002320  5E0F               	subwf	___lwdiv@dividend,f,c
  2551  002322  5012               	movf	___lwdiv@divisor+1,w,c
  2552  002324  5A10               	subwfb	___lwdiv@dividend+1,f,c
  2553  002326  8014               	bsf	___lwdiv@quotient,0,c
  2554  002328  D000               	goto	l5439
  2555  00232A                     l5439:
  2556  00232A  90D8               	bcf	status,0,c
  2557  00232C  3212               	rrcf	___lwdiv@divisor+1,f,c
  2558  00232E  3211               	rrcf	___lwdiv@divisor,f,c
  2559  002330  2E13               	decfsz	___lwdiv@counter,f,c
  2560  002332  D7EC               	goto	l5431
  2561  002334  D000               	goto	l1150
  2562  002336                     l1150:
  2563  002336  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
  2564  00233A  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2565  00233E  0012               	return		;funcret
  2566  002340                     __end_of___lwdiv:
  2567                           	opt stack 0
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           intcon	equ	0xFF2
  2575                           intcon2	equ	0xFF1
  2576                           intcon3	equ	0xFF0
  2577                           postinc0	equ	0xFEE
  2578                           wreg	equ	0xFE8
  2579                           postdec1	equ	0xFE5
  2580                           fsr1l	equ	0xFE1
  2581                           postinc2	equ	0xFDE
  2582                           postdec2	equ	0xFDD
  2583                           fsr2h	equ	0xFDA
  2584                           fsr2l	equ	0xFD9
  2585                           status	equ	0xFD8
  2586                           
  2587 ;; *************** function _init_UART *****************
  2588 ;; Defined at:
  2589 ;;		line 289 in file "Lab8.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;		None
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;		None
  2594 ;; Return value:  Size  Location     Type
  2595 ;;		None               void
  2596 ;; Registers used:
  2597 ;;		wreg, status,2, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;Total ram usage:        0 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    3
  2610 ;; This function calls:
  2611 ;;		_OpenUSART
  2612 ;; This function is called by:
  2613 ;;		_main
  2614 ;;		_Do_Init
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           	psect	text5
  2619  002874                     __ptext5:
  2620                           	opt stack 0
  2621  002874                     _init_UART:
  2622                           	opt stack 27
  2623                           
  2624                           ;Lab8.c: 291: OpenUSART (0b01111111 & 0b10111111 &
  2625                           ;Lab8.c: 292: 0b11111110 & 0b11111101 & 0b11111111 &
  2626                           ;Lab8.c: 293: 0b11111111, 25);
  2627                           
  2628                           ;incstack = 0
  2629  002874  0E00               	movlw	0
  2630  002876  6E10               	movwf	OpenUSART@spbrg+1,c
  2631  002878  0E19               	movlw	25
  2632  00287A  6E0F               	movwf	OpenUSART@spbrg,c
  2633  00287C  0E3C               	movlw	60
  2634  00287E  ECA2  F010         	call	_OpenUSART
  2635                           
  2636                           ;Lab8.c: 294: OSCCON = 0x60;
  2637  002882  0E60               	movlw	96
  2638  002884  6ED3               	movwf	4051,c	;volatile
  2639  002886  0012               	return		;funcret
  2640  002888                     __end_of_init_UART:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           intcon	equ	0xFF2
  2649                           intcon2	equ	0xFF1
  2650                           intcon3	equ	0xFF0
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           postdec1	equ	0xFE5
  2654                           fsr1l	equ	0xFE1
  2655                           postinc2	equ	0xFDE
  2656                           postdec2	equ	0xFDD
  2657                           fsr2h	equ	0xFDA
  2658                           fsr2l	equ	0xFD9
  2659                           status	equ	0xFD8
  2660                           
  2661 ;; *************** function _OpenUSART *****************
  2662 ;; Defined at:
  2663 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  config          1    wreg     unsigned char 
  2666 ;;  spbrg           2   14[COMRAM] unsigned int 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  config          1   16[COMRAM] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;		None               void
  2671 ;; Registers used:
  2672 ;;		wreg, status,2
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2678 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;Total ram usage:        3 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    2
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_init_UART
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text6
  2693  002144                     __ptext6:
  2694                           	opt stack 0
  2695  002144                     _OpenUSART:
  2696                           	opt stack 27
  2697                           
  2698                           ;incstack = 0
  2699                           ;OpenUSART@config stored from wreg
  2700  002144  6E11               	movwf	OpenUSART@config,c
  2701  002146  0E00               	movlw	0
  2702  002148  6EAC               	movwf	4012,c	;volatile
  2703  00214A  0E00               	movlw	0
  2704  00214C  6EAB               	movwf	4011,c	;volatile
  2705  00214E  A011               	btfss	OpenUSART@config,0,c
  2706  002150  D002               	goto	l5307
  2707  002152  88AC               	bsf	4012,4,c	;volatile
  2708  002154  D000               	goto	l5307
  2709  002156                     l5307:
  2710  002156  A211               	btfss	OpenUSART@config,1,c
  2711  002158  D003               	goto	l5311
  2712  00215A  8CAC               	bsf	4012,6,c	;volatile
  2713  00215C  8CAB               	bsf	4011,6,c	;volatile
  2714  00215E  D000               	goto	l5311
  2715  002160                     l5311:
  2716  002160  A411               	btfss	OpenUSART@config,2,c
  2717  002162  D002               	goto	l5315
  2718  002164  8EAC               	bsf	4012,7,c	;volatile
  2719  002166  D000               	goto	l5315
  2720  002168                     l5315:
  2721  002168  A611               	btfss	OpenUSART@config,3,c
  2722  00216A  D002               	goto	l620
  2723  00216C  88AB               	bsf	4011,4,c	;volatile
  2724  00216E  D002               	goto	l5319
  2725  002170                     l620:
  2726  002170  8AAB               	bsf	4011,5,c	;volatile
  2727  002172  D000               	goto	l5319
  2728  002174                     l5319:
  2729  002174  B811               	btfsc	OpenUSART@config,4,c
  2730  002176  84AC               	bsf	4012,2,c	;volatile
  2731  002178  989E               	bcf	3998,4,c	;volatile
  2732  00217A  AA11               	btfss	OpenUSART@config,5,c
  2733  00217C  D002               	goto	l5327
  2734  00217E  86AB               	bsf	4011,3,c	;volatile
  2735  002180  D000               	goto	l5327
  2736  002182                     l5327:
  2737  002182  AC11               	btfss	OpenUSART@config,6,c
  2738  002184  D002               	goto	l624
  2739  002186  8A9D               	bsf	3997,5,c	;volatile
  2740  002188  D001               	goto	l625
  2741  00218A                     l624:
  2742  00218A  9A9D               	bcf	3997,5,c	;volatile
  2743  00218C                     l625:
  2744  00218C  9A9E               	bcf	3998,5,c	;volatile
  2745  00218E  AE11               	btfss	OpenUSART@config,7,c
  2746  002190  D002               	goto	l626
  2747  002192  889D               	bsf	3997,4,c	;volatile
  2748  002194  D001               	goto	l627
  2749  002196                     l626:
  2750  002196  989D               	bcf	3997,4,c	;volatile
  2751  002198                     l627:
  2752  002198  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2753  00219C  5010               	movf	OpenUSART@spbrg+1,w,c
  2754  00219E  6EB0               	movwf	4016,c	;volatile
  2755  0021A0  8AAC               	bsf	4012,5,c	;volatile
  2756  0021A2  8EAB               	bsf	4011,7,c	;volatile
  2757  0021A4  9C94               	bcf	3988,6,c	;volatile
  2758  0021A6  8E94               	bsf	3988,7,c	;volatile
  2759  0021A8  B8AC               	btfsc	4012,4,c	;volatile
  2760  0021AA  BEAC               	btfsc	4012,7,c	;volatile
  2761  0021AC  D002               	goto	l629
  2762  0021AE  8C94               	bsf	3988,6,c	;volatile
  2763  0021B0  D000               	goto	l629
  2764  0021B2                     l629:
  2765  0021B2  0012               	return		;funcret
  2766  0021B4                     __end_of_OpenUSART:
  2767                           	opt stack 0
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           intcon2	equ	0xFF1
  2776                           intcon3	equ	0xFF0
  2777                           postinc0	equ	0xFEE
  2778                           wreg	equ	0xFE8
  2779                           postdec1	equ	0xFE5
  2780                           fsr1l	equ	0xFE1
  2781                           postinc2	equ	0xFDE
  2782                           postdec2	equ	0xFDD
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _init_IO *****************
  2788 ;; Defined at:
  2789 ;;		line 431 in file "Lab8.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;		None
  2794 ;; Return value:  Size  Location     Type
  2795 ;;		None               void
  2796 ;; Registers used:
  2797 ;;		wreg, status,2
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;Total ram usage:        0 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    2
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_main
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text7
  2818  00284A                     __ptext7:
  2819                           	opt stack 0
  2820  00284A                     _init_IO:
  2821                           	opt stack 28
  2822                           
  2823                           ;Lab8.c: 433: TRISA = 0x1F;
  2824                           
  2825                           ;incstack = 0
  2826  00284A  0E1F               	movlw	31
  2827  00284C  6E92               	movwf	3986,c	;volatile
  2828                           
  2829                           ;Lab8.c: 434: TRISB = 0x07;
  2830  00284E  0E07               	movlw	7
  2831  002850  6E93               	movwf	3987,c	;volatile
  2832                           
  2833                           ;Lab8.c: 435: TRISC = 0x00;
  2834  002852  0E00               	movlw	0
  2835  002854  6E94               	movwf	3988,c	;volatile
  2836                           
  2837                           ;Lab8.c: 436: TRISD = 0x00;
  2838  002856  0E00               	movlw	0
  2839  002858  6E95               	movwf	3989,c	;volatile
  2840                           
  2841                           ;Lab8.c: 437: TRISE = 0x00;
  2842  00285A  0E00               	movlw	0
  2843  00285C  6E96               	movwf	3990,c	;volatile
  2844  00285E  0012               	return		;funcret
  2845  002860                     __end_of_init_IO:
  2846                           	opt stack 0
  2847                           tblptru	equ	0xFF8
  2848                           tblptrh	equ	0xFF7
  2849                           tblptrl	equ	0xFF6
  2850                           tablat	equ	0xFF5
  2851                           prodh	equ	0xFF4
  2852                           prodl	equ	0xFF3
  2853                           intcon	equ	0xFF2
  2854                           intcon2	equ	0xFF1
  2855                           intcon3	equ	0xFF0
  2856                           postinc0	equ	0xFEE
  2857                           wreg	equ	0xFE8
  2858                           postdec1	equ	0xFE5
  2859                           fsr1l	equ	0xFE1
  2860                           postinc2	equ	0xFDE
  2861                           postdec2	equ	0xFDD
  2862                           fsr2h	equ	0xFDA
  2863                           fsr2l	equ	0xFD9
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _Night_Mode *****************
  2867 ;; Defined at:
  2868 ;;		line 620 in file "Lab8.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;		None               void
  2875 ;; Registers used:
  2876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;Total ram usage:        0 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:   12
  2889 ;; This function calls:
  2890 ;;		_Set_EW
  2891 ;;		_Set_EW_LT
  2892 ;;		_Set_NS
  2893 ;;		_Set_NS_LT
  2894 ;;		_Wait_N_Seconds
  2895 ;; This function is called by:
  2896 ;;		_main
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text8
  2901  001C3C                     __ptext8:
  2902                           	opt stack 0
  2903  001C3C                     _Night_Mode:
  2904                           	opt stack 18
  2905                           
  2906                           ;Lab8.c: 622: MODE = 0;
  2907                           
  2908                           ;incstack = 0
  2909  001C3C  0E00               	movlw	0
  2910  001C3E  0100               	movlb	0	; () banked
  2911  001C40  6F81               	movwf	(_MODE+1)& (0+255),b
  2912  001C42  0E00               	movlw	0
  2913  001C44  6F80               	movwf	_MODE& (0+255),b
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;Lab8.c: 623: PORTBbits.RB7 = 0;
  2917  001C46  9E81               	bcf	3969,7,c	;volatile
  2918                           
  2919                           ;Lab8.c: 624: Act_Mode_Txt[0] = 'N';
  2920  001C48  0E4E               	movlw	78
  2921  001C4A  6E62               	movwf	_Act_Mode_Txt,c
  2922                           
  2923                           ;Lab8.c: 626: MODE = 0;
  2924  001C4C  0E00               	movlw	0
  2925  001C4E  0100               	movlb	0	; () banked
  2926  001C50  6F81               	movwf	(_MODE+1)& (0+255),b
  2927  001C52  0E00               	movlw	0
  2928  001C54  6F80               	movwf	_MODE& (0+255),b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;Lab8.c: 627: PORTBbits.RB7 = 0;
  2932  001C56  9E81               	bcf	3969,7,c	;volatile
  2933                           
  2934                           ;Lab8.c: 628: Act_Mode_Txt[0] = 'N';
  2935  001C58  0E4E               	movlw	78
  2936  001C5A  6E62               	movwf	_Act_Mode_Txt,c
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;Lab8.c: 630: Set_NS(2);
  2940  001C5C  0E02               	movlw	2
  2941  001C5E  ECB3  F012         	call	_Set_NS
  2942                           
  2943                           ;Lab8.c: 632: Set_EW(1);
  2944  001C62  0E01               	movlw	1
  2945  001C64  ECFB  F012         	call	_Set_EW
  2946                           
  2947                           ;Lab8.c: 633: Set_NS_LT(1);
  2948  001C68  0E01               	movlw	1
  2949  001C6A  EC8F  F012         	call	_Set_NS_LT
  2950                           
  2951                           ;Lab8.c: 634: Set_EW_LT(1);
  2952  001C6E  0E01               	movlw	1
  2953  001C70  ECD7  F012         	call	_Set_EW_LT
  2954                           
  2955                           ;Lab8.c: 636: Wait_N_Seconds(6);
  2956  001C74  0E06               	movlw	6
  2957  001C76  EC1F  F013         	call	_Wait_N_Seconds
  2958                           
  2959                           ;Lab8.c: 638: Set_NS(3);
  2960  001C7A  0E03               	movlw	3
  2961  001C7C  ECB3  F012         	call	_Set_NS
  2962                           
  2963                           ;Lab8.c: 639: Wait_N_Seconds(3);
  2964  001C80  0E03               	movlw	3
  2965  001C82  EC1F  F013         	call	_Wait_N_Seconds
  2966                           
  2967                           ;Lab8.c: 641: Set_NS(1);
  2968  001C86  0E01               	movlw	1
  2969  001C88  ECB3  F012         	call	_Set_NS
  2970                           
  2971                           ;Lab8.c: 644: if (PORTAbits.RA5 == 1)
  2972  001C8C  AA80               	btfss	3968,5,c	;volatile
  2973  001C8E  D010               	goto	l5715
  2974                           
  2975                           ;Lab8.c: 645: {
  2976                           ;Lab8.c: 646: Set_EW_LT(2);
  2977  001C90  0E02               	movlw	2
  2978  001C92  ECD7  F012         	call	_Set_EW_LT
  2979                           
  2980                           ;Lab8.c: 647: Wait_N_Seconds(6);
  2981  001C96  0E06               	movlw	6
  2982  001C98  EC1F  F013         	call	_Wait_N_Seconds
  2983                           
  2984                           ;Lab8.c: 649: Set_EW_LT(3);
  2985  001C9C  0E03               	movlw	3
  2986  001C9E  ECD7  F012         	call	_Set_EW_LT
  2987                           
  2988                           ;Lab8.c: 650: Wait_N_Seconds(3);
  2989  001CA2  0E03               	movlw	3
  2990  001CA4  EC1F  F013         	call	_Wait_N_Seconds
  2991                           
  2992                           ;Lab8.c: 652: Set_EW_LT(1);
  2993  001CA8  0E01               	movlw	1
  2994  001CAA  ECD7  F012         	call	_Set_EW_LT
  2995  001CAE  D000               	goto	l5715
  2996  001CB0                     l5715:
  2997                           
  2998                           ;Lab8.c: 654: }
  2999                           ;Lab8.c: 656: Set_EW(2);
  3000  001CB0  0E02               	movlw	2
  3001  001CB2  ECFB  F012         	call	_Set_EW
  3002                           
  3003                           ;Lab8.c: 657: Wait_N_Seconds(6);
  3004  001CB6  0E06               	movlw	6
  3005  001CB8  EC1F  F013         	call	_Wait_N_Seconds
  3006                           
  3007                           ;Lab8.c: 659: Set_EW(3);
  3008  001CBC  0E03               	movlw	3
  3009  001CBE  ECFB  F012         	call	_Set_EW
  3010                           
  3011                           ;Lab8.c: 660: Wait_N_Seconds(3);
  3012  001CC2  0E03               	movlw	3
  3013  001CC4  EC1F  F013         	call	_Wait_N_Seconds
  3014                           
  3015                           ;Lab8.c: 662: Set_EW(1);
  3016  001CC8  0E01               	movlw	1
  3017  001CCA  ECFB  F012         	call	_Set_EW
  3018                           
  3019                           ;Lab8.c: 666: if ( PORTAbits.RA4 == 1 )
  3020  001CCE  A880               	btfss	3968,4,c	;volatile
  3021  001CD0  D010               	goto	l506
  3022                           
  3023                           ;Lab8.c: 667: {
  3024                           ;Lab8.c: 668: Set_NS_LT(2);
  3025  001CD2  0E02               	movlw	2
  3026  001CD4  EC8F  F012         	call	_Set_NS_LT
  3027                           
  3028                           ;Lab8.c: 669: Wait_N_Seconds(8);
  3029  001CD8  0E08               	movlw	8
  3030  001CDA  EC1F  F013         	call	_Wait_N_Seconds
  3031                           
  3032                           ;Lab8.c: 671: Set_NS_LT(3);
  3033  001CDE  0E03               	movlw	3
  3034  001CE0  EC8F  F012         	call	_Set_NS_LT
  3035                           
  3036                           ;Lab8.c: 672: Wait_N_Seconds(3);
  3037  001CE4  0E03               	movlw	3
  3038  001CE6  EC1F  F013         	call	_Wait_N_Seconds
  3039                           
  3040                           ;Lab8.c: 674: Set_NS_LT(1);
  3041  001CEA  0E01               	movlw	1
  3042  001CEC  EC8F  F012         	call	_Set_NS_LT
  3043  001CF0  D000               	goto	l506
  3044  001CF2                     l506:
  3045  001CF2  0012               	return		;funcret
  3046  001CF4                     __end_of_Night_Mode:
  3047                           	opt stack 0
  3048                           tblptru	equ	0xFF8
  3049                           tblptrh	equ	0xFF7
  3050                           tblptrl	equ	0xFF6
  3051                           tablat	equ	0xFF5
  3052                           prodh	equ	0xFF4
  3053                           prodl	equ	0xFF3
  3054                           intcon	equ	0xFF2
  3055                           intcon2	equ	0xFF1
  3056                           intcon3	equ	0xFF0
  3057                           postinc0	equ	0xFEE
  3058                           wreg	equ	0xFE8
  3059                           postdec1	equ	0xFE5
  3060                           fsr1l	equ	0xFE1
  3061                           postinc2	equ	0xFDE
  3062                           postdec2	equ	0xFDD
  3063                           fsr2h	equ	0xFDA
  3064                           fsr2l	equ	0xFD9
  3065                           status	equ	0xFD8
  3066                           
  3067 ;; *************** function _Initialize_Screen *****************
  3068 ;; Defined at:
  3069 ;;		line 176 in file "Lab8.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;		None
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;		None
  3074 ;; Return value:  Size  Location     Type
  3075 ;;		None               void
  3076 ;; Registers used:
  3077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;Total ram usage:        0 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    9
  3090 ;; This function calls:
  3091 ;;		_LCD_Reset
  3092 ;;		_TFT_GreenTab_Initialize
  3093 ;;		_drawCircle
  3094 ;;		_drawRect
  3095 ;;		_drawtext
  3096 ;;		_fillCircle
  3097 ;;		_fillScreen
  3098 ;;		_strcpy
  3099 ;; This function is called by:
  3100 ;;		_main
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text9
  3105  00001C                     __ptext9:
  3106                           	opt stack 0
  3107  00001C                     _Initialize_Screen:
  3108                           	opt stack 21
  3109                           
  3110                           ;Lab8.c: 178: LCD_Reset();
  3111                           
  3112                           ;incstack = 0
  3113  00001C  EC4E  F014         	call	_LCD_Reset	;wreg free
  3114                           
  3115                           ;Lab8.c: 179: TFT_GreenTab_Initialize();
  3116  000020  ECCE  F013         	call	_TFT_GreenTab_Initialize	;wreg free
  3117                           
  3118                           ;Lab8.c: 180: fillScreen(0x0000);
  3119  000024  0E00               	movlw	0
  3120  000026  6E23               	movwf	fillScreen@color+1,c
  3121  000028  0E00               	movlw	0
  3122  00002A  6E22               	movwf	fillScreen@color,c
  3123  00002C  EC0A  F014         	call	_fillScreen	;wreg free
  3124                           
  3125                           ;Lab8.c: 183: txt = buffer;
  3126  000030  0E82               	movlw	low _buffer
  3127  000032  6E4C               	movwf	_txt,c
  3128  000034  0E00               	movlw	high _buffer
  3129  000036  6E4D               	movwf	_txt+1,c
  3130                           
  3131                           ;Lab8.c: 184: strcpy(txt, "ECE3301L Fall 21-S3");
  3132  000038  C04C  F00F         	movff	_txt,strcpy@to
  3133  00003C  C04D  F010         	movff	_txt+1,strcpy@to+1
  3134  000040  0EAC               	movlw	low STR_1
  3135  000042  6E11               	movwf	strcpy@from,c
  3136  000044  0EFF               	movlw	high STR_1
  3137  000046  6E12               	movwf	strcpy@from+1,c
  3138  000048  EC9D  F013         	call	_strcpy	;wreg free
  3139                           
  3140                           ;Lab8.c: 185: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3141  00004C  0E02               	movlw	2
  3142  00004E  6E37               	movwf	drawtext@y,c
  3143  000050  C04C  F038         	movff	_txt,drawtext@_text
  3144  000054  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3145  000058  0EFF               	movlw	255
  3146  00005A  6E3B               	movwf	drawtext@color+1,c
  3147  00005C  683A               	setf	drawtext@color,c
  3148  00005E  0E00               	movlw	0
  3149  000060  6E3D               	movwf	drawtext@bg+1,c
  3150  000062  0E00               	movlw	0
  3151  000064  6E3C               	movwf	drawtext@bg,c
  3152  000066  0E01               	movlw	1
  3153  000068  6E3E               	movwf	drawtext@size,c
  3154  00006A  0E02               	movlw	2
  3155  00006C  EC10  F00B         	call	_drawtext
  3156                           
  3157                           ;Lab8.c: 188: strcpy(txt, "Mode:");
  3158  000070  C04C  F00F         	movff	_txt,strcpy@to
  3159  000074  C04D  F010         	movff	_txt+1,strcpy@to+1
  3160  000078  0EE4               	movlw	low STR_2
  3161  00007A  6E11               	movwf	strcpy@from,c
  3162  00007C  0EFF               	movlw	high STR_2
  3163  00007E  6E12               	movwf	strcpy@from+1,c
  3164  000080  EC9D  F013         	call	_strcpy	;wreg free
  3165                           
  3166                           ;Lab8.c: 189: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  3167  000084  0E0A               	movlw	10
  3168  000086  6E37               	movwf	drawtext@y,c
  3169  000088  C04C  F038         	movff	_txt,drawtext@_text
  3170  00008C  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3171  000090  0EFF               	movlw	255
  3172  000092  6E3B               	movwf	drawtext@color+1,c
  3173  000094  683A               	setf	drawtext@color,c
  3174  000096  0E00               	movlw	0
  3175  000098  6E3D               	movwf	drawtext@bg+1,c
  3176  00009A  0E00               	movlw	0
  3177  00009C  6E3C               	movwf	drawtext@bg,c
  3178  00009E  0E01               	movlw	1
  3179  0000A0  6E3E               	movwf	drawtext@size,c
  3180  0000A2  0E02               	movlw	2
  3181  0000A4  EC10  F00B         	call	_drawtext
  3182                           
  3183                           ;Lab8.c: 190: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  3184  0000A8  0E0A               	movlw	10
  3185  0000AA  6E37               	movwf	drawtext@y,c
  3186  0000AC  0E62               	movlw	low _Act_Mode_Txt
  3187  0000AE  6E38               	movwf	drawtext@_text,c
  3188  0000B0  0E00               	movlw	high _Act_Mode_Txt
  3189  0000B2  6E39               	movwf	drawtext@_text+1,c
  3190  0000B4  0EFF               	movlw	255
  3191  0000B6  6E3B               	movwf	drawtext@color+1,c
  3192  0000B8  683A               	setf	drawtext@color,c
  3193  0000BA  0E00               	movlw	0
  3194  0000BC  6E3D               	movwf	drawtext@bg+1,c
  3195  0000BE  0E00               	movlw	0
  3196  0000C0  6E3C               	movwf	drawtext@bg,c
  3197  0000C2  0E01               	movlw	1
  3198  0000C4  6E3E               	movwf	drawtext@size,c
  3199  0000C6  0E23               	movlw	35
  3200  0000C8  EC10  F00B         	call	_drawtext
  3201                           
  3202                           ;Lab8.c: 193: strcpy(txt, "FR:");
  3203  0000CC  C04C  F00F         	movff	_txt,strcpy@to
  3204  0000D0  C04D  F010         	movff	_txt+1,strcpy@to+1
  3205  0000D4  0EEA               	movlw	low STR_3
  3206  0000D6  6E11               	movwf	strcpy@from,c
  3207  0000D8  0EFF               	movlw	high STR_3
  3208  0000DA  6E12               	movwf	strcpy@from+1,c
  3209  0000DC  EC9D  F013         	call	_strcpy	;wreg free
  3210                           
  3211                           ;Lab8.c: 194: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3212  0000E0  0E0A               	movlw	10
  3213  0000E2  6E37               	movwf	drawtext@y,c
  3214  0000E4  C04C  F038         	movff	_txt,drawtext@_text
  3215  0000E8  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3216  0000EC  0EFF               	movlw	255
  3217  0000EE  6E3B               	movwf	drawtext@color+1,c
  3218  0000F0  683A               	setf	drawtext@color,c
  3219  0000F2  0E00               	movlw	0
  3220  0000F4  6E3D               	movwf	drawtext@bg+1,c
  3221  0000F6  0E00               	movlw	0
  3222  0000F8  6E3C               	movwf	drawtext@bg,c
  3223  0000FA  0E01               	movlw	1
  3224  0000FC  6E3E               	movwf	drawtext@size,c
  3225  0000FE  0E32               	movlw	50
  3226  000100  EC10  F00B         	call	_drawtext
  3227                           
  3228                           ;Lab8.c: 195: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  3229  000104  0E0A               	movlw	10
  3230  000106  6E37               	movwf	drawtext@y,c
  3231  000108  0E64               	movlw	low _FlashingR_Txt
  3232  00010A  6E38               	movwf	drawtext@_text,c
  3233  00010C  0E00               	movlw	high _FlashingR_Txt
  3234  00010E  6E39               	movwf	drawtext@_text+1,c
  3235  000110  0EFF               	movlw	255
  3236  000112  6E3B               	movwf	drawtext@color+1,c
  3237  000114  683A               	setf	drawtext@color,c
  3238  000116  0E00               	movlw	0
  3239  000118  6E3D               	movwf	drawtext@bg+1,c
  3240  00011A  0E00               	movlw	0
  3241  00011C  6E3C               	movwf	drawtext@bg,c
  3242  00011E  0E01               	movlw	1
  3243  000120  6E3E               	movwf	drawtext@size,c
  3244  000122  0E46               	movlw	70
  3245  000124  EC10  F00B         	call	_drawtext
  3246                           
  3247                           ;Lab8.c: 198: strcpy(txt, "FS:");
  3248  000128  C04C  F00F         	movff	_txt,strcpy@to
  3249  00012C  C04D  F010         	movff	_txt+1,strcpy@to+1
  3250  000130  0EEE               	movlw	low STR_4
  3251  000132  6E11               	movwf	strcpy@from,c
  3252  000134  0EFF               	movlw	high STR_4
  3253  000136  6E12               	movwf	strcpy@from+1,c
  3254  000138  EC9D  F013         	call	_strcpy	;wreg free
  3255                           
  3256                           ;Lab8.c: 199: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  3257  00013C  0E0A               	movlw	10
  3258  00013E  6E37               	movwf	drawtext@y,c
  3259  000140  C04C  F038         	movff	_txt,drawtext@_text
  3260  000144  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3261  000148  0EFF               	movlw	255
  3262  00014A  6E3B               	movwf	drawtext@color+1,c
  3263  00014C  683A               	setf	drawtext@color,c
  3264  00014E  0E00               	movlw	0
  3265  000150  6E3D               	movwf	drawtext@bg+1,c
  3266  000152  0E00               	movlw	0
  3267  000154  6E3C               	movwf	drawtext@bg,c
  3268  000156  0E01               	movlw	1
  3269  000158  6E3E               	movwf	drawtext@size,c
  3270  00015A  0E50               	movlw	80
  3271  00015C  EC10  F00B         	call	_drawtext
  3272                           
  3273                           ;Lab8.c: 200: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  3274  000160  0E0A               	movlw	10
  3275  000162  6E37               	movwf	drawtext@y,c
  3276  000164  0E66               	movlw	low _FlashingS_Txt
  3277  000166  6E38               	movwf	drawtext@_text,c
  3278  000168  0E00               	movlw	high _FlashingS_Txt
  3279  00016A  6E39               	movwf	drawtext@_text+1,c
  3280  00016C  0EFF               	movlw	255
  3281  00016E  6E3B               	movwf	drawtext@color+1,c
  3282  000170  683A               	setf	drawtext@color,c
  3283  000172  0E00               	movlw	0
  3284  000174  6E3D               	movwf	drawtext@bg+1,c
  3285  000176  0E00               	movlw	0
  3286  000178  6E3C               	movwf	drawtext@bg,c
  3287  00017A  0E01               	movlw	1
  3288  00017C  6E3E               	movwf	drawtext@size,c
  3289  00017E  0E64               	movlw	100
  3290  000180  EC10  F00B         	call	_drawtext
  3291                           
  3292                           ;Lab8.c: 203: strcpy(txt, "*");
  3293  000184  C04C  F00F         	movff	_txt,strcpy@to
  3294  000188  C04D  F010         	movff	_txt+1,strcpy@to+1
  3295  00018C  0EFC               	movlw	low STR_5
  3296  00018E  6E11               	movwf	strcpy@from,c
  3297  000190  0EFF               	movlw	high STR_5
  3298  000192  6E12               	movwf	strcpy@from+1,c
  3299  000194  EC9D  F013         	call	_strcpy	;wreg free
  3300                           
  3301                           ;Lab8.c: 204: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  3302  000198  0E0A               	movlw	10
  3303  00019A  6E37               	movwf	drawtext@y,c
  3304  00019C  C04C  F038         	movff	_txt,drawtext@_text
  3305  0001A0  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3306  0001A4  0EFF               	movlw	255
  3307  0001A6  6E3B               	movwf	drawtext@color+1,c
  3308  0001A8  683A               	setf	drawtext@color,c
  3309  0001AA  0E00               	movlw	0
  3310  0001AC  6E3D               	movwf	drawtext@bg+1,c
  3311  0001AE  0E00               	movlw	0
  3312  0001B0  6E3C               	movwf	drawtext@bg,c
  3313  0001B2  0E01               	movlw	1
  3314  0001B4  6E3E               	movwf	drawtext@size,c
  3315  0001B6  0E78               	movlw	120
  3316  0001B8  EC10  F00B         	call	_drawtext
  3317                           
  3318                           ;Lab8.c: 207: strcpy(txt, "EAST/WEST");
  3319  0001BC  C04C  F00F         	movff	_txt,strcpy@to
  3320  0001C0  C04D  F010         	movff	_txt+1,strcpy@to+1
  3321  0001C4  0ECC               	movlw	low STR_6
  3322  0001C6  6E11               	movwf	strcpy@from,c
  3323  0001C8  0EFF               	movlw	high STR_6
  3324  0001CA  6E12               	movwf	strcpy@from+1,c
  3325  0001CC  EC9D  F013         	call	_strcpy	;wreg free
  3326                           
  3327                           ;Lab8.c: 208: drawtext (30, 80, txt, 0x07FF, 0x0000, 1);
  3328  0001D0  0E50               	movlw	80
  3329  0001D2  6E37               	movwf	drawtext@y,c
  3330  0001D4  C04C  F038         	movff	_txt,drawtext@_text
  3331  0001D8  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3332  0001DC  0E07               	movlw	7
  3333  0001DE  6E3B               	movwf	drawtext@color+1,c
  3334  0001E0  683A               	setf	drawtext@color,c
  3335  0001E2  0E00               	movlw	0
  3336  0001E4  6E3D               	movwf	drawtext@bg+1,c
  3337  0001E6  0E00               	movlw	0
  3338  0001E8  6E3C               	movwf	drawtext@bg,c
  3339  0001EA  0E01               	movlw	1
  3340  0001EC  6E3E               	movwf	drawtext@size,c
  3341  0001EE  0E1E               	movlw	30
  3342  0001F0  EC10  F00B         	call	_drawtext
  3343                           
  3344                           ;Lab8.c: 209: drawRect (30, 80 + 15-8, 60, 18, 0x07FF);
  3345  0001F4  0E00               	movlw	0
  3346  0001F6  6E22               	movwf	drawRect@x+1,c
  3347  0001F8  0E1E               	movlw	30
  3348  0001FA  6E21               	movwf	drawRect@x,c
  3349  0001FC  0E00               	movlw	0
  3350  0001FE  6E24               	movwf	drawRect@y+1,c
  3351  000200  0E57               	movlw	87
  3352  000202  6E23               	movwf	drawRect@y,c
  3353  000204  0E00               	movlw	0
  3354  000206  6E26               	movwf	drawRect@w+1,c
  3355  000208  0E3C               	movlw	60
  3356  00020A  6E25               	movwf	drawRect@w,c
  3357  00020C  0E00               	movlw	0
  3358  00020E  6E28               	movwf	drawRect@h+1,c
  3359  000210  0E12               	movlw	18
  3360  000212  6E27               	movwf	drawRect@h,c
  3361  000214  0E07               	movlw	7
  3362  000216  6E2A               	movwf	drawRect@color+1,c
  3363  000218  6829               	setf	drawRect@color,c
  3364  00021A  EC0E  F011         	call	_drawRect	;wreg free
  3365                           
  3366                           ;Lab8.c: 210: fillCircle(40, 80 + 15, 7, 0xF800);
  3367  00021E  0E00               	movlw	0
  3368  000220  6E3A               	movwf	fillCircle@x0+1,c
  3369  000222  0E28               	movlw	40
  3370  000224  6E39               	movwf	fillCircle@x0,c
  3371  000226  0E00               	movlw	0
  3372  000228  6E3C               	movwf	fillCircle@y0+1,c
  3373  00022A  0E5F               	movlw	95
  3374  00022C  6E3B               	movwf	fillCircle@y0,c
  3375  00022E  0E00               	movlw	0
  3376  000230  6E3E               	movwf	fillCircle@r+1,c
  3377  000232  0E07               	movlw	7
  3378  000234  6E3D               	movwf	fillCircle@r,c
  3379  000236  0EF8               	movlw	248
  3380  000238  6E40               	movwf	fillCircle@color+1,c
  3381  00023A  0E00               	movlw	0
  3382  00023C  6E3F               	movwf	fillCircle@color,c
  3383  00023E  ECF4  F011         	call	_fillCircle	;wreg free
  3384                           
  3385                           ;Lab8.c: 211: drawCircle(60, 80 + 15, 7, 0xFFE0);
  3386  000242  0E00               	movlw	0
  3387  000244  6E1B               	movwf	drawCircle@x0+1,c
  3388  000246  0E3C               	movlw	60
  3389  000248  6E1A               	movwf	drawCircle@x0,c
  3390  00024A  0E00               	movlw	0
  3391  00024C  6E1D               	movwf	drawCircle@y0+1,c
  3392  00024E  0E5F               	movlw	95
  3393  000250  6E1C               	movwf	drawCircle@y0,c
  3394  000252  0E00               	movlw	0
  3395  000254  6E1F               	movwf	drawCircle@r+1,c
  3396  000256  0E07               	movlw	7
  3397  000258  6E1E               	movwf	drawCircle@r,c
  3398  00025A  0EFF               	movlw	255
  3399  00025C  6E21               	movwf	drawCircle@color+1,c
  3400  00025E  0EE0               	movlw	224
  3401  000260  6E20               	movwf	drawCircle@color,c
  3402  000262  EC63  F006         	call	_drawCircle	;wreg free
  3403                           
  3404                           ;Lab8.c: 212: drawCircle(80, 80 + 15, 7, 0x07E0);
  3405  000266  0E00               	movlw	0
  3406  000268  6E1B               	movwf	drawCircle@x0+1,c
  3407  00026A  0E50               	movlw	80
  3408  00026C  6E1A               	movwf	drawCircle@x0,c
  3409  00026E  0E00               	movlw	0
  3410  000270  6E1D               	movwf	drawCircle@y0+1,c
  3411  000272  0E5F               	movlw	95
  3412  000274  6E1C               	movwf	drawCircle@y0,c
  3413  000276  0E00               	movlw	0
  3414  000278  6E1F               	movwf	drawCircle@r+1,c
  3415  00027A  0E07               	movlw	7
  3416  00027C  6E1E               	movwf	drawCircle@r,c
  3417  00027E  0E07               	movlw	7
  3418  000280  6E21               	movwf	drawCircle@color+1,c
  3419  000282  0EE0               	movlw	224
  3420  000284  6E20               	movwf	drawCircle@color,c
  3421  000286  EC63  F006         	call	_drawCircle	;wreg free
  3422                           
  3423                           ;Lab8.c: 213: drawtext (100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  3424  00028A  0E5A               	movlw	90
  3425  00028C  6E37               	movwf	drawtext@y,c
  3426  00028E  0E5F               	movlw	low _EW_Count
  3427  000290  6E38               	movwf	drawtext@_text,c
  3428  000292  0E00               	movlw	high _EW_Count
  3429  000294  6E39               	movwf	drawtext@_text+1,c
  3430  000296  0E07               	movlw	7
  3431  000298  6E3B               	movwf	drawtext@color+1,c
  3432  00029A  683A               	setf	drawtext@color,c
  3433  00029C  0E00               	movlw	0
  3434  00029E  6E3D               	movwf	drawtext@bg+1,c
  3435  0002A0  0E00               	movlw	0
  3436  0002A2  6E3C               	movwf	drawtext@bg,c
  3437  0002A4  0E02               	movlw	2
  3438  0002A6  6E3E               	movwf	drawtext@size,c
  3439  0002A8  0E64               	movlw	100
  3440  0002AA  EC10  F00B         	call	_drawtext
  3441                           
  3442                           ;Lab8.c: 216: strcpy(txt, "E/W LT");
  3443  0002AE  C04C  F00F         	movff	_txt,strcpy@to
  3444  0002B2  C04D  F010         	movff	_txt+1,strcpy@to+1
  3445  0002B6  0EDD               	movlw	low STR_7
  3446  0002B8  6E11               	movwf	strcpy@from,c
  3447  0002BA  0EFF               	movlw	high STR_7
  3448  0002BC  6E12               	movwf	strcpy@from+1,c
  3449  0002BE  EC9D  F013         	call	_strcpy	;wreg free
  3450                           
  3451                           ;Lab8.c: 217: drawtext (30, 110, txt, 0xFFFF, 0x0000, 1);
  3452  0002C2  0E6E               	movlw	110
  3453  0002C4  6E37               	movwf	drawtext@y,c
  3454  0002C6  C04C  F038         	movff	_txt,drawtext@_text
  3455  0002CA  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3456  0002CE  0EFF               	movlw	255
  3457  0002D0  6E3B               	movwf	drawtext@color+1,c
  3458  0002D2  683A               	setf	drawtext@color,c
  3459  0002D4  0E00               	movlw	0
  3460  0002D6  6E3D               	movwf	drawtext@bg+1,c
  3461  0002D8  0E00               	movlw	0
  3462  0002DA  6E3C               	movwf	drawtext@bg,c
  3463  0002DC  0E01               	movlw	1
  3464  0002DE  6E3E               	movwf	drawtext@size,c
  3465  0002E0  0E1E               	movlw	30
  3466  0002E2  EC10  F00B         	call	_drawtext
  3467                           
  3468                           ;Lab8.c: 218: drawRect (30, 110 + 15-8, 60, 18, 0xFFFF);
  3469  0002E6  0E00               	movlw	0
  3470  0002E8  6E22               	movwf	drawRect@x+1,c
  3471  0002EA  0E1E               	movlw	30
  3472  0002EC  6E21               	movwf	drawRect@x,c
  3473  0002EE  0E00               	movlw	0
  3474  0002F0  6E24               	movwf	drawRect@y+1,c
  3475  0002F2  0E75               	movlw	117
  3476  0002F4  6E23               	movwf	drawRect@y,c
  3477  0002F6  0E00               	movlw	0
  3478  0002F8  6E26               	movwf	drawRect@w+1,c
  3479  0002FA  0E3C               	movlw	60
  3480  0002FC  6E25               	movwf	drawRect@w,c
  3481  0002FE  0E00               	movlw	0
  3482  000300  6E28               	movwf	drawRect@h+1,c
  3483  000302  0E12               	movlw	18
  3484  000304  6E27               	movwf	drawRect@h,c
  3485  000306  0EFF               	movlw	255
  3486  000308  6E2A               	movwf	drawRect@color+1,c
  3487  00030A  6829               	setf	drawRect@color,c
  3488  00030C  EC0E  F011         	call	_drawRect	;wreg free
  3489                           
  3490                           ;Lab8.c: 219: fillCircle(40, 110 + 15, 7, 0xF800);
  3491  000310  0E00               	movlw	0
  3492  000312  6E3A               	movwf	fillCircle@x0+1,c
  3493  000314  0E28               	movlw	40
  3494  000316  6E39               	movwf	fillCircle@x0,c
  3495  000318  0E00               	movlw	0
  3496  00031A  6E3C               	movwf	fillCircle@y0+1,c
  3497  00031C  0E7D               	movlw	125
  3498  00031E  6E3B               	movwf	fillCircle@y0,c
  3499  000320  0E00               	movlw	0
  3500  000322  6E3E               	movwf	fillCircle@r+1,c
  3501  000324  0E07               	movlw	7
  3502  000326  6E3D               	movwf	fillCircle@r,c
  3503  000328  0EF8               	movlw	248
  3504  00032A  6E40               	movwf	fillCircle@color+1,c
  3505  00032C  0E00               	movlw	0
  3506  00032E  6E3F               	movwf	fillCircle@color,c
  3507  000330  ECF4  F011         	call	_fillCircle	;wreg free
  3508                           
  3509                           ;Lab8.c: 220: drawCircle(60, 110 + 15, 7, 0xFFE0);
  3510  000334  0E00               	movlw	0
  3511  000336  6E1B               	movwf	drawCircle@x0+1,c
  3512  000338  0E3C               	movlw	60
  3513  00033A  6E1A               	movwf	drawCircle@x0,c
  3514  00033C  0E00               	movlw	0
  3515  00033E  6E1D               	movwf	drawCircle@y0+1,c
  3516  000340  0E7D               	movlw	125
  3517  000342  6E1C               	movwf	drawCircle@y0,c
  3518  000344  0E00               	movlw	0
  3519  000346  6E1F               	movwf	drawCircle@r+1,c
  3520  000348  0E07               	movlw	7
  3521  00034A  6E1E               	movwf	drawCircle@r,c
  3522  00034C  0EFF               	movlw	255
  3523  00034E  6E21               	movwf	drawCircle@color+1,c
  3524  000350  0EE0               	movlw	224
  3525  000352  6E20               	movwf	drawCircle@color,c
  3526  000354  EC63  F006         	call	_drawCircle	;wreg free
  3527                           
  3528                           ;Lab8.c: 221: drawCircle(80, 110 + 15, 7, 0x07E0);
  3529  000358  0E00               	movlw	0
  3530  00035A  6E1B               	movwf	drawCircle@x0+1,c
  3531  00035C  0E50               	movlw	80
  3532  00035E  6E1A               	movwf	drawCircle@x0,c
  3533  000360  0E00               	movlw	0
  3534  000362  6E1D               	movwf	drawCircle@y0+1,c
  3535  000364  0E7D               	movlw	125
  3536  000366  6E1C               	movwf	drawCircle@y0,c
  3537  000368  0E00               	movlw	0
  3538  00036A  6E1F               	movwf	drawCircle@r+1,c
  3539  00036C  0E07               	movlw	7
  3540  00036E  6E1E               	movwf	drawCircle@r,c
  3541  000370  0E07               	movlw	7
  3542  000372  6E21               	movwf	drawCircle@color+1,c
  3543  000374  0EE0               	movlw	224
  3544  000376  6E20               	movwf	drawCircle@color,c
  3545  000378  EC63  F006         	call	_drawCircle	;wreg free
  3546                           
  3547                           ;Lab8.c: 222: drawtext (100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  3548  00037C  0E78               	movlw	120
  3549  00037E  6E37               	movwf	drawtext@y,c
  3550  000380  0EA1               	movlw	low _EWLT_Count
  3551  000382  6E38               	movwf	drawtext@_text,c
  3552  000384  0E00               	movlw	high _EWLT_Count
  3553  000386  6E39               	movwf	drawtext@_text+1,c
  3554  000388  0EFF               	movlw	255
  3555  00038A  6E3B               	movwf	drawtext@color+1,c
  3556  00038C  683A               	setf	drawtext@color,c
  3557  00038E  0E00               	movlw	0
  3558  000390  6E3D               	movwf	drawtext@bg+1,c
  3559  000392  0E00               	movlw	0
  3560  000394  6E3C               	movwf	drawtext@bg,c
  3561  000396  0E02               	movlw	2
  3562  000398  6E3E               	movwf	drawtext@size,c
  3563  00039A  0E64               	movlw	100
  3564  00039C  EC10  F00B         	call	_drawtext
  3565                           
  3566                           ;Lab8.c: 225: strcpy(txt, "NORTH/SOUTH");
  3567  0003A0  C04C  F00F         	movff	_txt,strcpy@to
  3568  0003A4  C04D  F010         	movff	_txt+1,strcpy@to+1
  3569  0003A8  0EC0               	movlw	low STR_8
  3570  0003AA  6E11               	movwf	strcpy@from,c
  3571  0003AC  0EFF               	movlw	high STR_8
  3572  0003AE  6E12               	movwf	strcpy@from+1,c
  3573  0003B0  EC9D  F013         	call	_strcpy	;wreg free
  3574                           
  3575                           ;Lab8.c: 226: drawtext (30, 20 , txt, 0x001F, 0x0000, 1);
  3576  0003B4  0E14               	movlw	20
  3577  0003B6  6E37               	movwf	drawtext@y,c
  3578  0003B8  C04C  F038         	movff	_txt,drawtext@_text
  3579  0003BC  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3580  0003C0  0E00               	movlw	0
  3581  0003C2  6E3B               	movwf	drawtext@color+1,c
  3582  0003C4  0E1F               	movlw	31
  3583  0003C6  6E3A               	movwf	drawtext@color,c
  3584  0003C8  0E00               	movlw	0
  3585  0003CA  6E3D               	movwf	drawtext@bg+1,c
  3586  0003CC  0E00               	movlw	0
  3587  0003CE  6E3C               	movwf	drawtext@bg,c
  3588  0003D0  0E01               	movlw	1
  3589  0003D2  6E3E               	movwf	drawtext@size,c
  3590  0003D4  0E1E               	movlw	30
  3591  0003D6  EC10  F00B         	call	_drawtext
  3592                           
  3593                           ;Lab8.c: 227: drawRect (30, 20 + 15-8, 60, 18, 0x001F);
  3594  0003DA  0E00               	movlw	0
  3595  0003DC  6E22               	movwf	drawRect@x+1,c
  3596  0003DE  0E1E               	movlw	30
  3597  0003E0  6E21               	movwf	drawRect@x,c
  3598  0003E2  0E00               	movlw	0
  3599  0003E4  6E24               	movwf	drawRect@y+1,c
  3600  0003E6  0E1B               	movlw	27
  3601  0003E8  6E23               	movwf	drawRect@y,c
  3602  0003EA  0E00               	movlw	0
  3603  0003EC  6E26               	movwf	drawRect@w+1,c
  3604  0003EE  0E3C               	movlw	60
  3605  0003F0  6E25               	movwf	drawRect@w,c
  3606  0003F2  0E00               	movlw	0
  3607  0003F4  6E28               	movwf	drawRect@h+1,c
  3608  0003F6  0E12               	movlw	18
  3609  0003F8  6E27               	movwf	drawRect@h,c
  3610  0003FA  0E00               	movlw	0
  3611  0003FC  6E2A               	movwf	drawRect@color+1,c
  3612  0003FE  0E1F               	movlw	31
  3613  000400  6E29               	movwf	drawRect@color,c
  3614  000402  EC0E  F011         	call	_drawRect	;wreg free
  3615                           
  3616                           ;Lab8.c: 228: drawCircle(40, 20 + 15 , 7, 0xF800);
  3617  000406  0E00               	movlw	0
  3618  000408  6E1B               	movwf	drawCircle@x0+1,c
  3619  00040A  0E28               	movlw	40
  3620  00040C  6E1A               	movwf	drawCircle@x0,c
  3621  00040E  0E00               	movlw	0
  3622  000410  6E1D               	movwf	drawCircle@y0+1,c
  3623  000412  0E23               	movlw	35
  3624  000414  6E1C               	movwf	drawCircle@y0,c
  3625  000416  0E00               	movlw	0
  3626  000418  6E1F               	movwf	drawCircle@r+1,c
  3627  00041A  0E07               	movlw	7
  3628  00041C  6E1E               	movwf	drawCircle@r,c
  3629  00041E  0EF8               	movlw	248
  3630  000420  6E21               	movwf	drawCircle@color+1,c
  3631  000422  0E00               	movlw	0
  3632  000424  6E20               	movwf	drawCircle@color,c
  3633  000426  EC63  F006         	call	_drawCircle	;wreg free
  3634                           
  3635                           ;Lab8.c: 229: drawCircle(60, 20 + 15 , 7, 0xFFE0);
  3636  00042A  0E00               	movlw	0
  3637  00042C  6E1B               	movwf	drawCircle@x0+1,c
  3638  00042E  0E3C               	movlw	60
  3639  000430  6E1A               	movwf	drawCircle@x0,c
  3640  000432  0E00               	movlw	0
  3641  000434  6E1D               	movwf	drawCircle@y0+1,c
  3642  000436  0E23               	movlw	35
  3643  000438  6E1C               	movwf	drawCircle@y0,c
  3644  00043A  0E00               	movlw	0
  3645  00043C  6E1F               	movwf	drawCircle@r+1,c
  3646  00043E  0E07               	movlw	7
  3647  000440  6E1E               	movwf	drawCircle@r,c
  3648  000442  0EFF               	movlw	255
  3649  000444  6E21               	movwf	drawCircle@color+1,c
  3650  000446  0EE0               	movlw	224
  3651  000448  6E20               	movwf	drawCircle@color,c
  3652  00044A  EC63  F006         	call	_drawCircle	;wreg free
  3653                           
  3654                           ;Lab8.c: 230: fillCircle(80, 20 + 15 , 7, 0x07E0);
  3655  00044E  0E00               	movlw	0
  3656  000450  6E3A               	movwf	fillCircle@x0+1,c
  3657  000452  0E50               	movlw	80
  3658  000454  6E39               	movwf	fillCircle@x0,c
  3659  000456  0E00               	movlw	0
  3660  000458  6E3C               	movwf	fillCircle@y0+1,c
  3661  00045A  0E23               	movlw	35
  3662  00045C  6E3B               	movwf	fillCircle@y0,c
  3663  00045E  0E00               	movlw	0
  3664  000460  6E3E               	movwf	fillCircle@r+1,c
  3665  000462  0E07               	movlw	7
  3666  000464  6E3D               	movwf	fillCircle@r,c
  3667  000466  0E07               	movlw	7
  3668  000468  6E40               	movwf	fillCircle@color+1,c
  3669  00046A  0EE0               	movlw	224
  3670  00046C  6E3F               	movwf	fillCircle@color,c
  3671  00046E  ECF4  F011         	call	_fillCircle	;wreg free
  3672                           
  3673                           ;Lab8.c: 231: drawtext (100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  3674  000472  0E1E               	movlw	30
  3675  000474  6E37               	movwf	drawtext@y,c
  3676  000476  0EA7               	movlw	low _NS_Count
  3677  000478  6E38               	movwf	drawtext@_text,c
  3678  00047A  0E00               	movlw	high _NS_Count
  3679  00047C  6E39               	movwf	drawtext@_text+1,c
  3680  00047E  0E00               	movlw	0
  3681  000480  6E3B               	movwf	drawtext@color+1,c
  3682  000482  0E1F               	movlw	31
  3683  000484  6E3A               	movwf	drawtext@color,c
  3684  000486  0E00               	movlw	0
  3685  000488  6E3D               	movwf	drawtext@bg+1,c
  3686  00048A  0E00               	movlw	0
  3687  00048C  6E3C               	movwf	drawtext@bg,c
  3688  00048E  0E02               	movlw	2
  3689  000490  6E3E               	movwf	drawtext@size,c
  3690  000492  0E64               	movlw	100
  3691  000494  EC10  F00B         	call	_drawtext
  3692                           
  3693                           ;Lab8.c: 234: strcpy(txt, "N/S LT");
  3694  000498  C04C  F00F         	movff	_txt,strcpy@to
  3695  00049C  C04D  F010         	movff	_txt+1,strcpy@to+1
  3696  0004A0  0ED6               	movlw	low STR_9
  3697  0004A2  6E11               	movwf	strcpy@from,c
  3698  0004A4  0EFF               	movlw	high STR_9
  3699  0004A6  6E12               	movwf	strcpy@from+1,c
  3700  0004A8  EC9D  F013         	call	_strcpy	;wreg free
  3701                           
  3702                           ;Lab8.c: 235: drawtext (30, 50, txt, 0xF81F, 0x0000, 1);
  3703  0004AC  0E32               	movlw	50
  3704  0004AE  6E37               	movwf	drawtext@y,c
  3705  0004B0  C04C  F038         	movff	_txt,drawtext@_text
  3706  0004B4  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3707  0004B8  0EF8               	movlw	248
  3708  0004BA  6E3B               	movwf	drawtext@color+1,c
  3709  0004BC  0E1F               	movlw	31
  3710  0004BE  6E3A               	movwf	drawtext@color,c
  3711  0004C0  0E00               	movlw	0
  3712  0004C2  6E3D               	movwf	drawtext@bg+1,c
  3713  0004C4  0E00               	movlw	0
  3714  0004C6  6E3C               	movwf	drawtext@bg,c
  3715  0004C8  0E01               	movlw	1
  3716  0004CA  6E3E               	movwf	drawtext@size,c
  3717  0004CC  0E1E               	movlw	30
  3718  0004CE  EC10  F00B         	call	_drawtext
  3719                           
  3720                           ;Lab8.c: 236: drawRect (30, 50 + 15-8, 60, 18, 0xF81F);
  3721  0004D2  0E00               	movlw	0
  3722  0004D4  6E22               	movwf	drawRect@x+1,c
  3723  0004D6  0E1E               	movlw	30
  3724  0004D8  6E21               	movwf	drawRect@x,c
  3725  0004DA  0E00               	movlw	0
  3726  0004DC  6E24               	movwf	drawRect@y+1,c
  3727  0004DE  0E39               	movlw	57
  3728  0004E0  6E23               	movwf	drawRect@y,c
  3729  0004E2  0E00               	movlw	0
  3730  0004E4  6E26               	movwf	drawRect@w+1,c
  3731  0004E6  0E3C               	movlw	60
  3732  0004E8  6E25               	movwf	drawRect@w,c
  3733  0004EA  0E00               	movlw	0
  3734  0004EC  6E28               	movwf	drawRect@h+1,c
  3735  0004EE  0E12               	movlw	18
  3736  0004F0  6E27               	movwf	drawRect@h,c
  3737  0004F2  0EF8               	movlw	248
  3738  0004F4  6E2A               	movwf	drawRect@color+1,c
  3739  0004F6  0E1F               	movlw	31
  3740  0004F8  6E29               	movwf	drawRect@color,c
  3741  0004FA  EC0E  F011         	call	_drawRect	;wreg free
  3742                           
  3743                           ;Lab8.c: 237: fillCircle(40, 50 + 15, 7, 0xF800);
  3744  0004FE  0E00               	movlw	0
  3745  000500  6E3A               	movwf	fillCircle@x0+1,c
  3746  000502  0E28               	movlw	40
  3747  000504  6E39               	movwf	fillCircle@x0,c
  3748  000506  0E00               	movlw	0
  3749  000508  6E3C               	movwf	fillCircle@y0+1,c
  3750  00050A  0E41               	movlw	65
  3751  00050C  6E3B               	movwf	fillCircle@y0,c
  3752  00050E  0E00               	movlw	0
  3753  000510  6E3E               	movwf	fillCircle@r+1,c
  3754  000512  0E07               	movlw	7
  3755  000514  6E3D               	movwf	fillCircle@r,c
  3756  000516  0EF8               	movlw	248
  3757  000518  6E40               	movwf	fillCircle@color+1,c
  3758  00051A  0E00               	movlw	0
  3759  00051C  6E3F               	movwf	fillCircle@color,c
  3760  00051E  ECF4  F011         	call	_fillCircle	;wreg free
  3761                           
  3762                           ;Lab8.c: 238: drawCircle(60, 50 + 15, 7, 0xFFE0);
  3763  000522  0E00               	movlw	0
  3764  000524  6E1B               	movwf	drawCircle@x0+1,c
  3765  000526  0E3C               	movlw	60
  3766  000528  6E1A               	movwf	drawCircle@x0,c
  3767  00052A  0E00               	movlw	0
  3768  00052C  6E1D               	movwf	drawCircle@y0+1,c
  3769  00052E  0E41               	movlw	65
  3770  000530  6E1C               	movwf	drawCircle@y0,c
  3771  000532  0E00               	movlw	0
  3772  000534  6E1F               	movwf	drawCircle@r+1,c
  3773  000536  0E07               	movlw	7
  3774  000538  6E1E               	movwf	drawCircle@r,c
  3775  00053A  0EFF               	movlw	255
  3776  00053C  6E21               	movwf	drawCircle@color+1,c
  3777  00053E  0EE0               	movlw	224
  3778  000540  6E20               	movwf	drawCircle@color,c
  3779  000542  EC63  F006         	call	_drawCircle	;wreg free
  3780                           
  3781                           ;Lab8.c: 239: drawCircle(80, 50 + 15, 7, 0x07E0);
  3782  000546  0E00               	movlw	0
  3783  000548  6E1B               	movwf	drawCircle@x0+1,c
  3784  00054A  0E50               	movlw	80
  3785  00054C  6E1A               	movwf	drawCircle@x0,c
  3786  00054E  0E00               	movlw	0
  3787  000550  6E1D               	movwf	drawCircle@y0+1,c
  3788  000552  0E41               	movlw	65
  3789  000554  6E1C               	movwf	drawCircle@y0,c
  3790  000556  0E00               	movlw	0
  3791  000558  6E1F               	movwf	drawCircle@r+1,c
  3792  00055A  0E07               	movlw	7
  3793  00055C  6E1E               	movwf	drawCircle@r,c
  3794  00055E  0E07               	movlw	7
  3795  000560  6E21               	movwf	drawCircle@color+1,c
  3796  000562  0EE0               	movlw	224
  3797  000564  6E20               	movwf	drawCircle@color,c
  3798  000566  EC63  F006         	call	_drawCircle	;wreg free
  3799                           
  3800                           ;Lab8.c: 240: drawtext (100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  3801  00056A  0E3C               	movlw	60
  3802  00056C  6E37               	movwf	drawtext@y,c
  3803  00056E  0EA4               	movlw	low _NSLT_Count
  3804  000570  6E38               	movwf	drawtext@_text,c
  3805  000572  0E00               	movlw	high _NSLT_Count
  3806  000574  6E39               	movwf	drawtext@_text+1,c
  3807  000576  0EF8               	movlw	248
  3808  000578  6E3B               	movwf	drawtext@color+1,c
  3809  00057A  0E1F               	movlw	31
  3810  00057C  6E3A               	movwf	drawtext@color,c
  3811  00057E  0E00               	movlw	0
  3812  000580  6E3D               	movwf	drawtext@bg+1,c
  3813  000582  0E00               	movlw	0
  3814  000584  6E3C               	movwf	drawtext@bg,c
  3815  000586  0E02               	movlw	2
  3816  000588  6E3E               	movwf	drawtext@size,c
  3817  00058A  0E64               	movlw	100
  3818  00058C  EC10  F00B         	call	_drawtext
  3819                           
  3820                           ;Lab8.c: 244: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  3821  000590  0E5A               	movlw	90
  3822  000592  6E37               	movwf	drawtext@y,c
  3823  000594  0EAA               	movlw	low _PED_EW_Count
  3824  000596  6E38               	movwf	drawtext@_text,c
  3825  000598  0E00               	movlw	high _PED_EW_Count
  3826  00059A  6E39               	movwf	drawtext@_text+1,c
  3827  00059C  0E07               	movlw	7
  3828  00059E  6E3B               	movwf	drawtext@color+1,c
  3829  0005A0  683A               	setf	drawtext@color,c
  3830  0005A2  0E00               	movlw	0
  3831  0005A4  6E3D               	movwf	drawtext@bg+1,c
  3832  0005A6  0E00               	movlw	0
  3833  0005A8  6E3C               	movwf	drawtext@bg,c
  3834  0005AA  0E02               	movlw	2
  3835  0005AC  6E3E               	movwf	drawtext@size,c
  3836  0005AE  0E02               	movlw	2
  3837  0005B0  EC10  F00B         	call	_drawtext
  3838                           
  3839                           ;Lab8.c: 245: strcpy(txt, "PEW");
  3840  0005B4  C04C  F00F         	movff	_txt,strcpy@to
  3841  0005B8  C04D  F010         	movff	_txt+1,strcpy@to+1
  3842  0005BC  0EF6               	movlw	low STR_10
  3843  0005BE  6E11               	movwf	strcpy@from,c
  3844  0005C0  0EFF               	movlw	high STR_10
  3845  0005C2  6E12               	movwf	strcpy@from+1,c
  3846  0005C4  EC9D  F013         	call	_strcpy	;wreg free
  3847                           
  3848                           ;Lab8.c: 246: drawtext(3, 80, txt, 0x07FF, 0x0000, 1);
  3849  0005C8  0E50               	movlw	80
  3850  0005CA  6E37               	movwf	drawtext@y,c
  3851  0005CC  C04C  F038         	movff	_txt,drawtext@_text
  3852  0005D0  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3853  0005D4  0E07               	movlw	7
  3854  0005D6  6E3B               	movwf	drawtext@color+1,c
  3855  0005D8  683A               	setf	drawtext@color,c
  3856  0005DA  0E00               	movlw	0
  3857  0005DC  6E3D               	movwf	drawtext@bg+1,c
  3858  0005DE  0E00               	movlw	0
  3859  0005E0  6E3C               	movwf	drawtext@bg,c
  3860  0005E2  0E01               	movlw	1
  3861  0005E4  6E3E               	movwf	drawtext@size,c
  3862  0005E6  0E03               	movlw	3
  3863  0005E8  EC10  F00B         	call	_drawtext
  3864                           
  3865                           ;Lab8.c: 249: strcpy(txt, "PNS");
  3866  0005EC  C04C  F00F         	movff	_txt,strcpy@to
  3867  0005F0  C04D  F010         	movff	_txt+1,strcpy@to+1
  3868  0005F4  0EF2               	movlw	low STR_11
  3869  0005F6  6E11               	movwf	strcpy@from,c
  3870  0005F8  0EFF               	movlw	high STR_11
  3871  0005FA  6E12               	movwf	strcpy@from+1,c
  3872  0005FC  EC9D  F013         	call	_strcpy	;wreg free
  3873                           
  3874                           ;Lab8.c: 250: drawtext(3, 20, txt, 0x001F, 0x0000, 1);
  3875  000600  0E14               	movlw	20
  3876  000602  6E37               	movwf	drawtext@y,c
  3877  000604  C04C  F038         	movff	_txt,drawtext@_text
  3878  000608  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3879  00060C  0E00               	movlw	0
  3880  00060E  6E3B               	movwf	drawtext@color+1,c
  3881  000610  0E1F               	movlw	31
  3882  000612  6E3A               	movwf	drawtext@color,c
  3883  000614  0E00               	movlw	0
  3884  000616  6E3D               	movwf	drawtext@bg+1,c
  3885  000618  0E00               	movlw	0
  3886  00061A  6E3C               	movwf	drawtext@bg,c
  3887  00061C  0E01               	movlw	1
  3888  00061E  6E3E               	movwf	drawtext@size,c
  3889  000620  0E03               	movlw	3
  3890  000622  EC10  F00B         	call	_drawtext
  3891                           
  3892                           ;Lab8.c: 251: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  3893  000626  0E1E               	movlw	30
  3894  000628  6E37               	movwf	drawtext@y,c
  3895  00062A  0EAD               	movlw	low _PED_NS_Count
  3896  00062C  6E38               	movwf	drawtext@_text,c
  3897  00062E  0E00               	movlw	high _PED_NS_Count
  3898  000630  6E39               	movwf	drawtext@_text+1,c
  3899  000632  0E00               	movlw	0
  3900  000634  6E3B               	movwf	drawtext@color+1,c
  3901  000636  0E1F               	movlw	31
  3902  000638  6E3A               	movwf	drawtext@color,c
  3903  00063A  0E00               	movlw	0
  3904  00063C  6E3D               	movwf	drawtext@bg+1,c
  3905  00063E  0E00               	movlw	0
  3906  000640  6E3C               	movwf	drawtext@bg,c
  3907  000642  0E02               	movlw	2
  3908  000644  6E3E               	movwf	drawtext@size,c
  3909  000646  0E02               	movlw	2
  3910  000648  EC10  F00B         	call	_drawtext
  3911                           
  3912                           ;Lab8.c: 254: strcpy(txt, "EWP EWLT NSP NSLT MD");
  3913  00064C  C04C  F00F         	movff	_txt,strcpy@to
  3914  000650  C04D  F010         	movff	_txt+1,strcpy@to+1
  3915  000654  0E97               	movlw	low STR_12
  3916  000656  6E11               	movwf	strcpy@from,c
  3917  000658  0EFF               	movlw	high STR_12
  3918  00065A  6E12               	movwf	strcpy@from+1,c
  3919  00065C  EC9D  F013         	call	_strcpy	;wreg free
  3920                           
  3921                           ;Lab8.c: 255: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3922  000660  0E8C               	movlw	140
  3923  000662  6E37               	movwf	drawtext@y,c
  3924  000664  C04C  F038         	movff	_txt,drawtext@_text
  3925  000668  C04D  F039         	movff	_txt+1,drawtext@_text+1
  3926  00066C  0EFF               	movlw	255
  3927  00066E  6E3B               	movwf	drawtext@color+1,c
  3928  000670  683A               	setf	drawtext@color,c
  3929  000672  0E00               	movlw	0
  3930  000674  6E3D               	movwf	drawtext@bg+1,c
  3931  000676  0E00               	movlw	0
  3932  000678  6E3C               	movwf	drawtext@bg,c
  3933  00067A  0E01               	movlw	1
  3934  00067C  6E3E               	movwf	drawtext@size,c
  3935  00067E  0E01               	movlw	1
  3936  000680  EC10  F00B         	call	_drawtext
  3937                           
  3938                           ;Lab8.c: 256: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3939  000684  0E95               	movlw	149
  3940  000686  6E37               	movwf	drawtext@y,c
  3941  000688  0E6A               	movlw	low _SW_EWPED_Txt
  3942  00068A  6E38               	movwf	drawtext@_text,c
  3943  00068C  0E00               	movlw	high _SW_EWPED_Txt
  3944  00068E  6E39               	movwf	drawtext@_text+1,c
  3945  000690  0EFF               	movlw	255
  3946  000692  6E3B               	movwf	drawtext@color+1,c
  3947  000694  683A               	setf	drawtext@color,c
  3948  000696  0E00               	movlw	0
  3949  000698  6E3D               	movwf	drawtext@bg+1,c
  3950  00069A  0E00               	movlw	0
  3951  00069C  6E3C               	movwf	drawtext@bg,c
  3952  00069E  0E01               	movlw	1
  3953  0006A0  6E3E               	movwf	drawtext@size,c
  3954  0006A2  0E06               	movlw	6
  3955  0006A4  EC10  F00B         	call	_drawtext
  3956                           
  3957                           ;Lab8.c: 257: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3958  0006A8  0E95               	movlw	149
  3959  0006AA  6E37               	movwf	drawtext@y,c
  3960  0006AC  0E68               	movlw	low _SW_EWLT_Txt
  3961  0006AE  6E38               	movwf	drawtext@_text,c
  3962  0006B0  0E00               	movlw	high _SW_EWLT_Txt
  3963  0006B2  6E39               	movwf	drawtext@_text+1,c
  3964  0006B4  0EFF               	movlw	255
  3965  0006B6  6E3B               	movwf	drawtext@color+1,c
  3966  0006B8  683A               	setf	drawtext@color,c
  3967  0006BA  0E00               	movlw	0
  3968  0006BC  6E3D               	movwf	drawtext@bg+1,c
  3969  0006BE  0E00               	movlw	0
  3970  0006C0  6E3C               	movwf	drawtext@bg,c
  3971  0006C2  0E01               	movlw	1
  3972  0006C4  6E3E               	movwf	drawtext@size,c
  3973  0006C6  0E20               	movlw	32
  3974  0006C8  EC10  F00B         	call	_drawtext
  3975                           
  3976                           ;Lab8.c: 258: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3977  0006CC  0E95               	movlw	149
  3978  0006CE  6E37               	movwf	drawtext@y,c
  3979  0006D0  0E70               	movlw	low _SW_NSPED_Txt
  3980  0006D2  6E38               	movwf	drawtext@_text,c
  3981  0006D4  0E00               	movlw	high _SW_NSPED_Txt
  3982  0006D6  6E39               	movwf	drawtext@_text+1,c
  3983  0006D8  0EFF               	movlw	255
  3984  0006DA  6E3B               	movwf	drawtext@color+1,c
  3985  0006DC  683A               	setf	drawtext@color,c
  3986  0006DE  0E00               	movlw	0
  3987  0006E0  6E3D               	movwf	drawtext@bg+1,c
  3988  0006E2  0E00               	movlw	0
  3989  0006E4  6E3C               	movwf	drawtext@bg,c
  3990  0006E6  0E01               	movlw	1
  3991  0006E8  6E3E               	movwf	drawtext@size,c
  3992  0006EA  0E3A               	movlw	58
  3993  0006EC  EC10  F00B         	call	_drawtext
  3994                           
  3995                           ;Lab8.c: 259: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3996  0006F0  0E95               	movlw	149
  3997  0006F2  6E37               	movwf	drawtext@y,c
  3998  0006F4  0E6E               	movlw	low _SW_NSLT_Txt
  3999  0006F6  6E38               	movwf	drawtext@_text,c
  4000  0006F8  0E00               	movlw	high _SW_NSLT_Txt
  4001  0006FA  6E39               	movwf	drawtext@_text+1,c
  4002  0006FC  0EFF               	movlw	255
  4003  0006FE  6E3B               	movwf	drawtext@color+1,c
  4004  000700  683A               	setf	drawtext@color,c
  4005  000702  0E00               	movlw	0
  4006  000704  6E3D               	movwf	drawtext@bg+1,c
  4007  000706  0E00               	movlw	0
  4008  000708  6E3C               	movwf	drawtext@bg,c
  4009  00070A  0E01               	movlw	1
  4010  00070C  6E3E               	movwf	drawtext@size,c
  4011  00070E  0E57               	movlw	87
  4012  000710  EC10  F00B         	call	_drawtext
  4013                           
  4014                           ;Lab8.c: 261: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  4015  000714  0E95               	movlw	149
  4016  000716  6E37               	movwf	drawtext@y,c
  4017  000718  0E6C               	movlw	low _SW_MODE_Txt
  4018  00071A  6E38               	movwf	drawtext@_text,c
  4019  00071C  0E00               	movlw	high _SW_MODE_Txt
  4020  00071E  6E39               	movwf	drawtext@_text+1,c
  4021  000720  0EFF               	movlw	255
  4022  000722  6E3B               	movwf	drawtext@color+1,c
  4023  000724  683A               	setf	drawtext@color,c
  4024  000726  0E00               	movlw	0
  4025  000728  6E3D               	movwf	drawtext@bg+1,c
  4026  00072A  0E00               	movlw	0
  4027  00072C  6E3C               	movwf	drawtext@bg,c
  4028  00072E  0E01               	movlw	1
  4029  000730  6E3E               	movwf	drawtext@size,c
  4030  000732  0E70               	movlw	112
  4031  000734  EC10  F00B         	call	_drawtext
  4032  000738  0012               	return		;funcret
  4033  00073A                     __end_of_Initialize_Screen:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon	equ	0xFF2
  4042                           intcon2	equ	0xFF1
  4043                           intcon3	equ	0xFF0
  4044                           postinc0	equ	0xFEE
  4045                           wreg	equ	0xFE8
  4046                           postdec1	equ	0xFE5
  4047                           fsr1l	equ	0xFE1
  4048                           postinc2	equ	0xFDE
  4049                           postdec2	equ	0xFDD
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function _fillScreen *****************
  4055 ;; Defined at:
  4056 ;;		line 651 in file "ST7735_TFT.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  color           2   33[COMRAM] unsigned int 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;		None               void
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4070 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;Total ram usage:        2 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    6
  4077 ;; This function calls:
  4078 ;;		_fillRectangle
  4079 ;; This function is called by:
  4080 ;;		_Initialize_Screen
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text10
  4085  002814                     __ptext10:
  4086                           	opt stack 0
  4087  002814                     _fillScreen:
  4088                           	opt stack 23
  4089                           
  4090                           ;ST7735_TFT.c: 653: fillRectangle(0, 0, 128, 160, color);
  4091                           
  4092                           ;incstack = 0
  4093  002814  0E00               	movlw	0
  4094  002816  6E16               	movwf	fillRectangle@y,c
  4095  002818  0E80               	movlw	128
  4096  00281A  6E17               	movwf	fillRectangle@w,c
  4097  00281C  0EA0               	movlw	160
  4098  00281E  6E18               	movwf	fillRectangle@h,c
  4099  002820  C022  F019         	movff	fillScreen@color,fillRectangle@color
  4100  002824  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  4101  002828  0E00               	movlw	0
  4102  00282A  EC7F  F00C         	call	_fillRectangle
  4103  00282E  0012               	return		;funcret
  4104  002830                     __end_of_fillScreen:
  4105                           	opt stack 0
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           intcon	equ	0xFF2
  4113                           intcon2	equ	0xFF1
  4114                           intcon3	equ	0xFF0
  4115                           postinc0	equ	0xFEE
  4116                           wreg	equ	0xFE8
  4117                           postdec1	equ	0xFE5
  4118                           fsr1l	equ	0xFE1
  4119                           postinc2	equ	0xFDE
  4120                           postdec2	equ	0xFDD
  4121                           fsr2h	equ	0xFDA
  4122                           fsr2l	equ	0xFD9
  4123                           status	equ	0xFD8
  4124                           
  4125 ;; *************** function _fillRectangle *****************
  4126 ;; Defined at:
  4127 ;;		line 535 in file "ST7735_TFT.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  x               1    wreg     unsigned char 
  4130 ;;  y               1   21[COMRAM] unsigned char 
  4131 ;;  w               1   22[COMRAM] unsigned char 
  4132 ;;  h               1   23[COMRAM] unsigned char 
  4133 ;;  color           2   24[COMRAM] unsigned int 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  x               1   32[COMRAM] unsigned char 
  4136 ;;  lo              1   31[COMRAM] unsigned char 
  4137 ;;  hi              1   30[COMRAM] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;		None               void
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4147 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;Total ram usage:       12 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    5
  4154 ;; This function calls:
  4155 ;;		_setAddrWindow
  4156 ;;		_spiwrite
  4157 ;; This function is called by:
  4158 ;;		_fillScreen
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text11
  4163  0018FE                     __ptext11:
  4164                           	opt stack 0
  4165  0018FE                     _fillRectangle:
  4166                           	opt stack 23
  4167                           
  4168                           ;incstack = 0
  4169                           ;fillRectangle@x stored from wreg
  4170  0018FE  6E21               	movwf	fillRectangle@x,c
  4171                           
  4172                           ;ST7735_TFT.c: 537: unsigned char hi, lo;
  4173                           ;ST7735_TFT.c: 538: if((x >= 128) || (y >= 160))
  4174  001900  0E80               	movlw	128
  4175  001902  6021               	cpfslt	fillRectangle@x,c
  4176  001904  D069               	goto	l252
  4177  001906  0E9F               	movlw	159
  4178  001908  6416               	cpfsgt	fillRectangle@y,c
  4179  00190A  D001               	goto	l5129
  4180                           
  4181                           ;ST7735_TFT.c: 539: return;
  4182  00190C  D065               	goto	l252
  4183  00190E                     l5129:
  4184                           
  4185                           ;ST7735_TFT.c: 540: if((x + w - 1) >= 128)
  4186  00190E  0EFF               	movlw	255
  4187  001910  6E1B               	movwf	??_fillRectangle& (0+255),c
  4188  001912  0EFF               	movlw	255
  4189  001914  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  4190  001916  5017               	movf	fillRectangle@w,w,c
  4191  001918  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  4192  00191C  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  4193  00191E  261D               	addwf	??_fillRectangle+2,f,c
  4194  001920  0E00               	movlw	0
  4195  001922  221E               	addwfc	??_fillRectangle+3,f,c
  4196  001924  501B               	movf	??_fillRectangle,w,c
  4197  001926  261D               	addwf	??_fillRectangle+2,f,c
  4198  001928  501C               	movf	??_fillRectangle+1,w,c
  4199  00192A  221E               	addwfc	??_fillRectangle+3,f,c
  4200  00192C  BE1E               	btfsc	??_fillRectangle+3,7,c
  4201  00192E  D00A               	goto	l253
  4202  001930  501E               	movf	??_fillRectangle+3,w,c
  4203  001932  E104               	bnz	u3860
  4204  001934  0E80               	movlw	128
  4205  001936  5C1D               	subwf	??_fillRectangle+2,w,c
  4206  001938  A0D8               	btfss	status,0,c
  4207  00193A  D004               	goto	l253
  4208  00193C                     u3860:
  4209                           
  4210                           ;ST7735_TFT.c: 541: w = 128 - x;
  4211  00193C  5021               	movf	fillRectangle@x,w,c
  4212  00193E  0800               	sublw	0
  4213  001940  0F80               	addlw	128
  4214  001942  6E17               	movwf	fillRectangle@w,c
  4215  001944                     l253:
  4216                           
  4217                           ;ST7735_TFT.c: 542: if((y + h - 1) >= 160)
  4218  001944  0EFF               	movlw	255
  4219  001946  6E1B               	movwf	??_fillRectangle& (0+255),c
  4220  001948  0EFF               	movlw	255
  4221  00194A  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  4222  00194C  5018               	movf	fillRectangle@h,w,c
  4223  00194E  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  4224  001952  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  4225  001954  261D               	addwf	??_fillRectangle+2,f,c
  4226  001956  0E00               	movlw	0
  4227  001958  221E               	addwfc	??_fillRectangle+3,f,c
  4228  00195A  501B               	movf	??_fillRectangle,w,c
  4229  00195C  261D               	addwf	??_fillRectangle+2,f,c
  4230  00195E  501C               	movf	??_fillRectangle+1,w,c
  4231  001960  221E               	addwfc	??_fillRectangle+3,f,c
  4232  001962  BE1E               	btfsc	??_fillRectangle+3,7,c
  4233  001964  D00B               	goto	l5135
  4234  001966  501E               	movf	??_fillRectangle+3,w,c
  4235  001968  E104               	bnz	u3870
  4236  00196A  0EA0               	movlw	160
  4237  00196C  5C1D               	subwf	??_fillRectangle+2,w,c
  4238  00196E  A0D8               	btfss	status,0,c
  4239  001970  D005               	goto	l5135
  4240  001972                     u3870:
  4241                           
  4242                           ;ST7735_TFT.c: 543: h = 160 - y;
  4243  001972  5016               	movf	fillRectangle@y,w,c
  4244  001974  0800               	sublw	0
  4245  001976  0FA0               	addlw	160
  4246  001978  6E18               	movwf	fillRectangle@h,c
  4247  00197A  D000               	goto	l5135
  4248  00197C                     l5135:
  4249                           
  4250                           ;ST7735_TFT.c: 544: setAddrWindow(x, y, x+w-1, y+h-1);
  4251  00197C  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  4252  001980  5021               	movf	fillRectangle@x,w,c
  4253  001982  2417               	addwf	fillRectangle@w,w,c
  4254  001984  6E1B               	movwf	??_fillRectangle& (0+255),c
  4255  001986  041B               	decf	??_fillRectangle,w,c
  4256  001988  6E13               	movwf	setAddrWindow@x1,c
  4257  00198A  5016               	movf	fillRectangle@y,w,c
  4258  00198C  2418               	addwf	fillRectangle@h,w,c
  4259  00198E  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  4260  001990  041C               	decf	??_fillRectangle+1,w,c
  4261  001992  6E14               	movwf	setAddrWindow@y1,c
  4262  001994  5021               	movf	fillRectangle@x,w,c
  4263  001996  EC1D  F012         	call	_setAddrWindow
  4264                           
  4265                           ;ST7735_TFT.c: 545: hi = color >> 8; lo = color;
  4266  00199A  501A               	movf	fillRectangle@color+1,w,c
  4267  00199C  6E1F               	movwf	fillRectangle@hi,c
  4268  00199E  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  4269                           
  4270                           ;ST7735_TFT.c: 546: PORTDbits.RD3 = 1;
  4271  0019A2  8683               	bsf	3971,3,c	;volatile
  4272                           
  4273                           ;ST7735_TFT.c: 547: PORTDbits.RD4 = 0;
  4274  0019A4  9883               	bcf	3971,4,c	;volatile
  4275                           
  4276                           ;ST7735_TFT.c: 549: for(y=h; y>0; y--) {
  4277  0019A6  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  4278  0019AA                     l5147:
  4279  0019AA  5016               	movf	fillRectangle@y,w,c
  4280  0019AC  B4D8               	btfsc	status,2,c
  4281  0019AE  D013               	goto	l256
  4282  0019B0  D001               	goto	l255
  4283  0019B2  D011               	goto	l256
  4284  0019B4                     l255:
  4285                           
  4286                           ;ST7735_TFT.c: 550: for(x = w; x > 0; x--) {
  4287  0019B4  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  4288  0019B8                     l5151:
  4289  0019B8  5021               	movf	fillRectangle@x,w,c
  4290  0019BA  B4D8               	btfsc	status,2,c
  4291  0019BC  D00A               	goto	l5161
  4292  0019BE  D001               	goto	l5155
  4293  0019C0  D008               	goto	l5161
  4294  0019C2                     l5155:
  4295                           
  4296                           ;ST7735_TFT.c: 551: spiwrite(hi);
  4297  0019C2  501F               	movf	fillRectangle@hi,w,c
  4298  0019C4  EC44  F014         	call	_spiwrite
  4299                           
  4300                           ;ST7735_TFT.c: 552: spiwrite(lo);
  4301  0019C8  5020               	movf	fillRectangle@lo,w,c
  4302  0019CA  EC44  F014         	call	_spiwrite
  4303  0019CE  0621               	decf	fillRectangle@x,f,c
  4304  0019D0  D7F3               	goto	l5151
  4305  0019D2                     l5161:
  4306  0019D2  0616               	decf	fillRectangle@y,f,c
  4307  0019D4  D7EA               	goto	l5147
  4308  0019D6                     l256:
  4309                           
  4310                           ;ST7735_TFT.c: 553: }
  4311                           ;ST7735_TFT.c: 554: }
  4312                           ;ST7735_TFT.c: 555: PORTDbits.RD4 = 1;
  4313  0019D6  8883               	bsf	3971,4,c	;volatile
  4314  0019D8                     l252:
  4315  0019D8  0012               	return		;funcret
  4316  0019DA                     __end_of_fillRectangle:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           intcon	equ	0xFF2
  4325                           intcon2	equ	0xFF1
  4326                           intcon3	equ	0xFF0
  4327                           postinc0	equ	0xFEE
  4328                           wreg	equ	0xFE8
  4329                           postdec1	equ	0xFE5
  4330                           fsr1l	equ	0xFE1
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function _drawRect *****************
  4338 ;; Defined at:
  4339 ;;		line 717 in file "ST7735_TFT.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  x               2   32[COMRAM] unsigned int 
  4342 ;;  y               2   34[COMRAM] unsigned int 
  4343 ;;  w               2   36[COMRAM] unsigned int 
  4344 ;;  h               2   38[COMRAM] unsigned int 
  4345 ;;  color           2   40[COMRAM] unsigned int 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;		None
  4348 ;; Return value:  Size  Location     Type
  4349 ;;		None               void
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4357 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;Total ram usage:       11 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    6
  4364 ;; This function calls:
  4365 ;;		_drawFastHLine
  4366 ;;		_drawFastVLine
  4367 ;; This function is called by:
  4368 ;;		_Initialize_Screen
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           	psect	text12
  4373  00221C                     __ptext12:
  4374                           	opt stack 0
  4375  00221C                     _drawRect:
  4376                           	opt stack 23
  4377                           
  4378                           ;ST7735_TFT.c: 719: drawFastHLine(x, y, w, color);
  4379                           
  4380                           ;incstack = 0
  4381  00221C  C023  F016         	movff	drawRect@y,drawFastHLine@y
  4382  002220  C025  F017         	movff	drawRect@w,drawFastHLine@w
  4383  002224  C029  F018         	movff	drawRect@color,drawFastHLine@color
  4384  002228  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  4385  00222C  5021               	movf	drawRect@x,w,c
  4386  00222E  EC55  F00F         	call	_drawFastHLine
  4387                           
  4388                           ;ST7735_TFT.c: 720: drawFastHLine(x, y + h - 1, w, color);
  4389  002232  5023               	movf	drawRect@y,w,c
  4390  002234  2427               	addwf	drawRect@h,w,c
  4391  002236  6E2B               	movwf	??_drawRect& (0+255),c
  4392  002238  042B               	decf	??_drawRect,w,c
  4393  00223A  6E16               	movwf	drawFastHLine@y,c
  4394  00223C  C025  F017         	movff	drawRect@w,drawFastHLine@w
  4395  002240  C029  F018         	movff	drawRect@color,drawFastHLine@color
  4396  002244  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  4397  002248  5021               	movf	drawRect@x,w,c
  4398  00224A  EC55  F00F         	call	_drawFastHLine
  4399                           
  4400                           ;ST7735_TFT.c: 721: drawFastVLine(x, y, h, color);
  4401  00224E  C023  F016         	movff	drawRect@y,drawFastVLine@y
  4402  002252  C027  F017         	movff	drawRect@h,drawFastVLine@h
  4403  002256  C029  F018         	movff	drawRect@color,drawFastVLine@color
  4404  00225A  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  4405  00225E  5021               	movf	drawRect@x,w,c
  4406  002260  EC99  F00F         	call	_drawFastVLine
  4407                           
  4408                           ;ST7735_TFT.c: 722: drawFastVLine(x + w - 1, y, h, color);
  4409  002264  C023  F016         	movff	drawRect@y,drawFastVLine@y
  4410  002268  C027  F017         	movff	drawRect@h,drawFastVLine@h
  4411  00226C  C029  F018         	movff	drawRect@color,drawFastVLine@color
  4412  002270  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  4413  002274  5021               	movf	drawRect@x,w,c
  4414  002276  2425               	addwf	drawRect@w,w,c
  4415  002278  6E2B               	movwf	??_drawRect& (0+255),c
  4416  00227A  042B               	decf	??_drawRect,w,c
  4417  00227C  EC99  F00F         	call	_drawFastVLine
  4418  002280  0012               	return		;funcret
  4419  002282                     __end_of_drawRect:
  4420                           	opt stack 0
  4421                           tblptru	equ	0xFF8
  4422                           tblptrh	equ	0xFF7
  4423                           tblptrl	equ	0xFF6
  4424                           tablat	equ	0xFF5
  4425                           prodh	equ	0xFF4
  4426                           prodl	equ	0xFF3
  4427                           intcon	equ	0xFF2
  4428                           intcon2	equ	0xFF1
  4429                           intcon3	equ	0xFF0
  4430                           postinc0	equ	0xFEE
  4431                           wreg	equ	0xFE8
  4432                           postdec1	equ	0xFE5
  4433                           fsr1l	equ	0xFE1
  4434                           postinc2	equ	0xFDE
  4435                           postdec2	equ	0xFDD
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function _drawFastHLine *****************
  4441 ;; Defined at:
  4442 ;;		line 656 in file "ST7735_TFT.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  x               1    wreg     unsigned char 
  4445 ;;  y               1   21[COMRAM] unsigned char 
  4446 ;;  w               1   22[COMRAM] unsigned char 
  4447 ;;  color           2   23[COMRAM] unsigned int 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  x               1   31[COMRAM] unsigned char 
  4450 ;;  lo              1   30[COMRAM] unsigned char 
  4451 ;;  hi              1   29[COMRAM] unsigned char 
  4452 ;; Return value:  Size  Location     Type
  4453 ;;		None               void
  4454 ;; Registers used:
  4455 ;;		wreg, status,2, status,0, cstack
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4461 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;Total ram usage:       11 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    5
  4468 ;; This function calls:
  4469 ;;		_setAddrWindow
  4470 ;;		_spiwrite
  4471 ;; This function is called by:
  4472 ;;		_drawRect
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text13
  4477  001EAA                     __ptext13:
  4478                           	opt stack 0
  4479  001EAA                     _drawFastHLine:
  4480                           	opt stack 23
  4481                           
  4482                           ;incstack = 0
  4483                           ;drawFastHLine@x stored from wreg
  4484  001EAA  6E20               	movwf	drawFastHLine@x,c
  4485                           
  4486                           ;ST7735_TFT.c: 658: unsigned char hi, lo;
  4487                           ;ST7735_TFT.c: 659: if((x >= 128) || (y >= 160))
  4488  001EAC  0E80               	movlw	128
  4489  001EAE  6020               	cpfslt	drawFastHLine@x,c
  4490  001EB0  D03F               	goto	l297
  4491  001EB2  0E9F               	movlw	159
  4492  001EB4  6416               	cpfsgt	drawFastHLine@y,c
  4493  001EB6  D001               	goto	l5169
  4494                           
  4495                           ;ST7735_TFT.c: 660: return;
  4496  001EB8  D03B               	goto	l297
  4497  001EBA                     l5169:
  4498                           
  4499                           ;ST7735_TFT.c: 661: if((x + w - 1) >= 128)
  4500  001EBA  0EFF               	movlw	255
  4501  001EBC  6E1A               	movwf	??_drawFastHLine& (0+255),c
  4502  001EBE  0EFF               	movlw	255
  4503  001EC0  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  4504  001EC2  5017               	movf	drawFastHLine@w,w,c
  4505  001EC4  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  4506  001EC8  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  4507  001ECA  261C               	addwf	??_drawFastHLine+2,f,c
  4508  001ECC  0E00               	movlw	0
  4509  001ECE  221D               	addwfc	??_drawFastHLine+3,f,c
  4510  001ED0  501A               	movf	??_drawFastHLine,w,c
  4511  001ED2  261C               	addwf	??_drawFastHLine+2,f,c
  4512  001ED4  501B               	movf	??_drawFastHLine+1,w,c
  4513  001ED6  221D               	addwfc	??_drawFastHLine+3,f,c
  4514  001ED8  BE1D               	btfsc	??_drawFastHLine+3,7,c
  4515  001EDA  D00B               	goto	l5173
  4516  001EDC  501D               	movf	??_drawFastHLine+3,w,c
  4517  001EDE  E104               	bnz	u3940
  4518  001EE0  0E80               	movlw	128
  4519  001EE2  5C1C               	subwf	??_drawFastHLine+2,w,c
  4520  001EE4  A0D8               	btfss	status,0,c
  4521  001EE6  D005               	goto	l5173
  4522  001EE8                     u3940:
  4523                           
  4524                           ;ST7735_TFT.c: 662: w = 128 - x;
  4525  001EE8  5020               	movf	drawFastHLine@x,w,c
  4526  001EEA  0800               	sublw	0
  4527  001EEC  0F80               	addlw	128
  4528  001EEE  6E17               	movwf	drawFastHLine@w,c
  4529  001EF0  D000               	goto	l5173
  4530  001EF2                     l5173:
  4531                           
  4532                           ;ST7735_TFT.c: 663: hi = color >> 8; lo = color;
  4533  001EF2  5019               	movf	drawFastHLine@color+1,w,c
  4534  001EF4  6E1E               	movwf	drawFastHLine@hi,c
  4535  001EF6  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  4536                           
  4537                           ;ST7735_TFT.c: 664: setAddrWindow(x, y, x + w - 1, y);
  4538  001EFA  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  4539  001EFE  5020               	movf	drawFastHLine@x,w,c
  4540  001F00  2417               	addwf	drawFastHLine@w,w,c
  4541  001F02  6E1A               	movwf	??_drawFastHLine& (0+255),c
  4542  001F04  041A               	decf	??_drawFastHLine,w,c
  4543  001F06  6E13               	movwf	setAddrWindow@x1,c
  4544  001F08  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  4545  001F0C  5020               	movf	drawFastHLine@x,w,c
  4546  001F0E  EC1D  F012         	call	_setAddrWindow
  4547                           
  4548                           ;ST7735_TFT.c: 665: PORTDbits.RD3 = 1;
  4549  001F12  8683               	bsf	3971,3,c	;volatile
  4550                           
  4551                           ;ST7735_TFT.c: 666: PORTDbits.RD4 = 0;
  4552  001F14  9883               	bcf	3971,4,c	;volatile
  4553                           
  4554                           ;ST7735_TFT.c: 668: while (w--) {
  4555  001F16  D007               	goto	l5185
  4556  001F18                     l5183:
  4557                           
  4558                           ;ST7735_TFT.c: 669: spiwrite(hi);
  4559  001F18  501E               	movf	drawFastHLine@hi,w,c
  4560  001F1A  EC44  F014         	call	_spiwrite
  4561                           
  4562                           ;ST7735_TFT.c: 670: spiwrite(lo);
  4563  001F1E  501F               	movf	drawFastHLine@lo,w,c
  4564  001F20  EC44  F014         	call	_spiwrite
  4565  001F24  D000               	goto	l5185
  4566  001F26                     l5185:
  4567  001F26  0617               	decf	drawFastHLine@w,f,c
  4568  001F28  2817               	incf	drawFastHLine@w,w,c
  4569  001F2A  A4D8               	btfss	status,2,c
  4570  001F2C  D7F5               	goto	l5183
  4571                           
  4572                           ;ST7735_TFT.c: 671: }
  4573                           ;ST7735_TFT.c: 672: PORTDbits.RD4 = 1;
  4574  001F2E  8883               	bsf	3971,4,c	;volatile
  4575  001F30                     l297:
  4576  001F30  0012               	return		;funcret
  4577  001F32                     __end_of_drawFastHLine:
  4578                           	opt stack 0
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           prodh	equ	0xFF4
  4584                           prodl	equ	0xFF3
  4585                           intcon	equ	0xFF2
  4586                           intcon2	equ	0xFF1
  4587                           intcon3	equ	0xFF0
  4588                           postinc0	equ	0xFEE
  4589                           wreg	equ	0xFE8
  4590                           postdec1	equ	0xFE5
  4591                           fsr1l	equ	0xFE1
  4592                           postinc2	equ	0xFDE
  4593                           postdec2	equ	0xFDD
  4594                           fsr2h	equ	0xFDA
  4595                           fsr2l	equ	0xFD9
  4596                           status	equ	0xFD8
  4597                           
  4598 ;; *************** function _TFT_GreenTab_Initialize *****************
  4599 ;; Defined at:
  4600 ;;		line 676 in file "ST7735_TFT.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;		None
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;		None
  4605 ;; Return value:  Size  Location     Type
  4606 ;;		None               void
  4607 ;; Registers used:
  4608 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;Total ram usage:        0 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    5
  4621 ;; This function calls:
  4622 ;;		_Rcmd1
  4623 ;;		_Rcmd2red
  4624 ;;		_Rcmd3
  4625 ;;		_write_command
  4626 ;;		_write_data
  4627 ;; This function is called by:
  4628 ;;		_Initialize_Screen
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text14
  4633  00279C                     __ptext14:
  4634                           	opt stack 0
  4635  00279C                     _TFT_GreenTab_Initialize:
  4636                           	opt stack 24
  4637                           
  4638                           ;ST7735_TFT.c: 678: PORTDbits.RD4 = 1;
  4639                           
  4640                           ;incstack = 0
  4641  00279C  8883               	bsf	3971,4,c	;volatile
  4642                           
  4643                           ;ST7735_TFT.c: 679: PORTDbits.RD3 = 0;
  4644  00279E  9683               	bcf	3971,3,c	;volatile
  4645                           
  4646                           ;ST7735_TFT.c: 681: SSPSTAT=0x80;
  4647  0027A0  0E80               	movlw	128
  4648  0027A2  6EC7               	movwf	4039,c	;volatile
  4649                           
  4650                           ;ST7735_TFT.c: 682: SSPCON1=0x30;
  4651  0027A4  0E30               	movlw	48
  4652  0027A6  6EC6               	movwf	4038,c	;volatile
  4653                           
  4654                           ;ST7735_TFT.c: 685: Rcmd1();
  4655  0027A8  EC88  F00A         	call	_Rcmd1	;wreg free
  4656                           
  4657                           ;ST7735_TFT.c: 686: Rcmd2red();
  4658  0027AC  EC41  F013         	call	_Rcmd2red	;wreg free
  4659                           
  4660                           ;ST7735_TFT.c: 687: Rcmd3();
  4661  0027B0  EC95  F00B         	call	_Rcmd3	;wreg free
  4662                           
  4663                           ;ST7735_TFT.c: 688: write_command(0x36);
  4664  0027B4  0E36               	movlw	54
  4665  0027B6  EC68  F014         	call	_write_command
  4666                           
  4667                           ;ST7735_TFT.c: 689: write_data(0xC0);
  4668  0027BA  0EC0               	movlw	192
  4669  0027BC  EC60  F014         	call	_write_data
  4670                           
  4671                           ;ST7735_TFT.c: 690: _tft_type = 1;
  4672  0027C0  0E01               	movlw	1
  4673  0027C2  6E59               	movwf	__tft_type,c
  4674  0027C4  0012               	return		;funcret
  4675  0027C6                     __end_of_TFT_GreenTab_Initialize:
  4676                           	opt stack 0
  4677                           tblptru	equ	0xFF8
  4678                           tblptrh	equ	0xFF7
  4679                           tblptrl	equ	0xFF6
  4680                           tablat	equ	0xFF5
  4681                           prodh	equ	0xFF4
  4682                           prodl	equ	0xFF3
  4683                           intcon	equ	0xFF2
  4684                           intcon2	equ	0xFF1
  4685                           intcon3	equ	0xFF0
  4686                           postinc0	equ	0xFEE
  4687                           wreg	equ	0xFE8
  4688                           postdec1	equ	0xFE5
  4689                           fsr1l	equ	0xFE1
  4690                           postinc2	equ	0xFDE
  4691                           postdec2	equ	0xFDD
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function _Rcmd3 *****************
  4697 ;; Defined at:
  4698 ;;		line 370 in file "ST7735_TFT.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;		None
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;		None               void
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;Total ram usage:        0 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    4
  4719 ;; This function calls:
  4720 ;;		_delay_ms
  4721 ;;		_write_command
  4722 ;;		_write_data
  4723 ;; This function is called by:
  4724 ;;		_TFT_GreenTab_Initialize
  4725 ;;		_TFT_BlackTab_Initialize
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           	psect	text15
  4730  00172A                     __ptext15:
  4731                           	opt stack 0
  4732  00172A                     _Rcmd3:
  4733                           	opt stack 24
  4734                           
  4735                           ;ST7735_TFT.c: 372: write_command(0xE0);
  4736                           
  4737                           ;incstack = 0
  4738  00172A  0EE0               	movlw	224
  4739  00172C  EC68  F014         	call	_write_command
  4740                           
  4741                           ;ST7735_TFT.c: 373: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4742  001730  0E02               	movlw	2
  4743  001732  EC60  F014         	call	_write_data
  4744  001736  0E1C               	movlw	28
  4745  001738  EC60  F014         	call	_write_data
  4746  00173C  0E07               	movlw	7
  4747  00173E  EC60  F014         	call	_write_data
  4748  001742  0E12               	movlw	18
  4749  001744  EC60  F014         	call	_write_data
  4750                           
  4751                           ;ST7735_TFT.c: 374: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4752  001748  0E37               	movlw	55
  4753  00174A  EC60  F014         	call	_write_data
  4754  00174E  0E32               	movlw	50
  4755  001750  EC60  F014         	call	_write_data
  4756  001754  0E29               	movlw	41
  4757  001756  EC60  F014         	call	_write_data
  4758  00175A  0E2D               	movlw	45
  4759  00175C  EC60  F014         	call	_write_data
  4760                           
  4761                           ;ST7735_TFT.c: 375: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4762  001760  0E29               	movlw	41
  4763  001762  EC60  F014         	call	_write_data
  4764  001766  0E25               	movlw	37
  4765  001768  EC60  F014         	call	_write_data
  4766  00176C  0E2B               	movlw	43
  4767  00176E  EC60  F014         	call	_write_data
  4768  001772  0E39               	movlw	57
  4769  001774  EC60  F014         	call	_write_data
  4770                           
  4771                           ;ST7735_TFT.c: 376: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4772  001778  0E00               	movlw	0
  4773  00177A  EC60  F014         	call	_write_data
  4774  00177E  0E01               	movlw	1
  4775  001780  EC60  F014         	call	_write_data
  4776  001784  0E03               	movlw	3
  4777  001786  EC60  F014         	call	_write_data
  4778  00178A  0E10               	movlw	16
  4779  00178C  EC60  F014         	call	_write_data
  4780                           
  4781                           ;ST7735_TFT.c: 377: write_command(0xE1);
  4782  001790  0EE1               	movlw	225
  4783  001792  EC68  F014         	call	_write_command
  4784                           
  4785                           ;ST7735_TFT.c: 378: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4786  001796  0E03               	movlw	3
  4787  001798  EC60  F014         	call	_write_data
  4788  00179C  0E1D               	movlw	29
  4789  00179E  EC60  F014         	call	_write_data
  4790  0017A2  0E07               	movlw	7
  4791  0017A4  EC60  F014         	call	_write_data
  4792  0017A8  0E06               	movlw	6
  4793  0017AA  EC60  F014         	call	_write_data
  4794                           
  4795                           ;ST7735_TFT.c: 379: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4796  0017AE  0E2E               	movlw	46
  4797  0017B0  EC60  F014         	call	_write_data
  4798  0017B4  0E2C               	movlw	44
  4799  0017B6  EC60  F014         	call	_write_data
  4800  0017BA  0E29               	movlw	41
  4801  0017BC  EC60  F014         	call	_write_data
  4802  0017C0  0E2D               	movlw	45
  4803  0017C2  EC60  F014         	call	_write_data
  4804                           
  4805                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4806  0017C6  0E2E               	movlw	46
  4807  0017C8  EC60  F014         	call	_write_data
  4808  0017CC  0E2E               	movlw	46
  4809  0017CE  EC60  F014         	call	_write_data
  4810  0017D2  0E37               	movlw	55
  4811  0017D4  EC60  F014         	call	_write_data
  4812  0017D8  0E3F               	movlw	63
  4813  0017DA  EC60  F014         	call	_write_data
  4814                           
  4815                           ;ST7735_TFT.c: 381: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4816  0017DE  0E00               	movlw	0
  4817  0017E0  EC60  F014         	call	_write_data
  4818  0017E4  0E00               	movlw	0
  4819  0017E6  EC60  F014         	call	_write_data
  4820  0017EA  0E02               	movlw	2
  4821  0017EC  EC60  F014         	call	_write_data
  4822  0017F0  0E10               	movlw	16
  4823  0017F2  EC60  F014         	call	_write_data
  4824                           
  4825                           ;ST7735_TFT.c: 382: write_command(0x13);
  4826  0017F6  0E13               	movlw	19
  4827  0017F8  EC68  F014         	call	_write_command
  4828                           
  4829                           ;ST7735_TFT.c: 383: delay_ms(10);
  4830  0017FC  0E00               	movlw	0
  4831  0017FE  6E16               	movwf	delay_ms@ms+1,c
  4832  001800  0E0A               	movlw	10
  4833  001802  6E15               	movwf	delay_ms@ms,c
  4834  001804  ECCB  F011         	call	_delay_ms	;wreg free
  4835                           
  4836                           ;ST7735_TFT.c: 384: write_command(0x29);
  4837  001808  0E29               	movlw	41
  4838  00180A  EC68  F014         	call	_write_command
  4839                           
  4840                           ;ST7735_TFT.c: 385: delay_ms(100);
  4841  00180E  0E00               	movlw	0
  4842  001810  6E16               	movwf	delay_ms@ms+1,c
  4843  001812  0E64               	movlw	100
  4844  001814  6E15               	movwf	delay_ms@ms,c
  4845  001816  ECCB  F011         	call	_delay_ms	;wreg free
  4846  00181A  0012               	return		;funcret
  4847  00181C                     __end_of_Rcmd3:
  4848                           	opt stack 0
  4849                           tblptru	equ	0xFF8
  4850                           tblptrh	equ	0xFF7
  4851                           tblptrl	equ	0xFF6
  4852                           tablat	equ	0xFF5
  4853                           prodh	equ	0xFF4
  4854                           prodl	equ	0xFF3
  4855                           intcon	equ	0xFF2
  4856                           intcon2	equ	0xFF1
  4857                           intcon3	equ	0xFF0
  4858                           postinc0	equ	0xFEE
  4859                           wreg	equ	0xFE8
  4860                           postdec1	equ	0xFE5
  4861                           fsr1l	equ	0xFE1
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function _Rcmd2red *****************
  4869 ;; Defined at:
  4870 ;;		line 360 in file "ST7735_TFT.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;		None               void
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;Total ram usage:        0 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    4
  4891 ;; This function calls:
  4892 ;;		_write_command
  4893 ;;		_write_data
  4894 ;; This function is called by:
  4895 ;;		_TFT_GreenTab_Initialize
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text16
  4900  002682                     __ptext16:
  4901                           	opt stack 0
  4902  002682                     _Rcmd2red:
  4903                           	opt stack 24
  4904                           
  4905                           ;ST7735_TFT.c: 362: write_command(0x2A);
  4906                           
  4907                           ;incstack = 0
  4908  002682  0E2A               	movlw	42
  4909  002684  EC68  F014         	call	_write_command
  4910                           
  4911                           ;ST7735_TFT.c: 363: write_data(0x00); write_data(0x00);
  4912  002688  0E00               	movlw	0
  4913  00268A  EC60  F014         	call	_write_data
  4914  00268E  0E00               	movlw	0
  4915  002690  EC60  F014         	call	_write_data
  4916                           
  4917                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x7F);
  4918  002694  0E00               	movlw	0
  4919  002696  EC60  F014         	call	_write_data
  4920  00269A  0E7F               	movlw	127
  4921  00269C  EC60  F014         	call	_write_data
  4922                           
  4923                           ;ST7735_TFT.c: 365: write_command(0x2B);
  4924  0026A0  0E2B               	movlw	43
  4925  0026A2  EC68  F014         	call	_write_command
  4926                           
  4927                           ;ST7735_TFT.c: 366: write_data(0x00); write_data(0x00);
  4928  0026A6  0E00               	movlw	0
  4929  0026A8  EC60  F014         	call	_write_data
  4930  0026AC  0E00               	movlw	0
  4931  0026AE  EC60  F014         	call	_write_data
  4932                           
  4933                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x9F);
  4934  0026B2  0E00               	movlw	0
  4935  0026B4  EC60  F014         	call	_write_data
  4936  0026B8  0E9F               	movlw	159
  4937  0026BA  EC60  F014         	call	_write_data
  4938  0026BE  0012               	return		;funcret
  4939  0026C0                     __end_of_Rcmd2red:
  4940                           	opt stack 0
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           prodh	equ	0xFF4
  4946                           prodl	equ	0xFF3
  4947                           intcon	equ	0xFF2
  4948                           intcon2	equ	0xFF1
  4949                           intcon3	equ	0xFF0
  4950                           postinc0	equ	0xFEE
  4951                           wreg	equ	0xFE8
  4952                           postdec1	equ	0xFE5
  4953                           fsr1l	equ	0xFE1
  4954                           postinc2	equ	0xFDE
  4955                           postdec2	equ	0xFDD
  4956                           fsr2h	equ	0xFDA
  4957                           fsr2l	equ	0xFD9
  4958                           status	equ	0xFD8
  4959                           
  4960 ;; *************** function _Rcmd1 *****************
  4961 ;; Defined at:
  4962 ;;		line 313 in file "ST7735_TFT.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;		None
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;		None               void
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;Total ram usage:        0 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    4
  4983 ;; This function calls:
  4984 ;;		_delay_ms
  4985 ;;		_write_command
  4986 ;;		_write_data
  4987 ;; This function is called by:
  4988 ;;		_TFT_GreenTab_Initialize
  4989 ;;		_TFT_BlackTab_Initialize
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text17
  4994  001510                     __ptext17:
  4995                           	opt stack 0
  4996  001510                     _Rcmd1:
  4997                           	opt stack 24
  4998                           
  4999                           ;ST7735_TFT.c: 315: write_command(0x01);
  5000                           
  5001                           ;incstack = 0
  5002  001510  0E01               	movlw	1
  5003  001512  EC68  F014         	call	_write_command
  5004                           
  5005                           ;ST7735_TFT.c: 316: delay_ms(150);
  5006  001516  0E00               	movlw	0
  5007  001518  6E16               	movwf	delay_ms@ms+1,c
  5008  00151A  0E96               	movlw	150
  5009  00151C  6E15               	movwf	delay_ms@ms,c
  5010  00151E  ECCB  F011         	call	_delay_ms	;wreg free
  5011                           
  5012                           ;ST7735_TFT.c: 317: write_command(0x11);
  5013  001522  0E11               	movlw	17
  5014  001524  EC68  F014         	call	_write_command
  5015                           
  5016                           ;ST7735_TFT.c: 318: delay_ms(500);
  5017  001528  0E01               	movlw	1
  5018  00152A  6E16               	movwf	delay_ms@ms+1,c
  5019  00152C  0EF4               	movlw	244
  5020  00152E  6E15               	movwf	delay_ms@ms,c
  5021  001530  ECCB  F011         	call	_delay_ms	;wreg free
  5022                           
  5023                           ;ST7735_TFT.c: 319: write_command(0xB1);
  5024  001534  0EB1               	movlw	177
  5025  001536  EC68  F014         	call	_write_command
  5026                           
  5027                           ;ST7735_TFT.c: 320: write_data(0x01);
  5028  00153A  0E01               	movlw	1
  5029  00153C  EC60  F014         	call	_write_data
  5030                           
  5031                           ;ST7735_TFT.c: 321: write_data(0x2C);
  5032  001540  0E2C               	movlw	44
  5033  001542  EC60  F014         	call	_write_data
  5034                           
  5035                           ;ST7735_TFT.c: 322: write_data(0x2D);
  5036  001546  0E2D               	movlw	45
  5037  001548  EC60  F014         	call	_write_data
  5038                           
  5039                           ;ST7735_TFT.c: 323: write_command(0xB2);
  5040  00154C  0EB2               	movlw	178
  5041  00154E  EC68  F014         	call	_write_command
  5042                           
  5043                           ;ST7735_TFT.c: 324: write_data(0x01);
  5044  001552  0E01               	movlw	1
  5045  001554  EC60  F014         	call	_write_data
  5046                           
  5047                           ;ST7735_TFT.c: 325: write_data(0x2C);
  5048  001558  0E2C               	movlw	44
  5049  00155A  EC60  F014         	call	_write_data
  5050                           
  5051                           ;ST7735_TFT.c: 326: write_data(0x2D);
  5052  00155E  0E2D               	movlw	45
  5053  001560  EC60  F014         	call	_write_data
  5054                           
  5055                           ;ST7735_TFT.c: 327: write_command(0xB3);
  5056  001564  0EB3               	movlw	179
  5057  001566  EC68  F014         	call	_write_command
  5058                           
  5059                           ;ST7735_TFT.c: 328: write_data(0x01);
  5060  00156A  0E01               	movlw	1
  5061  00156C  EC60  F014         	call	_write_data
  5062                           
  5063                           ;ST7735_TFT.c: 329: write_data(0x2C);
  5064  001570  0E2C               	movlw	44
  5065  001572  EC60  F014         	call	_write_data
  5066                           
  5067                           ;ST7735_TFT.c: 330: write_data(0x2D);
  5068  001576  0E2D               	movlw	45
  5069  001578  EC60  F014         	call	_write_data
  5070                           
  5071                           ;ST7735_TFT.c: 331: write_data(0x01);
  5072  00157C  0E01               	movlw	1
  5073  00157E  EC60  F014         	call	_write_data
  5074                           
  5075                           ;ST7735_TFT.c: 332: write_data(0x2C);
  5076  001582  0E2C               	movlw	44
  5077  001584  EC60  F014         	call	_write_data
  5078                           
  5079                           ;ST7735_TFT.c: 333: write_data(0x2D);
  5080  001588  0E2D               	movlw	45
  5081  00158A  EC60  F014         	call	_write_data
  5082                           
  5083                           ;ST7735_TFT.c: 334: write_command(0xB4);
  5084  00158E  0EB4               	movlw	180
  5085  001590  EC68  F014         	call	_write_command
  5086                           
  5087                           ;ST7735_TFT.c: 335: write_data(0x07);
  5088  001594  0E07               	movlw	7
  5089  001596  EC60  F014         	call	_write_data
  5090                           
  5091                           ;ST7735_TFT.c: 336: write_command(0xC0);
  5092  00159A  0EC0               	movlw	192
  5093  00159C  EC68  F014         	call	_write_command
  5094                           
  5095                           ;ST7735_TFT.c: 337: write_data(0xA2);
  5096  0015A0  0EA2               	movlw	162
  5097  0015A2  EC60  F014         	call	_write_data
  5098                           
  5099                           ;ST7735_TFT.c: 338: write_data(0x02);
  5100  0015A6  0E02               	movlw	2
  5101  0015A8  EC60  F014         	call	_write_data
  5102                           
  5103                           ;ST7735_TFT.c: 339: write_data(0x84);
  5104  0015AC  0E84               	movlw	132
  5105  0015AE  EC60  F014         	call	_write_data
  5106                           
  5107                           ;ST7735_TFT.c: 340: write_command(0xC1);
  5108  0015B2  0EC1               	movlw	193
  5109  0015B4  EC68  F014         	call	_write_command
  5110                           
  5111                           ;ST7735_TFT.c: 341: write_data(0xC5);
  5112  0015B8  0EC5               	movlw	197
  5113  0015BA  EC60  F014         	call	_write_data
  5114                           
  5115                           ;ST7735_TFT.c: 342: write_command(0xC2);
  5116  0015BE  0EC2               	movlw	194
  5117  0015C0  EC68  F014         	call	_write_command
  5118                           
  5119                           ;ST7735_TFT.c: 343: write_data(0x0A);
  5120  0015C4  0E0A               	movlw	10
  5121  0015C6  EC60  F014         	call	_write_data
  5122                           
  5123                           ;ST7735_TFT.c: 344: write_data(0x00);
  5124  0015CA  0E00               	movlw	0
  5125  0015CC  EC60  F014         	call	_write_data
  5126                           
  5127                           ;ST7735_TFT.c: 345: write_command(0xC3);
  5128  0015D0  0EC3               	movlw	195
  5129  0015D2  EC68  F014         	call	_write_command
  5130                           
  5131                           ;ST7735_TFT.c: 346: write_data(0x8A);
  5132  0015D6  0E8A               	movlw	138
  5133  0015D8  EC60  F014         	call	_write_data
  5134                           
  5135                           ;ST7735_TFT.c: 347: write_data(0x2A);
  5136  0015DC  0E2A               	movlw	42
  5137  0015DE  EC60  F014         	call	_write_data
  5138                           
  5139                           ;ST7735_TFT.c: 348: write_command(0xC4);
  5140  0015E2  0EC4               	movlw	196
  5141  0015E4  EC68  F014         	call	_write_command
  5142                           
  5143                           ;ST7735_TFT.c: 349: write_data(0x8A);
  5144  0015E8  0E8A               	movlw	138
  5145  0015EA  EC60  F014         	call	_write_data
  5146                           
  5147                           ;ST7735_TFT.c: 350: write_data(0xEE);
  5148  0015EE  0EEE               	movlw	238
  5149  0015F0  EC60  F014         	call	_write_data
  5150                           
  5151                           ;ST7735_TFT.c: 351: write_command(0xC5);
  5152  0015F4  0EC5               	movlw	197
  5153  0015F6  EC68  F014         	call	_write_command
  5154                           
  5155                           ;ST7735_TFT.c: 352: write_data(0x0E);
  5156  0015FA  0E0E               	movlw	14
  5157  0015FC  EC60  F014         	call	_write_data
  5158                           
  5159                           ;ST7735_TFT.c: 353: write_command(0x20);
  5160  001600  0E20               	movlw	32
  5161  001602  EC68  F014         	call	_write_command
  5162                           
  5163                           ;ST7735_TFT.c: 354: write_command(0x36);
  5164  001606  0E36               	movlw	54
  5165  001608  EC68  F014         	call	_write_command
  5166                           
  5167                           ;ST7735_TFT.c: 355: write_data(0xC8);
  5168  00160C  0EC8               	movlw	200
  5169  00160E  EC60  F014         	call	_write_data
  5170                           
  5171                           ;ST7735_TFT.c: 356: write_command(0x3A);
  5172  001612  0E3A               	movlw	58
  5173  001614  EC68  F014         	call	_write_command
  5174                           
  5175                           ;ST7735_TFT.c: 357: write_data(0x05);
  5176  001618  0E05               	movlw	5
  5177  00161A  EC60  F014         	call	_write_data
  5178  00161E  0012               	return		;funcret
  5179  001620                     __end_of_Rcmd1:
  5180                           	opt stack 0
  5181                           tblptru	equ	0xFF8
  5182                           tblptrh	equ	0xFF7
  5183                           tblptrl	equ	0xFF6
  5184                           tablat	equ	0xFF5
  5185                           prodh	equ	0xFF4
  5186                           prodl	equ	0xFF3
  5187                           intcon	equ	0xFF2
  5188                           intcon2	equ	0xFF1
  5189                           intcon3	equ	0xFF0
  5190                           postinc0	equ	0xFEE
  5191                           wreg	equ	0xFE8
  5192                           postdec1	equ	0xFE5
  5193                           fsr1l	equ	0xFE1
  5194                           postinc2	equ	0xFDE
  5195                           postdec2	equ	0xFDD
  5196                           fsr2h	equ	0xFDA
  5197                           fsr2l	equ	0xFD9
  5198                           status	equ	0xFD8
  5199                           
  5200 ;; *************** function _LCD_Reset *****************
  5201 ;; Defined at:
  5202 ;;		line 249 in file "ST7735_TFT.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;		None
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;		None
  5207 ;; Return value:  Size  Location     Type
  5208 ;;		None               void
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;Total ram usage:        0 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    4
  5223 ;; This function calls:
  5224 ;;		_delay_ms
  5225 ;; This function is called by:
  5226 ;;		_Initialize_Screen
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text18
  5231  00289C                     __ptext18:
  5232                           	opt stack 0
  5233  00289C                     _LCD_Reset:
  5234                           	opt stack 25
  5235                           
  5236                           ;ST7735_TFT.c: 251: PORTDbits.RD2 = 0;
  5237                           
  5238                           ;incstack = 0
  5239  00289C  9483               	bcf	3971,2,c	;volatile
  5240                           
  5241                           ;ST7735_TFT.c: 252: delay_ms(100);
  5242  00289E  0E00               	movlw	0
  5243  0028A0  6E16               	movwf	delay_ms@ms+1,c
  5244  0028A2  0E64               	movlw	100
  5245  0028A4  6E15               	movwf	delay_ms@ms,c
  5246  0028A6  ECCB  F011         	call	_delay_ms	;wreg free
  5247                           
  5248                           ;ST7735_TFT.c: 253: PORTDbits.RD2 = 1;
  5249  0028AA  8483               	bsf	3971,2,c	;volatile
  5250  0028AC  0012               	return		;funcret
  5251  0028AE                     __end_of_LCD_Reset:
  5252                           	opt stack 0
  5253                           tblptru	equ	0xFF8
  5254                           tblptrh	equ	0xFF7
  5255                           tblptrl	equ	0xFF6
  5256                           tablat	equ	0xFF5
  5257                           prodh	equ	0xFF4
  5258                           prodl	equ	0xFF3
  5259                           intcon	equ	0xFF2
  5260                           intcon2	equ	0xFF1
  5261                           intcon3	equ	0xFF0
  5262                           postinc0	equ	0xFEE
  5263                           wreg	equ	0xFE8
  5264                           postdec1	equ	0xFE5
  5265                           fsr1l	equ	0xFE1
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _delay_ms *****************
  5273 ;; Defined at:
  5274 ;;		line 96 in file "ST7735_TFT.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  ms              2   20[COMRAM] int 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  count           2   24[COMRAM] int 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;		None               void
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5288 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;Total ram usage:        6 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    3
  5295 ;; This function calls:
  5296 ;;		___wmul
  5297 ;; This function is called by:
  5298 ;;		_LCD_Reset
  5299 ;;		_Rcmd1
  5300 ;;		_Rcmd3
  5301 ;;		_Bcmd
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text19
  5306  002396                     __ptext19:
  5307                           	opt stack 0
  5308  002396                     _delay_ms:
  5309                           	opt stack 24
  5310                           
  5311                           ;ST7735_TFT.c: 102: int count;
  5312                           ;ST7735_TFT.c: 103: count = 8000000/4000/8 * ms;
  5313                           
  5314                           ;incstack = 0
  5315  002396  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  5316  00239A  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5317  00239E  0E00               	movlw	0
  5318  0023A0  6E12               	movwf	___wmul@multiplicand+1,c
  5319  0023A2  0EFA               	movlw	250
  5320  0023A4  6E11               	movwf	___wmul@multiplicand,c
  5321  0023A6  ECE3  F013         	call	___wmul	;wreg free
  5322  0023AA  C00F  F019         	movff	?___wmul,delay_ms@count
  5323  0023AE  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  5324                           
  5325                           ;ST7735_TFT.c: 104: count = (0xffff - count);
  5326  0023B2  C019  F017         	movff	delay_ms@count,??_delay_ms
  5327  0023B6  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  5328  0023BA  1E17               	comf	??_delay_ms,f,c
  5329  0023BC  1E18               	comf	??_delay_ms+1,f,c
  5330  0023BE  4A17               	infsnz	??_delay_ms,f,c
  5331  0023C0  2A18               	incf	??_delay_ms+1,f,c
  5332  0023C2  0EFF               	movlw	255
  5333  0023C4  2417               	addwf	??_delay_ms,w,c
  5334  0023C6  6E19               	movwf	delay_ms@count,c
  5335  0023C8  0EFF               	movlw	255
  5336  0023CA  2018               	addwfc	??_delay_ms+1,w,c
  5337  0023CC  6E1A               	movwf	delay_ms@count+1,c
  5338                           
  5339                           ;ST7735_TFT.c: 106: T3CON = 0xb8;
  5340  0023CE  0EB8               	movlw	184
  5341  0023D0  6EB1               	movwf	4017,c	;volatile
  5342                           
  5343                           ;ST7735_TFT.c: 108: TMR0L = count & 0x00ff;
  5344  0023D2  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  5345                           
  5346                           ;ST7735_TFT.c: 109: TMR0H = count >> 8;
  5347  0023D6  501A               	movf	delay_ms@count+1,w,c
  5348  0023D8  6ED7               	movwf	4055,c	;volatile
  5349                           
  5350                           ;ST7735_TFT.c: 111: PIR2bits.TMR3IF = 0;
  5351  0023DA  92A1               	bcf	4001,1,c	;volatile
  5352                           
  5353                           ;ST7735_TFT.c: 112: T3CONbits.TMR3ON = 1;
  5354  0023DC  80B1               	bsf	4017,0,c	;volatile
  5355                           
  5356                           ;ST7735_TFT.c: 114: while (PIR2bits.TMR3IF == 0);
  5357  0023DE  D000               	goto	l139
  5358  0023E0                     l139:
  5359  0023E0  A2A1               	btfss	4001,1,c	;volatile
  5360  0023E2  D7FE               	goto	l139
  5361                           
  5362                           ;ST7735_TFT.c: 115: T3CONbits.TMR3ON = 0;
  5363  0023E4  90B1               	bcf	4017,0,c	;volatile
  5364  0023E6  0012               	return		;funcret
  5365  0023E8                     __end_of_delay_ms:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           prodh	equ	0xFF4
  5372                           prodl	equ	0xFF3
  5373                           intcon	equ	0xFF2
  5374                           intcon2	equ	0xFF1
  5375                           intcon3	equ	0xFF0
  5376                           postinc0	equ	0xFEE
  5377                           wreg	equ	0xFE8
  5378                           postdec1	equ	0xFE5
  5379                           fsr1l	equ	0xFE1
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function _Init_ADC *****************
  5387 ;; Defined at:
  5388 ;;		line 440 in file "Lab8.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;		None
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;		None
  5393 ;; Return value:  Size  Location     Type
  5394 ;;		None               void
  5395 ;; Registers used:
  5396 ;;		wreg, status,2
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;Total ram usage:        0 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    2
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_main
  5413 ;;		_Do_Init
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text20
  5418  00290E                     __ptext20:
  5419                           	opt stack 0
  5420  00290E                     _Init_ADC:
  5421                           	opt stack 28
  5422                           
  5423                           ;Lab8.c: 442: ADCON0 = 0x01;
  5424                           
  5425                           ;incstack = 0
  5426  00290E  0E01               	movlw	1
  5427  002910  6EC2               	movwf	4034,c	;volatile
  5428                           
  5429                           ;Lab8.c: 443: ADCON1= 0x0E;
  5430  002912  0E0E               	movlw	14
  5431  002914  6EC1               	movwf	4033,c	;volatile
  5432                           
  5433                           ;Lab8.c: 444: ADCON2= 0xA9;
  5434  002916  0EA9               	movlw	169
  5435  002918  6EC0               	movwf	4032,c	;volatile
  5436  00291A  0012               	return		;funcret
  5437  00291C                     __end_of_Init_ADC:
  5438                           	opt stack 0
  5439                           tblptru	equ	0xFF8
  5440                           tblptrh	equ	0xFF7
  5441                           tblptrl	equ	0xFF6
  5442                           tablat	equ	0xFF5
  5443                           prodh	equ	0xFF4
  5444                           prodl	equ	0xFF3
  5445                           intcon	equ	0xFF2
  5446                           intcon2	equ	0xFF1
  5447                           intcon3	equ	0xFF0
  5448                           postinc0	equ	0xFEE
  5449                           wreg	equ	0xFE8
  5450                           postdec1	equ	0xFE5
  5451                           fsr1l	equ	0xFE1
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           fsr2h	equ	0xFDA
  5455                           fsr2l	equ	0xFD9
  5456                           status	equ	0xFD8
  5457                           
  5458 ;; *************** function _Do_Flashing *****************
  5459 ;; Defined at:
  5460 ;;		line 404 in file "Lab8.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;		None
  5465 ;; Return value:  Size  Location     Type
  5466 ;;		None               void
  5467 ;; Registers used:
  5468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;Total ram usage:        0 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:   11
  5481 ;; This function calls:
  5482 ;;		_Set_EW
  5483 ;;		_Set_EW_LT
  5484 ;;		_Set_NS
  5485 ;;		_Set_NS_LT
  5486 ;;		_Wait_One_Second
  5487 ;; This function is called by:
  5488 ;;		_main
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           	psect	text21
  5493  002340                     __ptext21:
  5494                           	opt stack 0
  5495  002340                     _Do_Flashing:
  5496                           	opt stack 19
  5497                           
  5498                           ;Lab8.c: 406: FLASHING = 1;
  5499                           
  5500                           ;incstack = 0
  5501  002340  0E01               	movlw	1
  5502  002342  D006               	goto	L1
  5503  002344                     l5733:
  5504                           
  5505                           ;Lab8.c: 408: {
  5506                           ;Lab8.c: 409: if (FLASHING_REQUEST == 1)
  5507  002344  0451               	decf	_FLASHING_REQUEST,w,c
  5508  002346  A4D8               	btfss	status,2,c
  5509  002348  D005               	goto	l5737
  5510                           
  5511                           ;Lab8.c: 410: {
  5512                           ;Lab8.c: 411: FLASHING_REQUEST = 0;
  5513  00234A  0E00               	movlw	0
  5514  00234C  6E51               	movwf	_FLASHING_REQUEST,c
  5515                           
  5516                           ;Lab8.c: 412: FLASHING = 0;
  5517  00234E  0E00               	movlw	0
  5518  002350                     L1:
  5519  002350  6E50               	movwf	_FLASHING,c
  5520                           
  5521                           ;Lab8.c: 413: }
  5522  002352  D01D               	goto	l5751
  5523  002354                     l5737:
  5524                           
  5525                           ;Lab8.c: 414: else
  5526                           ;Lab8.c: 415: {
  5527                           ;Lab8.c: 416: Set_NS(1);
  5528  002354  0E01               	movlw	1
  5529  002356  ECB3  F012         	call	_Set_NS
  5530                           
  5531                           ;Lab8.c: 417: Set_NS_LT(1);
  5532  00235A  0E01               	movlw	1
  5533  00235C  EC8F  F012         	call	_Set_NS_LT
  5534                           
  5535                           ;Lab8.c: 418: Set_EW(1);
  5536  002360  0E01               	movlw	1
  5537  002362  ECFB  F012         	call	_Set_EW
  5538                           
  5539                           ;Lab8.c: 419: Set_EW_LT(1);
  5540  002366  0E01               	movlw	1
  5541  002368  ECD7  F012         	call	_Set_EW_LT
  5542                           
  5543                           ;Lab8.c: 420: Wait_One_Second();
  5544  00236C  EC20  F010         	call	_Wait_One_Second	;wreg free
  5545                           
  5546                           ;Lab8.c: 422: Set_NS(0);
  5547  002370  0E00               	movlw	0
  5548  002372  ECB3  F012         	call	_Set_NS
  5549                           
  5550                           ;Lab8.c: 423: Set_NS_LT(0);
  5551  002376  0E00               	movlw	0
  5552  002378  EC8F  F012         	call	_Set_NS_LT
  5553                           
  5554                           ;Lab8.c: 424: Set_EW(0);
  5555  00237C  0E00               	movlw	0
  5556  00237E  ECFB  F012         	call	_Set_EW
  5557                           
  5558                           ;Lab8.c: 425: Set_EW_LT(0);
  5559  002382  0E00               	movlw	0
  5560  002384  ECD7  F012         	call	_Set_EW_LT
  5561                           
  5562                           ;Lab8.c: 426: Wait_One_Second();
  5563  002388  EC20  F010         	call	_Wait_One_Second	;wreg free
  5564  00238C  D000               	goto	l5751
  5565  00238E                     l5751:
  5566  00238E  0450               	decf	_FLASHING,w,c
  5567  002390  B4D8               	btfsc	status,2,c
  5568  002392  D7D8               	goto	l5733
  5569  002394  0012               	return		;funcret
  5570  002396                     __end_of_Do_Flashing:
  5571                           	opt stack 0
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           prodh	equ	0xFF4
  5577                           prodl	equ	0xFF3
  5578                           intcon	equ	0xFF2
  5579                           intcon2	equ	0xFF1
  5580                           intcon3	equ	0xFF0
  5581                           postinc0	equ	0xFEE
  5582                           wreg	equ	0xFE8
  5583                           postdec1	equ	0xFE5
  5584                           fsr1l	equ	0xFE1
  5585                           postinc2	equ	0xFDE
  5586                           postdec2	equ	0xFDD
  5587                           fsr2h	equ	0xFDA
  5588                           fsr2l	equ	0xFD9
  5589                           status	equ	0xFD8
  5590                           
  5591 ;; *************** function _Day_Mode *****************
  5592 ;; Defined at:
  5593 ;;		line 548 in file "Lab8.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;		None
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;		None
  5598 ;; Return value:  Size  Location     Type
  5599 ;;		None               void
  5600 ;; Registers used:
  5601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;Total ram usage:        0 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:   12
  5614 ;; This function calls:
  5615 ;;		_PED_Control
  5616 ;;		_Set_EW
  5617 ;;		_Set_EW_LT
  5618 ;;		_Set_NS
  5619 ;;		_Set_NS_LT
  5620 ;;		_Wait_N_Seconds
  5621 ;; This function is called by:
  5622 ;;		_main
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           	psect	text22
  5627  001AAA                     __ptext22:
  5628                           	opt stack 0
  5629  001AAA                     _Day_Mode:
  5630                           	opt stack 18
  5631                           
  5632                           ;Lab8.c: 550: MODE = 1;
  5633                           
  5634                           ;incstack = 0
  5635  001AAA  0E00               	movlw	0
  5636  001AAC  0100               	movlb	0	; () banked
  5637  001AAE  6F81               	movwf	(_MODE+1)& (0+255),b
  5638  001AB0  0E01               	movlw	1
  5639  001AB2  6F80               	movwf	_MODE& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;Lab8.c: 551: PORTBbits.RB7 = 1;
  5643  001AB4  8E81               	bsf	3969,7,c	;volatile
  5644                           
  5645                           ;Lab8.c: 552: Act_Mode_Txt[0] = 'D';
  5646  001AB6  0E44               	movlw	68
  5647  001AB8  6E62               	movwf	_Act_Mode_Txt,c
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;Lab8.c: 554: Set_NS(2);
  5651  001ABA  0E02               	movlw	2
  5652  001ABC  ECB3  F012         	call	_Set_NS
  5653                           
  5654                           ;Lab8.c: 556: Set_EW(1);
  5655  001AC0  0E01               	movlw	1
  5656  001AC2  ECFB  F012         	call	_Set_EW
  5657                           
  5658                           ;Lab8.c: 557: Set_NS_LT(1);
  5659  001AC6  0E01               	movlw	1
  5660  001AC8  EC8F  F012         	call	_Set_NS_LT
  5661                           
  5662                           ;Lab8.c: 558: Set_EW_LT(1);
  5663  001ACC  0E01               	movlw	1
  5664  001ACE  ECD7  F012         	call	_Set_EW_LT
  5665                           
  5666                           ;Lab8.c: 560: if(NS_PED_SW == 1)
  5667  001AD2  0452               	decf	_NS_PED_SW,w,c
  5668  001AD4  A4D8               	btfss	status,2,c
  5669  001AD6  D006               	goto	l497
  5670                           
  5671                           ;Lab8.c: 561: {
  5672                           ;Lab8.c: 562: PED_Control(0,8);
  5673  001AD8  0E08               	movlw	8
  5674  001ADA  0100               	movlb	0	; () banked
  5675  001ADC  6FB9               	movwf	PED_Control@Num_Sec& (0+255),b
  5676  001ADE  0E00               	movlw	0
  5677  001AE0  ECDA  F010         	call	_PED_Control
  5678  001AE4                     l497:
  5679                           
  5680                           ;Lab8.c: 564: }
  5681                           ;Lab8.c: 568: Wait_N_Seconds(7);
  5682  001AE4  0E07               	movlw	7
  5683  001AE6  EC1F  F013         	call	_Wait_N_Seconds
  5684                           
  5685                           ;Lab8.c: 570: Set_NS(3);
  5686  001AEA  0E03               	movlw	3
  5687  001AEC  ECB3  F012         	call	_Set_NS
  5688                           
  5689                           ;Lab8.c: 571: Wait_N_Seconds(3);
  5690  001AF0  0E03               	movlw	3
  5691  001AF2  EC1F  F013         	call	_Wait_N_Seconds
  5692                           
  5693                           ;Lab8.c: 573: Set_NS(1);
  5694  001AF6  0E01               	movlw	1
  5695  001AF8  ECB3  F012         	call	_Set_NS
  5696                           
  5697                           ;Lab8.c: 577: if(PORTAbits.RA5 == 1)
  5698  001AFC  AA80               	btfss	3968,5,c	;volatile
  5699  001AFE  D010               	goto	l5663
  5700                           
  5701                           ;Lab8.c: 578: {
  5702                           ;Lab8.c: 579: Set_EW_LT(2);
  5703  001B00  0E02               	movlw	2
  5704  001B02  ECD7  F012         	call	_Set_EW_LT
  5705                           
  5706                           ;Lab8.c: 580: Wait_N_Seconds(8);
  5707  001B06  0E08               	movlw	8
  5708  001B08  EC1F  F013         	call	_Wait_N_Seconds
  5709                           
  5710                           ;Lab8.c: 582: Set_EW_LT(3);
  5711  001B0C  0E03               	movlw	3
  5712  001B0E  ECD7  F012         	call	_Set_EW_LT
  5713                           
  5714                           ;Lab8.c: 583: Wait_N_Seconds(3);
  5715  001B12  0E03               	movlw	3
  5716  001B14  EC1F  F013         	call	_Wait_N_Seconds
  5717                           
  5718                           ;Lab8.c: 585: Set_EW_LT(1);
  5719  001B18  0E01               	movlw	1
  5720  001B1A  ECD7  F012         	call	_Set_EW_LT
  5721  001B1E  D000               	goto	l5663
  5722  001B20                     l5663:
  5723                           
  5724                           ;Lab8.c: 587: }
  5725                           ;Lab8.c: 589: Set_EW(2);
  5726  001B20  0E02               	movlw	2
  5727  001B22  ECFB  F012         	call	_Set_EW
  5728                           
  5729                           ;Lab8.c: 591: if( EW_PED_SW == 1 )
  5730  001B26  044F               	decf	_EW_PED_SW,w,c
  5731  001B28  A4D8               	btfss	status,2,c
  5732  001B2A  D006               	goto	l499
  5733                           
  5734                           ;Lab8.c: 592: {
  5735                           ;Lab8.c: 593: PED_Control(1,9);
  5736  001B2C  0E09               	movlw	9
  5737  001B2E  0100               	movlb	0	; () banked
  5738  001B30  6FB9               	movwf	PED_Control@Num_Sec& (0+255),b
  5739  001B32  0E01               	movlw	1
  5740  001B34  ECDA  F010         	call	_PED_Control
  5741  001B38                     l499:
  5742                           
  5743                           ;Lab8.c: 594: }
  5744                           ;Lab8.c: 598: Wait_N_Seconds(9);
  5745  001B38  0E09               	movlw	9
  5746  001B3A  EC1F  F013         	call	_Wait_N_Seconds
  5747                           
  5748                           ;Lab8.c: 600: Set_EW(3);
  5749  001B3E  0E03               	movlw	3
  5750  001B40  ECFB  F012         	call	_Set_EW
  5751                           
  5752                           ;Lab8.c: 601: Wait_N_Seconds(3);
  5753  001B44  0E03               	movlw	3
  5754  001B46  EC1F  F013         	call	_Wait_N_Seconds
  5755                           
  5756                           ;Lab8.c: 603: Set_EW(1);
  5757  001B4A  0E01               	movlw	1
  5758  001B4C  ECFB  F012         	call	_Set_EW
  5759                           
  5760                           ;Lab8.c: 607: if(PORTAbits.RA4 == 1)
  5761  001B50  A880               	btfss	3968,4,c	;volatile
  5762  001B52  D010               	goto	l501
  5763                           
  5764                           ;Lab8.c: 608: {
  5765                           ;Lab8.c: 609: Set_NS_LT(2);
  5766  001B54  0E02               	movlw	2
  5767  001B56  EC8F  F012         	call	_Set_NS_LT
  5768                           
  5769                           ;Lab8.c: 610: Wait_N_Seconds(8);
  5770  001B5A  0E08               	movlw	8
  5771  001B5C  EC1F  F013         	call	_Wait_N_Seconds
  5772                           
  5773                           ;Lab8.c: 612: Set_NS_LT(3);
  5774  001B60  0E03               	movlw	3
  5775  001B62  EC8F  F012         	call	_Set_NS_LT
  5776                           
  5777                           ;Lab8.c: 613: Wait_N_Seconds(3);
  5778  001B66  0E03               	movlw	3
  5779  001B68  EC1F  F013         	call	_Wait_N_Seconds
  5780                           
  5781                           ;Lab8.c: 615: Set_NS_LT(1);
  5782  001B6C  0E01               	movlw	1
  5783  001B6E  EC8F  F012         	call	_Set_NS_LT
  5784  001B72  D000               	goto	l501
  5785  001B74                     l501:
  5786  001B74  0012               	return		;funcret
  5787  001B76                     __end_of_Day_Mode:
  5788                           	opt stack 0
  5789                           tblptru	equ	0xFF8
  5790                           tblptrh	equ	0xFF7
  5791                           tblptrl	equ	0xFF6
  5792                           tablat	equ	0xFF5
  5793                           prodh	equ	0xFF4
  5794                           prodl	equ	0xFF3
  5795                           intcon	equ	0xFF2
  5796                           intcon2	equ	0xFF1
  5797                           intcon3	equ	0xFF0
  5798                           postinc0	equ	0xFEE
  5799                           wreg	equ	0xFE8
  5800                           postdec1	equ	0xFE5
  5801                           fsr1l	equ	0xFE1
  5802                           postinc2	equ	0xFDE
  5803                           postdec2	equ	0xFDD
  5804                           fsr2h	equ	0xFDA
  5805                           fsr2l	equ	0xFD9
  5806                           status	equ	0xFD8
  5807                           
  5808 ;; *************** function _Wait_N_Seconds *****************
  5809 ;; Defined at:
  5810 ;;		line 729 in file "Lab8.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  seconds         1    wreg     unsigned char 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  seconds         1    9[BANK0 ] unsigned char 
  5815 ;;  I               1   10[BANK0 ] unsigned char 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;		None               void
  5818 ;; Registers used:
  5819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;Total ram usage:        2 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:   11
  5832 ;; This function calls:
  5833 ;;		_Wait_One_Second
  5834 ;;		_update_LCD_count
  5835 ;;		_update_LCD_misc
  5836 ;; This function is called by:
  5837 ;;		_Day_Mode
  5838 ;;		_Night_Mode
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text23
  5843  00263E                     __ptext23:
  5844                           	opt stack 0
  5845  00263E                     _Wait_N_Seconds:
  5846                           	opt stack 18
  5847                           
  5848                           ;incstack = 0
  5849                           ;Wait_N_Seconds@seconds stored from wreg
  5850  00263E  0100               	movlb	0	; () banked
  5851  002640  6FB9               	movwf	Wait_N_Seconds@seconds& (0+255),b
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;Lab8.c: 731: for(char I = seconds; I > 0; I--)
  5855  002642  C0B9  F0BA         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  5856  002646                     l5409:
  5857                           
  5858                           ; BSR set to: 0
  5859  002646  0100               	movlb	0	; () banked
  5860  002648  51BA               	movf	Wait_N_Seconds@I& (0+255),w,b
  5861  00264A  0100               	movlb	0	; () banked
  5862  00264C  B4D8               	btfsc	status,2,c
  5863  00264E  D00E               	goto	l5419
  5864  002650  D001               	goto	l5413
  5865                           
  5866                           ; BSR set to: 0
  5867  002652  D00C               	goto	l5419
  5868  002654                     l5413:
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;Lab8.c: 732: {
  5872                           ;Lab8.c: 733: update_LCD_misc();
  5873  002654  EC56  F005         	call	_update_LCD_misc	;wreg free
  5874                           
  5875                           ;Lab8.c: 734: update_LCD_count(direction, I);
  5876  002658  C0BA  F0B7         	movff	Wait_N_Seconds@I,update_LCD_count@count
  5877  00265C  505C               	movf	_direction,w,c
  5878  00265E  EC3A  F007         	call	_update_LCD_count
  5879                           
  5880                           ;Lab8.c: 735: Wait_One_Second();
  5881  002662  EC20  F010         	call	_Wait_One_Second	;wreg free
  5882  002666  0100               	movlb	0	; () banked
  5883  002668  07BA               	decf	Wait_N_Seconds@I& (0+255),f,b
  5884  00266A  D7ED               	goto	l5409
  5885  00266C                     l5419:
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;Lab8.c: 736: }
  5889                           ;Lab8.c: 737: update_LCD_misc();
  5890  00266C  EC56  F005         	call	_update_LCD_misc	;wreg free
  5891                           
  5892                           ;Lab8.c: 738: update_LCD_count(direction, 0);
  5893  002670  0E00               	movlw	0
  5894  002672  0100               	movlb	0	; () banked
  5895  002674  6FB7               	movwf	update_LCD_count@count& (0+255),b
  5896  002676  505C               	movf	_direction,w,c
  5897  002678  EC3A  F007         	call	_update_LCD_count
  5898                           
  5899                           ;Lab8.c: 739: Wait_One_Second();
  5900  00267C  EC20  F010         	call	_Wait_One_Second	;wreg free
  5901  002680  0012               	return		;funcret
  5902  002682                     __end_of_Wait_N_Seconds:
  5903                           	opt stack 0
  5904                           tblptru	equ	0xFF8
  5905                           tblptrh	equ	0xFF7
  5906                           tblptrl	equ	0xFF6
  5907                           tablat	equ	0xFF5
  5908                           prodh	equ	0xFF4
  5909                           prodl	equ	0xFF3
  5910                           intcon	equ	0xFF2
  5911                           intcon2	equ	0xFF1
  5912                           intcon3	equ	0xFF0
  5913                           postinc0	equ	0xFEE
  5914                           wreg	equ	0xFE8
  5915                           postdec1	equ	0xFE5
  5916                           fsr1l	equ	0xFE1
  5917                           postinc2	equ	0xFDE
  5918                           postdec2	equ	0xFDD
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8
  5922                           
  5923 ;; *************** function _update_LCD_count *****************
  5924 ;; Defined at:
  5925 ;;		line 789 in file "Lab8.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  direction       1    wreg     unsigned char 
  5928 ;;  count           1    7[BANK0 ] unsigned char 
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;  direction       1    8[BANK0 ] unsigned char 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;		None               void
  5933 ;; Registers used:
  5934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5940 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;Total ram usage:        2 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; Hardware stack levels required when called:    9
  5947 ;; This function calls:
  5948 ;;		___awdiv
  5949 ;;		___awmod
  5950 ;;		_drawtext
  5951 ;; This function is called by:
  5952 ;;		_Wait_N_Seconds
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text24
  5957  000E74                     __ptext24:
  5958                           	opt stack 0
  5959  000E74                     _update_LCD_count:
  5960                           	opt stack 19
  5961                           
  5962                           ;incstack = 0
  5963                           ;update_LCD_count@direction stored from wreg
  5964  000E74  0100               	movlb	0	; () banked
  5965  000E76  6FB8               	movwf	update_LCD_count@direction& (0+255),b
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;Lab8.c: 791: switch (direction)
  5969  000E78  D0B4               	goto	l5273
  5970  000E7A                     l5255:
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;Lab8.c: 794: EW_Count[0] = count/10 + '0';
  5974  000E7A  C0B7  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5975  000E7E  6A10               	clrf	___awdiv@dividend+1,c
  5976  000E80  0E00               	movlw	0
  5977  000E82  6E12               	movwf	___awdiv@divisor+1,c
  5978  000E84  0E0A               	movlw	10
  5979  000E86  6E11               	movwf	___awdiv@divisor,c
  5980  000E88  EC7A  F00E         	call	___awdiv	;wreg free
  5981  000E8C  500F               	movf	?___awdiv,w,c
  5982  000E8E  0F30               	addlw	48
  5983  000E90  6E5F               	movwf	_EW_Count,c
  5984                           
  5985                           ;Lab8.c: 795: EW_Count[1] = count%10 + '0';
  5986  000E92  C0B7  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5987  000E96  6A10               	clrf	___awmod@dividend+1,c
  5988  000E98  0E00               	movlw	0
  5989  000E9A  6E12               	movwf	___awmod@divisor+1,c
  5990  000E9C  0E0A               	movlw	10
  5991  000E9E  6E11               	movwf	___awmod@divisor,c
  5992  000EA0  EC61  F010         	call	___awmod	;wreg free
  5993  000EA4  500F               	movf	?___awmod,w,c
  5994  000EA6  0F30               	addlw	48
  5995  000EA8  6E60               	movwf	_EW_Count+1,c
  5996                           
  5997                           ;Lab8.c: 796: drawtext(100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5998  000EAA  0E5A               	movlw	90
  5999  000EAC  6E37               	movwf	drawtext@y,c
  6000  000EAE  0E5F               	movlw	low _EW_Count
  6001  000EB0  6E38               	movwf	drawtext@_text,c
  6002  000EB2  0E00               	movlw	high _EW_Count
  6003  000EB4  6E39               	movwf	drawtext@_text+1,c
  6004  000EB6  0E07               	movlw	7
  6005  000EB8  6E3B               	movwf	drawtext@color+1,c
  6006  000EBA  683A               	setf	drawtext@color,c
  6007  000EBC  0E00               	movlw	0
  6008  000EBE  6E3D               	movwf	drawtext@bg+1,c
  6009  000EC0  0E00               	movlw	0
  6010  000EC2  6E3C               	movwf	drawtext@bg,c
  6011  000EC4  0E02               	movlw	2
  6012  000EC6  6E3E               	movwf	drawtext@size,c
  6013  000EC8  0E64               	movlw	100
  6014  000ECA  EC10  F00B         	call	_drawtext
  6015                           
  6016                           ;Lab8.c: 797: break;
  6017  000ECE  D098               	goto	l542
  6018  000ED0                     l5259:
  6019                           
  6020                           ;Lab8.c: 799: EWLT_Count[0] = count/10 + '0';
  6021  000ED0  C0B7  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  6022  000ED4  6A10               	clrf	___awdiv@dividend+1,c
  6023  000ED6  0E00               	movlw	0
  6024  000ED8  6E12               	movwf	___awdiv@divisor+1,c
  6025  000EDA  0E0A               	movlw	10
  6026  000EDC  6E11               	movwf	___awdiv@divisor,c
  6027  000EDE  EC7A  F00E         	call	___awdiv	;wreg free
  6028  000EE2  500F               	movf	?___awdiv,w,c
  6029  000EE4  0F30               	addlw	48
  6030  000EE6  0100               	movlb	0	; () banked
  6031  000EE8  6FA1               	movwf	_EWLT_Count& (0+255),b
  6032                           
  6033                           ;Lab8.c: 800: EWLT_Count[1] = count%10 + '0';
  6034  000EEA  C0B7  F00F         	movff	update_LCD_count@count,___awmod@dividend
  6035  000EEE  6A10               	clrf	___awmod@dividend+1,c
  6036  000EF0  0E00               	movlw	0
  6037  000EF2  6E12               	movwf	___awmod@divisor+1,c
  6038  000EF4  0E0A               	movlw	10
  6039  000EF6  6E11               	movwf	___awmod@divisor,c
  6040  000EF8  EC61  F010         	call	___awmod	;wreg free
  6041  000EFC  500F               	movf	?___awmod,w,c
  6042  000EFE  0F30               	addlw	48
  6043  000F00  0100               	movlb	0	; () banked
  6044  000F02  6FA2               	movwf	(_EWLT_Count+1)& (0+255),b
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;Lab8.c: 801: drawtext(100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  6048  000F04  0E78               	movlw	120
  6049  000F06  6E37               	movwf	drawtext@y,c
  6050  000F08  0EA1               	movlw	low _EWLT_Count
  6051  000F0A  6E38               	movwf	drawtext@_text,c
  6052  000F0C  0E00               	movlw	high _EWLT_Count
  6053  000F0E  6E39               	movwf	drawtext@_text+1,c
  6054  000F10  0EFF               	movlw	255
  6055  000F12  6E3B               	movwf	drawtext@color+1,c
  6056  000F14  683A               	setf	drawtext@color,c
  6057  000F16  0E00               	movlw	0
  6058  000F18  6E3D               	movwf	drawtext@bg+1,c
  6059  000F1A  0E00               	movlw	0
  6060  000F1C  6E3C               	movwf	drawtext@bg,c
  6061  000F1E  0E02               	movlw	2
  6062  000F20  6E3E               	movwf	drawtext@size,c
  6063  000F22  0E64               	movlw	100
  6064  000F24  EC10  F00B         	call	_drawtext
  6065                           
  6066                           ;Lab8.c: 802: break;
  6067  000F28  D06B               	goto	l542
  6068  000F2A                     l5263:
  6069                           
  6070                           ;Lab8.c: 804: NS_Count[0] = count/10 + '0';
  6071  000F2A  C0B7  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  6072  000F2E  6A10               	clrf	___awdiv@dividend+1,c
  6073  000F30  0E00               	movlw	0
  6074  000F32  6E12               	movwf	___awdiv@divisor+1,c
  6075  000F34  0E0A               	movlw	10
  6076  000F36  6E11               	movwf	___awdiv@divisor,c
  6077  000F38  EC7A  F00E         	call	___awdiv	;wreg free
  6078  000F3C  500F               	movf	?___awdiv,w,c
  6079  000F3E  0F30               	addlw	48
  6080  000F40  0100               	movlb	0	; () banked
  6081  000F42  6FA7               	movwf	_NS_Count& (0+255),b
  6082                           
  6083                           ;Lab8.c: 805: NS_Count[1] = count%10 + '0';
  6084  000F44  C0B7  F00F         	movff	update_LCD_count@count,___awmod@dividend
  6085  000F48  6A10               	clrf	___awmod@dividend+1,c
  6086  000F4A  0E00               	movlw	0
  6087  000F4C  6E12               	movwf	___awmod@divisor+1,c
  6088  000F4E  0E0A               	movlw	10
  6089  000F50  6E11               	movwf	___awmod@divisor,c
  6090  000F52  EC61  F010         	call	___awmod	;wreg free
  6091  000F56  500F               	movf	?___awmod,w,c
  6092  000F58  0F30               	addlw	48
  6093  000F5A  0100               	movlb	0	; () banked
  6094  000F5C  6FA8               	movwf	(_NS_Count+1)& (0+255),b
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;Lab8.c: 806: drawtext(100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  6098  000F5E  0E1E               	movlw	30
  6099  000F60  6E37               	movwf	drawtext@y,c
  6100  000F62  0EA7               	movlw	low _NS_Count
  6101  000F64  6E38               	movwf	drawtext@_text,c
  6102  000F66  0E00               	movlw	high _NS_Count
  6103  000F68  6E39               	movwf	drawtext@_text+1,c
  6104  000F6A  0E00               	movlw	0
  6105  000F6C  6E3B               	movwf	drawtext@color+1,c
  6106  000F6E  0E1F               	movlw	31
  6107  000F70  6E3A               	movwf	drawtext@color,c
  6108  000F72  0E00               	movlw	0
  6109  000F74  6E3D               	movwf	drawtext@bg+1,c
  6110  000F76  0E00               	movlw	0
  6111  000F78  6E3C               	movwf	drawtext@bg,c
  6112  000F7A  0E02               	movlw	2
  6113  000F7C  6E3E               	movwf	drawtext@size,c
  6114  000F7E  0E64               	movlw	100
  6115  000F80  EC10  F00B         	call	_drawtext
  6116                           
  6117                           ;Lab8.c: 807: break;
  6118  000F84  D03D               	goto	l542
  6119  000F86                     l5267:
  6120                           
  6121                           ;Lab8.c: 809: NSLT_Count[0] = count/10 + '0';
  6122  000F86  C0B7  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  6123  000F8A  6A10               	clrf	___awdiv@dividend+1,c
  6124  000F8C  0E00               	movlw	0
  6125  000F8E  6E12               	movwf	___awdiv@divisor+1,c
  6126  000F90  0E0A               	movlw	10
  6127  000F92  6E11               	movwf	___awdiv@divisor,c
  6128  000F94  EC7A  F00E         	call	___awdiv	;wreg free
  6129  000F98  500F               	movf	?___awdiv,w,c
  6130  000F9A  0F30               	addlw	48
  6131  000F9C  0100               	movlb	0	; () banked
  6132  000F9E  6FA4               	movwf	_NSLT_Count& (0+255),b
  6133                           
  6134                           ;Lab8.c: 810: NSLT_Count[1] = count%10 + '0';
  6135  000FA0  C0B7  F00F         	movff	update_LCD_count@count,___awmod@dividend
  6136  000FA4  6A10               	clrf	___awmod@dividend+1,c
  6137  000FA6  0E00               	movlw	0
  6138  000FA8  6E12               	movwf	___awmod@divisor+1,c
  6139  000FAA  0E0A               	movlw	10
  6140  000FAC  6E11               	movwf	___awmod@divisor,c
  6141  000FAE  EC61  F010         	call	___awmod	;wreg free
  6142  000FB2  500F               	movf	?___awmod,w,c
  6143  000FB4  0F30               	addlw	48
  6144  000FB6  0100               	movlb	0	; () banked
  6145  000FB8  6FA5               	movwf	(_NSLT_Count+1)& (0+255),b
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;Lab8.c: 811: drawtext(100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  6149  000FBA  0E3C               	movlw	60
  6150  000FBC  6E37               	movwf	drawtext@y,c
  6151  000FBE  0EA4               	movlw	low _NSLT_Count
  6152  000FC0  6E38               	movwf	drawtext@_text,c
  6153  000FC2  0E00               	movlw	high _NSLT_Count
  6154  000FC4  6E39               	movwf	drawtext@_text+1,c
  6155  000FC6  0EF8               	movlw	248
  6156  000FC8  6E3B               	movwf	drawtext@color+1,c
  6157  000FCA  0E1F               	movlw	31
  6158  000FCC  6E3A               	movwf	drawtext@color,c
  6159  000FCE  0E00               	movlw	0
  6160  000FD0  6E3D               	movwf	drawtext@bg+1,c
  6161  000FD2  0E00               	movlw	0
  6162  000FD4  6E3C               	movwf	drawtext@bg,c
  6163  000FD6  0E02               	movlw	2
  6164  000FD8  6E3E               	movwf	drawtext@size,c
  6165  000FDA  0E64               	movlw	100
  6166  000FDC  EC10  F00B         	call	_drawtext
  6167                           
  6168                           ;Lab8.c: 813: }
  6169                           
  6170                           ;Lab8.c: 812: break;
  6171  000FE0  D00F               	goto	l542
  6172  000FE2                     l5273:
  6173  000FE2  0100               	movlb	0	; () banked
  6174  000FE4  51B8               	movf	update_LCD_count@direction& (0+255),w,b
  6175                           
  6176                           ; Switch size 1, requested type "space"
  6177                           ; Number of cases is 4, Range of values is 0 to 3
  6178                           ; switch strategies available:
  6179                           ; Name         Instructions Cycles
  6180                           ; simple_byte           13     7 (average)
  6181                           ;	Chosen strategy is simple_byte
  6182  000FE6  0A00               	xorlw	0	; case 0
  6183  000FE8  B4D8               	btfsc	status,2,c
  6184  000FEA  D79F               	goto	l5263
  6185  000FEC  0A01               	xorlw	1	; case 1
  6186  000FEE  B4D8               	btfsc	status,2,c
  6187  000FF0  D7CA               	goto	l5267
  6188  000FF2  0A03               	xorlw	3	; case 2
  6189  000FF4  B4D8               	btfsc	status,2,c
  6190  000FF6  D741               	goto	l5255
  6191  000FF8  0A01               	xorlw	1	; case 3
  6192  000FFA  B4D8               	btfsc	status,2,c
  6193  000FFC  D769               	goto	l5259
  6194  000FFE  D000               	goto	l542
  6195  001000                     l542:
  6196  001000  0012               	return		;funcret
  6197  001002                     __end_of_update_LCD_count:
  6198                           	opt stack 0
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           intcon2	equ	0xFF1
  6207                           intcon3	equ	0xFF0
  6208                           postinc0	equ	0xFEE
  6209                           wreg	equ	0xFE8
  6210                           postdec1	equ	0xFE5
  6211                           fsr1l	equ	0xFE1
  6212                           postinc2	equ	0xFDE
  6213                           postdec2	equ	0xFDD
  6214                           fsr2h	equ	0xFDA
  6215                           fsr2l	equ	0xFD9
  6216                           status	equ	0xFD8
  6217                           
  6218 ;; *************** function _Wait_One_Second *****************
  6219 ;; Defined at:
  6220 ;;		line 689 in file "Lab8.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;		None
  6225 ;; Return value:  Size  Location     Type
  6226 ;;		None               void
  6227 ;; Registers used:
  6228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;Total ram usage:        0 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:   10
  6241 ;; This function calls:
  6242 ;;		_Wait_Half_Second
  6243 ;;		_drawtext
  6244 ;;		_strcpy
  6245 ;;		_update_LCD_misc
  6246 ;; This function is called by:
  6247 ;;		_Do_Flashing
  6248 ;;		_Wait_N_Seconds
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           	psect	text25
  6253  002040                     __ptext25:
  6254                           	opt stack 0
  6255  002040                     _Wait_One_Second:
  6256                           	opt stack 18
  6257                           
  6258                           ;Lab8.c: 691: PORTDbits.RD7 = 1;
  6259                           
  6260                           ;incstack = 0
  6261  002040  8E83               	bsf	3971,7,c	;volatile
  6262                           
  6263                           ;Lab8.c: 692: strcpy(txt,"*");
  6264  002042  C04C  F00F         	movff	_txt,strcpy@to
  6265  002046  C04D  F010         	movff	_txt+1,strcpy@to+1
  6266  00204A  0EFC               	movlw	low STR_5
  6267  00204C  6E11               	movwf	strcpy@from,c
  6268  00204E  0EFF               	movlw	high STR_5
  6269  002050  6E12               	movwf	strcpy@from+1,c
  6270  002052  EC9D  F013         	call	_strcpy	;wreg free
  6271                           
  6272                           ;Lab8.c: 693: drawtext(120,10,txt,0xFFFF,0x0000,1);
  6273  002056  0E0A               	movlw	10
  6274  002058  6E37               	movwf	drawtext@y,c
  6275  00205A  C04C  F038         	movff	_txt,drawtext@_text
  6276  00205E  C04D  F039         	movff	_txt+1,drawtext@_text+1
  6277  002062  0EFF               	movlw	255
  6278  002064  6E3B               	movwf	drawtext@color+1,c
  6279  002066  683A               	setf	drawtext@color,c
  6280  002068  0E00               	movlw	0
  6281  00206A  6E3D               	movwf	drawtext@bg+1,c
  6282  00206C  0E00               	movlw	0
  6283  00206E  6E3C               	movwf	drawtext@bg,c
  6284  002070  0E01               	movlw	1
  6285  002072  6E3E               	movwf	drawtext@size,c
  6286  002074  0E78               	movlw	120
  6287  002076  EC10  F00B         	call	_drawtext
  6288                           
  6289                           ;Lab8.c: 694: Wait_Half_Second();
  6290  00207A  EC18  F014         	call	_Wait_Half_Second	;wreg free
  6291                           
  6292                           ;Lab8.c: 696: PORTDbits.RD7 = 0;
  6293  00207E  9E83               	bcf	3971,7,c	;volatile
  6294                           
  6295                           ;Lab8.c: 697: strcpy(txt," ");
  6296  002080  C04C  F00F         	movff	_txt,strcpy@to
  6297  002084  C04D  F010         	movff	_txt+1,strcpy@to+1
  6298  002088  0EFA               	movlw	low STR_17
  6299  00208A  6E11               	movwf	strcpy@from,c
  6300  00208C  0EFF               	movlw	high STR_17
  6301  00208E  6E12               	movwf	strcpy@from+1,c
  6302  002090  EC9D  F013         	call	_strcpy	;wreg free
  6303                           
  6304                           ;Lab8.c: 698: drawtext(120,10,txt,0xFFFF,0x0000,1);
  6305  002094  0E0A               	movlw	10
  6306  002096  6E37               	movwf	drawtext@y,c
  6307  002098  C04C  F038         	movff	_txt,drawtext@_text
  6308  00209C  C04D  F039         	movff	_txt+1,drawtext@_text+1
  6309  0020A0  0EFF               	movlw	255
  6310  0020A2  6E3B               	movwf	drawtext@color+1,c
  6311  0020A4  683A               	setf	drawtext@color,c
  6312  0020A6  0E00               	movlw	0
  6313  0020A8  6E3D               	movwf	drawtext@bg+1,c
  6314  0020AA  0E00               	movlw	0
  6315  0020AC  6E3C               	movwf	drawtext@bg,c
  6316  0020AE  0E01               	movlw	1
  6317  0020B0  6E3E               	movwf	drawtext@size,c
  6318  0020B2  0E78               	movlw	120
  6319  0020B4  EC10  F00B         	call	_drawtext
  6320                           
  6321                           ;Lab8.c: 699: Wait_Half_Second();
  6322  0020B8  EC18  F014         	call	_Wait_Half_Second	;wreg free
  6323                           
  6324                           ;Lab8.c: 700: update_LCD_misc();
  6325  0020BC  EC56  F005         	call	_update_LCD_misc	;wreg free
  6326  0020C0  0012               	return		;funcret
  6327  0020C2                     __end_of_Wait_One_Second:
  6328                           	opt stack 0
  6329                           tblptru	equ	0xFF8
  6330                           tblptrh	equ	0xFF7
  6331                           tblptrl	equ	0xFF6
  6332                           tablat	equ	0xFF5
  6333                           prodh	equ	0xFF4
  6334                           prodl	equ	0xFF3
  6335                           intcon	equ	0xFF2
  6336                           intcon2	equ	0xFF1
  6337                           intcon3	equ	0xFF0
  6338                           postinc0	equ	0xFEE
  6339                           wreg	equ	0xFE8
  6340                           postdec1	equ	0xFE5
  6341                           fsr1l	equ	0xFE1
  6342                           postinc2	equ	0xFDE
  6343                           postdec2	equ	0xFDD
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _Set_NS_LT *****************
  6349 ;; Defined at:
  6350 ;;		line 471 in file "Lab8.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  color           1    wreg     unsigned char 
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;  color           1    3[BANK0 ] unsigned char 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;		None               void
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;Total ram usage:        1 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    9
  6371 ;; This function calls:
  6372 ;;		_update_LCD_color
  6373 ;; This function is called by:
  6374 ;;		_Do_Flashing
  6375 ;;		_Day_Mode
  6376 ;;		_Night_Mode
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           	psect	text26
  6381  00251E                     __ptext26:
  6382                           	opt stack 0
  6383  00251E                     _Set_NS_LT:
  6384                           	opt stack 20
  6385                           
  6386                           ;incstack = 0
  6387                           ;Set_NS_LT@color stored from wreg
  6388  00251E  0100               	movlb	0	; () banked
  6389  002520  6FB3               	movwf	Set_NS_LT@color& (0+255),b
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;Lab8.c: 473: direction = 1;
  6393  002522  0E01               	movlw	1
  6394  002524  6E5C               	movwf	_direction,c
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;Lab8.c: 474: update_LCD_color(direction, color);
  6398  002526  C0B3  F0B0         	movff	Set_NS_LT@color,update_LCD_color@color
  6399  00252A  505C               	movf	_direction,w,c
  6400  00252C  EC9D  F003         	call	_update_LCD_color
  6401                           
  6402                           ;Lab8.c: 476: switch (color)
  6403  002530  D00A               	goto	l5369
  6404  002532                     l458:
  6405                           
  6406                           ; BSR set to: 0
  6407  002532  9082               	bcf	3970,0,c	;volatile
  6408  002534  D001               	goto	L2
  6409  002536                     l460:
  6410                           
  6411                           ; BSR set to: 0
  6412  002536  8082               	bsf	3970,0,c	;volatile
  6413  002538                     L2:
  6414  002538  9282               	bcf	3970,1,c	;volatile
  6415  00253A  D014               	goto	l463
  6416  00253C                     l461:
  6417                           
  6418                           ; BSR set to: 0
  6419  00253C  9082               	bcf	3970,0,c	;volatile
  6420  00253E  D001               	goto	L3
  6421  002540                     l462:
  6422                           
  6423                           ; BSR set to: 0
  6424  002540  8082               	bsf	3970,0,c	;volatile
  6425  002542                     L3:
  6426  002542  8282               	bsf	3970,1,c	;volatile
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;Lab8.c: 482: }
  6430  002544  D00F               	goto	l463
  6431  002546                     l5369:
  6432  002546  0100               	movlb	0	; () banked
  6433  002548  51B3               	movf	Set_NS_LT@color& (0+255),w,b
  6434                           
  6435                           ; Switch size 1, requested type "space"
  6436                           ; Number of cases is 4, Range of values is 0 to 3
  6437                           ; switch strategies available:
  6438                           ; Name         Instructions Cycles
  6439                           ; simple_byte           13     7 (average)
  6440                           ;	Chosen strategy is simple_byte
  6441  00254A  0A00               	xorlw	0	; case 0
  6442  00254C  B4D8               	btfsc	status,2,c
  6443  00254E  D7F1               	goto	l458
  6444  002550  0A01               	xorlw	1	; case 1
  6445  002552  B4D8               	btfsc	status,2,c
  6446  002554  D7F0               	goto	l460
  6447  002556  0A03               	xorlw	3	; case 2
  6448  002558  B4D8               	btfsc	status,2,c
  6449  00255A  D7F0               	goto	l461
  6450  00255C  0A01               	xorlw	1	; case 3
  6451  00255E  B4D8               	btfsc	status,2,c
  6452  002560  D7EF               	goto	l462
  6453  002562  D000               	goto	l463
  6454  002564                     l463:
  6455                           
  6456                           ; BSR set to: 0
  6457  002564  0012               	return		;funcret
  6458  002566                     __end_of_Set_NS_LT:
  6459                           	opt stack 0
  6460                           tblptru	equ	0xFF8
  6461                           tblptrh	equ	0xFF7
  6462                           tblptrl	equ	0xFF6
  6463                           tablat	equ	0xFF5
  6464                           prodh	equ	0xFF4
  6465                           prodl	equ	0xFF3
  6466                           intcon	equ	0xFF2
  6467                           intcon2	equ	0xFF1
  6468                           intcon3	equ	0xFF0
  6469                           postinc0	equ	0xFEE
  6470                           wreg	equ	0xFE8
  6471                           postdec1	equ	0xFE5
  6472                           fsr1l	equ	0xFE1
  6473                           postinc2	equ	0xFDE
  6474                           postdec2	equ	0xFDD
  6475                           fsr2h	equ	0xFDA
  6476                           fsr2l	equ	0xFD9
  6477                           status	equ	0xFD8
  6478                           
  6479 ;; *************** function _Set_NS *****************
  6480 ;; Defined at:
  6481 ;;		line 457 in file "Lab8.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  color           1    wreg     unsigned char 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  color           1    3[BANK0 ] unsigned char 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;		None               void
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;Total ram usage:        1 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    9
  6502 ;; This function calls:
  6503 ;;		_update_LCD_color
  6504 ;; This function is called by:
  6505 ;;		_Do_Flashing
  6506 ;;		_Day_Mode
  6507 ;;		_Night_Mode
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text27
  6512  002566                     __ptext27:
  6513                           	opt stack 0
  6514  002566                     _Set_NS:
  6515                           	opt stack 20
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;incstack = 0
  6519                           ;Set_NS@color stored from wreg
  6520  002566  0100               	movlb	0	; () banked
  6521  002568  6FB3               	movwf	Set_NS@color& (0+255),b
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;Lab8.c: 459: direction = 0;
  6525  00256A  0E00               	movlw	0
  6526  00256C  6E5C               	movwf	_direction,c
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;Lab8.c: 460: update_LCD_color(direction, color);
  6530  00256E  C0B3  F0B0         	movff	Set_NS@color,update_LCD_color@color
  6531  002572  505C               	movf	_direction,w,c
  6532  002574  EC9D  F003         	call	_update_LCD_color
  6533                           
  6534                           ;Lab8.c: 462: switch (color)
  6535  002578  D00A               	goto	l5361
  6536  00257A                     l449:
  6537                           
  6538                           ; BSR set to: 0
  6539  00257A  9881               	bcf	3969,4,c	;volatile
  6540  00257C  D001               	goto	L4
  6541  00257E                     l451:
  6542                           
  6543                           ; BSR set to: 0
  6544  00257E  8881               	bsf	3969,4,c	;volatile
  6545  002580                     L4:
  6546  002580  9A81               	bcf	3969,5,c	;volatile
  6547  002582  D014               	goto	l454
  6548  002584                     l452:
  6549                           
  6550                           ; BSR set to: 0
  6551  002584  9881               	bcf	3969,4,c	;volatile
  6552  002586  D001               	goto	L5
  6553  002588                     l453:
  6554                           
  6555                           ; BSR set to: 0
  6556  002588  8881               	bsf	3969,4,c	;volatile
  6557  00258A                     L5:
  6558  00258A  8A81               	bsf	3969,5,c	;volatile
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;Lab8.c: 468: }
  6562  00258C  D00F               	goto	l454
  6563  00258E                     l5361:
  6564  00258E  0100               	movlb	0	; () banked
  6565  002590  51B3               	movf	Set_NS@color& (0+255),w,b
  6566                           
  6567                           ; Switch size 1, requested type "space"
  6568                           ; Number of cases is 4, Range of values is 0 to 3
  6569                           ; switch strategies available:
  6570                           ; Name         Instructions Cycles
  6571                           ; simple_byte           13     7 (average)
  6572                           ;	Chosen strategy is simple_byte
  6573  002592  0A00               	xorlw	0	; case 0
  6574  002594  B4D8               	btfsc	status,2,c
  6575  002596  D7F1               	goto	l449
  6576  002598  0A01               	xorlw	1	; case 1
  6577  00259A  B4D8               	btfsc	status,2,c
  6578  00259C  D7F0               	goto	l451
  6579  00259E  0A03               	xorlw	3	; case 2
  6580  0025A0  B4D8               	btfsc	status,2,c
  6581  0025A2  D7F0               	goto	l452
  6582  0025A4  0A01               	xorlw	1	; case 3
  6583  0025A6  B4D8               	btfsc	status,2,c
  6584  0025A8  D7EF               	goto	l453
  6585  0025AA  D000               	goto	l454
  6586  0025AC                     l454:
  6587                           
  6588                           ; BSR set to: 0
  6589  0025AC  0012               	return		;funcret
  6590  0025AE                     __end_of_Set_NS:
  6591                           	opt stack 0
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           intcon	equ	0xFF2
  6599                           intcon2	equ	0xFF1
  6600                           intcon3	equ	0xFF0
  6601                           postinc0	equ	0xFEE
  6602                           wreg	equ	0xFE8
  6603                           postdec1	equ	0xFE5
  6604                           fsr1l	equ	0xFE1
  6605                           postinc2	equ	0xFDE
  6606                           postdec2	equ	0xFDD
  6607                           fsr2h	equ	0xFDA
  6608                           fsr2l	equ	0xFD9
  6609                           status	equ	0xFD8
  6610                           
  6611 ;; *************** function _Set_EW_LT *****************
  6612 ;; Defined at:
  6613 ;;		line 499 in file "Lab8.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  color           1    wreg     unsigned char 
  6616 ;; Auto vars:     Size  Location     Type
  6617 ;;  color           1    3[BANK0 ] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;		None               void
  6620 ;; Registers used:
  6621 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;Total ram usage:        1 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    9
  6634 ;; This function calls:
  6635 ;;		_update_LCD_color
  6636 ;; This function is called by:
  6637 ;;		_Do_Flashing
  6638 ;;		_Day_Mode
  6639 ;;		_Night_Mode
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           	psect	text28
  6644  0025AE                     __ptext28:
  6645                           	opt stack 0
  6646  0025AE                     _Set_EW_LT:
  6647                           	opt stack 20
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;incstack = 0
  6651                           ;Set_EW_LT@color stored from wreg
  6652  0025AE  0100               	movlb	0	; () banked
  6653  0025B0  6FB3               	movwf	Set_EW_LT@color& (0+255),b
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;Lab8.c: 501: direction = 3;
  6657  0025B2  0E03               	movlw	3
  6658  0025B4  6E5C               	movwf	_direction,c
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;Lab8.c: 502: update_LCD_color(direction, color);
  6662  0025B6  C0B3  F0B0         	movff	Set_EW_LT@color,update_LCD_color@color
  6663  0025BA  505C               	movf	_direction,w,c
  6664  0025BC  EC9D  F003         	call	_update_LCD_color
  6665                           
  6666                           ;Lab8.c: 504: switch (color)
  6667  0025C0  D00A               	goto	l5385
  6668  0025C2                     l476:
  6669                           
  6670                           ; BSR set to: 0
  6671  0025C2  9284               	bcf	3972,1,c	;volatile
  6672  0025C4  D001               	goto	L6
  6673  0025C6                     l478:
  6674                           
  6675                           ; BSR set to: 0
  6676  0025C6  8284               	bsf	3972,1,c	;volatile
  6677  0025C8                     L6:
  6678  0025C8  9484               	bcf	3972,2,c	;volatile
  6679  0025CA  D014               	goto	l481
  6680  0025CC                     l479:
  6681                           
  6682                           ; BSR set to: 0
  6683  0025CC  9284               	bcf	3972,1,c	;volatile
  6684  0025CE  D001               	goto	L7
  6685  0025D0                     l480:
  6686                           
  6687                           ; BSR set to: 0
  6688  0025D0  8284               	bsf	3972,1,c	;volatile
  6689  0025D2                     L7:
  6690  0025D2  8484               	bsf	3972,2,c	;volatile
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;Lab8.c: 510: }
  6694  0025D4  D00F               	goto	l481
  6695  0025D6                     l5385:
  6696  0025D6  0100               	movlb	0	; () banked
  6697  0025D8  51B3               	movf	Set_EW_LT@color& (0+255),w,b
  6698                           
  6699                           ; Switch size 1, requested type "space"
  6700                           ; Number of cases is 4, Range of values is 0 to 3
  6701                           ; switch strategies available:
  6702                           ; Name         Instructions Cycles
  6703                           ; simple_byte           13     7 (average)
  6704                           ;	Chosen strategy is simple_byte
  6705  0025DA  0A00               	xorlw	0	; case 0
  6706  0025DC  B4D8               	btfsc	status,2,c
  6707  0025DE  D7F1               	goto	l476
  6708  0025E0  0A01               	xorlw	1	; case 1
  6709  0025E2  B4D8               	btfsc	status,2,c
  6710  0025E4  D7F0               	goto	l478
  6711  0025E6  0A03               	xorlw	3	; case 2
  6712  0025E8  B4D8               	btfsc	status,2,c
  6713  0025EA  D7F0               	goto	l479
  6714  0025EC  0A01               	xorlw	1	; case 3
  6715  0025EE  B4D8               	btfsc	status,2,c
  6716  0025F0  D7EF               	goto	l480
  6717  0025F2  D000               	goto	l481
  6718  0025F4                     l481:
  6719                           
  6720                           ; BSR set to: 0
  6721  0025F4  0012               	return		;funcret
  6722  0025F6                     __end_of_Set_EW_LT:
  6723                           	opt stack 0
  6724                           tblptru	equ	0xFF8
  6725                           tblptrh	equ	0xFF7
  6726                           tblptrl	equ	0xFF6
  6727                           tablat	equ	0xFF5
  6728                           prodh	equ	0xFF4
  6729                           prodl	equ	0xFF3
  6730                           intcon	equ	0xFF2
  6731                           intcon2	equ	0xFF1
  6732                           intcon3	equ	0xFF0
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           postdec1	equ	0xFE5
  6736                           fsr1l	equ	0xFE1
  6737                           postinc2	equ	0xFDE
  6738                           postdec2	equ	0xFDD
  6739                           fsr2h	equ	0xFDA
  6740                           fsr2l	equ	0xFD9
  6741                           status	equ	0xFD8
  6742                           
  6743 ;; *************** function _Set_EW *****************
  6744 ;; Defined at:
  6745 ;;		line 485 in file "Lab8.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;  color           1    wreg     unsigned char 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  color           1    3[BANK0 ] unsigned char 
  6750 ;; Return value:  Size  Location     Type
  6751 ;;		None               void
  6752 ;; Registers used:
  6753 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;Total ram usage:        1 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    9
  6766 ;; This function calls:
  6767 ;;		_update_LCD_color
  6768 ;; This function is called by:
  6769 ;;		_Do_Flashing
  6770 ;;		_Day_Mode
  6771 ;;		_Night_Mode
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text29
  6776  0025F6                     __ptext29:
  6777                           	opt stack 0
  6778  0025F6                     _Set_EW:
  6779                           	opt stack 20
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;incstack = 0
  6783                           ;Set_EW@color stored from wreg
  6784  0025F6  0100               	movlb	0	; () banked
  6785  0025F8  6FB3               	movwf	Set_EW@color& (0+255),b
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;Lab8.c: 487: direction = 2;
  6789  0025FA  0E02               	movlw	2
  6790  0025FC  6E5C               	movwf	_direction,c
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;Lab8.c: 488: update_LCD_color(direction, color);
  6794  0025FE  C0B3  F0B0         	movff	Set_EW@color,update_LCD_color@color
  6795  002602  505C               	movf	_direction,w,c
  6796  002604  EC9D  F003         	call	_update_LCD_color
  6797                           
  6798                           ;Lab8.c: 490: switch (color)
  6799  002608  D00A               	goto	l5377
  6800  00260A                     l467:
  6801                           
  6802                           ; BSR set to: 0
  6803  00260A  9083               	bcf	3971,0,c	;volatile
  6804  00260C  D001               	goto	L8
  6805  00260E                     l469:
  6806                           
  6807                           ; BSR set to: 0
  6808  00260E  8083               	bsf	3971,0,c	;volatile
  6809  002610                     L8:
  6810  002610  9283               	bcf	3971,1,c	;volatile
  6811  002612  D014               	goto	l472
  6812  002614                     l470:
  6813                           
  6814                           ; BSR set to: 0
  6815  002614  9083               	bcf	3971,0,c	;volatile
  6816  002616  D001               	goto	L9
  6817  002618                     l471:
  6818                           
  6819                           ; BSR set to: 0
  6820  002618  8083               	bsf	3971,0,c	;volatile
  6821  00261A                     L9:
  6822  00261A  8283               	bsf	3971,1,c	;volatile
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;Lab8.c: 496: }
  6826  00261C  D00F               	goto	l472
  6827  00261E                     l5377:
  6828  00261E  0100               	movlb	0	; () banked
  6829  002620  51B3               	movf	Set_EW@color& (0+255),w,b
  6830                           
  6831                           ; Switch size 1, requested type "space"
  6832                           ; Number of cases is 4, Range of values is 0 to 3
  6833                           ; switch strategies available:
  6834                           ; Name         Instructions Cycles
  6835                           ; simple_byte           13     7 (average)
  6836                           ;	Chosen strategy is simple_byte
  6837  002622  0A00               	xorlw	0	; case 0
  6838  002624  B4D8               	btfsc	status,2,c
  6839  002626  D7F1               	goto	l467
  6840  002628  0A01               	xorlw	1	; case 1
  6841  00262A  B4D8               	btfsc	status,2,c
  6842  00262C  D7F0               	goto	l469
  6843  00262E  0A03               	xorlw	3	; case 2
  6844  002630  B4D8               	btfsc	status,2,c
  6845  002632  D7F0               	goto	l470
  6846  002634  0A01               	xorlw	1	; case 3
  6847  002636  B4D8               	btfsc	status,2,c
  6848  002638  D7EF               	goto	l471
  6849  00263A  D000               	goto	l472
  6850  00263C                     l472:
  6851                           
  6852                           ; BSR set to: 0
  6853  00263C  0012               	return		;funcret
  6854  00263E                     __end_of_Set_EW:
  6855                           	opt stack 0
  6856                           tblptru	equ	0xFF8
  6857                           tblptrh	equ	0xFF7
  6858                           tblptrl	equ	0xFF6
  6859                           tablat	equ	0xFF5
  6860                           prodh	equ	0xFF4
  6861                           prodl	equ	0xFF3
  6862                           intcon	equ	0xFF2
  6863                           intcon2	equ	0xFF1
  6864                           intcon3	equ	0xFF0
  6865                           postinc0	equ	0xFEE
  6866                           wreg	equ	0xFE8
  6867                           postdec1	equ	0xFE5
  6868                           fsr1l	equ	0xFE1
  6869                           postinc2	equ	0xFDE
  6870                           postdec2	equ	0xFDD
  6871                           fsr2h	equ	0xFDA
  6872                           fsr2l	equ	0xFD9
  6873                           status	equ	0xFD8
  6874                           
  6875 ;; *************** function _update_LCD_color *****************
  6876 ;; Defined at:
  6877 ;;		line 742 in file "Lab8.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  direction       1    wreg     unsigned char 
  6880 ;;  color           1    0[BANK0 ] unsigned char 
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;  direction       1    1[BANK0 ] unsigned char 
  6883 ;;  Circle_Y        1    2[BANK0 ] unsigned char 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;		None               void
  6886 ;; Registers used:
  6887 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6893 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;Total ram usage:        3 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    8
  6900 ;; This function calls:
  6901 ;;		_drawCircle
  6902 ;;		_fillCircle
  6903 ;; This function is called by:
  6904 ;;		_Set_NS
  6905 ;;		_Set_NS_LT
  6906 ;;		_Set_EW
  6907 ;;		_Set_EW_LT
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           	psect	text30
  6912  00073A                     __ptext30:
  6913                           	opt stack 0
  6914  00073A                     _update_LCD_color:
  6915                           	opt stack 20
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;incstack = 0
  6919                           ;update_LCD_color@direction stored from wreg
  6920  00073A  0100               	movlb	0	; () banked
  6921  00073C  6FB1               	movwf	update_LCD_color@direction& (0+255),b
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;Lab8.c: 744: char Circle_Y;
  6925                           ;Lab8.c: 745: Circle_Y = 80 + 15 + direction * 30;
  6926  00073E  0100               	movlb	0	; () banked
  6927  000740  51B1               	movf	update_LCD_color@direction& (0+255),w,b
  6928  000742  0D1E               	mullw	30
  6929  000744  50F3               	movf	prodl,w,c
  6930  000746  0F5F               	addlw	95
  6931  000748  0100               	movlb	0	; () banked
  6932  00074A  6FB2               	movwf	update_LCD_color@Circle_Y& (0+255),b
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;Lab8.c: 747: if (color == 0)
  6936  00074C  0100               	movlb	0	; () banked
  6937  00074E  51B0               	movf	update_LCD_color@color& (0+255),w,b
  6938  000750  0100               	movlb	0	; () banked
  6939  000752  A4D8               	btfss	status,2,c
  6940  000754  D067               	goto	l5209
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;Lab8.c: 748: {
  6944                           ;Lab8.c: 749: fillCircle(40, Circle_Y, 7, 0x0000);
  6945  000756  0E00               	movlw	0
  6946  000758  6E3A               	movwf	fillCircle@x0+1,c
  6947  00075A  0E28               	movlw	40
  6948  00075C  6E39               	movwf	fillCircle@x0,c
  6949  00075E  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6950  000762  6A3C               	clrf	fillCircle@y0+1,c
  6951  000764  0E00               	movlw	0
  6952  000766  6E3E               	movwf	fillCircle@r+1,c
  6953  000768  0E07               	movlw	7
  6954  00076A  6E3D               	movwf	fillCircle@r,c
  6955  00076C  0E00               	movlw	0
  6956  00076E  6E40               	movwf	fillCircle@color+1,c
  6957  000770  0E00               	movlw	0
  6958  000772  6E3F               	movwf	fillCircle@color,c
  6959  000774  ECF4  F011         	call	_fillCircle	;wreg free
  6960                           
  6961                           ;Lab8.c: 750: fillCircle(60, Circle_Y, 7, 0x0000);
  6962  000778  0E00               	movlw	0
  6963  00077A  6E3A               	movwf	fillCircle@x0+1,c
  6964  00077C  0E3C               	movlw	60
  6965  00077E  6E39               	movwf	fillCircle@x0,c
  6966  000780  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6967  000784  6A3C               	clrf	fillCircle@y0+1,c
  6968  000786  0E00               	movlw	0
  6969  000788  6E3E               	movwf	fillCircle@r+1,c
  6970  00078A  0E07               	movlw	7
  6971  00078C  6E3D               	movwf	fillCircle@r,c
  6972  00078E  0E00               	movlw	0
  6973  000790  6E40               	movwf	fillCircle@color+1,c
  6974  000792  0E00               	movlw	0
  6975  000794  6E3F               	movwf	fillCircle@color,c
  6976  000796  ECF4  F011         	call	_fillCircle	;wreg free
  6977                           
  6978                           ;Lab8.c: 751: fillCircle(80, Circle_Y, 7, 0x0000);
  6979  00079A  0E00               	movlw	0
  6980  00079C  6E3A               	movwf	fillCircle@x0+1,c
  6981  00079E  0E50               	movlw	80
  6982  0007A0  6E39               	movwf	fillCircle@x0,c
  6983  0007A2  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6984  0007A6  6A3C               	clrf	fillCircle@y0+1,c
  6985  0007A8  0E00               	movlw	0
  6986  0007AA  6E3E               	movwf	fillCircle@r+1,c
  6987  0007AC  0E07               	movlw	7
  6988  0007AE  6E3D               	movwf	fillCircle@r,c
  6989  0007B0  0E00               	movlw	0
  6990  0007B2  6E40               	movwf	fillCircle@color+1,c
  6991  0007B4  0E00               	movlw	0
  6992  0007B6  6E3F               	movwf	fillCircle@color,c
  6993  0007B8  ECF4  F011         	call	_fillCircle	;wreg free
  6994                           
  6995                           ;Lab8.c: 752: drawCircle(40, Circle_Y, 7, 0xF800);
  6996  0007BC  0E00               	movlw	0
  6997  0007BE  6E1B               	movwf	drawCircle@x0+1,c
  6998  0007C0  0E28               	movlw	40
  6999  0007C2  6E1A               	movwf	drawCircle@x0,c
  7000  0007C4  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7001  0007C8  6A1D               	clrf	drawCircle@y0+1,c
  7002  0007CA  0E00               	movlw	0
  7003  0007CC  6E1F               	movwf	drawCircle@r+1,c
  7004  0007CE  0E07               	movlw	7
  7005  0007D0  6E1E               	movwf	drawCircle@r,c
  7006  0007D2  0EF8               	movlw	248
  7007  0007D4  6E21               	movwf	drawCircle@color+1,c
  7008  0007D6  0E00               	movlw	0
  7009  0007D8  6E20               	movwf	drawCircle@color,c
  7010  0007DA  EC63  F006         	call	_drawCircle	;wreg free
  7011                           
  7012                           ;Lab8.c: 753: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7013  0007DE  0E00               	movlw	0
  7014  0007E0  6E1B               	movwf	drawCircle@x0+1,c
  7015  0007E2  0E3C               	movlw	60
  7016  0007E4  6E1A               	movwf	drawCircle@x0,c
  7017  0007E6  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7018  0007EA  6A1D               	clrf	drawCircle@y0+1,c
  7019  0007EC  0E00               	movlw	0
  7020  0007EE  6E1F               	movwf	drawCircle@r+1,c
  7021  0007F0  0E07               	movlw	7
  7022  0007F2  6E1E               	movwf	drawCircle@r,c
  7023  0007F4  0EFF               	movlw	255
  7024  0007F6  6E21               	movwf	drawCircle@color+1,c
  7025  0007F8  0EE0               	movlw	224
  7026  0007FA  6E20               	movwf	drawCircle@color,c
  7027  0007FC  EC63  F006         	call	_drawCircle	;wreg free
  7028                           
  7029                           ;Lab8.c: 754: drawCircle(80, Circle_Y, 7, 0x07E0);
  7030  000800  0E00               	movlw	0
  7031  000802  6E1B               	movwf	drawCircle@x0+1,c
  7032  000804  0E50               	movlw	80
  7033  000806  6E1A               	movwf	drawCircle@x0,c
  7034  000808  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7035  00080C  6A1D               	clrf	drawCircle@y0+1,c
  7036  00080E  0E00               	movlw	0
  7037  000810  6E1F               	movwf	drawCircle@r+1,c
  7038  000812  0E07               	movlw	7
  7039  000814  6E1E               	movwf	drawCircle@r,c
  7040  000816  0E07               	movlw	7
  7041  000818  6E21               	movwf	drawCircle@color+1,c
  7042  00081A  0EE0               	movlw	224
  7043  00081C  6E20               	movwf	drawCircle@color,c
  7044  00081E  EC63  F006         	call	_drawCircle	;wreg free
  7045  000822  D000               	goto	l5209
  7046  000824                     l5209:
  7047                           
  7048                           ;Lab8.c: 755: }
  7049                           ;Lab8.c: 758: if (color == 1)
  7050  000824  0100               	movlb	0	; () banked
  7051  000826  05B0               	decf	update_LCD_color@color& (0+255),w,b
  7052  000828  A4D8               	btfss	status,2,c
  7053  00082A  D067               	goto	l5213
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;Lab8.c: 759: {
  7057                           ;Lab8.c: 760: fillCircle(40, Circle_Y, 7, 0xF800);
  7058  00082C  0E00               	movlw	0
  7059  00082E  6E3A               	movwf	fillCircle@x0+1,c
  7060  000830  0E28               	movlw	40
  7061  000832  6E39               	movwf	fillCircle@x0,c
  7062  000834  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7063  000838  6A3C               	clrf	fillCircle@y0+1,c
  7064  00083A  0E00               	movlw	0
  7065  00083C  6E3E               	movwf	fillCircle@r+1,c
  7066  00083E  0E07               	movlw	7
  7067  000840  6E3D               	movwf	fillCircle@r,c
  7068  000842  0EF8               	movlw	248
  7069  000844  6E40               	movwf	fillCircle@color+1,c
  7070  000846  0E00               	movlw	0
  7071  000848  6E3F               	movwf	fillCircle@color,c
  7072  00084A  ECF4  F011         	call	_fillCircle	;wreg free
  7073                           
  7074                           ;Lab8.c: 761: fillCircle(60, Circle_Y, 7, 0x0000);
  7075  00084E  0E00               	movlw	0
  7076  000850  6E3A               	movwf	fillCircle@x0+1,c
  7077  000852  0E3C               	movlw	60
  7078  000854  6E39               	movwf	fillCircle@x0,c
  7079  000856  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7080  00085A  6A3C               	clrf	fillCircle@y0+1,c
  7081  00085C  0E00               	movlw	0
  7082  00085E  6E3E               	movwf	fillCircle@r+1,c
  7083  000860  0E07               	movlw	7
  7084  000862  6E3D               	movwf	fillCircle@r,c
  7085  000864  0E00               	movlw	0
  7086  000866  6E40               	movwf	fillCircle@color+1,c
  7087  000868  0E00               	movlw	0
  7088  00086A  6E3F               	movwf	fillCircle@color,c
  7089  00086C  ECF4  F011         	call	_fillCircle	;wreg free
  7090                           
  7091                           ;Lab8.c: 762: fillCircle(80, Circle_Y, 7, 0x0000);
  7092  000870  0E00               	movlw	0
  7093  000872  6E3A               	movwf	fillCircle@x0+1,c
  7094  000874  0E50               	movlw	80
  7095  000876  6E39               	movwf	fillCircle@x0,c
  7096  000878  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7097  00087C  6A3C               	clrf	fillCircle@y0+1,c
  7098  00087E  0E00               	movlw	0
  7099  000880  6E3E               	movwf	fillCircle@r+1,c
  7100  000882  0E07               	movlw	7
  7101  000884  6E3D               	movwf	fillCircle@r,c
  7102  000886  0E00               	movlw	0
  7103  000888  6E40               	movwf	fillCircle@color+1,c
  7104  00088A  0E00               	movlw	0
  7105  00088C  6E3F               	movwf	fillCircle@color,c
  7106  00088E  ECF4  F011         	call	_fillCircle	;wreg free
  7107                           
  7108                           ;Lab8.c: 763: drawCircle(40, Circle_Y, 7, 0xF800);
  7109  000892  0E00               	movlw	0
  7110  000894  6E1B               	movwf	drawCircle@x0+1,c
  7111  000896  0E28               	movlw	40
  7112  000898  6E1A               	movwf	drawCircle@x0,c
  7113  00089A  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7114  00089E  6A1D               	clrf	drawCircle@y0+1,c
  7115  0008A0  0E00               	movlw	0
  7116  0008A2  6E1F               	movwf	drawCircle@r+1,c
  7117  0008A4  0E07               	movlw	7
  7118  0008A6  6E1E               	movwf	drawCircle@r,c
  7119  0008A8  0EF8               	movlw	248
  7120  0008AA  6E21               	movwf	drawCircle@color+1,c
  7121  0008AC  0E00               	movlw	0
  7122  0008AE  6E20               	movwf	drawCircle@color,c
  7123  0008B0  EC63  F006         	call	_drawCircle	;wreg free
  7124                           
  7125                           ;Lab8.c: 764: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7126  0008B4  0E00               	movlw	0
  7127  0008B6  6E1B               	movwf	drawCircle@x0+1,c
  7128  0008B8  0E3C               	movlw	60
  7129  0008BA  6E1A               	movwf	drawCircle@x0,c
  7130  0008BC  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7131  0008C0  6A1D               	clrf	drawCircle@y0+1,c
  7132  0008C2  0E00               	movlw	0
  7133  0008C4  6E1F               	movwf	drawCircle@r+1,c
  7134  0008C6  0E07               	movlw	7
  7135  0008C8  6E1E               	movwf	drawCircle@r,c
  7136  0008CA  0EFF               	movlw	255
  7137  0008CC  6E21               	movwf	drawCircle@color+1,c
  7138  0008CE  0EE0               	movlw	224
  7139  0008D0  6E20               	movwf	drawCircle@color,c
  7140  0008D2  EC63  F006         	call	_drawCircle	;wreg free
  7141                           
  7142                           ;Lab8.c: 765: drawCircle(80, Circle_Y, 7, 0x07E0);
  7143  0008D6  0E00               	movlw	0
  7144  0008D8  6E1B               	movwf	drawCircle@x0+1,c
  7145  0008DA  0E50               	movlw	80
  7146  0008DC  6E1A               	movwf	drawCircle@x0,c
  7147  0008DE  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7148  0008E2  6A1D               	clrf	drawCircle@y0+1,c
  7149  0008E4  0E00               	movlw	0
  7150  0008E6  6E1F               	movwf	drawCircle@r+1,c
  7151  0008E8  0E07               	movlw	7
  7152  0008EA  6E1E               	movwf	drawCircle@r,c
  7153  0008EC  0E07               	movlw	7
  7154  0008EE  6E21               	movwf	drawCircle@color+1,c
  7155  0008F0  0EE0               	movlw	224
  7156  0008F2  6E20               	movwf	drawCircle@color,c
  7157  0008F4  EC63  F006         	call	_drawCircle	;wreg free
  7158  0008F8  D000               	goto	l5213
  7159  0008FA                     l5213:
  7160                           
  7161                           ;Lab8.c: 766: }
  7162                           ;Lab8.c: 768: if (color == 2)
  7163  0008FA  0E02               	movlw	2
  7164  0008FC  0100               	movlb	0	; () banked
  7165  0008FE  19B0               	xorwf	update_LCD_color@color& (0+255),w,b
  7166  000900  A4D8               	btfss	status,2,c
  7167  000902  D067               	goto	l5217
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;Lab8.c: 769: {
  7171                           ;Lab8.c: 770: fillCircle(40, Circle_Y, 7, 0x0000);
  7172  000904  0E00               	movlw	0
  7173  000906  6E3A               	movwf	fillCircle@x0+1,c
  7174  000908  0E28               	movlw	40
  7175  00090A  6E39               	movwf	fillCircle@x0,c
  7176  00090C  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7177  000910  6A3C               	clrf	fillCircle@y0+1,c
  7178  000912  0E00               	movlw	0
  7179  000914  6E3E               	movwf	fillCircle@r+1,c
  7180  000916  0E07               	movlw	7
  7181  000918  6E3D               	movwf	fillCircle@r,c
  7182  00091A  0E00               	movlw	0
  7183  00091C  6E40               	movwf	fillCircle@color+1,c
  7184  00091E  0E00               	movlw	0
  7185  000920  6E3F               	movwf	fillCircle@color,c
  7186  000922  ECF4  F011         	call	_fillCircle	;wreg free
  7187                           
  7188                           ;Lab8.c: 771: fillCircle(60, Circle_Y, 7, 0x0000);
  7189  000926  0E00               	movlw	0
  7190  000928  6E3A               	movwf	fillCircle@x0+1,c
  7191  00092A  0E3C               	movlw	60
  7192  00092C  6E39               	movwf	fillCircle@x0,c
  7193  00092E  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7194  000932  6A3C               	clrf	fillCircle@y0+1,c
  7195  000934  0E00               	movlw	0
  7196  000936  6E3E               	movwf	fillCircle@r+1,c
  7197  000938  0E07               	movlw	7
  7198  00093A  6E3D               	movwf	fillCircle@r,c
  7199  00093C  0E00               	movlw	0
  7200  00093E  6E40               	movwf	fillCircle@color+1,c
  7201  000940  0E00               	movlw	0
  7202  000942  6E3F               	movwf	fillCircle@color,c
  7203  000944  ECF4  F011         	call	_fillCircle	;wreg free
  7204                           
  7205                           ;Lab8.c: 772: fillCircle(80, Circle_Y, 7, 0x07E0);
  7206  000948  0E00               	movlw	0
  7207  00094A  6E3A               	movwf	fillCircle@x0+1,c
  7208  00094C  0E50               	movlw	80
  7209  00094E  6E39               	movwf	fillCircle@x0,c
  7210  000950  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7211  000954  6A3C               	clrf	fillCircle@y0+1,c
  7212  000956  0E00               	movlw	0
  7213  000958  6E3E               	movwf	fillCircle@r+1,c
  7214  00095A  0E07               	movlw	7
  7215  00095C  6E3D               	movwf	fillCircle@r,c
  7216  00095E  0E07               	movlw	7
  7217  000960  6E40               	movwf	fillCircle@color+1,c
  7218  000962  0EE0               	movlw	224
  7219  000964  6E3F               	movwf	fillCircle@color,c
  7220  000966  ECF4  F011         	call	_fillCircle	;wreg free
  7221                           
  7222                           ;Lab8.c: 773: drawCircle(40, Circle_Y, 7, 0xF800);
  7223  00096A  0E00               	movlw	0
  7224  00096C  6E1B               	movwf	drawCircle@x0+1,c
  7225  00096E  0E28               	movlw	40
  7226  000970  6E1A               	movwf	drawCircle@x0,c
  7227  000972  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7228  000976  6A1D               	clrf	drawCircle@y0+1,c
  7229  000978  0E00               	movlw	0
  7230  00097A  6E1F               	movwf	drawCircle@r+1,c
  7231  00097C  0E07               	movlw	7
  7232  00097E  6E1E               	movwf	drawCircle@r,c
  7233  000980  0EF8               	movlw	248
  7234  000982  6E21               	movwf	drawCircle@color+1,c
  7235  000984  0E00               	movlw	0
  7236  000986  6E20               	movwf	drawCircle@color,c
  7237  000988  EC63  F006         	call	_drawCircle	;wreg free
  7238                           
  7239                           ;Lab8.c: 774: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7240  00098C  0E00               	movlw	0
  7241  00098E  6E1B               	movwf	drawCircle@x0+1,c
  7242  000990  0E3C               	movlw	60
  7243  000992  6E1A               	movwf	drawCircle@x0,c
  7244  000994  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7245  000998  6A1D               	clrf	drawCircle@y0+1,c
  7246  00099A  0E00               	movlw	0
  7247  00099C  6E1F               	movwf	drawCircle@r+1,c
  7248  00099E  0E07               	movlw	7
  7249  0009A0  6E1E               	movwf	drawCircle@r,c
  7250  0009A2  0EFF               	movlw	255
  7251  0009A4  6E21               	movwf	drawCircle@color+1,c
  7252  0009A6  0EE0               	movlw	224
  7253  0009A8  6E20               	movwf	drawCircle@color,c
  7254  0009AA  EC63  F006         	call	_drawCircle	;wreg free
  7255                           
  7256                           ;Lab8.c: 775: drawCircle(80, Circle_Y, 7, 0x07E0);
  7257  0009AE  0E00               	movlw	0
  7258  0009B0  6E1B               	movwf	drawCircle@x0+1,c
  7259  0009B2  0E50               	movlw	80
  7260  0009B4  6E1A               	movwf	drawCircle@x0,c
  7261  0009B6  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7262  0009BA  6A1D               	clrf	drawCircle@y0+1,c
  7263  0009BC  0E00               	movlw	0
  7264  0009BE  6E1F               	movwf	drawCircle@r+1,c
  7265  0009C0  0E07               	movlw	7
  7266  0009C2  6E1E               	movwf	drawCircle@r,c
  7267  0009C4  0E07               	movlw	7
  7268  0009C6  6E21               	movwf	drawCircle@color+1,c
  7269  0009C8  0EE0               	movlw	224
  7270  0009CA  6E20               	movwf	drawCircle@color,c
  7271  0009CC  EC63  F006         	call	_drawCircle	;wreg free
  7272  0009D0  D000               	goto	l5217
  7273  0009D2                     l5217:
  7274                           
  7275                           ;Lab8.c: 776: }
  7276                           ;Lab8.c: 778: if (color == 3)
  7277  0009D2  0E03               	movlw	3
  7278  0009D4  0100               	movlb	0	; () banked
  7279  0009D6  19B0               	xorwf	update_LCD_color@color& (0+255),w,b
  7280  0009D8  A4D8               	btfss	status,2,c
  7281  0009DA  D067               	goto	l533
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;Lab8.c: 779: {
  7285                           ;Lab8.c: 780: fillCircle(40, Circle_Y, 7, 0x0000);
  7286  0009DC  0E00               	movlw	0
  7287  0009DE  6E3A               	movwf	fillCircle@x0+1,c
  7288  0009E0  0E28               	movlw	40
  7289  0009E2  6E39               	movwf	fillCircle@x0,c
  7290  0009E4  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7291  0009E8  6A3C               	clrf	fillCircle@y0+1,c
  7292  0009EA  0E00               	movlw	0
  7293  0009EC  6E3E               	movwf	fillCircle@r+1,c
  7294  0009EE  0E07               	movlw	7
  7295  0009F0  6E3D               	movwf	fillCircle@r,c
  7296  0009F2  0E00               	movlw	0
  7297  0009F4  6E40               	movwf	fillCircle@color+1,c
  7298  0009F6  0E00               	movlw	0
  7299  0009F8  6E3F               	movwf	fillCircle@color,c
  7300  0009FA  ECF4  F011         	call	_fillCircle	;wreg free
  7301                           
  7302                           ;Lab8.c: 781: fillCircle(60, Circle_Y, 7, 0xFFE0);
  7303  0009FE  0E00               	movlw	0
  7304  000A00  6E3A               	movwf	fillCircle@x0+1,c
  7305  000A02  0E3C               	movlw	60
  7306  000A04  6E39               	movwf	fillCircle@x0,c
  7307  000A06  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7308  000A0A  6A3C               	clrf	fillCircle@y0+1,c
  7309  000A0C  0E00               	movlw	0
  7310  000A0E  6E3E               	movwf	fillCircle@r+1,c
  7311  000A10  0E07               	movlw	7
  7312  000A12  6E3D               	movwf	fillCircle@r,c
  7313  000A14  0EFF               	movlw	255
  7314  000A16  6E40               	movwf	fillCircle@color+1,c
  7315  000A18  0EE0               	movlw	224
  7316  000A1A  6E3F               	movwf	fillCircle@color,c
  7317  000A1C  ECF4  F011         	call	_fillCircle	;wreg free
  7318                           
  7319                           ;Lab8.c: 782: fillCircle(80, Circle_Y, 7, 0x0000);
  7320  000A20  0E00               	movlw	0
  7321  000A22  6E3A               	movwf	fillCircle@x0+1,c
  7322  000A24  0E50               	movlw	80
  7323  000A26  6E39               	movwf	fillCircle@x0,c
  7324  000A28  C0B2  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7325  000A2C  6A3C               	clrf	fillCircle@y0+1,c
  7326  000A2E  0E00               	movlw	0
  7327  000A30  6E3E               	movwf	fillCircle@r+1,c
  7328  000A32  0E07               	movlw	7
  7329  000A34  6E3D               	movwf	fillCircle@r,c
  7330  000A36  0E00               	movlw	0
  7331  000A38  6E40               	movwf	fillCircle@color+1,c
  7332  000A3A  0E00               	movlw	0
  7333  000A3C  6E3F               	movwf	fillCircle@color,c
  7334  000A3E  ECF4  F011         	call	_fillCircle	;wreg free
  7335                           
  7336                           ;Lab8.c: 783: drawCircle(40, Circle_Y, 7, 0xF800);
  7337  000A42  0E00               	movlw	0
  7338  000A44  6E1B               	movwf	drawCircle@x0+1,c
  7339  000A46  0E28               	movlw	40
  7340  000A48  6E1A               	movwf	drawCircle@x0,c
  7341  000A4A  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7342  000A4E  6A1D               	clrf	drawCircle@y0+1,c
  7343  000A50  0E00               	movlw	0
  7344  000A52  6E1F               	movwf	drawCircle@r+1,c
  7345  000A54  0E07               	movlw	7
  7346  000A56  6E1E               	movwf	drawCircle@r,c
  7347  000A58  0EF8               	movlw	248
  7348  000A5A  6E21               	movwf	drawCircle@color+1,c
  7349  000A5C  0E00               	movlw	0
  7350  000A5E  6E20               	movwf	drawCircle@color,c
  7351  000A60  EC63  F006         	call	_drawCircle	;wreg free
  7352                           
  7353                           ;Lab8.c: 784: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7354  000A64  0E00               	movlw	0
  7355  000A66  6E1B               	movwf	drawCircle@x0+1,c
  7356  000A68  0E3C               	movlw	60
  7357  000A6A  6E1A               	movwf	drawCircle@x0,c
  7358  000A6C  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7359  000A70  6A1D               	clrf	drawCircle@y0+1,c
  7360  000A72  0E00               	movlw	0
  7361  000A74  6E1F               	movwf	drawCircle@r+1,c
  7362  000A76  0E07               	movlw	7
  7363  000A78  6E1E               	movwf	drawCircle@r,c
  7364  000A7A  0EFF               	movlw	255
  7365  000A7C  6E21               	movwf	drawCircle@color+1,c
  7366  000A7E  0EE0               	movlw	224
  7367  000A80  6E20               	movwf	drawCircle@color,c
  7368  000A82  EC63  F006         	call	_drawCircle	;wreg free
  7369                           
  7370                           ;Lab8.c: 785: drawCircle(80, Circle_Y, 7, 0x07E0);
  7371  000A86  0E00               	movlw	0
  7372  000A88  6E1B               	movwf	drawCircle@x0+1,c
  7373  000A8A  0E50               	movlw	80
  7374  000A8C  6E1A               	movwf	drawCircle@x0,c
  7375  000A8E  C0B2  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7376  000A92  6A1D               	clrf	drawCircle@y0+1,c
  7377  000A94  0E00               	movlw	0
  7378  000A96  6E1F               	movwf	drawCircle@r+1,c
  7379  000A98  0E07               	movlw	7
  7380  000A9A  6E1E               	movwf	drawCircle@r,c
  7381  000A9C  0E07               	movlw	7
  7382  000A9E  6E21               	movwf	drawCircle@color+1,c
  7383  000AA0  0EE0               	movlw	224
  7384  000AA2  6E20               	movwf	drawCircle@color,c
  7385  000AA4  EC63  F006         	call	_drawCircle	;wreg free
  7386  000AA8  D000               	goto	l533
  7387  000AAA                     l533:
  7388  000AAA  0012               	return		;funcret
  7389  000AAC                     __end_of_update_LCD_color:
  7390                           	opt stack 0
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           prodh	equ	0xFF4
  7396                           prodl	equ	0xFF3
  7397                           intcon	equ	0xFF2
  7398                           intcon2	equ	0xFF1
  7399                           intcon3	equ	0xFF0
  7400                           postinc0	equ	0xFEE
  7401                           wreg	equ	0xFE8
  7402                           postdec1	equ	0xFE5
  7403                           fsr1l	equ	0xFE1
  7404                           postinc2	equ	0xFDE
  7405                           postdec2	equ	0xFDD
  7406                           fsr2h	equ	0xFDA
  7407                           fsr2l	equ	0xFD9
  7408                           status	equ	0xFD8
  7409                           
  7410 ;; *************** function _fillCircle *****************
  7411 ;; Defined at:
  7412 ;;		line 646 in file "ST7735_TFT.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;  x0              2   56[COMRAM] int 
  7415 ;;  y0              2   58[COMRAM] int 
  7416 ;;  r               2   60[COMRAM] int 
  7417 ;;  color           2   62[COMRAM] unsigned int 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;		None
  7420 ;; Return value:  Size  Location     Type
  7421 ;;		None               void
  7422 ;; Registers used:
  7423 ;;		wreg, status,2, status,0, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7429 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;Total ram usage:        8 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    7
  7436 ;; This function calls:
  7437 ;;		_drawFastVLine
  7438 ;;		_fillCircleHelper
  7439 ;; This function is called by:
  7440 ;;		_Initialize_Screen
  7441 ;;		_update_LCD_color
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           	psect	text31
  7446  0023E8                     __ptext31:
  7447                           	opt stack 0
  7448  0023E8                     _fillCircle:
  7449                           	opt stack 20
  7450                           
  7451                           ;ST7735_TFT.c: 648: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7452                           
  7453                           ;incstack = 0
  7454  0023E8  503D               	movf	fillCircle@r,w,c
  7455  0023EA  0800               	sublw	0
  7456  0023EC  243B               	addwf	fillCircle@y0,w,c
  7457  0023EE  6E16               	movwf	drawFastVLine@y,c
  7458  0023F0  80D8               	bsf	status,0,c
  7459  0023F2  343D               	rlcf	fillCircle@r,w,c
  7460  0023F4  6E17               	movwf	drawFastVLine@h,c
  7461  0023F6  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  7462  0023FA  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  7463  0023FE  5039               	movf	fillCircle@x0,w,c
  7464  002400  EC99  F00F         	call	_drawFastVLine
  7465                           
  7466                           ;ST7735_TFT.c: 649: fillCircleHelper(x0, y0, r, 3, 0, color);
  7467  002404  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  7468  002408  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7469  00240C  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  7470  002410  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7471  002414  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  7472  002418  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7473  00241C  0E00               	movlw	0
  7474  00241E  6E28               	movwf	fillCircleHelper@cornername+1,c
  7475  002420  0E03               	movlw	3
  7476  002422  6E27               	movwf	fillCircleHelper@cornername,c
  7477  002424  0E00               	movlw	0
  7478  002426  6E2A               	movwf	fillCircleHelper@delta+1,c
  7479  002428  0E00               	movlw	0
  7480  00242A  6E29               	movwf	fillCircleHelper@delta,c
  7481  00242C  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  7482  002430  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7483  002434  ECEC  F009         	call	_fillCircleHelper	;wreg free
  7484  002438  0012               	return		;funcret
  7485  00243A                     __end_of_fillCircle:
  7486                           	opt stack 0
  7487                           tblptru	equ	0xFF8
  7488                           tblptrh	equ	0xFF7
  7489                           tblptrl	equ	0xFF6
  7490                           tablat	equ	0xFF5
  7491                           prodh	equ	0xFF4
  7492                           prodl	equ	0xFF3
  7493                           intcon	equ	0xFF2
  7494                           intcon2	equ	0xFF1
  7495                           intcon3	equ	0xFF0
  7496                           postinc0	equ	0xFEE
  7497                           wreg	equ	0xFE8
  7498                           postdec1	equ	0xFE5
  7499                           fsr1l	equ	0xFE1
  7500                           postinc2	equ	0xFDE
  7501                           postdec2	equ	0xFDD
  7502                           fsr2h	equ	0xFDA
  7503                           fsr2l	equ	0xFD9
  7504                           status	equ	0xFD8
  7505                           
  7506 ;; *************** function _fillCircleHelper *****************
  7507 ;; Defined at:
  7508 ;;		line 621 in file "ST7735_TFT.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  x0              2   32[COMRAM] int 
  7511 ;;  y0              2   34[COMRAM] int 
  7512 ;;  r               2   36[COMRAM] int 
  7513 ;;  cornername      2   38[COMRAM] unsigned int 
  7514 ;;  delta           2   40[COMRAM] int 
  7515 ;;  color           2   42[COMRAM] unsigned int 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  y               2   54[COMRAM] int 
  7518 ;;  x               2   52[COMRAM] int 
  7519 ;;  f               2   50[COMRAM] int 
  7520 ;;  ddF_y           2   48[COMRAM] int 
  7521 ;;  ddF_x           2   46[COMRAM] int 
  7522 ;; Return value:  Size  Location     Type
  7523 ;;		None               void
  7524 ;; Registers used:
  7525 ;;		wreg, status,2, status,0, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7531 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;Total ram usage:       24 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    6
  7538 ;; This function calls:
  7539 ;;		_drawFastVLine
  7540 ;; This function is called by:
  7541 ;;		_fillCircle
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text32
  7546  0013D8                     __ptext32:
  7547                           	opt stack 0
  7548  0013D8                     _fillCircleHelper:
  7549                           	opt stack 20
  7550                           
  7551                           ;ST7735_TFT.c: 623: signed int f, ddF_x, ddF_y, x, y;
  7552                           ;ST7735_TFT.c: 624: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7553                           
  7554                           ;incstack = 0
  7555  0013D8  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7556  0013DC  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7557  0013E0  1E2D               	comf	??_fillCircleHelper,f,c
  7558  0013E2  1E2E               	comf	??_fillCircleHelper+1,f,c
  7559  0013E4  4A2D               	infsnz	??_fillCircleHelper,f,c
  7560  0013E6  2A2E               	incf	??_fillCircleHelper+1,f,c
  7561  0013E8  0E01               	movlw	1
  7562  0013EA  242D               	addwf	??_fillCircleHelper,w,c
  7563  0013EC  6E33               	movwf	fillCircleHelper@f,c
  7564  0013EE  0E00               	movlw	0
  7565  0013F0  202E               	addwfc	??_fillCircleHelper+1,w,c
  7566  0013F2  6E34               	movwf	fillCircleHelper@f+1,c
  7567  0013F4  0E00               	movlw	0
  7568  0013F6  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  7569  0013F8  0E01               	movlw	1
  7570  0013FA  6E2F               	movwf	fillCircleHelper@ddF_x,c
  7571  0013FC  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7572  001400  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7573  001404  90D8               	bcf	status,0,c
  7574  001406  362D               	rlcf	??_fillCircleHelper,f,c
  7575  001408  362E               	rlcf	??_fillCircleHelper+1,f,c
  7576  00140A  1E2D               	comf	??_fillCircleHelper,f,c
  7577  00140C  1E2E               	comf	??_fillCircleHelper+1,f,c
  7578  00140E  4A2D               	infsnz	??_fillCircleHelper,f,c
  7579  001410  2A2E               	incf	??_fillCircleHelper+1,f,c
  7580  001412  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7581  001416  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7582  00141A  0E00               	movlw	0
  7583  00141C  6E36               	movwf	fillCircleHelper@x+1,c
  7584  00141E  0E00               	movlw	0
  7585  001420  6E35               	movwf	fillCircleHelper@x,c
  7586  001422  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  7587  001426  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7588                           
  7589                           ;ST7735_TFT.c: 625: while (x<y) {
  7590  00142A  D067               	goto	l4725
  7591  00142C                     l4705:
  7592                           
  7593                           ;ST7735_TFT.c: 626: if (f >= 0) {
  7594  00142C  BE34               	btfsc	fillCircleHelper@f+1,7,c
  7595  00142E  D00B               	goto	l281
  7596                           
  7597                           ;ST7735_TFT.c: 627: y--;
  7598  001430  0637               	decf	fillCircleHelper@y,f,c
  7599  001432  A0D8               	btfss	status,0,c
  7600  001434  0638               	decf	fillCircleHelper@y+1,f,c
  7601                           
  7602                           ;ST7735_TFT.c: 628: ddF_y += 2;
  7603  001436  0E02               	movlw	2
  7604  001438  2631               	addwf	fillCircleHelper@ddF_y,f,c
  7605  00143A  0E00               	movlw	0
  7606  00143C  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7607                           
  7608                           ;ST7735_TFT.c: 629: f += ddF_y;
  7609  00143E  5031               	movf	fillCircleHelper@ddF_y,w,c
  7610  001440  2633               	addwf	fillCircleHelper@f,f,c
  7611  001442  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  7612  001444  2234               	addwfc	fillCircleHelper@f+1,f,c
  7613  001446                     l281:
  7614                           
  7615                           ;ST7735_TFT.c: 630: }
  7616                           ;ST7735_TFT.c: 631: x++;
  7617  001446  4A35               	infsnz	fillCircleHelper@x,f,c
  7618  001448  2A36               	incf	fillCircleHelper@x+1,f,c
  7619                           
  7620                           ;ST7735_TFT.c: 632: ddF_x += 2;
  7621  00144A  0E02               	movlw	2
  7622  00144C  262F               	addwf	fillCircleHelper@ddF_x,f,c
  7623  00144E  0E00               	movlw	0
  7624  001450  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7625                           
  7626                           ;ST7735_TFT.c: 633: f += ddF_x;
  7627  001452  502F               	movf	fillCircleHelper@ddF_x,w,c
  7628  001454  2633               	addwf	fillCircleHelper@f,f,c
  7629  001456  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  7630  001458  2234               	addwfc	fillCircleHelper@f+1,f,c
  7631                           
  7632                           ;ST7735_TFT.c: 635: if (cornername & 0x1) {
  7633  00145A  A027               	btfss	fillCircleHelper@cornername,0,c
  7634  00145C  D025               	goto	l4721
  7635                           
  7636                           ;ST7735_TFT.c: 636: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7637  00145E  5037               	movf	fillCircleHelper@y,w,c
  7638  001460  0800               	sublw	0
  7639  001462  2423               	addwf	fillCircleHelper@y0,w,c
  7640  001464  6E16               	movwf	drawFastVLine@y,c
  7641  001466  5037               	movf	fillCircleHelper@y,w,c
  7642  001468  2437               	addwf	fillCircleHelper@y,w,c
  7643  00146A  2429               	addwf	fillCircleHelper@delta,w,c
  7644  00146C  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7645  00146E  282D               	incf	??_fillCircleHelper,w,c
  7646  001470  6E17               	movwf	drawFastVLine@h,c
  7647  001472  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7648  001476  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7649  00147A  5021               	movf	fillCircleHelper@x0,w,c
  7650  00147C  2435               	addwf	fillCircleHelper@x,w,c
  7651  00147E  EC99  F00F         	call	_drawFastVLine
  7652                           
  7653                           ;ST7735_TFT.c: 637: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7654  001482  5035               	movf	fillCircleHelper@x,w,c
  7655  001484  0800               	sublw	0
  7656  001486  2423               	addwf	fillCircleHelper@y0,w,c
  7657  001488  6E16               	movwf	drawFastVLine@y,c
  7658  00148A  5035               	movf	fillCircleHelper@x,w,c
  7659  00148C  2435               	addwf	fillCircleHelper@x,w,c
  7660  00148E  2429               	addwf	fillCircleHelper@delta,w,c
  7661  001490  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7662  001492  282D               	incf	??_fillCircleHelper,w,c
  7663  001494  6E17               	movwf	drawFastVLine@h,c
  7664  001496  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7665  00149A  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7666  00149E  5021               	movf	fillCircleHelper@x0,w,c
  7667  0014A0  2437               	addwf	fillCircleHelper@y,w,c
  7668  0014A2  EC99  F00F         	call	_drawFastVLine
  7669  0014A6  D000               	goto	l4721
  7670  0014A8                     l4721:
  7671                           
  7672                           ;ST7735_TFT.c: 638: }
  7673                           ;ST7735_TFT.c: 639: if (cornername & 0x2) {
  7674  0014A8  A227               	btfss	fillCircleHelper@cornername,1,c
  7675  0014AA  D027               	goto	l4725
  7676                           
  7677                           ;ST7735_TFT.c: 640: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7678  0014AC  5037               	movf	fillCircleHelper@y,w,c
  7679  0014AE  0800               	sublw	0
  7680  0014B0  2423               	addwf	fillCircleHelper@y0,w,c
  7681  0014B2  6E16               	movwf	drawFastVLine@y,c
  7682  0014B4  5037               	movf	fillCircleHelper@y,w,c
  7683  0014B6  2437               	addwf	fillCircleHelper@y,w,c
  7684  0014B8  2429               	addwf	fillCircleHelper@delta,w,c
  7685  0014BA  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7686  0014BC  282D               	incf	??_fillCircleHelper,w,c
  7687  0014BE  6E17               	movwf	drawFastVLine@h,c
  7688  0014C0  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7689  0014C4  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7690  0014C8  5035               	movf	fillCircleHelper@x,w,c
  7691  0014CA  0800               	sublw	0
  7692  0014CC  2421               	addwf	fillCircleHelper@x0,w,c
  7693  0014CE  EC99  F00F         	call	_drawFastVLine
  7694                           
  7695                           ;ST7735_TFT.c: 641: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7696  0014D2  5035               	movf	fillCircleHelper@x,w,c
  7697  0014D4  0800               	sublw	0
  7698  0014D6  2423               	addwf	fillCircleHelper@y0,w,c
  7699  0014D8  6E16               	movwf	drawFastVLine@y,c
  7700  0014DA  5035               	movf	fillCircleHelper@x,w,c
  7701  0014DC  2435               	addwf	fillCircleHelper@x,w,c
  7702  0014DE  2429               	addwf	fillCircleHelper@delta,w,c
  7703  0014E0  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7704  0014E2  282D               	incf	??_fillCircleHelper,w,c
  7705  0014E4  6E17               	movwf	drawFastVLine@h,c
  7706  0014E6  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7707  0014EA  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7708  0014EE  5037               	movf	fillCircleHelper@y,w,c
  7709  0014F0  0800               	sublw	0
  7710  0014F2  2421               	addwf	fillCircleHelper@x0,w,c
  7711  0014F4  EC99  F00F         	call	_drawFastVLine
  7712  0014F8  D000               	goto	l4725
  7713  0014FA                     l4725:
  7714  0014FA  5037               	movf	fillCircleHelper@y,w,c
  7715  0014FC  5C35               	subwf	fillCircleHelper@x,w,c
  7716  0014FE  5036               	movf	fillCircleHelper@x+1,w,c
  7717  001500  0A80               	xorlw	128
  7718  001502  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7719  001504  5038               	movf	fillCircleHelper@y+1,w,c
  7720  001506  0A80               	xorlw	128
  7721  001508  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  7722  00150A  A0D8               	btfss	status,0,c
  7723  00150C  D78F               	goto	l4705
  7724  00150E  0012               	return		;funcret
  7725  001510                     __end_of_fillCircleHelper:
  7726                           	opt stack 0
  7727                           tblptru	equ	0xFF8
  7728                           tblptrh	equ	0xFF7
  7729                           tblptrl	equ	0xFF6
  7730                           tablat	equ	0xFF5
  7731                           prodh	equ	0xFF4
  7732                           prodl	equ	0xFF3
  7733                           intcon	equ	0xFF2
  7734                           intcon2	equ	0xFF1
  7735                           intcon3	equ	0xFF0
  7736                           postinc0	equ	0xFEE
  7737                           wreg	equ	0xFE8
  7738                           postdec1	equ	0xFE5
  7739                           fsr1l	equ	0xFE1
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           fsr2h	equ	0xFDA
  7743                           fsr2l	equ	0xFD9
  7744                           status	equ	0xFD8
  7745                           
  7746 ;; *************** function _drawCircle *****************
  7747 ;; Defined at:
  7748 ;;		line 560 in file "ST7735_TFT.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;  x0              2   25[COMRAM] int 
  7751 ;;  y0              2   27[COMRAM] int 
  7752 ;;  r               2   29[COMRAM] int 
  7753 ;;  color           2   31[COMRAM] unsigned int 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  y               2   43[COMRAM] int 
  7756 ;;  x               2   41[COMRAM] int 
  7757 ;;  f               2   39[COMRAM] int 
  7758 ;;  ddF_y           2   37[COMRAM] int 
  7759 ;;  ddF_x           2   35[COMRAM] int 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, status,2, status,0, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7769 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;Total ram usage:       20 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    6
  7776 ;; This function calls:
  7777 ;;		_drawPixel
  7778 ;; This function is called by:
  7779 ;;		_Initialize_Screen
  7780 ;;		_update_LCD_color
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text33
  7785  000CC6                     __ptext33:
  7786                           	opt stack 0
  7787  000CC6                     _drawCircle:
  7788                           	opt stack 21
  7789                           
  7790                           ;ST7735_TFT.c: 562: signed int f, ddF_x, ddF_y, x, y;
  7791                           ;ST7735_TFT.c: 563: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7792                           
  7793                           ;incstack = 0
  7794  000CC6  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7795  000CCA  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7796  000CCE  1E22               	comf	??_drawCircle,f,c
  7797  000CD0  1E23               	comf	??_drawCircle+1,f,c
  7798  000CD2  4A22               	infsnz	??_drawCircle,f,c
  7799  000CD4  2A23               	incf	??_drawCircle+1,f,c
  7800  000CD6  0E01               	movlw	1
  7801  000CD8  2422               	addwf	??_drawCircle,w,c
  7802  000CDA  6E28               	movwf	drawCircle@f,c
  7803  000CDC  0E00               	movlw	0
  7804  000CDE  2023               	addwfc	??_drawCircle+1,w,c
  7805  000CE0  6E29               	movwf	drawCircle@f+1,c
  7806  000CE2  0E00               	movlw	0
  7807  000CE4  6E25               	movwf	drawCircle@ddF_x+1,c
  7808  000CE6  0E01               	movlw	1
  7809  000CE8  6E24               	movwf	drawCircle@ddF_x,c
  7810  000CEA  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7811  000CEE  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7812  000CF2  90D8               	bcf	status,0,c
  7813  000CF4  3622               	rlcf	??_drawCircle,f,c
  7814  000CF6  3623               	rlcf	??_drawCircle+1,f,c
  7815  000CF8  1E22               	comf	??_drawCircle,f,c
  7816  000CFA  1E23               	comf	??_drawCircle+1,f,c
  7817  000CFC  4A22               	infsnz	??_drawCircle,f,c
  7818  000CFE  2A23               	incf	??_drawCircle+1,f,c
  7819  000D00  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  7820  000D04  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7821  000D08  0E00               	movlw	0
  7822  000D0A  6E2B               	movwf	drawCircle@x+1,c
  7823  000D0C  0E00               	movlw	0
  7824  000D0E  6E2A               	movwf	drawCircle@x,c
  7825  000D10  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  7826  000D14  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  7827                           
  7828                           ;ST7735_TFT.c: 564: drawPixel(x0 , y0 + r, color);
  7829  000D18  501C               	movf	drawCircle@y0,w,c
  7830  000D1A  241E               	addwf	drawCircle@r,w,c
  7831  000D1C  6E16               	movwf	drawPixel@y,c
  7832  000D1E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7833  000D22  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7834  000D26  501A               	movf	drawCircle@x0,w,c
  7835  000D28  ECB6  F013         	call	_drawPixel
  7836                           
  7837                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 - r, color);
  7838  000D2C  501E               	movf	drawCircle@r,w,c
  7839  000D2E  0800               	sublw	0
  7840  000D30  241C               	addwf	drawCircle@y0,w,c
  7841  000D32  6E16               	movwf	drawPixel@y,c
  7842  000D34  C020  F017         	movff	drawCircle@color,drawPixel@color
  7843  000D38  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7844  000D3C  501A               	movf	drawCircle@x0,w,c
  7845  000D3E  ECB6  F013         	call	_drawPixel
  7846                           
  7847                           ;ST7735_TFT.c: 566: drawPixel(x0+r, y0 , color);
  7848  000D42  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7849  000D46  C020  F017         	movff	drawCircle@color,drawPixel@color
  7850  000D4A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7851  000D4E  501A               	movf	drawCircle@x0,w,c
  7852  000D50  241E               	addwf	drawCircle@r,w,c
  7853  000D52  ECB6  F013         	call	_drawPixel
  7854                           
  7855                           ;ST7735_TFT.c: 567: drawPixel(x0-r, y0 , color);
  7856  000D56  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7857  000D5A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7858  000D5E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7859  000D62  501E               	movf	drawCircle@r,w,c
  7860  000D64  0800               	sublw	0
  7861  000D66  241A               	addwf	drawCircle@x0,w,c
  7862  000D68  ECB6  F013         	call	_drawPixel
  7863                           
  7864                           ;ST7735_TFT.c: 568: while (x < y) {
  7865  000D6C  D078               	goto	l4871
  7866  000D6E                     l4843:
  7867                           
  7868                           ;ST7735_TFT.c: 569: if (f >= 0) {
  7869  000D6E  BE29               	btfsc	drawCircle@f+1,7,c
  7870  000D70  D00B               	goto	l263
  7871                           
  7872                           ;ST7735_TFT.c: 570: y--;
  7873  000D72  062C               	decf	drawCircle@y,f,c
  7874  000D74  A0D8               	btfss	status,0,c
  7875  000D76  062D               	decf	drawCircle@y+1,f,c
  7876                           
  7877                           ;ST7735_TFT.c: 571: ddF_y += 2;
  7878  000D78  0E02               	movlw	2
  7879  000D7A  2626               	addwf	drawCircle@ddF_y,f,c
  7880  000D7C  0E00               	movlw	0
  7881  000D7E  2227               	addwfc	drawCircle@ddF_y+1,f,c
  7882                           
  7883                           ;ST7735_TFT.c: 572: f += ddF_y;
  7884  000D80  5026               	movf	drawCircle@ddF_y,w,c
  7885  000D82  2628               	addwf	drawCircle@f,f,c
  7886  000D84  5027               	movf	drawCircle@ddF_y+1,w,c
  7887  000D86  2229               	addwfc	drawCircle@f+1,f,c
  7888  000D88                     l263:
  7889                           
  7890                           ;ST7735_TFT.c: 573: }
  7891                           ;ST7735_TFT.c: 574: x++;
  7892  000D88  4A2A               	infsnz	drawCircle@x,f,c
  7893  000D8A  2A2B               	incf	drawCircle@x+1,f,c
  7894                           
  7895                           ;ST7735_TFT.c: 575: ddF_x += 2;
  7896  000D8C  0E02               	movlw	2
  7897  000D8E  2624               	addwf	drawCircle@ddF_x,f,c
  7898  000D90  0E00               	movlw	0
  7899  000D92  2225               	addwfc	drawCircle@ddF_x+1,f,c
  7900                           
  7901                           ;ST7735_TFT.c: 576: f += ddF_x;
  7902  000D94  5024               	movf	drawCircle@ddF_x,w,c
  7903  000D96  2628               	addwf	drawCircle@f,f,c
  7904  000D98  5025               	movf	drawCircle@ddF_x+1,w,c
  7905  000D9A  2229               	addwfc	drawCircle@f+1,f,c
  7906                           
  7907                           ;ST7735_TFT.c: 577: drawPixel(x0 + x, y0 + y, color);
  7908  000D9C  501C               	movf	drawCircle@y0,w,c
  7909  000D9E  242C               	addwf	drawCircle@y,w,c
  7910  000DA0  6E16               	movwf	drawPixel@y,c
  7911  000DA2  C020  F017         	movff	drawCircle@color,drawPixel@color
  7912  000DA6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7913  000DAA  501A               	movf	drawCircle@x0,w,c
  7914  000DAC  242A               	addwf	drawCircle@x,w,c
  7915  000DAE  ECB6  F013         	call	_drawPixel
  7916                           
  7917                           ;ST7735_TFT.c: 578: drawPixel(x0 - x, y0 + y, color);
  7918  000DB2  501C               	movf	drawCircle@y0,w,c
  7919  000DB4  242C               	addwf	drawCircle@y,w,c
  7920  000DB6  6E16               	movwf	drawPixel@y,c
  7921  000DB8  C020  F017         	movff	drawCircle@color,drawPixel@color
  7922  000DBC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7923  000DC0  502A               	movf	drawCircle@x,w,c
  7924  000DC2  0800               	sublw	0
  7925  000DC4  241A               	addwf	drawCircle@x0,w,c
  7926  000DC6  ECB6  F013         	call	_drawPixel
  7927                           
  7928                           ;ST7735_TFT.c: 579: drawPixel(x0 + x, y0 - y, color);
  7929  000DCA  502C               	movf	drawCircle@y,w,c
  7930  000DCC  0800               	sublw	0
  7931  000DCE  241C               	addwf	drawCircle@y0,w,c
  7932  000DD0  6E16               	movwf	drawPixel@y,c
  7933  000DD2  C020  F017         	movff	drawCircle@color,drawPixel@color
  7934  000DD6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7935  000DDA  501A               	movf	drawCircle@x0,w,c
  7936  000DDC  242A               	addwf	drawCircle@x,w,c
  7937  000DDE  ECB6  F013         	call	_drawPixel
  7938                           
  7939                           ;ST7735_TFT.c: 580: drawPixel(x0 - x, y0 - y, color);
  7940  000DE2  502C               	movf	drawCircle@y,w,c
  7941  000DE4  0800               	sublw	0
  7942  000DE6  241C               	addwf	drawCircle@y0,w,c
  7943  000DE8  6E16               	movwf	drawPixel@y,c
  7944  000DEA  C020  F017         	movff	drawCircle@color,drawPixel@color
  7945  000DEE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7946  000DF2  502A               	movf	drawCircle@x,w,c
  7947  000DF4  0800               	sublw	0
  7948  000DF6  241A               	addwf	drawCircle@x0,w,c
  7949  000DF8  ECB6  F013         	call	_drawPixel
  7950                           
  7951                           ;ST7735_TFT.c: 581: drawPixel(x0 + y, y0 + x, color);
  7952  000DFC  501C               	movf	drawCircle@y0,w,c
  7953  000DFE  242A               	addwf	drawCircle@x,w,c
  7954  000E00  6E16               	movwf	drawPixel@y,c
  7955  000E02  C020  F017         	movff	drawCircle@color,drawPixel@color
  7956  000E06  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7957  000E0A  501A               	movf	drawCircle@x0,w,c
  7958  000E0C  242C               	addwf	drawCircle@y,w,c
  7959  000E0E  ECB6  F013         	call	_drawPixel
  7960                           
  7961                           ;ST7735_TFT.c: 582: drawPixel(x0 - y, y0 + x, color);
  7962  000E12  501C               	movf	drawCircle@y0,w,c
  7963  000E14  242A               	addwf	drawCircle@x,w,c
  7964  000E16  6E16               	movwf	drawPixel@y,c
  7965  000E18  C020  F017         	movff	drawCircle@color,drawPixel@color
  7966  000E1C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7967  000E20  502C               	movf	drawCircle@y,w,c
  7968  000E22  0800               	sublw	0
  7969  000E24  241A               	addwf	drawCircle@x0,w,c
  7970  000E26  ECB6  F013         	call	_drawPixel
  7971                           
  7972                           ;ST7735_TFT.c: 583: drawPixel(x0 + y, y0 - x, color);
  7973  000E2A  502A               	movf	drawCircle@x,w,c
  7974  000E2C  0800               	sublw	0
  7975  000E2E  241C               	addwf	drawCircle@y0,w,c
  7976  000E30  6E16               	movwf	drawPixel@y,c
  7977  000E32  C020  F017         	movff	drawCircle@color,drawPixel@color
  7978  000E36  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7979  000E3A  501A               	movf	drawCircle@x0,w,c
  7980  000E3C  242C               	addwf	drawCircle@y,w,c
  7981  000E3E  ECB6  F013         	call	_drawPixel
  7982                           
  7983                           ;ST7735_TFT.c: 584: drawPixel(x0 - y, y0 - x, color);
  7984  000E42  502A               	movf	drawCircle@x,w,c
  7985  000E44  0800               	sublw	0
  7986  000E46  241C               	addwf	drawCircle@y0,w,c
  7987  000E48  6E16               	movwf	drawPixel@y,c
  7988  000E4A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7989  000E4E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7990  000E52  502C               	movf	drawCircle@y,w,c
  7991  000E54  0800               	sublw	0
  7992  000E56  241A               	addwf	drawCircle@x0,w,c
  7993  000E58  ECB6  F013         	call	_drawPixel
  7994  000E5C  D000               	goto	l4871
  7995  000E5E                     l4871:
  7996  000E5E  502C               	movf	drawCircle@y,w,c
  7997  000E60  5C2A               	subwf	drawCircle@x,w,c
  7998  000E62  502B               	movf	drawCircle@x+1,w,c
  7999  000E64  0A80               	xorlw	128
  8000  000E66  6E22               	movwf	??_drawCircle& (0+255),c
  8001  000E68  502D               	movf	drawCircle@y+1,w,c
  8002  000E6A  0A80               	xorlw	128
  8003  000E6C  5822               	subwfb	??_drawCircle& (0+255),w,c
  8004  000E6E  A0D8               	btfss	status,0,c
  8005  000E70  D77E               	goto	l4843
  8006  000E72  0012               	return		;funcret
  8007  000E74                     __end_of_drawCircle:
  8008                           	opt stack 0
  8009                           tblptru	equ	0xFF8
  8010                           tblptrh	equ	0xFF7
  8011                           tblptrl	equ	0xFF6
  8012                           tablat	equ	0xFF5
  8013                           prodh	equ	0xFF4
  8014                           prodl	equ	0xFF3
  8015                           intcon	equ	0xFF2
  8016                           intcon2	equ	0xFF1
  8017                           intcon3	equ	0xFF0
  8018                           postinc0	equ	0xFEE
  8019                           wreg	equ	0xFE8
  8020                           postdec1	equ	0xFE5
  8021                           fsr1l	equ	0xFE1
  8022                           postinc2	equ	0xFDE
  8023                           postdec2	equ	0xFDD
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028 ;; *************** function _PED_Control *****************
  8029 ;; Defined at:
  8030 ;;		line 527 in file "Lab8.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  direction       1    wreg     unsigned char 
  8033 ;;  Num_Sec         1    9[BANK0 ] unsigned char 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  direction       1   11[BANK0 ] unsigned char 
  8036 ;;  i               1   10[BANK0 ] unsigned char 
  8037 ;; Return value:  Size  Location     Type
  8038 ;;		None               void
  8039 ;; Registers used:
  8040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8046 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8049 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8050 ;;Total ram usage:        3 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:   11
  8053 ;; This function calls:
  8054 ;;		_Wait_One_Second_With_Beep
  8055 ;;		_update_LCD_PED_Count
  8056 ;;		_update_LCD_misc
  8057 ;; This function is called by:
  8058 ;;		_Day_Mode
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           	psect	text34
  8063  0021B4                     __ptext34:
  8064                           	opt stack 0
  8065  0021B4                     _PED_Control:
  8066                           	opt stack 18
  8067                           
  8068                           ;incstack = 0
  8069                           ;PED_Control@direction stored from wreg
  8070  0021B4  0100               	movlb	0	; () banked
  8071  0021B6  6FBB               	movwf	PED_Control@direction& (0+255),b
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;Lab8.c: 529: for(char i = Num_Sec-1;i>0; i--)
  8075  0021B8  0100               	movlb	0	; () banked
  8076  0021BA  05B9               	decf	PED_Control@Num_Sec& (0+255),w,b
  8077  0021BC  0100               	movlb	0	; () banked
  8078  0021BE  6FBA               	movwf	PED_Control@i& (0+255),b
  8079  0021C0                     l5389:
  8080                           
  8081                           ; BSR set to: 0
  8082  0021C0  0100               	movlb	0	; () banked
  8083  0021C2  51BA               	movf	PED_Control@i& (0+255),w,b
  8084  0021C4  0100               	movlb	0	; () banked
  8085  0021C6  B4D8               	btfsc	status,2,c
  8086  0021C8  D00F               	goto	l5399
  8087  0021CA  D001               	goto	l5393
  8088                           
  8089                           ; BSR set to: 0
  8090  0021CC  D00D               	goto	l5399
  8091  0021CE                     l5393:
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;Lab8.c: 530: {
  8095                           ;Lab8.c: 531: update_LCD_misc();
  8096  0021CE  EC56  F005         	call	_update_LCD_misc	;wreg free
  8097                           
  8098                           ;Lab8.c: 532: update_LCD_PED_Count(direction, i);
  8099  0021D2  C0BA  F0B7         	movff	PED_Control@i,update_LCD_PED_Count@count
  8100  0021D6  0100               	movlb	0	; () banked
  8101  0021D8  51BB               	movf	PED_Control@direction& (0+255),w,b
  8102  0021DA  ECED  F00C         	call	_update_LCD_PED_Count
  8103                           
  8104                           ;Lab8.c: 533: Wait_One_Second_With_Beep();
  8105  0021DE  EC10  F00F         	call	_Wait_One_Second_With_Beep	;wreg free
  8106  0021E2  0100               	movlb	0	; () banked
  8107  0021E4  07BA               	decf	PED_Control@i& (0+255),f,b
  8108  0021E6  D7EC               	goto	l5389
  8109  0021E8                     l5399:
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;Lab8.c: 534: }
  8113                           ;Lab8.c: 535: update_LCD_misc();
  8114  0021E8  EC56  F005         	call	_update_LCD_misc	;wreg free
  8115                           
  8116                           ;Lab8.c: 536: update_LCD_PED_Count(direction, 0);
  8117  0021EC  0E00               	movlw	0
  8118  0021EE  0100               	movlb	0	; () banked
  8119  0021F0  6FB7               	movwf	update_LCD_PED_Count@count& (0+255),b
  8120  0021F2  0100               	movlb	0	; () banked
  8121  0021F4  51BB               	movf	PED_Control@direction& (0+255),w,b
  8122  0021F6  ECED  F00C         	call	_update_LCD_PED_Count
  8123                           
  8124                           ;Lab8.c: 537: Wait_One_Second_With_Beep();
  8125  0021FA  EC10  F00F         	call	_Wait_One_Second_With_Beep	;wreg free
  8126                           
  8127                           ;Lab8.c: 538: if (direction == 1)
  8128  0021FE  0100               	movlb	0	; () banked
  8129  002200  05BB               	decf	PED_Control@direction& (0+255),w,b
  8130  002202  A4D8               	btfss	status,2,c
  8131  002204  D002               	goto	l492
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;Lab8.c: 539: {
  8135                           ;Lab8.c: 540: NS_PED_SW = 0;
  8136  002206  0E00               	movlw	0
  8137  002208  6E52               	movwf	_NS_PED_SW,c
  8138  00220A                     l492:
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;Lab8.c: 541: }
  8142                           ;Lab8.c: 542: if (direction == 0)
  8143  00220A  0100               	movlb	0	; () banked
  8144  00220C  51BB               	movf	PED_Control@direction& (0+255),w,b
  8145  00220E  0100               	movlb	0	; () banked
  8146  002210  A4D8               	btfss	status,2,c
  8147  002212  D003               	goto	l494
  8148                           
  8149                           ; BSR set to: 0
  8150                           ;Lab8.c: 543: {
  8151                           ;Lab8.c: 544: EW_PED_SW = 0;
  8152  002214  0E00               	movlw	0
  8153  002216  6E4F               	movwf	_EW_PED_SW,c
  8154  002218  D000               	goto	l494
  8155  00221A                     l494:
  8156                           
  8157                           ; BSR set to: 0
  8158  00221A  0012               	return		;funcret
  8159  00221C                     __end_of_PED_Control:
  8160                           	opt stack 0
  8161                           tblptru	equ	0xFF8
  8162                           tblptrh	equ	0xFF7
  8163                           tblptrl	equ	0xFF6
  8164                           tablat	equ	0xFF5
  8165                           prodh	equ	0xFF4
  8166                           prodl	equ	0xFF3
  8167                           intcon	equ	0xFF2
  8168                           intcon2	equ	0xFF1
  8169                           intcon3	equ	0xFF0
  8170                           postinc0	equ	0xFEE
  8171                           wreg	equ	0xFE8
  8172                           postdec1	equ	0xFE5
  8173                           fsr1l	equ	0xFE1
  8174                           postinc2	equ	0xFDE
  8175                           postdec2	equ	0xFDD
  8176                           fsr2h	equ	0xFDA
  8177                           fsr2l	equ	0xFD9
  8178                           status	equ	0xFD8
  8179                           
  8180 ;; *************** function _update_LCD_PED_Count *****************
  8181 ;; Defined at:
  8182 ;;		line 816 in file "Lab8.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  direction       1    wreg     unsigned char 
  8185 ;;  count           1    7[BANK0 ] unsigned char 
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  direction       1    8[BANK0 ] unsigned char 
  8188 ;; Return value:  Size  Location     Type
  8189 ;;		None               void
  8190 ;; Registers used:
  8191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8192 ;; Tracked objects:
  8193 ;;		On entry : 0/0
  8194 ;;		On exit  : 0/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8197 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;Total ram usage:        2 bytes
  8202 ;; Hardware stack levels used:    1
  8203 ;; Hardware stack levels required when called:    9
  8204 ;; This function calls:
  8205 ;;		___awdiv
  8206 ;;		___awmod
  8207 ;;		_drawtext
  8208 ;; This function is called by:
  8209 ;;		_PED_Control
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           	psect	text35
  8214  0019DA                     __ptext35:
  8215                           	opt stack 0
  8216  0019DA                     _update_LCD_PED_Count:
  8217                           	opt stack 19
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;incstack = 0
  8221                           ;update_LCD_PED_Count@direction stored from wreg
  8222  0019DA  0100               	movlb	0	; () banked
  8223  0019DC  6FB8               	movwf	update_LCD_PED_Count@direction& (0+255),b
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;Lab8.c: 818: switch (direction)
  8227  0019DE  D05B               	goto	l5233
  8228  0019E0                     l5223:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;Lab8.c: 821: PED_EW_Count[0] = count/10 + '0';
  8232  0019E0  C0B7  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8233  0019E4  6A10               	clrf	___awdiv@dividend+1,c
  8234  0019E6  0E00               	movlw	0
  8235  0019E8  6E12               	movwf	___awdiv@divisor+1,c
  8236  0019EA  0E0A               	movlw	10
  8237  0019EC  6E11               	movwf	___awdiv@divisor,c
  8238  0019EE  EC7A  F00E         	call	___awdiv	;wreg free
  8239  0019F2  500F               	movf	?___awdiv,w,c
  8240  0019F4  0F30               	addlw	48
  8241  0019F6  0100               	movlb	0	; () banked
  8242  0019F8  6FAA               	movwf	_PED_EW_Count& (0+255),b
  8243                           
  8244                           ;Lab8.c: 822: PED_EW_Count[1] = count%10 + '0';
  8245  0019FA  C0B7  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8246  0019FE  6A10               	clrf	___awmod@dividend+1,c
  8247  001A00  0E00               	movlw	0
  8248  001A02  6E12               	movwf	___awmod@divisor+1,c
  8249  001A04  0E0A               	movlw	10
  8250  001A06  6E11               	movwf	___awmod@divisor,c
  8251  001A08  EC61  F010         	call	___awmod	;wreg free
  8252  001A0C  500F               	movf	?___awmod,w,c
  8253  001A0E  0F30               	addlw	48
  8254  001A10  0100               	movlb	0	; () banked
  8255  001A12  6FAB               	movwf	(_PED_EW_Count+1)& (0+255),b
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;Lab8.c: 823: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  8259  001A14  0E5A               	movlw	90
  8260  001A16  6E37               	movwf	drawtext@y,c
  8261  001A18  0EAA               	movlw	low _PED_EW_Count
  8262  001A1A  6E38               	movwf	drawtext@_text,c
  8263  001A1C  0E00               	movlw	high _PED_EW_Count
  8264  001A1E  6E39               	movwf	drawtext@_text+1,c
  8265  001A20  0E07               	movlw	7
  8266  001A22  6E3B               	movwf	drawtext@color+1,c
  8267  001A24  683A               	setf	drawtext@color,c
  8268  001A26  0E00               	movlw	0
  8269  001A28  6E3D               	movwf	drawtext@bg+1,c
  8270  001A2A  0E00               	movlw	0
  8271  001A2C  6E3C               	movwf	drawtext@bg,c
  8272  001A2E  0E02               	movlw	2
  8273  001A30  6E3E               	movwf	drawtext@size,c
  8274  001A32  0E02               	movlw	2
  8275  001A34  EC10  F00B         	call	_drawtext
  8276                           
  8277                           ;Lab8.c: 824: break;
  8278  001A38  D037               	goto	l549
  8279  001A3A                     l5227:
  8280                           
  8281                           ;Lab8.c: 826: PED_NS_Count[0] = count/10 + '0';
  8282  001A3A  C0B7  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8283  001A3E  6A10               	clrf	___awdiv@dividend+1,c
  8284  001A40  0E00               	movlw	0
  8285  001A42  6E12               	movwf	___awdiv@divisor+1,c
  8286  001A44  0E0A               	movlw	10
  8287  001A46  6E11               	movwf	___awdiv@divisor,c
  8288  001A48  EC7A  F00E         	call	___awdiv	;wreg free
  8289  001A4C  500F               	movf	?___awdiv,w,c
  8290  001A4E  0F30               	addlw	48
  8291  001A50  0100               	movlb	0	; () banked
  8292  001A52  6FAD               	movwf	_PED_NS_Count& (0+255),b
  8293                           
  8294                           ;Lab8.c: 827: PED_NS_Count[1] = count%10 + '0';
  8295  001A54  C0B7  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8296  001A58  6A10               	clrf	___awmod@dividend+1,c
  8297  001A5A  0E00               	movlw	0
  8298  001A5C  6E12               	movwf	___awmod@divisor+1,c
  8299  001A5E  0E0A               	movlw	10
  8300  001A60  6E11               	movwf	___awmod@divisor,c
  8301  001A62  EC61  F010         	call	___awmod	;wreg free
  8302  001A66  500F               	movf	?___awmod,w,c
  8303  001A68  0F30               	addlw	48
  8304  001A6A  0100               	movlb	0	; () banked
  8305  001A6C  6FAE               	movwf	(_PED_NS_Count+1)& (0+255),b
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;Lab8.c: 828: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  8309  001A6E  0E1E               	movlw	30
  8310  001A70  6E37               	movwf	drawtext@y,c
  8311  001A72  0EAD               	movlw	low _PED_NS_Count
  8312  001A74  6E38               	movwf	drawtext@_text,c
  8313  001A76  0E00               	movlw	high _PED_NS_Count
  8314  001A78  6E39               	movwf	drawtext@_text+1,c
  8315  001A7A  0E00               	movlw	0
  8316  001A7C  6E3B               	movwf	drawtext@color+1,c
  8317  001A7E  0E1F               	movlw	31
  8318  001A80  6E3A               	movwf	drawtext@color,c
  8319  001A82  0E00               	movlw	0
  8320  001A84  6E3D               	movwf	drawtext@bg+1,c
  8321  001A86  0E00               	movlw	0
  8322  001A88  6E3C               	movwf	drawtext@bg,c
  8323  001A8A  0E02               	movlw	2
  8324  001A8C  6E3E               	movwf	drawtext@size,c
  8325  001A8E  0E02               	movlw	2
  8326  001A90  EC10  F00B         	call	_drawtext
  8327                           
  8328                           ;Lab8.c: 830: }
  8329                           
  8330                           ;Lab8.c: 829: break;
  8331  001A94  D009               	goto	l549
  8332  001A96                     l5233:
  8333  001A96  0100               	movlb	0	; () banked
  8334  001A98  51B8               	movf	update_LCD_PED_Count@direction& (0+255),w,b
  8335                           
  8336                           ; Switch size 1, requested type "space"
  8337                           ; Number of cases is 2, Range of values is 0 to 2
  8338                           ; switch strategies available:
  8339                           ; Name         Instructions Cycles
  8340                           ; simple_byte            7     4 (average)
  8341                           ;	Chosen strategy is simple_byte
  8342  001A9A  0A00               	xorlw	0	; case 0
  8343  001A9C  B4D8               	btfsc	status,2,c
  8344  001A9E  D7CD               	goto	l5227
  8345  001AA0  0A02               	xorlw	2	; case 2
  8346  001AA2  B4D8               	btfsc	status,2,c
  8347  001AA4  D79D               	goto	l5223
  8348  001AA6  D000               	goto	l549
  8349  001AA8                     l549:
  8350  001AA8  0012               	return		;funcret
  8351  001AAA                     __end_of_update_LCD_PED_Count:
  8352                           	opt stack 0
  8353                           tblptru	equ	0xFF8
  8354                           tblptrh	equ	0xFF7
  8355                           tblptrl	equ	0xFF6
  8356                           tablat	equ	0xFF5
  8357                           prodh	equ	0xFF4
  8358                           prodl	equ	0xFF3
  8359                           intcon	equ	0xFF2
  8360                           intcon2	equ	0xFF1
  8361                           intcon3	equ	0xFF0
  8362                           postinc0	equ	0xFEE
  8363                           wreg	equ	0xFE8
  8364                           postdec1	equ	0xFE5
  8365                           fsr1l	equ	0xFE1
  8366                           postinc2	equ	0xFDE
  8367                           postdec2	equ	0xFDD
  8368                           fsr2h	equ	0xFDA
  8369                           fsr2l	equ	0xFD9
  8370                           status	equ	0xFD8
  8371                           
  8372 ;; *************** function ___awmod *****************
  8373 ;; Defined at:
  8374 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;  dividend        2   14[COMRAM] int 
  8377 ;;  divisor         2   16[COMRAM] int 
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;  sign            1   19[COMRAM] unsigned char 
  8380 ;;  counter         1   18[COMRAM] unsigned char 
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  2   14[COMRAM] int 
  8383 ;; Registers used:
  8384 ;;		wreg, status,2, status,0
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8390 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;Total ram usage:        6 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; Hardware stack levels required when called:    2
  8397 ;; This function calls:
  8398 ;;		Nothing
  8399 ;; This function is called by:
  8400 ;;		_update_LCD_count
  8401 ;;		_update_LCD_PED_Count
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           	psect	text36
  8406  0020C2                     __ptext36:
  8407                           	opt stack 0
  8408  0020C2                     ___awmod:
  8409                           	opt stack 25
  8410                           
  8411                           ;incstack = 0
  8412  0020C2  0E00               	movlw	0
  8413  0020C4  6E14               	movwf	___awmod@sign,c
  8414  0020C6  AE10               	btfss	___awmod@dividend+1,7,c
  8415  0020C8  D007               	goto	l5005
  8416  0020CA  6C0F               	negf	___awmod@dividend,c
  8417  0020CC  1E10               	comf	___awmod@dividend+1,f,c
  8418  0020CE  B0D8               	btfsc	status,0,c
  8419  0020D0  2A10               	incf	___awmod@dividend+1,f,c
  8420  0020D2  0E01               	movlw	1
  8421  0020D4  6E14               	movwf	___awmod@sign,c
  8422  0020D6  D000               	goto	l5005
  8423  0020D8                     l5005:
  8424  0020D8  AE12               	btfss	___awmod@divisor+1,7,c
  8425  0020DA  D005               	goto	l5009
  8426  0020DC  6C11               	negf	___awmod@divisor,c
  8427  0020DE  1E12               	comf	___awmod@divisor+1,f,c
  8428  0020E0  B0D8               	btfsc	status,0,c
  8429  0020E2  2A12               	incf	___awmod@divisor+1,f,c
  8430  0020E4  D000               	goto	l5009
  8431  0020E6                     l5009:
  8432  0020E6  5011               	movf	___awmod@divisor,w,c
  8433  0020E8  1012               	iorwf	___awmod@divisor+1,w,c
  8434  0020EA  B4D8               	btfsc	status,2,c
  8435  0020EC  D01D               	goto	l5025
  8436  0020EE  0E01               	movlw	1
  8437  0020F0  6E13               	movwf	___awmod@counter,c
  8438  0020F2  D005               	goto	l5015
  8439  0020F4                     l5013:
  8440  0020F4  90D8               	bcf	status,0,c
  8441  0020F6  3611               	rlcf	___awmod@divisor,f,c
  8442  0020F8  3612               	rlcf	___awmod@divisor+1,f,c
  8443  0020FA  2A13               	incf	___awmod@counter,f,c
  8444  0020FC  D000               	goto	l5015
  8445  0020FE                     l5015:
  8446  0020FE  BE12               	btfsc	___awmod@divisor+1,7,c
  8447  002100  D002               	goto	l5017
  8448  002102  D7F8               	goto	l5013
  8449  002104  D000               	goto	l5017
  8450  002106                     l5017:
  8451  002106  5011               	movf	___awmod@divisor,w,c
  8452  002108  5C0F               	subwf	___awmod@dividend,w,c
  8453  00210A  5012               	movf	___awmod@divisor+1,w,c
  8454  00210C  5810               	subwfb	___awmod@dividend+1,w,c
  8455  00210E  A0D8               	btfss	status,0,c
  8456  002110  D005               	goto	l5021
  8457  002112  5011               	movf	___awmod@divisor,w,c
  8458  002114  5E0F               	subwf	___awmod@dividend,f,c
  8459  002116  5012               	movf	___awmod@divisor+1,w,c
  8460  002118  5A10               	subwfb	___awmod@dividend+1,f,c
  8461  00211A  D000               	goto	l5021
  8462  00211C                     l5021:
  8463  00211C  90D8               	bcf	status,0,c
  8464  00211E  3212               	rrcf	___awmod@divisor+1,f,c
  8465  002120  3211               	rrcf	___awmod@divisor,f,c
  8466  002122  2E13               	decfsz	___awmod@counter,f,c
  8467  002124  D7F0               	goto	l5017
  8468  002126  D000               	goto	l5025
  8469  002128                     l5025:
  8470  002128  5014               	movf	___awmod@sign,w,c
  8471  00212A  B4D8               	btfsc	status,2,c
  8472  00212C  D005               	goto	l5029
  8473  00212E  6C0F               	negf	___awmod@dividend,c
  8474  002130  1E10               	comf	___awmod@dividend+1,f,c
  8475  002132  B0D8               	btfsc	status,0,c
  8476  002134  2A10               	incf	___awmod@dividend+1,f,c
  8477  002136  D000               	goto	l5029
  8478  002138                     l5029:
  8479  002138  C00F  F00F         	movff	___awmod@dividend,?___awmod
  8480  00213C  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  8481  002140  D000               	goto	l838
  8482  002142                     l838:
  8483  002142  0012               	return		;funcret
  8484  002144                     __end_of___awmod:
  8485                           	opt stack 0
  8486                           tblptru	equ	0xFF8
  8487                           tblptrh	equ	0xFF7
  8488                           tblptrl	equ	0xFF6
  8489                           tablat	equ	0xFF5
  8490                           prodh	equ	0xFF4
  8491                           prodl	equ	0xFF3
  8492                           intcon	equ	0xFF2
  8493                           intcon2	equ	0xFF1
  8494                           intcon3	equ	0xFF0
  8495                           postinc0	equ	0xFEE
  8496                           wreg	equ	0xFE8
  8497                           postdec1	equ	0xFE5
  8498                           fsr1l	equ	0xFE1
  8499                           postinc2	equ	0xFDE
  8500                           postdec2	equ	0xFDD
  8501                           fsr2h	equ	0xFDA
  8502                           fsr2l	equ	0xFD9
  8503                           status	equ	0xFD8
  8504                           
  8505 ;; *************** function ___awdiv *****************
  8506 ;; Defined at:
  8507 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;  dividend        2   14[COMRAM] int 
  8510 ;;  divisor         2   16[COMRAM] int 
  8511 ;; Auto vars:     Size  Location     Type
  8512 ;;  quotient        2   20[COMRAM] int 
  8513 ;;  sign            1   19[COMRAM] unsigned char 
  8514 ;;  counter         1   18[COMRAM] unsigned char 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  2   14[COMRAM] int 
  8517 ;; Registers used:
  8518 ;;		wreg, status,2, status,0
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8524 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;Total ram usage:        8 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    2
  8531 ;; This function calls:
  8532 ;;		Nothing
  8533 ;; This function is called by:
  8534 ;;		_update_LCD_count
  8535 ;;		_update_LCD_PED_Count
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text37
  8540  001CF4                     __ptext37:
  8541                           	opt stack 0
  8542  001CF4                     ___awdiv:
  8543                           	opt stack 25
  8544                           
  8545                           ;incstack = 0
  8546  001CF4  0E00               	movlw	0
  8547  001CF6  6E14               	movwf	___awdiv@sign,c
  8548  001CF8  AE12               	btfss	___awdiv@divisor+1,7,c
  8549  001CFA  D007               	goto	l4961
  8550  001CFC  6C11               	negf	___awdiv@divisor,c
  8551  001CFE  1E12               	comf	___awdiv@divisor+1,f,c
  8552  001D00  B0D8               	btfsc	status,0,c
  8553  001D02  2A12               	incf	___awdiv@divisor+1,f,c
  8554  001D04  0E01               	movlw	1
  8555  001D06  6E14               	movwf	___awdiv@sign,c
  8556  001D08  D000               	goto	l4961
  8557  001D0A                     l4961:
  8558  001D0A  AE10               	btfss	___awdiv@dividend+1,7,c
  8559  001D0C  D007               	goto	l4967
  8560  001D0E  6C0F               	negf	___awdiv@dividend,c
  8561  001D10  1E10               	comf	___awdiv@dividend+1,f,c
  8562  001D12  B0D8               	btfsc	status,0,c
  8563  001D14  2A10               	incf	___awdiv@dividend+1,f,c
  8564  001D16  0E01               	movlw	1
  8565  001D18  1A14               	xorwf	___awdiv@sign,f,c
  8566  001D1A  D000               	goto	l4967
  8567  001D1C                     l4967:
  8568  001D1C  0E00               	movlw	0
  8569  001D1E  6E16               	movwf	___awdiv@quotient+1,c
  8570  001D20  0E00               	movlw	0
  8571  001D22  6E15               	movwf	___awdiv@quotient,c
  8572  001D24  5011               	movf	___awdiv@divisor,w,c
  8573  001D26  1012               	iorwf	___awdiv@divisor+1,w,c
  8574  001D28  B4D8               	btfsc	status,2,c
  8575  001D2A  D021               	goto	l4989
  8576  001D2C  0E01               	movlw	1
  8577  001D2E  6E13               	movwf	___awdiv@counter,c
  8578  001D30  D005               	goto	l4975
  8579  001D32                     l4973:
  8580  001D32  90D8               	bcf	status,0,c
  8581  001D34  3611               	rlcf	___awdiv@divisor,f,c
  8582  001D36  3612               	rlcf	___awdiv@divisor+1,f,c
  8583  001D38  2A13               	incf	___awdiv@counter,f,c
  8584  001D3A  D000               	goto	l4975
  8585  001D3C                     l4975:
  8586  001D3C  BE12               	btfsc	___awdiv@divisor+1,7,c
  8587  001D3E  D002               	goto	l4977
  8588  001D40  D7F8               	goto	l4973
  8589  001D42  D000               	goto	l4977
  8590  001D44                     l4977:
  8591  001D44  90D8               	bcf	status,0,c
  8592  001D46  3615               	rlcf	___awdiv@quotient,f,c
  8593  001D48  3616               	rlcf	___awdiv@quotient+1,f,c
  8594  001D4A  5011               	movf	___awdiv@divisor,w,c
  8595  001D4C  5C0F               	subwf	___awdiv@dividend,w,c
  8596  001D4E  5012               	movf	___awdiv@divisor+1,w,c
  8597  001D50  5810               	subwfb	___awdiv@dividend+1,w,c
  8598  001D52  A0D8               	btfss	status,0,c
  8599  001D54  D006               	goto	l4985
  8600  001D56  5011               	movf	___awdiv@divisor,w,c
  8601  001D58  5E0F               	subwf	___awdiv@dividend,f,c
  8602  001D5A  5012               	movf	___awdiv@divisor+1,w,c
  8603  001D5C  5A10               	subwfb	___awdiv@dividend+1,f,c
  8604  001D5E  8015               	bsf	___awdiv@quotient,0,c
  8605  001D60  D000               	goto	l4985
  8606  001D62                     l4985:
  8607  001D62  90D8               	bcf	status,0,c
  8608  001D64  3212               	rrcf	___awdiv@divisor+1,f,c
  8609  001D66  3211               	rrcf	___awdiv@divisor,f,c
  8610  001D68  2E13               	decfsz	___awdiv@counter,f,c
  8611  001D6A  D7EC               	goto	l4977
  8612  001D6C  D000               	goto	l4989
  8613  001D6E                     l4989:
  8614  001D6E  5014               	movf	___awdiv@sign,w,c
  8615  001D70  B4D8               	btfsc	status,2,c
  8616  001D72  D005               	goto	l4993
  8617  001D74  6C15               	negf	___awdiv@quotient,c
  8618  001D76  1E16               	comf	___awdiv@quotient+1,f,c
  8619  001D78  B0D8               	btfsc	status,0,c
  8620  001D7A  2A16               	incf	___awdiv@quotient+1,f,c
  8621  001D7C  D000               	goto	l4993
  8622  001D7E                     l4993:
  8623  001D7E  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  8624  001D82  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  8625  001D86  D000               	goto	l825
  8626  001D88                     l825:
  8627  001D88  0012               	return		;funcret
  8628  001D8A                     __end_of___awdiv:
  8629                           	opt stack 0
  8630                           tblptru	equ	0xFF8
  8631                           tblptrh	equ	0xFF7
  8632                           tblptrl	equ	0xFF6
  8633                           tablat	equ	0xFF5
  8634                           prodh	equ	0xFF4
  8635                           prodl	equ	0xFF3
  8636                           intcon	equ	0xFF2
  8637                           intcon2	equ	0xFF1
  8638                           intcon3	equ	0xFF0
  8639                           postinc0	equ	0xFEE
  8640                           wreg	equ	0xFE8
  8641                           postdec1	equ	0xFE5
  8642                           fsr1l	equ	0xFE1
  8643                           postinc2	equ	0xFDE
  8644                           postdec2	equ	0xFDD
  8645                           fsr2h	equ	0xFDA
  8646                           fsr2l	equ	0xFD9
  8647                           status	equ	0xFD8
  8648                           
  8649 ;; *************** function _Wait_One_Second_With_Beep *****************
  8650 ;; Defined at:
  8651 ;;		line 702 in file "Lab8.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;		None
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;		None
  8656 ;; Return value:  Size  Location     Type
  8657 ;;		None               void
  8658 ;; Registers used:
  8659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;Total ram usage:        0 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:   10
  8672 ;; This function calls:
  8673 ;;		_Activate_Buzzer
  8674 ;;		_Deactivate_Buzzer
  8675 ;;		_Wait_Half_Second
  8676 ;;		_drawtext
  8677 ;;		_strcpy
  8678 ;;		_update_LCD_misc
  8679 ;; This function is called by:
  8680 ;;		_PED_Control
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           	psect	text38
  8685  001E20                     __ptext38:
  8686                           	opt stack 0
  8687  001E20                     _Wait_One_Second_With_Beep:
  8688                           	opt stack 18
  8689                           
  8690                           ;Lab8.c: 704: PORTDbits.RD7 = 1;
  8691                           
  8692                           ;incstack = 0
  8693  001E20  8E83               	bsf	3971,7,c	;volatile
  8694                           
  8695                           ;Lab8.c: 705: strcpy(txt,"*");
  8696  001E22  C04C  F00F         	movff	_txt,strcpy@to
  8697  001E26  C04D  F010         	movff	_txt+1,strcpy@to+1
  8698  001E2A  0EFC               	movlw	low STR_5
  8699  001E2C  6E11               	movwf	strcpy@from,c
  8700  001E2E  0EFF               	movlw	high STR_5
  8701  001E30  6E12               	movwf	strcpy@from+1,c
  8702  001E32  EC9D  F013         	call	_strcpy	;wreg free
  8703                           
  8704                           ;Lab8.c: 706: drawtext(120,10,txt,0xFFFF,0x0000,1);
  8705  001E36  0E0A               	movlw	10
  8706  001E38  6E37               	movwf	drawtext@y,c
  8707  001E3A  C04C  F038         	movff	_txt,drawtext@_text
  8708  001E3E  C04D  F039         	movff	_txt+1,drawtext@_text+1
  8709  001E42  0EFF               	movlw	255
  8710  001E44  6E3B               	movwf	drawtext@color+1,c
  8711  001E46  683A               	setf	drawtext@color,c
  8712  001E48  0E00               	movlw	0
  8713  001E4A  6E3D               	movwf	drawtext@bg+1,c
  8714  001E4C  0E00               	movlw	0
  8715  001E4E  6E3C               	movwf	drawtext@bg,c
  8716  001E50  0E01               	movlw	1
  8717  001E52  6E3E               	movwf	drawtext@size,c
  8718  001E54  0E78               	movlw	120
  8719  001E56  EC10  F00B         	call	_drawtext
  8720                           
  8721                           ;Lab8.c: 707: Activate_Buzzer();
  8722  001E5A  EC57  F014         	call	_Activate_Buzzer	;wreg free
  8723                           
  8724                           ;Lab8.c: 708: Wait_Half_Second();
  8725  001E5E  EC18  F014         	call	_Wait_Half_Second	;wreg free
  8726                           
  8727                           ;Lab8.c: 710: PORTDbits.RD7 = 0;
  8728  001E62  9E83               	bcf	3971,7,c	;volatile
  8729                           
  8730                           ;Lab8.c: 711: strcpy(txt," ");
  8731  001E64  C04C  F00F         	movff	_txt,strcpy@to
  8732  001E68  C04D  F010         	movff	_txt+1,strcpy@to+1
  8733  001E6C  0EFA               	movlw	low STR_17
  8734  001E6E  6E11               	movwf	strcpy@from,c
  8735  001E70  0EFF               	movlw	high STR_17
  8736  001E72  6E12               	movwf	strcpy@from+1,c
  8737  001E74  EC9D  F013         	call	_strcpy	;wreg free
  8738                           
  8739                           ;Lab8.c: 712: drawtext(120,10,txt,0xFFFF,0x0000,1);
  8740  001E78  0E0A               	movlw	10
  8741  001E7A  6E37               	movwf	drawtext@y,c
  8742  001E7C  C04C  F038         	movff	_txt,drawtext@_text
  8743  001E80  C04D  F039         	movff	_txt+1,drawtext@_text+1
  8744  001E84  0EFF               	movlw	255
  8745  001E86  6E3B               	movwf	drawtext@color+1,c
  8746  001E88  683A               	setf	drawtext@color,c
  8747  001E8A  0E00               	movlw	0
  8748  001E8C  6E3D               	movwf	drawtext@bg+1,c
  8749  001E8E  0E00               	movlw	0
  8750  001E90  6E3C               	movwf	drawtext@bg,c
  8751  001E92  0E01               	movlw	1
  8752  001E94  6E3E               	movwf	drawtext@size,c
  8753  001E96  0E78               	movlw	120
  8754  001E98  EC10  F00B         	call	_drawtext
  8755                           
  8756                           ;Lab8.c: 713: Deactivate_Buzzer();
  8757  001E9C  EC8E  F014         	call	_Deactivate_Buzzer	;wreg free
  8758                           
  8759                           ;Lab8.c: 714: Wait_Half_Second();
  8760  001EA0  EC18  F014         	call	_Wait_Half_Second	;wreg free
  8761                           
  8762                           ;Lab8.c: 715: update_LCD_misc();
  8763  001EA4  EC56  F005         	call	_update_LCD_misc	;wreg free
  8764  001EA8  0012               	return		;funcret
  8765  001EAA                     __end_of_Wait_One_Second_With_Beep:
  8766                           	opt stack 0
  8767                           tblptru	equ	0xFF8
  8768                           tblptrh	equ	0xFF7
  8769                           tblptrl	equ	0xFF6
  8770                           tablat	equ	0xFF5
  8771                           prodh	equ	0xFF4
  8772                           prodl	equ	0xFF3
  8773                           intcon	equ	0xFF2
  8774                           intcon2	equ	0xFF1
  8775                           intcon3	equ	0xFF0
  8776                           postinc0	equ	0xFEE
  8777                           wreg	equ	0xFE8
  8778                           postdec1	equ	0xFE5
  8779                           fsr1l	equ	0xFE1
  8780                           postinc2	equ	0xFDE
  8781                           postdec2	equ	0xFDD
  8782                           fsr2h	equ	0xFDA
  8783                           fsr2l	equ	0xFD9
  8784                           status	equ	0xFD8
  8785                           
  8786 ;; *************** function _update_LCD_misc *****************
  8787 ;; Defined at:
  8788 ;;		line 833 in file "Lab8.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;		None
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;  nStep           2    7[BANK0 ] int 
  8793 ;; Return value:  Size  Location     Type
  8794 ;;		None               void
  8795 ;; Registers used:
  8796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;Total ram usage:        2 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:    9
  8809 ;; This function calls:
  8810 ;;		___awtoft
  8811 ;;		___ftdiv
  8812 ;;		___ftge
  8813 ;;		___wmul
  8814 ;;		_drawtext
  8815 ;;		_get_full_ADC
  8816 ;; This function is called by:
  8817 ;;		_PED_Control
  8818 ;;		_Wait_One_Second
  8819 ;;		_Wait_One_Second_With_Beep
  8820 ;;		_Wait_N_Seconds
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           	psect	text39
  8825  000AAC                     __ptext39:
  8826                           	opt stack 0
  8827  000AAC                     _update_LCD_misc:
  8828                           	opt stack 19
  8829                           
  8830                           ;Lab8.c: 835: int nStep = get_full_ADC();
  8831                           
  8832                           ;incstack = 0
  8833  000AAC  ECF7  F013         	call	_get_full_ADC	;wreg free
  8834  000AB0  C00F  F0B7         	movff	?_get_full_ADC,update_LCD_misc@nStep
  8835  000AB4  C010  F0B8         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  8836                           
  8837                           ;Lab8.c: 836: volt = nStep * 5 /1024.0;
  8838  000AB8  C0B7  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  8839  000ABC  C0B8  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  8840  000AC0  0E00               	movlw	0
  8841  000AC2  6E12               	movwf	___wmul@multiplicand+1,c
  8842  000AC4  0E05               	movlw	5
  8843  000AC6  6E11               	movwf	___wmul@multiplicand,c
  8844  000AC8  ECE3  F013         	call	___wmul	;wreg free
  8845  000ACC  C00F  F017         	movff	?___wmul,___awtoft@c
  8846  000AD0  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  8847  000AD4  EC7F  F013         	call	___awtoft	;wreg free
  8848  000AD8  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  8849  000ADC  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  8850  000AE0  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  8851  000AE4  0E00               	movlw	0
  8852  000AE6  6E1E               	movwf	___ftdiv@f2,c
  8853  000AE8  0E80               	movlw	128
  8854  000AEA  6E1F               	movwf	___ftdiv@f2+1,c
  8855  000AEC  0E44               	movlw	68
  8856  000AEE  6E20               	movwf	___ftdiv@f2+2,c
  8857  000AF0  EC0E  F00C         	call	___ftdiv	;wreg free
  8858  000AF4  C01B  F041         	movff	?___ftdiv,_volt
  8859  000AF8  C01C  F042         	movff	?___ftdiv+1,_volt+1
  8860  000AFC  C01D  F043         	movff	?___ftdiv+2,_volt+2
  8861                           
  8862                           ;Lab8.c: 838: SW_MODE = volt < 2.5 ? 1:0;
  8863  000B00  C041  F00F         	movff	_volt,___ftge@ff1
  8864  000B04  C042  F010         	movff	_volt+1,___ftge@ff1+1
  8865  000B08  C043  F011         	movff	_volt+2,___ftge@ff1+2
  8866  000B0C  0E00               	movlw	0
  8867  000B0E  6E12               	movwf	___ftge@ff2,c
  8868  000B10  0E20               	movlw	32
  8869  000B12  6E13               	movwf	___ftge@ff2+1,c
  8870  000B14  0E40               	movlw	64
  8871  000B16  6E14               	movwf	___ftge@ff2+2,c
  8872  000B18  ECC5  F00E         	call	___ftge	;wreg free
  8873  000B1C  B0D8               	btfsc	status,0,c
  8874  000B1E  D002               	goto	u3620
  8875  000B20  0E01               	movlw	1
  8876  000B22  D001               	goto	u3630
  8877  000B24                     u3620:
  8878  000B24  0E00               	movlw	0
  8879  000B26                     u3630:
  8880  000B26  6E56               	movwf	_SW_MODE,c
  8881                           
  8882                           ;Lab8.c: 839: SW_EWPED = EW_PED_SW;
  8883  000B28  C04F  F055         	movff	_EW_PED_SW,_SW_EWPED
  8884                           
  8885                           ;Lab8.c: 840: SW_EWLT = PORTAbits.RA5;
  8886  000B2C  0E00               	movlw	0
  8887  000B2E  BA80               	btfsc	3968,5,c	;volatile
  8888  000B30  0E01               	movlw	1
  8889  000B32  6E54               	movwf	_SW_EWLT,c
  8890                           
  8891                           ;Lab8.c: 841: SW_NSPED = NS_PED_SW;
  8892  000B34  C052  F058         	movff	_NS_PED_SW,_SW_NSPED
  8893                           
  8894                           ;Lab8.c: 842: SW_NSLT = PORTAbits.RA4;
  8895  000B38  0E00               	movlw	0
  8896  000B3A  B880               	btfsc	3968,4,c	;volatile
  8897  000B3C  0E01               	movlw	1
  8898  000B3E  6E57               	movwf	_SW_NSLT,c
  8899                           
  8900                           ;Lab8.c: 844: if (SW_MODE == 0) SW_MODE_Txt[0]= 'N'; else SW_MODE_Txt[0] = 'D';
  8901  000B40  5056               	movf	_SW_MODE,w,c
  8902  000B42  A4D8               	btfss	status,2,c
  8903  000B44  D002               	goto	l4905
  8904  000B46  0E4E               	movlw	78
  8905  000B48  D001               	goto	L10
  8906  000B4A                     l4905:
  8907  000B4A  0E44               	movlw	68
  8908  000B4C                     L10:
  8909  000B4C  6E6C               	movwf	_SW_MODE_Txt,c
  8910                           
  8911                           ;Lab8.c: 845: if (SW_NSLT == 0) SW_NSLT_Txt[0]= '0'; else SW_NSLT_Txt[0] = '1';
  8912  000B4E  5057               	movf	_SW_NSLT,w,c
  8913  000B50  A4D8               	btfss	status,2,c
  8914  000B52  D002               	goto	l4909
  8915  000B54  0E30               	movlw	48
  8916  000B56  D001               	goto	L11
  8917  000B58                     l4909:
  8918  000B58  0E31               	movlw	49
  8919  000B5A                     L11:
  8920  000B5A  6E6E               	movwf	_SW_NSLT_Txt,c
  8921                           
  8922                           ;Lab8.c: 846: if (SW_NSPED == 0) SW_NSPED_Txt[0]= '0'; else SW_NSPED_Txt[0] = '1';
  8923  000B5C  5058               	movf	_SW_NSPED,w,c
  8924  000B5E  A4D8               	btfss	status,2,c
  8925  000B60  D002               	goto	l4913
  8926  000B62  0E30               	movlw	48
  8927  000B64  D001               	goto	L12
  8928  000B66                     l4913:
  8929  000B66  0E31               	movlw	49
  8930  000B68                     L12:
  8931  000B68  6E70               	movwf	_SW_NSPED_Txt,c
  8932                           
  8933                           ;Lab8.c: 847: if (SW_EWLT == 0) SW_EWLT_Txt[0]= '0'; else SW_EWLT_Txt[0] = '1';
  8934  000B6A  5054               	movf	_SW_EWLT,w,c
  8935  000B6C  A4D8               	btfss	status,2,c
  8936  000B6E  D002               	goto	l4917
  8937  000B70  0E30               	movlw	48
  8938  000B72  D001               	goto	L13
  8939  000B74                     l4917:
  8940  000B74  0E31               	movlw	49
  8941  000B76                     L13:
  8942  000B76  6E68               	movwf	_SW_EWLT_Txt,c
  8943                           
  8944                           ;Lab8.c: 848: if (SW_EWPED == 0) SW_EWPED_Txt[0]= '0'; else SW_EWPED_Txt[0] = '1';
  8945  000B78  5055               	movf	_SW_EWPED,w,c
  8946  000B7A  A4D8               	btfss	status,2,c
  8947  000B7C  D002               	goto	l4921
  8948  000B7E  0E30               	movlw	48
  8949  000B80  D001               	goto	L14
  8950  000B82                     l4921:
  8951  000B82  0E31               	movlw	49
  8952  000B84                     L14:
  8953  000B84  6E6A               	movwf	_SW_EWPED_Txt,c
  8954                           
  8955                           ;Lab8.c: 849: if (FLASHING_REQUEST == 0) FlashingR_Txt[0]= '0'; else FlashingR_Txt[0] = 
      +                          '1';
  8956  000B86  5051               	movf	_FLASHING_REQUEST,w,c
  8957  000B88  A4D8               	btfss	status,2,c
  8958  000B8A  D002               	goto	l4925
  8959  000B8C  0E30               	movlw	48
  8960  000B8E  D001               	goto	L15
  8961  000B90                     l4925:
  8962  000B90  0E31               	movlw	49
  8963  000B92                     L15:
  8964  000B92  6E64               	movwf	_FlashingR_Txt,c
  8965                           
  8966                           ;Lab8.c: 850: if (FLASHING == 0) FlashingS_Txt[0]= '0'; else FlashingS_Txt[0]= '1';
  8967  000B94  5050               	movf	_FLASHING,w,c
  8968  000B96  A4D8               	btfss	status,2,c
  8969  000B98  D002               	goto	l4929
  8970  000B9A  0E30               	movlw	48
  8971  000B9C  D001               	goto	L16
  8972  000B9E                     l4929:
  8973  000B9E  0E31               	movlw	49
  8974  000BA0                     L16:
  8975  000BA0  6E66               	movwf	_FlashingS_Txt,c
  8976  000BA2  D000               	goto	l4931
  8977  000BA4                     l4931:
  8978                           
  8979                           ;Lab8.c: 852: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  8980  000BA4  0E0A               	movlw	10
  8981  000BA6  6E37               	movwf	drawtext@y,c
  8982  000BA8  0E62               	movlw	low _Act_Mode_Txt
  8983  000BAA  6E38               	movwf	drawtext@_text,c
  8984  000BAC  0E00               	movlw	high _Act_Mode_Txt
  8985  000BAE  6E39               	movwf	drawtext@_text+1,c
  8986  000BB0  0EFF               	movlw	255
  8987  000BB2  6E3B               	movwf	drawtext@color+1,c
  8988  000BB4  683A               	setf	drawtext@color,c
  8989  000BB6  0E00               	movlw	0
  8990  000BB8  6E3D               	movwf	drawtext@bg+1,c
  8991  000BBA  0E00               	movlw	0
  8992  000BBC  6E3C               	movwf	drawtext@bg,c
  8993  000BBE  0E01               	movlw	1
  8994  000BC0  6E3E               	movwf	drawtext@size,c
  8995  000BC2  0E23               	movlw	35
  8996  000BC4  EC10  F00B         	call	_drawtext
  8997                           
  8998                           ;Lab8.c: 853: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  8999  000BC8  0E95               	movlw	149
  9000  000BCA  6E37               	movwf	drawtext@y,c
  9001  000BCC  0E6A               	movlw	low _SW_EWPED_Txt
  9002  000BCE  6E38               	movwf	drawtext@_text,c
  9003  000BD0  0E00               	movlw	high _SW_EWPED_Txt
  9004  000BD2  6E39               	movwf	drawtext@_text+1,c
  9005  000BD4  0EFF               	movlw	255
  9006  000BD6  6E3B               	movwf	drawtext@color+1,c
  9007  000BD8  683A               	setf	drawtext@color,c
  9008  000BDA  0E00               	movlw	0
  9009  000BDC  6E3D               	movwf	drawtext@bg+1,c
  9010  000BDE  0E00               	movlw	0
  9011  000BE0  6E3C               	movwf	drawtext@bg,c
  9012  000BE2  0E01               	movlw	1
  9013  000BE4  6E3E               	movwf	drawtext@size,c
  9014  000BE6  0E06               	movlw	6
  9015  000BE8  EC10  F00B         	call	_drawtext
  9016                           
  9017                           ;Lab8.c: 854: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  9018  000BEC  0E95               	movlw	149
  9019  000BEE  6E37               	movwf	drawtext@y,c
  9020  000BF0  0E68               	movlw	low _SW_EWLT_Txt
  9021  000BF2  6E38               	movwf	drawtext@_text,c
  9022  000BF4  0E00               	movlw	high _SW_EWLT_Txt
  9023  000BF6  6E39               	movwf	drawtext@_text+1,c
  9024  000BF8  0EFF               	movlw	255
  9025  000BFA  6E3B               	movwf	drawtext@color+1,c
  9026  000BFC  683A               	setf	drawtext@color,c
  9027  000BFE  0E00               	movlw	0
  9028  000C00  6E3D               	movwf	drawtext@bg+1,c
  9029  000C02  0E00               	movlw	0
  9030  000C04  6E3C               	movwf	drawtext@bg,c
  9031  000C06  0E01               	movlw	1
  9032  000C08  6E3E               	movwf	drawtext@size,c
  9033  000C0A  0E20               	movlw	32
  9034  000C0C  EC10  F00B         	call	_drawtext
  9035                           
  9036                           ;Lab8.c: 855: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  9037  000C10  0E95               	movlw	149
  9038  000C12  6E37               	movwf	drawtext@y,c
  9039  000C14  0E70               	movlw	low _SW_NSPED_Txt
  9040  000C16  6E38               	movwf	drawtext@_text,c
  9041  000C18  0E00               	movlw	high _SW_NSPED_Txt
  9042  000C1A  6E39               	movwf	drawtext@_text+1,c
  9043  000C1C  0EFF               	movlw	255
  9044  000C1E  6E3B               	movwf	drawtext@color+1,c
  9045  000C20  683A               	setf	drawtext@color,c
  9046  000C22  0E00               	movlw	0
  9047  000C24  6E3D               	movwf	drawtext@bg+1,c
  9048  000C26  0E00               	movlw	0
  9049  000C28  6E3C               	movwf	drawtext@bg,c
  9050  000C2A  0E01               	movlw	1
  9051  000C2C  6E3E               	movwf	drawtext@size,c
  9052  000C2E  0E3A               	movlw	58
  9053  000C30  EC10  F00B         	call	_drawtext
  9054                           
  9055                           ;Lab8.c: 856: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  9056  000C34  0E95               	movlw	149
  9057  000C36  6E37               	movwf	drawtext@y,c
  9058  000C38  0E6E               	movlw	low _SW_NSLT_Txt
  9059  000C3A  6E38               	movwf	drawtext@_text,c
  9060  000C3C  0E00               	movlw	high _SW_NSLT_Txt
  9061  000C3E  6E39               	movwf	drawtext@_text+1,c
  9062  000C40  0EFF               	movlw	255
  9063  000C42  6E3B               	movwf	drawtext@color+1,c
  9064  000C44  683A               	setf	drawtext@color,c
  9065  000C46  0E00               	movlw	0
  9066  000C48  6E3D               	movwf	drawtext@bg+1,c
  9067  000C4A  0E00               	movlw	0
  9068  000C4C  6E3C               	movwf	drawtext@bg,c
  9069  000C4E  0E01               	movlw	1
  9070  000C50  6E3E               	movwf	drawtext@size,c
  9071  000C52  0E57               	movlw	87
  9072  000C54  EC10  F00B         	call	_drawtext
  9073                           
  9074                           ;Lab8.c: 857: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  9075  000C58  0E95               	movlw	149
  9076  000C5A  6E37               	movwf	drawtext@y,c
  9077  000C5C  0E6C               	movlw	low _SW_MODE_Txt
  9078  000C5E  6E38               	movwf	drawtext@_text,c
  9079  000C60  0E00               	movlw	high _SW_MODE_Txt
  9080  000C62  6E39               	movwf	drawtext@_text+1,c
  9081  000C64  0EFF               	movlw	255
  9082  000C66  6E3B               	movwf	drawtext@color+1,c
  9083  000C68  683A               	setf	drawtext@color,c
  9084  000C6A  0E00               	movlw	0
  9085  000C6C  6E3D               	movwf	drawtext@bg+1,c
  9086  000C6E  0E00               	movlw	0
  9087  000C70  6E3C               	movwf	drawtext@bg,c
  9088  000C72  0E01               	movlw	1
  9089  000C74  6E3E               	movwf	drawtext@size,c
  9090  000C76  0E70               	movlw	112
  9091  000C78  EC10  F00B         	call	_drawtext
  9092                           
  9093                           ;Lab8.c: 858: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  9094  000C7C  0E0A               	movlw	10
  9095  000C7E  6E37               	movwf	drawtext@y,c
  9096  000C80  0E64               	movlw	low _FlashingR_Txt
  9097  000C82  6E38               	movwf	drawtext@_text,c
  9098  000C84  0E00               	movlw	high _FlashingR_Txt
  9099  000C86  6E39               	movwf	drawtext@_text+1,c
  9100  000C88  0EFF               	movlw	255
  9101  000C8A  6E3B               	movwf	drawtext@color+1,c
  9102  000C8C  683A               	setf	drawtext@color,c
  9103  000C8E  0E00               	movlw	0
  9104  000C90  6E3D               	movwf	drawtext@bg+1,c
  9105  000C92  0E00               	movlw	0
  9106  000C94  6E3C               	movwf	drawtext@bg,c
  9107  000C96  0E01               	movlw	1
  9108  000C98  6E3E               	movwf	drawtext@size,c
  9109  000C9A  0E46               	movlw	70
  9110  000C9C  EC10  F00B         	call	_drawtext
  9111                           
  9112                           ;Lab8.c: 859: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  9113  000CA0  0E0A               	movlw	10
  9114  000CA2  6E37               	movwf	drawtext@y,c
  9115  000CA4  0E66               	movlw	low _FlashingS_Txt
  9116  000CA6  6E38               	movwf	drawtext@_text,c
  9117  000CA8  0E00               	movlw	high _FlashingS_Txt
  9118  000CAA  6E39               	movwf	drawtext@_text+1,c
  9119  000CAC  0EFF               	movlw	255
  9120  000CAE  6E3B               	movwf	drawtext@color+1,c
  9121  000CB0  683A               	setf	drawtext@color,c
  9122  000CB2  0E00               	movlw	0
  9123  000CB4  6E3D               	movwf	drawtext@bg+1,c
  9124  000CB6  0E00               	movlw	0
  9125  000CB8  6E3C               	movwf	drawtext@bg,c
  9126  000CBA  0E01               	movlw	1
  9127  000CBC  6E3E               	movwf	drawtext@size,c
  9128  000CBE  0E64               	movlw	100
  9129  000CC0  EC10  F00B         	call	_drawtext
  9130  000CC4  0012               	return		;funcret
  9131  000CC6                     __end_of_update_LCD_misc:
  9132                           	opt stack 0
  9133                           tblptru	equ	0xFF8
  9134                           tblptrh	equ	0xFF7
  9135                           tblptrl	equ	0xFF6
  9136                           tablat	equ	0xFF5
  9137                           prodh	equ	0xFF4
  9138                           prodl	equ	0xFF3
  9139                           intcon	equ	0xFF2
  9140                           intcon2	equ	0xFF1
  9141                           intcon3	equ	0xFF0
  9142                           postinc0	equ	0xFEE
  9143                           wreg	equ	0xFE8
  9144                           postdec1	equ	0xFE5
  9145                           fsr1l	equ	0xFE1
  9146                           postinc2	equ	0xFDE
  9147                           postdec2	equ	0xFDD
  9148                           fsr2h	equ	0xFDA
  9149                           fsr2l	equ	0xFD9
  9150                           status	equ	0xFD8
  9151                           
  9152 ;; *************** function _get_full_ADC *****************
  9153 ;; Defined at:
  9154 ;;		line 447 in file "Lab8.c"
  9155 ;; Parameters:    Size  Location     Type
  9156 ;;		None
  9157 ;; Auto vars:     Size  Location     Type
  9158 ;;  result          2   18[COMRAM] unsigned int 
  9159 ;; Return value:  Size  Location     Type
  9160 ;;                  2   14[COMRAM] unsigned int 
  9161 ;; Registers used:
  9162 ;;		wreg, status,2, status,0
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9168 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9170 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9172 ;;Total ram usage:        6 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    2
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		_main
  9179 ;;		_update_LCD_misc
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           	psect	text40
  9184  0027EE                     __ptext40:
  9185                           	opt stack 0
  9186  0027EE                     _get_full_ADC:
  9187                           	opt stack 28
  9188                           
  9189                           ;Lab8.c: 449: unsigned int result;
  9190                           ;Lab8.c: 450: ADCON0bits.GO=1;
  9191                           
  9192                           ;incstack = 0
  9193  0027EE  82C2               	bsf	4034,1,c	;volatile
  9194                           
  9195                           ;Lab8.c: 451: while(ADCON0bits.DONE==1);
  9196  0027F0  D000               	goto	l442
  9197  0027F2                     l442:
  9198  0027F2  B2C2               	btfsc	4034,1,c	;volatile
  9199  0027F4  D7FE               	goto	l442
  9200                           
  9201                           ;Lab8.c: 452: result = (ADRESH * 0x100) + ADRESL;
  9202  0027F6  50C4               	movf	4036,w,c	;volatile
  9203  0027F8  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  9204  0027FA  6A11               	clrf	??_get_full_ADC& (0+255),c
  9205  0027FC  50C3               	movf	4035,w,c	;volatile
  9206  0027FE  2411               	addwf	??_get_full_ADC,w,c
  9207  002800  6E13               	movwf	get_full_ADC@result,c
  9208  002802  0E00               	movlw	0
  9209  002804  2012               	addwfc	??_get_full_ADC+1,w,c
  9210  002806  6E14               	movwf	get_full_ADC@result+1,c
  9211                           
  9212                           ;Lab8.c: 454: return result;
  9213  002808  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  9214  00280C  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  9215  002810  D000               	goto	l445
  9216  002812                     l445:
  9217  002812  0012               	return		;funcret
  9218  002814                     __end_of_get_full_ADC:
  9219                           	opt stack 0
  9220                           tblptru	equ	0xFF8
  9221                           tblptrh	equ	0xFF7
  9222                           tblptrl	equ	0xFF6
  9223                           tablat	equ	0xFF5
  9224                           prodh	equ	0xFF4
  9225                           prodl	equ	0xFF3
  9226                           intcon	equ	0xFF2
  9227                           intcon2	equ	0xFF1
  9228                           intcon3	equ	0xFF0
  9229                           postinc0	equ	0xFEE
  9230                           wreg	equ	0xFE8
  9231                           postdec1	equ	0xFE5
  9232                           fsr1l	equ	0xFE1
  9233                           postinc2	equ	0xFDE
  9234                           postdec2	equ	0xFDD
  9235                           fsr2h	equ	0xFDA
  9236                           fsr2l	equ	0xFD9
  9237                           status	equ	0xFD8
  9238                           
  9239 ;; *************** function _drawtext *****************
  9240 ;; Defined at:
  9241 ;;		line 506 in file "ST7735_TFT.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;  x               1    wreg     unsigned char 
  9244 ;;  y               1   54[COMRAM] unsigned char 
  9245 ;;  _text           2   55[COMRAM] PTR unsigned char 
  9246 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  9247 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  9248 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  9249 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  9250 ;;  color           2   57[COMRAM] unsigned int 
  9251 ;;  bg              2   59[COMRAM] unsigned int 
  9252 ;;  size            1   61[COMRAM] unsigned char 
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;  x               1    0[BANK0 ] unsigned char 
  9255 ;;  i               2    3[BANK0 ] unsigned int 
  9256 ;;  textsize        2    1[BANK0 ] unsigned int 
  9257 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  9258 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  9259 ;; Return value:  Size  Location     Type
  9260 ;;		None               void
  9261 ;; Registers used:
  9262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9263 ;; Tracked objects:
  9264 ;;		On entry : 0/0
  9265 ;;		On exit  : 0/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9268 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;Total ram usage:       17 bytes
  9273 ;; Hardware stack levels used:    1
  9274 ;; Hardware stack levels required when called:    8
  9275 ;; This function calls:
  9276 ;;		_drawChar
  9277 ;;		_strlen
  9278 ;; This function is called by:
  9279 ;;		_Initialize_Screen
  9280 ;;		_Wait_One_Second
  9281 ;;		_Wait_One_Second_With_Beep
  9282 ;;		_update_LCD_count
  9283 ;;		_update_LCD_PED_Count
  9284 ;;		_update_LCD_misc
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           	psect	text41
  9289  001620                     __ptext41:
  9290                           	opt stack 0
  9291  001620                     _drawtext:
  9292                           	opt stack 19
  9293                           
  9294                           ;incstack = 0
  9295                           ;drawtext@x stored from wreg
  9296  001620  0100               	movlb	0	; () banked
  9297  001622  6FB0               	movwf	drawtext@x& (0+255),b
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;ST7735_TFT.c: 508: unsigned char cursor_x, cursor_y;
  9301                           ;ST7735_TFT.c: 509: unsigned int textsize, i;
  9302                           ;ST7735_TFT.c: 510: cursor_x = x, cursor_y = y;
  9303  001624  C0B0  F0B6         	movff	drawtext@x,drawtext@cursor_x
  9304                           
  9305                           ; BSR set to: 0
  9306  001628  C037  F0B5         	movff	drawtext@y,drawtext@cursor_y
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;ST7735_TFT.c: 511: textsize = strlen(_text);
  9310  00162C  C038  F00F         	movff	drawtext@_text,strlen@s
  9311  001630  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  9312  001634  EC60  F013         	call	_strlen	;wreg free
  9313  001638  C00F  F0B1         	movff	?_strlen,drawtext@textsize
  9314  00163C  C010  F0B2         	movff	?_strlen+1,drawtext@textsize+1
  9315                           
  9316                           ;ST7735_TFT.c: 512: for(i = 0; i < textsize; i++){
  9317  001640  0E00               	movlw	0
  9318  001642  0100               	movlb	0	; () banked
  9319  001644  6FB4               	movwf	(drawtext@i+1)& (0+255),b
  9320  001646  0E00               	movlw	0
  9321  001648  6FB3               	movwf	drawtext@i& (0+255),b
  9322  00164A  D064               	goto	l4693
  9323  00164C                     l4667:
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;ST7735_TFT.c: 513: if(wrap && ((cursor_x + size * 5) > 128)){
  9327  00164C  505E               	movf	_wrap,w,c
  9328  00164E  B4D8               	btfsc	status,2,c
  9329  001650  D034               	goto	l4683
  9330                           
  9331                           ; BSR set to: 0
  9332  001652  503E               	movf	drawtext@size,w,c
  9333  001654  0D05               	mullw	5
  9334  001656  0100               	movlb	0	; () banked
  9335  001658  51B6               	movf	drawtext@cursor_x& (0+255),w,b
  9336  00165A  6E3F               	movwf	??_drawtext& (0+255),c
  9337  00165C  6A40               	clrf	(??_drawtext+1)& (0+255),c
  9338  00165E  50F3               	movf	prodl,w,c
  9339  001660  263F               	addwf	??_drawtext,f,c
  9340  001662  50F4               	movf	prodh,w,c
  9341  001664  2240               	addwfc	??_drawtext+1,f,c
  9342  001666  BE40               	btfsc	??_drawtext+1,7,c
  9343  001668  D028               	goto	l4683
  9344  00166A  5040               	movf	??_drawtext+1,w,c
  9345  00166C  E104               	bnz	u3390
  9346  00166E  0E81               	movlw	129
  9347  001670  5C3F               	subwf	??_drawtext,w,c
  9348  001672  A0D8               	btfss	status,0,c
  9349  001674  D022               	goto	l4683
  9350  001676                     u3390:
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;ST7735_TFT.c: 514: cursor_x = 0;
  9354  001676  0E00               	movlw	0
  9355  001678  0100               	movlb	0	; () banked
  9356  00167A  6FB6               	movwf	drawtext@cursor_x& (0+255),b
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;ST7735_TFT.c: 515: cursor_y = cursor_y + size * 7 + 3 ;
  9360  00167C  503E               	movf	drawtext@size,w,c
  9361  00167E  0D07               	mullw	7
  9362  001680  50F3               	movf	prodl,w,c
  9363  001682  0100               	movlb	0	; () banked
  9364  001684  25B5               	addwf	drawtext@cursor_y& (0+255),w,b
  9365  001686  0F03               	addlw	3
  9366  001688  0100               	movlb	0	; () banked
  9367  00168A  6FB5               	movwf	drawtext@cursor_y& (0+255),b
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;ST7735_TFT.c: 516: if(cursor_y > 160) cursor_y = 160;
  9371  00168C  0EA0               	movlw	160
  9372  00168E  0100               	movlb	0	; () banked
  9373  001690  65B5               	cpfsgt	drawtext@cursor_y& (0+255),b
  9374  001692  D004               	goto	l4679
  9375                           
  9376                           ; BSR set to: 0
  9377  001694  0EA0               	movlw	160
  9378  001696  0100               	movlb	0	; () banked
  9379  001698  6FB5               	movwf	drawtext@cursor_y& (0+255),b
  9380  00169A  D000               	goto	l4679
  9381  00169C                     l4679:
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;ST7735_TFT.c: 517: if(_text[i] == 0x20) goto _skip; }
  9385  00169C  0100               	movlb	0	; () banked
  9386  00169E  51B3               	movf	drawtext@i& (0+255),w,b
  9387  0016A0  2438               	addwf	drawtext@_text,w,c
  9388  0016A2  6ED9               	movwf	fsr2l,c
  9389  0016A4  0100               	movlb	0	; () banked
  9390  0016A6  51B4               	movf	(drawtext@i+1)& (0+255),w,b
  9391  0016A8  2039               	addwfc	drawtext@_text+1,w,c
  9392  0016AA  6EDA               	movwf	fsr2h,c
  9393  0016AC  0E20               	movlw	32
  9394  0016AE  18DE               	xorwf	postinc2,w,c
  9395  0016B0  B4D8               	btfsc	status,2,c
  9396  0016B2  D02C               	goto	l4691
  9397  0016B4  D002               	goto	l4683
  9398                           
  9399                           ; BSR set to: 0
  9400  0016B6  D02A               	goto	l4691
  9401                           
  9402                           ; BSR set to: 0
  9403  0016B8  D000               	goto	l4683
  9404  0016BA                     l4683:
  9405                           
  9406                           ; BSR set to: 0
  9407                           ;ST7735_TFT.c: 518: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  9408  0016BA  C0B5  F02C         	movff	drawtext@cursor_y,drawChar@y
  9409  0016BE  0100               	movlb	0	; () banked
  9410  0016C0  51B3               	movf	drawtext@i& (0+255),w,b
  9411  0016C2  2438               	addwf	drawtext@_text,w,c
  9412  0016C4  6ED9               	movwf	fsr2l,c
  9413  0016C6  0100               	movlb	0	; () banked
  9414  0016C8  51B4               	movf	(drawtext@i+1)& (0+255),w,b
  9415  0016CA  2039               	addwfc	drawtext@_text+1,w,c
  9416  0016CC  6EDA               	movwf	fsr2h,c
  9417  0016CE  50DF               	movf	indf2,w,c
  9418  0016D0  6E2D               	movwf	drawChar@c,c
  9419  0016D2  C03A  F02E         	movff	drawtext@color,drawChar@color
  9420  0016D6  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  9421  0016DA  C03C  F030         	movff	drawtext@bg,drawChar@bg
  9422  0016DE  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  9423  0016E2  C03E  F032         	movff	drawtext@size,drawChar@size
  9424  0016E6  0100               	movlb	0	; () banked
  9425  0016E8  51B6               	movf	drawtext@cursor_x& (0+255),w,b
  9426  0016EA  EC01  F008         	call	_drawChar
  9427                           
  9428                           ;ST7735_TFT.c: 519: cursor_x = cursor_x + size * 6;
  9429  0016EE  503E               	movf	drawtext@size,w,c
  9430  0016F0  0D06               	mullw	6
  9431  0016F2  50F3               	movf	prodl,w,c
  9432  0016F4  0100               	movlb	0	; () banked
  9433  0016F6  25B6               	addwf	drawtext@cursor_x& (0+255),w,b
  9434  0016F8  0100               	movlb	0	; () banked
  9435  0016FA  6FB6               	movwf	drawtext@cursor_x& (0+255),b
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;ST7735_TFT.c: 520: if(cursor_x > 128) cursor_x = 128;
  9439  0016FC  0E80               	movlw	128
  9440  0016FE  0100               	movlb	0	; () banked
  9441  001700  65B6               	cpfsgt	drawtext@cursor_x& (0+255),b
  9442  001702  D004               	goto	l4691
  9443                           
  9444                           ; BSR set to: 0
  9445  001704  0E80               	movlw	128
  9446  001706  0100               	movlb	0	; () banked
  9447  001708  6FB6               	movwf	drawtext@cursor_x& (0+255),b
  9448                           
  9449                           ; BSR set to: 0
  9450  00170A  D000               	goto	l4691
  9451  00170C                     l4691:
  9452                           
  9453                           ; BSR set to: 0
  9454  00170C  0100               	movlb	0	; () banked
  9455  00170E  4BB3               	infsnz	drawtext@i& (0+255),f,b
  9456  001710  2BB4               	incf	(drawtext@i+1)& (0+255),f,b
  9457  001712  D000               	goto	l4693
  9458  001714                     l4693:
  9459                           
  9460                           ; BSR set to: 0
  9461  001714  0100               	movlb	0	; () banked
  9462  001716  51B1               	movf	drawtext@textsize& (0+255),w,b
  9463  001718  0100               	movlb	0	; () banked
  9464  00171A  5DB3               	subwf	drawtext@i& (0+255),w,b
  9465  00171C  0100               	movlb	0	; () banked
  9466  00171E  51B2               	movf	(drawtext@textsize+1)& (0+255),w,b
  9467  001720  0100               	movlb	0	; () banked
  9468  001722  59B4               	subwfb	(drawtext@i+1)& (0+255),w,b
  9469  001724  A0D8               	btfss	status,0,c
  9470  001726  D792               	goto	l4667
  9471                           
  9472                           ; BSR set to: 0
  9473                           
  9474                           ; BSR set to: 0
  9475  001728  0012               	return		;funcret
  9476  00172A                     __end_of_drawtext:
  9477                           	opt stack 0
  9478                           tblptru	equ	0xFF8
  9479                           tblptrh	equ	0xFF7
  9480                           tblptrl	equ	0xFF6
  9481                           tablat	equ	0xFF5
  9482                           prodh	equ	0xFF4
  9483                           prodl	equ	0xFF3
  9484                           intcon	equ	0xFF2
  9485                           intcon2	equ	0xFF1
  9486                           intcon3	equ	0xFF0
  9487                           postinc0	equ	0xFEE
  9488                           wreg	equ	0xFE8
  9489                           postdec1	equ	0xFE5
  9490                           fsr1l	equ	0xFE1
  9491                           indf2	equ	0xFDF
  9492                           postinc2	equ	0xFDE
  9493                           postdec2	equ	0xFDD
  9494                           fsr2h	equ	0xFDA
  9495                           fsr2l	equ	0xFD9
  9496                           status	equ	0xFD8
  9497                           
  9498 ;; *************** function _strlen *****************
  9499 ;; Defined at:
  9500 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;  s               2   14[COMRAM] PTR const unsigned char 
  9503 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  9504 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  9505 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  9506 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  9509 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
  9510 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
  9511 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
  9512 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  2   14[COMRAM] unsigned int 
  9515 ;; Registers used:
  9516 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9525 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;Total ram usage:        6 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    2
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_drawtext
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           	psect	text42
  9537  0026C0                     __ptext42:
  9538                           	opt stack 0
  9539  0026C0                     _strlen:
  9540                           	opt stack 24
  9541                           
  9542                           ; BSR set to: 0
  9543                           ;incstack = 0
  9544  0026C0  C00F  F013         	movff	strlen@s,strlen@cp
  9545  0026C4  C010  F014         	movff	strlen@s+1,strlen@cp+1
  9546  0026C8  D003               	goto	l4617
  9547  0026CA                     l4615:
  9548  0026CA  4A13               	infsnz	strlen@cp,f,c
  9549  0026CC  2A14               	incf	strlen@cp+1,f,c
  9550  0026CE  D000               	goto	l4617
  9551  0026D0                     l4617:
  9552  0026D0  C013  FFD9         	movff	strlen@cp,fsr2l
  9553  0026D4  C014  FFDA         	movff	strlen@cp+1,fsr2h
  9554  0026D8  50DF               	movf	indf2,w,c
  9555  0026DA  A4D8               	btfss	status,2,c
  9556  0026DC  D7F6               	goto	l4615
  9557  0026DE  C00F  F011         	movff	strlen@s,??_strlen
  9558  0026E2  C010  F012         	movff	strlen@s+1,??_strlen+1
  9559  0026E6  1E11               	comf	??_strlen,f,c
  9560  0026E8  1E12               	comf	??_strlen+1,f,c
  9561  0026EA  4A11               	infsnz	??_strlen,f,c
  9562  0026EC  2A12               	incf	??_strlen+1,f,c
  9563  0026EE  5013               	movf	strlen@cp,w,c
  9564  0026F0  2411               	addwf	??_strlen,w,c
  9565  0026F2  6E0F               	movwf	?_strlen,c
  9566  0026F4  5014               	movf	strlen@cp+1,w,c
  9567  0026F6  2012               	addwfc	??_strlen+1,w,c
  9568  0026F8  6E10               	movwf	?_strlen+1,c
  9569  0026FA  D000               	goto	l1189
  9570  0026FC                     l1189:
  9571  0026FC  0012               	return		;funcret
  9572  0026FE                     __end_of_strlen:
  9573                           	opt stack 0
  9574                           tblptru	equ	0xFF8
  9575                           tblptrh	equ	0xFF7
  9576                           tblptrl	equ	0xFF6
  9577                           tablat	equ	0xFF5
  9578                           prodh	equ	0xFF4
  9579                           prodl	equ	0xFF3
  9580                           intcon	equ	0xFF2
  9581                           intcon2	equ	0xFF1
  9582                           intcon3	equ	0xFF0
  9583                           postinc0	equ	0xFEE
  9584                           wreg	equ	0xFE8
  9585                           postdec1	equ	0xFE5
  9586                           fsr1l	equ	0xFE1
  9587                           indf2	equ	0xFDF
  9588                           postinc2	equ	0xFDE
  9589                           postdec2	equ	0xFDD
  9590                           fsr2h	equ	0xFDA
  9591                           fsr2l	equ	0xFD9
  9592                           status	equ	0xFD8
  9593                           
  9594 ;; *************** function _drawChar *****************
  9595 ;; Defined at:
  9596 ;;		line 479 in file "ST7735_TFT.c"
  9597 ;; Parameters:    Size  Location     Type
  9598 ;;  x               1    wreg     unsigned char 
  9599 ;;  y               1   43[COMRAM] unsigned char 
  9600 ;;  c               1   44[COMRAM] unsigned char 
  9601 ;;  color           2   45[COMRAM] unsigned int 
  9602 ;;  bg              2   47[COMRAM] unsigned int 
  9603 ;;  size            1   49[COMRAM] unsigned char 
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;  x               1   51[COMRAM] unsigned char 
  9606 ;;  line            1   50[COMRAM] unsigned char 
  9607 ;;  i               1   53[COMRAM] unsigned char 
  9608 ;;  j               1   52[COMRAM] unsigned char 
  9609 ;; Return value:  Size  Location     Type
  9610 ;;		None               void
  9611 ;; Registers used:
  9612 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9618 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;Total ram usage:       11 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    7
  9625 ;; This function calls:
  9626 ;;		___wmul
  9627 ;;		_drawPixel
  9628 ;;		_fillRect
  9629 ;; This function is called by:
  9630 ;;		_drawtext
  9631 ;; This function uses a non-reentrant model
  9632 ;;
  9633                           
  9634                           	psect	text43
  9635  001002                     __ptext43:
  9636                           	opt stack 0
  9637  001002                     _drawChar:
  9638                           	opt stack 19
  9639                           
  9640                           ;incstack = 0
  9641                           ;drawChar@x stored from wreg
  9642  001002  6E34               	movwf	drawChar@x,c
  9643                           
  9644                           ;ST7735_TFT.c: 481: char i, j;
  9645                           ;ST7735_TFT.c: 482: if((x >= 128) || (y >= 160))
  9646  001004  0E80               	movlw	128
  9647  001006  6034               	cpfslt	drawChar@x,c
  9648  001008  D0A6               	goto	l215
  9649  00100A  0E9F               	movlw	159
  9650  00100C  642C               	cpfsgt	drawChar@y,c
  9651  00100E  D001               	goto	l4563
  9652                           
  9653                           ;ST7735_TFT.c: 483: return;
  9654  001010  D0A2               	goto	l215
  9655  001012                     l4563:
  9656                           
  9657                           ;ST7735_TFT.c: 484: if(size < 1) size = 1;
  9658  001012  5032               	movf	drawChar@size,w,c
  9659  001014  A4D8               	btfss	status,2,c
  9660  001016  D003               	goto	l4567
  9661  001018  0E01               	movlw	1
  9662  00101A  6E32               	movwf	drawChar@size,c
  9663  00101C  D000               	goto	l4567
  9664  00101E                     l4567:
  9665                           
  9666                           ;ST7735_TFT.c: 485: if((c < ' ') || (c > '~'))
  9667  00101E  0E1F               	movlw	31
  9668  001020  642D               	cpfsgt	drawChar@c,c
  9669  001022  D004               	goto	l4571
  9670  001024  0E7E               	movlw	126
  9671  001026  642D               	cpfsgt	drawChar@c,c
  9672  001028  D003               	goto	l217
  9673  00102A  D000               	goto	l4571
  9674  00102C                     l4571:
  9675                           
  9676                           ;ST7735_TFT.c: 486: c = '?';
  9677  00102C  0E3F               	movlw	63
  9678  00102E  6E2D               	movwf	drawChar@c,c
  9679  001030                     l217:
  9680                           
  9681                           ;ST7735_TFT.c: 487: for(i=0; i<5; i++ ) {
  9682  001030  0E00               	movlw	0
  9683  001032  6E36               	movwf	drawChar@i,c
  9684  001034                     l4573:
  9685  001034  0E04               	movlw	4
  9686  001036  6436               	cpfsgt	drawChar@i,c
  9687  001038  D001               	goto	l4577
  9688  00103A  D08D               	goto	l215
  9689  00103C                     l4577:
  9690                           
  9691                           ;ST7735_TFT.c: 488: unsigned char line;
  9692                           ;ST7735_TFT.c: 489: if(c < 'S')
  9693  00103C  0E53               	movlw	83
  9694  00103E  602D               	cpfslt	drawChar@c,c
  9695  001040  D015               	goto	l4581
  9696                           
  9697                           ;ST7735_TFT.c: 490: line = font[(c - 32)*5 + i];
  9698  001042  0EE0               	movlw	224
  9699  001044  242D               	addwf	drawChar@c,w,c
  9700  001046  6E0F               	movwf	___wmul@multiplier,c
  9701  001048  6A10               	clrf	___wmul@multiplier+1,c
  9702  00104A  0EFF               	movlw	255
  9703  00104C  2210               	addwfc	___wmul@multiplier+1,f,c
  9704  00104E  0E00               	movlw	0
  9705  001050  6E12               	movwf	___wmul@multiplicand+1,c
  9706  001052  0E05               	movlw	5
  9707  001054  6E11               	movwf	___wmul@multiplicand,c
  9708  001056  ECE3  F013         	call	___wmul	;wreg free
  9709  00105A  5036               	movf	drawChar@i,w,c
  9710  00105C  260F               	addwf	?___wmul,f,c
  9711  00105E  0E00               	movlw	0
  9712  001060  2210               	addwfc	?___wmul+1,f,c
  9713  001062  0E4F               	movlw	low _font
  9714  001064  240F               	addwf	?___wmul,w,c
  9715  001066  6EF6               	movwf	tblptrl,c
  9716  001068  0EFD               	movlw	high _font
  9717  00106A  D014               	goto	L17
  9718  00106C                     l4581:
  9719                           
  9720                           ;ST7735_TFT.c: 491: else
  9721                           ;ST7735_TFT.c: 492: line = font2[(c - 'S')*5 + i];
  9722  00106C  0EAD               	movlw	173
  9723  00106E  242D               	addwf	drawChar@c,w,c
  9724  001070  6E0F               	movwf	___wmul@multiplier,c
  9725  001072  6A10               	clrf	___wmul@multiplier+1,c
  9726  001074  0EFF               	movlw	255
  9727  001076  2210               	addwfc	___wmul@multiplier+1,f,c
  9728  001078  0E00               	movlw	0
  9729  00107A  6E12               	movwf	___wmul@multiplicand+1,c
  9730  00107C  0E05               	movlw	5
  9731  00107E  6E11               	movwf	___wmul@multiplicand,c
  9732  001080  ECE3  F013         	call	___wmul	;wreg free
  9733  001084  5036               	movf	drawChar@i,w,c
  9734  001086  260F               	addwf	?___wmul,f,c
  9735  001088  0E00               	movlw	0
  9736  00108A  2210               	addwfc	?___wmul+1,f,c
  9737  00108C  0E4E               	movlw	low _font2
  9738  00108E  240F               	addwf	?___wmul,w,c
  9739  001090  6EF6               	movwf	tblptrl,c
  9740  001092  0EFE               	movlw	high _font2
  9741  001094                     L17:
  9742  001094  2010               	addwfc	?___wmul+1,w,c
  9743  001096  6EF7               	movwf	tblptrh,c
  9744  001098                     	if	0	;There are less than 3 active tblptr bytes
  9745  001098                     	endif
  9746  001098  0008               	tblrd		*
  9747  00109A  CFF5 F033          	movff	tablat,drawChar@line
  9748  00109E  D000               	goto	l4583
  9749  0010A0                     l4583:
  9750                           
  9751                           ;ST7735_TFT.c: 493: for(j=0; j<7; j++, line >>= 1) {
  9752  0010A0  0E00               	movlw	0
  9753  0010A2  6E35               	movwf	drawChar@j,c
  9754  0010A4                     l4585:
  9755  0010A4  0E06               	movlw	6
  9756  0010A6  6435               	cpfsgt	drawChar@j,c
  9757  0010A8  D001               	goto	l224
  9758  0010AA  D053               	goto	l4609
  9759  0010AC                     l224:
  9760                           
  9761                           ;ST7735_TFT.c: 494: if(line & 0x01) {
  9762  0010AC  A033               	btfss	drawChar@line,0,c
  9763  0010AE  D023               	goto	l4595
  9764                           
  9765                           ;ST7735_TFT.c: 495: if(size == 1) drawPixel(x+i, y+j, color);
  9766  0010B0  0432               	decf	drawChar@size,w,c
  9767  0010B2  A4D8               	btfss	status,2,c
  9768  0010B4  D00C               	goto	l4593
  9769  0010B6  502C               	movf	drawChar@y,w,c
  9770  0010B8  2435               	addwf	drawChar@j,w,c
  9771  0010BA  6E16               	movwf	drawPixel@y,c
  9772  0010BC  C02E  F017         	movff	drawChar@color,drawPixel@color
  9773  0010C0  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  9774  0010C4  5034               	movf	drawChar@x,w,c
  9775  0010C6  2436               	addwf	drawChar@i,w,c
  9776  0010C8  ECB6  F013         	call	_drawPixel
  9777  0010CC  D03E               	goto	l4603
  9778  0010CE                     l4593:
  9779                           
  9780                           ;ST7735_TFT.c: 496: else fillRect(x+(i*size), y+(j*size), size, size, color);
  9781  0010CE  5035               	movf	drawChar@j,w,c
  9782  0010D0  0232               	mulwf	drawChar@size,c
  9783  0010D2  50F3               	movf	prodl,w,c
  9784  0010D4  242C               	addwf	drawChar@y,w,c
  9785  0010D6  6E21               	movwf	fillRect@y,c
  9786  0010D8  C032  F022         	movff	drawChar@size,fillRect@w
  9787  0010DC  C032  F023         	movff	drawChar@size,fillRect@h
  9788  0010E0  C02E  F024         	movff	drawChar@color,fillRect@color
  9789  0010E4  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  9790  0010E8  5036               	movf	drawChar@i,w,c
  9791  0010EA  0232               	mulwf	drawChar@size,c
  9792  0010EC  50F3               	movf	prodl,w,c
  9793  0010EE  2434               	addwf	drawChar@x,w,c
  9794  0010F0  EC6A  F012         	call	_fillRect
  9795                           
  9796                           ;ST7735_TFT.c: 497: }
  9797  0010F4  D02A               	goto	l4603
  9798  0010F6                     l4595:
  9799                           
  9800                           ;ST7735_TFT.c: 498: else if(bg != color) {
  9801  0010F6  502E               	movf	drawChar@color,w,c
  9802  0010F8  1830               	xorwf	drawChar@bg,w,c
  9803  0010FA  E104               	bnz	u3250
  9804  0010FC  502F               	movf	drawChar@color+1,w,c
  9805  0010FE  1831               	xorwf	drawChar@bg+1,w,c
  9806  001100  B4D8               	btfsc	status,2,c
  9807  001102  D023               	goto	l4603
  9808  001104                     u3250:
  9809                           
  9810                           ;ST7735_TFT.c: 499: if(size == 1) drawPixel(x+i, y+j, bg);
  9811  001104  0432               	decf	drawChar@size,w,c
  9812  001106  A4D8               	btfss	status,2,c
  9813  001108  D00C               	goto	l4601
  9814  00110A  502C               	movf	drawChar@y,w,c
  9815  00110C  2435               	addwf	drawChar@j,w,c
  9816  00110E  6E16               	movwf	drawPixel@y,c
  9817  001110  C030  F017         	movff	drawChar@bg,drawPixel@color
  9818  001114  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  9819  001118  5034               	movf	drawChar@x,w,c
  9820  00111A  2436               	addwf	drawChar@i,w,c
  9821  00111C  ECB6  F013         	call	_drawPixel
  9822  001120  D014               	goto	l4603
  9823  001122                     l4601:
  9824                           
  9825                           ;ST7735_TFT.c: 500: else fillRect(x+i*size, y+j*size, size, size, bg);
  9826  001122  5035               	movf	drawChar@j,w,c
  9827  001124  0232               	mulwf	drawChar@size,c
  9828  001126  50F3               	movf	prodl,w,c
  9829  001128  242C               	addwf	drawChar@y,w,c
  9830  00112A  6E21               	movwf	fillRect@y,c
  9831  00112C  C032  F022         	movff	drawChar@size,fillRect@w
  9832  001130  C032  F023         	movff	drawChar@size,fillRect@h
  9833  001134  C030  F024         	movff	drawChar@bg,fillRect@color
  9834  001138  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  9835  00113C  5036               	movf	drawChar@i,w,c
  9836  00113E  0232               	mulwf	drawChar@size,c
  9837  001140  50F3               	movf	prodl,w,c
  9838  001142  2434               	addwf	drawChar@x,w,c
  9839  001144  EC6A  F012         	call	_fillRect
  9840  001148  D000               	goto	l4603
  9841  00114A                     l4603:
  9842  00114A  2A35               	incf	drawChar@j,f,c
  9843  00114C  90D8               	bcf	status,0,c
  9844  00114E  3233               	rrcf	drawChar@line,f,c
  9845  001150  D7A9               	goto	l4585
  9846  001152                     l4609:
  9847  001152  2A36               	incf	drawChar@i,f,c
  9848  001154  D76F               	goto	l4573
  9849  001156                     l215:
  9850  001156  0012               	return		;funcret
  9851  001158                     __end_of_drawChar:
  9852                           	opt stack 0
  9853                           tblptru	equ	0xFF8
  9854                           tblptrh	equ	0xFF7
  9855                           tblptrl	equ	0xFF6
  9856                           tablat	equ	0xFF5
  9857                           prodh	equ	0xFF4
  9858                           prodl	equ	0xFF3
  9859                           intcon	equ	0xFF2
  9860                           intcon2	equ	0xFF1
  9861                           intcon3	equ	0xFF0
  9862                           postinc0	equ	0xFEE
  9863                           wreg	equ	0xFE8
  9864                           postdec1	equ	0xFE5
  9865                           fsr1l	equ	0xFE1
  9866                           indf2	equ	0xFDF
  9867                           postinc2	equ	0xFDE
  9868                           postdec2	equ	0xFDD
  9869                           fsr2h	equ	0xFDA
  9870                           fsr2l	equ	0xFD9
  9871                           status	equ	0xFD8
  9872                           
  9873 ;; *************** function _fillRect *****************
  9874 ;; Defined at:
  9875 ;;		line 469 in file "ST7735_TFT.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;  x               1    wreg     unsigned char 
  9878 ;;  y               1   32[COMRAM] unsigned char 
  9879 ;;  w               1   33[COMRAM] unsigned char 
  9880 ;;  h               1   34[COMRAM] unsigned char 
  9881 ;;  color           2   35[COMRAM] unsigned int 
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;  x               1   40[COMRAM] unsigned char 
  9884 ;;  i               2   41[COMRAM] int 
  9885 ;; Return value:  Size  Location     Type
  9886 ;;		None               void
  9887 ;; Registers used:
  9888 ;;		wreg, status,2, status,0, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9894 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;Total ram usage:       11 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:    6
  9901 ;; This function calls:
  9902 ;;		_drawFastVLine
  9903 ;; This function is called by:
  9904 ;;		_drawChar
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           	psect	text44
  9909  0024D4                     __ptext44:
  9910                           	opt stack 0
  9911  0024D4                     _fillRect:
  9912                           	opt stack 19
  9913                           
  9914                           ;incstack = 0
  9915                           ;fillRect@x stored from wreg
  9916  0024D4  6E29               	movwf	fillRect@x,c
  9917                           
  9918                           ;ST7735_TFT.c: 471: signed int i;
  9919                           ;ST7735_TFT.c: 473: for (i = x; i < x + w; i++)
  9920  0024D6  C029  F02A         	movff	fillRect@x,fillRect@i
  9921  0024DA  6A2B               	clrf	fillRect@i+1,c
  9922  0024DC  D00E               	goto	l4551
  9923  0024DE                     l4547:
  9924                           
  9925                           ;ST7735_TFT.c: 474: {
  9926                           ;ST7735_TFT.c: 475: drawFastVLine(i, y, h, color);
  9927  0024DE  C021  F016         	movff	fillRect@y,drawFastVLine@y
  9928  0024E2  C023  F017         	movff	fillRect@h,drawFastVLine@h
  9929  0024E6  C024  F018         	movff	fillRect@color,drawFastVLine@color
  9930  0024EA  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  9931  0024EE  502A               	movf	fillRect@i,w,c
  9932  0024F0  EC99  F00F         	call	_drawFastVLine
  9933  0024F4  4A2A               	infsnz	fillRect@i,f,c
  9934  0024F6  2A2B               	incf	fillRect@i+1,f,c
  9935  0024F8  D000               	goto	l4551
  9936  0024FA                     l4551:
  9937  0024FA  5022               	movf	fillRect@w,w,c
  9938  0024FC  C029  F026         	movff	fillRect@x,??_fillRect
  9939  002500  6A27               	clrf	(??_fillRect+1)& (0+255),c
  9940  002502  2626               	addwf	??_fillRect,f,c
  9941  002504  0E00               	movlw	0
  9942  002506  2227               	addwfc	??_fillRect+1,f,c
  9943  002508  5026               	movf	??_fillRect,w,c
  9944  00250A  5C2A               	subwf	fillRect@i,w,c
  9945  00250C  502B               	movf	fillRect@i+1,w,c
  9946  00250E  0A80               	xorlw	128
  9947  002510  6E28               	movwf	(??_fillRect+2)& (0+255),c
  9948  002512  5027               	movf	??_fillRect+1,w,c
  9949  002514  0A80               	xorlw	128
  9950  002516  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  9951  002518  A0D8               	btfss	status,0,c
  9952  00251A  D7E1               	goto	l4547
  9953  00251C  0012               	return		;funcret
  9954  00251E                     __end_of_fillRect:
  9955                           	opt stack 0
  9956                           tblptru	equ	0xFF8
  9957                           tblptrh	equ	0xFF7
  9958                           tblptrl	equ	0xFF6
  9959                           tablat	equ	0xFF5
  9960                           prodh	equ	0xFF4
  9961                           prodl	equ	0xFF3
  9962                           intcon	equ	0xFF2
  9963                           intcon2	equ	0xFF1
  9964                           intcon3	equ	0xFF0
  9965                           postinc0	equ	0xFEE
  9966                           wreg	equ	0xFE8
  9967                           postdec1	equ	0xFE5
  9968                           fsr1l	equ	0xFE1
  9969                           indf2	equ	0xFDF
  9970                           postinc2	equ	0xFDE
  9971                           postdec2	equ	0xFDD
  9972                           fsr2h	equ	0xFDA
  9973                           fsr2l	equ	0xFD9
  9974                           status	equ	0xFD8
  9975                           
  9976 ;; *************** function _drawFastVLine *****************
  9977 ;; Defined at:
  9978 ;;		line 448 in file "ST7735_TFT.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;  x               1    wreg     unsigned char 
  9981 ;;  y               1   21[COMRAM] unsigned char 
  9982 ;;  h               1   22[COMRAM] unsigned char 
  9983 ;;  color           2   23[COMRAM] unsigned int 
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;  x               1   31[COMRAM] unsigned char 
  9986 ;;  lo              1   30[COMRAM] unsigned char 
  9987 ;;  hi              1   29[COMRAM] unsigned char 
  9988 ;; Return value:  Size  Location     Type
  9989 ;;		None               void
  9990 ;; Registers used:
  9991 ;;		wreg, status,2, status,0, cstack
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9997 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;Total ram usage:       11 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    5
 10004 ;; This function calls:
 10005 ;;		_setAddrWindow
 10006 ;;		_spiwrite
 10007 ;; This function is called by:
 10008 ;;		_fillRect
 10009 ;;		_fillCircleHelper
 10010 ;;		_fillCircle
 10011 ;;		_drawRect
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           	psect	text45
 10016  001F32                     __ptext45:
 10017                           	opt stack 0
 10018  001F32                     _drawFastVLine:
 10019                           	opt stack 19
 10020                           
 10021                           ;incstack = 0
 10022                           ;drawFastVLine@x stored from wreg
 10023  001F32  6E20               	movwf	drawFastVLine@x,c
 10024                           
 10025                           ;ST7735_TFT.c: 450: unsigned char hi, lo;
 10026                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
 10027  001F34  0E80               	movlw	128
 10028  001F36  6020               	cpfslt	drawFastVLine@x,c
 10029  001F38  D03F               	goto	l199
 10030  001F3A  0E9F               	movlw	159
 10031  001F3C  6416               	cpfsgt	drawFastVLine@y,c
 10032  001F3E  D001               	goto	l4517
 10033                           
 10034                           ;ST7735_TFT.c: 452: return;
 10035  001F40  D03B               	goto	l199
 10036  001F42                     l4517:
 10037                           
 10038                           ;ST7735_TFT.c: 453: if((y + h - 1) >= 160)
 10039  001F42  0EFF               	movlw	255
 10040  001F44  6E1A               	movwf	??_drawFastVLine& (0+255),c
 10041  001F46  0EFF               	movlw	255
 10042  001F48  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 10043  001F4A  5017               	movf	drawFastVLine@h,w,c
 10044  001F4C  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 10045  001F50  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 10046  001F52  261C               	addwf	??_drawFastVLine+2,f,c
 10047  001F54  0E00               	movlw	0
 10048  001F56  221D               	addwfc	??_drawFastVLine+3,f,c
 10049  001F58  501A               	movf	??_drawFastVLine,w,c
 10050  001F5A  261C               	addwf	??_drawFastVLine+2,f,c
 10051  001F5C  501B               	movf	??_drawFastVLine+1,w,c
 10052  001F5E  221D               	addwfc	??_drawFastVLine+3,f,c
 10053  001F60  BE1D               	btfsc	??_drawFastVLine+3,7,c
 10054  001F62  D00B               	goto	l4521
 10055  001F64  501D               	movf	??_drawFastVLine+3,w,c
 10056  001F66  E104               	bnz	u3100
 10057  001F68  0EA0               	movlw	160
 10058  001F6A  5C1C               	subwf	??_drawFastVLine+2,w,c
 10059  001F6C  A0D8               	btfss	status,0,c
 10060  001F6E  D005               	goto	l4521
 10061  001F70                     u3100:
 10062                           
 10063                           ;ST7735_TFT.c: 454: h = 160 - y;
 10064  001F70  5016               	movf	drawFastVLine@y,w,c
 10065  001F72  0800               	sublw	0
 10066  001F74  0FA0               	addlw	160
 10067  001F76  6E17               	movwf	drawFastVLine@h,c
 10068  001F78  D000               	goto	l4521
 10069  001F7A                     l4521:
 10070                           
 10071                           ;ST7735_TFT.c: 455: hi = color >> 8; lo = color;
 10072  001F7A  5019               	movf	drawFastVLine@color+1,w,c
 10073  001F7C  6E1E               	movwf	drawFastVLine@hi,c
 10074  001F7E  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 10075                           
 10076                           ;ST7735_TFT.c: 456: setAddrWindow(x, y, x, y + h - 1);
 10077  001F82  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 10078  001F86  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 10079  001F8A  5016               	movf	drawFastVLine@y,w,c
 10080  001F8C  2417               	addwf	drawFastVLine@h,w,c
 10081  001F8E  6E1A               	movwf	??_drawFastVLine& (0+255),c
 10082  001F90  041A               	decf	??_drawFastVLine,w,c
 10083  001F92  6E14               	movwf	setAddrWindow@y1,c
 10084  001F94  5020               	movf	drawFastVLine@x,w,c
 10085  001F96  EC1D  F012         	call	_setAddrWindow
 10086                           
 10087                           ;ST7735_TFT.c: 457: PORTDbits.RD3 = 1;
 10088  001F9A  8683               	bsf	3971,3,c	;volatile
 10089                           
 10090                           ;ST7735_TFT.c: 458: PORTDbits.RD4 = 0;
 10091  001F9C  9883               	bcf	3971,4,c	;volatile
 10092                           
 10093                           ;ST7735_TFT.c: 460: while (h--) {
 10094  001F9E  D007               	goto	l4533
 10095  001FA0                     l4531:
 10096                           
 10097                           ;ST7735_TFT.c: 461: spiwrite(hi);
 10098  001FA0  501E               	movf	drawFastVLine@hi,w,c
 10099  001FA2  EC44  F014         	call	_spiwrite
 10100                           
 10101                           ;ST7735_TFT.c: 462: spiwrite(lo);
 10102  001FA6  501F               	movf	drawFastVLine@lo,w,c
 10103  001FA8  EC44  F014         	call	_spiwrite
 10104  001FAC  D000               	goto	l4533
 10105  001FAE                     l4533:
 10106  001FAE  0617               	decf	drawFastVLine@h,f,c
 10107  001FB0  2817               	incf	drawFastVLine@h,w,c
 10108  001FB2  A4D8               	btfss	status,2,c
 10109  001FB4  D7F5               	goto	l4531
 10110                           
 10111                           ;ST7735_TFT.c: 463: }
 10112                           ;ST7735_TFT.c: 464: PORTDbits.RD4 = 1;
 10113  001FB6  8883               	bsf	3971,4,c	;volatile
 10114  001FB8                     l199:
 10115  001FB8  0012               	return		;funcret
 10116  001FBA                     __end_of_drawFastVLine:
 10117                           	opt stack 0
 10118                           tblptru	equ	0xFF8
 10119                           tblptrh	equ	0xFF7
 10120                           tblptrl	equ	0xFF6
 10121                           tablat	equ	0xFF5
 10122                           prodh	equ	0xFF4
 10123                           prodl	equ	0xFF3
 10124                           intcon	equ	0xFF2
 10125                           intcon2	equ	0xFF1
 10126                           intcon3	equ	0xFF0
 10127                           postinc0	equ	0xFEE
 10128                           wreg	equ	0xFE8
 10129                           postdec1	equ	0xFE5
 10130                           fsr1l	equ	0xFE1
 10131                           indf2	equ	0xFDF
 10132                           postinc2	equ	0xFDE
 10133                           postdec2	equ	0xFDD
 10134                           fsr2h	equ	0xFDA
 10135                           fsr2l	equ	0xFD9
 10136                           status	equ	0xFD8
 10137                           
 10138 ;; *************** function _drawPixel *****************
 10139 ;; Defined at:
 10140 ;;		line 439 in file "ST7735_TFT.c"
 10141 ;; Parameters:    Size  Location     Type
 10142 ;;  x               1    wreg     unsigned char 
 10143 ;;  y               1   21[COMRAM] unsigned char 
 10144 ;;  color           2   22[COMRAM] unsigned int 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;  x               1   24[COMRAM] unsigned char 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;		None               void
 10149 ;; Registers used:
 10150 ;;		wreg, status,2, status,0, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10156 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;Total ram usage:        4 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    5
 10163 ;; This function calls:
 10164 ;;		_setAddrWindow
 10165 ;;		_write_data
 10166 ;; This function is called by:
 10167 ;;		_drawChar
 10168 ;;		_drawCircle
 10169 ;;		_drawCircleHelper
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           	psect	text46
 10174  00276C                     __ptext46:
 10175                           	opt stack 0
 10176  00276C                     _drawPixel:
 10177                           	opt stack 20
 10178                           
 10179                           ;incstack = 0
 10180                           ;drawPixel@x stored from wreg
 10181  00276C  6E19               	movwf	drawPixel@x,c
 10182                           
 10183                           ;ST7735_TFT.c: 441: if((x >= 128) || (y >= 160))
 10184  00276E  0E80               	movlw	128
 10185  002770  6019               	cpfslt	drawPixel@x,c
 10186  002772  D013               	goto	l193
 10187  002774  0E9F               	movlw	159
 10188  002776  6416               	cpfsgt	drawPixel@y,c
 10189  002778  D001               	goto	l4539
 10190                           
 10191                           ;ST7735_TFT.c: 442: return;
 10192  00277A  D00F               	goto	l193
 10193  00277C                     l4539:
 10194                           
 10195                           ;ST7735_TFT.c: 443: setAddrWindow(x,y,x+1,y+1);
 10196  00277C  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 10197  002780  2819               	incf	drawPixel@x,w,c
 10198  002782  6E13               	movwf	setAddrWindow@x1,c
 10199  002784  2816               	incf	drawPixel@y,w,c
 10200  002786  6E14               	movwf	setAddrWindow@y1,c
 10201  002788  5019               	movf	drawPixel@x,w,c
 10202  00278A  EC1D  F012         	call	_setAddrWindow
 10203                           
 10204                           ;ST7735_TFT.c: 444: write_data(color >> 8);
 10205  00278E  5018               	movf	drawPixel@color+1,w,c
 10206  002790  EC60  F014         	call	_write_data
 10207                           
 10208                           ;ST7735_TFT.c: 445: write_data(color & 0xFF);
 10209  002794  5017               	movf	drawPixel@color,w,c
 10210  002796  EC60  F014         	call	_write_data
 10211  00279A                     l193:
 10212  00279A  0012               	return		;funcret
 10213  00279C                     __end_of_drawPixel:
 10214                           	opt stack 0
 10215                           tblptru	equ	0xFF8
 10216                           tblptrh	equ	0xFF7
 10217                           tblptrl	equ	0xFF6
 10218                           tablat	equ	0xFF5
 10219                           prodh	equ	0xFF4
 10220                           prodl	equ	0xFF3
 10221                           intcon	equ	0xFF2
 10222                           intcon2	equ	0xFF1
 10223                           intcon3	equ	0xFF0
 10224                           postinc0	equ	0xFEE
 10225                           wreg	equ	0xFE8
 10226                           postdec1	equ	0xFE5
 10227                           fsr1l	equ	0xFE1
 10228                           indf2	equ	0xFDF
 10229                           postinc2	equ	0xFDE
 10230                           postdec2	equ	0xFDD
 10231                           fsr2h	equ	0xFDA
 10232                           fsr2l	equ	0xFD9
 10233                           status	equ	0xFD8
 10234                           
 10235 ;; *************** function _setAddrWindow *****************
 10236 ;; Defined at:
 10237 ;;		line 424 in file "ST7735_TFT.c"
 10238 ;; Parameters:    Size  Location     Type
 10239 ;;  x0              1    wreg     unsigned char 
 10240 ;;  y0              1   17[COMRAM] unsigned char 
 10241 ;;  x1              1   18[COMRAM] unsigned char 
 10242 ;;  y1              1   19[COMRAM] unsigned char 
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;  x0              1   20[COMRAM] unsigned char 
 10245 ;; Return value:  Size  Location     Type
 10246 ;;		None               void
 10247 ;; Registers used:
 10248 ;;		wreg, status,2, status,0, cstack
 10249 ;; Tracked objects:
 10250 ;;		On entry : 0/0
 10251 ;;		On exit  : 0/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10254 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10257 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;Total ram usage:        4 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    4
 10261 ;; This function calls:
 10262 ;;		_write_command
 10263 ;;		_write_data
 10264 ;; This function is called by:
 10265 ;;		_drawPixel
 10266 ;;		_drawFastVLine
 10267 ;;		_fillRectangle
 10268 ;;		_drawFastHLine
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           	psect	text47
 10273  00243A                     __ptext47:
 10274                           	opt stack 0
 10275  00243A                     _setAddrWindow:
 10276                           	opt stack 19
 10277                           
 10278                           ;incstack = 0
 10279                           ;setAddrWindow@x0 stored from wreg
 10280  00243A  6E15               	movwf	setAddrWindow@x0,c
 10281                           
 10282                           ;ST7735_TFT.c: 426: write_command(0x2A);
 10283  00243C  0E2A               	movlw	42
 10284  00243E  EC68  F014         	call	_write_command
 10285                           
 10286                           ;ST7735_TFT.c: 427: write_data(0);
 10287  002442  0E00               	movlw	0
 10288  002444  EC60  F014         	call	_write_data
 10289                           
 10290                           ;ST7735_TFT.c: 428: write_data(x0 + colstart);
 10291  002448  5015               	movf	setAddrWindow@x0,w,c
 10292  00244A  245A               	addwf	_colstart,w,c
 10293  00244C  EC60  F014         	call	_write_data
 10294                           
 10295                           ;ST7735_TFT.c: 429: write_data(0);
 10296  002450  0E00               	movlw	0
 10297  002452  EC60  F014         	call	_write_data
 10298                           
 10299                           ;ST7735_TFT.c: 430: write_data(x1 + colstart);
 10300  002456  5013               	movf	setAddrWindow@x1,w,c
 10301  002458  245A               	addwf	_colstart,w,c
 10302  00245A  EC60  F014         	call	_write_data
 10303                           
 10304                           ;ST7735_TFT.c: 431: write_command(0x2B);
 10305  00245E  0E2B               	movlw	43
 10306  002460  EC68  F014         	call	_write_command
 10307                           
 10308                           ;ST7735_TFT.c: 432: write_data(0);
 10309  002464  0E00               	movlw	0
 10310  002466  EC60  F014         	call	_write_data
 10311                           
 10312                           ;ST7735_TFT.c: 433: write_data(y0 + rowstart);
 10313  00246A  5012               	movf	setAddrWindow@y0,w,c
 10314  00246C  245D               	addwf	_rowstart,w,c
 10315  00246E  EC60  F014         	call	_write_data
 10316                           
 10317                           ;ST7735_TFT.c: 434: write_data(0);
 10318  002472  0E00               	movlw	0
 10319  002474  EC60  F014         	call	_write_data
 10320                           
 10321                           ;ST7735_TFT.c: 435: write_data(y1 + rowstart);
 10322  002478  5014               	movf	setAddrWindow@y1,w,c
 10323  00247A  245D               	addwf	_rowstart,w,c
 10324  00247C  EC60  F014         	call	_write_data
 10325                           
 10326                           ;ST7735_TFT.c: 436: write_command(0x2C);
 10327  002480  0E2C               	movlw	44
 10328  002482  EC68  F014         	call	_write_command
 10329  002486  0012               	return		;funcret
 10330  002488                     __end_of_setAddrWindow:
 10331                           	opt stack 0
 10332                           tblptru	equ	0xFF8
 10333                           tblptrh	equ	0xFF7
 10334                           tblptrl	equ	0xFF6
 10335                           tablat	equ	0xFF5
 10336                           prodh	equ	0xFF4
 10337                           prodl	equ	0xFF3
 10338                           intcon	equ	0xFF2
 10339                           intcon2	equ	0xFF1
 10340                           intcon3	equ	0xFF0
 10341                           postinc0	equ	0xFEE
 10342                           wreg	equ	0xFE8
 10343                           postdec1	equ	0xFE5
 10344                           fsr1l	equ	0xFE1
 10345                           indf2	equ	0xFDF
 10346                           postinc2	equ	0xFDE
 10347                           postdec2	equ	0xFDD
 10348                           fsr2h	equ	0xFDA
 10349                           fsr2l	equ	0xFD9
 10350                           status	equ	0xFD8
 10351                           
 10352 ;; *************** function _write_data *****************
 10353 ;; Defined at:
 10354 ;;		line 241 in file "ST7735_TFT.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;  data_           1    wreg     unsigned char 
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;  data_           1   16[COMRAM] unsigned char 
 10359 ;; Return value:  Size  Location     Type
 10360 ;;		None               void
 10361 ;; Registers used:
 10362 ;;		wreg, status,2, cstack
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10369 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10371 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10372 ;;Total ram usage:        1 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:    3
 10375 ;; This function calls:
 10376 ;;		_spiwrite
 10377 ;; This function is called by:
 10378 ;;		_Rcmd1
 10379 ;;		_Rcmd2red
 10380 ;;		_Rcmd3
 10381 ;;		_setAddrWindow
 10382 ;;		_drawPixel
 10383 ;;		_TFT_GreenTab_Initialize
 10384 ;;		_Bcmd
 10385 ;;		_setScrollDefinition
 10386 ;;		_Rcmd2green
 10387 ;;		_VerticalScroll
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           	psect	text48
 10392  0028C0                     __ptext48:
 10393                           	opt stack 0
 10394  0028C0                     _write_data:
 10395                           	opt stack 19
 10396                           
 10397                           ;incstack = 0
 10398                           ;write_data@data_ stored from wreg
 10399  0028C0  6E11               	movwf	write_data@data_,c
 10400                           
 10401                           ;ST7735_TFT.c: 243: PORTDbits.RD4 = 0;
 10402  0028C2  9883               	bcf	3971,4,c	;volatile
 10403                           
 10404                           ;ST7735_TFT.c: 244: PORTDbits.RD3 = 1;
 10405  0028C4  8683               	bsf	3971,3,c	;volatile
 10406                           
 10407                           ;ST7735_TFT.c: 245: spiwrite(data_);
 10408  0028C6  5011               	movf	write_data@data_,w,c
 10409  0028C8  EC44  F014         	call	_spiwrite
 10410                           
 10411                           ;ST7735_TFT.c: 246: PORTDbits.RD4 = 1;
 10412  0028CC  8883               	bsf	3971,4,c	;volatile
 10413  0028CE  0012               	return		;funcret
 10414  0028D0                     __end_of_write_data:
 10415                           	opt stack 0
 10416                           tblptru	equ	0xFF8
 10417                           tblptrh	equ	0xFF7
 10418                           tblptrl	equ	0xFF6
 10419                           tablat	equ	0xFF5
 10420                           prodh	equ	0xFF4
 10421                           prodl	equ	0xFF3
 10422                           intcon	equ	0xFF2
 10423                           intcon2	equ	0xFF1
 10424                           intcon3	equ	0xFF0
 10425                           postinc0	equ	0xFEE
 10426                           wreg	equ	0xFE8
 10427                           postdec1	equ	0xFE5
 10428                           fsr1l	equ	0xFE1
 10429                           indf2	equ	0xFDF
 10430                           postinc2	equ	0xFDE
 10431                           postdec2	equ	0xFDD
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436 ;; *************** function _write_command *****************
 10437 ;; Defined at:
 10438 ;;		line 230 in file "ST7735_TFT.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;  cmd_            1    wreg     unsigned char 
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;  cmd_            1   16[COMRAM] unsigned char 
 10443 ;; Return value:  Size  Location     Type
 10444 ;;		None               void
 10445 ;; Registers used:
 10446 ;;		wreg, status,2, cstack
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;Total ram usage:        1 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:    3
 10459 ;; This function calls:
 10460 ;;		_spiwrite
 10461 ;; This function is called by:
 10462 ;;		_Rcmd1
 10463 ;;		_Rcmd2red
 10464 ;;		_Rcmd3
 10465 ;;		_setAddrWindow
 10466 ;;		_TFT_GreenTab_Initialize
 10467 ;;		_Bcmd
 10468 ;;		_setScrollDefinition
 10469 ;;		_Rcmd2green
 10470 ;;		_VerticalScroll
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           	psect	text49
 10475  0028D0                     __ptext49:
 10476                           	opt stack 0
 10477  0028D0                     _write_command:
 10478                           	opt stack 19
 10479                           
 10480                           ;incstack = 0
 10481                           ;write_command@cmd_ stored from wreg
 10482  0028D0  6E11               	movwf	write_command@cmd_,c
 10483                           
 10484                           ;ST7735_TFT.c: 232: PORTDbits.RD4 = 0;
 10485  0028D2  9883               	bcf	3971,4,c	;volatile
 10486                           
 10487                           ;ST7735_TFT.c: 234: PORTDbits.RD3 = 0;
 10488  0028D4  9683               	bcf	3971,3,c	;volatile
 10489                           
 10490                           ;ST7735_TFT.c: 235: spiwrite(cmd_);
 10491  0028D6  5011               	movf	write_command@cmd_,w,c
 10492  0028D8  EC44  F014         	call	_spiwrite
 10493                           
 10494                           ;ST7735_TFT.c: 237: PORTDbits.RD4 = 1;
 10495  0028DC  8883               	bsf	3971,4,c	;volatile
 10496  0028DE  0012               	return		;funcret
 10497  0028E0                     __end_of_write_command:
 10498                           	opt stack 0
 10499                           tblptru	equ	0xFF8
 10500                           tblptrh	equ	0xFF7
 10501                           tblptrl	equ	0xFF6
 10502                           tablat	equ	0xFF5
 10503                           prodh	equ	0xFF4
 10504                           prodl	equ	0xFF3
 10505                           intcon	equ	0xFF2
 10506                           intcon2	equ	0xFF1
 10507                           intcon3	equ	0xFF0
 10508                           postinc0	equ	0xFEE
 10509                           wreg	equ	0xFE8
 10510                           postdec1	equ	0xFE5
 10511                           fsr1l	equ	0xFE1
 10512                           indf2	equ	0xFDF
 10513                           postinc2	equ	0xFDE
 10514                           postdec2	equ	0xFDD
 10515                           fsr2h	equ	0xFDA
 10516                           fsr2l	equ	0xFD9
 10517                           status	equ	0xFD8
 10518                           
 10519 ;; *************** function _spiwrite *****************
 10520 ;; Defined at:
 10521 ;;		line 221 in file "ST7735_TFT.c"
 10522 ;; Parameters:    Size  Location     Type
 10523 ;;  spidata         1    wreg     unsigned char 
 10524 ;; Auto vars:     Size  Location     Type
 10525 ;;  spidata         1   15[COMRAM] unsigned char 
 10526 ;;  x               1   14[COMRAM] unsigned char 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;		None               void
 10529 ;; Registers used:
 10530 ;;		wreg
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;Total ram usage:        2 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; Hardware stack levels required when called:    2
 10543 ;; This function calls:
 10544 ;;		Nothing
 10545 ;; This function is called by:
 10546 ;;		_write_command
 10547 ;;		_write_data
 10548 ;;		_drawFastVLine
 10549 ;;		_fillRectangle
 10550 ;;		_drawFastHLine
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           	psect	text50
 10555  002888                     __ptext50:
 10556                           	opt stack 0
 10557  002888                     _spiwrite:
 10558                           	opt stack 21
 10559                           
 10560                           ;incstack = 0
 10561                           ;spiwrite@spidata stored from wreg
 10562  002888  6E10               	movwf	spiwrite@spidata,c
 10563                           
 10564                           ;ST7735_TFT.c: 223: char x;
 10565                           ;ST7735_TFT.c: 224: PIR1bits.SSPIF = 0;
 10566  00288A  969E               	bcf	3998,3,c	;volatile
 10567                           
 10568                           ;ST7735_TFT.c: 225: x = SSPBUF;
 10569  00288C  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 10570                           
 10571                           ;ST7735_TFT.c: 226: SSPBUF = spidata;
 10572  002890  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 10573                           
 10574                           ;ST7735_TFT.c: 227: while (!SSPSTATbits.BF);
 10575  002894  D000               	goto	l149
 10576  002896                     l149:
 10577  002896  A0C7               	btfss	4039,0,c	;volatile
 10578  002898  D7FE               	goto	l149
 10579  00289A  0012               	return		;funcret
 10580  00289C                     __end_of_spiwrite:
 10581                           	opt stack 0
 10582                           tblptru	equ	0xFF8
 10583                           tblptrh	equ	0xFF7
 10584                           tblptrl	equ	0xFF6
 10585                           tablat	equ	0xFF5
 10586                           prodh	equ	0xFF4
 10587                           prodl	equ	0xFF3
 10588                           intcon	equ	0xFF2
 10589                           intcon2	equ	0xFF1
 10590                           intcon3	equ	0xFF0
 10591                           postinc0	equ	0xFEE
 10592                           wreg	equ	0xFE8
 10593                           postdec1	equ	0xFE5
 10594                           fsr1l	equ	0xFE1
 10595                           indf2	equ	0xFDF
 10596                           postinc2	equ	0xFDE
 10597                           postdec2	equ	0xFDD
 10598                           fsr2h	equ	0xFDA
 10599                           fsr2l	equ	0xFD9
 10600                           status	equ	0xFD8
 10601                           
 10602 ;; *************** function ___wmul *****************
 10603 ;; Defined at:
 10604 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10605 ;; Parameters:    Size  Location     Type
 10606 ;;  multiplier      2   14[COMRAM] unsigned int 
 10607 ;;  multiplicand    2   16[COMRAM] unsigned int 
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;  product         2   18[COMRAM] unsigned int 
 10610 ;; Return value:  Size  Location     Type
 10611 ;;                  2   14[COMRAM] unsigned int 
 10612 ;; Registers used:
 10613 ;;		wreg, status,2, status,0, prodl, prodh
 10614 ;; Tracked objects:
 10615 ;;		On entry : 0/0
 10616 ;;		On exit  : 0/0
 10617 ;;		Unchanged: 0/0
 10618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10619 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10622 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10623 ;;Total ram usage:        6 bytes
 10624 ;; Hardware stack levels used:    1
 10625 ;; Hardware stack levels required when called:    2
 10626 ;; This function calls:
 10627 ;;		Nothing
 10628 ;; This function is called by:
 10629 ;;		_delay_ms
 10630 ;;		_drawChar
 10631 ;;		_main
 10632 ;;		_update_LCD_misc
 10633 ;; This function uses a non-reentrant model
 10634 ;;
 10635                           
 10636                           	psect	text51
 10637  0027C6                     __ptext51:
 10638                           	opt stack 0
 10639  0027C6                     ___wmul:
 10640                           	opt stack 28
 10641                           
 10642                           ;incstack = 0
 10643  0027C6  500F               	movf	___wmul@multiplier,w,c
 10644  0027C8  0211               	mulwf	___wmul@multiplicand,c
 10645  0027CA  CFF3 F013          	movff	prodl,___wmul@product
 10646  0027CE  CFF4 F014          	movff	prodh,___wmul@product+1
 10647  0027D2  500F               	movf	___wmul@multiplier,w,c
 10648  0027D4  0212               	mulwf	___wmul@multiplicand+1,c
 10649  0027D6  50F3               	movf	prodl,w,c
 10650  0027D8  2614               	addwf	___wmul@product+1,f,c
 10651  0027DA  5010               	movf	___wmul@multiplier+1,w,c
 10652  0027DC  0211               	mulwf	___wmul@multiplicand,c
 10653  0027DE  50F3               	movf	prodl,w,c
 10654  0027E0  2614               	addwf	___wmul@product+1,f,c
 10655  0027E2  C013  F00F         	movff	___wmul@product,?___wmul
 10656  0027E6  C014  F010         	movff	___wmul@product+1,?___wmul+1
 10657  0027EA  D000               	goto	l632
 10658  0027EC                     l632:
 10659  0027EC  0012               	return		;funcret
 10660  0027EE                     __end_of___wmul:
 10661                           	opt stack 0
 10662                           tblptru	equ	0xFF8
 10663                           tblptrh	equ	0xFF7
 10664                           tblptrl	equ	0xFF6
 10665                           tablat	equ	0xFF5
 10666                           prodh	equ	0xFF4
 10667                           prodl	equ	0xFF3
 10668                           intcon	equ	0xFF2
 10669                           intcon2	equ	0xFF1
 10670                           intcon3	equ	0xFF0
 10671                           postinc0	equ	0xFEE
 10672                           wreg	equ	0xFE8
 10673                           postdec1	equ	0xFE5
 10674                           fsr1l	equ	0xFE1
 10675                           indf2	equ	0xFDF
 10676                           postinc2	equ	0xFDE
 10677                           postdec2	equ	0xFDD
 10678                           fsr2h	equ	0xFDA
 10679                           fsr2l	equ	0xFD9
 10680                           status	equ	0xFD8
 10681                           
 10682 ;; *************** function ___ftge *****************
 10683 ;; Defined at:
 10684 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 10685 ;; Parameters:    Size  Location     Type
 10686 ;;  ff1             3   14[COMRAM] float 
 10687 ;;  ff2             3   17[COMRAM] float 
 10688 ;; Auto vars:     Size  Location     Type
 10689 ;;		None
 10690 ;; Return value:  Size  Location     Type
 10691 ;;		None               void
 10692 ;; Registers used:
 10693 ;;		wreg, status,2, status,0
 10694 ;; Tracked objects:
 10695 ;;		On entry : 0/0
 10696 ;;		On exit  : 0/0
 10697 ;;		Unchanged: 0/0
 10698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10699 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10703 ;;Total ram usage:        9 bytes
 10704 ;; Hardware stack levels used:    1
 10705 ;; Hardware stack levels required when called:    2
 10706 ;; This function calls:
 10707 ;;		Nothing
 10708 ;; This function is called by:
 10709 ;;		_main
 10710 ;;		_update_LCD_misc
 10711 ;; This function uses a non-reentrant model
 10712 ;;
 10713                           
 10714                           	psect	text52
 10715  001D8A                     __ptext52:
 10716                           	opt stack 0
 10717  001D8A                     ___ftge:
 10718                           	opt stack 28
 10719                           
 10720                           ;incstack = 0
 10721  001D8A  AE11               	btfss	___ftge@ff1+2,7,c
 10722  001D8C  D017               	goto	l4797
 10723  001D8E  C00F  F015         	movff	___ftge@ff1,??___ftge
 10724  001D92  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
 10725  001D96  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
 10726  001D9A  1E15               	comf	??___ftge,f,c
 10727  001D9C  1E16               	comf	??___ftge+1,f,c
 10728  001D9E  1E17               	comf	??___ftge+2,f,c
 10729  001DA0  2A15               	incf	??___ftge,f,c
 10730  001DA2  0E00               	movlw	0
 10731  001DA4  2216               	addwfc	??___ftge+1,f,c
 10732  001DA6  2217               	addwfc	??___ftge+2,f,c
 10733  001DA8  0E00               	movlw	0
 10734  001DAA  2415               	addwf	??___ftge,w,c
 10735  001DAC  6E0F               	movwf	___ftge@ff1,c
 10736  001DAE  0E00               	movlw	0
 10737  001DB0  2016               	addwfc	??___ftge+1,w,c
 10738  001DB2  6E10               	movwf	___ftge@ff1+1,c
 10739  001DB4  0E80               	movlw	128
 10740  001DB6  2017               	addwfc	??___ftge+2,w,c
 10741  001DB8  6E11               	movwf	___ftge@ff1+2,c
 10742  001DBA  D000               	goto	l4797
 10743  001DBC                     l4797:
 10744  001DBC  AE14               	btfss	___ftge@ff2+2,7,c
 10745  001DBE  D017               	goto	l4801
 10746  001DC0  C012  F015         	movff	___ftge@ff2,??___ftge
 10747  001DC4  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
 10748  001DC8  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
 10749  001DCC  1E15               	comf	??___ftge,f,c
 10750  001DCE  1E16               	comf	??___ftge+1,f,c
 10751  001DD0  1E17               	comf	??___ftge+2,f,c
 10752  001DD2  2A15               	incf	??___ftge,f,c
 10753  001DD4  0E00               	movlw	0
 10754  001DD6  2216               	addwfc	??___ftge+1,f,c
 10755  001DD8  2217               	addwfc	??___ftge+2,f,c
 10756  001DDA  0E00               	movlw	0
 10757  001DDC  2415               	addwf	??___ftge,w,c
 10758  001DDE  6E12               	movwf	___ftge@ff2,c
 10759  001DE0  0E00               	movlw	0
 10760  001DE2  2016               	addwfc	??___ftge+1,w,c
 10761  001DE4  6E13               	movwf	___ftge@ff2+1,c
 10762  001DE6  0E80               	movlw	128
 10763  001DE8  2017               	addwfc	??___ftge+2,w,c
 10764  001DEA  6E14               	movwf	___ftge@ff2+2,c
 10765  001DEC  D000               	goto	l4801
 10766  001DEE                     l4801:
 10767  001DEE  0E00               	movlw	0
 10768  001DF0  1A0F               	xorwf	___ftge@ff1,f,c
 10769  001DF2  0E00               	movlw	0
 10770  001DF4  1A10               	xorwf	___ftge@ff1+1,f,c
 10771  001DF6  0E80               	movlw	128
 10772  001DF8  1A11               	xorwf	___ftge@ff1+2,f,c
 10773  001DFA  0E00               	movlw	0
 10774  001DFC  1A12               	xorwf	___ftge@ff2,f,c
 10775  001DFE  0E00               	movlw	0
 10776  001E00  1A13               	xorwf	___ftge@ff2+1,f,c
 10777  001E02  0E80               	movlw	128
 10778  001E04  1A14               	xorwf	___ftge@ff2+2,f,c
 10779  001E06  5012               	movf	___ftge@ff2,w,c
 10780  001E08  5C0F               	subwf	___ftge@ff1,w,c
 10781  001E0A  5013               	movf	___ftge@ff2+1,w,c
 10782  001E0C  5810               	subwfb	___ftge@ff1+1,w,c
 10783  001E0E  5014               	movf	___ftge@ff2+2,w,c
 10784  001E10  5811               	subwfb	___ftge@ff1+2,w,c
 10785  001E12  B0D8               	btfsc	status,0,c
 10786  001E14  D002               	goto	l4807
 10787  001E16  90D8               	bcf	status,0,c
 10788  001E18  D002               	goto	l1021
 10789  001E1A                     l4807:
 10790  001E1A  80D8               	bsf	status,0,c
 10791  001E1C  D000               	goto	l1021
 10792  001E1E                     l1021:
 10793  001E1E  0012               	return		;funcret
 10794  001E20                     __end_of___ftge:
 10795                           	opt stack 0
 10796                           tblptru	equ	0xFF8
 10797                           tblptrh	equ	0xFF7
 10798                           tblptrl	equ	0xFF6
 10799                           tablat	equ	0xFF5
 10800                           prodh	equ	0xFF4
 10801                           prodl	equ	0xFF3
 10802                           intcon	equ	0xFF2
 10803                           intcon2	equ	0xFF1
 10804                           intcon3	equ	0xFF0
 10805                           postinc0	equ	0xFEE
 10806                           wreg	equ	0xFE8
 10807                           postdec1	equ	0xFE5
 10808                           fsr1l	equ	0xFE1
 10809                           indf2	equ	0xFDF
 10810                           postinc2	equ	0xFDE
 10811                           postdec2	equ	0xFDD
 10812                           fsr2h	equ	0xFDA
 10813                           fsr2l	equ	0xFD9
 10814                           status	equ	0xFD8
 10815                           
 10816 ;; *************** function ___ftdiv *****************
 10817 ;; Defined at:
 10818 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;  f1              3   26[COMRAM] float 
 10821 ;;  f2              3   29[COMRAM] float 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  f3              3   36[COMRAM] float 
 10824 ;;  sign            1   40[COMRAM] unsigned char 
 10825 ;;  exp             1   39[COMRAM] unsigned char 
 10826 ;;  cntr            1   35[COMRAM] unsigned char 
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  3   26[COMRAM] float 
 10829 ;; Registers used:
 10830 ;;		wreg, status,2, status,0, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10836 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10840 ;;Total ram usage:       15 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    3
 10843 ;; This function calls:
 10844 ;;		___ftpack
 10845 ;; This function is called by:
 10846 ;;		_main
 10847 ;;		_update_LCD_misc
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           	psect	text53
 10852  00181C                     __ptext53:
 10853                           	opt stack 0
 10854  00181C                     ___ftdiv:
 10855                           	opt stack 27
 10856                           
 10857                           ;incstack = 0
 10858  00181C  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
 10859  001820  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 10860  001822  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 10861  001824  341C               	rlcf	___ftdiv@f1+1,w,c
 10862  001826  3621               	rlcf	??___ftdiv& (0+255),f,c
 10863  001828  E301               	bnc	u3491
 10864  00182A  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 10865  00182C                     u3491:
 10866  00182C  5021               	movf	??___ftdiv,w,c
 10867  00182E  6E28               	movwf	___ftdiv@exp,c
 10868  001830  5028               	movf	___ftdiv@exp,w,c
 10869  001832  A4D8               	btfss	status,2,c
 10870  001834  D002               	goto	l4741
 10871  001836  D00E               	goto	l4743
 10872  001838  D061               	goto	l1012
 10873  00183A                     l4741:
 10874  00183A  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
 10875  00183E  6A22               	clrf	(??___ftdiv+1)& (0+255),c
 10876  001840  6A23               	clrf	(??___ftdiv+2)& (0+255),c
 10877  001842  341F               	rlcf	___ftdiv@f2+1,w,c
 10878  001844  3621               	rlcf	??___ftdiv& (0+255),f,c
 10879  001846  E301               	bnc	u3511
 10880  001848  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
 10881  00184A                     u3511:
 10882  00184A  5021               	movf	??___ftdiv,w,c
 10883  00184C  6E29               	movwf	___ftdiv@sign,c
 10884  00184E  5029               	movf	___ftdiv@sign,w,c
 10885  001850  A4D8               	btfss	status,2,c
 10886  001852  D007               	goto	l4747
 10887  001854                     l4743:
 10888  001854  0E00               	movlw	0
 10889  001856  6E1B               	movwf	?___ftdiv,c
 10890  001858  0E00               	movlw	0
 10891  00185A  6E1C               	movwf	?___ftdiv+1,c
 10892  00185C  0E00               	movlw	0
 10893  00185E  6E1D               	movwf	?___ftdiv+2,c
 10894  001860  D04D               	goto	l1012
 10895  001862                     l4747:
 10896  001862  0E00               	movlw	0
 10897  001864  6E25               	movwf	___ftdiv@f3,c
 10898  001866  0E00               	movlw	0
 10899  001868  6E26               	movwf	___ftdiv@f3+1,c
 10900  00186A  0E00               	movlw	0
 10901  00186C  6E27               	movwf	___ftdiv@f3+2,c
 10902  00186E  5029               	movf	___ftdiv@sign,w,c
 10903  001870  0F89               	addlw	137
 10904  001872  5E28               	subwf	___ftdiv@exp,f,c
 10905  001874  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
 10906  001878  5020               	movf	___ftdiv@f2+2,w,c
 10907  00187A  1A29               	xorwf	___ftdiv@sign,f,c
 10908  00187C  0E80               	movlw	128
 10909  00187E  1629               	andwf	___ftdiv@sign,f,c
 10910  001880  8E1C               	bsf	___ftdiv@f1+1,7,c
 10911  001882  0EFF               	movlw	255
 10912  001884  161B               	andwf	___ftdiv@f1,f,c
 10913  001886  0EFF               	movlw	255
 10914  001888  161C               	andwf	___ftdiv@f1+1,f,c
 10915  00188A  0E00               	movlw	0
 10916  00188C  161D               	andwf	___ftdiv@f1+2,f,c
 10917  00188E  8E1F               	bsf	___ftdiv@f2+1,7,c
 10918  001890  0EFF               	movlw	255
 10919  001892  161E               	andwf	___ftdiv@f2,f,c
 10920  001894  0EFF               	movlw	255
 10921  001896  161F               	andwf	___ftdiv@f2+1,f,c
 10922  001898  0E00               	movlw	0
 10923  00189A  1620               	andwf	___ftdiv@f2+2,f,c
 10924  00189C  0E18               	movlw	24
 10925  00189E  6E24               	movwf	___ftdiv@cntr,c
 10926  0018A0  D000               	goto	l4767
 10927  0018A2                     l4767:
 10928  0018A2  90D8               	bcf	status,0,c
 10929  0018A4  3625               	rlcf	___ftdiv@f3,f,c
 10930  0018A6  3626               	rlcf	___ftdiv@f3+1,f,c
 10931  0018A8  3627               	rlcf	___ftdiv@f3+2,f,c
 10932  0018AA  501E               	movf	___ftdiv@f2,w,c
 10933  0018AC  5C1B               	subwf	___ftdiv@f1,w,c
 10934  0018AE  501F               	movf	___ftdiv@f2+1,w,c
 10935  0018B0  581C               	subwfb	___ftdiv@f1+1,w,c
 10936  0018B2  5020               	movf	___ftdiv@f2+2,w,c
 10937  0018B4  581D               	subwfb	___ftdiv@f1+2,w,c
 10938  0018B6  A0D8               	btfss	status,0,c
 10939  0018B8  D007               	goto	l1015
 10940  0018BA  501E               	movf	___ftdiv@f2,w,c
 10941  0018BC  5E1B               	subwf	___ftdiv@f1,f,c
 10942  0018BE  501F               	movf	___ftdiv@f2+1,w,c
 10943  0018C0  5A1C               	subwfb	___ftdiv@f1+1,f,c
 10944  0018C2  5020               	movf	___ftdiv@f2+2,w,c
 10945  0018C4  5A1D               	subwfb	___ftdiv@f1+2,f,c
 10946  0018C6  8025               	bsf	___ftdiv@f3,0,c
 10947  0018C8                     l1015:
 10948  0018C8  90D8               	bcf	status,0,c
 10949  0018CA  361B               	rlcf	___ftdiv@f1,f,c
 10950  0018CC  361C               	rlcf	___ftdiv@f1+1,f,c
 10951  0018CE  361D               	rlcf	___ftdiv@f1+2,f,c
 10952  0018D0  2E24               	decfsz	___ftdiv@cntr,f,c
 10953  0018D2  D7E7               	goto	l4767
 10954  0018D4  D000               	goto	l4777
 10955  0018D6                     l4777:
 10956  0018D6  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
 10957  0018DA  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10958  0018DE  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10959  0018E2  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
 10960  0018E6  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
 10961  0018EA  ECBB  F00D         	call	___ftpack	;wreg free
 10962  0018EE  C00F  F01B         	movff	?___ftpack,?___ftdiv
 10963  0018F2  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
 10964  0018F6  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
 10965  0018FA  D000               	goto	l1012
 10966  0018FC                     l1012:
 10967  0018FC  0012               	return		;funcret
 10968  0018FE                     __end_of___ftdiv:
 10969                           	opt stack 0
 10970                           tblptru	equ	0xFF8
 10971                           tblptrh	equ	0xFF7
 10972                           tblptrl	equ	0xFF6
 10973                           tablat	equ	0xFF5
 10974                           prodh	equ	0xFF4
 10975                           prodl	equ	0xFF3
 10976                           intcon	equ	0xFF2
 10977                           intcon2	equ	0xFF1
 10978                           intcon3	equ	0xFF0
 10979                           postinc0	equ	0xFEE
 10980                           wreg	equ	0xFE8
 10981                           postdec1	equ	0xFE5
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           fsr2h	equ	0xFDA
 10987                           fsr2l	equ	0xFD9
 10988                           status	equ	0xFD8
 10989                           
 10990 ;; *************** function ___awtoft *****************
 10991 ;; Defined at:
 10992 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  c               2   22[COMRAM] int 
 10995 ;; Auto vars:     Size  Location     Type
 10996 ;;  sign            1   25[COMRAM] unsigned char 
 10997 ;; Return value:  Size  Location     Type
 10998 ;;                  3   22[COMRAM] float 
 10999 ;; Registers used:
 11000 ;;		wreg, status,2, status,0, cstack
 11001 ;; Tracked objects:
 11002 ;;		On entry : 0/0
 11003 ;;		On exit  : 0/0
 11004 ;;		Unchanged: 0/0
 11005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11006 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11010 ;;Total ram usage:        4 bytes
 11011 ;; Hardware stack levels used:    1
 11012 ;; Hardware stack levels required when called:    3
 11013 ;; This function calls:
 11014 ;;		___ftpack
 11015 ;; This function is called by:
 11016 ;;		_main
 11017 ;;		_update_LCD_misc
 11018 ;; This function uses a non-reentrant model
 11019 ;;
 11020                           
 11021                           	psect	text54
 11022  0026FE                     __ptext54:
 11023                           	opt stack 0
 11024  0026FE                     ___awtoft:
 11025                           	opt stack 27
 11026                           
 11027                           ;incstack = 0
 11028  0026FE  0E00               	movlw	0
 11029  002700  6E1A               	movwf	___awtoft@sign,c
 11030  002702  AE18               	btfss	___awtoft@c+1,7,c
 11031  002704  D007               	goto	l4789
 11032  002706  6C17               	negf	___awtoft@c,c
 11033  002708  1E18               	comf	___awtoft@c+1,f,c
 11034  00270A  B0D8               	btfsc	status,0,c
 11035  00270C  2A18               	incf	___awtoft@c+1,f,c
 11036  00270E  0E01               	movlw	1
 11037  002710  6E1A               	movwf	___awtoft@sign,c
 11038  002712  D000               	goto	l4789
 11039  002714                     l4789:
 11040  002714  C017  F00F         	movff	___awtoft@c,___ftpack@arg
 11041  002718  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 11042  00271C  6A11               	clrf	___ftpack@arg+2,c
 11043  00271E  0E8E               	movlw	142
 11044  002720  6E12               	movwf	___ftpack@exp,c
 11045  002722  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
 11046  002726  ECBB  F00D         	call	___ftpack	;wreg free
 11047  00272A  C00F  F017         	movff	?___ftpack,?___awtoft
 11048  00272E  C010  F018         	movff	?___ftpack+1,?___awtoft+1
 11049  002732  C011  F019         	movff	?___ftpack+2,?___awtoft+2
 11050  002736  D000               	goto	l850
 11051  002738                     l850:
 11052  002738  0012               	return		;funcret
 11053  00273A                     __end_of___awtoft:
 11054                           	opt stack 0
 11055                           tblptru	equ	0xFF8
 11056                           tblptrh	equ	0xFF7
 11057                           tblptrl	equ	0xFF6
 11058                           tablat	equ	0xFF5
 11059                           prodh	equ	0xFF4
 11060                           prodl	equ	0xFF3
 11061                           intcon	equ	0xFF2
 11062                           intcon2	equ	0xFF1
 11063                           intcon3	equ	0xFF0
 11064                           postinc0	equ	0xFEE
 11065                           wreg	equ	0xFE8
 11066                           postdec1	equ	0xFE5
 11067                           fsr1l	equ	0xFE1
 11068                           indf2	equ	0xFDF
 11069                           postinc2	equ	0xFDE
 11070                           postdec2	equ	0xFDD
 11071                           fsr2h	equ	0xFDA
 11072                           fsr2l	equ	0xFD9
 11073                           status	equ	0xFD8
 11074                           
 11075 ;; *************** function ___ftpack *****************
 11076 ;; Defined at:
 11077 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;  arg             3   14[COMRAM] unsigned um
 11080 ;;  exp             1   17[COMRAM] unsigned char 
 11081 ;;  sign            1   18[COMRAM] unsigned char 
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;		None
 11084 ;; Return value:  Size  Location     Type
 11085 ;;                  3   14[COMRAM] float 
 11086 ;; Registers used:
 11087 ;;		wreg, status,2, status,0
 11088 ;; Tracked objects:
 11089 ;;		On entry : 0/0
 11090 ;;		On exit  : 0/0
 11091 ;;		Unchanged: 0/0
 11092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11093 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;Total ram usage:        8 bytes
 11098 ;; Hardware stack levels used:    1
 11099 ;; Hardware stack levels required when called:    2
 11100 ;; This function calls:
 11101 ;;		Nothing
 11102 ;; This function is called by:
 11103 ;;		___awtoft
 11104 ;;		___ftdiv
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           	psect	text55
 11109  001B76                     __ptext55:
 11110                           	opt stack 0
 11111  001B76                     ___ftpack:
 11112                           	opt stack 27
 11113                           
 11114                           ;incstack = 0
 11115  001B76  5012               	movf	___ftpack@exp,w,c
 11116  001B78  B4D8               	btfsc	status,2,c
 11117  001B7A  D005               	goto	l4627
 11118  001B7C  500F               	movf	___ftpack@arg,w,c
 11119  001B7E  1010               	iorwf	___ftpack@arg+1,w,c
 11120  001B80  1011               	iorwf	___ftpack@arg+2,w,c
 11121  001B82  A4D8               	btfss	status,2,c
 11122  001B84  D00E               	goto	l4633
 11123  001B86                     l4627:
 11124  001B86  0E00               	movlw	0
 11125  001B88  6E0F               	movwf	?___ftpack,c
 11126  001B8A  0E00               	movlw	0
 11127  001B8C  6E10               	movwf	?___ftpack+1,c
 11128  001B8E  0E00               	movlw	0
 11129  001B90  6E11               	movwf	?___ftpack+2,c
 11130  001B92  D053               	goto	l940
 11131  001B94  D006               	goto	l4633
 11132  001B96                     l4631:
 11133  001B96  2A12               	incf	___ftpack@exp,f,c
 11134  001B98  90D8               	bcf	status,0,c
 11135  001B9A  3211               	rrcf	___ftpack@arg+2,f,c
 11136  001B9C  3210               	rrcf	___ftpack@arg+1,f,c
 11137  001B9E  320F               	rrcf	___ftpack@arg,f,c
 11138  001BA0  D000               	goto	l4633
 11139  001BA2                     l4633:
 11140  001BA2  0E00               	movlw	0
 11141  001BA4  140F               	andwf	___ftpack@arg,w,c
 11142  001BA6  6E14               	movwf	??___ftpack& (0+255),c
 11143  001BA8  0E00               	movlw	0
 11144  001BAA  1410               	andwf	___ftpack@arg+1,w,c
 11145  001BAC  6E15               	movwf	(??___ftpack+1)& (0+255),c
 11146  001BAE  0EFE               	movlw	254
 11147  001BB0  1411               	andwf	___ftpack@arg+2,w,c
 11148  001BB2  6E16               	movwf	(??___ftpack+2)& (0+255),c
 11149  001BB4  5014               	movf	??___ftpack,w,c
 11150  001BB6  1015               	iorwf	??___ftpack+1,w,c
 11151  001BB8  1016               	iorwf	??___ftpack+2,w,c
 11152  001BBA  B4D8               	btfsc	status,2,c
 11153  001BBC  D00E               	goto	l4639
 11154  001BBE  D7EB               	goto	l4631
 11155  001BC0  D00C               	goto	l4639
 11156  001BC2                     l4635:
 11157  001BC2  2A12               	incf	___ftpack@exp,f,c
 11158  001BC4  0E01               	movlw	1
 11159  001BC6  260F               	addwf	___ftpack@arg,f,c
 11160  001BC8  0E00               	movlw	0
 11161  001BCA  2210               	addwfc	___ftpack@arg+1,f,c
 11162  001BCC  0E00               	movlw	0
 11163  001BCE  2211               	addwfc	___ftpack@arg+2,f,c
 11164  001BD0  90D8               	bcf	status,0,c
 11165  001BD2  3211               	rrcf	___ftpack@arg+2,f,c
 11166  001BD4  3210               	rrcf	___ftpack@arg+1,f,c
 11167  001BD6  320F               	rrcf	___ftpack@arg,f,c
 11168  001BD8  D000               	goto	l4639
 11169  001BDA                     l4639:
 11170  001BDA  0E00               	movlw	0
 11171  001BDC  140F               	andwf	___ftpack@arg,w,c
 11172  001BDE  6E14               	movwf	??___ftpack& (0+255),c
 11173  001BE0  0E00               	movlw	0
 11174  001BE2  1410               	andwf	___ftpack@arg+1,w,c
 11175  001BE4  6E15               	movwf	(??___ftpack+1)& (0+255),c
 11176  001BE6  0EFF               	movlw	255
 11177  001BE8  1411               	andwf	___ftpack@arg+2,w,c
 11178  001BEA  6E16               	movwf	(??___ftpack+2)& (0+255),c
 11179  001BEC  5014               	movf	??___ftpack,w,c
 11180  001BEE  1015               	iorwf	??___ftpack+1,w,c
 11181  001BF0  1016               	iorwf	??___ftpack+2,w,c
 11182  001BF2  B4D8               	btfsc	status,2,c
 11183  001BF4  D008               	goto	l4643
 11184  001BF6  D7E5               	goto	l4635
 11185  001BF8  D006               	goto	l4643
 11186  001BFA                     l4641:
 11187  001BFA  0612               	decf	___ftpack@exp,f,c
 11188  001BFC  90D8               	bcf	status,0,c
 11189  001BFE  360F               	rlcf	___ftpack@arg,f,c
 11190  001C00  3610               	rlcf	___ftpack@arg+1,f,c
 11191  001C02  3611               	rlcf	___ftpack@arg+2,f,c
 11192  001C04  D000               	goto	l4643
 11193  001C06                     l4643:
 11194  001C06  BE10               	btfsc	___ftpack@arg+1,7,c
 11195  001C08  D004               	goto	l951
 11196  001C0A  0E02               	movlw	2
 11197  001C0C  6012               	cpfslt	___ftpack@exp,c
 11198  001C0E  D7F5               	goto	l4641
 11199  001C10  D000               	goto	l951
 11200  001C12                     l951:
 11201  001C12  B012               	btfsc	___ftpack@exp,0,c
 11202  001C14  D002               	goto	l4649
 11203  001C16  9E10               	bcf	___ftpack@arg+1,7,c
 11204  001C18  D000               	goto	l4649
 11205  001C1A                     l4649:
 11206  001C1A  90D8               	bcf	status,0,c
 11207  001C1C  3212               	rrcf	___ftpack@exp,f,c
 11208  001C1E  5012               	movf	___ftpack@exp,w,c
 11209  001C20  1211               	iorwf	___ftpack@arg+2,f,c
 11210  001C22  5013               	movf	___ftpack@sign,w,c
 11211  001C24  B4D8               	btfsc	status,2,c
 11212  001C26  D002               	goto	l4655
 11213  001C28  8E11               	bsf	___ftpack@arg+2,7,c
 11214  001C2A  D000               	goto	l4655
 11215  001C2C                     l4655:
 11216  001C2C  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 11217  001C30  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 11218  001C34  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 11219  001C38  D000               	goto	l940
 11220  001C3A                     l940:
 11221  001C3A  0012               	return		;funcret
 11222  001C3C                     __end_of___ftpack:
 11223                           	opt stack 0
 11224                           tblptru	equ	0xFF8
 11225                           tblptrh	equ	0xFF7
 11226                           tblptrl	equ	0xFF6
 11227                           tablat	equ	0xFF5
 11228                           prodh	equ	0xFF4
 11229                           prodl	equ	0xFF3
 11230                           intcon	equ	0xFF2
 11231                           intcon2	equ	0xFF1
 11232                           intcon3	equ	0xFF0
 11233                           postinc0	equ	0xFEE
 11234                           wreg	equ	0xFE8
 11235                           postdec1	equ	0xFE5
 11236                           fsr1l	equ	0xFE1
 11237                           indf2	equ	0xFDF
 11238                           postinc2	equ	0xFDE
 11239                           postdec2	equ	0xFDD
 11240                           fsr2h	equ	0xFDA
 11241                           fsr2l	equ	0xFD9
 11242                           status	equ	0xFD8
 11243                           
 11244 ;; *************** function _strcpy *****************
 11245 ;; Defined at:
 11246 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 11247 ;; Parameters:    Size  Location     Type
 11248 ;;  to              2   14[COMRAM] PTR unsigned char 
 11249 ;;		 -> NULL(0), buffer(31), 
 11250 ;;  from            2   16[COMRAM] PTR const unsigned char 
 11251 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(2), 
 11252 ;;		 -> STR_12(21), STR_11(4), STR_10(4), STR_9(7), 
 11253 ;;		 -> STR_8(12), STR_7(7), STR_6(10), STR_5(2), 
 11254 ;;		 -> STR_4(4), STR_3(4), STR_2(6), STR_1(20), 
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;  cp              2   18[COMRAM] PTR unsigned char 
 11257 ;;		 -> NULL(0), buffer(31), 
 11258 ;; Return value:  Size  Location     Type
 11259 ;;                  2   14[COMRAM] PTR unsigned char 
 11260 ;; Registers used:
 11261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 11262 ;; Tracked objects:
 11263 ;;		On entry : 0/0
 11264 ;;		On exit  : 0/0
 11265 ;;		Unchanged: 0/0
 11266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11267 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11270 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11271 ;;Total ram usage:        6 bytes
 11272 ;; Hardware stack levels used:    1
 11273 ;; Hardware stack levels required when called:    2
 11274 ;; This function calls:
 11275 ;;		Nothing
 11276 ;; This function is called by:
 11277 ;;		_Initialize_Screen
 11278 ;;		_Wait_One_Second
 11279 ;;		_Wait_One_Second_With_Beep
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           	psect	text56
 11284  00273A                     __ptext56:
 11285                           	opt stack 0
 11286  00273A                     _strcpy:
 11287                           	opt stack 25
 11288                           
 11289                           ;incstack = 0
 11290  00273A  C00F  F013         	movff	strcpy@to,strcpy@cp
 11291  00273E  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
 11292  002742  D005               	goto	l4879
 11293  002744                     l4877:
 11294  002744  4A13               	infsnz	strcpy@cp,f,c
 11295  002746  2A14               	incf	strcpy@cp+1,f,c
 11296  002748  4A11               	infsnz	strcpy@from,f,c
 11297  00274A  2A12               	incf	strcpy@from+1,f,c
 11298  00274C  D000               	goto	l4879
 11299  00274E                     l4879:
 11300  00274E  C011  FFF6         	movff	strcpy@from,tblptrl
 11301  002752  C012  FFF7         	movff	strcpy@from+1,tblptrh
 11302  002756                     	if	0	;tblptru may be non-zero
 11303  002756                     	endif
 11304  002756                     	if	0	;tblptru may be non-zero
 11305  002756                     	endif
 11306  002756  C013  FFD9         	movff	strcpy@cp,fsr2l
 11307  00275A  C014  FFDA         	movff	strcpy@cp+1,fsr2h
 11308  00275E  0008               	tblrd		*
 11309  002760  CFF5 FFDF          	movff	tablat,indf2
 11310  002764  50DF               	movf	indf2,w,c
 11311  002766  A4D8               	btfss	status,2,c
 11312  002768  D7ED               	goto	l4877
 11313                           
 11314                           ;	Return value of _strcpy is never used
 11315  00276A  0012               	return		;funcret
 11316  00276C                     __end_of_strcpy:
 11317                           	opt stack 0
 11318                           tblptru	equ	0xFF8
 11319                           tblptrh	equ	0xFF7
 11320                           tblptrl	equ	0xFF6
 11321                           tablat	equ	0xFF5
 11322                           prodh	equ	0xFF4
 11323                           prodl	equ	0xFF3
 11324                           intcon	equ	0xFF2
 11325                           intcon2	equ	0xFF1
 11326                           intcon3	equ	0xFF0
 11327                           postinc0	equ	0xFEE
 11328                           wreg	equ	0xFE8
 11329                           postdec1	equ	0xFE5
 11330                           fsr1l	equ	0xFE1
 11331                           indf2	equ	0xFDF
 11332                           postinc2	equ	0xFDE
 11333                           postdec2	equ	0xFDD
 11334                           fsr2h	equ	0xFDA
 11335                           fsr2l	equ	0xFD9
 11336                           status	equ	0xFD8
 11337                           
 11338 ;; *************** function _Wait_Half_Second *****************
 11339 ;; Defined at:
 11340 ;;		line 718 in file "Lab8.c"
 11341 ;; Parameters:    Size  Location     Type
 11342 ;;		None
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;		None
 11345 ;; Return value:  Size  Location     Type
 11346 ;;		None               void
 11347 ;; Registers used:
 11348 ;;		wreg, status,2
 11349 ;; Tracked objects:
 11350 ;;		On entry : 0/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;Total ram usage:        0 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    2
 11361 ;; This function calls:
 11362 ;;		Nothing
 11363 ;; This function is called by:
 11364 ;;		_Wait_One_Second
 11365 ;;		_Wait_One_Second_With_Beep
 11366 ;;		_Old_Wait_One_Second
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           	psect	text57
 11371  002830                     __ptext57:
 11372                           	opt stack 0
 11373  002830                     _Wait_Half_Second:
 11374                           	opt stack 25
 11375                           
 11376                           ;Lab8.c: 720: T0CON = 0x03;
 11377                           
 11378                           ;incstack = 0
 11379  002830  0E03               	movlw	3
 11380  002832  6ED5               	movwf	4053,c	;volatile
 11381                           
 11382                           ;Lab8.c: 721: TMR0L = 0xDB;
 11383  002834  0EDB               	movlw	219
 11384  002836  6ED6               	movwf	4054,c	;volatile
 11385                           
 11386                           ;Lab8.c: 722: TMR0H = 0x0B;
 11387  002838  0E0B               	movlw	11
 11388  00283A  6ED7               	movwf	4055,c	;volatile
 11389                           
 11390                           ;Lab8.c: 723: INTCONbits.TMR0IF = 0;
 11391  00283C  94F2               	bcf	intcon,2,c	;volatile
 11392                           
 11393                           ;Lab8.c: 724: T0CONbits.TMR0ON = 1;
 11394  00283E  8ED5               	bsf	4053,7,c	;volatile
 11395                           
 11396                           ;Lab8.c: 726: while(INTCONbits.TMR0IF == 0);
 11397  002840  D000               	goto	l518
 11398  002842                     l518:
 11399  002842  A4F2               	btfss	intcon,2,c	;volatile
 11400  002844  D7FE               	goto	l518
 11401                           
 11402                           ;Lab8.c: 727: T0CONbits.TMR0ON = 0;
 11403  002846  9ED5               	bcf	4053,7,c	;volatile
 11404  002848  0012               	return		;funcret
 11405  00284A                     __end_of_Wait_Half_Second:
 11406                           	opt stack 0
 11407                           tblptru	equ	0xFF8
 11408                           tblptrh	equ	0xFF7
 11409                           tblptrl	equ	0xFF6
 11410                           tablat	equ	0xFF5
 11411                           prodh	equ	0xFF4
 11412                           prodl	equ	0xFF3
 11413                           intcon	equ	0xFF2
 11414                           intcon2	equ	0xFF1
 11415                           intcon3	equ	0xFF0
 11416                           postinc0	equ	0xFEE
 11417                           wreg	equ	0xFE8
 11418                           postdec1	equ	0xFE5
 11419                           fsr1l	equ	0xFE1
 11420                           indf2	equ	0xFDF
 11421                           postinc2	equ	0xFDE
 11422                           postdec2	equ	0xFDD
 11423                           fsr2h	equ	0xFDA
 11424                           fsr2l	equ	0xFD9
 11425                           status	equ	0xFD8
 11426                           
 11427 ;; *************** function _Deactivate_Buzzer *****************
 11428 ;; Defined at:
 11429 ;;		line 521 in file "Lab8.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;		None
 11434 ;; Return value:  Size  Location     Type
 11435 ;;		None               void
 11436 ;; Registers used:
 11437 ;;		wreg, status,2
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;Total ram usage:        0 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    2
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_Wait_One_Second_With_Beep
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           	psect	text58
 11458  00291C                     __ptext58:
 11459                           	opt stack 0
 11460  00291C                     _Deactivate_Buzzer:
 11461                           	opt stack 25
 11462                           
 11463                           ;Lab8.c: 523: CCP2CON = 0x0;
 11464                           
 11465                           ;incstack = 0
 11466  00291C  0E00               	movlw	0
 11467  00291E  6EBA               	movwf	4026,c	;volatile
 11468                           
 11469                           ;Lab8.c: 524: PORTBbits.RB3 = 0;
 11470  002920  9681               	bcf	3969,3,c	;volatile
 11471  002922  0012               	return		;funcret
 11472  002924                     __end_of_Deactivate_Buzzer:
 11473                           	opt stack 0
 11474                           tblptru	equ	0xFF8
 11475                           tblptrh	equ	0xFF7
 11476                           tblptrl	equ	0xFF6
 11477                           tablat	equ	0xFF5
 11478                           prodh	equ	0xFF4
 11479                           prodl	equ	0xFF3
 11480                           intcon	equ	0xFF2
 11481                           intcon2	equ	0xFF1
 11482                           intcon3	equ	0xFF0
 11483                           postinc0	equ	0xFEE
 11484                           wreg	equ	0xFE8
 11485                           postdec1	equ	0xFE5
 11486                           fsr1l	equ	0xFE1
 11487                           indf2	equ	0xFDF
 11488                           postinc2	equ	0xFDE
 11489                           postdec2	equ	0xFDD
 11490                           fsr2h	equ	0xFDA
 11491                           fsr2l	equ	0xFD9
 11492                           status	equ	0xFD8
 11493                           
 11494 ;; *************** function _Activate_Buzzer *****************
 11495 ;; Defined at:
 11496 ;;		line 513 in file "Lab8.c"
 11497 ;; Parameters:    Size  Location     Type
 11498 ;;		None
 11499 ;; Auto vars:     Size  Location     Type
 11500 ;;		None
 11501 ;; Return value:  Size  Location     Type
 11502 ;;		None               void
 11503 ;; Registers used:
 11504 ;;		wreg, status,2
 11505 ;; Tracked objects:
 11506 ;;		On entry : 0/0
 11507 ;;		On exit  : 0/0
 11508 ;;		Unchanged: 0/0
 11509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;Total ram usage:        0 bytes
 11515 ;; Hardware stack levels used:    1
 11516 ;; Hardware stack levels required when called:    2
 11517 ;; This function calls:
 11518 ;;		Nothing
 11519 ;; This function is called by:
 11520 ;;		_Wait_One_Second_With_Beep
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           	psect	text59
 11525  0028AE                     __ptext59:
 11526                           	opt stack 0
 11527  0028AE                     _Activate_Buzzer:
 11528                           	opt stack 25
 11529                           
 11530                           ;Lab8.c: 515: PR2 = 0b11111001;
 11531                           
 11532                           ;incstack = 0
 11533  0028AE  0EF9               	movlw	249
 11534  0028B0  6ECB               	movwf	4043,c	;volatile
 11535                           
 11536                           ;Lab8.c: 516: T2CON = 0b00000101;
 11537  0028B2  0E05               	movlw	5
 11538  0028B4  6ECA               	movwf	4042,c	;volatile
 11539                           
 11540                           ;Lab8.c: 517: CCPR2L = 0b01001010;
 11541  0028B6  0E4A               	movlw	74
 11542  0028B8  6EBB               	movwf	4027,c	;volatile
 11543                           
 11544                           ;Lab8.c: 518: CCP2CON = 0b00111100;
 11545  0028BA  0E3C               	movlw	60
 11546  0028BC  6EBA               	movwf	4026,c	;volatile
 11547  0028BE  0012               	return		;funcret
 11548  0028C0                     __end_of_Activate_Buzzer:
 11549                           	opt stack 0
 11550                           tblptru	equ	0xFF8
 11551                           tblptrh	equ	0xFF7
 11552                           tblptrl	equ	0xFF6
 11553                           tablat	equ	0xFF5
 11554                           prodh	equ	0xFF4
 11555                           prodl	equ	0xFF3
 11556                           intcon	equ	0xFF2
 11557                           intcon2	equ	0xFF1
 11558                           intcon3	equ	0xFF0
 11559                           postinc0	equ	0xFEE
 11560                           wreg	equ	0xFE8
 11561                           postdec1	equ	0xFE5
 11562                           fsr1l	equ	0xFE1
 11563                           indf2	equ	0xFDF
 11564                           postinc2	equ	0xFDE
 11565                           postdec2	equ	0xFDD
 11566                           fsr2h	equ	0xFDA
 11567                           fsr2l	equ	0xFD9
 11568                           status	equ	0xFD8
 11569                           
 11570 ;; *************** function _chkisr *****************
 11571 ;; Defined at:
 11572 ;;		line 376 in file "Lab8.c"
 11573 ;; Parameters:    Size  Location     Type
 11574 ;;		None
 11575 ;; Auto vars:     Size  Location     Type
 11576 ;;		None
 11577 ;; Return value:  Size  Location     Type
 11578 ;;		None               void
 11579 ;; Registers used:
 11580 ;;		wreg, status,2, cstack
 11581 ;; Tracked objects:
 11582 ;;		On entry : 0/0
 11583 ;;		On exit  : 0/0
 11584 ;;		Unchanged: 0/0
 11585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;Total ram usage:       14 bytes
 11591 ;; Hardware stack levels used:    1
 11592 ;; Hardware stack levels required when called:    1
 11593 ;; This function calls:
 11594 ;;		_INT0_ISR
 11595 ;;		_INT1_ISR
 11596 ;;		_INT2_ISR
 11597 ;; This function is called by:
 11598 ;;		Interrupt level 2
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           	psect	intcode
 11603  000008                     __pintcode:
 11604                           	opt stack 0
 11605  000008                     _chkisr:
 11606                           	opt stack 18
 11607                           
 11608                           ;incstack = 0
 11609  000008  CFFA F001          	movff	pclath,??_chkisr
 11610  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 11611  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 11612  000014  EDDD  F00F         	call	int_func,f	;refresh shadow registers
 11613                           pclatu	equ	0xFFB
 11614                           pclath	equ	0xFFA
 11615                           tblptru	equ	0xFF8
 11616                           tblptrh	equ	0xFF7
 11617                           tblptrl	equ	0xFF6
 11618                           tablat	equ	0xFF5
 11619                           prodh	equ	0xFF4
 11620                           prodl	equ	0xFF3
 11621                           intcon	equ	0xFF2
 11622                           intcon2	equ	0xFF1
 11623                           intcon3	equ	0xFF0
 11624                           postinc0	equ	0xFEE
 11625                           fsr0l	equ	0xFE9
 11626                           wreg	equ	0xFE8
 11627                           postdec1	equ	0xFE5
 11628                           fsr1l	equ	0xFE1
 11629                           indf2	equ	0xFDF
 11630                           postinc2	equ	0xFDE
 11631                           postdec2	equ	0xFDD
 11632                           fsr2h	equ	0xFDA
 11633                           fsr2l	equ	0xFD9
 11634                           status	equ	0xFD8
 11635                           
 11636                           	psect	intcode_body
 11637  001FBA                     __pintcode_body:
 11638                           	opt stack 18
 11639  001FBA                     int_func:
 11640                           	opt stack 18
 11641  001FBA  0006               	pop		; remove dummy address from shadow register refresh
 11642  001FBC  CFEA F004          	movff	fsr0h,??_chkisr+3
 11643  001FC0  CFE1 F005          	movff	fsr1l,??_chkisr+4
 11644  001FC4  CFE2 F006          	movff	fsr1h,??_chkisr+5
 11645  001FC8  CFD9 F007          	movff	fsr2l,??_chkisr+6
 11646  001FCC  CFDA F008          	movff	fsr2h,??_chkisr+7
 11647  001FD0  CFF3 F009          	movff	prodl,??_chkisr+8
 11648  001FD4  CFF4 F00A          	movff	prodh,??_chkisr+9
 11649  001FD8  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 11650  001FDC  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 11651  001FE0  CFF8 F00D          	movff	tblptru,??_chkisr+12
 11652  001FE4  CFF5 F00E          	movff	tablat,??_chkisr+13
 11653                           
 11654                           ;Lab8.c: 378: if (INTCONbits.INT0IF == 1) INT0_ISR();
 11655  001FE8  A2F2               	btfss	intcon,1,c	;volatile
 11656  001FEA  D003               	goto	i2l2861
 11657  001FEC  EC96  F014         	call	_INT0_ISR	;wreg free
 11658  001FF0  D000               	goto	i2l2861
 11659  001FF2                     i2l2861:
 11660                           
 11661                           ;Lab8.c: 379: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 11662  001FF2  A0F0               	btfss	intcon3,0,c	;volatile
 11663  001FF4  D003               	goto	i2l2865
 11664  001FF6  EC92  F014         	call	_INT1_ISR	;wreg free
 11665  001FFA  D000               	goto	i2l2865
 11666  001FFC                     i2l2865:
 11667                           
 11668                           ;Lab8.c: 380: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 11669  001FFC  A2F0               	btfss	intcon3,1,c	;volatile
 11670  001FFE  D003               	goto	i2l416
 11671  002000  EC70  F014         	call	_INT2_ISR	;wreg free
 11672  002004  D000               	goto	i2l416
 11673  002006                     i2l416:
 11674  002006  C00E  FFF5         	movff	??_chkisr+13,tablat
 11675  00200A  C00D  FFF8         	movff	??_chkisr+12,tblptru
 11676  00200E  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 11677  002012  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 11678  002016  C00A  FFF4         	movff	??_chkisr+9,prodh
 11679  00201A  C009  FFF3         	movff	??_chkisr+8,prodl
 11680  00201E  C008  FFDA         	movff	??_chkisr+7,fsr2h
 11681  002022  C007  FFD9         	movff	??_chkisr+6,fsr2l
 11682  002026  C006  FFE2         	movff	??_chkisr+5,fsr1h
 11683  00202A  C005  FFE1         	movff	??_chkisr+4,fsr1l
 11684  00202E  C004  FFEA         	movff	??_chkisr+3,fsr0h
 11685  002032  C003  FFE9         	movff	??_chkisr+2,fsr0l
 11686  002036  C002  FFFB         	movff	??_chkisr+1,pclatu
 11687  00203A  C001  FFFA         	movff	??_chkisr,pclath
 11688  00203E  0011               	retfie		f
 11689  002040                     __end_of_chkisr:
 11690                           	opt stack 0
 11691                           pclatu	equ	0xFFB
 11692                           pclath	equ	0xFFA
 11693                           tblptru	equ	0xFF8
 11694                           tblptrh	equ	0xFF7
 11695                           tblptrl	equ	0xFF6
 11696                           tablat	equ	0xFF5
 11697                           prodh	equ	0xFF4
 11698                           prodl	equ	0xFF3
 11699                           intcon	equ	0xFF2
 11700                           intcon2	equ	0xFF1
 11701                           intcon3	equ	0xFF0
 11702                           postinc0	equ	0xFEE
 11703                           fsr0h	equ	0xFEA
 11704                           fsr0l	equ	0xFE9
 11705                           wreg	equ	0xFE8
 11706                           postdec1	equ	0xFE5
 11707                           fsr1h	equ	0xFE2
 11708                           fsr1l	equ	0xFE1
 11709                           indf2	equ	0xFDF
 11710                           postinc2	equ	0xFDE
 11711                           postdec2	equ	0xFDD
 11712                           fsr2h	equ	0xFDA
 11713                           fsr2l	equ	0xFD9
 11714                           status	equ	0xFD8
 11715                           
 11716 ;; *************** function _INT2_ISR *****************
 11717 ;; Defined at:
 11718 ;;		line 397 in file "Lab8.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;		None
 11721 ;; Auto vars:     Size  Location     Type
 11722 ;;		None
 11723 ;; Return value:  Size  Location     Type
 11724 ;;		None               void
 11725 ;; Registers used:
 11726 ;;		wreg, status,2
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11736 ;;Total ram usage:        0 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; This function calls:
 11739 ;;		Nothing
 11740 ;; This function is called by:
 11741 ;;		_chkisr
 11742 ;; This function uses a non-reentrant model
 11743 ;;
 11744                           
 11745                           	psect	text61
 11746  0028E0                     __ptext61:
 11747                           	opt stack 0
 11748  0028E0                     _INT2_ISR:
 11749                           	opt stack 18
 11750                           
 11751                           ;Lab8.c: 399: INTCON3bits.INT2IF=0;
 11752                           
 11753                           ;incstack = 0
 11754  0028E0  92F0               	bcf	intcon3,1,c	;volatile
 11755                           
 11756                           ;Lab8.c: 400: FLASHING_REQUEST = 1;
 11757  0028E2  0E01               	movlw	1
 11758  0028E4  6E51               	movwf	_FLASHING_REQUEST,c
 11759                           
 11760                           ;Lab8.c: 401: INT2_flag = 1;
 11761  0028E6  0E00               	movlw	0
 11762  0028E8  6E49               	movwf	_INT2_flag+1,c
 11763  0028EA  0E01               	movlw	1
 11764  0028EC  6E48               	movwf	_INT2_flag,c
 11765  0028EE  0012               	return		;funcret
 11766  0028F0                     __end_of_INT2_ISR:
 11767                           	opt stack 0
 11768                           pclatu	equ	0xFFB
 11769                           pclath	equ	0xFFA
 11770                           tblptru	equ	0xFF8
 11771                           tblptrh	equ	0xFF7
 11772                           tblptrl	equ	0xFF6
 11773                           tablat	equ	0xFF5
 11774                           prodh	equ	0xFF4
 11775                           prodl	equ	0xFF3
 11776                           intcon	equ	0xFF2
 11777                           intcon2	equ	0xFF1
 11778                           intcon3	equ	0xFF0
 11779                           postinc0	equ	0xFEE
 11780                           fsr0h	equ	0xFEA
 11781                           fsr0l	equ	0xFE9
 11782                           wreg	equ	0xFE8
 11783                           postdec1	equ	0xFE5
 11784                           fsr1h	equ	0xFE2
 11785                           fsr1l	equ	0xFE1
 11786                           indf2	equ	0xFDF
 11787                           postinc2	equ	0xFDE
 11788                           postdec2	equ	0xFDD
 11789                           fsr2h	equ	0xFDA
 11790                           fsr2l	equ	0xFD9
 11791                           status	equ	0xFD8
 11792                           
 11793 ;; *************** function _INT1_ISR *****************
 11794 ;; Defined at:
 11795 ;;		line 390 in file "Lab8.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;		None
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;		None
 11800 ;; Return value:  Size  Location     Type
 11801 ;;		None               void
 11802 ;; Registers used:
 11803 ;;		wreg, status,2
 11804 ;; Tracked objects:
 11805 ;;		On entry : 0/0
 11806 ;;		On exit  : 0/0
 11807 ;;		Unchanged: 0/0
 11808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;Total ram usage:        0 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; This function calls:
 11816 ;;		Nothing
 11817 ;; This function is called by:
 11818 ;;		_chkisr
 11819 ;; This function uses a non-reentrant model
 11820 ;;
 11821                           
 11822                           	psect	text62
 11823  002924                     __ptext62:
 11824                           	opt stack 0
 11825  002924                     _INT1_ISR:
 11826                           	opt stack 18
 11827                           
 11828                           ;Lab8.c: 392: INTCON3bits.INT1IF=0;
 11829                           
 11830                           ;incstack = 0
 11831  002924  90F0               	bcf	intcon3,0,c	;volatile
 11832                           
 11833                           ;Lab8.c: 393: EW_PED_SW = 1;
 11834  002926  0E01               	movlw	1
 11835  002928  6E4F               	movwf	_EW_PED_SW,c
 11836  00292A  0012               	return		;funcret
 11837  00292C                     __end_of_INT1_ISR:
 11838                           	opt stack 0
 11839                           pclatu	equ	0xFFB
 11840                           pclath	equ	0xFFA
 11841                           tblptru	equ	0xFF8
 11842                           tblptrh	equ	0xFF7
 11843                           tblptrl	equ	0xFF6
 11844                           tablat	equ	0xFF5
 11845                           prodh	equ	0xFF4
 11846                           prodl	equ	0xFF3
 11847                           intcon	equ	0xFF2
 11848                           intcon2	equ	0xFF1
 11849                           intcon3	equ	0xFF0
 11850                           postinc0	equ	0xFEE
 11851                           fsr0h	equ	0xFEA
 11852                           fsr0l	equ	0xFE9
 11853                           wreg	equ	0xFE8
 11854                           postdec1	equ	0xFE5
 11855                           fsr1h	equ	0xFE2
 11856                           fsr1l	equ	0xFE1
 11857                           indf2	equ	0xFDF
 11858                           postinc2	equ	0xFDE
 11859                           postdec2	equ	0xFDD
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function _INT0_ISR *****************
 11865 ;; Defined at:
 11866 ;;		line 383 in file "Lab8.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;		None
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;		None
 11871 ;; Return value:  Size  Location     Type
 11872 ;;		None               void
 11873 ;; Registers used:
 11874 ;;		wreg, status,2
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;Total ram usage:        0 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; This function calls:
 11887 ;;		Nothing
 11888 ;; This function is called by:
 11889 ;;		_chkisr
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           	psect	text63
 11894  00292C                     __ptext63:
 11895                           	opt stack 0
 11896  00292C                     _INT0_ISR:
 11897                           	opt stack 18
 11898                           
 11899                           ;Lab8.c: 385: INTCONbits.INT0IF=0;
 11900                           
 11901                           ;incstack = 0
 11902  00292C  92F2               	bcf	intcon,1,c	;volatile
 11903                           
 11904                           ;Lab8.c: 386: NS_PED_SW = 1;
 11905  00292E  0E01               	movlw	1
 11906  002930  6E52               	movwf	_NS_PED_SW,c
 11907  002932  0012               	return		;funcret
 11908  002934                     __end_of_INT0_ISR:
 11909                           	opt stack 0
 11910                           pclatu	equ	0xFFB
 11911                           pclath	equ	0xFFA
 11912                           tblptru	equ	0xFF8
 11913                           tblptrh	equ	0xFF7
 11914                           tblptrl	equ	0xFF6
 11915                           tablat	equ	0xFF5
 11916                           prodh	equ	0xFF4
 11917                           prodl	equ	0xFF3
 11918                           intcon	equ	0xFF2
 11919                           intcon2	equ	0xFF1
 11920                           intcon3	equ	0xFF0
 11921                           postinc0	equ	0xFEE
 11922                           fsr0h	equ	0xFEA
 11923                           fsr0l	equ	0xFE9
 11924                           wreg	equ	0xFE8
 11925                           postdec1	equ	0xFE5
 11926                           fsr1h	equ	0xFE2
 11927                           fsr1l	equ	0xFE1
 11928                           indf2	equ	0xFDF
 11929                           postinc2	equ	0xFDE
 11930                           postdec2	equ	0xFDD
 11931                           fsr2h	equ	0xFDA
 11932                           fsr2l	equ	0xFD9
 11933                           status	equ	0xFD8
 11934                           pclatu	equ	0xFFB
 11935                           pclath	equ	0xFFA
 11936                           tblptru	equ	0xFF8
 11937                           tblptrh	equ	0xFF7
 11938                           tblptrl	equ	0xFF6
 11939                           tablat	equ	0xFF5
 11940                           prodh	equ	0xFF4
 11941                           prodl	equ	0xFF3
 11942                           intcon	equ	0xFF2
 11943                           intcon2	equ	0xFF1
 11944                           intcon3	equ	0xFF0
 11945                           postinc0	equ	0xFEE
 11946                           fsr0h	equ	0xFEA
 11947                           fsr0l	equ	0xFE9
 11948                           wreg	equ	0xFE8
 11949                           postdec1	equ	0xFE5
 11950                           fsr1h	equ	0xFE2
 11951                           fsr1l	equ	0xFE1
 11952                           indf2	equ	0xFDF
 11953                           postinc2	equ	0xFDE
 11954                           postdec2	equ	0xFDD
 11955                           fsr2h	equ	0xFDA
 11956                           fsr2l	equ	0xFD9
 11957                           status	equ	0xFD8
 11958                           
 11959                           	psect	rparam
 11960  0000                     pclatu	equ	0xFFB
 11961                           pclath	equ	0xFFA
 11962                           tblptru	equ	0xFF8
 11963                           tblptrh	equ	0xFF7
 11964                           tblptrl	equ	0xFF6
 11965                           tablat	equ	0xFF5
 11966                           prodh	equ	0xFF4
 11967                           prodl	equ	0xFF3
 11968                           intcon	equ	0xFF2
 11969                           intcon2	equ	0xFF1
 11970                           intcon3	equ	0xFF0
 11971                           postinc0	equ	0xFEE
 11972                           fsr0h	equ	0xFEA
 11973                           fsr0l	equ	0xFE9
 11974                           wreg	equ	0xFE8
 11975                           postdec1	equ	0xFE5
 11976                           fsr1h	equ	0xFE2
 11977                           fsr1l	equ	0xFE1
 11978                           indf2	equ	0xFDF
 11979                           postinc2	equ	0xFDE
 11980                           postdec2	equ	0xFDD
 11981                           fsr2h	equ	0xFDA
 11982                           fsr2l	equ	0xFD9
 11983                           status	equ	0xFD8


Data Sizes:
    Strings     202
    Constant    485
    Data        35
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     113
    BANK0           128     14      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_12(CODE[21]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[7]), 
		 -> STR_8(CODE[12]), STR_7(CODE[7]), STR_6(CODE[10]), STR_5(CODE[2]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_15(CODE[33]), STR_14(CODE[33]), STR_13(CODE[33]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), 
		 -> SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _Initialize_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _update_LCD_count->_drawtext
    _Wait_One_Second->_drawtext
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_drawtext
    _update_LCD_misc->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _Day_Mode->_PED_Control
    _Wait_N_Seconds->_update_LCD_count
    _Wait_N_Seconds->_update_LCD_misc
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _PED_Control->_update_LCD_PED_Count
    _PED_Control->_update_LCD_misc
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  800047
                                             12 BANK0      2     2      0
                           _Day_Mode
                        _Do_Flashing
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1513
                                             26 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     371
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  221332
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   67208
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  160056
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  343226
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0  121764
                                              9 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28828
                                              7 BANK0      2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   60488
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              3 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                              0 BANK0      3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1  121894
                                              9 BANK0      3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28704
                                              7 BANK0      2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1213
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1225
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   60488
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (3) _update_LCD_misc                                      2     2      0   32318
                                              7 BANK0      2     2      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25981
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10774
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     882
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2718
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2189
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___wmul
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___wmul
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Wait_Half_Second
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___wmul
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___wmul
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      3E       5       48.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AF      34        0.0%
DATA                 0      0      AF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 14 12:43:12 2021

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 1E20                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 00B2                                 l215 1156  
                               l224 10AC                                 l217 1030  
                               l139 23E0                                 l252 19D8  
                               l149 2896                                 l501 1B74  
                               l253 1944                                 l263 0D88  
                               l255 19B4                                 l256 19D6  
                               l193 279A                                 l281 1446  
                               l442 27F2                                 l506 1CF2  
                               l451 257E                                 l452 2584  
                               l460 2536                                 l620 2170  
                               l445 2812                                 l533 0AAA  
                               l453 2588                                 l461 253C  
                               l518 2842                                 l470 2614  
                               l454 25AC                                 l462 2540  
                               l542 1000                                 l199 1FB8  
                               l471 2618                                 l463 2564  
                               l632 27EC                                 l472 263C  
                               l480 25D0                                 l624 218A  
                               l481 25F4                                 l449 257A  
                               l297 1F30                                 l625 218C  
                               l458 2532                                 l626 2196  
                               l467 260A                                 l627 2198  
                               l395 2904                                 l492 220A  
                               l476 25C2                                 l549 1AA8  
                               l469 260E                                 l629 21B2  
                               l494 221A                                 l478 25C6  
                               l479 25CC                                 l825 1D88  
                               l497 1AE4                                 l850 2738  
                               l499 1B38                                 l940 1C3A  
                               l596 13D6                                 l838 2142  
                               l951 1C12                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 00B8                                 _PR2 000FCB  
                 _Deactivate_Buzzer 291C                                 _dir 005B  
                               _nbr 004A                                 _txt 004C  
                    drawFastHLine@w 0017                      drawFastHLine@x 0020  
                    drawFastHLine@y 0016                        ___awmod@sign 0014  
           __end_of_update_LCD_misc 0CC6                                 wreg 000FE8  
                ??_Wait_Half_Second 000F                  ?_Deactivate_Buzzer 0001  
                   ??_fillRectangle 001B                        __CFG_LVP$OFF 000000  
           _TFT_GreenTab_Initialize 279C                        ___ftdiv@cntr 0024  
                      ___ftdiv@sign 0029                        __CFG_WDT$OFF 000000  
                              l1012 18FC                                l1021 1E1E  
                              l1015 18C8                      drawFastVLine@h 0017  
                              l1150 2336                                l1160 24CA  
                    drawFastVLine@x 0020                                l1189 26FC  
                    drawFastVLine@y 0016                                l5021 211C  
                              l5013 20F4                                l5005 20D8  
                              l5015 20FE                                l5017 2106  
                              l5025 2128                                l5009 20E6  
                              l5029 2138                                l5213 08FA  
                              l5223 19E0                                l5151 19B8  
                              l5135 197C                                l5311 2160  
                              l4521 1F7A                                l4601 1122  
                              l5233 1A96                                l5217 09D2  
                              l5209 0824                                l5161 19D2  
                              l5129 190E                                l4531 1FA0  
                              l4603 114A                                l5227 1A3A  
                              l5155 19C2                                l5147 19AA  
                              l5315 2168                                l5307 2156  
                              l4533 1FAE                                l4517 1F42  
                              l5413 2654                                l5173 1EF2  
                              l6061 1226                                l4631 1B96  
                              l4551 24FA                                l4615 26CA  
                              l5263 0F2A                                l5255 0E7A  
                              l5183 1F18                                l5327 2182  
                              l5319 2174                                l5431 230C  
                              l6055 11FE                                l4641 1BFA  
                              l4633 1BA2                                l4801 1DEE  
                              l4609 1152                                l4617 26D0  
                              l4721 14A8                                l4705 142C  
                              l5361 258E                                l5273 0FE2  
                              l5409 2646                                l5185 1F26  
                              l5169 1EBA                                l6073 1274  
                              l4643 1C06                                l4635 1BC2  
                              l4627 1B86                                l4539 277C  
                              l4547 24DE                                l4571 102C  
                              l4563 1012                                l5267 0F86  
                              l5259 0ED0                                l5419 266C  
                              l5427 22FA                                l5451 24A8  
                              l5611 1322                                l6067 124E  
                              l4741 183A                                l4581 106C  
                              l4573 1034                                l4725 14FA  
                              l5429 2304                                l5605 1312  
                              l6077 1280                                l4655 1C2C  
                              l4639 1BDA                                l4743 1854  
                              l4807 1E1A                                l4583 10A0  
                              l4567 101E                                l5439 232A  
                              l5455 24BE                                l5447 2496  
                              l5623 135E                                l5615 1346  
                              l5607 1316                                l5631 13BA  
                              l6079 1286                                l4649 1C1A  
                              l4593 10CE                                l4585 10A4  
                              l4577 103C                                l4921 0B82  
                              l4913 0B66                                l4905 0B4A  
                              l5393 21CE                                l5377 261E  
                              l5385 25D6                                l5369 2546  
                              l5449 24A0                                l5625 1364  
                              l4747 1862                                l4595 10F6  
                              l4691 170C                                l4683 16BA  
                              l4667 164C                                l4931 0BA4  
                              l4843 0D6E                                l5715 1CB0  
                              l5619 134A                                l4693 1714  
                              l4925 0B90                                l4917 0B74  
                              l4909 0B58                                l5389 21C0  
                              l5733 2344                                l5629 13AE  
                              l4767 18A2                                l4679 169C  
                              l5399 21E8                                l4871 0E5E  
                              l5663 1B20                                l5751 238E  
                              l4777 18D6                                l4929 0B9E  
                              l4961 1D0A                                l5737 2354  
                              l5593 12C2                                l5585 12A4  
                              l5595 12E8                                l4877 2744  
                              l4789 2714                                l4797 1DBC  
                              l4973 1D32                                l5589 12B4  
                              l4879 274E                                l4975 1D3C  
                              l4967 1D1C                                l4993 1D7E  
                              l4985 1D62                                l4977 1D44  
                              l4989 1D6E                                STR_1 FFAC  
                              STR_2 FFE4                                STR_3 FFEA  
                              STR_4 FFEE                                STR_5 FFFC  
                              STR_6 FFCC                                STR_7 FFDD  
                              STR_8 FFC0                                STR_9 FFD6  
                              u3100 1F70                                u3250 1104  
                              u3511 184A                                u3620 0B24  
                              u3390 1676                                u3630 0B26  
                              u4520 11F8                                u4530 11FA  
                              u3491 182C                                _MODE 0080  
                              u3940 1EE8                                u3860 193C  
                              u3870 1972                                _TRMT 007D61  
               ??_Deactivate_Buzzer 000F                                _main 1158  
                              _font FD4F                        ___ftpack@arg 000F  
                      ___ftpack@exp 0012                                fsr0h 000FEA  
                              fsr1h 000FE2                      ??_get_full_ADC 0011  
                              fsr0l 000FE9                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 005E  
                              _volt 0041                     drawFastHLine@hi 001E  
                   drawFastHLine@lo 001F            __end_of_update_LCD_color 0AAC  
                              pclat 000FFA            __end_of_update_LCD_count 1002  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0018  
                   ??_drawFastHLine 001A                     ??_drawFastVLine 001A  
                      ___param_bank 000010                        _Act_Mode_Txt 0062  
                  __end_of_INT0_ISR 2934                    __end_of_INT1_ISR 292C  
                  __end_of_INT2_ISR 28F0                         _Do_Flashing 2340  
         __end_of_Deactivate_Buzzer 2924                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                         _SW_EWLT_Txt 0068  
                       _SW_MODE_Txt 006C                               ?_main 0001  
                   __end_of___awdiv 1D8A                     drawCircle@ddF_x 0024  
                             STR_10 FFF6                     drawCircle@ddF_y 0026  
                             STR_11 FFF2                               STR_12 FF97  
                             STR_13 FF34                               STR_14 FF55  
                             STR_15 FF76                               STR_16 FFFC  
                             STR_17 FFFA                               STR_18 FFFC  
                             STR_19 FFFA                     __end_of___awmod 2144  
                   __end_of___ftdiv 18FE                               _T0CON 000FD5  
                   ___awdiv@divisor 0011                               _T2CON 000FCA  
                             _T3CON 000FB1                     __end_of___lwdiv 2340  
                   __end_of___lwmod 24D4                               i2l416 2006  
                   ___awdiv@counter 0013                     drawCircle@color 0020  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 004E  
                      ?_PED_Control 00B9                               _Rcmd1 1510  
                             _Rcmd3 172A                         _SW_NSLT_Txt 006E  
                     drawRect@color 0029                       ___awtoft@sign 001A  
                   __end_of_init_IO 2860                     __end_of_dpowers FF34  
                             _font2 FE4E               fillCircleHelper@ddF_x 002F  
             fillCircleHelper@ddF_y 0031                   ??_Wait_One_Second 0041  
                     ___ftpack@sign 0013               fillCircleHelper@delta 0029  
                             _putch 2900               fillCircleHelper@color 002B  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 0041  
                  __end_of_Day_Mode 1B76                      _Wait_N_Seconds 263E  
                   write_data@data_ 0011                     __initialization 2282  
                      __end_of_main 129A                        __end_of_font FE4E  
                  __end_of_Init_ADC 291C                    __end_of_Rcmd2red 26C0  
                        _Night_Mode 1C3C                              ??_main 0041  
                     __activetblptr 000002               Wait_N_Seconds@seconds 00B9  
                 __end_of_LCD_Reset 28AE                        _SW_EWPED_Txt 006A  
         ??_TFT_GreenTab_Initialize 001B                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                              _ADRESH 000FC4  
                            _ADRESL 000FC3                              _CCPR2L 000FBB  
              PED_Control@direction 00BB                    ___awdiv@dividend 000F  
                  __end_of___awtoft 273A                              ?_putch 0001  
                  __end_of___ftpack 1C3C                              i2l2861 1FF2  
                            i2l2865 1FFC                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds 2682                        _SW_NSPED_Txt 0070  
                  __end_of_delay_ms 23E8                              _Set_EW 25F6  
                            _Set_NS 2566                    __end_of_fillRect 251E  
                  __end_of_drawChar 1158                    __end_of_drawRect 2282  
                __size_of_Set_EW_LT 0048                  __size_of_OpenUSART 0070  
                            ___ftge 1D8A                  __size_of_Set_NS_LT 0048  
          __size_of_Activate_Buzzer 0012                              ___wmul 27C6  
                         ??___awdiv 0013           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext 172A                           ??___awmod 0013  
                         ??___ftdiv 0021                              _chkisr 0008  
                         ??___lwdiv 0013                           ??___lwmod 001A  
                            _buffer 0082                              clear_0 2288  
                            clear_1 2294                    ___awdiv@quotient 0015  
                   ___awmod@divisor 0011          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 0013                              _printf 129A  
                      drawtext@size 003E                              _strcpy 273A  
                            _strlen 26C0                __end_of_get_full_ADC 2814  
                         ??_init_IO 000F                        __pdataCOMRAM 005E  
__size_of_Wait_One_Second_With_Beep 008A                         Set_EW@color 00B3  
                      __mediumconst FD4E                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                            putch@c 000F                    __end_of_spiwrite 289C  
                       Set_NS@color 00B3                          __accesstop 0080  
           __end_of__initialization 22DA                           ?_INT0_ISR 0001  
                         ?_INT1_ISR 0001                           ?_INT2_ISR 0001  
                        ___ftge@ff1 000F                          ___ftge@ff2 0012  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 001B                          ___ftdiv@f2 001E  
                        ___ftdiv@f3 0025                          ___awtoft@c 0017  
                     __end_of_Rcmd1 1620                       __end_of_Rcmd3 181C  
                    __pcstackCOMRAM 0001                        __pidataBANK0 28F0  
                     __end_of_font2 FF2A                       __end_of_putch 290E  
                       ?_Night_Mode 0001                      drawPixel@color 0017  
            __size_of_write_command 0010                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT 25F6                   __end_of_OpenUSART 21B4  
                 __end_of_Set_NS_LT 2566                __size_of_PED_Control 0068  
                           ??_putch 000F                          __pbssBANK0 0080  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                __size_of_init_UART 0014                          ??_INT0_ISR 0001  
                        ??_INT1_ISR 0001           __size_of_Wait_Half_Second 001A  
                        ??_INT2_ISR 0001                     spiwrite@spidata 0010  
                 ?_update_LCD_color 00B0                   ?_update_LCD_count 00B7  
                           ?_Set_EW 0001                             ?_Set_NS 0001  
                __CFG_CCP2MX$PORTBE 000000                  ??_update_LCD_color 0041  
                ??_update_LCD_count 0041                             ?___ftge 000F  
                           ?___wmul 000F                             ?_chkisr 0001  
            __size_of_setAddrWindow 004E                             _CCP2CON 000FBA  
                      ?_Do_Flashing 0001           update_LCD_PED_Count@count 00B7  
                         ?___awtoft 0017                           ?___ftpack 000F  
                   _Wait_One_Second 2040                          _fillCircle 23E8  
                           ?_printf 001B                             ?_strcpy 000F  
                           ?_strlen 000F                   ??_Activate_Buzzer 000F  
                        _fillScreen 2814                          _drawCircle 0CC6  
                        ??_Day_Mode 0041                           ?_delay_ms 0015  
                         ?_fillRect 0021           update_LCD_count@direction 00B8  
                         ?_drawChar 002C                             _SSPCON1 000FC6  
                         ?_drawRect 0021                             _SSPSTAT 000FC7  
             __end_of_fillRectangle 19DA                           ?_drawtext 0037  
                           _SW_EWLT 0054                             _SW_MODE 0056  
                        ??_Init_ADC 000F                             _SW_NSLT 0057  
                        ??_Rcmd2red 0012                 __size_of_Night_Mode 00B8  
                     _write_command 28D0                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0048  
                   __size_of_Set_NS 0048               __end_of_drawFastHLine 1F32  
                 __end_of_drawPixel 279C               __end_of_drawFastVLine 1FBA  
                  _fillCircleHelper 13D8                     __size_of___ftge 0096  
                           ___awdiv 1CF4                             ___awmod 20C2  
                           ___ftdiv 181C                     __size_of___wmul 0028  
                           ___lwdiv 22E4                             ___lwmod 2488  
             __size_of_get_full_ADC 0026                     __size_of_chkisr 2038  
                         ?_spiwrite 0001                             __pcinit 2282  
                        ??___awtoft 001A                          ??___ftpack 0014  
                           __ramtop 1000                             __ptext0 1158  
                           __ptext1 129A                             __ptext2 2900  
                           __ptext3 2488                             __ptext4 22E4  
                           __ptext5 2874                             __ptext6 2144  
                           __ptext7 284A                             __ptext8 1C3C  
                           __ptext9 001C                     __size_of_printf 013E  
                 __end_of_init_UART 2888                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO 284A                             _dpowers FF2A  
                         _T3CONbits 000FB1                    ___awmod@dividend 000F  
                        ??_delay_ms 0017                       drawtext@_text 0038  
                     drawtext@color 003A                          ??_fillRect 0026  
                        ??_drawChar 0033                           _LCD_Reset 289C  
                        ??_drawRect 002B                       _setAddrWindow 243A  
                    __pintcode_body 1FBA                  drawFastHLine@color 0018  
                        delay_ms@ms 0015                end_of_initialization 22DA  
                         _INT0_flag 0044                           _INT1_flag 0046  
                         _INT2_flag 0048                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FD4E  
                           int_func 1FBA                           _PED_Count 0053  
                      _get_full_ADC 27EE                        PED_Control@i 00BA  
                         _EW_PED_SW 004F       __size_of_update_LCD_PED_Count 00D0  
           __end_of_Wait_One_Second 20C2                           _RCSTAbits 000FAB  
                           printf@c 0026                             printf@f 001B  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc2 000FDE  
                        ??_spiwrite 000F                             strlen@s 000F  
                   fillCircle@color 003F                         ?_fillCircle 0039  
                         _PORTAbits 000F80                    drawtext@cursor_x 00B6  
                  drawtext@cursor_y 00B5                           _PORTBbits 000F81  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                         ?_fillScreen 0022  
                         _NS_PED_SW 0052                         ?_drawCircle 001A  
                        drawChar@bg 0030                           _TRISCbits 000F94  
                    ?_setAddrWindow 0012                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 0041                    drawtext@textsize 00B1  
          __size_of_update_LCD_misc 021A                          drawPixel@x 0019  
                        drawPixel@y 0016                    _Wait_Half_Second 2830  
                       ___ftdiv@exp 0028                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 00B9                  get_full_ADC@result 0013  
                 __size_of_INT0_ISR 0008                   __size_of_INT1_ISR 0008  
                 __size_of_INT2_ISR 0010                      __end_of_Set_EW 263E  
                    __end_of_Set_NS 25AE                      __end_of___ftge 1E20  
                    __end_of___wmul 27EE                       delay_ms@count 0019  
                        _write_data 28C0                       __pidataCOMRAM 2860  
                    __end_of_chkisr 2040                        ??_Night_Mode 0041  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 003C  
              __size_of_Do_Flashing 0056                      __end_of_printf 13D8  
                    __end_of_strcpy 276C                      __end_of_strlen 26FE  
               start_initialization 2282                   __size_of_Day_Mode 00CC  
                   ??_write_command 0011                           _Set_EW_LT 25AE  
                         _OpenUSART 2144                           _Set_NS_LT 251E  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode 1CF4  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 00BA                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0041                            ??_Set_NS 0041  
                   _Activate_Buzzer 28AE                    ?_Wait_One_Second 0001  
                          ??___ftge 0015                            ??___wmul 0013  
                          ??_chkisr 0001                         __pdataBANK0 00A1  
                   setAddrWindow@x0 0015                     setAddrWindow@x1 0013  
                   setAddrWindow@y0 0012                     setAddrWindow@y1 0014  
                          ??_printf 001F                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00AA  
         __size_of_update_LCD_color 0372           __size_of_update_LCD_count 018E  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0041                       ??_PED_Control 0041  
                   ??_setAddrWindow 0015                       __pcstackBANK0 00B0  
                      _PED_NS_Count 00AD                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 1510                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 000F                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 010A  
                  ___lwdiv@dividend 000F                   ??_update_LCD_misc 0041  
                         __pintcode 0008     __end_of_TFT_GreenTab_Initialize 27C6  
                     __pmediumconst FD4E                            ?___awdiv 000F  
                          ?___awmod 000F                            ?___ftdiv 001B  
                         __tft_type 0059                            ?___lwdiv 000F  
                          ?___lwmod 0016                           _direction 005C  
                drawFastVLine@color 0018                         ?_write_data 0001  
                         _drawPixel 276C                   __size_of_spiwrite 0014  
                          ?_init_IO 0001                   _Initialize_Screen 001C  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
                         _init_UART 2874                  ?_Initialize_Screen 0001  
                  ___lwdiv@quotient 0014                            _FLASHING 0050  
                    __size_of_putch 000E   __end_of_Wait_One_Second_With_Beep 1EAA  
               __end_of_PED_Control 221C             __end_of_Activate_Buzzer 28C0  
                          _INT0_ISR 292C                            _INT1_ISR 2924  
                          _INT2_ISR 28E0                      ___wmul@product 0013  
               ??_Initialize_Screen 0041                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 005F                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                         drawChar@c 002D                           drawChar@i 0036  
                         drawChar@j 0035                        ??_fillCircle 0041  
                         drawChar@x 0034                           drawChar@y 002C  
                        ?_drawPixel 0016              __size_of_fillRectangle 00DC  
                          _NS_Count 00A7                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second 284A                   ___wmul@multiplier 000F  
         __end_of_Initialize_Screen 073A                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 0064                       _FlashingS_Txt 0066  
                      ??_drawCircle 0022                          printf@flag 0022  
      __end_of_update_LCD_PED_Count 1AAA                           main@nStep 00BC  
                          _SW_EWPED 0055                          printf@prec 0023  
             update_LCD_color@color 00B0                            _Day_Mode 1AAA  
                          _SW_NSPED 0058           update_LCD_color@direction 00B1  
                        ?_init_UART 0001              __size_of_drawFastHLine 0088  
                       _INTCON2bits 000FF1                         _INTCON3bits 000FF0  
                         copy_data0 22AE                           copy_data1 22CE  
                         drawtext@i 00B3              __size_of_drawFastVLine 0088  
                         drawtext@x 00B0                           drawtext@y 0037  
                          _Init_ADC 290E                   write_command@cmd_ 0011  
                       ??_Set_EW_LT 0041                         ??_OpenUSART 0011  
                       ??_Set_NS_LT 0041                            _Rcmd2red 2682  
               __size_of_write_data 0010                     OpenUSART@config 0011  
                __end_of_fillCircle 243A                            __Hrparam 0000  
                __end_of_fillScreen 2830               update_LCD_count@count 00B7  
                          __Lrparam 0000                  __end_of_drawCircle 0E74  
                  __size_of___awdiv 0096                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                    __size_of___lwdiv 005C  
                  __size_of___lwmod 004C                            ___awtoft 26FE  
                          ___ftpack 1B76                    _update_LCD_color 073A  
                  _update_LCD_count 0E74                    __size_of_init_IO 0016  
                       _PED_Control 21B4                            _delay_ms 2396  
                   ___lwdiv@divisor 0011                     ___lwdiv@counter 0013  
                          __ptext10 2814                            __ptext11 18FE  
                          __ptext20 290E                            __ptext12 221C  
                          __ptext21 2340                            __ptext13 1EAA  
                          __ptext30 073A                            __ptext22 1AAA  
                          __ptext14 279C                            __ptext31 23E8  
                          __ptext23 263E                            __ptext15 172A  
                          __ptext40 27EE                            __ptext32 13D8  
                          __ptext24 0E74                            __ptext16 2682  
                          __ptext41 1620                            __ptext33 0CC6  
                          __ptext25 2040                            __ptext17 1510  
                          __ptext50 2888                            __ptext42 26C0  
                          __ptext34 21B4                            __ptext26 251E  
                          __ptext18 289C                            __ptext51 27C6  
                          __ptext43 1002                            __ptext35 19DA  
                          __ptext27 2566                            __ptext19 2396  
                          __ptext52 1D8A                            __ptext44 24D4  
                          __ptext36 20C2                            __ptext28 25AE  
                          __ptext61 28E0                            __ptext53 181C  
                          __ptext45 1F32                            __ptext37 1CF4  
                          __ptext29 25F6                            __ptext62 2924  
                          __ptext54 26FE                            __ptext46 276C  
                          __ptext38 1E20                            __ptext63 292C  
                          __ptext55 1B76                            __ptext47 243A  
                          __ptext39 0AAC                            __ptext56 273A  
                          __ptext48 28C0                            __ptext57 2830  
                          __ptext49 28D0                            __ptext58 291C  
                          __ptext59 28AE                            _fillRect 24D4  
                          _drawChar 1002                            _drawRect 221C  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 0051  
                          _colstart 005A                            _drawtext 1620  
                        strcpy@from 0011                       _fillRectangle 18FE  
                  ?_Activate_Buzzer 0001                       __size_of_main 0142  
                   fillRectangle@hi 001F                     fillRectangle@lo 0020  
                     _drawFastHLine 1EAA                      Set_EW_LT@color 00B3  
                     _drawFastVLine 1F32                       ??_Do_Flashing 0041  
                          _spiwrite 2888                           printf@val 0024  
                       ??_drawPixel 0019                            _rowstart 005D  
                fillCircleHelper@x0 0021                  fillCircleHelper@y0 0023  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 000F                         ??_init_UART 0012  
                        _EWLT_Count 00A1                   ?_fillCircleHelper 0021  
                         spiwrite@x 000F         ??_Wait_One_Second_With_Beep 0041  
                          intlevel2 0000                     _update_LCD_misc 0AAC  
                    ?_fillRectangle 0016                  ??_fillCircleHelper 002D  
                  ___lwmod@dividend 0016               __end_of_write_command 28E0  
                   fillScreen@color 0022                update_LCD_misc@nStep 00B7  
              _update_LCD_PED_Count 19DA             __size_of_Wait_N_Seconds 0044  
                      fillCircle@x0 0039                        fillCircle@y0 003B  
                    ?_drawFastHLine 0016                      fillRectangle@h 0018  
                    fillRectangle@w 0017                      fillRectangle@x 0021  
                    fillRectangle@y 0016                      ?_drawFastVLine 0016  
                          printf@ap 0020                   fillCircleHelper@f 0033  
                 fillCircleHelper@r 0025                   fillCircleHelper@x 0035  
                 fillCircleHelper@y 0037                        ??_write_data 0011  
                     fillRect@color 0024            __size_of_Wait_One_Second 0082  
                   ___lwmod@divisor 0018                            strcpy@cp 0013  
                          strlen@cp 0013                            strcpy@to 000F  
                   ___lwmod@counter 001A                 __end_of_Do_Flashing 2396  
                        _NSLT_Count 00A4                         fillCircle@r 003D  
             __end_of_setAddrWindow 2488                  fillRectangle@color 0019  
                     drawChar@color 002E                  __end_of_write_data 28D0  
                      drawChar@line 0033                      Set_NS_LT@color 00B3  
                     ?_get_full_ADC 000F                        drawChar@size 0032  
             ?_update_LCD_PED_Count 00B7  
