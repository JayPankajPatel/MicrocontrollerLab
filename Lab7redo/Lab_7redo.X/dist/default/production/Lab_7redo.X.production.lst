

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 21 10:07:08 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00DA43                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _wrap
    75  00DA43  01                 	db	1
    76                           
    77                           ;initializer for _EWLT_Count
    78  00DA44  30                 	db	48
    79  00DA45  30                 	db	48
    80  00DA46  00                 	db	0
    81                           
    82                           ;initializer for _EW_Count
    83  00DA47  30                 	db	48
    84  00DA48  30                 	db	48
    85  00DA49  00                 	db	0
    86                           
    87                           ;initializer for _NSLT_Count
    88  00DA4A  30                 	db	48
    89  00DA4B  30                 	db	48
    90  00DA4C  00                 	db	0
    91                           
    92                           ;initializer for _NS_Count
    93  00DA4D  30                 	db	48
    94  00DA4E  30                 	db	48
    95  00DA4F  00                 	db	0
    96                           
    97                           ;initializer for _PED_EW_Count
    98  00DA50  30                 	db	48
    99  00DA51  30                 	db	48
   100  00DA52  00                 	db	0
   101                           
   102                           ;initializer for _PED_NS_Count
   103  00DA53  30                 	db	48
   104  00DA54  30                 	db	48
   105  00DA55  00                 	db	0
   106                           
   107                           ;initializer for _Act_Mode_Txt
   108  00DA56  44                 	db	68
   109  00DA57  00                 	db	0
   110                           
   111                           ;initializer for _FlashingR_Txt
   112  00DA58  30                 	db	48
   113  00DA59  00                 	db	0
   114                           
   115                           ;initializer for _FlashingS_Txt
   116  00DA5A  30                 	db	48
   117  00DA5B  00                 	db	0
   118                           
   119                           ;initializer for _SW_EWLT_Txt
   120  00DA5C  30                 	db	48
   121  00DA5D  00                 	db	0
   122                           
   123                           ;initializer for _SW_EWPED_Txt
   124  00DA5E  30                 	db	48
   125  00DA5F  00                 	db	0
   126                           
   127                           ;initializer for _SW_MODE_Txt
   128  00DA60  44                 	db	68
   129  00DA61  00                 	db	0
   130                           
   131                           ;initializer for _SW_NSLT_Txt
   132  00DA62  30                 	db	48
   133  00DA63  00                 	db	0
   134                           
   135                           ;initializer for _SW_NSPED_Txt
   136  00DA64  30                 	db	48
   137  00DA65  00                 	db	0
   138                           
   139                           	psect	mediumconst
   140  00FDBC                     __pmediumconst:
   141                           	opt stack 0
   142  00FDBC  00                 	db	0
   143  00FDBD                     _font:
   144                           	opt stack 0
   145  00FDBD  00                 	db	0
   146  00FDBE  00                 	db	0
   147  00FDBF  00                 	db	0
   148  00FDC0  00                 	db	0
   149  00FDC1  00                 	db	0
   150  00FDC2  00                 	db	0
   151  00FDC3  00                 	db	0
   152  00FDC4  5F                 	db	95
   153  00FDC5  00                 	db	0
   154  00FDC6  00                 	db	0
   155  00FDC7  00                 	db	0
   156  00FDC8  07                 	db	7
   157  00FDC9  00                 	db	0
   158  00FDCA  07                 	db	7
   159  00FDCB  00                 	db	0
   160  00FDCC  14                 	db	20
   161  00FDCD  7F                 	db	127
   162  00FDCE  14                 	db	20
   163  00FDCF  7F                 	db	127
   164  00FDD0  14                 	db	20
   165  00FDD1  24                 	db	36
   166  00FDD2  2A                 	db	42
   167  00FDD3  7F                 	db	127
   168  00FDD4  2A                 	db	42
   169  00FDD5  12                 	db	18
   170  00FDD6  23                 	db	35
   171  00FDD7  13                 	db	19
   172  00FDD8  08                 	db	8
   173  00FDD9  64                 	db	100
   174  00FDDA  62                 	db	98
   175  00FDDB  36                 	db	54
   176  00FDDC  49                 	db	73
   177  00FDDD  56                 	db	86
   178  00FDDE  20                 	db	32
   179  00FDDF  50                 	db	80
   180  00FDE0  00                 	db	0
   181  00FDE1  08                 	db	8
   182  00FDE2  07                 	db	7
   183  00FDE3  03                 	db	3
   184  00FDE4  00                 	db	0
   185  00FDE5  00                 	db	0
   186  00FDE6  1C                 	db	28
   187  00FDE7  22                 	db	34
   188  00FDE8  41                 	db	65
   189  00FDE9  00                 	db	0
   190  00FDEA  00                 	db	0
   191  00FDEB  41                 	db	65
   192  00FDEC  22                 	db	34
   193  00FDED  1C                 	db	28
   194  00FDEE  00                 	db	0
   195  00FDEF  2A                 	db	42
   196  00FDF0  1C                 	db	28
   197  00FDF1  7F                 	db	127
   198  00FDF2  1C                 	db	28
   199  00FDF3  2A                 	db	42
   200  00FDF4  08                 	db	8
   201  00FDF5  08                 	db	8
   202  00FDF6  3E                 	db	62
   203  00FDF7  08                 	db	8
   204  00FDF8  08                 	db	8
   205  00FDF9  00                 	db	0
   206  00FDFA  80                 	db	128
   207  00FDFB  70                 	db	112
   208  00FDFC  30                 	db	48
   209  00FDFD  00                 	db	0
   210  00FDFE  08                 	db	8
   211  00FDFF  08                 	db	8
   212  00FE00  08                 	db	8
   213  00FE01  08                 	db	8
   214  00FE02  08                 	db	8
   215  00FE03  00                 	db	0
   216  00FE04  00                 	db	0
   217  00FE05  60                 	db	96
   218  00FE06  60                 	db	96
   219  00FE07  00                 	db	0
   220  00FE08  20                 	db	32
   221  00FE09  10                 	db	16
   222  00FE0A  08                 	db	8
   223  00FE0B  04                 	db	4
   224  00FE0C  02                 	db	2
   225  00FE0D  3E                 	db	62
   226  00FE0E  51                 	db	81
   227  00FE0F  49                 	db	73
   228  00FE10  45                 	db	69
   229  00FE11  3E                 	db	62
   230  00FE12  00                 	db	0
   231  00FE13  42                 	db	66
   232  00FE14  7F                 	db	127
   233  00FE15  40                 	db	64
   234  00FE16  00                 	db	0
   235  00FE17  72                 	db	114
   236  00FE18  49                 	db	73
   237  00FE19  49                 	db	73
   238  00FE1A  49                 	db	73
   239  00FE1B  46                 	db	70
   240  00FE1C  21                 	db	33
   241  00FE1D  41                 	db	65
   242  00FE1E  49                 	db	73
   243  00FE1F  4D                 	db	77
   244  00FE20  33                 	db	51
   245  00FE21  18                 	db	24
   246  00FE22  14                 	db	20
   247  00FE23  12                 	db	18
   248  00FE24  7F                 	db	127
   249  00FE25  10                 	db	16
   250  00FE26  27                 	db	39
   251  00FE27  45                 	db	69
   252  00FE28  45                 	db	69
   253  00FE29  45                 	db	69
   254  00FE2A  39                 	db	57
   255  00FE2B  3C                 	db	60
   256  00FE2C  4A                 	db	74
   257  00FE2D  49                 	db	73
   258  00FE2E  49                 	db	73
   259  00FE2F  31                 	db	49
   260  00FE30  41                 	db	65
   261  00FE31  21                 	db	33
   262  00FE32  11                 	db	17
   263  00FE33  09                 	db	9
   264  00FE34  07                 	db	7
   265  00FE35  36                 	db	54
   266  00FE36  49                 	db	73
   267  00FE37  49                 	db	73
   268  00FE38  49                 	db	73
   269  00FE39  36                 	db	54
   270  00FE3A  46                 	db	70
   271  00FE3B  49                 	db	73
   272  00FE3C  49                 	db	73
   273  00FE3D  29                 	db	41
   274  00FE3E  1E                 	db	30
   275  00FE3F  00                 	db	0
   276  00FE40  00                 	db	0
   277  00FE41  14                 	db	20
   278  00FE42  00                 	db	0
   279  00FE43  00                 	db	0
   280  00FE44  00                 	db	0
   281  00FE45  40                 	db	64
   282  00FE46  34                 	db	52
   283  00FE47  00                 	db	0
   284  00FE48  00                 	db	0
   285  00FE49  00                 	db	0
   286  00FE4A  08                 	db	8
   287  00FE4B  14                 	db	20
   288  00FE4C  22                 	db	34
   289  00FE4D  41                 	db	65
   290  00FE4E  14                 	db	20
   291  00FE4F  14                 	db	20
   292  00FE50  14                 	db	20
   293  00FE51  14                 	db	20
   294  00FE52  14                 	db	20
   295  00FE53  00                 	db	0
   296  00FE54  41                 	db	65
   297  00FE55  22                 	db	34
   298  00FE56  14                 	db	20
   299  00FE57  08                 	db	8
   300  00FE58  02                 	db	2
   301  00FE59  01                 	db	1
   302  00FE5A  59                 	db	89
   303  00FE5B  09                 	db	9
   304  00FE5C  06                 	db	6
   305  00FE5D  3E                 	db	62
   306  00FE5E  41                 	db	65
   307  00FE5F  5D                 	db	93
   308  00FE60  59                 	db	89
   309  00FE61  4E                 	db	78
   310  00FE62  7C                 	db	124
   311  00FE63  12                 	db	18
   312  00FE64  11                 	db	17
   313  00FE65  12                 	db	18
   314  00FE66  7C                 	db	124
   315  00FE67  7F                 	db	127
   316  00FE68  49                 	db	73
   317  00FE69  49                 	db	73
   318  00FE6A  49                 	db	73
   319  00FE6B  36                 	db	54
   320  00FE6C  3E                 	db	62
   321  00FE6D  41                 	db	65
   322  00FE6E  41                 	db	65
   323  00FE6F  41                 	db	65
   324  00FE70  22                 	db	34
   325  00FE71  7F                 	db	127
   326  00FE72  41                 	db	65
   327  00FE73  41                 	db	65
   328  00FE74  41                 	db	65
   329  00FE75  3E                 	db	62
   330  00FE76  7F                 	db	127
   331  00FE77  49                 	db	73
   332  00FE78  49                 	db	73
   333  00FE79  49                 	db	73
   334  00FE7A  41                 	db	65
   335  00FE7B  7F                 	db	127
   336  00FE7C  09                 	db	9
   337  00FE7D  09                 	db	9
   338  00FE7E  09                 	db	9
   339  00FE7F  01                 	db	1
   340  00FE80  3E                 	db	62
   341  00FE81  41                 	db	65
   342  00FE82  41                 	db	65
   343  00FE83  51                 	db	81
   344  00FE84  73                 	db	115
   345  00FE85  7F                 	db	127
   346  00FE86  08                 	db	8
   347  00FE87  08                 	db	8
   348  00FE88  08                 	db	8
   349  00FE89  7F                 	db	127
   350  00FE8A  00                 	db	0
   351  00FE8B  41                 	db	65
   352  00FE8C  7F                 	db	127
   353  00FE8D  41                 	db	65
   354  00FE8E  00                 	db	0
   355  00FE8F  20                 	db	32
   356  00FE90  40                 	db	64
   357  00FE91  41                 	db	65
   358  00FE92  3F                 	db	63
   359  00FE93  01                 	db	1
   360  00FE94  7F                 	db	127
   361  00FE95  08                 	db	8
   362  00FE96  14                 	db	20
   363  00FE97  22                 	db	34
   364  00FE98  41                 	db	65
   365  00FE99  7F                 	db	127
   366  00FE9A  40                 	db	64
   367  00FE9B  40                 	db	64
   368  00FE9C  40                 	db	64
   369  00FE9D  40                 	db	64
   370  00FE9E  7F                 	db	127
   371  00FE9F  02                 	db	2
   372  00FEA0  1C                 	db	28
   373  00FEA1  02                 	db	2
   374  00FEA2  7F                 	db	127
   375  00FEA3  7F                 	db	127
   376  00FEA4  04                 	db	4
   377  00FEA5  08                 	db	8
   378  00FEA6  10                 	db	16
   379  00FEA7  7F                 	db	127
   380  00FEA8  3E                 	db	62
   381  00FEA9  41                 	db	65
   382  00FEAA  41                 	db	65
   383  00FEAB  41                 	db	65
   384  00FEAC  3E                 	db	62
   385  00FEAD  7F                 	db	127
   386  00FEAE  09                 	db	9
   387  00FEAF  09                 	db	9
   388  00FEB0  09                 	db	9
   389  00FEB1  06                 	db	6
   390  00FEB2  3E                 	db	62
   391  00FEB3  41                 	db	65
   392  00FEB4  51                 	db	81
   393  00FEB5  21                 	db	33
   394  00FEB6  5E                 	db	94
   395  00FEB7  7F                 	db	127
   396  00FEB8  09                 	db	9
   397  00FEB9  19                 	db	25
   398  00FEBA  29                 	db	41
   399  00FEBB  46                 	db	70
   400  00FEBC                     __end_of_font:
   401                           	opt stack 0
   402  00FEBC                     _font2:
   403                           	opt stack 0
   404  00FEBC  26                 	db	38
   405  00FEBD  49                 	db	73
   406  00FEBE  49                 	db	73
   407  00FEBF  49                 	db	73
   408  00FEC0  32                 	db	50
   409  00FEC1  03                 	db	3
   410  00FEC2  01                 	db	1
   411  00FEC3  7F                 	db	127
   412  00FEC4  01                 	db	1
   413  00FEC5  03                 	db	3
   414  00FEC6  3F                 	db	63
   415  00FEC7  40                 	db	64
   416  00FEC8  40                 	db	64
   417  00FEC9  40                 	db	64
   418  00FECA  3F                 	db	63
   419  00FECB  1F                 	db	31
   420  00FECC  20                 	db	32
   421  00FECD  40                 	db	64
   422  00FECE  20                 	db	32
   423  00FECF  1F                 	db	31
   424  00FED0  3F                 	db	63
   425  00FED1  40                 	db	64
   426  00FED2  38                 	db	56
   427  00FED3  40                 	db	64
   428  00FED4  3F                 	db	63
   429  00FED5  63                 	db	99
   430  00FED6  14                 	db	20
   431  00FED7  08                 	db	8
   432  00FED8  14                 	db	20
   433  00FED9  63                 	db	99
   434  00FEDA  03                 	db	3
   435  00FEDB  04                 	db	4
   436  00FEDC  78                 	db	120
   437  00FEDD  04                 	db	4
   438  00FEDE  03                 	db	3
   439  00FEDF  61                 	db	97
   440  00FEE0  59                 	db	89
   441  00FEE1  49                 	db	73
   442  00FEE2  4D                 	db	77
   443  00FEE3  43                 	db	67
   444  00FEE4  00                 	db	0
   445  00FEE5  7F                 	db	127
   446  00FEE6  41                 	db	65
   447  00FEE7  41                 	db	65
   448  00FEE8  41                 	db	65
   449  00FEE9  02                 	db	2
   450  00FEEA  04                 	db	4
   451  00FEEB  08                 	db	8
   452  00FEEC  10                 	db	16
   453  00FEED  20                 	db	32
   454  00FEEE  00                 	db	0
   455  00FEEF  41                 	db	65
   456  00FEF0  41                 	db	65
   457  00FEF1  41                 	db	65
   458  00FEF2  7F                 	db	127
   459  00FEF3  04                 	db	4
   460  00FEF4  02                 	db	2
   461  00FEF5  01                 	db	1
   462  00FEF6  02                 	db	2
   463  00FEF7  04                 	db	4
   464  00FEF8  40                 	db	64
   465  00FEF9  40                 	db	64
   466  00FEFA  40                 	db	64
   467  00FEFB  40                 	db	64
   468  00FEFC  40                 	db	64
   469  00FEFD  00                 	db	0
   470  00FEFE  03                 	db	3
   471  00FEFF  07                 	db	7
   472  00FF00  08                 	db	8
   473  00FF01  00                 	db	0
   474  00FF02  20                 	db	32
   475  00FF03  54                 	db	84
   476  00FF04  54                 	db	84
   477  00FF05  78                 	db	120
   478  00FF06  40                 	db	64
   479  00FF07  7F                 	db	127
   480  00FF08  28                 	db	40
   481  00FF09  44                 	db	68
   482  00FF0A  44                 	db	68
   483  00FF0B  38                 	db	56
   484  00FF0C  38                 	db	56
   485  00FF0D  44                 	db	68
   486  00FF0E  44                 	db	68
   487  00FF0F  44                 	db	68
   488  00FF10  28                 	db	40
   489  00FF11  38                 	db	56
   490  00FF12  44                 	db	68
   491  00FF13  44                 	db	68
   492  00FF14  28                 	db	40
   493  00FF15  7F                 	db	127
   494  00FF16  38                 	db	56
   495  00FF17  54                 	db	84
   496  00FF18  54                 	db	84
   497  00FF19  54                 	db	84
   498  00FF1A  18                 	db	24
   499  00FF1B  00                 	db	0
   500  00FF1C  08                 	db	8
   501  00FF1D  7E                 	db	126
   502  00FF1E  09                 	db	9
   503  00FF1F  02                 	db	2
   504  00FF20  18                 	db	24
   505  00FF21  A4                 	db	164
   506  00FF22  A4                 	db	164
   507  00FF23  9C                 	db	156
   508  00FF24  78                 	db	120
   509  00FF25  7F                 	db	127
   510  00FF26  08                 	db	8
   511  00FF27  04                 	db	4
   512  00FF28  04                 	db	4
   513  00FF29  78                 	db	120
   514  00FF2A  00                 	db	0
   515  00FF2B  44                 	db	68
   516  00FF2C  7D                 	db	125
   517  00FF2D  40                 	db	64
   518  00FF2E  00                 	db	0
   519  00FF2F  20                 	db	32
   520  00FF30  40                 	db	64
   521  00FF31  40                 	db	64
   522  00FF32  3D                 	db	61
   523  00FF33  00                 	db	0
   524  00FF34  7F                 	db	127
   525  00FF35  10                 	db	16
   526  00FF36  28                 	db	40
   527  00FF37  44                 	db	68
   528  00FF38  00                 	db	0
   529  00FF39  00                 	db	0
   530  00FF3A  41                 	db	65
   531  00FF3B  7F                 	db	127
   532  00FF3C  40                 	db	64
   533  00FF3D  00                 	db	0
   534  00FF3E  7C                 	db	124
   535  00FF3F  04                 	db	4
   536  00FF40  78                 	db	120
   537  00FF41  04                 	db	4
   538  00FF42  78                 	db	120
   539  00FF43  7C                 	db	124
   540  00FF44  08                 	db	8
   541  00FF45  04                 	db	4
   542  00FF46  04                 	db	4
   543  00FF47  78                 	db	120
   544  00FF48  38                 	db	56
   545  00FF49  44                 	db	68
   546  00FF4A  44                 	db	68
   547  00FF4B  44                 	db	68
   548  00FF4C  38                 	db	56
   549  00FF4D  FC                 	db	252
   550  00FF4E  18                 	db	24
   551  00FF4F  24                 	db	36
   552  00FF50  24                 	db	36
   553  00FF51  18                 	db	24
   554  00FF52  18                 	db	24
   555  00FF53  24                 	db	36
   556  00FF54  24                 	db	36
   557  00FF55  18                 	db	24
   558  00FF56  FC                 	db	252
   559  00FF57  7C                 	db	124
   560  00FF58  08                 	db	8
   561  00FF59  04                 	db	4
   562  00FF5A  04                 	db	4
   563  00FF5B  08                 	db	8
   564  00FF5C  48                 	db	72
   565  00FF5D  54                 	db	84
   566  00FF5E  54                 	db	84
   567  00FF5F  54                 	db	84
   568  00FF60  24                 	db	36
   569  00FF61  04                 	db	4
   570  00FF62  04                 	db	4
   571  00FF63  3F                 	db	63
   572  00FF64  44                 	db	68
   573  00FF65  24                 	db	36
   574  00FF66  3C                 	db	60
   575  00FF67  40                 	db	64
   576  00FF68  40                 	db	64
   577  00FF69  20                 	db	32
   578  00FF6A  7C                 	db	124
   579  00FF6B  1C                 	db	28
   580  00FF6C  20                 	db	32
   581  00FF6D  40                 	db	64
   582  00FF6E  20                 	db	32
   583  00FF6F  1C                 	db	28
   584  00FF70  3C                 	db	60
   585  00FF71  40                 	db	64
   586  00FF72  30                 	db	48
   587  00FF73  40                 	db	64
   588  00FF74  3C                 	db	60
   589  00FF75  44                 	db	68
   590  00FF76  28                 	db	40
   591  00FF77  10                 	db	16
   592  00FF78  28                 	db	40
   593  00FF79  44                 	db	68
   594  00FF7A  4C                 	db	76
   595  00FF7B  90                 	db	144
   596  00FF7C  90                 	db	144
   597  00FF7D  90                 	db	144
   598  00FF7E  7C                 	db	124
   599  00FF7F  44                 	db	68
   600  00FF80  64                 	db	100
   601  00FF81  54                 	db	84
   602  00FF82  4C                 	db	76
   603  00FF83  44                 	db	68
   604  00FF84  00                 	db	0
   605  00FF85  08                 	db	8
   606  00FF86  36                 	db	54
   607  00FF87  41                 	db	65
   608  00FF88  00                 	db	0
   609  00FF89  00                 	db	0
   610  00FF8A  00                 	db	0
   611  00FF8B  77                 	db	119
   612  00FF8C  00                 	db	0
   613  00FF8D  00                 	db	0
   614  00FF8E  00                 	db	0
   615  00FF8F  41                 	db	65
   616  00FF90  36                 	db	54
   617  00FF91  08                 	db	8
   618  00FF92  00                 	db	0
   619  00FF93  02                 	db	2
   620  00FF94  01                 	db	1
   621  00FF95  02                 	db	2
   622  00FF96  04                 	db	4
   623  00FF97  02                 	db	2
   624  00FF98                     __end_of_font2:
   625                           	opt stack 0
   626  0000                     _ADCON0	set	4034
   627  0000                     _ADCON0bits	set	4034
   628  0000                     _ADCON1	set	4033
   629  0000                     _ADCON2	set	4032
   630  0000                     _ADRESH	set	4036
   631  0000                     _ADRESL	set	4035
   632  0000                     _CCP2CON	set	4026
   633  0000                     _CCPR2L	set	4027
   634  0000                     _INTCONbits	set	4082
   635  0000                     _OSCCON	set	4051
   636  0000                     _PIE1bits	set	3997
   637  0000                     _PIR1bits	set	3998
   638  0000                     _PIR2bits	set	4001
   639  0000                     _PORTAbits	set	3968
   640  0000                     _PORTBbits	set	3969
   641  0000                     _PORTCbits	set	3970
   642  0000                     _PORTDbits	set	3971
   643  0000                     _PORTEbits	set	3972
   644  0000                     _PR2	set	4043
   645  0000                     _RCSTA	set	4011
   646  0000                     _RCSTAbits	set	4011
   647  0000                     _SPBRG	set	4015
   648  0000                     _SPBRGH	set	4016
   649  0000                     _SSPBUF	set	4041
   650  0000                     _SSPCON1	set	4038
   651  0000                     _SSPSTAT	set	4039
   652  0000                     _SSPSTATbits	set	4039
   653  0000                     _T0CON	set	4053
   654  0000                     _T0CONbits	set	4053
   655  0000                     _T2CON	set	4042
   656  0000                     _T3CON	set	4017
   657  0000                     _T3CONbits	set	4017
   658  0000                     _TMR0H	set	4055
   659  0000                     _TMR0L	set	4054
   660  0000                     _TRISA	set	3986
   661  0000                     _TRISB	set	3987
   662  0000                     _TRISC	set	3988
   663  0000                     _TRISCbits	set	3988
   664  0000                     _TRISD	set	3989
   665  0000                     _TRISE	set	3990
   666  0000                     _TXREG	set	4013
   667  0000                     _TXSTA	set	4012
   668  0000                     _TXSTAbits	set	4012
   669  0000                     _TRMT	set	32097
   670  00FF98                     STR_12:
   671  00FF98  4E                 	db	78	;'N'
   672  00FF99  53                 	db	83	;'S'
   673  00FF9A  50                 	db	80	;'P'
   674  00FF9B  20                 	db	32
   675  00FF9C  4E                 	db	78	;'N'
   676  00FF9D  53                 	db	83	;'S'
   677  00FF9E  4C                 	db	76	;'L'
   678  00FF9F  54                 	db	84	;'T'
   679  00FFA0  20                 	db	32
   680  00FFA1  45                 	db	69	;'E'
   681  00FFA2  57                 	db	87	;'W'
   682  00FFA3  50                 	db	80	;'P'
   683  00FFA4  20                 	db	32
   684  00FFA5  45                 	db	69	;'E'
   685  00FFA6  57                 	db	87	;'W'
   686  00FFA7  4C                 	db	76	;'L'
   687  00FFA8  54                 	db	84	;'T'
   688  00FFA9  20                 	db	32
   689  00FFAA  4D                 	db	77	;'M'
   690  00FFAB  52                 	db	82	;'R'
   691  00FFAC  00                 	db	0
   692  00FFAD                     STR_1:
   693  00FFAD  45                 	db	69	;'E'
   694  00FFAE  43                 	db	67	;'C'
   695  00FFAF  45                 	db	69	;'E'
   696  00FFB0  33                 	db	51	;'3'
   697  00FFB1  33                 	db	51	;'3'
   698  00FFB2  30                 	db	48	;'0'
   699  00FFB3  31                 	db	49	;'1'
   700  00FFB4  4C                 	db	76	;'L'
   701  00FFB5  20                 	db	32
   702  00FFB6  46                 	db	70	;'F'
   703  00FFB7  61                 	db	97	;'a'
   704  00FFB8  6C                 	db	108	;'l'
   705  00FFB9  6C                 	db	108	;'l'
   706  00FFBA  20                 	db	32
   707  00FFBB  32                 	db	50	;'2'
   708  00FFBC  31                 	db	49	;'1'
   709  00FFBD  2D                 	db	45
   710  00FFBE  53                 	db	83	;'S'
   711  00FFBF  33                 	db	51	;'3'
   712  00FFC0  00                 	db	0
   713  00FFC1                     STR_6:
   714  00FFC1  4E                 	db	78	;'N'
   715  00FFC2  4F                 	db	79	;'O'
   716  00FFC3  52                 	db	82	;'R'
   717  00FFC4  54                 	db	84	;'T'
   718  00FFC5  48                 	db	72	;'H'
   719  00FFC6  2F                 	db	47
   720  00FFC7  53                 	db	83	;'S'
   721  00FFC8  4F                 	db	79	;'O'
   722  00FFC9  55                 	db	85	;'U'
   723  00FFCA  54                 	db	84	;'T'
   724  00FFCB  48                 	db	72	;'H'
   725  00FFCC  00                 	db	0
   726  00FFCD                     STR_8:
   727  00FFCD  45                 	db	69	;'E'
   728  00FFCE  41                 	db	65	;'A'
   729  00FFCF  53                 	db	83	;'S'
   730  00FFD0  54                 	db	84	;'T'
   731  00FFD1  2F                 	db	47
   732  00FFD2  57                 	db	87	;'W'
   733  00FFD3  45                 	db	69	;'E'
   734  00FFD4  53                 	db	83	;'S'
   735  00FFD5  54                 	db	84	;'T'
   736  00FFD6  00                 	db	0
   737  00FFD7                     STR_7:
   738  00FFD7  4E                 	db	78	;'N'
   739  00FFD8  2F                 	db	47
   740  00FFD9  53                 	db	83	;'S'
   741  00FFDA  20                 	db	32
   742  00FFDB  4C                 	db	76	;'L'
   743  00FFDC  54                 	db	84	;'T'
   744  00FFDD  00                 	db	0
   745  00FFDE                     STR_9:
   746  00FFDE  45                 	db	69	;'E'
   747  00FFDF  2F                 	db	47
   748  00FFE0  57                 	db	87	;'W'
   749  00FFE1  20                 	db	32
   750  00FFE2  4C                 	db	76	;'L'
   751  00FFE3  54                 	db	84	;'T'
   752  00FFE4  00                 	db	0
   753  00FFE5                     STR_2:
   754  00FFE5  4D                 	db	77	;'M'
   755  00FFE6  6F                 	db	111	;'o'
   756  00FFE7  64                 	db	100	;'d'
   757  00FFE8  65                 	db	101	;'e'
   758  00FFE9  3A                 	db	58	;':'
   759  00FFEA  00                 	db	0
   760  00FFEB                     STR_3:
   761  00FFEB  46                 	db	70	;'F'
   762  00FFEC  52                 	db	82	;'R'
   763  00FFED  3A                 	db	58	;':'
   764  00FFEE  00                 	db	0
   765  00FFEF                     STR_4:
   766  00FFEF  46                 	db	70	;'F'
   767  00FFF0  53                 	db	83	;'S'
   768  00FFF1  3A                 	db	58	;':'
   769  00FFF2  00                 	db	0
   770  00FFF3                     STR_10:
   771  00FFF3  50                 	db	80	;'P'
   772  00FFF4  4E                 	db	78	;'N'
   773  00FFF5  53                 	db	83	;'S'
   774  00FFF6  00                 	db	0
   775  00FFF7                     STR_11:
   776  00FFF7  50                 	db	80	;'P'
   777  00FFF8  45                 	db	69	;'E'
   778  00FFF9  57                 	db	87	;'W'
   779  00FFFA  00                 	db	0
   780  00FFFB                     STR_14:
   781  00FFFB  20                 	db	32
   782  00FFFC  00                 	db	0
   783  00FFFD                     STR_5:
   784  00FFFD  2A                 	db	42
   785  00FFFE  00                 	db	0
   786  0000                     
   787                           ; #config settings
   788  00FFFF  00                 	db	0	; dummy byte at the end
   789  0000                     
   790                           	psect	cinit
   791  00DC26                     __pcinit:
   792                           	opt stack 0
   793  00DC26                     start_initialization:
   794                           	opt stack 0
   795  00DC26                     __initialization:
   796                           	opt stack 0
   797                           
   798                           ; Clear objects allocated to BANK0 (31 bytes)
   799  00DC26  EE00  F080         	lfsr	0,__pbssBANK0
   800  00DC2A  0E1F               	movlw	31
   801  00DC2C                     clear_0:
   802  00DC2C  6AEE               	clrf	postinc0,c
   803  00DC2E  06E8               	decf	wreg,f,c
   804  00DC30  E1FD               	bnz	clear_0
   805                           
   806                           ; Clear objects allocated to COMRAM (23 bytes)
   807  00DC32  EE00  F065         	lfsr	0,__pbssCOMRAM
   808  00DC36  0E17               	movlw	23
   809  00DC38                     clear_1:
   810  00DC38  6AEE               	clrf	postinc0,c
   811  00DC3A  06E8               	decf	wreg,f,c
   812  00DC3C  E1FD               	bnz	clear_1
   813                           
   814                           ; Initialize objects allocated to COMRAM (35 bytes)
   815                           ; load TBLPTR registers with __pidataCOMRAM
   816  00DC3E  0E43               	movlw	low __pidataCOMRAM
   817  00DC40  6EF6               	movwf	tblptrl,c
   818  00DC42  0EDA               	movlw	high __pidataCOMRAM
   819  00DC44  6EF7               	movwf	tblptrh,c
   820  00DC46  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   821  00DC48  6EF8               	movwf	tblptru,c
   822  00DC4A  EE00  F042         	lfsr	0,__pdataCOMRAM
   823  00DC4E  EE10 F023          	lfsr	1,35
   824  00DC52                     copy_data0:
   825  00DC52  0009               	tblrd		*+
   826  00DC54  CFF5 FFEE          	movff	tablat,postinc0
   827  00DC58  50E5               	movf	postdec1,w,c
   828  00DC5A  50E1               	movf	fsr1l,w,c
   829  00DC5C  E1FA               	bnz	copy_data0
   830  00DC5E                     end_of_initialization:
   831                           	opt stack 0
   832  00DC5E                     __end_of__initialization:
   833                           	opt stack 0
   834  00DC5E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   835  00DC60  6EF8               	movwf	tblptru,c
   836  00DC62  0100               	movlb	0
   837  00DC64  EFF3  F071         	goto	_main	;jump to C main() function
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1l	equ	0xFE1
   846                           
   847                           	psect	bssCOMRAM
   848  000065                     __pbssCOMRAM:
   849                           	opt stack 0
   850  000065                     _volt:
   851                           	opt stack 0
   852  000065                     	ds	3
   853  000068                     _MODE:
   854                           	opt stack 0
   855  000068                     	ds	2
   856  00006A                     _nbr:
   857                           	opt stack 0
   858  00006A                     	ds	2
   859  00006C                     _txt:
   860                           	opt stack 0
   861  00006C                     	ds	2
   862  00006E                     _Count:
   863                           	opt stack 0
   864  00006E                     	ds	1
   865  00006F                     _FLASHING:
   866                           	opt stack 0
   867  00006F                     	ds	1
   868  000070                     _FLASHING_REQUEST:
   869                           	opt stack 0
   870  000070                     	ds	1
   871  000071                     _PED_Count:
   872                           	opt stack 0
   873  000071                     	ds	1
   874  000072                     _SW_EWLT:
   875                           	opt stack 0
   876  000072                     	ds	1
   877  000073                     _SW_EWPED:
   878                           	opt stack 0
   879  000073                     	ds	1
   880  000074                     _SW_MODE:
   881                           	opt stack 0
   882  000074                     	ds	1
   883  000075                     _SW_NSLT:
   884                           	opt stack 0
   885  000075                     	ds	1
   886  000076                     _SW_NSPED:
   887                           	opt stack 0
   888  000076                     	ds	1
   889  000077                     __tft_type:
   890                           	opt stack 0
   891  000077                     	ds	1
   892  000078                     _colstart:
   893                           	opt stack 0
   894  000078                     	ds	1
   895  000079                     _dir:
   896                           	opt stack 0
   897  000079                     	ds	1
   898  00007A                     _direction:
   899                           	opt stack 0
   900  00007A                     	ds	1
   901  00007B                     _rowstart:
   902                           	opt stack 0
   903  00007B                     	ds	1
   904                           tblptru	equ	0xFF8
   905                           tblptrh	equ	0xFF7
   906                           tblptrl	equ	0xFF6
   907                           tablat	equ	0xFF5
   908                           postinc0	equ	0xFEE
   909                           wreg	equ	0xFE8
   910                           postdec1	equ	0xFE5
   911                           fsr1l	equ	0xFE1
   912                           
   913                           	psect	dataCOMRAM
   914  000042                     __pdataCOMRAM:
   915                           	opt stack 0
   916  000042                     _wrap:
   917                           	opt stack 0
   918  000042                     	ds	1
   919  000043                     _EWLT_Count:
   920                           	opt stack 0
   921  000043                     	ds	3
   922  000046                     _EW_Count:
   923                           	opt stack 0
   924  000046                     	ds	3
   925  000049                     _NSLT_Count:
   926                           	opt stack 0
   927  000049                     	ds	3
   928  00004C                     _NS_Count:
   929                           	opt stack 0
   930  00004C                     	ds	3
   931  00004F                     _PED_EW_Count:
   932                           	opt stack 0
   933  00004F                     	ds	3
   934  000052                     _PED_NS_Count:
   935                           	opt stack 0
   936  000052                     	ds	3
   937  000055                     _Act_Mode_Txt:
   938                           	opt stack 0
   939  000055                     	ds	2
   940  000057                     _FlashingR_Txt:
   941                           	opt stack 0
   942  000057                     	ds	2
   943  000059                     _FlashingS_Txt:
   944                           	opt stack 0
   945  000059                     	ds	2
   946  00005B                     _SW_EWLT_Txt:
   947                           	opt stack 0
   948  00005B                     	ds	2
   949  00005D                     _SW_EWPED_Txt:
   950                           	opt stack 0
   951  00005D                     	ds	2
   952  00005F                     _SW_MODE_Txt:
   953                           	opt stack 0
   954  00005F                     	ds	2
   955  000061                     _SW_NSLT_Txt:
   956                           	opt stack 0
   957  000061                     	ds	2
   958  000063                     _SW_NSPED_Txt:
   959                           	opt stack 0
   960  000063                     	ds	2
   961                           tblptru	equ	0xFF8
   962                           tblptrh	equ	0xFF7
   963                           tblptrl	equ	0xFF6
   964                           tablat	equ	0xFF5
   965                           postinc0	equ	0xFEE
   966                           wreg	equ	0xFE8
   967                           postdec1	equ	0xFE5
   968                           fsr1l	equ	0xFE1
   969                           
   970                           	psect	bssBANK0
   971  000080                     __pbssBANK0:
   972                           	opt stack 0
   973  000080                     _buffer:
   974                           	opt stack 0
   975  000080                     	ds	31
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           postinc0	equ	0xFEE
   981                           wreg	equ	0xFE8
   982                           postdec1	equ	0xFE5
   983                           fsr1l	equ	0xFE1
   984                           
   985                           	psect	cstackCOMRAM
   986  000001                     __pcstackCOMRAM:
   987                           	opt stack 0
   988  000001                     ?_strlen:
   989                           	opt stack 0
   990  000001                     ?_get_full_ADC:
   991                           	opt stack 0
   992  000001                     ?___wmul:
   993                           	opt stack 0
   994  000001                     ?___awdiv:
   995                           	opt stack 0
   996  000001                     ?___awmod:
   997                           	opt stack 0
   998  000001                     ?___ftpack:
   999                           	opt stack 0
  1000  000001                     spiwrite@x:
  1001                           	opt stack 0
  1002  000001                     OpenUSART@spbrg:
  1003                           	opt stack 0
  1004  000001                     ___wmul@multiplier:
  1005                           	opt stack 0
  1006  000001                     ___awdiv@dividend:
  1007                           	opt stack 0
  1008  000001                     ___awmod@dividend:
  1009                           	opt stack 0
  1010  000001                     strcpy@to:
  1011                           	opt stack 0
  1012  000001                     strlen@s:
  1013                           	opt stack 0
  1014  000001                     ___ftpack@arg:
  1015                           	opt stack 0
  1016  000001                     ___ftge@ff1:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x0
  1020  000001                     	ds	1
  1021  000002                     spiwrite@spidata:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x1
  1025  000002                     	ds	1
  1026  000003                     ??_strlen:
  1027  000003                     ??_get_full_ADC:
  1028  000003                     write_command@cmd_:
  1029                           	opt stack 0
  1030  000003                     write_data@data_:
  1031                           	opt stack 0
  1032  000003                     OpenUSART@config:
  1033                           	opt stack 0
  1034  000003                     ___wmul@multiplicand:
  1035                           	opt stack 0
  1036  000003                     ___awdiv@divisor:
  1037                           	opt stack 0
  1038  000003                     ___awmod@divisor:
  1039                           	opt stack 0
  1040  000003                     strcpy@from:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x2
  1044  000003                     	ds	1
  1045  000004                     setAddrWindow@y0:
  1046                           	opt stack 0
  1047  000004                     ___ftpack@exp:
  1048                           	opt stack 0
  1049  000004                     ___ftge@ff2:
  1050                           	opt stack 0
  1051                           
  1052                           ; 3 bytes @ 0x3
  1053  000004                     	ds	1
  1054  000005                     setAddrWindow@x1:
  1055                           	opt stack 0
  1056  000005                     ___awdiv@counter:
  1057                           	opt stack 0
  1058  000005                     ___awmod@counter:
  1059                           	opt stack 0
  1060  000005                     ___ftpack@sign:
  1061                           	opt stack 0
  1062  000005                     get_full_ADC@result:
  1063                           	opt stack 0
  1064  000005                     ___wmul@product:
  1065                           	opt stack 0
  1066  000005                     strcpy@cp:
  1067                           	opt stack 0
  1068  000005                     strlen@cp:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x4
  1072  000005                     	ds	1
  1073  000006                     ??___ftpack:
  1074  000006                     setAddrWindow@y1:
  1075                           	opt stack 0
  1076  000006                     ___awdiv@sign:
  1077                           	opt stack 0
  1078  000006                     ___awmod@sign:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x5
  1082  000006                     	ds	1
  1083  000007                     ??___ftge:
  1084  000007                     setAddrWindow@x0:
  1085                           	opt stack 0
  1086  000007                     delay_ms@ms:
  1087                           	opt stack 0
  1088  000007                     ___awdiv@quotient:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x6
  1092  000007                     	ds	1
  1093  000008                     drawPixel@y:
  1094                           	opt stack 0
  1095  000008                     drawFastVLine@y:
  1096                           	opt stack 0
  1097  000008                     fillRectangle@y:
  1098                           	opt stack 0
  1099  000008                     drawFastHLine@y:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x7
  1103  000008                     	ds	1
  1104  000009                     ??_delay_ms:
  1105  000009                     ?___awtoft:
  1106                           	opt stack 0
  1107  000009                     drawFastVLine@h:
  1108                           	opt stack 0
  1109  000009                     fillRectangle@w:
  1110                           	opt stack 0
  1111  000009                     drawFastHLine@w:
  1112                           	opt stack 0
  1113  000009                     drawPixel@color:
  1114                           	opt stack 0
  1115  000009                     ___awtoft@c:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x8
  1119  000009                     	ds	1
  1120  00000A                     fillRectangle@h:
  1121                           	opt stack 0
  1122  00000A                     drawFastVLine@color:
  1123                           	opt stack 0
  1124  00000A                     drawFastHLine@color:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x9
  1128  00000A                     	ds	1
  1129  00000B                     drawPixel@x:
  1130                           	opt stack 0
  1131  00000B                     delay_ms@count:
  1132                           	opt stack 0
  1133  00000B                     fillRectangle@color:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0xA
  1137  00000B                     	ds	1
  1138  00000C                     ??_drawFastVLine:
  1139  00000C                     ??_drawFastHLine:
  1140  00000C                     ___awtoft@sign:
  1141                           	opt stack 0
  1142  00000C                     drawCircle@x0:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0xB
  1146  00000C                     	ds	1
  1147  00000D                     ??_fillRectangle:
  1148  00000D                     ?___ftdiv:
  1149                           	opt stack 0
  1150  00000D                     ___ftdiv@f1:
  1151                           	opt stack 0
  1152                           
  1153                           ; 3 bytes @ 0xC
  1154  00000D                     	ds	1
  1155  00000E                     drawCircle@y0:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0xD
  1159  00000E                     	ds	2
  1160  000010                     drawFastVLine@hi:
  1161                           	opt stack 0
  1162  000010                     drawFastHLine@hi:
  1163                           	opt stack 0
  1164  000010                     drawCircle@r:
  1165                           	opt stack 0
  1166  000010                     ___ftdiv@f2:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0xF
  1170  000010                     	ds	1
  1171  000011                     drawFastVLine@lo:
  1172                           	opt stack 0
  1173  000011                     fillRectangle@hi:
  1174                           	opt stack 0
  1175  000011                     drawFastHLine@lo:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x10
  1179  000011                     	ds	1
  1180  000012                     drawFastVLine@x:
  1181                           	opt stack 0
  1182  000012                     fillRectangle@lo:
  1183                           	opt stack 0
  1184  000012                     drawFastHLine@x:
  1185                           	opt stack 0
  1186  000012                     drawCircle@color:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x11
  1190  000012                     	ds	1
  1191  000013                     ??___ftdiv:
  1192  000013                     fillRect@y:
  1193                           	opt stack 0
  1194  000013                     fillRectangle@x:
  1195                           	opt stack 0
  1196  000013                     fillCircleHelper@x0:
  1197                           	opt stack 0
  1198  000013                     drawRect@x:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x12
  1202  000013                     	ds	1
  1203  000014                     ??_drawCircle:
  1204  000014                     fillRect@w:
  1205                           	opt stack 0
  1206  000014                     fillScreen@color:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x13
  1210  000014                     	ds	1
  1211  000015                     fillRect@h:
  1212                           	opt stack 0
  1213  000015                     fillCircleHelper@y0:
  1214                           	opt stack 0
  1215  000015                     drawRect@y:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x14
  1219  000015                     	ds	1
  1220  000016                     ___ftdiv@cntr:
  1221                           	opt stack 0
  1222  000016                     fillRect@color:
  1223                           	opt stack 0
  1224  000016                     drawCircle@ddF_x:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x15
  1228  000016                     	ds	1
  1229  000017                     fillCircleHelper@r:
  1230                           	opt stack 0
  1231  000017                     drawRect@w:
  1232                           	opt stack 0
  1233  000017                     ___ftdiv@f3:
  1234                           	opt stack 0
  1235                           
  1236                           ; 3 bytes @ 0x16
  1237  000017                     	ds	1
  1238  000018                     ??_fillRect:
  1239  000018                     drawCircle@ddF_y:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x17
  1243  000018                     	ds	1
  1244  000019                     fillCircleHelper@cornername:
  1245                           	opt stack 0
  1246  000019                     drawRect@h:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x18
  1250  000019                     	ds	1
  1251  00001A                     ___ftdiv@exp:
  1252                           	opt stack 0
  1253  00001A                     drawCircle@f:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x19
  1257  00001A                     	ds	1
  1258  00001B                     fillRect@x:
  1259                           	opt stack 0
  1260  00001B                     ___ftdiv@sign:
  1261                           	opt stack 0
  1262  00001B                     fillCircleHelper@delta:
  1263                           	opt stack 0
  1264  00001B                     drawRect@color:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x1A
  1268  00001B                     	ds	1
  1269  00001C                     fillRect@i:
  1270                           	opt stack 0
  1271  00001C                     drawCircle@x:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x1B
  1275  00001C                     	ds	1
  1276  00001D                     ??_drawRect:
  1277  00001D                     fillCircleHelper@color:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x1C
  1281  00001D                     	ds	1
  1282  00001E                     drawChar@y:
  1283                           	opt stack 0
  1284  00001E                     drawCircle@y:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x1D
  1288  00001E                     	ds	1
  1289  00001F                     ??_fillCircleHelper:
  1290  00001F                     drawChar@c:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x1E
  1294  00001F                     	ds	1
  1295  000020                     drawChar@color:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x1F
  1299  000020                     	ds	1
  1300  000021                     fillCircleHelper@ddF_x:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x20
  1304  000021                     	ds	1
  1305  000022                     drawChar@bg:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x21
  1309  000022                     	ds	1
  1310  000023                     fillCircleHelper@ddF_y:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x22
  1314  000023                     	ds	1
  1315  000024                     drawChar@size:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x23
  1319  000024                     	ds	1
  1320  000025                     drawChar@line:
  1321                           	opt stack 0
  1322  000025                     fillCircleHelper@f:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x24
  1326  000025                     	ds	1
  1327  000026                     drawChar@x:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x25
  1331  000026                     	ds	1
  1332  000027                     drawChar@j:
  1333                           	opt stack 0
  1334  000027                     fillCircleHelper@x:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x26
  1338  000027                     	ds	1
  1339  000028                     drawChar@i:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x27
  1343  000028                     	ds	1
  1344  000029                     drawtext@y:
  1345                           	opt stack 0
  1346  000029                     fillCircleHelper@y:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x28
  1350  000029                     	ds	1
  1351  00002A                     drawtext@_text:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x29
  1355  00002A                     	ds	1
  1356  00002B                     fillCircle@x0:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x2A
  1360  00002B                     	ds	1
  1361  00002C                     drawtext@color:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x2B
  1365  00002C                     	ds	1
  1366  00002D                     fillCircle@y0:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x2C
  1370  00002D                     	ds	1
  1371  00002E                     drawtext@bg:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x2D
  1375  00002E                     	ds	1
  1376  00002F                     fillCircle@r:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x2E
  1380  00002F                     	ds	1
  1381  000030                     drawtext@size:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x2F
  1385  000030                     	ds	1
  1386  000031                     ??_drawtext:
  1387  000031                     fillCircle@color:
  1388                           	opt stack 0
  1389                           
  1390                           ; 2 bytes @ 0x30
  1391  000031                     	ds	2
  1392  000033                     update_LCD_color@color:
  1393                           	opt stack 0
  1394  000033                     drawtext@textsize:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x32
  1398  000033                     	ds	1
  1399  000034                     update_LCD_color@direction:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x33
  1403  000034                     	ds	1
  1404  000035                     drawtext@x:
  1405                           	opt stack 0
  1406  000035                     update_LCD_color@Circle_Y:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x34
  1410  000035                     	ds	1
  1411  000036                     Set_NS@color:
  1412                           	opt stack 0
  1413  000036                     Set_NS_LT@color:
  1414                           	opt stack 0
  1415  000036                     Set_EW@color:
  1416                           	opt stack 0
  1417  000036                     Set_EW_LT@color:
  1418                           	opt stack 0
  1419  000036                     drawtext@i:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x35
  1423  000036                     	ds	2
  1424  000038                     drawtext@cursor_y:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x37
  1428  000038                     	ds	1
  1429  000039                     drawtext@cursor_x:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x38
  1433  000039                     	ds	1
  1434  00003A                     update_LCD_count@count:
  1435                           	opt stack 0
  1436  00003A                     update_LCD_PED_Count@count:
  1437                           	opt stack 0
  1438  00003A                     update_LCD_misc@ch:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x39
  1442  00003A                     	ds	1
  1443  00003B                     update_LCD_count@direction:
  1444                           	opt stack 0
  1445  00003B                     update_LCD_PED_Count@direction:
  1446                           	opt stack 0
  1447  00003B                     update_LCD_misc@nStep:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x3A
  1451  00003B                     	ds	1
  1452  00003C                     PED_Control@Num_Sec:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x3B
  1456  00003C                     	ds	1
  1457  00003D                     PED_Control@direction:
  1458                           	opt stack 0
  1459  00003D                     Wait_N_Seconds@seconds:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x3C
  1463  00003D                     	ds	1
  1464  00003E                     PED_Control@i:
  1465                           	opt stack 0
  1466  00003E                     Wait_N_Seconds@I:
  1467                           	opt stack 0
  1468                           
  1469                           ; 1 bytes @ 0x3D
  1470  00003E                     	ds	1
  1471  00003F                     PED_Control@i_1376:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x3E
  1475  00003F                     	ds	1
  1476  000040                     main@nStep:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x3F
  1480  000040                     	ds	2
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1l	equ	0xFE1
  1489                           
  1490 ;;
  1491 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1492 ;;
  1493 ;; *************** function _main *****************
  1494 ;; Defined at:
  1495 ;;		line 269 in file "Lab7_redo.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  nStep           2   63[COMRAM] int 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;		None               void
  1502 ;; Registers used:
  1503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;Total ram usage:        2 bytes
  1514 ;; Hardware stack levels required when called:   11
  1515 ;; This function calls:
  1516 ;;		_Day_Mode
  1517 ;;		_Init_ADC
  1518 ;;		_Initialize_Screen
  1519 ;;		_Night_Mode
  1520 ;;		___awtoft
  1521 ;;		___ftdiv
  1522 ;;		___ftge
  1523 ;;		___wmul
  1524 ;;		_get_full_ADC
  1525 ;;		_init_IO
  1526 ;;		_init_UART
  1527 ;; This function is called by:
  1528 ;;		Startup code after reset
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text0
  1533  00E3E6                     __ptext0:
  1534                           	opt stack 0
  1535  00E3E6                     _main:
  1536                           	opt stack 20
  1537                           
  1538                           ;Lab7_redo.c: 271: init_IO();
  1539                           
  1540                           ;incstack = 0
  1541  00E3E6  ECE7  F06C         	call	_init_IO	;wreg free
  1542                           
  1543                           ;Lab7_redo.c: 272: Init_ADC();
  1544  00E3EA  ECB4  F06C         	call	_Init_ADC	;wreg free
  1545                           
  1546                           ;Lab7_redo.c: 273: init_UART();
  1547  00E3EE  ECF1  F06C         	call	_init_UART	;wreg free
  1548                           
  1549                           ;Lab7_redo.c: 274: OSCCON = 0x70;
  1550  00E3F2  0E70               	movlw	112
  1551  00E3F4  6ED3               	movwf	4051,c	;volatile
  1552                           
  1553                           ;Lab7_redo.c: 275: Initialize_Screen();
  1554  00E3F6  EC4F  F07B         	call	_Initialize_Screen	;wreg free
  1555  00E3FA  D000               	goto	l3955
  1556  00E3FC                     l3955:
  1557                           
  1558                           ;Lab7_redo.c: 280: {
  1559                           ;Lab7_redo.c: 282: int nStep = get_full_ADC();
  1560  00E3FC  EC33  F06D         	call	_get_full_ADC	;wreg free
  1561  00E400  C001  F040         	movff	?_get_full_ADC,main@nStep
  1562  00E404  C002  F041         	movff	?_get_full_ADC+1,main@nStep+1
  1563                           
  1564                           ;Lab7_redo.c: 283: volt = nStep * 5 /1024.0;
  1565  00E408  C040  F001         	movff	main@nStep,___wmul@multiplier
  1566  00E40C  C041  F002         	movff	main@nStep+1,___wmul@multiplier+1
  1567  00E410  0E00               	movlw	0
  1568  00E412  6E04               	movwf	___wmul@multiplicand+1,c
  1569  00E414  0E05               	movlw	5
  1570  00E416  6E03               	movwf	___wmul@multiplicand,c
  1571  00E418  EC46  F06D         	call	___wmul	;wreg free
  1572  00E41C  C001  F009         	movff	?___wmul,___awtoft@c
  1573  00E420  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  1574  00E424  ECB7  F06D         	call	___awtoft	;wreg free
  1575  00E428  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  1576  00E42C  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  1577  00E430  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  1578  00E434  0E00               	movlw	0
  1579  00E436  6E10               	movwf	___ftdiv@f2,c
  1580  00E438  0E80               	movlw	128
  1581  00E43A  6E11               	movwf	___ftdiv@f2+1,c
  1582  00E43C  0E44               	movlw	68
  1583  00E43E  6E12               	movwf	___ftdiv@f2+2,c
  1584  00E440  EC4A  F074         	call	___ftdiv	;wreg free
  1585  00E444  C00D  F065         	movff	?___ftdiv,_volt
  1586  00E448  C00E  F066         	movff	?___ftdiv+1,_volt+1
  1587  00E44C  C00F  F067         	movff	?___ftdiv+2,_volt+2
  1588                           
  1589                           ;Lab7_redo.c: 284: SW_MODE = volt < 2.5 ? 1:0;
  1590  00E450  C065  F001         	movff	_volt,___ftge@ff1
  1591  00E454  C066  F002         	movff	_volt+1,___ftge@ff1+1
  1592  00E458  C067  F003         	movff	_volt+2,___ftge@ff1+2
  1593  00E45C  0E00               	movlw	0
  1594  00E45E  6E04               	movwf	___ftge@ff2,c
  1595  00E460  0E20               	movlw	32
  1596  00E462  6E05               	movwf	___ftge@ff2+1,c
  1597  00E464  0E40               	movlw	64
  1598  00E466  6E06               	movwf	___ftge@ff2+2,c
  1599  00E468  EC55  F071         	call	___ftge	;wreg free
  1600  00E46C  B0D8               	btfsc	status,0,c
  1601  00E46E  D002               	goto	u2600
  1602  00E470  0E01               	movlw	1
  1603  00E472  D001               	goto	u2610
  1604  00E474                     u2600:
  1605  00E474  0E00               	movlw	0
  1606  00E476                     u2610:
  1607  00E476  6E74               	movwf	_SW_MODE,c
  1608                           
  1609                           ;Lab7_redo.c: 285: if (SW_MODE)
  1610  00E478  5074               	movf	_SW_MODE,w,c
  1611  00E47A  B4D8               	btfsc	status,2,c
  1612  00E47C  D003               	goto	l3965
  1613                           
  1614                           ;Lab7_redo.c: 286: {
  1615                           ;Lab7_redo.c: 287: Day_Mode();
  1616  00E47E  EC47  F072         	call	_Day_Mode	;wreg free
  1617                           
  1618                           ;Lab7_redo.c: 288: }
  1619  00E482  D7BC               	goto	l3955
  1620  00E484                     l3965:
  1621                           
  1622                           ;Lab7_redo.c: 289: else
  1623                           ;Lab7_redo.c: 290: {
  1624                           ;Lab7_redo.c: 291: Night_Mode();
  1625  00E484  ECA0  F071         	call	_Night_Mode	;wreg free
  1626  00E488  D7B9               	goto	l3955
  1627  00E48A  EF00  F000         	goto	start
  1628  00E48E                     __end_of_main:
  1629                           	opt stack 0
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1l	equ	0xFE1
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _init_UART *****************
  1641 ;; Defined at:
  1642 ;;		line 255 in file "Lab7_redo.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;		None               void
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        0 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    1
  1663 ;; This function calls:
  1664 ;;		_OpenUSART
  1665 ;; This function is called by:
  1666 ;;		_main
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text1
  1671  00D9E2                     __ptext1:
  1672                           	opt stack 0
  1673  00D9E2                     _init_UART:
  1674                           	opt stack 29
  1675                           
  1676                           ;Lab7_redo.c: 257: OpenUSART (0b01111111 & 0b10111111 &
  1677                           ;Lab7_redo.c: 258: 0b11111110 & 0b11111101 & 0b11111111 &
  1678                           ;Lab7_redo.c: 259: 0b11111111, 25);
  1679                           
  1680                           ;incstack = 0
  1681  00D9E2  0E00               	movlw	0
  1682  00D9E4  6E02               	movwf	OpenUSART@spbrg+1,c
  1683  00D9E6  0E19               	movlw	25
  1684  00D9E8  6E01               	movwf	OpenUSART@spbrg,c
  1685  00D9EA  0E3C               	movlw	60
  1686  00D9EC  EC8D  F06F         	call	_OpenUSART
  1687                           
  1688                           ;Lab7_redo.c: 260: OSCCON = 0x60;
  1689  00D9F0  0E60               	movlw	96
  1690  00D9F2  6ED3               	movwf	4051,c	;volatile
  1691  00D9F4  0012               	return		;funcret
  1692  00D9F6                     __end_of_init_UART:
  1693                           	opt stack 0
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           postinc0	equ	0xFEE
  1699                           wreg	equ	0xFE8
  1700                           postdec1	equ	0xFE5
  1701                           fsr1l	equ	0xFE1
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _OpenUSART *****************
  1705 ;; Defined at:
  1706 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  config          1    wreg     unsigned char 
  1709 ;;  spbrg           2    0[COMRAM] unsigned int 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  config          1    2[COMRAM] unsigned char 
  1712 ;; Return value:  Size  Location     Type
  1713 ;;		None               void
  1714 ;; Registers used:
  1715 ;;		wreg, status,2
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;Total ram usage:        3 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		_init_UART
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text2
  1735  00DF1A                     __ptext2:
  1736                           	opt stack 0
  1737  00DF1A                     _OpenUSART:
  1738                           	opt stack 29
  1739                           
  1740                           ;incstack = 0
  1741                           ;OpenUSART@config stored from wreg
  1742  00DF1A  6E03               	movwf	OpenUSART@config,c
  1743  00DF1C  0E00               	movlw	0
  1744  00DF1E  6EAC               	movwf	4012,c	;volatile
  1745  00DF20  0E00               	movlw	0
  1746  00DF22  6EAB               	movwf	4011,c	;volatile
  1747  00DF24  A003               	btfss	OpenUSART@config,0,c
  1748  00DF26  D002               	goto	l3363
  1749  00DF28  88AC               	bsf	4012,4,c	;volatile
  1750  00DF2A  D000               	goto	l3363
  1751  00DF2C                     l3363:
  1752  00DF2C  A203               	btfss	OpenUSART@config,1,c
  1753  00DF2E  D003               	goto	l3367
  1754  00DF30  8CAC               	bsf	4012,6,c	;volatile
  1755  00DF32  8CAB               	bsf	4011,6,c	;volatile
  1756  00DF34  D000               	goto	l3367
  1757  00DF36                     l3367:
  1758  00DF36  A403               	btfss	OpenUSART@config,2,c
  1759  00DF38  D002               	goto	l3371
  1760  00DF3A  8EAC               	bsf	4012,7,c	;volatile
  1761  00DF3C  D000               	goto	l3371
  1762  00DF3E                     l3371:
  1763  00DF3E  A603               	btfss	OpenUSART@config,3,c
  1764  00DF40  D002               	goto	l522
  1765  00DF42  88AB               	bsf	4011,4,c	;volatile
  1766  00DF44  D002               	goto	l3375
  1767  00DF46                     l522:
  1768  00DF46  8AAB               	bsf	4011,5,c	;volatile
  1769  00DF48  D000               	goto	l3375
  1770  00DF4A                     l3375:
  1771  00DF4A  B803               	btfsc	OpenUSART@config,4,c
  1772  00DF4C  84AC               	bsf	4012,2,c	;volatile
  1773  00DF4E  989E               	bcf	3998,4,c	;volatile
  1774  00DF50  AA03               	btfss	OpenUSART@config,5,c
  1775  00DF52  D002               	goto	l3383
  1776  00DF54  86AB               	bsf	4011,3,c	;volatile
  1777  00DF56  D000               	goto	l3383
  1778  00DF58                     l3383:
  1779  00DF58  AC03               	btfss	OpenUSART@config,6,c
  1780  00DF5A  D002               	goto	l526
  1781  00DF5C  8A9D               	bsf	3997,5,c	;volatile
  1782  00DF5E  D001               	goto	l527
  1783  00DF60                     l526:
  1784  00DF60  9A9D               	bcf	3997,5,c	;volatile
  1785  00DF62                     l527:
  1786  00DF62  9A9E               	bcf	3998,5,c	;volatile
  1787  00DF64  AE03               	btfss	OpenUSART@config,7,c
  1788  00DF66  D002               	goto	l528
  1789  00DF68  889D               	bsf	3997,4,c	;volatile
  1790  00DF6A  D001               	goto	l529
  1791  00DF6C                     l528:
  1792  00DF6C  989D               	bcf	3997,4,c	;volatile
  1793  00DF6E                     l529:
  1794  00DF6E  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1795  00DF72  5002               	movf	OpenUSART@spbrg+1,w,c
  1796  00DF74  6EB0               	movwf	4016,c	;volatile
  1797  00DF76  8AAC               	bsf	4012,5,c	;volatile
  1798  00DF78  8EAB               	bsf	4011,7,c	;volatile
  1799  00DF7A  9C94               	bcf	3988,6,c	;volatile
  1800  00DF7C  8E94               	bsf	3988,7,c	;volatile
  1801  00DF7E  B8AC               	btfsc	4012,4,c	;volatile
  1802  00DF80  BEAC               	btfsc	4012,7,c	;volatile
  1803  00DF82  D002               	goto	l531
  1804  00DF84  8C94               	bsf	3988,6,c	;volatile
  1805  00DF86  D000               	goto	l531
  1806  00DF88                     l531:
  1807  00DF88  0012               	return		;funcret
  1808  00DF8A                     __end_of_OpenUSART:
  1809                           	opt stack 0
  1810                           tblptru	equ	0xFF8
  1811                           tblptrh	equ	0xFF7
  1812                           tblptrl	equ	0xFF6
  1813                           tablat	equ	0xFF5
  1814                           postinc0	equ	0xFEE
  1815                           wreg	equ	0xFE8
  1816                           postdec1	equ	0xFE5
  1817                           fsr1l	equ	0xFE1
  1818                           status	equ	0xFD8
  1819                           
  1820 ;; *************** function _init_IO *****************
  1821 ;; Defined at:
  1822 ;;		line 297 in file "Lab7_redo.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;		None               void
  1829 ;; Registers used:
  1830 ;;		wreg, status,2
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_main
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text3
  1850  00D9CE                     __ptext3:
  1851                           	opt stack 0
  1852  00D9CE                     _init_IO:
  1853                           	opt stack 30
  1854                           
  1855                           ;Lab7_redo.c: 299: TRISA = 0xFF;
  1856                           
  1857                           ;incstack = 0
  1858  00D9CE  6892               	setf	3986,c	;volatile
  1859                           
  1860                           ;Lab7_redo.c: 300: TRISB = 0x47;
  1861  00D9D0  0E47               	movlw	71
  1862  00D9D2  6E93               	movwf	3987,c	;volatile
  1863                           
  1864                           ;Lab7_redo.c: 301: TRISC = 0x00;
  1865  00D9D4  0E00               	movlw	0
  1866  00D9D6  6E94               	movwf	3988,c	;volatile
  1867                           
  1868                           ;Lab7_redo.c: 302: TRISD = 0x00;
  1869  00D9D8  0E00               	movlw	0
  1870  00D9DA  6E95               	movwf	3989,c	;volatile
  1871                           
  1872                           ;Lab7_redo.c: 303: TRISE = 0x00;
  1873  00D9DC  0E00               	movlw	0
  1874  00D9DE  6E96               	movwf	3990,c	;volatile
  1875  00D9E0  0012               	return		;funcret
  1876  00D9E2                     __end_of_init_IO:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           postdec1	equ	0xFE5
  1885                           fsr1l	equ	0xFE1
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _Night_Mode *****************
  1889 ;; Defined at:
  1890 ;;		line 498 in file "Lab7_redo.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;		None
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;		None               void
  1897 ;; Registers used:
  1898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;Total ram usage:        0 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:   10
  1911 ;; This function calls:
  1912 ;;		_Set_EW
  1913 ;;		_Set_EW_LT
  1914 ;;		_Set_NS
  1915 ;;		_Set_NS_LT
  1916 ;;		_Wait_N_Seconds
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text4
  1923  00E340                     __ptext4:
  1924                           	opt stack 0
  1925  00E340                     _Night_Mode:
  1926                           	opt stack 20
  1927                           
  1928                           ;Lab7_redo.c: 500: MODE = 0;
  1929                           
  1930                           ;incstack = 0
  1931  00E340  0E00               	movlw	0
  1932  00E342  6E69               	movwf	_MODE+1,c
  1933  00E344  0E00               	movlw	0
  1934  00E346  6E68               	movwf	_MODE,c
  1935                           
  1936                           ;Lab7_redo.c: 501: PORTBbits.RB7 = 0;
  1937  00E348  9E81               	bcf	3969,7,c	;volatile
  1938                           
  1939                           ;Lab7_redo.c: 502: Act_Mode_Txt[0] = 'N';
  1940  00E34A  0E4E               	movlw	78
  1941  00E34C  6E55               	movwf	_Act_Mode_Txt,c
  1942                           
  1943                           ;Lab7_redo.c: 504: Set_NS(2);
  1944  00E34E  0E02               	movlw	2
  1945  00E350  EC78  F06E         	call	_Set_NS
  1946                           
  1947                           ;Lab7_redo.c: 506: Set_EW(1);
  1948  00E354  0E01               	movlw	1
  1949  00E356  EC34  F06E         	call	_Set_EW
  1950                           
  1951                           ;Lab7_redo.c: 507: Set_NS_LT(1);
  1952  00E35A  0E01               	movlw	1
  1953  00E35C  EC9A  F06E         	call	_Set_NS_LT
  1954                           
  1955                           ;Lab7_redo.c: 508: Set_EW_LT(1);
  1956  00E360  0E01               	movlw	1
  1957  00E362  EC56  F06E         	call	_Set_EW_LT
  1958                           
  1959                           ;Lab7_redo.c: 510: Wait_N_Seconds(6);
  1960  00E366  0E06               	movlw	6
  1961  00E368  EC6F  F06D         	call	_Wait_N_Seconds
  1962                           
  1963                           ;Lab7_redo.c: 512: Set_NS(3);
  1964  00E36C  0E03               	movlw	3
  1965  00E36E  EC78  F06E         	call	_Set_NS
  1966                           
  1967                           ;Lab7_redo.c: 513: Wait_N_Seconds(3);
  1968  00E372  0E03               	movlw	3
  1969  00E374  EC6F  F06D         	call	_Wait_N_Seconds
  1970                           
  1971                           ;Lab7_redo.c: 515: Set_NS(1);
  1972  00E378  0E01               	movlw	1
  1973  00E37A  EC78  F06E         	call	_Set_NS
  1974                           
  1975                           ;Lab7_redo.c: 518: if (PORTAbits.RA5 == 1)
  1976  00E37E  AA80               	btfss	3968,5,c	;volatile
  1977  00E380  D010               	goto	l3697
  1978                           
  1979                           ;Lab7_redo.c: 519: {
  1980                           ;Lab7_redo.c: 520: Set_EW_LT(2);
  1981  00E382  0E02               	movlw	2
  1982  00E384  EC56  F06E         	call	_Set_EW_LT
  1983                           
  1984                           ;Lab7_redo.c: 521: Wait_N_Seconds(6);
  1985  00E388  0E06               	movlw	6
  1986  00E38A  EC6F  F06D         	call	_Wait_N_Seconds
  1987                           
  1988                           ;Lab7_redo.c: 523: Set_EW_LT(3);
  1989  00E38E  0E03               	movlw	3
  1990  00E390  EC56  F06E         	call	_Set_EW_LT
  1991                           
  1992                           ;Lab7_redo.c: 524: Wait_N_Seconds(3);
  1993  00E394  0E03               	movlw	3
  1994  00E396  EC6F  F06D         	call	_Wait_N_Seconds
  1995                           
  1996                           ;Lab7_redo.c: 526: Set_EW_LT(1);
  1997  00E39A  0E01               	movlw	1
  1998  00E39C  EC56  F06E         	call	_Set_EW_LT
  1999  00E3A0  D000               	goto	l3697
  2000  00E3A2                     l3697:
  2001                           
  2002                           ;Lab7_redo.c: 528: }
  2003                           ;Lab7_redo.c: 530: Set_EW(2);
  2004  00E3A2  0E02               	movlw	2
  2005  00E3A4  EC34  F06E         	call	_Set_EW
  2006                           
  2007                           ;Lab7_redo.c: 531: Wait_N_Seconds(6);
  2008  00E3A8  0E06               	movlw	6
  2009  00E3AA  EC6F  F06D         	call	_Wait_N_Seconds
  2010                           
  2011                           ;Lab7_redo.c: 533: Set_EW(3);
  2012  00E3AE  0E03               	movlw	3
  2013  00E3B0  EC34  F06E         	call	_Set_EW
  2014                           
  2015                           ;Lab7_redo.c: 534: Wait_N_Seconds(3);
  2016  00E3B4  0E03               	movlw	3
  2017  00E3B6  EC6F  F06D         	call	_Wait_N_Seconds
  2018                           
  2019                           ;Lab7_redo.c: 536: Set_EW(1);
  2020  00E3BA  0E01               	movlw	1
  2021  00E3BC  EC34  F06E         	call	_Set_EW
  2022                           
  2023                           ;Lab7_redo.c: 540: if ( PORTAbits.RA4 == 1 )
  2024  00E3C0  A880               	btfss	3968,4,c	;volatile
  2025  00E3C2  D010               	goto	l442
  2026                           
  2027                           ;Lab7_redo.c: 541: {
  2028                           ;Lab7_redo.c: 542: Set_NS_LT(2);
  2029  00E3C4  0E02               	movlw	2
  2030  00E3C6  EC9A  F06E         	call	_Set_NS_LT
  2031                           
  2032                           ;Lab7_redo.c: 543: Wait_N_Seconds(8);
  2033  00E3CA  0E08               	movlw	8
  2034  00E3CC  EC6F  F06D         	call	_Wait_N_Seconds
  2035                           
  2036                           ;Lab7_redo.c: 545: Set_NS_LT(3);
  2037  00E3D0  0E03               	movlw	3
  2038  00E3D2  EC9A  F06E         	call	_Set_NS_LT
  2039                           
  2040                           ;Lab7_redo.c: 546: Wait_N_Seconds(3);
  2041  00E3D6  0E03               	movlw	3
  2042  00E3D8  EC6F  F06D         	call	_Wait_N_Seconds
  2043                           
  2044                           ;Lab7_redo.c: 548: Set_NS_LT(1);
  2045  00E3DC  0E01               	movlw	1
  2046  00E3DE  EC9A  F06E         	call	_Set_NS_LT
  2047  00E3E2  D000               	goto	l442
  2048  00E3E4                     l442:
  2049  00E3E4  0012               	return		;funcret
  2050  00E3E6                     __end_of_Night_Mode:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           postdec1	equ	0xFE5
  2059                           fsr1l	equ	0xFE1
  2060                           status	equ	0xFD8
  2061                           
  2062 ;; *************** function _Initialize_Screen *****************
  2063 ;; Defined at:
  2064 ;;		line 169 in file "Lab7_redo.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;		None
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;		None
  2069 ;; Return value:  Size  Location     Type
  2070 ;;		None               void
  2071 ;; Registers used:
  2072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;Total ram usage:        0 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    7
  2085 ;; This function calls:
  2086 ;;		_LCD_Reset
  2087 ;;		_TFT_GreenTab_Initialize
  2088 ;;		_drawCircle
  2089 ;;		_drawRect
  2090 ;;		_drawtext
  2091 ;;		_fillCircle
  2092 ;;		_fillScreen
  2093 ;;		_strcpy
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text5
  2100  00F69E                     __ptext5:
  2101                           	opt stack 0
  2102  00F69E                     _Initialize_Screen:
  2103                           	opt stack 23
  2104                           
  2105                           ;Lab7_redo.c: 171: LCD_Reset();
  2106                           
  2107                           ;incstack = 0
  2108  00F69E  ECD4  F06C         	call	_LCD_Reset	;wreg free
  2109                           
  2110                           ;Lab7_redo.c: 172: TFT_GreenTab_Initialize();
  2111  00F6A2  EC5A  F06D         	call	_TFT_GreenTab_Initialize	;wreg free
  2112                           
  2113                           ;Lab7_redo.c: 173: fillScreen(0x0000);
  2114  00F6A6  0E00               	movlw	0
  2115  00F6A8  6E15               	movwf	fillScreen@color+1,c
  2116  00F6AA  0E00               	movlw	0
  2117  00F6AC  6E14               	movwf	fillScreen@color,c
  2118  00F6AE  EC13  F06D         	call	_fillScreen	;wreg free
  2119                           
  2120                           ;Lab7_redo.c: 176: txt = buffer;
  2121  00F6B2  0E80               	movlw	low _buffer
  2122  00F6B4  6E6C               	movwf	_txt,c
  2123  00F6B6  0E00               	movlw	high _buffer
  2124  00F6B8  6E6D               	movwf	_txt+1,c
  2125                           
  2126                           ;Lab7_redo.c: 177: strcpy(txt, "ECE3301L Fall 21-S3");
  2127  00F6BA  C06C  F001         	movff	_txt,strcpy@to
  2128  00F6BE  C06D  F002         	movff	_txt+1,strcpy@to+1
  2129  00F6C2  0EAD               	movlw	low STR_1
  2130  00F6C4  6E03               	movwf	strcpy@from,c
  2131  00F6C6  0EFF               	movlw	high STR_1
  2132  00F6C8  6E04               	movwf	strcpy@from+1,c
  2133  00F6CA  EC9E  F06D         	call	_strcpy	;wreg free
  2134                           
  2135                           ;Lab7_redo.c: 178: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2136  00F6CE  0E02               	movlw	2
  2137  00F6D0  6E29               	movwf	drawtext@y,c
  2138  00F6D2  C06C  F02A         	movff	_txt,drawtext@_text
  2139  00F6D6  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2140  00F6DA  0EFF               	movlw	255
  2141  00F6DC  6E2D               	movwf	drawtext@color+1,c
  2142  00F6DE  682C               	setf	drawtext@color,c
  2143  00F6E0  0E00               	movlw	0
  2144  00F6E2  6E2F               	movwf	drawtext@bg+1,c
  2145  00F6E4  0E00               	movlw	0
  2146  00F6E6  6E2E               	movwf	drawtext@bg,c
  2147  00F6E8  0E01               	movlw	1
  2148  00F6EA  6E30               	movwf	drawtext@size,c
  2149  00F6EC  0E02               	movlw	2
  2150  00F6EE  ECDB  F073         	call	_drawtext
  2151                           
  2152                           ;Lab7_redo.c: 181: strcpy(txt, "Mode:");
  2153  00F6F2  C06C  F001         	movff	_txt,strcpy@to
  2154  00F6F6  C06D  F002         	movff	_txt+1,strcpy@to+1
  2155  00F6FA  0EE5               	movlw	low STR_2
  2156  00F6FC  6E03               	movwf	strcpy@from,c
  2157  00F6FE  0EFF               	movlw	high STR_2
  2158  00F700  6E04               	movwf	strcpy@from+1,c
  2159  00F702  EC9E  F06D         	call	_strcpy	;wreg free
  2160                           
  2161                           ;Lab7_redo.c: 182: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2162  00F706  0E0A               	movlw	10
  2163  00F708  6E29               	movwf	drawtext@y,c
  2164  00F70A  C06C  F02A         	movff	_txt,drawtext@_text
  2165  00F70E  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2166  00F712  0EFF               	movlw	255
  2167  00F714  6E2D               	movwf	drawtext@color+1,c
  2168  00F716  682C               	setf	drawtext@color,c
  2169  00F718  0E00               	movlw	0
  2170  00F71A  6E2F               	movwf	drawtext@bg+1,c
  2171  00F71C  0E00               	movlw	0
  2172  00F71E  6E2E               	movwf	drawtext@bg,c
  2173  00F720  0E01               	movlw	1
  2174  00F722  6E30               	movwf	drawtext@size,c
  2175  00F724  0E02               	movlw	2
  2176  00F726  ECDB  F073         	call	_drawtext
  2177                           
  2178                           ;Lab7_redo.c: 183: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2179  00F72A  0E0A               	movlw	10
  2180  00F72C  6E29               	movwf	drawtext@y,c
  2181  00F72E  0E55               	movlw	low _Act_Mode_Txt
  2182  00F730  6E2A               	movwf	drawtext@_text,c
  2183  00F732  0E00               	movlw	high _Act_Mode_Txt
  2184  00F734  6E2B               	movwf	drawtext@_text+1,c
  2185  00F736  0EFF               	movlw	255
  2186  00F738  6E2D               	movwf	drawtext@color+1,c
  2187  00F73A  682C               	setf	drawtext@color,c
  2188  00F73C  0E00               	movlw	0
  2189  00F73E  6E2F               	movwf	drawtext@bg+1,c
  2190  00F740  0E00               	movlw	0
  2191  00F742  6E2E               	movwf	drawtext@bg,c
  2192  00F744  0E01               	movlw	1
  2193  00F746  6E30               	movwf	drawtext@size,c
  2194  00F748  0E23               	movlw	35
  2195  00F74A  ECDB  F073         	call	_drawtext
  2196                           
  2197                           ;Lab7_redo.c: 186: strcpy(txt, "FR:");
  2198  00F74E  C06C  F001         	movff	_txt,strcpy@to
  2199  00F752  C06D  F002         	movff	_txt+1,strcpy@to+1
  2200  00F756  0EEB               	movlw	low STR_3
  2201  00F758  6E03               	movwf	strcpy@from,c
  2202  00F75A  0EFF               	movlw	high STR_3
  2203  00F75C  6E04               	movwf	strcpy@from+1,c
  2204  00F75E  EC9E  F06D         	call	_strcpy	;wreg free
  2205                           
  2206                           ;Lab7_redo.c: 187: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2207  00F762  0E0A               	movlw	10
  2208  00F764  6E29               	movwf	drawtext@y,c
  2209  00F766  C06C  F02A         	movff	_txt,drawtext@_text
  2210  00F76A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2211  00F76E  0EFF               	movlw	255
  2212  00F770  6E2D               	movwf	drawtext@color+1,c
  2213  00F772  682C               	setf	drawtext@color,c
  2214  00F774  0E00               	movlw	0
  2215  00F776  6E2F               	movwf	drawtext@bg+1,c
  2216  00F778  0E00               	movlw	0
  2217  00F77A  6E2E               	movwf	drawtext@bg,c
  2218  00F77C  0E01               	movlw	1
  2219  00F77E  6E30               	movwf	drawtext@size,c
  2220  00F780  0E32               	movlw	50
  2221  00F782  ECDB  F073         	call	_drawtext
  2222                           
  2223                           ;Lab7_redo.c: 188: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2224  00F786  0E0A               	movlw	10
  2225  00F788  6E29               	movwf	drawtext@y,c
  2226  00F78A  0E57               	movlw	low _FlashingR_Txt
  2227  00F78C  6E2A               	movwf	drawtext@_text,c
  2228  00F78E  0E00               	movlw	high _FlashingR_Txt
  2229  00F790  6E2B               	movwf	drawtext@_text+1,c
  2230  00F792  0EFF               	movlw	255
  2231  00F794  6E2D               	movwf	drawtext@color+1,c
  2232  00F796  682C               	setf	drawtext@color,c
  2233  00F798  0E00               	movlw	0
  2234  00F79A  6E2F               	movwf	drawtext@bg+1,c
  2235  00F79C  0E00               	movlw	0
  2236  00F79E  6E2E               	movwf	drawtext@bg,c
  2237  00F7A0  0E01               	movlw	1
  2238  00F7A2  6E30               	movwf	drawtext@size,c
  2239  00F7A4  0E46               	movlw	70
  2240  00F7A6  ECDB  F073         	call	_drawtext
  2241                           
  2242                           ;Lab7_redo.c: 191: strcpy(txt, "FS:");
  2243  00F7AA  C06C  F001         	movff	_txt,strcpy@to
  2244  00F7AE  C06D  F002         	movff	_txt+1,strcpy@to+1
  2245  00F7B2  0EEF               	movlw	low STR_4
  2246  00F7B4  6E03               	movwf	strcpy@from,c
  2247  00F7B6  0EFF               	movlw	high STR_4
  2248  00F7B8  6E04               	movwf	strcpy@from+1,c
  2249  00F7BA  EC9E  F06D         	call	_strcpy	;wreg free
  2250                           
  2251                           ;Lab7_redo.c: 192: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2252  00F7BE  0E0A               	movlw	10
  2253  00F7C0  6E29               	movwf	drawtext@y,c
  2254  00F7C2  C06C  F02A         	movff	_txt,drawtext@_text
  2255  00F7C6  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2256  00F7CA  0EFF               	movlw	255
  2257  00F7CC  6E2D               	movwf	drawtext@color+1,c
  2258  00F7CE  682C               	setf	drawtext@color,c
  2259  00F7D0  0E00               	movlw	0
  2260  00F7D2  6E2F               	movwf	drawtext@bg+1,c
  2261  00F7D4  0E00               	movlw	0
  2262  00F7D6  6E2E               	movwf	drawtext@bg,c
  2263  00F7D8  0E01               	movlw	1
  2264  00F7DA  6E30               	movwf	drawtext@size,c
  2265  00F7DC  0E50               	movlw	80
  2266  00F7DE  ECDB  F073         	call	_drawtext
  2267                           
  2268                           ;Lab7_redo.c: 193: drawtext(100, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2269  00F7E2  0E0A               	movlw	10
  2270  00F7E4  6E29               	movwf	drawtext@y,c
  2271  00F7E6  0E57               	movlw	low _FlashingR_Txt
  2272  00F7E8  6E2A               	movwf	drawtext@_text,c
  2273  00F7EA  0E00               	movlw	high _FlashingR_Txt
  2274  00F7EC  6E2B               	movwf	drawtext@_text+1,c
  2275  00F7EE  0EFF               	movlw	255
  2276  00F7F0  6E2D               	movwf	drawtext@color+1,c
  2277  00F7F2  682C               	setf	drawtext@color,c
  2278  00F7F4  0E00               	movlw	0
  2279  00F7F6  6E2F               	movwf	drawtext@bg+1,c
  2280  00F7F8  0E00               	movlw	0
  2281  00F7FA  6E2E               	movwf	drawtext@bg,c
  2282  00F7FC  0E01               	movlw	1
  2283  00F7FE  6E30               	movwf	drawtext@size,c
  2284  00F800  0E64               	movlw	100
  2285  00F802  ECDB  F073         	call	_drawtext
  2286                           
  2287                           ;Lab7_redo.c: 196: strcpy(txt, "*");
  2288  00F806  C06C  F001         	movff	_txt,strcpy@to
  2289  00F80A  C06D  F002         	movff	_txt+1,strcpy@to+1
  2290  00F80E  0EFD               	movlw	low STR_5
  2291  00F810  6E03               	movwf	strcpy@from,c
  2292  00F812  0EFF               	movlw	high STR_5
  2293  00F814  6E04               	movwf	strcpy@from+1,c
  2294  00F816  EC9E  F06D         	call	_strcpy	;wreg free
  2295                           
  2296                           ;Lab7_redo.c: 197: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2297  00F81A  0E0A               	movlw	10
  2298  00F81C  6E29               	movwf	drawtext@y,c
  2299  00F81E  C06C  F02A         	movff	_txt,drawtext@_text
  2300  00F822  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2301  00F826  0EFF               	movlw	255
  2302  00F828  6E2D               	movwf	drawtext@color+1,c
  2303  00F82A  682C               	setf	drawtext@color,c
  2304  00F82C  0E00               	movlw	0
  2305  00F82E  6E2F               	movwf	drawtext@bg+1,c
  2306  00F830  0E00               	movlw	0
  2307  00F832  6E2E               	movwf	drawtext@bg,c
  2308  00F834  0E01               	movlw	1
  2309  00F836  6E30               	movwf	drawtext@size,c
  2310  00F838  0E78               	movlw	120
  2311  00F83A  ECDB  F073         	call	_drawtext
  2312                           
  2313                           ;Lab7_redo.c: 200: strcpy(txt, "NORTH/SOUTH");
  2314  00F83E  C06C  F001         	movff	_txt,strcpy@to
  2315  00F842  C06D  F002         	movff	_txt+1,strcpy@to+1
  2316  00F846  0EC1               	movlw	low STR_6
  2317  00F848  6E03               	movwf	strcpy@from,c
  2318  00F84A  0EFF               	movlw	high STR_6
  2319  00F84C  6E04               	movwf	strcpy@from+1,c
  2320  00F84E  EC9E  F06D         	call	_strcpy	;wreg free
  2321                           
  2322                           ;Lab7_redo.c: 201: drawtext (30, 20 , txt, 0x001F, 0x0000, 1);
  2323  00F852  0E14               	movlw	20
  2324  00F854  6E29               	movwf	drawtext@y,c
  2325  00F856  C06C  F02A         	movff	_txt,drawtext@_text
  2326  00F85A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2327  00F85E  0E00               	movlw	0
  2328  00F860  6E2D               	movwf	drawtext@color+1,c
  2329  00F862  0E1F               	movlw	31
  2330  00F864  6E2C               	movwf	drawtext@color,c
  2331  00F866  0E00               	movlw	0
  2332  00F868  6E2F               	movwf	drawtext@bg+1,c
  2333  00F86A  0E00               	movlw	0
  2334  00F86C  6E2E               	movwf	drawtext@bg,c
  2335  00F86E  0E01               	movlw	1
  2336  00F870  6E30               	movwf	drawtext@size,c
  2337  00F872  0E1E               	movlw	30
  2338  00F874  ECDB  F073         	call	_drawtext
  2339                           
  2340                           ;Lab7_redo.c: 202: drawRect (30, 20 + 15-8, 60, 18, 0x001F);
  2341  00F878  0E00               	movlw	0
  2342  00F87A  6E14               	movwf	drawRect@x+1,c
  2343  00F87C  0E1E               	movlw	30
  2344  00F87E  6E13               	movwf	drawRect@x,c
  2345  00F880  0E00               	movlw	0
  2346  00F882  6E16               	movwf	drawRect@y+1,c
  2347  00F884  0E1B               	movlw	27
  2348  00F886  6E15               	movwf	drawRect@y,c
  2349  00F888  0E00               	movlw	0
  2350  00F88A  6E18               	movwf	drawRect@w+1,c
  2351  00F88C  0E3C               	movlw	60
  2352  00F88E  6E17               	movwf	drawRect@w,c
  2353  00F890  0E00               	movlw	0
  2354  00F892  6E1A               	movwf	drawRect@h+1,c
  2355  00F894  0E12               	movlw	18
  2356  00F896  6E19               	movwf	drawRect@h,c
  2357  00F898  0E00               	movlw	0
  2358  00F89A  6E1C               	movwf	drawRect@color+1,c
  2359  00F89C  0E1F               	movlw	31
  2360  00F89E  6E1B               	movwf	drawRect@color,c
  2361  00F8A0  EC5A  F06F         	call	_drawRect	;wreg free
  2362                           
  2363                           ;Lab7_redo.c: 203: drawCircle(40, 20 + 15 , 7, 0xF800);
  2364  00F8A4  0E00               	movlw	0
  2365  00F8A6  6E0D               	movwf	drawCircle@x0+1,c
  2366  00F8A8  0E28               	movlw	40
  2367  00F8AA  6E0C               	movwf	drawCircle@x0,c
  2368  00F8AC  0E00               	movlw	0
  2369  00F8AE  6E0F               	movwf	drawCircle@y0+1,c
  2370  00F8B0  0E23               	movlw	35
  2371  00F8B2  6E0E               	movwf	drawCircle@y0,c
  2372  00F8B4  0E00               	movlw	0
  2373  00F8B6  6E11               	movwf	drawCircle@r+1,c
  2374  00F8B8  0E07               	movlw	7
  2375  00F8BA  6E10               	movwf	drawCircle@r,c
  2376  00F8BC  0EF8               	movlw	248
  2377  00F8BE  6E13               	movwf	drawCircle@color+1,c
  2378  00F8C0  0E00               	movlw	0
  2379  00F8C2  6E12               	movwf	drawCircle@color,c
  2380  00F8C4  ECC2  F077         	call	_drawCircle	;wreg free
  2381                           
  2382                           ;Lab7_redo.c: 204: drawCircle(60, 20 + 15 , 7, 0xFFE0);
  2383  00F8C8  0E00               	movlw	0
  2384  00F8CA  6E0D               	movwf	drawCircle@x0+1,c
  2385  00F8CC  0E3C               	movlw	60
  2386  00F8CE  6E0C               	movwf	drawCircle@x0,c
  2387  00F8D0  0E00               	movlw	0
  2388  00F8D2  6E0F               	movwf	drawCircle@y0+1,c
  2389  00F8D4  0E23               	movlw	35
  2390  00F8D6  6E0E               	movwf	drawCircle@y0,c
  2391  00F8D8  0E00               	movlw	0
  2392  00F8DA  6E11               	movwf	drawCircle@r+1,c
  2393  00F8DC  0E07               	movlw	7
  2394  00F8DE  6E10               	movwf	drawCircle@r,c
  2395  00F8E0  0EFF               	movlw	255
  2396  00F8E2  6E13               	movwf	drawCircle@color+1,c
  2397  00F8E4  0EE0               	movlw	224
  2398  00F8E6  6E12               	movwf	drawCircle@color,c
  2399  00F8E8  ECC2  F077         	call	_drawCircle	;wreg free
  2400                           
  2401                           ;Lab7_redo.c: 205: fillCircle(80, 20 + 15 , 7, 0x07E0);
  2402  00F8EC  0E00               	movlw	0
  2403  00F8EE  6E2C               	movwf	fillCircle@x0+1,c
  2404  00F8F0  0E50               	movlw	80
  2405  00F8F2  6E2B               	movwf	fillCircle@x0,c
  2406  00F8F4  0E00               	movlw	0
  2407  00F8F6  6E2E               	movwf	fillCircle@y0+1,c
  2408  00F8F8  0E23               	movlw	35
  2409  00F8FA  6E2D               	movwf	fillCircle@y0,c
  2410  00F8FC  0E00               	movlw	0
  2411  00F8FE  6E30               	movwf	fillCircle@r+1,c
  2412  00F900  0E07               	movlw	7
  2413  00F902  6E2F               	movwf	fillCircle@r,c
  2414  00F904  0E07               	movlw	7
  2415  00F906  6E32               	movwf	fillCircle@color+1,c
  2416  00F908  0EE0               	movlw	224
  2417  00F90A  6E31               	movwf	fillCircle@color,c
  2418  00F90C  EC08  F06F         	call	_fillCircle	;wreg free
  2419                           
  2420                           ;Lab7_redo.c: 206: drawtext (100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  2421  00F910  0E1E               	movlw	30
  2422  00F912  6E29               	movwf	drawtext@y,c
  2423  00F914  0E4C               	movlw	low _NS_Count
  2424  00F916  6E2A               	movwf	drawtext@_text,c
  2425  00F918  0E00               	movlw	high _NS_Count
  2426  00F91A  6E2B               	movwf	drawtext@_text+1,c
  2427  00F91C  0E00               	movlw	0
  2428  00F91E  6E2D               	movwf	drawtext@color+1,c
  2429  00F920  0E1F               	movlw	31
  2430  00F922  6E2C               	movwf	drawtext@color,c
  2431  00F924  0E00               	movlw	0
  2432  00F926  6E2F               	movwf	drawtext@bg+1,c
  2433  00F928  0E00               	movlw	0
  2434  00F92A  6E2E               	movwf	drawtext@bg,c
  2435  00F92C  0E02               	movlw	2
  2436  00F92E  6E30               	movwf	drawtext@size,c
  2437  00F930  0E64               	movlw	100
  2438  00F932  ECDB  F073         	call	_drawtext
  2439                           
  2440                           ;Lab7_redo.c: 209: strcpy(txt, "N/S LT");
  2441  00F936  C06C  F001         	movff	_txt,strcpy@to
  2442  00F93A  C06D  F002         	movff	_txt+1,strcpy@to+1
  2443  00F93E  0ED7               	movlw	low STR_7
  2444  00F940  6E03               	movwf	strcpy@from,c
  2445  00F942  0EFF               	movlw	high STR_7
  2446  00F944  6E04               	movwf	strcpy@from+1,c
  2447  00F946  EC9E  F06D         	call	_strcpy	;wreg free
  2448                           
  2449                           ;Lab7_redo.c: 210: drawtext (30, 50, txt, 0xF81F, 0x0000, 1);
  2450  00F94A  0E32               	movlw	50
  2451  00F94C  6E29               	movwf	drawtext@y,c
  2452  00F94E  C06C  F02A         	movff	_txt,drawtext@_text
  2453  00F952  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2454  00F956  0EF8               	movlw	248
  2455  00F958  6E2D               	movwf	drawtext@color+1,c
  2456  00F95A  0E1F               	movlw	31
  2457  00F95C  6E2C               	movwf	drawtext@color,c
  2458  00F95E  0E00               	movlw	0
  2459  00F960  6E2F               	movwf	drawtext@bg+1,c
  2460  00F962  0E00               	movlw	0
  2461  00F964  6E2E               	movwf	drawtext@bg,c
  2462  00F966  0E01               	movlw	1
  2463  00F968  6E30               	movwf	drawtext@size,c
  2464  00F96A  0E1E               	movlw	30
  2465  00F96C  ECDB  F073         	call	_drawtext
  2466                           
  2467                           ;Lab7_redo.c: 211: drawRect (30, 50 + 15-8, 60, 18, 0xF81F);
  2468  00F970  0E00               	movlw	0
  2469  00F972  6E14               	movwf	drawRect@x+1,c
  2470  00F974  0E1E               	movlw	30
  2471  00F976  6E13               	movwf	drawRect@x,c
  2472  00F978  0E00               	movlw	0
  2473  00F97A  6E16               	movwf	drawRect@y+1,c
  2474  00F97C  0E39               	movlw	57
  2475  00F97E  6E15               	movwf	drawRect@y,c
  2476  00F980  0E00               	movlw	0
  2477  00F982  6E18               	movwf	drawRect@w+1,c
  2478  00F984  0E3C               	movlw	60
  2479  00F986  6E17               	movwf	drawRect@w,c
  2480  00F988  0E00               	movlw	0
  2481  00F98A  6E1A               	movwf	drawRect@h+1,c
  2482  00F98C  0E12               	movlw	18
  2483  00F98E  6E19               	movwf	drawRect@h,c
  2484  00F990  0EF8               	movlw	248
  2485  00F992  6E1C               	movwf	drawRect@color+1,c
  2486  00F994  0E1F               	movlw	31
  2487  00F996  6E1B               	movwf	drawRect@color,c
  2488  00F998  EC5A  F06F         	call	_drawRect	;wreg free
  2489                           
  2490                           ;Lab7_redo.c: 212: fillCircle(40, 50 + 15, 7, 0xF800);
  2491  00F99C  0E00               	movlw	0
  2492  00F99E  6E2C               	movwf	fillCircle@x0+1,c
  2493  00F9A0  0E28               	movlw	40
  2494  00F9A2  6E2B               	movwf	fillCircle@x0,c
  2495  00F9A4  0E00               	movlw	0
  2496  00F9A6  6E2E               	movwf	fillCircle@y0+1,c
  2497  00F9A8  0E41               	movlw	65
  2498  00F9AA  6E2D               	movwf	fillCircle@y0,c
  2499  00F9AC  0E00               	movlw	0
  2500  00F9AE  6E30               	movwf	fillCircle@r+1,c
  2501  00F9B0  0E07               	movlw	7
  2502  00F9B2  6E2F               	movwf	fillCircle@r,c
  2503  00F9B4  0EF8               	movlw	248
  2504  00F9B6  6E32               	movwf	fillCircle@color+1,c
  2505  00F9B8  0E00               	movlw	0
  2506  00F9BA  6E31               	movwf	fillCircle@color,c
  2507  00F9BC  EC08  F06F         	call	_fillCircle	;wreg free
  2508                           
  2509                           ;Lab7_redo.c: 213: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2510  00F9C0  0E00               	movlw	0
  2511  00F9C2  6E0D               	movwf	drawCircle@x0+1,c
  2512  00F9C4  0E3C               	movlw	60
  2513  00F9C6  6E0C               	movwf	drawCircle@x0,c
  2514  00F9C8  0E00               	movlw	0
  2515  00F9CA  6E0F               	movwf	drawCircle@y0+1,c
  2516  00F9CC  0E41               	movlw	65
  2517  00F9CE  6E0E               	movwf	drawCircle@y0,c
  2518  00F9D0  0E00               	movlw	0
  2519  00F9D2  6E11               	movwf	drawCircle@r+1,c
  2520  00F9D4  0E07               	movlw	7
  2521  00F9D6  6E10               	movwf	drawCircle@r,c
  2522  00F9D8  0EFF               	movlw	255
  2523  00F9DA  6E13               	movwf	drawCircle@color+1,c
  2524  00F9DC  0EE0               	movlw	224
  2525  00F9DE  6E12               	movwf	drawCircle@color,c
  2526  00F9E0  ECC2  F077         	call	_drawCircle	;wreg free
  2527                           
  2528                           ;Lab7_redo.c: 214: drawCircle(80, 50 + 15, 7, 0x07E0);
  2529  00F9E4  0E00               	movlw	0
  2530  00F9E6  6E0D               	movwf	drawCircle@x0+1,c
  2531  00F9E8  0E50               	movlw	80
  2532  00F9EA  6E0C               	movwf	drawCircle@x0,c
  2533  00F9EC  0E00               	movlw	0
  2534  00F9EE  6E0F               	movwf	drawCircle@y0+1,c
  2535  00F9F0  0E41               	movlw	65
  2536  00F9F2  6E0E               	movwf	drawCircle@y0,c
  2537  00F9F4  0E00               	movlw	0
  2538  00F9F6  6E11               	movwf	drawCircle@r+1,c
  2539  00F9F8  0E07               	movlw	7
  2540  00F9FA  6E10               	movwf	drawCircle@r,c
  2541  00F9FC  0E07               	movlw	7
  2542  00F9FE  6E13               	movwf	drawCircle@color+1,c
  2543  00FA00  0EE0               	movlw	224
  2544  00FA02  6E12               	movwf	drawCircle@color,c
  2545  00FA04  ECC2  F077         	call	_drawCircle	;wreg free
  2546                           
  2547                           ;Lab7_redo.c: 215: drawtext (100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2548  00FA08  0E3C               	movlw	60
  2549  00FA0A  6E29               	movwf	drawtext@y,c
  2550  00FA0C  0E49               	movlw	low _NSLT_Count
  2551  00FA0E  6E2A               	movwf	drawtext@_text,c
  2552  00FA10  0E00               	movlw	high _NSLT_Count
  2553  00FA12  6E2B               	movwf	drawtext@_text+1,c
  2554  00FA14  0EF8               	movlw	248
  2555  00FA16  6E2D               	movwf	drawtext@color+1,c
  2556  00FA18  0E1F               	movlw	31
  2557  00FA1A  6E2C               	movwf	drawtext@color,c
  2558  00FA1C  0E00               	movlw	0
  2559  00FA1E  6E2F               	movwf	drawtext@bg+1,c
  2560  00FA20  0E00               	movlw	0
  2561  00FA22  6E2E               	movwf	drawtext@bg,c
  2562  00FA24  0E02               	movlw	2
  2563  00FA26  6E30               	movwf	drawtext@size,c
  2564  00FA28  0E64               	movlw	100
  2565  00FA2A  ECDB  F073         	call	_drawtext
  2566                           
  2567                           ;Lab7_redo.c: 218: strcpy(txt, "EAST/WEST");
  2568  00FA2E  C06C  F001         	movff	_txt,strcpy@to
  2569  00FA32  C06D  F002         	movff	_txt+1,strcpy@to+1
  2570  00FA36  0ECD               	movlw	low STR_8
  2571  00FA38  6E03               	movwf	strcpy@from,c
  2572  00FA3A  0EFF               	movlw	high STR_8
  2573  00FA3C  6E04               	movwf	strcpy@from+1,c
  2574  00FA3E  EC9E  F06D         	call	_strcpy	;wreg free
  2575                           
  2576                           ;Lab7_redo.c: 219: drawtext (30, 80, txt, 0x07FF, 0x0000, 1);
  2577  00FA42  0E50               	movlw	80
  2578  00FA44  6E29               	movwf	drawtext@y,c
  2579  00FA46  C06C  F02A         	movff	_txt,drawtext@_text
  2580  00FA4A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2581  00FA4E  0E07               	movlw	7
  2582  00FA50  6E2D               	movwf	drawtext@color+1,c
  2583  00FA52  682C               	setf	drawtext@color,c
  2584  00FA54  0E00               	movlw	0
  2585  00FA56  6E2F               	movwf	drawtext@bg+1,c
  2586  00FA58  0E00               	movlw	0
  2587  00FA5A  6E2E               	movwf	drawtext@bg,c
  2588  00FA5C  0E01               	movlw	1
  2589  00FA5E  6E30               	movwf	drawtext@size,c
  2590  00FA60  0E1E               	movlw	30
  2591  00FA62  ECDB  F073         	call	_drawtext
  2592                           
  2593                           ;Lab7_redo.c: 220: drawRect (30, 80 + 15-8, 60, 18, 0x07FF);
  2594  00FA66  0E00               	movlw	0
  2595  00FA68  6E14               	movwf	drawRect@x+1,c
  2596  00FA6A  0E1E               	movlw	30
  2597  00FA6C  6E13               	movwf	drawRect@x,c
  2598  00FA6E  0E00               	movlw	0
  2599  00FA70  6E16               	movwf	drawRect@y+1,c
  2600  00FA72  0E57               	movlw	87
  2601  00FA74  6E15               	movwf	drawRect@y,c
  2602  00FA76  0E00               	movlw	0
  2603  00FA78  6E18               	movwf	drawRect@w+1,c
  2604  00FA7A  0E3C               	movlw	60
  2605  00FA7C  6E17               	movwf	drawRect@w,c
  2606  00FA7E  0E00               	movlw	0
  2607  00FA80  6E1A               	movwf	drawRect@h+1,c
  2608  00FA82  0E12               	movlw	18
  2609  00FA84  6E19               	movwf	drawRect@h,c
  2610  00FA86  0E07               	movlw	7
  2611  00FA88  6E1C               	movwf	drawRect@color+1,c
  2612  00FA8A  681B               	setf	drawRect@color,c
  2613  00FA8C  EC5A  F06F         	call	_drawRect	;wreg free
  2614                           
  2615                           ;Lab7_redo.c: 221: fillCircle(40, 80 + 15, 7, 0xF800);
  2616  00FA90  0E00               	movlw	0
  2617  00FA92  6E2C               	movwf	fillCircle@x0+1,c
  2618  00FA94  0E28               	movlw	40
  2619  00FA96  6E2B               	movwf	fillCircle@x0,c
  2620  00FA98  0E00               	movlw	0
  2621  00FA9A  6E2E               	movwf	fillCircle@y0+1,c
  2622  00FA9C  0E5F               	movlw	95
  2623  00FA9E  6E2D               	movwf	fillCircle@y0,c
  2624  00FAA0  0E00               	movlw	0
  2625  00FAA2  6E30               	movwf	fillCircle@r+1,c
  2626  00FAA4  0E07               	movlw	7
  2627  00FAA6  6E2F               	movwf	fillCircle@r,c
  2628  00FAA8  0EF8               	movlw	248
  2629  00FAAA  6E32               	movwf	fillCircle@color+1,c
  2630  00FAAC  0E00               	movlw	0
  2631  00FAAE  6E31               	movwf	fillCircle@color,c
  2632  00FAB0  EC08  F06F         	call	_fillCircle	;wreg free
  2633                           
  2634                           ;Lab7_redo.c: 222: drawCircle(60, 80 + 15, 7, 0xFFE0);
  2635  00FAB4  0E00               	movlw	0
  2636  00FAB6  6E0D               	movwf	drawCircle@x0+1,c
  2637  00FAB8  0E3C               	movlw	60
  2638  00FABA  6E0C               	movwf	drawCircle@x0,c
  2639  00FABC  0E00               	movlw	0
  2640  00FABE  6E0F               	movwf	drawCircle@y0+1,c
  2641  00FAC0  0E5F               	movlw	95
  2642  00FAC2  6E0E               	movwf	drawCircle@y0,c
  2643  00FAC4  0E00               	movlw	0
  2644  00FAC6  6E11               	movwf	drawCircle@r+1,c
  2645  00FAC8  0E07               	movlw	7
  2646  00FACA  6E10               	movwf	drawCircle@r,c
  2647  00FACC  0EFF               	movlw	255
  2648  00FACE  6E13               	movwf	drawCircle@color+1,c
  2649  00FAD0  0EE0               	movlw	224
  2650  00FAD2  6E12               	movwf	drawCircle@color,c
  2651  00FAD4  ECC2  F077         	call	_drawCircle	;wreg free
  2652                           
  2653                           ;Lab7_redo.c: 223: drawCircle(80, 80 + 15, 7, 0x07E0);
  2654  00FAD8  0E00               	movlw	0
  2655  00FADA  6E0D               	movwf	drawCircle@x0+1,c
  2656  00FADC  0E50               	movlw	80
  2657  00FADE  6E0C               	movwf	drawCircle@x0,c
  2658  00FAE0  0E00               	movlw	0
  2659  00FAE2  6E0F               	movwf	drawCircle@y0+1,c
  2660  00FAE4  0E5F               	movlw	95
  2661  00FAE6  6E0E               	movwf	drawCircle@y0,c
  2662  00FAE8  0E00               	movlw	0
  2663  00FAEA  6E11               	movwf	drawCircle@r+1,c
  2664  00FAEC  0E07               	movlw	7
  2665  00FAEE  6E10               	movwf	drawCircle@r,c
  2666  00FAF0  0E07               	movlw	7
  2667  00FAF2  6E13               	movwf	drawCircle@color+1,c
  2668  00FAF4  0EE0               	movlw	224
  2669  00FAF6  6E12               	movwf	drawCircle@color,c
  2670  00FAF8  ECC2  F077         	call	_drawCircle	;wreg free
  2671                           
  2672                           ;Lab7_redo.c: 224: drawtext (100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2673  00FAFC  0E5A               	movlw	90
  2674  00FAFE  6E29               	movwf	drawtext@y,c
  2675  00FB00  0E46               	movlw	low _EW_Count
  2676  00FB02  6E2A               	movwf	drawtext@_text,c
  2677  00FB04  0E00               	movlw	high _EW_Count
  2678  00FB06  6E2B               	movwf	drawtext@_text+1,c
  2679  00FB08  0E07               	movlw	7
  2680  00FB0A  6E2D               	movwf	drawtext@color+1,c
  2681  00FB0C  682C               	setf	drawtext@color,c
  2682  00FB0E  0E00               	movlw	0
  2683  00FB10  6E2F               	movwf	drawtext@bg+1,c
  2684  00FB12  0E00               	movlw	0
  2685  00FB14  6E2E               	movwf	drawtext@bg,c
  2686  00FB16  0E02               	movlw	2
  2687  00FB18  6E30               	movwf	drawtext@size,c
  2688  00FB1A  0E64               	movlw	100
  2689  00FB1C  ECDB  F073         	call	_drawtext
  2690                           
  2691                           ;Lab7_redo.c: 227: strcpy(txt, "E/W LT");
  2692  00FB20  C06C  F001         	movff	_txt,strcpy@to
  2693  00FB24  C06D  F002         	movff	_txt+1,strcpy@to+1
  2694  00FB28  0EDE               	movlw	low STR_9
  2695  00FB2A  6E03               	movwf	strcpy@from,c
  2696  00FB2C  0EFF               	movlw	high STR_9
  2697  00FB2E  6E04               	movwf	strcpy@from+1,c
  2698  00FB30  EC9E  F06D         	call	_strcpy	;wreg free
  2699                           
  2700                           ;Lab7_redo.c: 228: drawtext (30, 110, txt, 0xFFFF, 0x0000, 1);
  2701  00FB34  0E6E               	movlw	110
  2702  00FB36  6E29               	movwf	drawtext@y,c
  2703  00FB38  C06C  F02A         	movff	_txt,drawtext@_text
  2704  00FB3C  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2705  00FB40  0EFF               	movlw	255
  2706  00FB42  6E2D               	movwf	drawtext@color+1,c
  2707  00FB44  682C               	setf	drawtext@color,c
  2708  00FB46  0E00               	movlw	0
  2709  00FB48  6E2F               	movwf	drawtext@bg+1,c
  2710  00FB4A  0E00               	movlw	0
  2711  00FB4C  6E2E               	movwf	drawtext@bg,c
  2712  00FB4E  0E01               	movlw	1
  2713  00FB50  6E30               	movwf	drawtext@size,c
  2714  00FB52  0E1E               	movlw	30
  2715  00FB54  ECDB  F073         	call	_drawtext
  2716                           
  2717                           ;Lab7_redo.c: 229: drawRect (30, 110 + 15-8, 60, 18, 0xFFFF);
  2718  00FB58  0E00               	movlw	0
  2719  00FB5A  6E14               	movwf	drawRect@x+1,c
  2720  00FB5C  0E1E               	movlw	30
  2721  00FB5E  6E13               	movwf	drawRect@x,c
  2722  00FB60  0E00               	movlw	0
  2723  00FB62  6E16               	movwf	drawRect@y+1,c
  2724  00FB64  0E75               	movlw	117
  2725  00FB66  6E15               	movwf	drawRect@y,c
  2726  00FB68  0E00               	movlw	0
  2727  00FB6A  6E18               	movwf	drawRect@w+1,c
  2728  00FB6C  0E3C               	movlw	60
  2729  00FB6E  6E17               	movwf	drawRect@w,c
  2730  00FB70  0E00               	movlw	0
  2731  00FB72  6E1A               	movwf	drawRect@h+1,c
  2732  00FB74  0E12               	movlw	18
  2733  00FB76  6E19               	movwf	drawRect@h,c
  2734  00FB78  0EFF               	movlw	255
  2735  00FB7A  6E1C               	movwf	drawRect@color+1,c
  2736  00FB7C  681B               	setf	drawRect@color,c
  2737  00FB7E  EC5A  F06F         	call	_drawRect	;wreg free
  2738                           
  2739                           ;Lab7_redo.c: 230: fillCircle(40, 110 + 15, 7, 0xF800);
  2740  00FB82  0E00               	movlw	0
  2741  00FB84  6E2C               	movwf	fillCircle@x0+1,c
  2742  00FB86  0E28               	movlw	40
  2743  00FB88  6E2B               	movwf	fillCircle@x0,c
  2744  00FB8A  0E00               	movlw	0
  2745  00FB8C  6E2E               	movwf	fillCircle@y0+1,c
  2746  00FB8E  0E7D               	movlw	125
  2747  00FB90  6E2D               	movwf	fillCircle@y0,c
  2748  00FB92  0E00               	movlw	0
  2749  00FB94  6E30               	movwf	fillCircle@r+1,c
  2750  00FB96  0E07               	movlw	7
  2751  00FB98  6E2F               	movwf	fillCircle@r,c
  2752  00FB9A  0EF8               	movlw	248
  2753  00FB9C  6E32               	movwf	fillCircle@color+1,c
  2754  00FB9E  0E00               	movlw	0
  2755  00FBA0  6E31               	movwf	fillCircle@color,c
  2756  00FBA2  EC08  F06F         	call	_fillCircle	;wreg free
  2757                           
  2758                           ;Lab7_redo.c: 231: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2759  00FBA6  0E00               	movlw	0
  2760  00FBA8  6E0D               	movwf	drawCircle@x0+1,c
  2761  00FBAA  0E3C               	movlw	60
  2762  00FBAC  6E0C               	movwf	drawCircle@x0,c
  2763  00FBAE  0E00               	movlw	0
  2764  00FBB0  6E0F               	movwf	drawCircle@y0+1,c
  2765  00FBB2  0E7D               	movlw	125
  2766  00FBB4  6E0E               	movwf	drawCircle@y0,c
  2767  00FBB6  0E00               	movlw	0
  2768  00FBB8  6E11               	movwf	drawCircle@r+1,c
  2769  00FBBA  0E07               	movlw	7
  2770  00FBBC  6E10               	movwf	drawCircle@r,c
  2771  00FBBE  0EFF               	movlw	255
  2772  00FBC0  6E13               	movwf	drawCircle@color+1,c
  2773  00FBC2  0EE0               	movlw	224
  2774  00FBC4  6E12               	movwf	drawCircle@color,c
  2775  00FBC6  ECC2  F077         	call	_drawCircle	;wreg free
  2776                           
  2777                           ;Lab7_redo.c: 232: drawCircle(80, 110 + 15, 7, 0x07E0);
  2778  00FBCA  0E00               	movlw	0
  2779  00FBCC  6E0D               	movwf	drawCircle@x0+1,c
  2780  00FBCE  0E50               	movlw	80
  2781  00FBD0  6E0C               	movwf	drawCircle@x0,c
  2782  00FBD2  0E00               	movlw	0
  2783  00FBD4  6E0F               	movwf	drawCircle@y0+1,c
  2784  00FBD6  0E7D               	movlw	125
  2785  00FBD8  6E0E               	movwf	drawCircle@y0,c
  2786  00FBDA  0E00               	movlw	0
  2787  00FBDC  6E11               	movwf	drawCircle@r+1,c
  2788  00FBDE  0E07               	movlw	7
  2789  00FBE0  6E10               	movwf	drawCircle@r,c
  2790  00FBE2  0E07               	movlw	7
  2791  00FBE4  6E13               	movwf	drawCircle@color+1,c
  2792  00FBE6  0EE0               	movlw	224
  2793  00FBE8  6E12               	movwf	drawCircle@color,c
  2794  00FBEA  ECC2  F077         	call	_drawCircle	;wreg free
  2795                           
  2796                           ;Lab7_redo.c: 233: drawtext (100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2797  00FBEE  0E78               	movlw	120
  2798  00FBF0  6E29               	movwf	drawtext@y,c
  2799  00FBF2  0E43               	movlw	low _EWLT_Count
  2800  00FBF4  6E2A               	movwf	drawtext@_text,c
  2801  00FBF6  0E00               	movlw	high _EWLT_Count
  2802  00FBF8  6E2B               	movwf	drawtext@_text+1,c
  2803  00FBFA  0EFF               	movlw	255
  2804  00FBFC  6E2D               	movwf	drawtext@color+1,c
  2805  00FBFE  682C               	setf	drawtext@color,c
  2806  00FC00  0E00               	movlw	0
  2807  00FC02  6E2F               	movwf	drawtext@bg+1,c
  2808  00FC04  0E00               	movlw	0
  2809  00FC06  6E2E               	movwf	drawtext@bg,c
  2810  00FC08  0E02               	movlw	2
  2811  00FC0A  6E30               	movwf	drawtext@size,c
  2812  00FC0C  0E64               	movlw	100
  2813  00FC0E  ECDB  F073         	call	_drawtext
  2814                           
  2815                           ;Lab7_redo.c: 236: strcpy(txt, "PNS");
  2816  00FC12  C06C  F001         	movff	_txt,strcpy@to
  2817  00FC16  C06D  F002         	movff	_txt+1,strcpy@to+1
  2818  00FC1A  0EF3               	movlw	low STR_10
  2819  00FC1C  6E03               	movwf	strcpy@from,c
  2820  00FC1E  0EFF               	movlw	high STR_10
  2821  00FC20  6E04               	movwf	strcpy@from+1,c
  2822  00FC22  EC9E  F06D         	call	_strcpy	;wreg free
  2823                           
  2824                           ;Lab7_redo.c: 237: drawtext(3, 20, txt, 0x001F, 0x0000, 1);
  2825  00FC26  0E14               	movlw	20
  2826  00FC28  6E29               	movwf	drawtext@y,c
  2827  00FC2A  C06C  F02A         	movff	_txt,drawtext@_text
  2828  00FC2E  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2829  00FC32  0E00               	movlw	0
  2830  00FC34  6E2D               	movwf	drawtext@color+1,c
  2831  00FC36  0E1F               	movlw	31
  2832  00FC38  6E2C               	movwf	drawtext@color,c
  2833  00FC3A  0E00               	movlw	0
  2834  00FC3C  6E2F               	movwf	drawtext@bg+1,c
  2835  00FC3E  0E00               	movlw	0
  2836  00FC40  6E2E               	movwf	drawtext@bg,c
  2837  00FC42  0E01               	movlw	1
  2838  00FC44  6E30               	movwf	drawtext@size,c
  2839  00FC46  0E03               	movlw	3
  2840  00FC48  ECDB  F073         	call	_drawtext
  2841                           
  2842                           ;Lab7_redo.c: 238: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  2843  00FC4C  0E1E               	movlw	30
  2844  00FC4E  6E29               	movwf	drawtext@y,c
  2845  00FC50  0E52               	movlw	low _PED_NS_Count
  2846  00FC52  6E2A               	movwf	drawtext@_text,c
  2847  00FC54  0E00               	movlw	high _PED_NS_Count
  2848  00FC56  6E2B               	movwf	drawtext@_text+1,c
  2849  00FC58  0E00               	movlw	0
  2850  00FC5A  6E2D               	movwf	drawtext@color+1,c
  2851  00FC5C  0E1F               	movlw	31
  2852  00FC5E  6E2C               	movwf	drawtext@color,c
  2853  00FC60  0E00               	movlw	0
  2854  00FC62  6E2F               	movwf	drawtext@bg+1,c
  2855  00FC64  0E00               	movlw	0
  2856  00FC66  6E2E               	movwf	drawtext@bg,c
  2857  00FC68  0E02               	movlw	2
  2858  00FC6A  6E30               	movwf	drawtext@size,c
  2859  00FC6C  0E02               	movlw	2
  2860  00FC6E  ECDB  F073         	call	_drawtext
  2861                           
  2862                           ;Lab7_redo.c: 241: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  2863  00FC72  0E5A               	movlw	90
  2864  00FC74  6E29               	movwf	drawtext@y,c
  2865  00FC76  0E4F               	movlw	low _PED_EW_Count
  2866  00FC78  6E2A               	movwf	drawtext@_text,c
  2867  00FC7A  0E00               	movlw	high _PED_EW_Count
  2868  00FC7C  6E2B               	movwf	drawtext@_text+1,c
  2869  00FC7E  0E07               	movlw	7
  2870  00FC80  6E2D               	movwf	drawtext@color+1,c
  2871  00FC82  682C               	setf	drawtext@color,c
  2872  00FC84  0E00               	movlw	0
  2873  00FC86  6E2F               	movwf	drawtext@bg+1,c
  2874  00FC88  0E00               	movlw	0
  2875  00FC8A  6E2E               	movwf	drawtext@bg,c
  2876  00FC8C  0E02               	movlw	2
  2877  00FC8E  6E30               	movwf	drawtext@size,c
  2878  00FC90  0E02               	movlw	2
  2879  00FC92  ECDB  F073         	call	_drawtext
  2880                           
  2881                           ;Lab7_redo.c: 242: strcpy(txt, "PEW");
  2882  00FC96  C06C  F001         	movff	_txt,strcpy@to
  2883  00FC9A  C06D  F002         	movff	_txt+1,strcpy@to+1
  2884  00FC9E  0EF7               	movlw	low STR_11
  2885  00FCA0  6E03               	movwf	strcpy@from,c
  2886  00FCA2  0EFF               	movlw	high STR_11
  2887  00FCA4  6E04               	movwf	strcpy@from+1,c
  2888  00FCA6  EC9E  F06D         	call	_strcpy	;wreg free
  2889                           
  2890                           ;Lab7_redo.c: 243: drawtext(3, 80, txt, 0x07FF, 0x0000, 1);
  2891  00FCAA  0E50               	movlw	80
  2892  00FCAC  6E29               	movwf	drawtext@y,c
  2893  00FCAE  C06C  F02A         	movff	_txt,drawtext@_text
  2894  00FCB2  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2895  00FCB6  0E07               	movlw	7
  2896  00FCB8  6E2D               	movwf	drawtext@color+1,c
  2897  00FCBA  682C               	setf	drawtext@color,c
  2898  00FCBC  0E00               	movlw	0
  2899  00FCBE  6E2F               	movwf	drawtext@bg+1,c
  2900  00FCC0  0E00               	movlw	0
  2901  00FCC2  6E2E               	movwf	drawtext@bg,c
  2902  00FCC4  0E01               	movlw	1
  2903  00FCC6  6E30               	movwf	drawtext@size,c
  2904  00FCC8  0E03               	movlw	3
  2905  00FCCA  ECDB  F073         	call	_drawtext
  2906                           
  2907                           ;Lab7_redo.c: 246: strcpy(txt, "NSP NSLT EWP EWLT MR");
  2908  00FCCE  C06C  F001         	movff	_txt,strcpy@to
  2909  00FCD2  C06D  F002         	movff	_txt+1,strcpy@to+1
  2910  00FCD6  0E98               	movlw	low STR_12
  2911  00FCD8  6E03               	movwf	strcpy@from,c
  2912  00FCDA  0EFF               	movlw	high STR_12
  2913  00FCDC  6E04               	movwf	strcpy@from+1,c
  2914  00FCDE  EC9E  F06D         	call	_strcpy	;wreg free
  2915                           
  2916                           ;Lab7_redo.c: 247: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2917  00FCE2  0E8C               	movlw	140
  2918  00FCE4  6E29               	movwf	drawtext@y,c
  2919  00FCE6  C06C  F02A         	movff	_txt,drawtext@_text
  2920  00FCEA  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2921  00FCEE  0EFF               	movlw	255
  2922  00FCF0  6E2D               	movwf	drawtext@color+1,c
  2923  00FCF2  682C               	setf	drawtext@color,c
  2924  00FCF4  0E00               	movlw	0
  2925  00FCF6  6E2F               	movwf	drawtext@bg+1,c
  2926  00FCF8  0E00               	movlw	0
  2927  00FCFA  6E2E               	movwf	drawtext@bg,c
  2928  00FCFC  0E01               	movlw	1
  2929  00FCFE  6E30               	movwf	drawtext@size,c
  2930  00FD00  0E01               	movlw	1
  2931  00FD02  ECDB  F073         	call	_drawtext
  2932                           
  2933                           ;Lab7_redo.c: 248: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2934  00FD06  0E95               	movlw	149
  2935  00FD08  6E29               	movwf	drawtext@y,c
  2936  00FD0A  0E63               	movlw	low _SW_NSPED_Txt
  2937  00FD0C  6E2A               	movwf	drawtext@_text,c
  2938  00FD0E  0E00               	movlw	high _SW_NSPED_Txt
  2939  00FD10  6E2B               	movwf	drawtext@_text+1,c
  2940  00FD12  0EFF               	movlw	255
  2941  00FD14  6E2D               	movwf	drawtext@color+1,c
  2942  00FD16  682C               	setf	drawtext@color,c
  2943  00FD18  0E00               	movlw	0
  2944  00FD1A  6E2F               	movwf	drawtext@bg+1,c
  2945  00FD1C  0E00               	movlw	0
  2946  00FD1E  6E2E               	movwf	drawtext@bg,c
  2947  00FD20  0E01               	movlw	1
  2948  00FD22  6E30               	movwf	drawtext@size,c
  2949  00FD24  0E06               	movlw	6
  2950  00FD26  ECDB  F073         	call	_drawtext
  2951                           
  2952                           ;Lab7_redo.c: 249: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2953  00FD2A  0E95               	movlw	149
  2954  00FD2C  6E29               	movwf	drawtext@y,c
  2955  00FD2E  0E61               	movlw	low _SW_NSLT_Txt
  2956  00FD30  6E2A               	movwf	drawtext@_text,c
  2957  00FD32  0E00               	movlw	high _SW_NSLT_Txt
  2958  00FD34  6E2B               	movwf	drawtext@_text+1,c
  2959  00FD36  0EFF               	movlw	255
  2960  00FD38  6E2D               	movwf	drawtext@color+1,c
  2961  00FD3A  682C               	setf	drawtext@color,c
  2962  00FD3C  0E00               	movlw	0
  2963  00FD3E  6E2F               	movwf	drawtext@bg+1,c
  2964  00FD40  0E00               	movlw	0
  2965  00FD42  6E2E               	movwf	drawtext@bg,c
  2966  00FD44  0E01               	movlw	1
  2967  00FD46  6E30               	movwf	drawtext@size,c
  2968  00FD48  0E20               	movlw	32
  2969  00FD4A  ECDB  F073         	call	_drawtext
  2970                           
  2971                           ;Lab7_redo.c: 250: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2972  00FD4E  0E95               	movlw	149
  2973  00FD50  6E29               	movwf	drawtext@y,c
  2974  00FD52  0E5D               	movlw	low _SW_EWPED_Txt
  2975  00FD54  6E2A               	movwf	drawtext@_text,c
  2976  00FD56  0E00               	movlw	high _SW_EWPED_Txt
  2977  00FD58  6E2B               	movwf	drawtext@_text+1,c
  2978  00FD5A  0EFF               	movlw	255
  2979  00FD5C  6E2D               	movwf	drawtext@color+1,c
  2980  00FD5E  682C               	setf	drawtext@color,c
  2981  00FD60  0E00               	movlw	0
  2982  00FD62  6E2F               	movwf	drawtext@bg+1,c
  2983  00FD64  0E00               	movlw	0
  2984  00FD66  6E2E               	movwf	drawtext@bg,c
  2985  00FD68  0E01               	movlw	1
  2986  00FD6A  6E30               	movwf	drawtext@size,c
  2987  00FD6C  0E3A               	movlw	58
  2988  00FD6E  ECDB  F073         	call	_drawtext
  2989                           
  2990                           ;Lab7_redo.c: 251: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2991  00FD72  0E95               	movlw	149
  2992  00FD74  6E29               	movwf	drawtext@y,c
  2993  00FD76  0E5B               	movlw	low _SW_EWLT_Txt
  2994  00FD78  6E2A               	movwf	drawtext@_text,c
  2995  00FD7A  0E00               	movlw	high _SW_EWLT_Txt
  2996  00FD7C  6E2B               	movwf	drawtext@_text+1,c
  2997  00FD7E  0EFF               	movlw	255
  2998  00FD80  6E2D               	movwf	drawtext@color+1,c
  2999  00FD82  682C               	setf	drawtext@color,c
  3000  00FD84  0E00               	movlw	0
  3001  00FD86  6E2F               	movwf	drawtext@bg+1,c
  3002  00FD88  0E00               	movlw	0
  3003  00FD8A  6E2E               	movwf	drawtext@bg,c
  3004  00FD8C  0E01               	movlw	1
  3005  00FD8E  6E30               	movwf	drawtext@size,c
  3006  00FD90  0E57               	movlw	87
  3007  00FD92  ECDB  F073         	call	_drawtext
  3008                           
  3009                           ;Lab7_redo.c: 252: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3010  00FD96  0E95               	movlw	149
  3011  00FD98  6E29               	movwf	drawtext@y,c
  3012  00FD9A  0E5F               	movlw	low _SW_MODE_Txt
  3013  00FD9C  6E2A               	movwf	drawtext@_text,c
  3014  00FD9E  0E00               	movlw	high _SW_MODE_Txt
  3015  00FDA0  6E2B               	movwf	drawtext@_text+1,c
  3016  00FDA2  0EFF               	movlw	255
  3017  00FDA4  6E2D               	movwf	drawtext@color+1,c
  3018  00FDA6  682C               	setf	drawtext@color,c
  3019  00FDA8  0E00               	movlw	0
  3020  00FDAA  6E2F               	movwf	drawtext@bg+1,c
  3021  00FDAC  0E00               	movlw	0
  3022  00FDAE  6E2E               	movwf	drawtext@bg,c
  3023  00FDB0  0E01               	movlw	1
  3024  00FDB2  6E30               	movwf	drawtext@size,c
  3025  00FDB4  0E70               	movlw	112
  3026  00FDB6  ECDB  F073         	call	_drawtext
  3027  00FDBA  0012               	return		;funcret
  3028  00FDBC                     __end_of_Initialize_Screen:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postdec1	equ	0xFE5
  3037                           fsr1l	equ	0xFE1
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function _fillScreen *****************
  3041 ;; Defined at:
  3042 ;;		line 652 in file "ST7735_TFT.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  color           2   19[COMRAM] unsigned int 
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;		None
  3047 ;; Return value:  Size  Location     Type
  3048 ;;		None               void
  3049 ;; Registers used:
  3050 ;;		wreg, status,2, status,0, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:        2 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    4
  3063 ;; This function calls:
  3064 ;;		_fillRectangle
  3065 ;; This function is called by:
  3066 ;;		_Initialize_Screen
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text6
  3071  00DA26                     __ptext6:
  3072                           	opt stack 0
  3073  00DA26                     _fillScreen:
  3074                           	opt stack 25
  3075                           
  3076                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3077                           
  3078                           ;incstack = 0
  3079  00DA26  0E00               	movlw	0
  3080  00DA28  6E08               	movwf	fillRectangle@y,c
  3081  00DA2A  0E80               	movlw	128
  3082  00DA2C  6E09               	movwf	fillRectangle@w,c
  3083  00DA2E  0EA0               	movlw	160
  3084  00DA30  6E0A               	movwf	fillRectangle@h,c
  3085  00DA32  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3086  00DA36  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3087  00DA3A  0E00               	movlw	0
  3088  00DA3C  EC6D  F073         	call	_fillRectangle
  3089  00DA40  0012               	return		;funcret
  3090  00DA42                     __end_of_fillScreen:
  3091                           	opt stack 0
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           postinc0	equ	0xFEE
  3097                           wreg	equ	0xFE8
  3098                           postdec1	equ	0xFE5
  3099                           fsr1l	equ	0xFE1
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function _fillRectangle *****************
  3103 ;; Defined at:
  3104 ;;		line 536 in file "ST7735_TFT.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  x               1    wreg     unsigned char 
  3107 ;;  y               1    7[COMRAM] unsigned char 
  3108 ;;  w               1    8[COMRAM] unsigned char 
  3109 ;;  h               1    9[COMRAM] unsigned char 
  3110 ;;  color           2   10[COMRAM] unsigned int 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  x               1   18[COMRAM] unsigned char 
  3113 ;;  lo              1   17[COMRAM] unsigned char 
  3114 ;;  hi              1   16[COMRAM] unsigned char 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;		None               void
  3117 ;; Registers used:
  3118 ;;		wreg, status,2, status,0, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3124 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;Total ram usage:       12 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    3
  3131 ;; This function calls:
  3132 ;;		_setAddrWindow
  3133 ;;		_spiwrite
  3134 ;; This function is called by:
  3135 ;;		_fillScreen
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text7
  3140  00E6DA                     __ptext7:
  3141                           	opt stack 0
  3142  00E6DA                     _fillRectangle:
  3143                           	opt stack 25
  3144                           
  3145                           ;incstack = 0
  3146                           ;fillRectangle@x stored from wreg
  3147  00E6DA  6E13               	movwf	fillRectangle@x,c
  3148                           
  3149                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3150                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3151  00E6DC  0E80               	movlw	128
  3152  00E6DE  6013               	cpfslt	fillRectangle@x,c
  3153  00E6E0  D069               	goto	l226
  3154  00E6E2  0E9F               	movlw	159
  3155  00E6E4  6408               	cpfsgt	fillRectangle@y,c
  3156  00E6E6  D001               	goto	l3203
  3157                           
  3158                           ;ST7735_TFT.c: 540: return;
  3159  00E6E8  D065               	goto	l226
  3160  00E6EA                     l3203:
  3161                           
  3162                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3163  00E6EA  0EFF               	movlw	255
  3164  00E6EC  6E0D               	movwf	??_fillRectangle& (0+255),c
  3165  00E6EE  0EFF               	movlw	255
  3166  00E6F0  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3167  00E6F2  5009               	movf	fillRectangle@w,w,c
  3168  00E6F4  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3169  00E6F8  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3170  00E6FA  260F               	addwf	??_fillRectangle+2,f,c
  3171  00E6FC  0E00               	movlw	0
  3172  00E6FE  2210               	addwfc	??_fillRectangle+3,f,c
  3173  00E700  500D               	movf	??_fillRectangle,w,c
  3174  00E702  260F               	addwf	??_fillRectangle+2,f,c
  3175  00E704  500E               	movf	??_fillRectangle+1,w,c
  3176  00E706  2210               	addwfc	??_fillRectangle+3,f,c
  3177  00E708  BE10               	btfsc	??_fillRectangle+3,7,c
  3178  00E70A  D00A               	goto	l227
  3179  00E70C  5010               	movf	??_fillRectangle+3,w,c
  3180  00E70E  E104               	bnz	u2090
  3181  00E710  0E80               	movlw	128
  3182  00E712  5C0F               	subwf	??_fillRectangle+2,w,c
  3183  00E714  A0D8               	btfss	status,0,c
  3184  00E716  D004               	goto	l227
  3185  00E718                     u2090:
  3186                           
  3187                           ;ST7735_TFT.c: 542: w = 128 - x;
  3188  00E718  5013               	movf	fillRectangle@x,w,c
  3189  00E71A  0800               	sublw	0
  3190  00E71C  0F80               	addlw	128
  3191  00E71E  6E09               	movwf	fillRectangle@w,c
  3192  00E720                     l227:
  3193                           
  3194                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3195  00E720  0EFF               	movlw	255
  3196  00E722  6E0D               	movwf	??_fillRectangle& (0+255),c
  3197  00E724  0EFF               	movlw	255
  3198  00E726  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3199  00E728  500A               	movf	fillRectangle@h,w,c
  3200  00E72A  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3201  00E72E  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3202  00E730  260F               	addwf	??_fillRectangle+2,f,c
  3203  00E732  0E00               	movlw	0
  3204  00E734  2210               	addwfc	??_fillRectangle+3,f,c
  3205  00E736  500D               	movf	??_fillRectangle,w,c
  3206  00E738  260F               	addwf	??_fillRectangle+2,f,c
  3207  00E73A  500E               	movf	??_fillRectangle+1,w,c
  3208  00E73C  2210               	addwfc	??_fillRectangle+3,f,c
  3209  00E73E  BE10               	btfsc	??_fillRectangle+3,7,c
  3210  00E740  D00B               	goto	l3209
  3211  00E742  5010               	movf	??_fillRectangle+3,w,c
  3212  00E744  E104               	bnz	u2100
  3213  00E746  0EA0               	movlw	160
  3214  00E748  5C0F               	subwf	??_fillRectangle+2,w,c
  3215  00E74A  A0D8               	btfss	status,0,c
  3216  00E74C  D005               	goto	l3209
  3217  00E74E                     u2100:
  3218                           
  3219                           ;ST7735_TFT.c: 544: h = 160 - y;
  3220  00E74E  5008               	movf	fillRectangle@y,w,c
  3221  00E750  0800               	sublw	0
  3222  00E752  0FA0               	addlw	160
  3223  00E754  6E0A               	movwf	fillRectangle@h,c
  3224  00E756  D000               	goto	l3209
  3225  00E758                     l3209:
  3226                           
  3227                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3228  00E758  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3229  00E75C  5013               	movf	fillRectangle@x,w,c
  3230  00E75E  2409               	addwf	fillRectangle@w,w,c
  3231  00E760  6E0D               	movwf	??_fillRectangle& (0+255),c
  3232  00E762  040D               	decf	??_fillRectangle,w,c
  3233  00E764  6E05               	movwf	setAddrWindow@x1,c
  3234  00E766  5008               	movf	fillRectangle@y,w,c
  3235  00E768  240A               	addwf	fillRectangle@h,w,c
  3236  00E76A  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3237  00E76C  040E               	decf	??_fillRectangle+1,w,c
  3238  00E76E  6E06               	movwf	setAddrWindow@y1,c
  3239  00E770  5013               	movf	fillRectangle@x,w,c
  3240  00E772  ECE1  F06E         	call	_setAddrWindow
  3241                           
  3242                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3243  00E776  500C               	movf	fillRectangle@color+1,w,c
  3244  00E778  6E11               	movwf	fillRectangle@hi,c
  3245  00E77A  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3246                           
  3247                           ;ST7735_TFT.c: 547: PORTDbits.RD3 = 1;
  3248  00E77E  8683               	bsf	3971,3,c	;volatile
  3249                           
  3250                           ;ST7735_TFT.c: 548: PORTDbits.RD4 = 0;
  3251  00E780  9883               	bcf	3971,4,c	;volatile
  3252                           
  3253                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3254  00E782  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3255  00E786                     l3221:
  3256  00E786  5008               	movf	fillRectangle@y,w,c
  3257  00E788  B4D8               	btfsc	status,2,c
  3258  00E78A  D013               	goto	l230
  3259  00E78C  D001               	goto	l229
  3260  00E78E  D011               	goto	l230
  3261  00E790                     l229:
  3262                           
  3263                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3264  00E790  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3265  00E794                     l3225:
  3266  00E794  5013               	movf	fillRectangle@x,w,c
  3267  00E796  B4D8               	btfsc	status,2,c
  3268  00E798  D00A               	goto	l3235
  3269  00E79A  D001               	goto	l3229
  3270  00E79C  D008               	goto	l3235
  3271  00E79E                     l3229:
  3272                           
  3273                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3274  00E79E  5011               	movf	fillRectangle@hi,w,c
  3275  00E7A0  ECDD  F06C         	call	_spiwrite
  3276                           
  3277                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3278  00E7A4  5012               	movf	fillRectangle@lo,w,c
  3279  00E7A6  ECDD  F06C         	call	_spiwrite
  3280  00E7AA  0613               	decf	fillRectangle@x,f,c
  3281  00E7AC  D7F3               	goto	l3225
  3282  00E7AE                     l3235:
  3283  00E7AE  0608               	decf	fillRectangle@y,f,c
  3284  00E7B0  D7EA               	goto	l3221
  3285  00E7B2                     l230:
  3286                           
  3287                           ;ST7735_TFT.c: 554: }
  3288                           ;ST7735_TFT.c: 555: }
  3289                           ;ST7735_TFT.c: 556: PORTDbits.RD4 = 1;
  3290  00E7B2  8883               	bsf	3971,4,c	;volatile
  3291  00E7B4                     l226:
  3292  00E7B4  0012               	return		;funcret
  3293  00E7B6                     __end_of_fillRectangle:
  3294                           	opt stack 0
  3295                           tblptru	equ	0xFF8
  3296                           tblptrh	equ	0xFF7
  3297                           tblptrl	equ	0xFF6
  3298                           tablat	equ	0xFF5
  3299                           postinc0	equ	0xFEE
  3300                           wreg	equ	0xFE8
  3301                           postdec1	equ	0xFE5
  3302                           fsr1l	equ	0xFE1
  3303                           status	equ	0xFD8
  3304                           
  3305 ;; *************** function _drawRect *****************
  3306 ;; Defined at:
  3307 ;;		line 718 in file "ST7735_TFT.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  x               2   18[COMRAM] unsigned int 
  3310 ;;  y               2   20[COMRAM] unsigned int 
  3311 ;;  w               2   22[COMRAM] unsigned int 
  3312 ;;  h               2   24[COMRAM] unsigned int 
  3313 ;;  color           2   26[COMRAM] unsigned int 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;		None               void
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3325 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;Total ram usage:       11 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    4
  3332 ;; This function calls:
  3333 ;;		_drawFastHLine
  3334 ;;		_drawFastVLine
  3335 ;; This function is called by:
  3336 ;;		_Initialize_Screen
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text8
  3341  00DEB4                     __ptext8:
  3342                           	opt stack 0
  3343  00DEB4                     _drawRect:
  3344                           	opt stack 25
  3345                           
  3346                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3347                           
  3348                           ;incstack = 0
  3349  00DEB4  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3350  00DEB8  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3351  00DEBC  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3352  00DEC0  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3353  00DEC4  5013               	movf	drawRect@x,w,c
  3354  00DEC6  ECC6  F070         	call	_drawFastHLine
  3355                           
  3356                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3357  00DECA  5015               	movf	drawRect@y,w,c
  3358  00DECC  2419               	addwf	drawRect@h,w,c
  3359  00DECE  6E1D               	movwf	??_drawRect& (0+255),c
  3360  00DED0  041D               	decf	??_drawRect,w,c
  3361  00DED2  6E08               	movwf	drawFastHLine@y,c
  3362  00DED4  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3363  00DED8  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3364  00DEDC  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3365  00DEE0  5013               	movf	drawRect@x,w,c
  3366  00DEE2  ECC6  F070         	call	_drawFastHLine
  3367                           
  3368                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3369  00DEE6  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3370  00DEEA  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3371  00DEEE  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3372  00DEF2  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3373  00DEF6  5013               	movf	drawRect@x,w,c
  3374  00DEF8  EC82  F070         	call	_drawFastVLine
  3375                           
  3376                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3377  00DEFC  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3378  00DF00  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3379  00DF04  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3380  00DF08  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3381  00DF0C  5013               	movf	drawRect@x,w,c
  3382  00DF0E  2417               	addwf	drawRect@w,w,c
  3383  00DF10  6E1D               	movwf	??_drawRect& (0+255),c
  3384  00DF12  041D               	decf	??_drawRect,w,c
  3385  00DF14  EC82  F070         	call	_drawFastVLine
  3386  00DF18  0012               	return		;funcret
  3387  00DF1A                     __end_of_drawRect:
  3388                           	opt stack 0
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postdec1	equ	0xFE5
  3396                           fsr1l	equ	0xFE1
  3397                           status	equ	0xFD8
  3398                           
  3399 ;; *************** function _drawFastHLine *****************
  3400 ;; Defined at:
  3401 ;;		line 657 in file "ST7735_TFT.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  x               1    wreg     unsigned char 
  3404 ;;  y               1    7[COMRAM] unsigned char 
  3405 ;;  w               1    8[COMRAM] unsigned char 
  3406 ;;  color           2    9[COMRAM] unsigned int 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  x               1   17[COMRAM] unsigned char 
  3409 ;;  lo              1   16[COMRAM] unsigned char 
  3410 ;;  hi              1   15[COMRAM] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;		None               void
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3420 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;Total ram usage:       11 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    3
  3427 ;; This function calls:
  3428 ;;		_setAddrWindow
  3429 ;;		_spiwrite
  3430 ;; This function is called by:
  3431 ;;		_drawRect
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text9
  3436  00E18C                     __ptext9:
  3437                           	opt stack 0
  3438  00E18C                     _drawFastHLine:
  3439                           	opt stack 25
  3440                           
  3441                           ;incstack = 0
  3442                           ;drawFastHLine@x stored from wreg
  3443  00E18C  6E12               	movwf	drawFastHLine@x,c
  3444                           
  3445                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3446                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3447  00E18E  0E80               	movlw	128
  3448  00E190  6012               	cpfslt	drawFastHLine@x,c
  3449  00E192  D03F               	goto	l271
  3450  00E194  0E9F               	movlw	159
  3451  00E196  6408               	cpfsgt	drawFastHLine@y,c
  3452  00E198  D001               	goto	l3243
  3453                           
  3454                           ;ST7735_TFT.c: 661: return;
  3455  00E19A  D03B               	goto	l271
  3456  00E19C                     l3243:
  3457                           
  3458                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3459  00E19C  0EFF               	movlw	255
  3460  00E19E  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3461  00E1A0  0EFF               	movlw	255
  3462  00E1A2  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3463  00E1A4  5009               	movf	drawFastHLine@w,w,c
  3464  00E1A6  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3465  00E1AA  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3466  00E1AC  260E               	addwf	??_drawFastHLine+2,f,c
  3467  00E1AE  0E00               	movlw	0
  3468  00E1B0  220F               	addwfc	??_drawFastHLine+3,f,c
  3469  00E1B2  500C               	movf	??_drawFastHLine,w,c
  3470  00E1B4  260E               	addwf	??_drawFastHLine+2,f,c
  3471  00E1B6  500D               	movf	??_drawFastHLine+1,w,c
  3472  00E1B8  220F               	addwfc	??_drawFastHLine+3,f,c
  3473  00E1BA  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3474  00E1BC  D00B               	goto	l3247
  3475  00E1BE  500F               	movf	??_drawFastHLine+3,w,c
  3476  00E1C0  E104               	bnz	u2170
  3477  00E1C2  0E80               	movlw	128
  3478  00E1C4  5C0E               	subwf	??_drawFastHLine+2,w,c
  3479  00E1C6  A0D8               	btfss	status,0,c
  3480  00E1C8  D005               	goto	l3247
  3481  00E1CA                     u2170:
  3482                           
  3483                           ;ST7735_TFT.c: 663: w = 128 - x;
  3484  00E1CA  5012               	movf	drawFastHLine@x,w,c
  3485  00E1CC  0800               	sublw	0
  3486  00E1CE  0F80               	addlw	128
  3487  00E1D0  6E09               	movwf	drawFastHLine@w,c
  3488  00E1D2  D000               	goto	l3247
  3489  00E1D4                     l3247:
  3490                           
  3491                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3492  00E1D4  500B               	movf	drawFastHLine@color+1,w,c
  3493  00E1D6  6E10               	movwf	drawFastHLine@hi,c
  3494  00E1D8  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3495                           
  3496                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3497  00E1DC  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3498  00E1E0  5012               	movf	drawFastHLine@x,w,c
  3499  00E1E2  2409               	addwf	drawFastHLine@w,w,c
  3500  00E1E4  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3501  00E1E6  040C               	decf	??_drawFastHLine,w,c
  3502  00E1E8  6E05               	movwf	setAddrWindow@x1,c
  3503  00E1EA  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3504  00E1EE  5012               	movf	drawFastHLine@x,w,c
  3505  00E1F0  ECE1  F06E         	call	_setAddrWindow
  3506                           
  3507                           ;ST7735_TFT.c: 666: PORTDbits.RD3 = 1;
  3508  00E1F4  8683               	bsf	3971,3,c	;volatile
  3509                           
  3510                           ;ST7735_TFT.c: 667: PORTDbits.RD4 = 0;
  3511  00E1F6  9883               	bcf	3971,4,c	;volatile
  3512                           
  3513                           ;ST7735_TFT.c: 669: while (w--) {
  3514  00E1F8  D007               	goto	l3259
  3515  00E1FA                     l3257:
  3516                           
  3517                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3518  00E1FA  5010               	movf	drawFastHLine@hi,w,c
  3519  00E1FC  ECDD  F06C         	call	_spiwrite
  3520                           
  3521                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3522  00E200  5011               	movf	drawFastHLine@lo,w,c
  3523  00E202  ECDD  F06C         	call	_spiwrite
  3524  00E206  D000               	goto	l3259
  3525  00E208                     l3259:
  3526  00E208  0609               	decf	drawFastHLine@w,f,c
  3527  00E20A  2809               	incf	drawFastHLine@w,w,c
  3528  00E20C  A4D8               	btfss	status,2,c
  3529  00E20E  D7F5               	goto	l3257
  3530                           
  3531                           ;ST7735_TFT.c: 672: }
  3532                           ;ST7735_TFT.c: 673: PORTDbits.RD4 = 1;
  3533  00E210  8883               	bsf	3971,4,c	;volatile
  3534  00E212                     l271:
  3535  00E212  0012               	return		;funcret
  3536  00E214                     __end_of_drawFastHLine:
  3537                           	opt stack 0
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           postdec1	equ	0xFE5
  3545                           fsr1l	equ	0xFE1
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _TFT_GreenTab_Initialize *****************
  3549 ;; Defined at:
  3550 ;;		line 677 in file "ST7735_TFT.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;		None               void
  3557 ;; Registers used:
  3558 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    3
  3571 ;; This function calls:
  3572 ;;		_Rcmd1
  3573 ;;		_Rcmd2red
  3574 ;;		_Rcmd3
  3575 ;;		_write_command
  3576 ;;		_write_data
  3577 ;; This function is called by:
  3578 ;;		_Initialize_Screen
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text10
  3583  00DAB4                     __ptext10:
  3584                           	opt stack 0
  3585  00DAB4                     _TFT_GreenTab_Initialize:
  3586                           	opt stack 26
  3587                           
  3588                           ;ST7735_TFT.c: 679: PORTDbits.RD4 = 1;
  3589                           
  3590                           ;incstack = 0
  3591  00DAB4  8883               	bsf	3971,4,c	;volatile
  3592                           
  3593                           ;ST7735_TFT.c: 680: PORTDbits.RD3 = 0;
  3594  00DAB6  9683               	bcf	3971,3,c	;volatile
  3595                           
  3596                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3597  00DAB8  0E80               	movlw	128
  3598  00DABA  6EC7               	movwf	4039,c	;volatile
  3599                           
  3600                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3601  00DABC  0E30               	movlw	48
  3602  00DABE  6EC6               	movwf	4038,c	;volatile
  3603                           
  3604                           ;ST7735_TFT.c: 686: Rcmd1();
  3605  00DAC0  EC34  F075         	call	_Rcmd1	;wreg free
  3606                           
  3607                           ;ST7735_TFT.c: 687: Rcmd2red();
  3608  00DAC4  ECF4  F06D         	call	_Rcmd2red	;wreg free
  3609                           
  3610                           ;ST7735_TFT.c: 688: Rcmd3();
  3611  00DAC8  ECBB  F074         	call	_Rcmd3	;wreg free
  3612                           
  3613                           ;ST7735_TFT.c: 689: write_command(0x36);
  3614  00DACC  0E36               	movlw	54
  3615  00DACE  ECBB  F06C         	call	_write_command
  3616                           
  3617                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3618  00DAD2  0EC0               	movlw	192
  3619  00DAD4  ECC3  F06C         	call	_write_data
  3620                           
  3621                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3622  00DAD8  0E01               	movlw	1
  3623  00DADA  6E77               	movwf	__tft_type,c
  3624  00DADC  0012               	return		;funcret
  3625  00DADE                     __end_of_TFT_GreenTab_Initialize:
  3626                           	opt stack 0
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           postinc0	equ	0xFEE
  3632                           wreg	equ	0xFE8
  3633                           postdec1	equ	0xFE5
  3634                           fsr1l	equ	0xFE1
  3635                           status	equ	0xFD8
  3636                           
  3637 ;; *************** function _Rcmd3 *****************
  3638 ;; Defined at:
  3639 ;;		line 371 in file "ST7735_TFT.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;		None
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;		None
  3644 ;; Return value:  Size  Location     Type
  3645 ;;		None               void
  3646 ;; Registers used:
  3647 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;Total ram usage:        0 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:    2
  3660 ;; This function calls:
  3661 ;;		_delay_ms
  3662 ;;		_write_command
  3663 ;;		_write_data
  3664 ;; This function is called by:
  3665 ;;		_TFT_GreenTab_Initialize
  3666 ;;		_TFT_BlackTab_Initialize
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text11
  3671  00E976                     __ptext11:
  3672                           	opt stack 0
  3673  00E976                     _Rcmd3:
  3674                           	opt stack 26
  3675                           
  3676                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3677                           
  3678                           ;incstack = 0
  3679  00E976  0EE0               	movlw	224
  3680  00E978  ECBB  F06C         	call	_write_command
  3681                           
  3682                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3683  00E97C  0E02               	movlw	2
  3684  00E97E  ECC3  F06C         	call	_write_data
  3685  00E982  0E1C               	movlw	28
  3686  00E984  ECC3  F06C         	call	_write_data
  3687  00E988  0E07               	movlw	7
  3688  00E98A  ECC3  F06C         	call	_write_data
  3689  00E98E  0E12               	movlw	18
  3690  00E990  ECC3  F06C         	call	_write_data
  3691                           
  3692                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3693  00E994  0E37               	movlw	55
  3694  00E996  ECC3  F06C         	call	_write_data
  3695  00E99A  0E32               	movlw	50
  3696  00E99C  ECC3  F06C         	call	_write_data
  3697  00E9A0  0E29               	movlw	41
  3698  00E9A2  ECC3  F06C         	call	_write_data
  3699  00E9A6  0E2D               	movlw	45
  3700  00E9A8  ECC3  F06C         	call	_write_data
  3701                           
  3702                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3703  00E9AC  0E29               	movlw	41
  3704  00E9AE  ECC3  F06C         	call	_write_data
  3705  00E9B2  0E25               	movlw	37
  3706  00E9B4  ECC3  F06C         	call	_write_data
  3707  00E9B8  0E2B               	movlw	43
  3708  00E9BA  ECC3  F06C         	call	_write_data
  3709  00E9BE  0E39               	movlw	57
  3710  00E9C0  ECC3  F06C         	call	_write_data
  3711                           
  3712                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3713  00E9C4  0E00               	movlw	0
  3714  00E9C6  ECC3  F06C         	call	_write_data
  3715  00E9CA  0E01               	movlw	1
  3716  00E9CC  ECC3  F06C         	call	_write_data
  3717  00E9D0  0E03               	movlw	3
  3718  00E9D2  ECC3  F06C         	call	_write_data
  3719  00E9D6  0E10               	movlw	16
  3720  00E9D8  ECC3  F06C         	call	_write_data
  3721                           
  3722                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3723  00E9DC  0EE1               	movlw	225
  3724  00E9DE  ECBB  F06C         	call	_write_command
  3725                           
  3726                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3727  00E9E2  0E03               	movlw	3
  3728  00E9E4  ECC3  F06C         	call	_write_data
  3729  00E9E8  0E1D               	movlw	29
  3730  00E9EA  ECC3  F06C         	call	_write_data
  3731  00E9EE  0E07               	movlw	7
  3732  00E9F0  ECC3  F06C         	call	_write_data
  3733  00E9F4  0E06               	movlw	6
  3734  00E9F6  ECC3  F06C         	call	_write_data
  3735                           
  3736                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3737  00E9FA  0E2E               	movlw	46
  3738  00E9FC  ECC3  F06C         	call	_write_data
  3739  00EA00  0E2C               	movlw	44
  3740  00EA02  ECC3  F06C         	call	_write_data
  3741  00EA06  0E29               	movlw	41
  3742  00EA08  ECC3  F06C         	call	_write_data
  3743  00EA0C  0E2D               	movlw	45
  3744  00EA0E  ECC3  F06C         	call	_write_data
  3745                           
  3746                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3747  00EA12  0E2E               	movlw	46
  3748  00EA14  ECC3  F06C         	call	_write_data
  3749  00EA18  0E2E               	movlw	46
  3750  00EA1A  ECC3  F06C         	call	_write_data
  3751  00EA1E  0E37               	movlw	55
  3752  00EA20  ECC3  F06C         	call	_write_data
  3753  00EA24  0E3F               	movlw	63
  3754  00EA26  ECC3  F06C         	call	_write_data
  3755                           
  3756                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3757  00EA2A  0E00               	movlw	0
  3758  00EA2C  ECC3  F06C         	call	_write_data
  3759  00EA30  0E00               	movlw	0
  3760  00EA32  ECC3  F06C         	call	_write_data
  3761  00EA36  0E02               	movlw	2
  3762  00EA38  ECC3  F06C         	call	_write_data
  3763  00EA3C  0E10               	movlw	16
  3764  00EA3E  ECC3  F06C         	call	_write_data
  3765                           
  3766                           ;ST7735_TFT.c: 383: write_command(0x13);
  3767  00EA42  0E13               	movlw	19
  3768  00EA44  ECBB  F06C         	call	_write_command
  3769                           
  3770                           ;ST7735_TFT.c: 384: delay_ms(10);
  3771  00EA48  0E00               	movlw	0
  3772  00EA4A  6E08               	movwf	delay_ms@ms+1,c
  3773  00EA4C  0E0A               	movlw	10
  3774  00EA4E  6E07               	movwf	delay_ms@ms,c
  3775  00EA50  EC31  F06F         	call	_delay_ms	;wreg free
  3776                           
  3777                           ;ST7735_TFT.c: 385: write_command(0x29);
  3778  00EA54  0E29               	movlw	41
  3779  00EA56  ECBB  F06C         	call	_write_command
  3780                           
  3781                           ;ST7735_TFT.c: 386: delay_ms(100);
  3782  00EA5A  0E00               	movlw	0
  3783  00EA5C  6E08               	movwf	delay_ms@ms+1,c
  3784  00EA5E  0E64               	movlw	100
  3785  00EA60  6E07               	movwf	delay_ms@ms,c
  3786  00EA62  EC31  F06F         	call	_delay_ms	;wreg free
  3787  00EA66  0012               	return		;funcret
  3788  00EA68                     __end_of_Rcmd3:
  3789                           	opt stack 0
  3790                           tblptru	equ	0xFF8
  3791                           tblptrh	equ	0xFF7
  3792                           tblptrl	equ	0xFF6
  3793                           tablat	equ	0xFF5
  3794                           postinc0	equ	0xFEE
  3795                           wreg	equ	0xFE8
  3796                           postdec1	equ	0xFE5
  3797                           fsr1l	equ	0xFE1
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _Rcmd2red *****************
  3801 ;; Defined at:
  3802 ;;		line 361 in file "ST7735_TFT.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;		None               void
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;Total ram usage:        0 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    2
  3823 ;; This function calls:
  3824 ;;		_write_command
  3825 ;;		_write_data
  3826 ;; This function is called by:
  3827 ;;		_TFT_GreenTab_Initialize
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text12
  3832  00DBE8                     __ptext12:
  3833                           	opt stack 0
  3834  00DBE8                     _Rcmd2red:
  3835                           	opt stack 26
  3836                           
  3837                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3838                           
  3839                           ;incstack = 0
  3840  00DBE8  0E2A               	movlw	42
  3841  00DBEA  ECBB  F06C         	call	_write_command
  3842                           
  3843                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3844  00DBEE  0E00               	movlw	0
  3845  00DBF0  ECC3  F06C         	call	_write_data
  3846  00DBF4  0E00               	movlw	0
  3847  00DBF6  ECC3  F06C         	call	_write_data
  3848                           
  3849                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3850  00DBFA  0E00               	movlw	0
  3851  00DBFC  ECC3  F06C         	call	_write_data
  3852  00DC00  0E7F               	movlw	127
  3853  00DC02  ECC3  F06C         	call	_write_data
  3854                           
  3855                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3856  00DC06  0E2B               	movlw	43
  3857  00DC08  ECBB  F06C         	call	_write_command
  3858                           
  3859                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3860  00DC0C  0E00               	movlw	0
  3861  00DC0E  ECC3  F06C         	call	_write_data
  3862  00DC12  0E00               	movlw	0
  3863  00DC14  ECC3  F06C         	call	_write_data
  3864                           
  3865                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3866  00DC18  0E00               	movlw	0
  3867  00DC1A  ECC3  F06C         	call	_write_data
  3868  00DC1E  0E9F               	movlw	159
  3869  00DC20  ECC3  F06C         	call	_write_data
  3870  00DC24  0012               	return		;funcret
  3871  00DC26                     __end_of_Rcmd2red:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           postinc0	equ	0xFEE
  3878                           wreg	equ	0xFE8
  3879                           postdec1	equ	0xFE5
  3880                           fsr1l	equ	0xFE1
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function _Rcmd1 *****************
  3884 ;; Defined at:
  3885 ;;		line 314 in file "ST7735_TFT.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;		None
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;		None               void
  3892 ;; Registers used:
  3893 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;Total ram usage:        0 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    2
  3906 ;; This function calls:
  3907 ;;		_delay_ms
  3908 ;;		_write_command
  3909 ;;		_write_data
  3910 ;; This function is called by:
  3911 ;;		_TFT_GreenTab_Initialize
  3912 ;;		_TFT_BlackTab_Initialize
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           	psect	text13
  3917  00EA68                     __ptext13:
  3918                           	opt stack 0
  3919  00EA68                     _Rcmd1:
  3920                           	opt stack 26
  3921                           
  3922                           ;ST7735_TFT.c: 316: write_command(0x01);
  3923                           
  3924                           ;incstack = 0
  3925  00EA68  0E01               	movlw	1
  3926  00EA6A  ECBB  F06C         	call	_write_command
  3927                           
  3928                           ;ST7735_TFT.c: 317: delay_ms(150);
  3929  00EA6E  0E00               	movlw	0
  3930  00EA70  6E08               	movwf	delay_ms@ms+1,c
  3931  00EA72  0E96               	movlw	150
  3932  00EA74  6E07               	movwf	delay_ms@ms,c
  3933  00EA76  EC31  F06F         	call	_delay_ms	;wreg free
  3934                           
  3935                           ;ST7735_TFT.c: 318: write_command(0x11);
  3936  00EA7A  0E11               	movlw	17
  3937  00EA7C  ECBB  F06C         	call	_write_command
  3938                           
  3939                           ;ST7735_TFT.c: 319: delay_ms(500);
  3940  00EA80  0E01               	movlw	1
  3941  00EA82  6E08               	movwf	delay_ms@ms+1,c
  3942  00EA84  0EF4               	movlw	244
  3943  00EA86  6E07               	movwf	delay_ms@ms,c
  3944  00EA88  EC31  F06F         	call	_delay_ms	;wreg free
  3945                           
  3946                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3947  00EA8C  0EB1               	movlw	177
  3948  00EA8E  ECBB  F06C         	call	_write_command
  3949                           
  3950                           ;ST7735_TFT.c: 321: write_data(0x01);
  3951  00EA92  0E01               	movlw	1
  3952  00EA94  ECC3  F06C         	call	_write_data
  3953                           
  3954                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3955  00EA98  0E2C               	movlw	44
  3956  00EA9A  ECC3  F06C         	call	_write_data
  3957                           
  3958                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3959  00EA9E  0E2D               	movlw	45
  3960  00EAA0  ECC3  F06C         	call	_write_data
  3961                           
  3962                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3963  00EAA4  0EB2               	movlw	178
  3964  00EAA6  ECBB  F06C         	call	_write_command
  3965                           
  3966                           ;ST7735_TFT.c: 325: write_data(0x01);
  3967  00EAAA  0E01               	movlw	1
  3968  00EAAC  ECC3  F06C         	call	_write_data
  3969                           
  3970                           ;ST7735_TFT.c: 326: write_data(0x2C);
  3971  00EAB0  0E2C               	movlw	44
  3972  00EAB2  ECC3  F06C         	call	_write_data
  3973                           
  3974                           ;ST7735_TFT.c: 327: write_data(0x2D);
  3975  00EAB6  0E2D               	movlw	45
  3976  00EAB8  ECC3  F06C         	call	_write_data
  3977                           
  3978                           ;ST7735_TFT.c: 328: write_command(0xB3);
  3979  00EABC  0EB3               	movlw	179
  3980  00EABE  ECBB  F06C         	call	_write_command
  3981                           
  3982                           ;ST7735_TFT.c: 329: write_data(0x01);
  3983  00EAC2  0E01               	movlw	1
  3984  00EAC4  ECC3  F06C         	call	_write_data
  3985                           
  3986                           ;ST7735_TFT.c: 330: write_data(0x2C);
  3987  00EAC8  0E2C               	movlw	44
  3988  00EACA  ECC3  F06C         	call	_write_data
  3989                           
  3990                           ;ST7735_TFT.c: 331: write_data(0x2D);
  3991  00EACE  0E2D               	movlw	45
  3992  00EAD0  ECC3  F06C         	call	_write_data
  3993                           
  3994                           ;ST7735_TFT.c: 332: write_data(0x01);
  3995  00EAD4  0E01               	movlw	1
  3996  00EAD6  ECC3  F06C         	call	_write_data
  3997                           
  3998                           ;ST7735_TFT.c: 333: write_data(0x2C);
  3999  00EADA  0E2C               	movlw	44
  4000  00EADC  ECC3  F06C         	call	_write_data
  4001                           
  4002                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4003  00EAE0  0E2D               	movlw	45
  4004  00EAE2  ECC3  F06C         	call	_write_data
  4005                           
  4006                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4007  00EAE6  0EB4               	movlw	180
  4008  00EAE8  ECBB  F06C         	call	_write_command
  4009                           
  4010                           ;ST7735_TFT.c: 336: write_data(0x07);
  4011  00EAEC  0E07               	movlw	7
  4012  00EAEE  ECC3  F06C         	call	_write_data
  4013                           
  4014                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4015  00EAF2  0EC0               	movlw	192
  4016  00EAF4  ECBB  F06C         	call	_write_command
  4017                           
  4018                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4019  00EAF8  0EA2               	movlw	162
  4020  00EAFA  ECC3  F06C         	call	_write_data
  4021                           
  4022                           ;ST7735_TFT.c: 339: write_data(0x02);
  4023  00EAFE  0E02               	movlw	2
  4024  00EB00  ECC3  F06C         	call	_write_data
  4025                           
  4026                           ;ST7735_TFT.c: 340: write_data(0x84);
  4027  00EB04  0E84               	movlw	132
  4028  00EB06  ECC3  F06C         	call	_write_data
  4029                           
  4030                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4031  00EB0A  0EC1               	movlw	193
  4032  00EB0C  ECBB  F06C         	call	_write_command
  4033                           
  4034                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4035  00EB10  0EC5               	movlw	197
  4036  00EB12  ECC3  F06C         	call	_write_data
  4037                           
  4038                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4039  00EB16  0EC2               	movlw	194
  4040  00EB18  ECBB  F06C         	call	_write_command
  4041                           
  4042                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4043  00EB1C  0E0A               	movlw	10
  4044  00EB1E  ECC3  F06C         	call	_write_data
  4045                           
  4046                           ;ST7735_TFT.c: 345: write_data(0x00);
  4047  00EB22  0E00               	movlw	0
  4048  00EB24  ECC3  F06C         	call	_write_data
  4049                           
  4050                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4051  00EB28  0EC3               	movlw	195
  4052  00EB2A  ECBB  F06C         	call	_write_command
  4053                           
  4054                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4055  00EB2E  0E8A               	movlw	138
  4056  00EB30  ECC3  F06C         	call	_write_data
  4057                           
  4058                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4059  00EB34  0E2A               	movlw	42
  4060  00EB36  ECC3  F06C         	call	_write_data
  4061                           
  4062                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4063  00EB3A  0EC4               	movlw	196
  4064  00EB3C  ECBB  F06C         	call	_write_command
  4065                           
  4066                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4067  00EB40  0E8A               	movlw	138
  4068  00EB42  ECC3  F06C         	call	_write_data
  4069                           
  4070                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4071  00EB46  0EEE               	movlw	238
  4072  00EB48  ECC3  F06C         	call	_write_data
  4073                           
  4074                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4075  00EB4C  0EC5               	movlw	197
  4076  00EB4E  ECBB  F06C         	call	_write_command
  4077                           
  4078                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4079  00EB52  0E0E               	movlw	14
  4080  00EB54  ECC3  F06C         	call	_write_data
  4081                           
  4082                           ;ST7735_TFT.c: 354: write_command(0x20);
  4083  00EB58  0E20               	movlw	32
  4084  00EB5A  ECBB  F06C         	call	_write_command
  4085                           
  4086                           ;ST7735_TFT.c: 355: write_command(0x36);
  4087  00EB5E  0E36               	movlw	54
  4088  00EB60  ECBB  F06C         	call	_write_command
  4089                           
  4090                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4091  00EB64  0EC8               	movlw	200
  4092  00EB66  ECC3  F06C         	call	_write_data
  4093                           
  4094                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4095  00EB6A  0E3A               	movlw	58
  4096  00EB6C  ECBB  F06C         	call	_write_command
  4097                           
  4098                           ;ST7735_TFT.c: 358: write_data(0x05);
  4099  00EB70  0E05               	movlw	5
  4100  00EB72  ECC3  F06C         	call	_write_data
  4101  00EB76  0012               	return		;funcret
  4102  00EB78                     __end_of_Rcmd1:
  4103                           	opt stack 0
  4104                           tblptru	equ	0xFF8
  4105                           tblptrh	equ	0xFF7
  4106                           tblptrl	equ	0xFF6
  4107                           tablat	equ	0xFF5
  4108                           postinc0	equ	0xFEE
  4109                           wreg	equ	0xFE8
  4110                           postdec1	equ	0xFE5
  4111                           fsr1l	equ	0xFE1
  4112                           status	equ	0xFD8
  4113                           
  4114 ;; *************** function _LCD_Reset *****************
  4115 ;; Defined at:
  4116 ;;		line 250 in file "ST7735_TFT.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;		None               void
  4123 ;; Registers used:
  4124 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;Total ram usage:        0 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    2
  4137 ;; This function calls:
  4138 ;;		_delay_ms
  4139 ;; This function is called by:
  4140 ;;		_Initialize_Screen
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text14
  4145  00D9A8                     __ptext14:
  4146                           	opt stack 0
  4147  00D9A8                     _LCD_Reset:
  4148                           	opt stack 27
  4149                           
  4150                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  4151                           
  4152                           ;incstack = 0
  4153  00D9A8  9483               	bcf	3971,2,c	;volatile
  4154                           
  4155                           ;ST7735_TFT.c: 253: delay_ms(100);
  4156  00D9AA  0E00               	movlw	0
  4157  00D9AC  6E08               	movwf	delay_ms@ms+1,c
  4158  00D9AE  0E64               	movlw	100
  4159  00D9B0  6E07               	movwf	delay_ms@ms,c
  4160  00D9B2  EC31  F06F         	call	_delay_ms	;wreg free
  4161                           
  4162                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4163  00D9B6  8483               	bsf	3971,2,c	;volatile
  4164  00D9B8  0012               	return		;funcret
  4165  00D9BA                     __end_of_LCD_Reset:
  4166                           	opt stack 0
  4167                           tblptru	equ	0xFF8
  4168                           tblptrh	equ	0xFF7
  4169                           tblptrl	equ	0xFF6
  4170                           tablat	equ	0xFF5
  4171                           postinc0	equ	0xFEE
  4172                           wreg	equ	0xFE8
  4173                           postdec1	equ	0xFE5
  4174                           fsr1l	equ	0xFE1
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _delay_ms *****************
  4178 ;; Defined at:
  4179 ;;		line 97 in file "ST7735_TFT.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  ms              2    6[COMRAM] int 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  count           2   10[COMRAM] int 
  4184 ;; Return value:  Size  Location     Type
  4185 ;;		None               void
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;Total ram usage:        6 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    1
  4200 ;; This function calls:
  4201 ;;		___wmul
  4202 ;; This function is called by:
  4203 ;;		_LCD_Reset
  4204 ;;		_Rcmd1
  4205 ;;		_Rcmd3
  4206 ;;		_Bcmd
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text15
  4211  00DE62                     __ptext15:
  4212                           	opt stack 0
  4213  00DE62                     _delay_ms:
  4214                           	opt stack 26
  4215                           
  4216                           ;ST7735_TFT.c: 103: int count;
  4217                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4218                           
  4219                           ;incstack = 0
  4220  00DE62  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  4221  00DE66  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4222  00DE6A  0E00               	movlw	0
  4223  00DE6C  6E04               	movwf	___wmul@multiplicand+1,c
  4224  00DE6E  0EFA               	movlw	250
  4225  00DE70  6E03               	movwf	___wmul@multiplicand,c
  4226  00DE72  EC46  F06D         	call	___wmul	;wreg free
  4227  00DE76  C001  F00B         	movff	?___wmul,delay_ms@count
  4228  00DE7A  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  4229                           
  4230                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4231  00DE7E  C00B  F009         	movff	delay_ms@count,??_delay_ms
  4232  00DE82  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  4233  00DE86  1E09               	comf	??_delay_ms,f,c
  4234  00DE88  1E0A               	comf	??_delay_ms+1,f,c
  4235  00DE8A  4A09               	infsnz	??_delay_ms,f,c
  4236  00DE8C  2A0A               	incf	??_delay_ms+1,f,c
  4237  00DE8E  0EFF               	movlw	255
  4238  00DE90  2409               	addwf	??_delay_ms,w,c
  4239  00DE92  6E0B               	movwf	delay_ms@count,c
  4240  00DE94  0EFF               	movlw	255
  4241  00DE96  200A               	addwfc	??_delay_ms+1,w,c
  4242  00DE98  6E0C               	movwf	delay_ms@count+1,c
  4243                           
  4244                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4245  00DE9A  0EB8               	movlw	184
  4246  00DE9C  6EB1               	movwf	4017,c	;volatile
  4247                           
  4248                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4249  00DE9E  C00B  FFD6         	movff	delay_ms@count,4054	;volatile
  4250                           
  4251                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4252  00DEA2  500C               	movf	delay_ms@count+1,w,c
  4253  00DEA4  6ED7               	movwf	4055,c	;volatile
  4254                           
  4255                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4256  00DEA6  92A1               	bcf	4001,1,c	;volatile
  4257                           
  4258                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4259  00DEA8  80B1               	bsf	4017,0,c	;volatile
  4260                           
  4261                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4262  00DEAA  D000               	goto	l113
  4263  00DEAC                     l113:
  4264  00DEAC  A2A1               	btfss	4001,1,c	;volatile
  4265  00DEAE  D7FE               	goto	l113
  4266                           
  4267                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4268  00DEB0  90B1               	bcf	4017,0,c	;volatile
  4269  00DEB2  0012               	return		;funcret
  4270  00DEB4                     __end_of_delay_ms:
  4271                           	opt stack 0
  4272                           tblptru	equ	0xFF8
  4273                           tblptrh	equ	0xFF7
  4274                           tblptrl	equ	0xFF6
  4275                           tablat	equ	0xFF5
  4276                           postinc0	equ	0xFEE
  4277                           wreg	equ	0xFE8
  4278                           postdec1	equ	0xFE5
  4279                           fsr1l	equ	0xFE1
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function _Init_ADC *****************
  4283 ;; Defined at:
  4284 ;;		line 306 in file "Lab7_redo.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;		None
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;		None               void
  4291 ;; Registers used:
  4292 ;;		wreg, status,2
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;Total ram usage:        0 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_main
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text16
  4312  00D968                     __ptext16:
  4313                           	opt stack 0
  4314  00D968                     _Init_ADC:
  4315                           	opt stack 30
  4316                           
  4317                           ;Lab7_redo.c: 308: ADCON0 = 0x01;
  4318                           
  4319                           ;incstack = 0
  4320  00D968  0E01               	movlw	1
  4321  00D96A  6EC2               	movwf	4034,c	;volatile
  4322                           
  4323                           ;Lab7_redo.c: 309: ADCON1= 0x0E;
  4324  00D96C  0E0E               	movlw	14
  4325  00D96E  6EC1               	movwf	4033,c	;volatile
  4326                           
  4327                           ;Lab7_redo.c: 310: ADCON2= 0xA9;
  4328  00D970  0EA9               	movlw	169
  4329  00D972  6EC0               	movwf	4032,c	;volatile
  4330  00D974  0012               	return		;funcret
  4331  00D976                     __end_of_Init_ADC:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           postdec1	equ	0xFE5
  4340                           fsr1l	equ	0xFE1
  4341                           status	equ	0xFD8
  4342                           
  4343 ;; *************** function _Day_Mode *****************
  4344 ;; Defined at:
  4345 ;;		line 424 in file "Lab7_redo.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;		None
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;		None
  4350 ;; Return value:  Size  Location     Type
  4351 ;;		None               void
  4352 ;; Registers used:
  4353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;Total ram usage:        0 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:   10
  4366 ;; This function calls:
  4367 ;;		_PED_Control
  4368 ;;		_Set_EW
  4369 ;;		_Set_EW_LT
  4370 ;;		_Set_NS
  4371 ;;		_Set_NS_LT
  4372 ;;		_Wait_N_Seconds
  4373 ;; This function is called by:
  4374 ;;		_main
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text17
  4379  00E48E                     __ptext17:
  4380                           	opt stack 0
  4381  00E48E                     _Day_Mode:
  4382                           	opt stack 20
  4383                           
  4384                           ;Lab7_redo.c: 426: MODE = 1;
  4385                           
  4386                           ;incstack = 0
  4387  00E48E  0E00               	movlw	0
  4388  00E490  6E69               	movwf	_MODE+1,c
  4389  00E492  0E01               	movlw	1
  4390  00E494  6E68               	movwf	_MODE,c
  4391                           
  4392                           ;Lab7_redo.c: 427: PORTBbits.RB7 = 1;
  4393  00E496  8E81               	bsf	3969,7,c	;volatile
  4394                           
  4395                           ;Lab7_redo.c: 428: Act_Mode_Txt[0] = 'D';
  4396  00E498  0E44               	movlw	68
  4397  00E49A  6E55               	movwf	_Act_Mode_Txt,c
  4398                           
  4399                           ;Lab7_redo.c: 431: Set_EW(1);
  4400  00E49C  0E01               	movlw	1
  4401  00E49E  EC34  F06E         	call	_Set_EW
  4402                           
  4403                           ;Lab7_redo.c: 432: Set_NS_LT(1);
  4404  00E4A2  0E01               	movlw	1
  4405  00E4A4  EC9A  F06E         	call	_Set_NS_LT
  4406                           
  4407                           ;Lab7_redo.c: 433: Set_EW_LT(1);
  4408  00E4A8  0E01               	movlw	1
  4409  00E4AA  EC56  F06E         	call	_Set_EW_LT
  4410                           
  4411                           ;Lab7_redo.c: 435: Set_NS(2);
  4412  00E4AE  0E02               	movlw	2
  4413  00E4B0  EC78  F06E         	call	_Set_NS
  4414                           
  4415                           ;Lab7_redo.c: 437: if(PORTBbits.RB0 == 1)
  4416  00E4B4  A081               	btfss	3969,0,c	;volatile
  4417  00E4B6  D005               	goto	l433
  4418                           
  4419                           ;Lab7_redo.c: 438: {
  4420                           ;Lab7_redo.c: 439: PED_Control(0,8);
  4421  00E4B8  0E08               	movlw	8
  4422  00E4BA  6E3C               	movwf	PED_Control@Num_Sec,c
  4423  00E4BC  0E00               	movlw	0
  4424  00E4BE  ECC5  F06F         	call	_PED_Control
  4425  00E4C2                     l433:
  4426                           
  4427                           ;Lab7_redo.c: 441: }
  4428                           ;Lab7_redo.c: 447: Wait_N_Seconds(7);
  4429  00E4C2  0E07               	movlw	7
  4430  00E4C4  EC6F  F06D         	call	_Wait_N_Seconds
  4431                           
  4432                           ;Lab7_redo.c: 449: Set_NS(3);
  4433  00E4C8  0E03               	movlw	3
  4434  00E4CA  EC78  F06E         	call	_Set_NS
  4435                           
  4436                           ;Lab7_redo.c: 450: Wait_N_Seconds(3);
  4437  00E4CE  0E03               	movlw	3
  4438  00E4D0  EC6F  F06D         	call	_Wait_N_Seconds
  4439                           
  4440                           ;Lab7_redo.c: 452: Set_NS(1);
  4441  00E4D4  0E01               	movlw	1
  4442  00E4D6  EC78  F06E         	call	_Set_NS
  4443                           
  4444                           ;Lab7_redo.c: 456: if(PORTAbits.RA5 == 1)
  4445  00E4DA  AA80               	btfss	3968,5,c	;volatile
  4446  00E4DC  D010               	goto	l3647
  4447                           
  4448                           ;Lab7_redo.c: 457: {
  4449                           ;Lab7_redo.c: 458: Set_EW_LT(2);
  4450  00E4DE  0E02               	movlw	2
  4451  00E4E0  EC56  F06E         	call	_Set_EW_LT
  4452                           
  4453                           ;Lab7_redo.c: 459: Wait_N_Seconds(8);
  4454  00E4E4  0E08               	movlw	8
  4455  00E4E6  EC6F  F06D         	call	_Wait_N_Seconds
  4456                           
  4457                           ;Lab7_redo.c: 461: Set_EW_LT(3);
  4458  00E4EA  0E03               	movlw	3
  4459  00E4EC  EC56  F06E         	call	_Set_EW_LT
  4460                           
  4461                           ;Lab7_redo.c: 462: Wait_N_Seconds(3);
  4462  00E4F0  0E03               	movlw	3
  4463  00E4F2  EC6F  F06D         	call	_Wait_N_Seconds
  4464                           
  4465                           ;Lab7_redo.c: 464: Set_EW_LT(1);
  4466  00E4F6  0E01               	movlw	1
  4467  00E4F8  EC56  F06E         	call	_Set_EW_LT
  4468  00E4FC  D000               	goto	l3647
  4469  00E4FE                     l3647:
  4470                           
  4471                           ;Lab7_redo.c: 466: }
  4472                           ;Lab7_redo.c: 468: Set_EW(2);
  4473  00E4FE  0E02               	movlw	2
  4474  00E500  EC34  F06E         	call	_Set_EW
  4475                           
  4476                           ;Lab7_redo.c: 470: if( PORTBbits.RB1 == 1 )
  4477  00E504  A281               	btfss	3969,1,c	;volatile
  4478  00E506  D005               	goto	l435
  4479                           
  4480                           ;Lab7_redo.c: 471: {
  4481                           ;Lab7_redo.c: 472: PED_Control(2,9);
  4482  00E508  0E09               	movlw	9
  4483  00E50A  6E3C               	movwf	PED_Control@Num_Sec,c
  4484  00E50C  0E02               	movlw	2
  4485  00E50E  ECC5  F06F         	call	_PED_Control
  4486  00E512                     l435:
  4487                           
  4488                           ;Lab7_redo.c: 473: }
  4489                           ;Lab7_redo.c: 477: Wait_N_Seconds(9);
  4490  00E512  0E09               	movlw	9
  4491  00E514  EC6F  F06D         	call	_Wait_N_Seconds
  4492                           
  4493                           ;Lab7_redo.c: 479: Set_EW(3);
  4494  00E518  0E03               	movlw	3
  4495  00E51A  EC34  F06E         	call	_Set_EW
  4496                           
  4497                           ;Lab7_redo.c: 480: Wait_N_Seconds(3);
  4498  00E51E  0E03               	movlw	3
  4499  00E520  EC6F  F06D         	call	_Wait_N_Seconds
  4500                           
  4501                           ;Lab7_redo.c: 482: Set_EW(1);
  4502  00E524  0E01               	movlw	1
  4503  00E526  EC34  F06E         	call	_Set_EW
  4504                           
  4505                           ;Lab7_redo.c: 486: if(PORTAbits.RA4 == 1)
  4506  00E52A  A880               	btfss	3968,4,c	;volatile
  4507  00E52C  D010               	goto	l437
  4508                           
  4509                           ;Lab7_redo.c: 487: {
  4510                           ;Lab7_redo.c: 488: Set_NS_LT(2);
  4511  00E52E  0E02               	movlw	2
  4512  00E530  EC9A  F06E         	call	_Set_NS_LT
  4513                           
  4514                           ;Lab7_redo.c: 489: Wait_N_Seconds(8);
  4515  00E534  0E08               	movlw	8
  4516  00E536  EC6F  F06D         	call	_Wait_N_Seconds
  4517                           
  4518                           ;Lab7_redo.c: 491: Set_NS_LT(3);
  4519  00E53A  0E03               	movlw	3
  4520  00E53C  EC9A  F06E         	call	_Set_NS_LT
  4521                           
  4522                           ;Lab7_redo.c: 492: Wait_N_Seconds(3);
  4523  00E540  0E03               	movlw	3
  4524  00E542  EC6F  F06D         	call	_Wait_N_Seconds
  4525                           
  4526                           ;Lab7_redo.c: 494: Set_NS_LT(1);
  4527  00E546  0E01               	movlw	1
  4528  00E548  EC9A  F06E         	call	_Set_NS_LT
  4529  00E54C  D000               	goto	l437
  4530  00E54E                     l437:
  4531  00E54E  0012               	return		;funcret
  4532  00E550                     __end_of_Day_Mode:
  4533                           	opt stack 0
  4534                           tblptru	equ	0xFF8
  4535                           tblptrh	equ	0xFF7
  4536                           tblptrl	equ	0xFF6
  4537                           tablat	equ	0xFF5
  4538                           postinc0	equ	0xFEE
  4539                           wreg	equ	0xFE8
  4540                           postdec1	equ	0xFE5
  4541                           fsr1l	equ	0xFE1
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function _Wait_N_Seconds *****************
  4545 ;; Defined at:
  4546 ;;		line 598 in file "Lab7_redo.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  seconds         1    wreg     unsigned char 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;  seconds         1   60[COMRAM] unsigned char 
  4551 ;;  I               1   61[COMRAM] unsigned char 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;		None               void
  4554 ;; Registers used:
  4555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;Total ram usage:        2 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    9
  4568 ;; This function calls:
  4569 ;;		_Wait_One_Second
  4570 ;;		_update_LCD_count
  4571 ;; This function is called by:
  4572 ;;		_Day_Mode
  4573 ;;		_Night_Mode
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           	psect	text18
  4578  00DADE                     __ptext18:
  4579                           	opt stack 0
  4580  00DADE                     _Wait_N_Seconds:
  4581                           	opt stack 20
  4582                           
  4583                           ;incstack = 0
  4584                           ;Wait_N_Seconds@seconds stored from wreg
  4585  00DADE  6E3D               	movwf	Wait_N_Seconds@seconds,c
  4586                           
  4587                           ;Lab7_redo.c: 600: char I;
  4588                           ;Lab7_redo.c: 601: for (I = seconds; I> 0; I--)
  4589  00DAE0  C03D  F03E         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4590  00DAE4                     l3485:
  4591  00DAE4  503E               	movf	Wait_N_Seconds@I,w,c
  4592  00DAE6  B4D8               	btfsc	status,2,c
  4593  00DAE8  D00B               	goto	l3495
  4594  00DAEA  D001               	goto	l3489
  4595  00DAEC  D009               	goto	l3495
  4596  00DAEE                     l3489:
  4597                           
  4598                           ;Lab7_redo.c: 602: {
  4599                           ;Lab7_redo.c: 603: update_LCD_count(direction, I);
  4600  00DAEE  C03E  F03A         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4601  00DAF2  507A               	movf	_direction,w,c
  4602  00DAF4  EC03  F077         	call	_update_LCD_count
  4603                           
  4604                           ;Lab7_redo.c: 604: Wait_One_Second();
  4605  00DAF8  EC41  F070         	call	_Wait_One_Second	;wreg free
  4606  00DAFC  063E               	decf	Wait_N_Seconds@I,f,c
  4607  00DAFE  D7F2               	goto	l3485
  4608  00DB00                     l3495:
  4609                           
  4610                           ;Lab7_redo.c: 605: }
  4611                           ;Lab7_redo.c: 606: update_LCD_count(direction, 0);
  4612  00DB00  0E00               	movlw	0
  4613  00DB02  6E3A               	movwf	update_LCD_count@count,c
  4614  00DB04  507A               	movf	_direction,w,c
  4615  00DB06  EC03  F077         	call	_update_LCD_count
  4616  00DB0A  0012               	return		;funcret
  4617  00DB0C                     __end_of_Wait_N_Seconds:
  4618                           	opt stack 0
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           postinc0	equ	0xFEE
  4624                           wreg	equ	0xFE8
  4625                           postdec1	equ	0xFE5
  4626                           fsr1l	equ	0xFE1
  4627                           status	equ	0xFD8
  4628                           
  4629 ;; *************** function _update_LCD_count *****************
  4630 ;; Defined at:
  4631 ;;		line 655 in file "Lab7_redo.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;  direction       1    wreg     unsigned char 
  4634 ;;  count           1   57[COMRAM] unsigned char 
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;  direction       1   58[COMRAM] unsigned char 
  4637 ;; Return value:  Size  Location     Type
  4638 ;;		None               void
  4639 ;; Registers used:
  4640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;Total ram usage:        2 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:    7
  4653 ;; This function calls:
  4654 ;;		___awdiv
  4655 ;;		___awmod
  4656 ;;		_drawtext
  4657 ;; This function is called by:
  4658 ;;		_Wait_N_Seconds
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text19
  4663  00EE06                     __ptext19:
  4664                           	opt stack 0
  4665  00EE06                     _update_LCD_count:
  4666                           	opt stack 21
  4667                           
  4668                           ;incstack = 0
  4669                           ;update_LCD_count@direction stored from wreg
  4670  00EE06  6E3B               	movwf	update_LCD_count@direction,c
  4671                           
  4672                           ;Lab7_redo.c: 659: switch (direction)
  4673  00EE08  D0AE               	goto	l3329
  4674  00EE0A                     l3311:
  4675                           
  4676                           ;Lab7_redo.c: 662: NS_Count[0] = count/10 + '0';
  4677  00EE0A  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4678  00EE0E  6A02               	clrf	___awdiv@dividend+1,c
  4679  00EE10  0E00               	movlw	0
  4680  00EE12  6E04               	movwf	___awdiv@divisor+1,c
  4681  00EE14  0E0A               	movlw	10
  4682  00EE16  6E03               	movwf	___awdiv@divisor,c
  4683  00EE18  EC0A  F071         	call	___awdiv	;wreg free
  4684  00EE1C  5001               	movf	?___awdiv,w,c
  4685  00EE1E  0F30               	addlw	48
  4686  00EE20  6E4C               	movwf	_NS_Count,c
  4687                           
  4688                           ;Lab7_redo.c: 663: NS_Count[1] = count%10 + '0';
  4689  00EE22  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4690  00EE26  6A02               	clrf	___awmod@dividend+1,c
  4691  00EE28  0E00               	movlw	0
  4692  00EE2A  6E04               	movwf	___awmod@divisor+1,c
  4693  00EE2C  0E0A               	movlw	10
  4694  00EE2E  6E03               	movwf	___awmod@divisor,c
  4695  00EE30  EC00  F070         	call	___awmod	;wreg free
  4696  00EE34  5001               	movf	?___awmod,w,c
  4697  00EE36  0F30               	addlw	48
  4698  00EE38  6E4D               	movwf	_NS_Count+1,c
  4699                           
  4700                           ;Lab7_redo.c: 664: drawtext(100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  4701  00EE3A  0E1E               	movlw	30
  4702  00EE3C  6E29               	movwf	drawtext@y,c
  4703  00EE3E  0E4C               	movlw	low _NS_Count
  4704  00EE40  6E2A               	movwf	drawtext@_text,c
  4705  00EE42  0E00               	movlw	high _NS_Count
  4706  00EE44  6E2B               	movwf	drawtext@_text+1,c
  4707  00EE46  0E00               	movlw	0
  4708  00EE48  6E2D               	movwf	drawtext@color+1,c
  4709  00EE4A  0E1F               	movlw	31
  4710  00EE4C  6E2C               	movwf	drawtext@color,c
  4711  00EE4E  0E00               	movlw	0
  4712  00EE50  6E2F               	movwf	drawtext@bg+1,c
  4713  00EE52  0E00               	movlw	0
  4714  00EE54  6E2E               	movwf	drawtext@bg,c
  4715  00EE56  0E02               	movlw	2
  4716  00EE58  6E30               	movwf	drawtext@size,c
  4717  00EE5A  0E64               	movlw	100
  4718  00EE5C  ECDB  F073         	call	_drawtext
  4719                           
  4720                           ;Lab7_redo.c: 665: break;
  4721  00EE60  D090               	goto	l478
  4722  00EE62                     l3315:
  4723                           
  4724                           ;Lab7_redo.c: 668: NSLT_Count[0] = count/10 + '0';
  4725  00EE62  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4726  00EE66  6A02               	clrf	___awdiv@dividend+1,c
  4727  00EE68  0E00               	movlw	0
  4728  00EE6A  6E04               	movwf	___awdiv@divisor+1,c
  4729  00EE6C  0E0A               	movlw	10
  4730  00EE6E  6E03               	movwf	___awdiv@divisor,c
  4731  00EE70  EC0A  F071         	call	___awdiv	;wreg free
  4732  00EE74  5001               	movf	?___awdiv,w,c
  4733  00EE76  0F30               	addlw	48
  4734  00EE78  6E49               	movwf	_NSLT_Count,c
  4735                           
  4736                           ;Lab7_redo.c: 669: NSLT_Count[1] = count%10 + '0';
  4737  00EE7A  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4738  00EE7E  6A02               	clrf	___awmod@dividend+1,c
  4739  00EE80  0E00               	movlw	0
  4740  00EE82  6E04               	movwf	___awmod@divisor+1,c
  4741  00EE84  0E0A               	movlw	10
  4742  00EE86  6E03               	movwf	___awmod@divisor,c
  4743  00EE88  EC00  F070         	call	___awmod	;wreg free
  4744  00EE8C  5001               	movf	?___awmod,w,c
  4745  00EE8E  0F30               	addlw	48
  4746  00EE90  6E4A               	movwf	_NSLT_Count+1,c
  4747                           
  4748                           ;Lab7_redo.c: 670: drawtext(100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  4749  00EE92  0E3C               	movlw	60
  4750  00EE94  6E29               	movwf	drawtext@y,c
  4751  00EE96  0E49               	movlw	low _NSLT_Count
  4752  00EE98  6E2A               	movwf	drawtext@_text,c
  4753  00EE9A  0E00               	movlw	high _NSLT_Count
  4754  00EE9C  6E2B               	movwf	drawtext@_text+1,c
  4755  00EE9E  0EF8               	movlw	248
  4756  00EEA0  6E2D               	movwf	drawtext@color+1,c
  4757  00EEA2  0E1F               	movlw	31
  4758  00EEA4  6E2C               	movwf	drawtext@color,c
  4759  00EEA6  0E00               	movlw	0
  4760  00EEA8  6E2F               	movwf	drawtext@bg+1,c
  4761  00EEAA  0E00               	movlw	0
  4762  00EEAC  6E2E               	movwf	drawtext@bg,c
  4763  00EEAE  0E02               	movlw	2
  4764  00EEB0  6E30               	movwf	drawtext@size,c
  4765  00EEB2  0E64               	movlw	100
  4766  00EEB4  ECDB  F073         	call	_drawtext
  4767                           
  4768                           ;Lab7_redo.c: 671: break;
  4769  00EEB8  D064               	goto	l478
  4770  00EEBA                     l3319:
  4771                           
  4772                           ;Lab7_redo.c: 674: EW_Count[0] = count/10 + '0';
  4773  00EEBA  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4774  00EEBE  6A02               	clrf	___awdiv@dividend+1,c
  4775  00EEC0  0E00               	movlw	0
  4776  00EEC2  6E04               	movwf	___awdiv@divisor+1,c
  4777  00EEC4  0E0A               	movlw	10
  4778  00EEC6  6E03               	movwf	___awdiv@divisor,c
  4779  00EEC8  EC0A  F071         	call	___awdiv	;wreg free
  4780  00EECC  5001               	movf	?___awdiv,w,c
  4781  00EECE  0F30               	addlw	48
  4782  00EED0  6E46               	movwf	_EW_Count,c
  4783                           
  4784                           ;Lab7_redo.c: 675: EW_Count[1] = count%10 + '0';
  4785  00EED2  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4786  00EED6  6A02               	clrf	___awmod@dividend+1,c
  4787  00EED8  0E00               	movlw	0
  4788  00EEDA  6E04               	movwf	___awmod@divisor+1,c
  4789  00EEDC  0E0A               	movlw	10
  4790  00EEDE  6E03               	movwf	___awmod@divisor,c
  4791  00EEE0  EC00  F070         	call	___awmod	;wreg free
  4792  00EEE4  5001               	movf	?___awmod,w,c
  4793  00EEE6  0F30               	addlw	48
  4794  00EEE8  6E47               	movwf	_EW_Count+1,c
  4795                           
  4796                           ;Lab7_redo.c: 676: drawtext(100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4797  00EEEA  0E5A               	movlw	90
  4798  00EEEC  6E29               	movwf	drawtext@y,c
  4799  00EEEE  0E46               	movlw	low _EW_Count
  4800  00EEF0  6E2A               	movwf	drawtext@_text,c
  4801  00EEF2  0E00               	movlw	high _EW_Count
  4802  00EEF4  6E2B               	movwf	drawtext@_text+1,c
  4803  00EEF6  0E07               	movlw	7
  4804  00EEF8  6E2D               	movwf	drawtext@color+1,c
  4805  00EEFA  682C               	setf	drawtext@color,c
  4806  00EEFC  0E00               	movlw	0
  4807  00EEFE  6E2F               	movwf	drawtext@bg+1,c
  4808  00EF00  0E00               	movlw	0
  4809  00EF02  6E2E               	movwf	drawtext@bg,c
  4810  00EF04  0E02               	movlw	2
  4811  00EF06  6E30               	movwf	drawtext@size,c
  4812  00EF08  0E64               	movlw	100
  4813  00EF0A  ECDB  F073         	call	_drawtext
  4814                           
  4815                           ;Lab7_redo.c: 677: break;
  4816  00EF0E  D039               	goto	l478
  4817  00EF10                     l3323:
  4818                           
  4819                           ;Lab7_redo.c: 680: EWLT_Count[0] = count/10 + '0';
  4820  00EF10  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4821  00EF14  6A02               	clrf	___awdiv@dividend+1,c
  4822  00EF16  0E00               	movlw	0
  4823  00EF18  6E04               	movwf	___awdiv@divisor+1,c
  4824  00EF1A  0E0A               	movlw	10
  4825  00EF1C  6E03               	movwf	___awdiv@divisor,c
  4826  00EF1E  EC0A  F071         	call	___awdiv	;wreg free
  4827  00EF22  5001               	movf	?___awdiv,w,c
  4828  00EF24  0F30               	addlw	48
  4829  00EF26  6E43               	movwf	_EWLT_Count,c
  4830                           
  4831                           ;Lab7_redo.c: 681: EWLT_Count[1] = count%10 + '0';
  4832  00EF28  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4833  00EF2C  6A02               	clrf	___awmod@dividend+1,c
  4834  00EF2E  0E00               	movlw	0
  4835  00EF30  6E04               	movwf	___awmod@divisor+1,c
  4836  00EF32  0E0A               	movlw	10
  4837  00EF34  6E03               	movwf	___awmod@divisor,c
  4838  00EF36  EC00  F070         	call	___awmod	;wreg free
  4839  00EF3A  5001               	movf	?___awmod,w,c
  4840  00EF3C  0F30               	addlw	48
  4841  00EF3E  6E44               	movwf	_EWLT_Count+1,c
  4842                           
  4843                           ;Lab7_redo.c: 682: drawtext(100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  4844  00EF40  0E78               	movlw	120
  4845  00EF42  6E29               	movwf	drawtext@y,c
  4846  00EF44  0E43               	movlw	low _EWLT_Count
  4847  00EF46  6E2A               	movwf	drawtext@_text,c
  4848  00EF48  0E00               	movlw	high _EWLT_Count
  4849  00EF4A  6E2B               	movwf	drawtext@_text+1,c
  4850  00EF4C  0EFF               	movlw	255
  4851  00EF4E  6E2D               	movwf	drawtext@color+1,c
  4852  00EF50  682C               	setf	drawtext@color,c
  4853  00EF52  0E00               	movlw	0
  4854  00EF54  6E2F               	movwf	drawtext@bg+1,c
  4855  00EF56  0E00               	movlw	0
  4856  00EF58  6E2E               	movwf	drawtext@bg,c
  4857  00EF5A  0E02               	movlw	2
  4858  00EF5C  6E30               	movwf	drawtext@size,c
  4859  00EF5E  0E64               	movlw	100
  4860  00EF60  ECDB  F073         	call	_drawtext
  4861                           
  4862                           ;Lab7_redo.c: 688: }
  4863                           
  4864                           ;Lab7_redo.c: 683: break;
  4865  00EF64  D00E               	goto	l478
  4866  00EF66                     l3329:
  4867  00EF66  503B               	movf	update_LCD_count@direction,w,c
  4868                           
  4869                           ; Switch size 1, requested type "space"
  4870                           ; Number of cases is 4, Range of values is 0 to 3
  4871                           ; switch strategies available:
  4872                           ; Name         Instructions Cycles
  4873                           ; simple_byte           13     7 (average)
  4874                           ;	Chosen strategy is simple_byte
  4875  00EF68  0A00               	xorlw	0	; case 0
  4876  00EF6A  B4D8               	btfsc	status,2,c
  4877  00EF6C  D74E               	goto	l3311
  4878  00EF6E  0A01               	xorlw	1	; case 1
  4879  00EF70  B4D8               	btfsc	status,2,c
  4880  00EF72  D777               	goto	l3315
  4881  00EF74  0A03               	xorlw	3	; case 2
  4882  00EF76  B4D8               	btfsc	status,2,c
  4883  00EF78  D7A0               	goto	l3319
  4884  00EF7A  0A01               	xorlw	1	; case 3
  4885  00EF7C  B4D8               	btfsc	status,2,c
  4886  00EF7E  D7C8               	goto	l3323
  4887  00EF80  D000               	goto	l478
  4888  00EF82                     l478:
  4889  00EF82  0012               	return		;funcret
  4890  00EF84                     __end_of_update_LCD_count:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           tblptrh	equ	0xFF7
  4894                           tblptrl	equ	0xFF6
  4895                           tablat	equ	0xFF5
  4896                           postinc0	equ	0xFEE
  4897                           wreg	equ	0xFE8
  4898                           postdec1	equ	0xFE5
  4899                           fsr1l	equ	0xFE1
  4900                           status	equ	0xFD8
  4901                           
  4902 ;; *************** function _Wait_One_Second *****************
  4903 ;; Defined at:
  4904 ;;		line 563 in file "Lab7_redo.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;		None
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;		None
  4909 ;; Return value:  Size  Location     Type
  4910 ;;		None               void
  4911 ;; Registers used:
  4912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;Total ram usage:        0 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    8
  4925 ;; This function calls:
  4926 ;;		_Wait_Half_Second
  4927 ;;		_drawtext
  4928 ;;		_strcpy
  4929 ;;		_update_LCD_misc
  4930 ;; This function is called by:
  4931 ;;		_Wait_N_Seconds
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text20
  4936  00E082                     __ptext20:
  4937                           	opt stack 0
  4938  00E082                     _Wait_One_Second:
  4939                           	opt stack 20
  4940                           
  4941                           ;Lab7_redo.c: 565: PORTDbits.RD7 = 1;
  4942                           
  4943                           ;incstack = 0
  4944  00E082  8E83               	bsf	3971,7,c	;volatile
  4945                           
  4946                           ;Lab7_redo.c: 566: strcpy(txt,"*");
  4947  00E084  C06C  F001         	movff	_txt,strcpy@to
  4948  00E088  C06D  F002         	movff	_txt+1,strcpy@to+1
  4949  00E08C  0EFD               	movlw	low STR_5
  4950  00E08E  6E03               	movwf	strcpy@from,c
  4951  00E090  0EFF               	movlw	high STR_5
  4952  00E092  6E04               	movwf	strcpy@from+1,c
  4953  00E094  EC9E  F06D         	call	_strcpy	;wreg free
  4954                           
  4955                           ;Lab7_redo.c: 567: drawtext(120,10,txt,0xFFFF,0x0000,1);
  4956  00E098  0E0A               	movlw	10
  4957  00E09A  6E29               	movwf	drawtext@y,c
  4958  00E09C  C06C  F02A         	movff	_txt,drawtext@_text
  4959  00E0A0  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  4960  00E0A4  0EFF               	movlw	255
  4961  00E0A6  6E2D               	movwf	drawtext@color+1,c
  4962  00E0A8  682C               	setf	drawtext@color,c
  4963  00E0AA  0E00               	movlw	0
  4964  00E0AC  6E2F               	movwf	drawtext@bg+1,c
  4965  00E0AE  0E00               	movlw	0
  4966  00E0B0  6E2E               	movwf	drawtext@bg,c
  4967  00E0B2  0E01               	movlw	1
  4968  00E0B4  6E30               	movwf	drawtext@size,c
  4969  00E0B6  0E78               	movlw	120
  4970  00E0B8  ECDB  F073         	call	_drawtext
  4971                           
  4972                           ;Lab7_redo.c: 568: Wait_Half_Second();
  4973  00E0BC  EC06  F06D         	call	_Wait_Half_Second	;wreg free
  4974                           
  4975                           ;Lab7_redo.c: 570: PORTDbits.RD7 = 0;
  4976  00E0C0  9E83               	bcf	3971,7,c	;volatile
  4977                           
  4978                           ;Lab7_redo.c: 571: strcpy(txt," ");
  4979  00E0C2  C06C  F001         	movff	_txt,strcpy@to
  4980  00E0C6  C06D  F002         	movff	_txt+1,strcpy@to+1
  4981  00E0CA  0EFB               	movlw	low STR_14
  4982  00E0CC  6E03               	movwf	strcpy@from,c
  4983  00E0CE  0EFF               	movlw	high STR_14
  4984  00E0D0  6E04               	movwf	strcpy@from+1,c
  4985  00E0D2  EC9E  F06D         	call	_strcpy	;wreg free
  4986                           
  4987                           ;Lab7_redo.c: 572: drawtext(120,10,txt,0xFFFF,0x0000,1);
  4988  00E0D6  0E0A               	movlw	10
  4989  00E0D8  6E29               	movwf	drawtext@y,c
  4990  00E0DA  C06C  F02A         	movff	_txt,drawtext@_text
  4991  00E0DE  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  4992  00E0E2  0EFF               	movlw	255
  4993  00E0E4  6E2D               	movwf	drawtext@color+1,c
  4994  00E0E6  682C               	setf	drawtext@color,c
  4995  00E0E8  0E00               	movlw	0
  4996  00E0EA  6E2F               	movwf	drawtext@bg+1,c
  4997  00E0EC  0E00               	movlw	0
  4998  00E0EE  6E2E               	movwf	drawtext@bg,c
  4999  00E0F0  0E01               	movlw	1
  5000  00E0F2  6E30               	movwf	drawtext@size,c
  5001  00E0F4  0E78               	movlw	120
  5002  00E0F6  ECDB  F073         	call	_drawtext
  5003                           
  5004                           ;Lab7_redo.c: 573: Wait_Half_Second();
  5005  00E0FA  EC06  F06D         	call	_Wait_Half_Second	;wreg free
  5006                           
  5007                           ;Lab7_redo.c: 574: update_LCD_misc();
  5008  00E0FE  EC99  F078         	call	_update_LCD_misc	;wreg free
  5009  00E102  0012               	return		;funcret
  5010  00E104                     __end_of_Wait_One_Second:
  5011                           	opt stack 0
  5012                           tblptru	equ	0xFF8
  5013                           tblptrh	equ	0xFF7
  5014                           tblptrl	equ	0xFF6
  5015                           tablat	equ	0xFF5
  5016                           postinc0	equ	0xFEE
  5017                           wreg	equ	0xFE8
  5018                           postdec1	equ	0xFE5
  5019                           fsr1l	equ	0xFE1
  5020                           status	equ	0xFD8
  5021                           
  5022 ;; *************** function _update_LCD_misc *****************
  5023 ;; Defined at:
  5024 ;;		line 713 in file "Lab7_redo.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;		None
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  nStep           2   58[COMRAM] int 
  5029 ;;  ch              1   57[COMRAM] unsigned char 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;		None               void
  5032 ;; Registers used:
  5033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;Total ram usage:        3 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    7
  5046 ;; This function calls:
  5047 ;;		___awtoft
  5048 ;;		___ftdiv
  5049 ;;		___ftge
  5050 ;;		___wmul
  5051 ;;		_drawtext
  5052 ;;		_get_full_ADC
  5053 ;; This function is called by:
  5054 ;;		_Wait_One_Second
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text21
  5059  00F132                     __ptext21:
  5060                           	opt stack 0
  5061  00F132                     _update_LCD_misc:
  5062                           	opt stack 20
  5063                           
  5064                           ;incstack = 0
  5065  00F132  0E00               	movlw	0
  5066  00F134  6E3A               	movwf	update_LCD_misc@ch,c
  5067                           
  5068                           ;Lab7_redo.c: 715: int nStep = get_full_ADC();
  5069  00F136  EC33  F06D         	call	_get_full_ADC	;wreg free
  5070  00F13A  C001  F03B         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5071  00F13E  C002  F03C         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5072                           
  5073                           ;Lab7_redo.c: 716: volt = nStep * 5 /1024.0;
  5074  00F142  C03B  F001         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5075  00F146  C03C  F002         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5076  00F14A  0E00               	movlw	0
  5077  00F14C  6E04               	movwf	___wmul@multiplicand+1,c
  5078  00F14E  0E05               	movlw	5
  5079  00F150  6E03               	movwf	___wmul@multiplicand,c
  5080  00F152  EC46  F06D         	call	___wmul	;wreg free
  5081  00F156  C001  F009         	movff	?___wmul,___awtoft@c
  5082  00F15A  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  5083  00F15E  ECB7  F06D         	call	___awtoft	;wreg free
  5084  00F162  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5085  00F166  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5086  00F16A  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5087  00F16E  0E00               	movlw	0
  5088  00F170  6E10               	movwf	___ftdiv@f2,c
  5089  00F172  0E80               	movlw	128
  5090  00F174  6E11               	movwf	___ftdiv@f2+1,c
  5091  00F176  0E44               	movlw	68
  5092  00F178  6E12               	movwf	___ftdiv@f2+2,c
  5093  00F17A  EC4A  F074         	call	___ftdiv	;wreg free
  5094  00F17E  C00D  F065         	movff	?___ftdiv,_volt
  5095  00F182  C00E  F066         	movff	?___ftdiv+1,_volt+1
  5096  00F186  C00F  F067         	movff	?___ftdiv+2,_volt+2
  5097                           
  5098                           ;Lab7_redo.c: 717: SW_MODE = volt < 3.5 ? 1:0;
  5099  00F18A  C065  F001         	movff	_volt,___ftge@ff1
  5100  00F18E  C066  F002         	movff	_volt+1,___ftge@ff1+1
  5101  00F192  C067  F003         	movff	_volt+2,___ftge@ff1+2
  5102  00F196  0E00               	movlw	0
  5103  00F198  6E04               	movwf	___ftge@ff2,c
  5104  00F19A  0E60               	movlw	96
  5105  00F19C  6E05               	movwf	___ftge@ff2+1,c
  5106  00F19E  0E40               	movlw	64
  5107  00F1A0  6E06               	movwf	___ftge@ff2+2,c
  5108  00F1A2  EC55  F071         	call	___ftge	;wreg free
  5109  00F1A6  B0D8               	btfsc	status,0,c
  5110  00F1A8  D002               	goto	u1880
  5111  00F1AA  0E01               	movlw	1
  5112  00F1AC  D001               	goto	u1890
  5113  00F1AE                     u1880:
  5114  00F1AE  0E00               	movlw	0
  5115  00F1B0                     u1890:
  5116  00F1B0  6E74               	movwf	_SW_MODE,c
  5117                           
  5118                           ;Lab7_redo.c: 719: SW_NSPED = PORTBbits.RB0;
  5119  00F1B2  0E00               	movlw	0
  5120  00F1B4  B081               	btfsc	3969,0,c	;volatile
  5121  00F1B6  0E01               	movlw	1
  5122  00F1B8  6E76               	movwf	_SW_NSPED,c
  5123                           
  5124                           ;Lab7_redo.c: 720: SW_NSLT = PORTAbits.RA4;
  5125  00F1BA  0E00               	movlw	0
  5126  00F1BC  B880               	btfsc	3968,4,c	;volatile
  5127  00F1BE  0E01               	movlw	1
  5128  00F1C0  6E75               	movwf	_SW_NSLT,c
  5129                           
  5130                           ;Lab7_redo.c: 721: SW_EWPED = PORTBbits.RB1;
  5131  00F1C2  0E00               	movlw	0
  5132  00F1C4  B281               	btfsc	3969,1,c	;volatile
  5133  00F1C6  0E01               	movlw	1
  5134  00F1C8  6E73               	movwf	_SW_EWPED,c
  5135                           
  5136                           ;Lab7_redo.c: 722: SW_EWLT = PORTAbits.RA5;
  5137  00F1CA  0E00               	movlw	0
  5138  00F1CC  BA80               	btfsc	3968,5,c	;volatile
  5139  00F1CE  0E01               	movlw	1
  5140  00F1D0  6E72               	movwf	_SW_EWLT,c
  5141                           
  5142                           ;Lab7_redo.c: 724: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5143  00F1D2  5074               	movf	_SW_MODE,w,c
  5144  00F1D4  A4D8               	btfss	status,2,c
  5145  00F1D6  D002               	goto	l2993
  5146  00F1D8  0E4E               	movlw	78
  5147  00F1DA  D001               	goto	L1
  5148  00F1DC                     l2993:
  5149  00F1DC  0E44               	movlw	68
  5150  00F1DE                     L1:
  5151  00F1DE  6E5F               	movwf	_SW_MODE_Txt,c
  5152                           
  5153                           ;Lab7_redo.c: 725: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5154  00F1E0  5076               	movf	_SW_NSPED,w,c
  5155  00F1E2  A4D8               	btfss	status,2,c
  5156  00F1E4  D002               	goto	l2997
  5157  00F1E6  0E30               	movlw	48
  5158  00F1E8  D001               	goto	L2
  5159  00F1EA                     l2997:
  5160  00F1EA  0E31               	movlw	49
  5161  00F1EC                     L2:
  5162  00F1EC  6E63               	movwf	_SW_NSPED_Txt,c
  5163                           
  5164                           ;Lab7_redo.c: 726: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5165  00F1EE  5073               	movf	_SW_EWPED,w,c
  5166  00F1F0  A4D8               	btfss	status,2,c
  5167  00F1F2  D002               	goto	l3001
  5168  00F1F4  0E30               	movlw	48
  5169  00F1F6  D001               	goto	L3
  5170  00F1F8                     l3001:
  5171  00F1F8  0E31               	movlw	49
  5172  00F1FA                     L3:
  5173  00F1FA  6E5D               	movwf	_SW_EWPED_Txt,c
  5174                           
  5175                           ;Lab7_redo.c: 728: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5176  00F1FC  5075               	movf	_SW_NSLT,w,c
  5177  00F1FE  A4D8               	btfss	status,2,c
  5178  00F200  D002               	goto	l3005
  5179  00F202  0E30               	movlw	48
  5180  00F204  D001               	goto	L4
  5181  00F206                     l3005:
  5182  00F206  0E31               	movlw	49
  5183  00F208                     L4:
  5184  00F208  6E61               	movwf	_SW_NSLT_Txt,c
  5185                           
  5186                           ;Lab7_redo.c: 729: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5187  00F20A  5072               	movf	_SW_EWLT,w,c
  5188  00F20C  A4D8               	btfss	status,2,c
  5189  00F20E  D002               	goto	l3009
  5190  00F210  0E30               	movlw	48
  5191  00F212  D001               	goto	L5
  5192  00F214                     l3009:
  5193  00F214  0E31               	movlw	49
  5194  00F216                     L5:
  5195  00F216  6E5B               	movwf	_SW_EWLT_Txt,c
  5196  00F218  D000               	goto	l3011
  5197  00F21A                     l3011:
  5198                           
  5199                           ;Lab7_redo.c: 734: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5200  00F21A  0E0A               	movlw	10
  5201  00F21C  6E29               	movwf	drawtext@y,c
  5202  00F21E  0E55               	movlw	low _Act_Mode_Txt
  5203  00F220  6E2A               	movwf	drawtext@_text,c
  5204  00F222  0E00               	movlw	high _Act_Mode_Txt
  5205  00F224  6E2B               	movwf	drawtext@_text+1,c
  5206  00F226  0EFF               	movlw	255
  5207  00F228  6E2D               	movwf	drawtext@color+1,c
  5208  00F22A  682C               	setf	drawtext@color,c
  5209  00F22C  0E00               	movlw	0
  5210  00F22E  6E2F               	movwf	drawtext@bg+1,c
  5211  00F230  0E00               	movlw	0
  5212  00F232  6E2E               	movwf	drawtext@bg,c
  5213  00F234  0E01               	movlw	1
  5214  00F236  6E30               	movwf	drawtext@size,c
  5215  00F238  0E23               	movlw	35
  5216  00F23A  ECDB  F073         	call	_drawtext
  5217                           
  5218                           ;Lab7_redo.c: 735: drawtext(70,10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  5219  00F23E  0E0A               	movlw	10
  5220  00F240  6E29               	movwf	drawtext@y,c
  5221  00F242  0E57               	movlw	low _FlashingR_Txt
  5222  00F244  6E2A               	movwf	drawtext@_text,c
  5223  00F246  0E00               	movlw	high _FlashingR_Txt
  5224  00F248  6E2B               	movwf	drawtext@_text+1,c
  5225  00F24A  0EFF               	movlw	255
  5226  00F24C  6E2D               	movwf	drawtext@color+1,c
  5227  00F24E  682C               	setf	drawtext@color,c
  5228  00F250  0E00               	movlw	0
  5229  00F252  6E2F               	movwf	drawtext@bg+1,c
  5230  00F254  0E00               	movlw	0
  5231  00F256  6E2E               	movwf	drawtext@bg,c
  5232  00F258  0E01               	movlw	1
  5233  00F25A  6E30               	movwf	drawtext@size,c
  5234  00F25C  0E46               	movlw	70
  5235  00F25E  ECDB  F073         	call	_drawtext
  5236                           
  5237                           ;Lab7_redo.c: 736: drawtext(100,10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  5238  00F262  0E0A               	movlw	10
  5239  00F264  6E29               	movwf	drawtext@y,c
  5240  00F266  0E59               	movlw	low _FlashingS_Txt
  5241  00F268  6E2A               	movwf	drawtext@_text,c
  5242  00F26A  0E00               	movlw	high _FlashingS_Txt
  5243  00F26C  6E2B               	movwf	drawtext@_text+1,c
  5244  00F26E  0EFF               	movlw	255
  5245  00F270  6E2D               	movwf	drawtext@color+1,c
  5246  00F272  682C               	setf	drawtext@color,c
  5247  00F274  0E00               	movlw	0
  5248  00F276  6E2F               	movwf	drawtext@bg+1,c
  5249  00F278  0E00               	movlw	0
  5250  00F27A  6E2E               	movwf	drawtext@bg,c
  5251  00F27C  0E01               	movlw	1
  5252  00F27E  6E30               	movwf	drawtext@size,c
  5253  00F280  0E64               	movlw	100
  5254  00F282  ECDB  F073         	call	_drawtext
  5255                           
  5256                           ;Lab7_redo.c: 737: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5257  00F286  0E95               	movlw	149
  5258  00F288  6E29               	movwf	drawtext@y,c
  5259  00F28A  0E63               	movlw	low _SW_NSPED_Txt
  5260  00F28C  6E2A               	movwf	drawtext@_text,c
  5261  00F28E  0E00               	movlw	high _SW_NSPED_Txt
  5262  00F290  6E2B               	movwf	drawtext@_text+1,c
  5263  00F292  0EFF               	movlw	255
  5264  00F294  6E2D               	movwf	drawtext@color+1,c
  5265  00F296  682C               	setf	drawtext@color,c
  5266  00F298  0E00               	movlw	0
  5267  00F29A  6E2F               	movwf	drawtext@bg+1,c
  5268  00F29C  0E00               	movlw	0
  5269  00F29E  6E2E               	movwf	drawtext@bg,c
  5270  00F2A0  0E01               	movlw	1
  5271  00F2A2  6E30               	movwf	drawtext@size,c
  5272  00F2A4  0E06               	movlw	6
  5273  00F2A6  ECDB  F073         	call	_drawtext
  5274                           
  5275                           ;Lab7_redo.c: 738: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5276  00F2AA  0E95               	movlw	149
  5277  00F2AC  6E29               	movwf	drawtext@y,c
  5278  00F2AE  0E61               	movlw	low _SW_NSLT_Txt
  5279  00F2B0  6E2A               	movwf	drawtext@_text,c
  5280  00F2B2  0E00               	movlw	high _SW_NSLT_Txt
  5281  00F2B4  6E2B               	movwf	drawtext@_text+1,c
  5282  00F2B6  0EFF               	movlw	255
  5283  00F2B8  6E2D               	movwf	drawtext@color+1,c
  5284  00F2BA  682C               	setf	drawtext@color,c
  5285  00F2BC  0E00               	movlw	0
  5286  00F2BE  6E2F               	movwf	drawtext@bg+1,c
  5287  00F2C0  0E00               	movlw	0
  5288  00F2C2  6E2E               	movwf	drawtext@bg,c
  5289  00F2C4  0E01               	movlw	1
  5290  00F2C6  6E30               	movwf	drawtext@size,c
  5291  00F2C8  0E20               	movlw	32
  5292  00F2CA  ECDB  F073         	call	_drawtext
  5293                           
  5294                           ;Lab7_redo.c: 739: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5295  00F2CE  0E95               	movlw	149
  5296  00F2D0  6E29               	movwf	drawtext@y,c
  5297  00F2D2  0E5D               	movlw	low _SW_EWPED_Txt
  5298  00F2D4  6E2A               	movwf	drawtext@_text,c
  5299  00F2D6  0E00               	movlw	high _SW_EWPED_Txt
  5300  00F2D8  6E2B               	movwf	drawtext@_text+1,c
  5301  00F2DA  0EFF               	movlw	255
  5302  00F2DC  6E2D               	movwf	drawtext@color+1,c
  5303  00F2DE  682C               	setf	drawtext@color,c
  5304  00F2E0  0E00               	movlw	0
  5305  00F2E2  6E2F               	movwf	drawtext@bg+1,c
  5306  00F2E4  0E00               	movlw	0
  5307  00F2E6  6E2E               	movwf	drawtext@bg,c
  5308  00F2E8  0E01               	movlw	1
  5309  00F2EA  6E30               	movwf	drawtext@size,c
  5310  00F2EC  0E3A               	movlw	58
  5311  00F2EE  ECDB  F073         	call	_drawtext
  5312                           
  5313                           ;Lab7_redo.c: 740: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5314  00F2F2  0E95               	movlw	149
  5315  00F2F4  6E29               	movwf	drawtext@y,c
  5316  00F2F6  0E5B               	movlw	low _SW_EWLT_Txt
  5317  00F2F8  6E2A               	movwf	drawtext@_text,c
  5318  00F2FA  0E00               	movlw	high _SW_EWLT_Txt
  5319  00F2FC  6E2B               	movwf	drawtext@_text+1,c
  5320  00F2FE  0EFF               	movlw	255
  5321  00F300  6E2D               	movwf	drawtext@color+1,c
  5322  00F302  682C               	setf	drawtext@color,c
  5323  00F304  0E00               	movlw	0
  5324  00F306  6E2F               	movwf	drawtext@bg+1,c
  5325  00F308  0E00               	movlw	0
  5326  00F30A  6E2E               	movwf	drawtext@bg,c
  5327  00F30C  0E01               	movlw	1
  5328  00F30E  6E30               	movwf	drawtext@size,c
  5329  00F310  0E57               	movlw	87
  5330  00F312  ECDB  F073         	call	_drawtext
  5331                           
  5332                           ;Lab7_redo.c: 741: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5333  00F316  0E95               	movlw	149
  5334  00F318  6E29               	movwf	drawtext@y,c
  5335  00F31A  0E5F               	movlw	low _SW_MODE_Txt
  5336  00F31C  6E2A               	movwf	drawtext@_text,c
  5337  00F31E  0E00               	movlw	high _SW_MODE_Txt
  5338  00F320  6E2B               	movwf	drawtext@_text+1,c
  5339  00F322  0EFF               	movlw	255
  5340  00F324  6E2D               	movwf	drawtext@color+1,c
  5341  00F326  682C               	setf	drawtext@color,c
  5342  00F328  0E00               	movlw	0
  5343  00F32A  6E2F               	movwf	drawtext@bg+1,c
  5344  00F32C  0E00               	movlw	0
  5345  00F32E  6E2E               	movwf	drawtext@bg,c
  5346  00F330  0E01               	movlw	1
  5347  00F332  6E30               	movwf	drawtext@size,c
  5348  00F334  0E70               	movlw	112
  5349  00F336  ECDB  F073         	call	_drawtext
  5350  00F33A  0012               	return		;funcret
  5351  00F33C                     __end_of_update_LCD_misc:
  5352                           	opt stack 0
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           postinc0	equ	0xFEE
  5358                           wreg	equ	0xFE8
  5359                           postdec1	equ	0xFE5
  5360                           fsr1l	equ	0xFE1
  5361                           status	equ	0xFD8
  5362                           
  5363 ;; *************** function _get_full_ADC *****************
  5364 ;; Defined at:
  5365 ;;		line 313 in file "Lab7_redo.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;		None
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;  result          2    4[COMRAM] unsigned int 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  2    0[COMRAM] unsigned int 
  5372 ;; Registers used:
  5373 ;;		wreg, status,2, status,0
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5379 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;Total ram usage:        6 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		_main
  5389 ;;		_update_LCD_misc
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text22
  5394  00DA66                     __ptext22:
  5395                           	opt stack 0
  5396  00DA66                     _get_full_ADC:
  5397                           	opt stack 30
  5398                           
  5399                           ;Lab7_redo.c: 315: unsigned int result;
  5400                           ;Lab7_redo.c: 316: ADCON0bits.GO=1;
  5401                           
  5402                           ;incstack = 0
  5403  00DA66  82C2               	bsf	4034,1,c	;volatile
  5404                           
  5405                           ;Lab7_redo.c: 317: while(ADCON0bits.DONE==1);
  5406  00DA68  D000               	goto	l376
  5407  00DA6A                     l376:
  5408  00DA6A  B2C2               	btfsc	4034,1,c	;volatile
  5409  00DA6C  D7FE               	goto	l376
  5410                           
  5411                           ;Lab7_redo.c: 318: result = (ADRESH * 0x100) + ADRESL;
  5412  00DA6E  50C4               	movf	4036,w,c	;volatile
  5413  00DA70  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5414  00DA72  6A03               	clrf	??_get_full_ADC& (0+255),c
  5415  00DA74  50C3               	movf	4035,w,c	;volatile
  5416  00DA76  2403               	addwf	??_get_full_ADC,w,c
  5417  00DA78  6E05               	movwf	get_full_ADC@result,c
  5418  00DA7A  0E00               	movlw	0
  5419  00DA7C  2004               	addwfc	??_get_full_ADC+1,w,c
  5420  00DA7E  6E06               	movwf	get_full_ADC@result+1,c
  5421                           
  5422                           ;Lab7_redo.c: 320: return result;
  5423  00DA80  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5424  00DA84  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5425  00DA88  D000               	goto	l379
  5426  00DA8A                     l379:
  5427  00DA8A  0012               	return		;funcret
  5428  00DA8C                     __end_of_get_full_ADC:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           postinc0	equ	0xFEE
  5435                           wreg	equ	0xFE8
  5436                           postdec1	equ	0xFE5
  5437                           fsr1l	equ	0xFE1
  5438                           status	equ	0xFD8
  5439                           
  5440 ;; *************** function ___ftge *****************
  5441 ;; Defined at:
  5442 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;  ff1             3    0[COMRAM] float 
  5445 ;;  ff2             3    3[COMRAM] float 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;		None
  5448 ;; Return value:  Size  Location     Type
  5449 ;;		None               void
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, status,0
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5457 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;Total ram usage:        9 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_main
  5467 ;;		_update_LCD_misc
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text23
  5472  00E2AA                     __ptext23:
  5473                           	opt stack 0
  5474  00E2AA                     ___ftge:
  5475                           	opt stack 30
  5476                           
  5477                           ;incstack = 0
  5478  00E2AA  AE03               	btfss	___ftge@ff1+2,7,c
  5479  00E2AC  D017               	goto	l2889
  5480  00E2AE  C001  F007         	movff	___ftge@ff1,??___ftge
  5481  00E2B2  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5482  00E2B6  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5483  00E2BA  1E07               	comf	??___ftge,f,c
  5484  00E2BC  1E08               	comf	??___ftge+1,f,c
  5485  00E2BE  1E09               	comf	??___ftge+2,f,c
  5486  00E2C0  2A07               	incf	??___ftge,f,c
  5487  00E2C2  0E00               	movlw	0
  5488  00E2C4  2208               	addwfc	??___ftge+1,f,c
  5489  00E2C6  2209               	addwfc	??___ftge+2,f,c
  5490  00E2C8  0E00               	movlw	0
  5491  00E2CA  2407               	addwf	??___ftge,w,c
  5492  00E2CC  6E01               	movwf	___ftge@ff1,c
  5493  00E2CE  0E00               	movlw	0
  5494  00E2D0  2008               	addwfc	??___ftge+1,w,c
  5495  00E2D2  6E02               	movwf	___ftge@ff1+1,c
  5496  00E2D4  0E80               	movlw	128
  5497  00E2D6  2009               	addwfc	??___ftge+2,w,c
  5498  00E2D8  6E03               	movwf	___ftge@ff1+2,c
  5499  00E2DA  D000               	goto	l2889
  5500  00E2DC                     l2889:
  5501  00E2DC  AE06               	btfss	___ftge@ff2+2,7,c
  5502  00E2DE  D017               	goto	l2893
  5503  00E2E0  C004  F007         	movff	___ftge@ff2,??___ftge
  5504  00E2E4  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5505  00E2E8  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5506  00E2EC  1E07               	comf	??___ftge,f,c
  5507  00E2EE  1E08               	comf	??___ftge+1,f,c
  5508  00E2F0  1E09               	comf	??___ftge+2,f,c
  5509  00E2F2  2A07               	incf	??___ftge,f,c
  5510  00E2F4  0E00               	movlw	0
  5511  00E2F6  2208               	addwfc	??___ftge+1,f,c
  5512  00E2F8  2209               	addwfc	??___ftge+2,f,c
  5513  00E2FA  0E00               	movlw	0
  5514  00E2FC  2407               	addwf	??___ftge,w,c
  5515  00E2FE  6E04               	movwf	___ftge@ff2,c
  5516  00E300  0E00               	movlw	0
  5517  00E302  2008               	addwfc	??___ftge+1,w,c
  5518  00E304  6E05               	movwf	___ftge@ff2+1,c
  5519  00E306  0E80               	movlw	128
  5520  00E308  2009               	addwfc	??___ftge+2,w,c
  5521  00E30A  6E06               	movwf	___ftge@ff2+2,c
  5522  00E30C  D000               	goto	l2893
  5523  00E30E                     l2893:
  5524  00E30E  0E00               	movlw	0
  5525  00E310  1A01               	xorwf	___ftge@ff1,f,c
  5526  00E312  0E00               	movlw	0
  5527  00E314  1A02               	xorwf	___ftge@ff1+1,f,c
  5528  00E316  0E80               	movlw	128
  5529  00E318  1A03               	xorwf	___ftge@ff1+2,f,c
  5530  00E31A  0E00               	movlw	0
  5531  00E31C  1A04               	xorwf	___ftge@ff2,f,c
  5532  00E31E  0E00               	movlw	0
  5533  00E320  1A05               	xorwf	___ftge@ff2+1,f,c
  5534  00E322  0E80               	movlw	128
  5535  00E324  1A06               	xorwf	___ftge@ff2+2,f,c
  5536  00E326  5004               	movf	___ftge@ff2,w,c
  5537  00E328  5C01               	subwf	___ftge@ff1,w,c
  5538  00E32A  5005               	movf	___ftge@ff2+1,w,c
  5539  00E32C  5802               	subwfb	___ftge@ff1+1,w,c
  5540  00E32E  5006               	movf	___ftge@ff2+2,w,c
  5541  00E330  5803               	subwfb	___ftge@ff1+2,w,c
  5542  00E332  B0D8               	btfsc	status,0,c
  5543  00E334  D002               	goto	l2899
  5544  00E336  90D8               	bcf	status,0,c
  5545  00E338  D002               	goto	l923
  5546  00E33A                     l2899:
  5547  00E33A  80D8               	bsf	status,0,c
  5548  00E33C  D000               	goto	l923
  5549  00E33E                     l923:
  5550  00E33E  0012               	return		;funcret
  5551  00E340                     __end_of___ftge:
  5552                           	opt stack 0
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           postinc0	equ	0xFEE
  5558                           wreg	equ	0xFE8
  5559                           postdec1	equ	0xFE5
  5560                           fsr1l	equ	0xFE1
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function ___ftdiv *****************
  5564 ;; Defined at:
  5565 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  f1              3   12[COMRAM] float 
  5568 ;;  f2              3   15[COMRAM] float 
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;  f3              3   22[COMRAM] float 
  5571 ;;  sign            1   26[COMRAM] unsigned char 
  5572 ;;  exp             1   25[COMRAM] unsigned char 
  5573 ;;  cntr            1   21[COMRAM] unsigned char 
  5574 ;; Return value:  Size  Location     Type
  5575 ;;                  3   12[COMRAM] float 
  5576 ;; Registers used:
  5577 ;;		wreg, status,2, status,0, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5583 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;Total ram usage:       15 bytes
  5588 ;; Hardware stack levels used:    1
  5589 ;; Hardware stack levels required when called:    1
  5590 ;; This function calls:
  5591 ;;		___ftpack
  5592 ;; This function is called by:
  5593 ;;		_main
  5594 ;;		_update_LCD_misc
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text24
  5599  00E894                     __ptext24:
  5600                           	opt stack 0
  5601  00E894                     ___ftdiv:
  5602                           	opt stack 29
  5603                           
  5604                           ;incstack = 0
  5605  00E894  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5606  00E898  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5607  00E89A  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5608  00E89C  340E               	rlcf	___ftdiv@f1+1,w,c
  5609  00E89E  3613               	rlcf	??___ftdiv& (0+255),f,c
  5610  00E8A0  E301               	bnc	u1751
  5611  00E8A2  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5612  00E8A4                     u1751:
  5613  00E8A4  5013               	movf	??___ftdiv,w,c
  5614  00E8A6  6E1A               	movwf	___ftdiv@exp,c
  5615  00E8A8  501A               	movf	___ftdiv@exp,w,c
  5616  00E8AA  A4D8               	btfss	status,2,c
  5617  00E8AC  D002               	goto	l2833
  5618  00E8AE  D00E               	goto	l2835
  5619  00E8B0  D061               	goto	l914
  5620  00E8B2                     l2833:
  5621  00E8B2  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5622  00E8B6  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5623  00E8B8  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5624  00E8BA  3411               	rlcf	___ftdiv@f2+1,w,c
  5625  00E8BC  3613               	rlcf	??___ftdiv& (0+255),f,c
  5626  00E8BE  E301               	bnc	u1771
  5627  00E8C0  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5628  00E8C2                     u1771:
  5629  00E8C2  5013               	movf	??___ftdiv,w,c
  5630  00E8C4  6E1B               	movwf	___ftdiv@sign,c
  5631  00E8C6  501B               	movf	___ftdiv@sign,w,c
  5632  00E8C8  A4D8               	btfss	status,2,c
  5633  00E8CA  D007               	goto	l2839
  5634  00E8CC                     l2835:
  5635  00E8CC  0E00               	movlw	0
  5636  00E8CE  6E0D               	movwf	?___ftdiv,c
  5637  00E8D0  0E00               	movlw	0
  5638  00E8D2  6E0E               	movwf	?___ftdiv+1,c
  5639  00E8D4  0E00               	movlw	0
  5640  00E8D6  6E0F               	movwf	?___ftdiv+2,c
  5641  00E8D8  D04D               	goto	l914
  5642  00E8DA                     l2839:
  5643  00E8DA  0E00               	movlw	0
  5644  00E8DC  6E17               	movwf	___ftdiv@f3,c
  5645  00E8DE  0E00               	movlw	0
  5646  00E8E0  6E18               	movwf	___ftdiv@f3+1,c
  5647  00E8E2  0E00               	movlw	0
  5648  00E8E4  6E19               	movwf	___ftdiv@f3+2,c
  5649  00E8E6  501B               	movf	___ftdiv@sign,w,c
  5650  00E8E8  0F89               	addlw	137
  5651  00E8EA  5E1A               	subwf	___ftdiv@exp,f,c
  5652  00E8EC  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5653  00E8F0  5012               	movf	___ftdiv@f2+2,w,c
  5654  00E8F2  1A1B               	xorwf	___ftdiv@sign,f,c
  5655  00E8F4  0E80               	movlw	128
  5656  00E8F6  161B               	andwf	___ftdiv@sign,f,c
  5657  00E8F8  8E0E               	bsf	___ftdiv@f1+1,7,c
  5658  00E8FA  0EFF               	movlw	255
  5659  00E8FC  160D               	andwf	___ftdiv@f1,f,c
  5660  00E8FE  0EFF               	movlw	255
  5661  00E900  160E               	andwf	___ftdiv@f1+1,f,c
  5662  00E902  0E00               	movlw	0
  5663  00E904  160F               	andwf	___ftdiv@f1+2,f,c
  5664  00E906  8E11               	bsf	___ftdiv@f2+1,7,c
  5665  00E908  0EFF               	movlw	255
  5666  00E90A  1610               	andwf	___ftdiv@f2,f,c
  5667  00E90C  0EFF               	movlw	255
  5668  00E90E  1611               	andwf	___ftdiv@f2+1,f,c
  5669  00E910  0E00               	movlw	0
  5670  00E912  1612               	andwf	___ftdiv@f2+2,f,c
  5671  00E914  0E18               	movlw	24
  5672  00E916  6E16               	movwf	___ftdiv@cntr,c
  5673  00E918  D000               	goto	l2859
  5674  00E91A                     l2859:
  5675  00E91A  90D8               	bcf	status,0,c
  5676  00E91C  3617               	rlcf	___ftdiv@f3,f,c
  5677  00E91E  3618               	rlcf	___ftdiv@f3+1,f,c
  5678  00E920  3619               	rlcf	___ftdiv@f3+2,f,c
  5679  00E922  5010               	movf	___ftdiv@f2,w,c
  5680  00E924  5C0D               	subwf	___ftdiv@f1,w,c
  5681  00E926  5011               	movf	___ftdiv@f2+1,w,c
  5682  00E928  580E               	subwfb	___ftdiv@f1+1,w,c
  5683  00E92A  5012               	movf	___ftdiv@f2+2,w,c
  5684  00E92C  580F               	subwfb	___ftdiv@f1+2,w,c
  5685  00E92E  A0D8               	btfss	status,0,c
  5686  00E930  D007               	goto	l917
  5687  00E932  5010               	movf	___ftdiv@f2,w,c
  5688  00E934  5E0D               	subwf	___ftdiv@f1,f,c
  5689  00E936  5011               	movf	___ftdiv@f2+1,w,c
  5690  00E938  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5691  00E93A  5012               	movf	___ftdiv@f2+2,w,c
  5692  00E93C  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5693  00E93E  8017               	bsf	___ftdiv@f3,0,c
  5694  00E940                     l917:
  5695  00E940  90D8               	bcf	status,0,c
  5696  00E942  360D               	rlcf	___ftdiv@f1,f,c
  5697  00E944  360E               	rlcf	___ftdiv@f1+1,f,c
  5698  00E946  360F               	rlcf	___ftdiv@f1+2,f,c
  5699  00E948  2E16               	decfsz	___ftdiv@cntr,f,c
  5700  00E94A  D7E7               	goto	l2859
  5701  00E94C  D000               	goto	l2869
  5702  00E94E                     l2869:
  5703  00E94E  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5704  00E952  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5705  00E956  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5706  00E95A  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5707  00E95E  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5708  00E962  EC0A  F073         	call	___ftpack	;wreg free
  5709  00E966  C001  F00D         	movff	?___ftpack,?___ftdiv
  5710  00E96A  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5711  00E96E  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5712  00E972  D000               	goto	l914
  5713  00E974                     l914:
  5714  00E974  0012               	return		;funcret
  5715  00E976                     __end_of___ftdiv:
  5716                           	opt stack 0
  5717                           tblptru	equ	0xFF8
  5718                           tblptrh	equ	0xFF7
  5719                           tblptrl	equ	0xFF6
  5720                           tablat	equ	0xFF5
  5721                           postinc0	equ	0xFEE
  5722                           wreg	equ	0xFE8
  5723                           postdec1	equ	0xFE5
  5724                           fsr1l	equ	0xFE1
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function ___awtoft *****************
  5728 ;; Defined at:
  5729 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  c               2    8[COMRAM] int 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  sign            1   11[COMRAM] unsigned char 
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  3    8[COMRAM] float 
  5736 ;; Registers used:
  5737 ;;		wreg, status,2, status,0, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5743 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;Total ram usage:        4 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    1
  5750 ;; This function calls:
  5751 ;;		___ftpack
  5752 ;; This function is called by:
  5753 ;;		_main
  5754 ;;		_update_LCD_misc
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758                           	psect	text25
  5759  00DB6E                     __ptext25:
  5760                           	opt stack 0
  5761  00DB6E                     ___awtoft:
  5762                           	opt stack 29
  5763                           
  5764                           ;incstack = 0
  5765  00DB6E  0E00               	movlw	0
  5766  00DB70  6E0C               	movwf	___awtoft@sign,c
  5767  00DB72  AE0A               	btfss	___awtoft@c+1,7,c
  5768  00DB74  D007               	goto	l2881
  5769  00DB76  6C09               	negf	___awtoft@c,c
  5770  00DB78  1E0A               	comf	___awtoft@c+1,f,c
  5771  00DB7A  B0D8               	btfsc	status,0,c
  5772  00DB7C  2A0A               	incf	___awtoft@c+1,f,c
  5773  00DB7E  0E01               	movlw	1
  5774  00DB80  6E0C               	movwf	___awtoft@sign,c
  5775  00DB82  D000               	goto	l2881
  5776  00DB84                     l2881:
  5777  00DB84  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5778  00DB88  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5779  00DB8C  6A03               	clrf	___ftpack@arg+2,c
  5780  00DB8E  0E8E               	movlw	142
  5781  00DB90  6E04               	movwf	___ftpack@exp,c
  5782  00DB92  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5783  00DB96  EC0A  F073         	call	___ftpack	;wreg free
  5784  00DB9A  C001  F009         	movff	?___ftpack,?___awtoft
  5785  00DB9E  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5786  00DBA2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5787  00DBA6  D000               	goto	l752
  5788  00DBA8                     l752:
  5789  00DBA8  0012               	return		;funcret
  5790  00DBAA                     __end_of___awtoft:
  5791                           	opt stack 0
  5792                           tblptru	equ	0xFF8
  5793                           tblptrh	equ	0xFF7
  5794                           tblptrl	equ	0xFF6
  5795                           tablat	equ	0xFF5
  5796                           postinc0	equ	0xFEE
  5797                           wreg	equ	0xFE8
  5798                           postdec1	equ	0xFE5
  5799                           fsr1l	equ	0xFE1
  5800                           status	equ	0xFD8
  5801                           
  5802 ;; *************** function ___ftpack *****************
  5803 ;; Defined at:
  5804 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  arg             3    0[COMRAM] unsigned um
  5807 ;;  exp             1    3[COMRAM] unsigned char 
  5808 ;;  sign            1    4[COMRAM] unsigned char 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  3    0[COMRAM] float 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2, status,0
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5820 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;Total ram usage:        8 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; This function calls:
  5827 ;;		Nothing
  5828 ;; This function is called by:
  5829 ;;		___awtoft
  5830 ;;		___ftdiv
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text26
  5835  00E614                     __ptext26:
  5836                           	opt stack 0
  5837  00E614                     ___ftpack:
  5838                           	opt stack 29
  5839                           
  5840                           ;incstack = 0
  5841  00E614  5004               	movf	___ftpack@exp,w,c
  5842  00E616  B4D8               	btfsc	status,2,c
  5843  00E618  D005               	goto	l2719
  5844  00E61A  5001               	movf	___ftpack@arg,w,c
  5845  00E61C  1002               	iorwf	___ftpack@arg+1,w,c
  5846  00E61E  1003               	iorwf	___ftpack@arg+2,w,c
  5847  00E620  A4D8               	btfss	status,2,c
  5848  00E622  D00E               	goto	l2725
  5849  00E624                     l2719:
  5850  00E624  0E00               	movlw	0
  5851  00E626  6E01               	movwf	?___ftpack,c
  5852  00E628  0E00               	movlw	0
  5853  00E62A  6E02               	movwf	?___ftpack+1,c
  5854  00E62C  0E00               	movlw	0
  5855  00E62E  6E03               	movwf	?___ftpack+2,c
  5856  00E630  D053               	goto	l842
  5857  00E632  D006               	goto	l2725
  5858  00E634                     l2723:
  5859  00E634  2A04               	incf	___ftpack@exp,f,c
  5860  00E636  90D8               	bcf	status,0,c
  5861  00E638  3203               	rrcf	___ftpack@arg+2,f,c
  5862  00E63A  3202               	rrcf	___ftpack@arg+1,f,c
  5863  00E63C  3201               	rrcf	___ftpack@arg,f,c
  5864  00E63E  D000               	goto	l2725
  5865  00E640                     l2725:
  5866  00E640  0E00               	movlw	0
  5867  00E642  1401               	andwf	___ftpack@arg,w,c
  5868  00E644  6E06               	movwf	??___ftpack& (0+255),c
  5869  00E646  0E00               	movlw	0
  5870  00E648  1402               	andwf	___ftpack@arg+1,w,c
  5871  00E64A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5872  00E64C  0EFE               	movlw	254
  5873  00E64E  1403               	andwf	___ftpack@arg+2,w,c
  5874  00E650  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5875  00E652  5006               	movf	??___ftpack,w,c
  5876  00E654  1007               	iorwf	??___ftpack+1,w,c
  5877  00E656  1008               	iorwf	??___ftpack+2,w,c
  5878  00E658  B4D8               	btfsc	status,2,c
  5879  00E65A  D00E               	goto	l2731
  5880  00E65C  D7EB               	goto	l2723
  5881  00E65E  D00C               	goto	l2731
  5882  00E660                     l2727:
  5883  00E660  2A04               	incf	___ftpack@exp,f,c
  5884  00E662  0E01               	movlw	1
  5885  00E664  2601               	addwf	___ftpack@arg,f,c
  5886  00E666  0E00               	movlw	0
  5887  00E668  2202               	addwfc	___ftpack@arg+1,f,c
  5888  00E66A  0E00               	movlw	0
  5889  00E66C  2203               	addwfc	___ftpack@arg+2,f,c
  5890  00E66E  90D8               	bcf	status,0,c
  5891  00E670  3203               	rrcf	___ftpack@arg+2,f,c
  5892  00E672  3202               	rrcf	___ftpack@arg+1,f,c
  5893  00E674  3201               	rrcf	___ftpack@arg,f,c
  5894  00E676  D000               	goto	l2731
  5895  00E678                     l2731:
  5896  00E678  0E00               	movlw	0
  5897  00E67A  1401               	andwf	___ftpack@arg,w,c
  5898  00E67C  6E06               	movwf	??___ftpack& (0+255),c
  5899  00E67E  0E00               	movlw	0
  5900  00E680  1402               	andwf	___ftpack@arg+1,w,c
  5901  00E682  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5902  00E684  0EFF               	movlw	255
  5903  00E686  1403               	andwf	___ftpack@arg+2,w,c
  5904  00E688  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5905  00E68A  5006               	movf	??___ftpack,w,c
  5906  00E68C  1007               	iorwf	??___ftpack+1,w,c
  5907  00E68E  1008               	iorwf	??___ftpack+2,w,c
  5908  00E690  B4D8               	btfsc	status,2,c
  5909  00E692  D008               	goto	l2735
  5910  00E694  D7E5               	goto	l2727
  5911  00E696  D006               	goto	l2735
  5912  00E698                     l2733:
  5913  00E698  0604               	decf	___ftpack@exp,f,c
  5914  00E69A  90D8               	bcf	status,0,c
  5915  00E69C  3601               	rlcf	___ftpack@arg,f,c
  5916  00E69E  3602               	rlcf	___ftpack@arg+1,f,c
  5917  00E6A0  3603               	rlcf	___ftpack@arg+2,f,c
  5918  00E6A2  D000               	goto	l2735
  5919  00E6A4                     l2735:
  5920  00E6A4  BE02               	btfsc	___ftpack@arg+1,7,c
  5921  00E6A6  D004               	goto	l853
  5922  00E6A8  0E02               	movlw	2
  5923  00E6AA  6004               	cpfslt	___ftpack@exp,c
  5924  00E6AC  D7F5               	goto	l2733
  5925  00E6AE  D000               	goto	l853
  5926  00E6B0                     l853:
  5927  00E6B0  B004               	btfsc	___ftpack@exp,0,c
  5928  00E6B2  D002               	goto	l2741
  5929  00E6B4  9E02               	bcf	___ftpack@arg+1,7,c
  5930  00E6B6  D000               	goto	l2741
  5931  00E6B8                     l2741:
  5932  00E6B8  90D8               	bcf	status,0,c
  5933  00E6BA  3204               	rrcf	___ftpack@exp,f,c
  5934  00E6BC  5004               	movf	___ftpack@exp,w,c
  5935  00E6BE  1203               	iorwf	___ftpack@arg+2,f,c
  5936  00E6C0  5005               	movf	___ftpack@sign,w,c
  5937  00E6C2  B4D8               	btfsc	status,2,c
  5938  00E6C4  D002               	goto	l2747
  5939  00E6C6  8E03               	bsf	___ftpack@arg+2,7,c
  5940  00E6C8  D000               	goto	l2747
  5941  00E6CA                     l2747:
  5942  00E6CA  C001  F001         	movff	___ftpack@arg,?___ftpack
  5943  00E6CE  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5944  00E6D2  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5945  00E6D6  D000               	goto	l842
  5946  00E6D8                     l842:
  5947  00E6D8  0012               	return		;funcret
  5948  00E6DA                     __end_of___ftpack:
  5949                           	opt stack 0
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           postinc0	equ	0xFEE
  5955                           wreg	equ	0xFE8
  5956                           postdec1	equ	0xFE5
  5957                           fsr1l	equ	0xFE1
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _strcpy *****************
  5961 ;; Defined at:
  5962 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  to              2    0[COMRAM] PTR unsigned char 
  5965 ;;		 -> NULL(0), buffer(31), 
  5966 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5967 ;;		 -> STR_14(2), STR_13(2), STR_12(21), STR_11(4), 
  5968 ;;		 -> STR_10(4), STR_9(7), STR_8(10), STR_7(7), 
  5969 ;;		 -> STR_6(12), STR_5(2), STR_4(4), STR_3(4), 
  5970 ;;		 -> STR_2(6), STR_1(20), 
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5973 ;;		 -> NULL(0), buffer(31), 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  2    0[COMRAM] PTR unsigned char 
  5976 ;; Registers used:
  5977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5983 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;Total ram usage:        6 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; This function calls:
  5990 ;;		Nothing
  5991 ;; This function is called by:
  5992 ;;		_Initialize_Screen
  5993 ;;		_Wait_One_Second
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text27
  5998  00DB3C                     __ptext27:
  5999                           	opt stack 0
  6000  00DB3C                     _strcpy:
  6001                           	opt stack 27
  6002                           
  6003                           ;incstack = 0
  6004  00DB3C  C001  F005         	movff	strcpy@to,strcpy@cp
  6005  00DB40  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  6006  00DB44  D005               	goto	l2971
  6007  00DB46                     l2969:
  6008  00DB46  4A05               	infsnz	strcpy@cp,f,c
  6009  00DB48  2A06               	incf	strcpy@cp+1,f,c
  6010  00DB4A  4A03               	infsnz	strcpy@from,f,c
  6011  00DB4C  2A04               	incf	strcpy@from+1,f,c
  6012  00DB4E  D000               	goto	l2971
  6013  00DB50                     l2971:
  6014  00DB50  C003  FFF6         	movff	strcpy@from,tblptrl
  6015  00DB54  C004  FFF7         	movff	strcpy@from+1,tblptrh
  6016  00DB58                     	if	0	;tblptru may be non-zero
  6017  00DB58                     	endif
  6018  00DB58                     	if	0	;tblptru may be non-zero
  6019  00DB58                     	endif
  6020  00DB58  C005  FFD9         	movff	strcpy@cp,fsr2l
  6021  00DB5C  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  6022  00DB60  0008               	tblrd		*
  6023  00DB62  CFF5 FFDF          	movff	tablat,indf2
  6024  00DB66  50DF               	movf	indf2,w,c
  6025  00DB68  A4D8               	btfss	status,2,c
  6026  00DB6A  D7ED               	goto	l2969
  6027                           
  6028                           ;	Return value of _strcpy is never used
  6029  00DB6C  0012               	return		;funcret
  6030  00DB6E                     __end_of_strcpy:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           postinc0	equ	0xFEE
  6037                           wreg	equ	0xFE8
  6038                           postdec1	equ	0xFE5
  6039                           fsr1l	equ	0xFE1
  6040                           indf2	equ	0xFDF
  6041                           fsr2h	equ	0xFDA
  6042                           fsr2l	equ	0xFD9
  6043                           status	equ	0xFD8
  6044                           
  6045 ;; *************** function _Set_NS_LT *****************
  6046 ;; Defined at:
  6047 ;;		line 337 in file "Lab7_redo.c"
  6048 ;; Parameters:    Size  Location     Type
  6049 ;;  color           1    wreg     unsigned char 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;  color           1   53[COMRAM] unsigned char 
  6052 ;; Return value:  Size  Location     Type
  6053 ;;		None               void
  6054 ;; Registers used:
  6055 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6056 ;; Tracked objects:
  6057 ;;		On entry : 0/0
  6058 ;;		On exit  : 0/0
  6059 ;;		Unchanged: 0/0
  6060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;Total ram usage:        1 bytes
  6066 ;; Hardware stack levels used:    1
  6067 ;; Hardware stack levels required when called:    7
  6068 ;; This function calls:
  6069 ;;		_update_LCD_color
  6070 ;; This function is called by:
  6071 ;;		_Day_Mode
  6072 ;;		_Night_Mode
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text28
  6077  00DD34                     __ptext28:
  6078                           	opt stack 0
  6079  00DD34                     _Set_NS_LT:
  6080                           	opt stack 22
  6081                           
  6082                           ;incstack = 0
  6083                           ;Set_NS_LT@color stored from wreg
  6084  00DD34  6E36               	movwf	Set_NS_LT@color,c
  6085                           
  6086                           ;Lab7_redo.c: 339: direction = 1;
  6087  00DD36  0E01               	movlw	1
  6088  00DD38  6E7A               	movwf	_direction,c
  6089                           
  6090                           ;Lab7_redo.c: 340: update_LCD_color(direction, color);
  6091  00DD3A  C036  F033         	movff	Set_NS_LT@color,update_LCD_color@color
  6092  00DD3E  507A               	movf	_direction,w,c
  6093  00DD40  EC9E  F079         	call	_update_LCD_color
  6094                           
  6095                           ;Lab7_redo.c: 342: switch (color)
  6096  00DD44  D00A               	goto	l3421
  6097  00DD46                     l392:
  6098  00DD46  9082               	bcf	3970,0,c	;volatile
  6099  00DD48  D001               	goto	L6
  6100  00DD4A                     l394:
  6101  00DD4A  8082               	bsf	3970,0,c	;volatile
  6102  00DD4C                     L6:
  6103  00DD4C  9282               	bcf	3970,1,c	;volatile
  6104  00DD4E  D013               	goto	l397
  6105  00DD50                     l395:
  6106  00DD50  9082               	bcf	3970,0,c	;volatile
  6107  00DD52  D001               	goto	L7
  6108  00DD54                     l396:
  6109  00DD54  8082               	bsf	3970,0,c	;volatile
  6110  00DD56                     L7:
  6111  00DD56  8282               	bsf	3970,1,c	;volatile
  6112                           
  6113                           ;Lab7_redo.c: 348: }
  6114  00DD58  D00E               	goto	l397
  6115  00DD5A                     l3421:
  6116  00DD5A  5036               	movf	Set_NS_LT@color,w,c
  6117                           
  6118                           ; Switch size 1, requested type "space"
  6119                           ; Number of cases is 4, Range of values is 0 to 3
  6120                           ; switch strategies available:
  6121                           ; Name         Instructions Cycles
  6122                           ; simple_byte           13     7 (average)
  6123                           ;	Chosen strategy is simple_byte
  6124  00DD5C  0A00               	xorlw	0	; case 0
  6125  00DD5E  B4D8               	btfsc	status,2,c
  6126  00DD60  D7F2               	goto	l392
  6127  00DD62  0A01               	xorlw	1	; case 1
  6128  00DD64  B4D8               	btfsc	status,2,c
  6129  00DD66  D7F1               	goto	l394
  6130  00DD68  0A03               	xorlw	3	; case 2
  6131  00DD6A  B4D8               	btfsc	status,2,c
  6132  00DD6C  D7F1               	goto	l395
  6133  00DD6E  0A01               	xorlw	1	; case 3
  6134  00DD70  B4D8               	btfsc	status,2,c
  6135  00DD72  D7F0               	goto	l396
  6136  00DD74  D000               	goto	l397
  6137  00DD76                     l397:
  6138  00DD76  0012               	return		;funcret
  6139  00DD78                     __end_of_Set_NS_LT:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           postinc0	equ	0xFEE
  6146                           wreg	equ	0xFE8
  6147                           postdec1	equ	0xFE5
  6148                           fsr1l	equ	0xFE1
  6149                           indf2	equ	0xFDF
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function _Set_NS *****************
  6155 ;; Defined at:
  6156 ;;		line 323 in file "Lab7_redo.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  color           1    wreg     unsigned char 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  color           1   53[COMRAM] unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;		None               void
  6163 ;; Registers used:
  6164 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;Total ram usage:        1 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    7
  6177 ;; This function calls:
  6178 ;;		_update_LCD_color
  6179 ;; This function is called by:
  6180 ;;		_Day_Mode
  6181 ;;		_Night_Mode
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           	psect	text29
  6186  00DCF0                     __ptext29:
  6187                           	opt stack 0
  6188  00DCF0                     _Set_NS:
  6189                           	opt stack 22
  6190                           
  6191                           ;incstack = 0
  6192                           ;Set_NS@color stored from wreg
  6193  00DCF0  6E36               	movwf	Set_NS@color,c
  6194                           
  6195                           ;Lab7_redo.c: 325: direction = 0;
  6196  00DCF2  0E00               	movlw	0
  6197  00DCF4  6E7A               	movwf	_direction,c
  6198                           
  6199                           ;Lab7_redo.c: 326: update_LCD_color(direction, color);
  6200  00DCF6  C036  F033         	movff	Set_NS@color,update_LCD_color@color
  6201  00DCFA  507A               	movf	_direction,w,c
  6202  00DCFC  EC9E  F079         	call	_update_LCD_color
  6203                           
  6204                           ;Lab7_redo.c: 328: switch (color)
  6205  00DD00  D00A               	goto	l3413
  6206  00DD02                     l383:
  6207  00DD02  9881               	bcf	3969,4,c	;volatile
  6208  00DD04  D001               	goto	L8
  6209  00DD06                     l385:
  6210  00DD06  8881               	bsf	3969,4,c	;volatile
  6211  00DD08                     L8:
  6212  00DD08  9A81               	bcf	3969,5,c	;volatile
  6213  00DD0A  D013               	goto	l388
  6214  00DD0C                     l386:
  6215  00DD0C  9881               	bcf	3969,4,c	;volatile
  6216  00DD0E  D001               	goto	L9
  6217  00DD10                     l387:
  6218  00DD10  8881               	bsf	3969,4,c	;volatile
  6219  00DD12                     L9:
  6220  00DD12  8A81               	bsf	3969,5,c	;volatile
  6221                           
  6222                           ;Lab7_redo.c: 334: }
  6223  00DD14  D00E               	goto	l388
  6224  00DD16                     l3413:
  6225  00DD16  5036               	movf	Set_NS@color,w,c
  6226                           
  6227                           ; Switch size 1, requested type "space"
  6228                           ; Number of cases is 4, Range of values is 0 to 3
  6229                           ; switch strategies available:
  6230                           ; Name         Instructions Cycles
  6231                           ; simple_byte           13     7 (average)
  6232                           ;	Chosen strategy is simple_byte
  6233  00DD18  0A00               	xorlw	0	; case 0
  6234  00DD1A  B4D8               	btfsc	status,2,c
  6235  00DD1C  D7F2               	goto	l383
  6236  00DD1E  0A01               	xorlw	1	; case 1
  6237  00DD20  B4D8               	btfsc	status,2,c
  6238  00DD22  D7F1               	goto	l385
  6239  00DD24  0A03               	xorlw	3	; case 2
  6240  00DD26  B4D8               	btfsc	status,2,c
  6241  00DD28  D7F1               	goto	l386
  6242  00DD2A  0A01               	xorlw	1	; case 3
  6243  00DD2C  B4D8               	btfsc	status,2,c
  6244  00DD2E  D7F0               	goto	l387
  6245  00DD30  D000               	goto	l388
  6246  00DD32                     l388:
  6247  00DD32  0012               	return		;funcret
  6248  00DD34                     __end_of_Set_NS:
  6249                           	opt stack 0
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           postinc0	equ	0xFEE
  6255                           wreg	equ	0xFE8
  6256                           postdec1	equ	0xFE5
  6257                           fsr1l	equ	0xFE1
  6258                           indf2	equ	0xFDF
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           
  6263 ;; *************** function _Set_EW_LT *****************
  6264 ;; Defined at:
  6265 ;;		line 365 in file "Lab7_redo.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  color           1    wreg     unsigned char 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  color           1   53[COMRAM] unsigned char 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;		None               void
  6272 ;; Registers used:
  6273 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;Total ram usage:        1 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    7
  6286 ;; This function calls:
  6287 ;;		_update_LCD_color
  6288 ;; This function is called by:
  6289 ;;		_Day_Mode
  6290 ;;		_Night_Mode
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text30
  6295  00DCAC                     __ptext30:
  6296                           	opt stack 0
  6297  00DCAC                     _Set_EW_LT:
  6298                           	opt stack 22
  6299                           
  6300                           ;incstack = 0
  6301                           ;Set_EW_LT@color stored from wreg
  6302  00DCAC  6E36               	movwf	Set_EW_LT@color,c
  6303                           
  6304                           ;Lab7_redo.c: 367: direction = 3;
  6305  00DCAE  0E03               	movlw	3
  6306  00DCB0  6E7A               	movwf	_direction,c
  6307                           
  6308                           ;Lab7_redo.c: 368: update_LCD_color(direction, color);
  6309  00DCB2  C036  F033         	movff	Set_EW_LT@color,update_LCD_color@color
  6310  00DCB6  507A               	movf	_direction,w,c
  6311  00DCB8  EC9E  F079         	call	_update_LCD_color
  6312                           
  6313                           ;Lab7_redo.c: 370: switch (color)
  6314  00DCBC  D00A               	goto	l3437
  6315  00DCBE                     l410:
  6316  00DCBE  9284               	bcf	3972,1,c	;volatile
  6317  00DCC0  D001               	goto	L10
  6318  00DCC2                     l412:
  6319  00DCC2  8284               	bsf	3972,1,c	;volatile
  6320  00DCC4                     L10:
  6321  00DCC4  9484               	bcf	3972,2,c	;volatile
  6322  00DCC6  D013               	goto	l415
  6323  00DCC8                     l413:
  6324  00DCC8  9284               	bcf	3972,1,c	;volatile
  6325  00DCCA  D001               	goto	L11
  6326  00DCCC                     l414:
  6327  00DCCC  8284               	bsf	3972,1,c	;volatile
  6328  00DCCE                     L11:
  6329  00DCCE  8484               	bsf	3972,2,c	;volatile
  6330                           
  6331                           ;Lab7_redo.c: 376: }
  6332  00DCD0  D00E               	goto	l415
  6333  00DCD2                     l3437:
  6334  00DCD2  5036               	movf	Set_EW_LT@color,w,c
  6335                           
  6336                           ; Switch size 1, requested type "space"
  6337                           ; Number of cases is 4, Range of values is 0 to 3
  6338                           ; switch strategies available:
  6339                           ; Name         Instructions Cycles
  6340                           ; simple_byte           13     7 (average)
  6341                           ;	Chosen strategy is simple_byte
  6342  00DCD4  0A00               	xorlw	0	; case 0
  6343  00DCD6  B4D8               	btfsc	status,2,c
  6344  00DCD8  D7F2               	goto	l410
  6345  00DCDA  0A01               	xorlw	1	; case 1
  6346  00DCDC  B4D8               	btfsc	status,2,c
  6347  00DCDE  D7F1               	goto	l412
  6348  00DCE0  0A03               	xorlw	3	; case 2
  6349  00DCE2  B4D8               	btfsc	status,2,c
  6350  00DCE4  D7F1               	goto	l413
  6351  00DCE6  0A01               	xorlw	1	; case 3
  6352  00DCE8  B4D8               	btfsc	status,2,c
  6353  00DCEA  D7F0               	goto	l414
  6354  00DCEC  D000               	goto	l415
  6355  00DCEE                     l415:
  6356  00DCEE  0012               	return		;funcret
  6357  00DCF0                     __end_of_Set_EW_LT:
  6358                           	opt stack 0
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           postinc0	equ	0xFEE
  6364                           wreg	equ	0xFE8
  6365                           postdec1	equ	0xFE5
  6366                           fsr1l	equ	0xFE1
  6367                           indf2	equ	0xFDF
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function _Set_EW *****************
  6373 ;; Defined at:
  6374 ;;		line 351 in file "Lab7_redo.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  color           1    wreg     unsigned char 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  color           1   53[COMRAM] unsigned char 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;		None               void
  6381 ;; Registers used:
  6382 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;Total ram usage:        1 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    7
  6395 ;; This function calls:
  6396 ;;		_update_LCD_color
  6397 ;; This function is called by:
  6398 ;;		_Day_Mode
  6399 ;;		_Night_Mode
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text31
  6404  00DC68                     __ptext31:
  6405                           	opt stack 0
  6406  00DC68                     _Set_EW:
  6407                           	opt stack 22
  6408                           
  6409                           ;incstack = 0
  6410                           ;Set_EW@color stored from wreg
  6411  00DC68  6E36               	movwf	Set_EW@color,c
  6412                           
  6413                           ;Lab7_redo.c: 353: direction = 2;
  6414  00DC6A  0E02               	movlw	2
  6415  00DC6C  6E7A               	movwf	_direction,c
  6416                           
  6417                           ;Lab7_redo.c: 354: update_LCD_color(direction, color);
  6418  00DC6E  C036  F033         	movff	Set_EW@color,update_LCD_color@color
  6419  00DC72  507A               	movf	_direction,w,c
  6420  00DC74  EC9E  F079         	call	_update_LCD_color
  6421                           
  6422                           ;Lab7_redo.c: 356: switch (color)
  6423  00DC78  D00A               	goto	l3429
  6424  00DC7A                     l401:
  6425  00DC7A  9083               	bcf	3971,0,c	;volatile
  6426  00DC7C  D001               	goto	L12
  6427  00DC7E                     l403:
  6428  00DC7E  8083               	bsf	3971,0,c	;volatile
  6429  00DC80                     L12:
  6430  00DC80  9283               	bcf	3971,1,c	;volatile
  6431  00DC82  D013               	goto	l406
  6432  00DC84                     l404:
  6433  00DC84  9083               	bcf	3971,0,c	;volatile
  6434  00DC86  D001               	goto	L13
  6435  00DC88                     l405:
  6436  00DC88  8083               	bsf	3971,0,c	;volatile
  6437  00DC8A                     L13:
  6438  00DC8A  8283               	bsf	3971,1,c	;volatile
  6439                           
  6440                           ;Lab7_redo.c: 362: }
  6441  00DC8C  D00E               	goto	l406
  6442  00DC8E                     l3429:
  6443  00DC8E  5036               	movf	Set_EW@color,w,c
  6444                           
  6445                           ; Switch size 1, requested type "space"
  6446                           ; Number of cases is 4, Range of values is 0 to 3
  6447                           ; switch strategies available:
  6448                           ; Name         Instructions Cycles
  6449                           ; simple_byte           13     7 (average)
  6450                           ;	Chosen strategy is simple_byte
  6451  00DC90  0A00               	xorlw	0	; case 0
  6452  00DC92  B4D8               	btfsc	status,2,c
  6453  00DC94  D7F2               	goto	l401
  6454  00DC96  0A01               	xorlw	1	; case 1
  6455  00DC98  B4D8               	btfsc	status,2,c
  6456  00DC9A  D7F1               	goto	l403
  6457  00DC9C  0A03               	xorlw	3	; case 2
  6458  00DC9E  B4D8               	btfsc	status,2,c
  6459  00DCA0  D7F1               	goto	l404
  6460  00DCA2  0A01               	xorlw	1	; case 3
  6461  00DCA4  B4D8               	btfsc	status,2,c
  6462  00DCA6  D7F0               	goto	l405
  6463  00DCA8  D000               	goto	l406
  6464  00DCAA                     l406:
  6465  00DCAA  0012               	return		;funcret
  6466  00DCAC                     __end_of_Set_EW:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           postinc0	equ	0xFEE
  6473                           wreg	equ	0xFE8
  6474                           postdec1	equ	0xFE5
  6475                           fsr1l	equ	0xFE1
  6476                           indf2	equ	0xFDF
  6477                           fsr2h	equ	0xFDA
  6478                           fsr2l	equ	0xFD9
  6479                           status	equ	0xFD8
  6480                           
  6481 ;; *************** function _update_LCD_color *****************
  6482 ;; Defined at:
  6483 ;;		line 609 in file "Lab7_redo.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;  direction       1    wreg     unsigned char 
  6486 ;;  color           1   50[COMRAM] unsigned char 
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;  direction       1   51[COMRAM] unsigned char 
  6489 ;;  Circle_Y        1   52[COMRAM] unsigned char 
  6490 ;; Return value:  Size  Location     Type
  6491 ;;		None               void
  6492 ;; Registers used:
  6493 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6499 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;Total ram usage:        3 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    6
  6506 ;; This function calls:
  6507 ;;		_drawCircle
  6508 ;;		_fillCircle
  6509 ;; This function is called by:
  6510 ;;		_Set_NS
  6511 ;;		_Set_NS_LT
  6512 ;;		_Set_EW
  6513 ;;		_Set_EW_LT
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text32
  6518  00F33C                     __ptext32:
  6519                           	opt stack 0
  6520  00F33C                     _update_LCD_color:
  6521                           	opt stack 22
  6522                           
  6523                           ;incstack = 0
  6524                           ;update_LCD_color@direction stored from wreg
  6525  00F33C  6E34               	movwf	update_LCD_color@direction,c
  6526                           
  6527                           ;Lab7_redo.c: 611: char Circle_Y;
  6528                           ;Lab7_redo.c: 612: Circle_Y = 20 + 15 + direction * 30;
  6529  00F33E  5034               	movf	update_LCD_color@direction,w,c
  6530  00F340  0D1E               	mullw	30
  6531  00F342  50F3               	movf	prodl,w,c
  6532  00F344  0F23               	addlw	35
  6533  00F346  6E35               	movwf	update_LCD_color@Circle_Y,c
  6534                           
  6535                           ;Lab7_redo.c: 614: if (color == 0)
  6536  00F348  5033               	movf	update_LCD_color@color,w,c
  6537  00F34A  A4D8               	btfss	status,2,c
  6538  00F34C  D067               	goto	l3267
  6539                           
  6540                           ;Lab7_redo.c: 615: {
  6541                           ;Lab7_redo.c: 616: fillCircle(40, Circle_Y, 7, 0x0000);
  6542  00F34E  0E00               	movlw	0
  6543  00F350  6E2C               	movwf	fillCircle@x0+1,c
  6544  00F352  0E28               	movlw	40
  6545  00F354  6E2B               	movwf	fillCircle@x0,c
  6546  00F356  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6547  00F35A  6A2E               	clrf	fillCircle@y0+1,c
  6548  00F35C  0E00               	movlw	0
  6549  00F35E  6E30               	movwf	fillCircle@r+1,c
  6550  00F360  0E07               	movlw	7
  6551  00F362  6E2F               	movwf	fillCircle@r,c
  6552  00F364  0E00               	movlw	0
  6553  00F366  6E32               	movwf	fillCircle@color+1,c
  6554  00F368  0E00               	movlw	0
  6555  00F36A  6E31               	movwf	fillCircle@color,c
  6556  00F36C  EC08  F06F         	call	_fillCircle	;wreg free
  6557                           
  6558                           ;Lab7_redo.c: 617: fillCircle(60, Circle_Y, 7, 0x0000);
  6559  00F370  0E00               	movlw	0
  6560  00F372  6E2C               	movwf	fillCircle@x0+1,c
  6561  00F374  0E3C               	movlw	60
  6562  00F376  6E2B               	movwf	fillCircle@x0,c
  6563  00F378  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6564  00F37C  6A2E               	clrf	fillCircle@y0+1,c
  6565  00F37E  0E00               	movlw	0
  6566  00F380  6E30               	movwf	fillCircle@r+1,c
  6567  00F382  0E07               	movlw	7
  6568  00F384  6E2F               	movwf	fillCircle@r,c
  6569  00F386  0E00               	movlw	0
  6570  00F388  6E32               	movwf	fillCircle@color+1,c
  6571  00F38A  0E00               	movlw	0
  6572  00F38C  6E31               	movwf	fillCircle@color,c
  6573  00F38E  EC08  F06F         	call	_fillCircle	;wreg free
  6574                           
  6575                           ;Lab7_redo.c: 618: fillCircle(80, Circle_Y, 7, 0x0000);
  6576  00F392  0E00               	movlw	0
  6577  00F394  6E2C               	movwf	fillCircle@x0+1,c
  6578  00F396  0E50               	movlw	80
  6579  00F398  6E2B               	movwf	fillCircle@x0,c
  6580  00F39A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6581  00F39E  6A2E               	clrf	fillCircle@y0+1,c
  6582  00F3A0  0E00               	movlw	0
  6583  00F3A2  6E30               	movwf	fillCircle@r+1,c
  6584  00F3A4  0E07               	movlw	7
  6585  00F3A6  6E2F               	movwf	fillCircle@r,c
  6586  00F3A8  0E00               	movlw	0
  6587  00F3AA  6E32               	movwf	fillCircle@color+1,c
  6588  00F3AC  0E00               	movlw	0
  6589  00F3AE  6E31               	movwf	fillCircle@color,c
  6590  00F3B0  EC08  F06F         	call	_fillCircle	;wreg free
  6591                           
  6592                           ;Lab7_redo.c: 619: drawCircle(40, Circle_Y, 7, 0xF800);
  6593  00F3B4  0E00               	movlw	0
  6594  00F3B6  6E0D               	movwf	drawCircle@x0+1,c
  6595  00F3B8  0E28               	movlw	40
  6596  00F3BA  6E0C               	movwf	drawCircle@x0,c
  6597  00F3BC  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6598  00F3C0  6A0F               	clrf	drawCircle@y0+1,c
  6599  00F3C2  0E00               	movlw	0
  6600  00F3C4  6E11               	movwf	drawCircle@r+1,c
  6601  00F3C6  0E07               	movlw	7
  6602  00F3C8  6E10               	movwf	drawCircle@r,c
  6603  00F3CA  0EF8               	movlw	248
  6604  00F3CC  6E13               	movwf	drawCircle@color+1,c
  6605  00F3CE  0E00               	movlw	0
  6606  00F3D0  6E12               	movwf	drawCircle@color,c
  6607  00F3D2  ECC2  F077         	call	_drawCircle	;wreg free
  6608                           
  6609                           ;Lab7_redo.c: 620: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6610  00F3D6  0E00               	movlw	0
  6611  00F3D8  6E0D               	movwf	drawCircle@x0+1,c
  6612  00F3DA  0E3C               	movlw	60
  6613  00F3DC  6E0C               	movwf	drawCircle@x0,c
  6614  00F3DE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6615  00F3E2  6A0F               	clrf	drawCircle@y0+1,c
  6616  00F3E4  0E00               	movlw	0
  6617  00F3E6  6E11               	movwf	drawCircle@r+1,c
  6618  00F3E8  0E07               	movlw	7
  6619  00F3EA  6E10               	movwf	drawCircle@r,c
  6620  00F3EC  0EFF               	movlw	255
  6621  00F3EE  6E13               	movwf	drawCircle@color+1,c
  6622  00F3F0  0EE0               	movlw	224
  6623  00F3F2  6E12               	movwf	drawCircle@color,c
  6624  00F3F4  ECC2  F077         	call	_drawCircle	;wreg free
  6625                           
  6626                           ;Lab7_redo.c: 621: drawCircle(80, Circle_Y, 7, 0x07E0);
  6627  00F3F8  0E00               	movlw	0
  6628  00F3FA  6E0D               	movwf	drawCircle@x0+1,c
  6629  00F3FC  0E50               	movlw	80
  6630  00F3FE  6E0C               	movwf	drawCircle@x0,c
  6631  00F400  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6632  00F404  6A0F               	clrf	drawCircle@y0+1,c
  6633  00F406  0E00               	movlw	0
  6634  00F408  6E11               	movwf	drawCircle@r+1,c
  6635  00F40A  0E07               	movlw	7
  6636  00F40C  6E10               	movwf	drawCircle@r,c
  6637  00F40E  0E07               	movlw	7
  6638  00F410  6E13               	movwf	drawCircle@color+1,c
  6639  00F412  0EE0               	movlw	224
  6640  00F414  6E12               	movwf	drawCircle@color,c
  6641  00F416  ECC2  F077         	call	_drawCircle	;wreg free
  6642  00F41A  D000               	goto	l3267
  6643  00F41C                     l3267:
  6644                           
  6645                           ;Lab7_redo.c: 622: }
  6646                           ;Lab7_redo.c: 624: if (color == 1)
  6647  00F41C  0433               	decf	update_LCD_color@color,w,c
  6648  00F41E  A4D8               	btfss	status,2,c
  6649  00F420  D067               	goto	l3271
  6650                           
  6651                           ;Lab7_redo.c: 625: {
  6652                           ;Lab7_redo.c: 626: fillCircle(40, Circle_Y, 7, 0xF800);
  6653  00F422  0E00               	movlw	0
  6654  00F424  6E2C               	movwf	fillCircle@x0+1,c
  6655  00F426  0E28               	movlw	40
  6656  00F428  6E2B               	movwf	fillCircle@x0,c
  6657  00F42A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6658  00F42E  6A2E               	clrf	fillCircle@y0+1,c
  6659  00F430  0E00               	movlw	0
  6660  00F432  6E30               	movwf	fillCircle@r+1,c
  6661  00F434  0E07               	movlw	7
  6662  00F436  6E2F               	movwf	fillCircle@r,c
  6663  00F438  0EF8               	movlw	248
  6664  00F43A  6E32               	movwf	fillCircle@color+1,c
  6665  00F43C  0E00               	movlw	0
  6666  00F43E  6E31               	movwf	fillCircle@color,c
  6667  00F440  EC08  F06F         	call	_fillCircle	;wreg free
  6668                           
  6669                           ;Lab7_redo.c: 627: fillCircle(60, Circle_Y, 7, 0x0000);
  6670  00F444  0E00               	movlw	0
  6671  00F446  6E2C               	movwf	fillCircle@x0+1,c
  6672  00F448  0E3C               	movlw	60
  6673  00F44A  6E2B               	movwf	fillCircle@x0,c
  6674  00F44C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6675  00F450  6A2E               	clrf	fillCircle@y0+1,c
  6676  00F452  0E00               	movlw	0
  6677  00F454  6E30               	movwf	fillCircle@r+1,c
  6678  00F456  0E07               	movlw	7
  6679  00F458  6E2F               	movwf	fillCircle@r,c
  6680  00F45A  0E00               	movlw	0
  6681  00F45C  6E32               	movwf	fillCircle@color+1,c
  6682  00F45E  0E00               	movlw	0
  6683  00F460  6E31               	movwf	fillCircle@color,c
  6684  00F462  EC08  F06F         	call	_fillCircle	;wreg free
  6685                           
  6686                           ;Lab7_redo.c: 628: fillCircle(80, Circle_Y, 7, 0x0000);
  6687  00F466  0E00               	movlw	0
  6688  00F468  6E2C               	movwf	fillCircle@x0+1,c
  6689  00F46A  0E50               	movlw	80
  6690  00F46C  6E2B               	movwf	fillCircle@x0,c
  6691  00F46E  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6692  00F472  6A2E               	clrf	fillCircle@y0+1,c
  6693  00F474  0E00               	movlw	0
  6694  00F476  6E30               	movwf	fillCircle@r+1,c
  6695  00F478  0E07               	movlw	7
  6696  00F47A  6E2F               	movwf	fillCircle@r,c
  6697  00F47C  0E00               	movlw	0
  6698  00F47E  6E32               	movwf	fillCircle@color+1,c
  6699  00F480  0E00               	movlw	0
  6700  00F482  6E31               	movwf	fillCircle@color,c
  6701  00F484  EC08  F06F         	call	_fillCircle	;wreg free
  6702                           
  6703                           ;Lab7_redo.c: 629: drawCircle(40, Circle_Y, 7, 0xF800);
  6704  00F488  0E00               	movlw	0
  6705  00F48A  6E0D               	movwf	drawCircle@x0+1,c
  6706  00F48C  0E28               	movlw	40
  6707  00F48E  6E0C               	movwf	drawCircle@x0,c
  6708  00F490  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6709  00F494  6A0F               	clrf	drawCircle@y0+1,c
  6710  00F496  0E00               	movlw	0
  6711  00F498  6E11               	movwf	drawCircle@r+1,c
  6712  00F49A  0E07               	movlw	7
  6713  00F49C  6E10               	movwf	drawCircle@r,c
  6714  00F49E  0EF8               	movlw	248
  6715  00F4A0  6E13               	movwf	drawCircle@color+1,c
  6716  00F4A2  0E00               	movlw	0
  6717  00F4A4  6E12               	movwf	drawCircle@color,c
  6718  00F4A6  ECC2  F077         	call	_drawCircle	;wreg free
  6719                           
  6720                           ;Lab7_redo.c: 630: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6721  00F4AA  0E00               	movlw	0
  6722  00F4AC  6E0D               	movwf	drawCircle@x0+1,c
  6723  00F4AE  0E3C               	movlw	60
  6724  00F4B0  6E0C               	movwf	drawCircle@x0,c
  6725  00F4B2  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6726  00F4B6  6A0F               	clrf	drawCircle@y0+1,c
  6727  00F4B8  0E00               	movlw	0
  6728  00F4BA  6E11               	movwf	drawCircle@r+1,c
  6729  00F4BC  0E07               	movlw	7
  6730  00F4BE  6E10               	movwf	drawCircle@r,c
  6731  00F4C0  0EFF               	movlw	255
  6732  00F4C2  6E13               	movwf	drawCircle@color+1,c
  6733  00F4C4  0EE0               	movlw	224
  6734  00F4C6  6E12               	movwf	drawCircle@color,c
  6735  00F4C8  ECC2  F077         	call	_drawCircle	;wreg free
  6736                           
  6737                           ;Lab7_redo.c: 631: drawCircle(80, Circle_Y, 7, 0x07E0);
  6738  00F4CC  0E00               	movlw	0
  6739  00F4CE  6E0D               	movwf	drawCircle@x0+1,c
  6740  00F4D0  0E50               	movlw	80
  6741  00F4D2  6E0C               	movwf	drawCircle@x0,c
  6742  00F4D4  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6743  00F4D8  6A0F               	clrf	drawCircle@y0+1,c
  6744  00F4DA  0E00               	movlw	0
  6745  00F4DC  6E11               	movwf	drawCircle@r+1,c
  6746  00F4DE  0E07               	movlw	7
  6747  00F4E0  6E10               	movwf	drawCircle@r,c
  6748  00F4E2  0E07               	movlw	7
  6749  00F4E4  6E13               	movwf	drawCircle@color+1,c
  6750  00F4E6  0EE0               	movlw	224
  6751  00F4E8  6E12               	movwf	drawCircle@color,c
  6752  00F4EA  ECC2  F077         	call	_drawCircle	;wreg free
  6753  00F4EE  D000               	goto	l3271
  6754  00F4F0                     l3271:
  6755                           
  6756                           ;Lab7_redo.c: 632: }
  6757                           ;Lab7_redo.c: 633: if (color == 3)
  6758  00F4F0  0E03               	movlw	3
  6759  00F4F2  1833               	xorwf	update_LCD_color@color,w,c
  6760  00F4F4  A4D8               	btfss	status,2,c
  6761  00F4F6  D067               	goto	l3275
  6762                           
  6763                           ;Lab7_redo.c: 634: {
  6764                           ;Lab7_redo.c: 635: fillCircle(40, Circle_Y, 7, 0x0000);
  6765  00F4F8  0E00               	movlw	0
  6766  00F4FA  6E2C               	movwf	fillCircle@x0+1,c
  6767  00F4FC  0E28               	movlw	40
  6768  00F4FE  6E2B               	movwf	fillCircle@x0,c
  6769  00F500  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6770  00F504  6A2E               	clrf	fillCircle@y0+1,c
  6771  00F506  0E00               	movlw	0
  6772  00F508  6E30               	movwf	fillCircle@r+1,c
  6773  00F50A  0E07               	movlw	7
  6774  00F50C  6E2F               	movwf	fillCircle@r,c
  6775  00F50E  0E00               	movlw	0
  6776  00F510  6E32               	movwf	fillCircle@color+1,c
  6777  00F512  0E00               	movlw	0
  6778  00F514  6E31               	movwf	fillCircle@color,c
  6779  00F516  EC08  F06F         	call	_fillCircle	;wreg free
  6780                           
  6781                           ;Lab7_redo.c: 636: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6782  00F51A  0E00               	movlw	0
  6783  00F51C  6E2C               	movwf	fillCircle@x0+1,c
  6784  00F51E  0E3C               	movlw	60
  6785  00F520  6E2B               	movwf	fillCircle@x0,c
  6786  00F522  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6787  00F526  6A2E               	clrf	fillCircle@y0+1,c
  6788  00F528  0E00               	movlw	0
  6789  00F52A  6E30               	movwf	fillCircle@r+1,c
  6790  00F52C  0E07               	movlw	7
  6791  00F52E  6E2F               	movwf	fillCircle@r,c
  6792  00F530  0EFF               	movlw	255
  6793  00F532  6E32               	movwf	fillCircle@color+1,c
  6794  00F534  0EE0               	movlw	224
  6795  00F536  6E31               	movwf	fillCircle@color,c
  6796  00F538  EC08  F06F         	call	_fillCircle	;wreg free
  6797                           
  6798                           ;Lab7_redo.c: 637: fillCircle(80, Circle_Y, 7, 0x0000);
  6799  00F53C  0E00               	movlw	0
  6800  00F53E  6E2C               	movwf	fillCircle@x0+1,c
  6801  00F540  0E50               	movlw	80
  6802  00F542  6E2B               	movwf	fillCircle@x0,c
  6803  00F544  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6804  00F548  6A2E               	clrf	fillCircle@y0+1,c
  6805  00F54A  0E00               	movlw	0
  6806  00F54C  6E30               	movwf	fillCircle@r+1,c
  6807  00F54E  0E07               	movlw	7
  6808  00F550  6E2F               	movwf	fillCircle@r,c
  6809  00F552  0E00               	movlw	0
  6810  00F554  6E32               	movwf	fillCircle@color+1,c
  6811  00F556  0E00               	movlw	0
  6812  00F558  6E31               	movwf	fillCircle@color,c
  6813  00F55A  EC08  F06F         	call	_fillCircle	;wreg free
  6814                           
  6815                           ;Lab7_redo.c: 638: drawCircle(40, Circle_Y, 7, 0xF800);
  6816  00F55E  0E00               	movlw	0
  6817  00F560  6E0D               	movwf	drawCircle@x0+1,c
  6818  00F562  0E28               	movlw	40
  6819  00F564  6E0C               	movwf	drawCircle@x0,c
  6820  00F566  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6821  00F56A  6A0F               	clrf	drawCircle@y0+1,c
  6822  00F56C  0E00               	movlw	0
  6823  00F56E  6E11               	movwf	drawCircle@r+1,c
  6824  00F570  0E07               	movlw	7
  6825  00F572  6E10               	movwf	drawCircle@r,c
  6826  00F574  0EF8               	movlw	248
  6827  00F576  6E13               	movwf	drawCircle@color+1,c
  6828  00F578  0E00               	movlw	0
  6829  00F57A  6E12               	movwf	drawCircle@color,c
  6830  00F57C  ECC2  F077         	call	_drawCircle	;wreg free
  6831                           
  6832                           ;Lab7_redo.c: 639: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6833  00F580  0E00               	movlw	0
  6834  00F582  6E0D               	movwf	drawCircle@x0+1,c
  6835  00F584  0E3C               	movlw	60
  6836  00F586  6E0C               	movwf	drawCircle@x0,c
  6837  00F588  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6838  00F58C  6A0F               	clrf	drawCircle@y0+1,c
  6839  00F58E  0E00               	movlw	0
  6840  00F590  6E11               	movwf	drawCircle@r+1,c
  6841  00F592  0E07               	movlw	7
  6842  00F594  6E10               	movwf	drawCircle@r,c
  6843  00F596  0EFF               	movlw	255
  6844  00F598  6E13               	movwf	drawCircle@color+1,c
  6845  00F59A  0EE0               	movlw	224
  6846  00F59C  6E12               	movwf	drawCircle@color,c
  6847  00F59E  ECC2  F077         	call	_drawCircle	;wreg free
  6848                           
  6849                           ;Lab7_redo.c: 640: drawCircle(80, Circle_Y, 7, 0x07E0);
  6850  00F5A2  0E00               	movlw	0
  6851  00F5A4  6E0D               	movwf	drawCircle@x0+1,c
  6852  00F5A6  0E50               	movlw	80
  6853  00F5A8  6E0C               	movwf	drawCircle@x0,c
  6854  00F5AA  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6855  00F5AE  6A0F               	clrf	drawCircle@y0+1,c
  6856  00F5B0  0E00               	movlw	0
  6857  00F5B2  6E11               	movwf	drawCircle@r+1,c
  6858  00F5B4  0E07               	movlw	7
  6859  00F5B6  6E10               	movwf	drawCircle@r,c
  6860  00F5B8  0E07               	movlw	7
  6861  00F5BA  6E13               	movwf	drawCircle@color+1,c
  6862  00F5BC  0EE0               	movlw	224
  6863  00F5BE  6E12               	movwf	drawCircle@color,c
  6864  00F5C0  ECC2  F077         	call	_drawCircle	;wreg free
  6865  00F5C4  D000               	goto	l3275
  6866  00F5C6                     l3275:
  6867                           
  6868                           ;Lab7_redo.c: 641: }
  6869                           ;Lab7_redo.c: 644: if (color == 2)
  6870  00F5C6  0E02               	movlw	2
  6871  00F5C8  1833               	xorwf	update_LCD_color@color,w,c
  6872  00F5CA  A4D8               	btfss	status,2,c
  6873  00F5CC  D067               	goto	l469
  6874                           
  6875                           ;Lab7_redo.c: 645: {
  6876                           ;Lab7_redo.c: 646: fillCircle(40, Circle_Y, 7, 0x0000);
  6877  00F5CE  0E00               	movlw	0
  6878  00F5D0  6E2C               	movwf	fillCircle@x0+1,c
  6879  00F5D2  0E28               	movlw	40
  6880  00F5D4  6E2B               	movwf	fillCircle@x0,c
  6881  00F5D6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6882  00F5DA  6A2E               	clrf	fillCircle@y0+1,c
  6883  00F5DC  0E00               	movlw	0
  6884  00F5DE  6E30               	movwf	fillCircle@r+1,c
  6885  00F5E0  0E07               	movlw	7
  6886  00F5E2  6E2F               	movwf	fillCircle@r,c
  6887  00F5E4  0E00               	movlw	0
  6888  00F5E6  6E32               	movwf	fillCircle@color+1,c
  6889  00F5E8  0E00               	movlw	0
  6890  00F5EA  6E31               	movwf	fillCircle@color,c
  6891  00F5EC  EC08  F06F         	call	_fillCircle	;wreg free
  6892                           
  6893                           ;Lab7_redo.c: 647: fillCircle(60, Circle_Y, 7, 0x0000);
  6894  00F5F0  0E00               	movlw	0
  6895  00F5F2  6E2C               	movwf	fillCircle@x0+1,c
  6896  00F5F4  0E3C               	movlw	60
  6897  00F5F6  6E2B               	movwf	fillCircle@x0,c
  6898  00F5F8  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6899  00F5FC  6A2E               	clrf	fillCircle@y0+1,c
  6900  00F5FE  0E00               	movlw	0
  6901  00F600  6E30               	movwf	fillCircle@r+1,c
  6902  00F602  0E07               	movlw	7
  6903  00F604  6E2F               	movwf	fillCircle@r,c
  6904  00F606  0E00               	movlw	0
  6905  00F608  6E32               	movwf	fillCircle@color+1,c
  6906  00F60A  0E00               	movlw	0
  6907  00F60C  6E31               	movwf	fillCircle@color,c
  6908  00F60E  EC08  F06F         	call	_fillCircle	;wreg free
  6909                           
  6910                           ;Lab7_redo.c: 648: fillCircle(80, Circle_Y, 7, 0x07E0);
  6911  00F612  0E00               	movlw	0
  6912  00F614  6E2C               	movwf	fillCircle@x0+1,c
  6913  00F616  0E50               	movlw	80
  6914  00F618  6E2B               	movwf	fillCircle@x0,c
  6915  00F61A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6916  00F61E  6A2E               	clrf	fillCircle@y0+1,c
  6917  00F620  0E00               	movlw	0
  6918  00F622  6E30               	movwf	fillCircle@r+1,c
  6919  00F624  0E07               	movlw	7
  6920  00F626  6E2F               	movwf	fillCircle@r,c
  6921  00F628  0E07               	movlw	7
  6922  00F62A  6E32               	movwf	fillCircle@color+1,c
  6923  00F62C  0EE0               	movlw	224
  6924  00F62E  6E31               	movwf	fillCircle@color,c
  6925  00F630  EC08  F06F         	call	_fillCircle	;wreg free
  6926                           
  6927                           ;Lab7_redo.c: 649: drawCircle(40, Circle_Y, 7, 0xF800);
  6928  00F634  0E00               	movlw	0
  6929  00F636  6E0D               	movwf	drawCircle@x0+1,c
  6930  00F638  0E28               	movlw	40
  6931  00F63A  6E0C               	movwf	drawCircle@x0,c
  6932  00F63C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6933  00F640  6A0F               	clrf	drawCircle@y0+1,c
  6934  00F642  0E00               	movlw	0
  6935  00F644  6E11               	movwf	drawCircle@r+1,c
  6936  00F646  0E07               	movlw	7
  6937  00F648  6E10               	movwf	drawCircle@r,c
  6938  00F64A  0EF8               	movlw	248
  6939  00F64C  6E13               	movwf	drawCircle@color+1,c
  6940  00F64E  0E00               	movlw	0
  6941  00F650  6E12               	movwf	drawCircle@color,c
  6942  00F652  ECC2  F077         	call	_drawCircle	;wreg free
  6943                           
  6944                           ;Lab7_redo.c: 650: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6945  00F656  0E00               	movlw	0
  6946  00F658  6E0D               	movwf	drawCircle@x0+1,c
  6947  00F65A  0E3C               	movlw	60
  6948  00F65C  6E0C               	movwf	drawCircle@x0,c
  6949  00F65E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6950  00F662  6A0F               	clrf	drawCircle@y0+1,c
  6951  00F664  0E00               	movlw	0
  6952  00F666  6E11               	movwf	drawCircle@r+1,c
  6953  00F668  0E07               	movlw	7
  6954  00F66A  6E10               	movwf	drawCircle@r,c
  6955  00F66C  0EFF               	movlw	255
  6956  00F66E  6E13               	movwf	drawCircle@color+1,c
  6957  00F670  0EE0               	movlw	224
  6958  00F672  6E12               	movwf	drawCircle@color,c
  6959  00F674  ECC2  F077         	call	_drawCircle	;wreg free
  6960                           
  6961                           ;Lab7_redo.c: 651: drawCircle(80, Circle_Y, 7, 0x07E0);
  6962  00F678  0E00               	movlw	0
  6963  00F67A  6E0D               	movwf	drawCircle@x0+1,c
  6964  00F67C  0E50               	movlw	80
  6965  00F67E  6E0C               	movwf	drawCircle@x0,c
  6966  00F680  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6967  00F684  6A0F               	clrf	drawCircle@y0+1,c
  6968  00F686  0E00               	movlw	0
  6969  00F688  6E11               	movwf	drawCircle@r+1,c
  6970  00F68A  0E07               	movlw	7
  6971  00F68C  6E10               	movwf	drawCircle@r,c
  6972  00F68E  0E07               	movlw	7
  6973  00F690  6E13               	movwf	drawCircle@color+1,c
  6974  00F692  0EE0               	movlw	224
  6975  00F694  6E12               	movwf	drawCircle@color,c
  6976  00F696  ECC2  F077         	call	_drawCircle	;wreg free
  6977  00F69A  D000               	goto	l469
  6978  00F69C                     l469:
  6979  00F69C  0012               	return		;funcret
  6980  00F69E                     __end_of_update_LCD_color:
  6981                           	opt stack 0
  6982                           tblptru	equ	0xFF8
  6983                           tblptrh	equ	0xFF7
  6984                           tblptrl	equ	0xFF6
  6985                           tablat	equ	0xFF5
  6986                           prodl	equ	0xFF3
  6987                           postinc0	equ	0xFEE
  6988                           wreg	equ	0xFE8
  6989                           postdec1	equ	0xFE5
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function _fillCircle *****************
  6997 ;; Defined at:
  6998 ;;		line 647 in file "ST7735_TFT.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  x0              2   42[COMRAM] int 
  7001 ;;  y0              2   44[COMRAM] int 
  7002 ;;  r               2   46[COMRAM] int 
  7003 ;;  color           2   48[COMRAM] unsigned int 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;		None
  7006 ;; Return value:  Size  Location     Type
  7007 ;;		None               void
  7008 ;; Registers used:
  7009 ;;		wreg, status,2, status,0, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7015 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;Total ram usage:        8 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:    5
  7022 ;; This function calls:
  7023 ;;		_drawFastVLine
  7024 ;;		_fillCircleHelper
  7025 ;; This function is called by:
  7026 ;;		_Initialize_Screen
  7027 ;;		_update_LCD_color
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text33
  7032  00DE10                     __ptext33:
  7033                           	opt stack 0
  7034  00DE10                     _fillCircle:
  7035                           	opt stack 22
  7036                           
  7037                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7038                           
  7039                           ;incstack = 0
  7040  00DE10  502F               	movf	fillCircle@r,w,c
  7041  00DE12  0800               	sublw	0
  7042  00DE14  242D               	addwf	fillCircle@y0,w,c
  7043  00DE16  6E08               	movwf	drawFastVLine@y,c
  7044  00DE18  80D8               	bsf	status,0,c
  7045  00DE1A  342F               	rlcf	fillCircle@r,w,c
  7046  00DE1C  6E09               	movwf	drawFastVLine@h,c
  7047  00DE1E  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  7048  00DE22  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  7049  00DE26  502B               	movf	fillCircle@x0,w,c
  7050  00DE28  EC82  F070         	call	_drawFastVLine
  7051                           
  7052                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  7053  00DE2C  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  7054  00DE30  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7055  00DE34  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  7056  00DE38  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7057  00DE3C  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  7058  00DE40  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7059  00DE44  0E00               	movlw	0
  7060  00DE46  6E1A               	movwf	fillCircleHelper@cornername+1,c
  7061  00DE48  0E03               	movlw	3
  7062  00DE4A  6E19               	movwf	fillCircleHelper@cornername,c
  7063  00DE4C  0E00               	movlw	0
  7064  00DE4E  6E1C               	movwf	fillCircleHelper@delta+1,c
  7065  00DE50  0E00               	movlw	0
  7066  00DE52  6E1B               	movwf	fillCircleHelper@delta,c
  7067  00DE54  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  7068  00DE58  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7069  00DE5C  ECBC  F075         	call	_fillCircleHelper	;wreg free
  7070  00DE60  0012               	return		;funcret
  7071  00DE62                     __end_of_fillCircle:
  7072                           	opt stack 0
  7073                           tblptru	equ	0xFF8
  7074                           tblptrh	equ	0xFF7
  7075                           tblptrl	equ	0xFF6
  7076                           tablat	equ	0xFF5
  7077                           prodl	equ	0xFF3
  7078                           postinc0	equ	0xFEE
  7079                           wreg	equ	0xFE8
  7080                           postdec1	equ	0xFE5
  7081                           fsr1l	equ	0xFE1
  7082                           indf2	equ	0xFDF
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087 ;; *************** function _fillCircleHelper *****************
  7088 ;; Defined at:
  7089 ;;		line 622 in file "ST7735_TFT.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;  x0              2   18[COMRAM] int 
  7092 ;;  y0              2   20[COMRAM] int 
  7093 ;;  r               2   22[COMRAM] int 
  7094 ;;  cornername      2   24[COMRAM] unsigned int 
  7095 ;;  delta           2   26[COMRAM] int 
  7096 ;;  color           2   28[COMRAM] unsigned int 
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;  y               2   40[COMRAM] int 
  7099 ;;  x               2   38[COMRAM] int 
  7100 ;;  f               2   36[COMRAM] int 
  7101 ;;  ddF_y           2   34[COMRAM] int 
  7102 ;;  ddF_x           2   32[COMRAM] int 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;		None               void
  7105 ;; Registers used:
  7106 ;;		wreg, status,2, status,0, cstack
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7112 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7115 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7116 ;;Total ram usage:       24 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:    4
  7119 ;; This function calls:
  7120 ;;		_drawFastVLine
  7121 ;; This function is called by:
  7122 ;;		_fillCircle
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text34
  7127  00EB78                     __ptext34:
  7128                           	opt stack 0
  7129  00EB78                     _fillCircleHelper:
  7130                           	opt stack 22
  7131                           
  7132                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  7133                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7134                           
  7135                           ;incstack = 0
  7136  00EB78  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  7137  00EB7C  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7138  00EB80  1E1F               	comf	??_fillCircleHelper,f,c
  7139  00EB82  1E20               	comf	??_fillCircleHelper+1,f,c
  7140  00EB84  4A1F               	infsnz	??_fillCircleHelper,f,c
  7141  00EB86  2A20               	incf	??_fillCircleHelper+1,f,c
  7142  00EB88  0E01               	movlw	1
  7143  00EB8A  241F               	addwf	??_fillCircleHelper,w,c
  7144  00EB8C  6E25               	movwf	fillCircleHelper@f,c
  7145  00EB8E  0E00               	movlw	0
  7146  00EB90  2020               	addwfc	??_fillCircleHelper+1,w,c
  7147  00EB92  6E26               	movwf	fillCircleHelper@f+1,c
  7148  00EB94  0E00               	movlw	0
  7149  00EB96  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  7150  00EB98  0E01               	movlw	1
  7151  00EB9A  6E21               	movwf	fillCircleHelper@ddF_x,c
  7152  00EB9C  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  7153  00EBA0  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7154  00EBA4  90D8               	bcf	status,0,c
  7155  00EBA6  361F               	rlcf	??_fillCircleHelper,f,c
  7156  00EBA8  3620               	rlcf	??_fillCircleHelper+1,f,c
  7157  00EBAA  1E1F               	comf	??_fillCircleHelper,f,c
  7158  00EBAC  1E20               	comf	??_fillCircleHelper+1,f,c
  7159  00EBAE  4A1F               	infsnz	??_fillCircleHelper,f,c
  7160  00EBB0  2A20               	incf	??_fillCircleHelper+1,f,c
  7161  00EBB2  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7162  00EBB6  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7163  00EBBA  0E00               	movlw	0
  7164  00EBBC  6E28               	movwf	fillCircleHelper@x+1,c
  7165  00EBBE  0E00               	movlw	0
  7166  00EBC0  6E27               	movwf	fillCircleHelper@x,c
  7167  00EBC2  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  7168  00EBC6  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7169                           
  7170                           ;ST7735_TFT.c: 626: while (x<y) {
  7171  00EBCA  D067               	goto	l2817
  7172  00EBCC                     l2797:
  7173                           
  7174                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7175  00EBCC  BE26               	btfsc	fillCircleHelper@f+1,7,c
  7176  00EBCE  D00B               	goto	l255
  7177                           
  7178                           ;ST7735_TFT.c: 628: y--;
  7179  00EBD0  0629               	decf	fillCircleHelper@y,f,c
  7180  00EBD2  A0D8               	btfss	status,0,c
  7181  00EBD4  062A               	decf	fillCircleHelper@y+1,f,c
  7182                           
  7183                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7184  00EBD6  0E02               	movlw	2
  7185  00EBD8  2623               	addwf	fillCircleHelper@ddF_y,f,c
  7186  00EBDA  0E00               	movlw	0
  7187  00EBDC  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7188                           
  7189                           ;ST7735_TFT.c: 630: f += ddF_y;
  7190  00EBDE  5023               	movf	fillCircleHelper@ddF_y,w,c
  7191  00EBE0  2625               	addwf	fillCircleHelper@f,f,c
  7192  00EBE2  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  7193  00EBE4  2226               	addwfc	fillCircleHelper@f+1,f,c
  7194  00EBE6                     l255:
  7195                           
  7196                           ;ST7735_TFT.c: 631: }
  7197                           ;ST7735_TFT.c: 632: x++;
  7198  00EBE6  4A27               	infsnz	fillCircleHelper@x,f,c
  7199  00EBE8  2A28               	incf	fillCircleHelper@x+1,f,c
  7200                           
  7201                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7202  00EBEA  0E02               	movlw	2
  7203  00EBEC  2621               	addwf	fillCircleHelper@ddF_x,f,c
  7204  00EBEE  0E00               	movlw	0
  7205  00EBF0  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7206                           
  7207                           ;ST7735_TFT.c: 634: f += ddF_x;
  7208  00EBF2  5021               	movf	fillCircleHelper@ddF_x,w,c
  7209  00EBF4  2625               	addwf	fillCircleHelper@f,f,c
  7210  00EBF6  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  7211  00EBF8  2226               	addwfc	fillCircleHelper@f+1,f,c
  7212                           
  7213                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7214  00EBFA  A019               	btfss	fillCircleHelper@cornername,0,c
  7215  00EBFC  D025               	goto	l2813
  7216                           
  7217                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7218  00EBFE  5029               	movf	fillCircleHelper@y,w,c
  7219  00EC00  0800               	sublw	0
  7220  00EC02  2415               	addwf	fillCircleHelper@y0,w,c
  7221  00EC04  6E08               	movwf	drawFastVLine@y,c
  7222  00EC06  5029               	movf	fillCircleHelper@y,w,c
  7223  00EC08  2429               	addwf	fillCircleHelper@y,w,c
  7224  00EC0A  241B               	addwf	fillCircleHelper@delta,w,c
  7225  00EC0C  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7226  00EC0E  281F               	incf	??_fillCircleHelper,w,c
  7227  00EC10  6E09               	movwf	drawFastVLine@h,c
  7228  00EC12  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7229  00EC16  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7230  00EC1A  5013               	movf	fillCircleHelper@x0,w,c
  7231  00EC1C  2427               	addwf	fillCircleHelper@x,w,c
  7232  00EC1E  EC82  F070         	call	_drawFastVLine
  7233                           
  7234                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7235  00EC22  5027               	movf	fillCircleHelper@x,w,c
  7236  00EC24  0800               	sublw	0
  7237  00EC26  2415               	addwf	fillCircleHelper@y0,w,c
  7238  00EC28  6E08               	movwf	drawFastVLine@y,c
  7239  00EC2A  5027               	movf	fillCircleHelper@x,w,c
  7240  00EC2C  2427               	addwf	fillCircleHelper@x,w,c
  7241  00EC2E  241B               	addwf	fillCircleHelper@delta,w,c
  7242  00EC30  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7243  00EC32  281F               	incf	??_fillCircleHelper,w,c
  7244  00EC34  6E09               	movwf	drawFastVLine@h,c
  7245  00EC36  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7246  00EC3A  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7247  00EC3E  5013               	movf	fillCircleHelper@x0,w,c
  7248  00EC40  2429               	addwf	fillCircleHelper@y,w,c
  7249  00EC42  EC82  F070         	call	_drawFastVLine
  7250  00EC46  D000               	goto	l2813
  7251  00EC48                     l2813:
  7252                           
  7253                           ;ST7735_TFT.c: 639: }
  7254                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7255  00EC48  A219               	btfss	fillCircleHelper@cornername,1,c
  7256  00EC4A  D027               	goto	l2817
  7257                           
  7258                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7259  00EC4C  5029               	movf	fillCircleHelper@y,w,c
  7260  00EC4E  0800               	sublw	0
  7261  00EC50  2415               	addwf	fillCircleHelper@y0,w,c
  7262  00EC52  6E08               	movwf	drawFastVLine@y,c
  7263  00EC54  5029               	movf	fillCircleHelper@y,w,c
  7264  00EC56  2429               	addwf	fillCircleHelper@y,w,c
  7265  00EC58  241B               	addwf	fillCircleHelper@delta,w,c
  7266  00EC5A  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7267  00EC5C  281F               	incf	??_fillCircleHelper,w,c
  7268  00EC5E  6E09               	movwf	drawFastVLine@h,c
  7269  00EC60  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7270  00EC64  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7271  00EC68  5027               	movf	fillCircleHelper@x,w,c
  7272  00EC6A  0800               	sublw	0
  7273  00EC6C  2413               	addwf	fillCircleHelper@x0,w,c
  7274  00EC6E  EC82  F070         	call	_drawFastVLine
  7275                           
  7276                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7277  00EC72  5027               	movf	fillCircleHelper@x,w,c
  7278  00EC74  0800               	sublw	0
  7279  00EC76  2415               	addwf	fillCircleHelper@y0,w,c
  7280  00EC78  6E08               	movwf	drawFastVLine@y,c
  7281  00EC7A  5027               	movf	fillCircleHelper@x,w,c
  7282  00EC7C  2427               	addwf	fillCircleHelper@x,w,c
  7283  00EC7E  241B               	addwf	fillCircleHelper@delta,w,c
  7284  00EC80  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7285  00EC82  281F               	incf	??_fillCircleHelper,w,c
  7286  00EC84  6E09               	movwf	drawFastVLine@h,c
  7287  00EC86  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  7288  00EC8A  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7289  00EC8E  5029               	movf	fillCircleHelper@y,w,c
  7290  00EC90  0800               	sublw	0
  7291  00EC92  2413               	addwf	fillCircleHelper@x0,w,c
  7292  00EC94  EC82  F070         	call	_drawFastVLine
  7293  00EC98  D000               	goto	l2817
  7294  00EC9A                     l2817:
  7295  00EC9A  5029               	movf	fillCircleHelper@y,w,c
  7296  00EC9C  5C27               	subwf	fillCircleHelper@x,w,c
  7297  00EC9E  5028               	movf	fillCircleHelper@x+1,w,c
  7298  00ECA0  0A80               	xorlw	128
  7299  00ECA2  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  7300  00ECA4  502A               	movf	fillCircleHelper@y+1,w,c
  7301  00ECA6  0A80               	xorlw	128
  7302  00ECA8  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  7303  00ECAA  A0D8               	btfss	status,0,c
  7304  00ECAC  D78F               	goto	l2797
  7305  00ECAE  0012               	return		;funcret
  7306  00ECB0                     __end_of_fillCircleHelper:
  7307                           	opt stack 0
  7308                           tblptru	equ	0xFF8
  7309                           tblptrh	equ	0xFF7
  7310                           tblptrl	equ	0xFF6
  7311                           tablat	equ	0xFF5
  7312                           prodl	equ	0xFF3
  7313                           postinc0	equ	0xFEE
  7314                           wreg	equ	0xFE8
  7315                           postdec1	equ	0xFE5
  7316                           fsr1l	equ	0xFE1
  7317                           indf2	equ	0xFDF
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function _drawCircle *****************
  7323 ;; Defined at:
  7324 ;;		line 561 in file "ST7735_TFT.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  x0              2   11[COMRAM] int 
  7327 ;;  y0              2   13[COMRAM] int 
  7328 ;;  r               2   15[COMRAM] int 
  7329 ;;  color           2   17[COMRAM] unsigned int 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;  y               2   29[COMRAM] int 
  7332 ;;  x               2   27[COMRAM] int 
  7333 ;;  f               2   25[COMRAM] int 
  7334 ;;  ddF_y           2   23[COMRAM] int 
  7335 ;;  ddF_x           2   21[COMRAM] int 
  7336 ;; Return value:  Size  Location     Type
  7337 ;;		None               void
  7338 ;; Registers used:
  7339 ;;		wreg, status,2, status,0, cstack
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7345 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;Total ram usage:       20 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; Hardware stack levels required when called:    4
  7352 ;; This function calls:
  7353 ;;		_drawPixel
  7354 ;; This function is called by:
  7355 ;;		_Initialize_Screen
  7356 ;;		_update_LCD_color
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           	psect	text35
  7361  00EF84                     __ptext35:
  7362                           	opt stack 0
  7363  00EF84                     _drawCircle:
  7364                           	opt stack 23
  7365                           
  7366                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7367                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7368                           
  7369                           ;incstack = 0
  7370  00EF84  C010  F014         	movff	drawCircle@r,??_drawCircle
  7371  00EF88  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7372  00EF8C  1E14               	comf	??_drawCircle,f,c
  7373  00EF8E  1E15               	comf	??_drawCircle+1,f,c
  7374  00EF90  4A14               	infsnz	??_drawCircle,f,c
  7375  00EF92  2A15               	incf	??_drawCircle+1,f,c
  7376  00EF94  0E01               	movlw	1
  7377  00EF96  2414               	addwf	??_drawCircle,w,c
  7378  00EF98  6E1A               	movwf	drawCircle@f,c
  7379  00EF9A  0E00               	movlw	0
  7380  00EF9C  2015               	addwfc	??_drawCircle+1,w,c
  7381  00EF9E  6E1B               	movwf	drawCircle@f+1,c
  7382  00EFA0  0E00               	movlw	0
  7383  00EFA2  6E17               	movwf	drawCircle@ddF_x+1,c
  7384  00EFA4  0E01               	movlw	1
  7385  00EFA6  6E16               	movwf	drawCircle@ddF_x,c
  7386  00EFA8  C010  F014         	movff	drawCircle@r,??_drawCircle
  7387  00EFAC  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  7388  00EFB0  90D8               	bcf	status,0,c
  7389  00EFB2  3614               	rlcf	??_drawCircle,f,c
  7390  00EFB4  3615               	rlcf	??_drawCircle+1,f,c
  7391  00EFB6  1E14               	comf	??_drawCircle,f,c
  7392  00EFB8  1E15               	comf	??_drawCircle+1,f,c
  7393  00EFBA  4A14               	infsnz	??_drawCircle,f,c
  7394  00EFBC  2A15               	incf	??_drawCircle+1,f,c
  7395  00EFBE  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  7396  00EFC2  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7397  00EFC6  0E00               	movlw	0
  7398  00EFC8  6E1D               	movwf	drawCircle@x+1,c
  7399  00EFCA  0E00               	movlw	0
  7400  00EFCC  6E1C               	movwf	drawCircle@x,c
  7401  00EFCE  C010  F01E         	movff	drawCircle@r,drawCircle@y
  7402  00EFD2  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  7403                           
  7404                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7405  00EFD6  500E               	movf	drawCircle@y0,w,c
  7406  00EFD8  2410               	addwf	drawCircle@r,w,c
  7407  00EFDA  6E08               	movwf	drawPixel@y,c
  7408  00EFDC  C012  F009         	movff	drawCircle@color,drawPixel@color
  7409  00EFE0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7410  00EFE4  500C               	movf	drawCircle@x0,w,c
  7411  00EFE6  EC86  F06D         	call	_drawPixel
  7412                           
  7413                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7414  00EFEA  5010               	movf	drawCircle@r,w,c
  7415  00EFEC  0800               	sublw	0
  7416  00EFEE  240E               	addwf	drawCircle@y0,w,c
  7417  00EFF0  6E08               	movwf	drawPixel@y,c
  7418  00EFF2  C012  F009         	movff	drawCircle@color,drawPixel@color
  7419  00EFF6  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7420  00EFFA  500C               	movf	drawCircle@x0,w,c
  7421  00EFFC  EC86  F06D         	call	_drawPixel
  7422                           
  7423                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7424  00F000  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7425  00F004  C012  F009         	movff	drawCircle@color,drawPixel@color
  7426  00F008  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7427  00F00C  500C               	movf	drawCircle@x0,w,c
  7428  00F00E  2410               	addwf	drawCircle@r,w,c
  7429  00F010  EC86  F06D         	call	_drawPixel
  7430                           
  7431                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7432  00F014  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  7433  00F018  C012  F009         	movff	drawCircle@color,drawPixel@color
  7434  00F01C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7435  00F020  5010               	movf	drawCircle@r,w,c
  7436  00F022  0800               	sublw	0
  7437  00F024  240C               	addwf	drawCircle@x0,w,c
  7438  00F026  EC86  F06D         	call	_drawPixel
  7439                           
  7440                           ;ST7735_TFT.c: 569: while (x < y) {
  7441  00F02A  D078               	goto	l2963
  7442  00F02C                     l2935:
  7443                           
  7444                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7445  00F02C  BE1B               	btfsc	drawCircle@f+1,7,c
  7446  00F02E  D00B               	goto	l237
  7447                           
  7448                           ;ST7735_TFT.c: 571: y--;
  7449  00F030  061E               	decf	drawCircle@y,f,c
  7450  00F032  A0D8               	btfss	status,0,c
  7451  00F034  061F               	decf	drawCircle@y+1,f,c
  7452                           
  7453                           ;ST7735_TFT.c: 572: ddF_y += 2;
  7454  00F036  0E02               	movlw	2
  7455  00F038  2618               	addwf	drawCircle@ddF_y,f,c
  7456  00F03A  0E00               	movlw	0
  7457  00F03C  2219               	addwfc	drawCircle@ddF_y+1,f,c
  7458                           
  7459                           ;ST7735_TFT.c: 573: f += ddF_y;
  7460  00F03E  5018               	movf	drawCircle@ddF_y,w,c
  7461  00F040  261A               	addwf	drawCircle@f,f,c
  7462  00F042  5019               	movf	drawCircle@ddF_y+1,w,c
  7463  00F044  221B               	addwfc	drawCircle@f+1,f,c
  7464  00F046                     l237:
  7465                           
  7466                           ;ST7735_TFT.c: 574: }
  7467                           ;ST7735_TFT.c: 575: x++;
  7468  00F046  4A1C               	infsnz	drawCircle@x,f,c
  7469  00F048  2A1D               	incf	drawCircle@x+1,f,c
  7470                           
  7471                           ;ST7735_TFT.c: 576: ddF_x += 2;
  7472  00F04A  0E02               	movlw	2
  7473  00F04C  2616               	addwf	drawCircle@ddF_x,f,c
  7474  00F04E  0E00               	movlw	0
  7475  00F050  2217               	addwfc	drawCircle@ddF_x+1,f,c
  7476                           
  7477                           ;ST7735_TFT.c: 577: f += ddF_x;
  7478  00F052  5016               	movf	drawCircle@ddF_x,w,c
  7479  00F054  261A               	addwf	drawCircle@f,f,c
  7480  00F056  5017               	movf	drawCircle@ddF_x+1,w,c
  7481  00F058  221B               	addwfc	drawCircle@f+1,f,c
  7482                           
  7483                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  7484  00F05A  500E               	movf	drawCircle@y0,w,c
  7485  00F05C  241E               	addwf	drawCircle@y,w,c
  7486  00F05E  6E08               	movwf	drawPixel@y,c
  7487  00F060  C012  F009         	movff	drawCircle@color,drawPixel@color
  7488  00F064  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7489  00F068  500C               	movf	drawCircle@x0,w,c
  7490  00F06A  241C               	addwf	drawCircle@x,w,c
  7491  00F06C  EC86  F06D         	call	_drawPixel
  7492                           
  7493                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  7494  00F070  500E               	movf	drawCircle@y0,w,c
  7495  00F072  241E               	addwf	drawCircle@y,w,c
  7496  00F074  6E08               	movwf	drawPixel@y,c
  7497  00F076  C012  F009         	movff	drawCircle@color,drawPixel@color
  7498  00F07A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7499  00F07E  501C               	movf	drawCircle@x,w,c
  7500  00F080  0800               	sublw	0
  7501  00F082  240C               	addwf	drawCircle@x0,w,c
  7502  00F084  EC86  F06D         	call	_drawPixel
  7503                           
  7504                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  7505  00F088  501E               	movf	drawCircle@y,w,c
  7506  00F08A  0800               	sublw	0
  7507  00F08C  240E               	addwf	drawCircle@y0,w,c
  7508  00F08E  6E08               	movwf	drawPixel@y,c
  7509  00F090  C012  F009         	movff	drawCircle@color,drawPixel@color
  7510  00F094  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7511  00F098  500C               	movf	drawCircle@x0,w,c
  7512  00F09A  241C               	addwf	drawCircle@x,w,c
  7513  00F09C  EC86  F06D         	call	_drawPixel
  7514                           
  7515                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  7516  00F0A0  501E               	movf	drawCircle@y,w,c
  7517  00F0A2  0800               	sublw	0
  7518  00F0A4  240E               	addwf	drawCircle@y0,w,c
  7519  00F0A6  6E08               	movwf	drawPixel@y,c
  7520  00F0A8  C012  F009         	movff	drawCircle@color,drawPixel@color
  7521  00F0AC  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7522  00F0B0  501C               	movf	drawCircle@x,w,c
  7523  00F0B2  0800               	sublw	0
  7524  00F0B4  240C               	addwf	drawCircle@x0,w,c
  7525  00F0B6  EC86  F06D         	call	_drawPixel
  7526                           
  7527                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  7528  00F0BA  500E               	movf	drawCircle@y0,w,c
  7529  00F0BC  241C               	addwf	drawCircle@x,w,c
  7530  00F0BE  6E08               	movwf	drawPixel@y,c
  7531  00F0C0  C012  F009         	movff	drawCircle@color,drawPixel@color
  7532  00F0C4  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7533  00F0C8  500C               	movf	drawCircle@x0,w,c
  7534  00F0CA  241E               	addwf	drawCircle@y,w,c
  7535  00F0CC  EC86  F06D         	call	_drawPixel
  7536                           
  7537                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  7538  00F0D0  500E               	movf	drawCircle@y0,w,c
  7539  00F0D2  241C               	addwf	drawCircle@x,w,c
  7540  00F0D4  6E08               	movwf	drawPixel@y,c
  7541  00F0D6  C012  F009         	movff	drawCircle@color,drawPixel@color
  7542  00F0DA  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7543  00F0DE  501E               	movf	drawCircle@y,w,c
  7544  00F0E0  0800               	sublw	0
  7545  00F0E2  240C               	addwf	drawCircle@x0,w,c
  7546  00F0E4  EC86  F06D         	call	_drawPixel
  7547                           
  7548                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  7549  00F0E8  501C               	movf	drawCircle@x,w,c
  7550  00F0EA  0800               	sublw	0
  7551  00F0EC  240E               	addwf	drawCircle@y0,w,c
  7552  00F0EE  6E08               	movwf	drawPixel@y,c
  7553  00F0F0  C012  F009         	movff	drawCircle@color,drawPixel@color
  7554  00F0F4  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7555  00F0F8  500C               	movf	drawCircle@x0,w,c
  7556  00F0FA  241E               	addwf	drawCircle@y,w,c
  7557  00F0FC  EC86  F06D         	call	_drawPixel
  7558                           
  7559                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  7560  00F100  501C               	movf	drawCircle@x,w,c
  7561  00F102  0800               	sublw	0
  7562  00F104  240E               	addwf	drawCircle@y0,w,c
  7563  00F106  6E08               	movwf	drawPixel@y,c
  7564  00F108  C012  F009         	movff	drawCircle@color,drawPixel@color
  7565  00F10C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7566  00F110  501E               	movf	drawCircle@y,w,c
  7567  00F112  0800               	sublw	0
  7568  00F114  240C               	addwf	drawCircle@x0,w,c
  7569  00F116  EC86  F06D         	call	_drawPixel
  7570  00F11A  D000               	goto	l2963
  7571  00F11C                     l2963:
  7572  00F11C  501E               	movf	drawCircle@y,w,c
  7573  00F11E  5C1C               	subwf	drawCircle@x,w,c
  7574  00F120  501D               	movf	drawCircle@x+1,w,c
  7575  00F122  0A80               	xorlw	128
  7576  00F124  6E14               	movwf	??_drawCircle& (0+255),c
  7577  00F126  501F               	movf	drawCircle@y+1,w,c
  7578  00F128  0A80               	xorlw	128
  7579  00F12A  5814               	subwfb	??_drawCircle& (0+255),w,c
  7580  00F12C  A0D8               	btfss	status,0,c
  7581  00F12E  D77E               	goto	l2935
  7582  00F130  0012               	return		;funcret
  7583  00F132                     __end_of_drawCircle:
  7584                           	opt stack 0
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodl	equ	0xFF3
  7590                           postinc0	equ	0xFEE
  7591                           wreg	equ	0xFE8
  7592                           postdec1	equ	0xFE5
  7593                           fsr1l	equ	0xFE1
  7594                           indf2	equ	0xFDF
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _PED_Control *****************
  7600 ;; Defined at:
  7601 ;;		line 393 in file "Lab7_redo.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  direction       1    wreg     unsigned char 
  7604 ;;  Num_Sec         1   59[COMRAM] unsigned char 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  direction       1   60[COMRAM] unsigned char 
  7607 ;;  i               1   62[COMRAM] unsigned char 
  7608 ;;  i               1   61[COMRAM] unsigned char 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;		None               void
  7611 ;; Registers used:
  7612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7618 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;Total ram usage:        4 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    8
  7625 ;; This function calls:
  7626 ;;		_Wait_One_Second_With_Beep
  7627 ;;		_update_LCD_PED_Count
  7628 ;; This function is called by:
  7629 ;;		_Day_Mode
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text36
  7634  00DF8A                     __ptext36:
  7635                           	opt stack 0
  7636  00DF8A                     _PED_Control:
  7637                           	opt stack 21
  7638                           
  7639                           ;incstack = 0
  7640                           ;PED_Control@direction stored from wreg
  7641  00DF8A  6E3D               	movwf	PED_Control@direction,c
  7642                           
  7643                           ;Lab7_redo.c: 395: if (direction == 0)
  7644  00DF8C  503D               	movf	PED_Control@direction,w,c
  7645  00DF8E  A4D8               	btfss	status,2,c
  7646  00DF90  D019               	goto	l3461
  7647                           
  7648                           ;Lab7_redo.c: 396: {
  7649                           ;Lab7_redo.c: 397: for(char i = Num_Sec-1;i>0; i--)
  7650  00DF92  043C               	decf	PED_Control@Num_Sec,w,c
  7651  00DF94  6E3E               	movwf	PED_Control@i,c
  7652  00DF96                     l3443:
  7653  00DF96  503E               	movf	PED_Control@i,w,c
  7654  00DF98  B4D8               	btfsc	status,2,c
  7655  00DF9A  D00B               	goto	l3455
  7656  00DF9C  D001               	goto	l3447
  7657  00DF9E  D009               	goto	l3455
  7658  00DFA0                     l3447:
  7659                           
  7660                           ;Lab7_redo.c: 398: {
  7661                           ;Lab7_redo.c: 399: update_LCD_PED_Count(0, i);
  7662  00DFA0  C03E  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
  7663  00DFA4  0E00               	movlw	0
  7664  00DFA6  ECA8  F072         	call	_update_LCD_PED_Count
  7665                           
  7666                           ;Lab7_redo.c: 400: Wait_One_Second_With_Beep();
  7667  00DFAA  ECFB  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7668  00DFAE  063E               	decf	PED_Control@i,f,c
  7669  00DFB0  D7F2               	goto	l3443
  7670  00DFB2                     l3455:
  7671                           
  7672                           ;Lab7_redo.c: 401: }
  7673                           ;Lab7_redo.c: 403: update_LCD_PED_Count(0, 0);
  7674  00DFB2  0E00               	movlw	0
  7675  00DFB4  6E3A               	movwf	update_LCD_PED_Count@count,c
  7676  00DFB6  0E00               	movlw	0
  7677  00DFB8  ECA8  F072         	call	_update_LCD_PED_Count
  7678                           
  7679                           ;Lab7_redo.c: 404: Wait_One_Second_With_Beep();
  7680  00DFBC  ECFB  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7681                           
  7682                           ;Lab7_redo.c: 405: PORTBbits.RB0 = 0;
  7683  00DFC0  9081               	bcf	3969,0,c	;volatile
  7684  00DFC2  D000               	goto	l3461
  7685  00DFC4                     l3461:
  7686                           
  7687                           ;Lab7_redo.c: 406: }
  7688                           ;Lab7_redo.c: 408: if (direction == 2)
  7689  00DFC4  0E02               	movlw	2
  7690  00DFC6  183D               	xorwf	PED_Control@direction,w,c
  7691  00DFC8  A4D8               	btfss	status,2,c
  7692  00DFCA  D019               	goto	l430
  7693                           
  7694                           ;Lab7_redo.c: 409: {
  7695                           ;Lab7_redo.c: 410: for(char i = Num_Sec-1;i>0; i--)
  7696  00DFCC  043C               	decf	PED_Control@Num_Sec,w,c
  7697  00DFCE  6E3F               	movwf	PED_Control@i_1376,c
  7698  00DFD0                     l3465:
  7699  00DFD0  503F               	movf	PED_Control@i_1376,w,c
  7700  00DFD2  B4D8               	btfsc	status,2,c
  7701  00DFD4  D00B               	goto	l3477
  7702  00DFD6  D001               	goto	l3469
  7703  00DFD8  D009               	goto	l3477
  7704  00DFDA                     l3469:
  7705                           
  7706                           ;Lab7_redo.c: 411: {
  7707                           ;Lab7_redo.c: 412: update_LCD_PED_Count(2, i);
  7708  00DFDA  C03F  F03A         	movff	PED_Control@i_1376,update_LCD_PED_Count@count
  7709  00DFDE  0E02               	movlw	2
  7710  00DFE0  ECA8  F072         	call	_update_LCD_PED_Count
  7711                           
  7712                           ;Lab7_redo.c: 413: Wait_One_Second_With_Beep();
  7713  00DFE4  ECFB  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7714  00DFE8  063F               	decf	PED_Control@i_1376,f,c
  7715  00DFEA  D7F2               	goto	l3465
  7716  00DFEC                     l3477:
  7717                           
  7718                           ;Lab7_redo.c: 414: }
  7719                           ;Lab7_redo.c: 415: update_LCD_PED_Count(2, 0);
  7720  00DFEC  0E00               	movlw	0
  7721  00DFEE  6E3A               	movwf	update_LCD_PED_Count@count,c
  7722  00DFF0  0E02               	movlw	2
  7723  00DFF2  ECA8  F072         	call	_update_LCD_PED_Count
  7724                           
  7725                           ;Lab7_redo.c: 416: Wait_One_Second_With_Beep();
  7726  00DFF6  ECFB  F06C         	call	_Wait_One_Second_With_Beep	;wreg free
  7727                           
  7728                           ;Lab7_redo.c: 417: PORTBbits.RB1 = 0;
  7729  00DFFA  9281               	bcf	3969,1,c	;volatile
  7730  00DFFC  D000               	goto	l430
  7731  00DFFE                     l430:
  7732  00DFFE  0012               	return		;funcret
  7733  00E000                     __end_of_PED_Control:
  7734                           	opt stack 0
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           prodl	equ	0xFF3
  7740                           postinc0	equ	0xFEE
  7741                           wreg	equ	0xFE8
  7742                           postdec1	equ	0xFE5
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _update_LCD_PED_Count *****************
  7750 ;; Defined at:
  7751 ;;		line 693 in file "Lab7_redo.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  direction       1    wreg     unsigned char 
  7754 ;;  count           1   57[COMRAM] unsigned char 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  direction       1   58[COMRAM] unsigned char 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;		None               void
  7759 ;; Registers used:
  7760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7766 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;Total ram usage:        2 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    7
  7773 ;; This function calls:
  7774 ;;		___awdiv
  7775 ;;		___awmod
  7776 ;;		_drawtext
  7777 ;; This function is called by:
  7778 ;;		_PED_Control
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text37
  7783  00E550                     __ptext37:
  7784                           	opt stack 0
  7785  00E550                     _update_LCD_PED_Count:
  7786                           	opt stack 21
  7787                           
  7788                           ;incstack = 0
  7789                           ;update_LCD_PED_Count@direction stored from wreg
  7790  00E550  6E3B               	movwf	update_LCD_PED_Count@direction,c
  7791                           
  7792                           ;Lab7_redo.c: 695: switch (direction)
  7793  00E552  D057               	goto	l3291
  7794  00E554                     l3281:
  7795                           
  7796                           ;Lab7_redo.c: 698: PED_NS_Count[0] = count/10 + '0';
  7797  00E554  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7798  00E558  6A02               	clrf	___awdiv@dividend+1,c
  7799  00E55A  0E00               	movlw	0
  7800  00E55C  6E04               	movwf	___awdiv@divisor+1,c
  7801  00E55E  0E0A               	movlw	10
  7802  00E560  6E03               	movwf	___awdiv@divisor,c
  7803  00E562  EC0A  F071         	call	___awdiv	;wreg free
  7804  00E566  5001               	movf	?___awdiv,w,c
  7805  00E568  0F30               	addlw	48
  7806  00E56A  6E52               	movwf	_PED_NS_Count,c
  7807                           
  7808                           ;Lab7_redo.c: 699: PED_NS_Count[1] = count%10 + '0';
  7809  00E56C  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7810  00E570  6A02               	clrf	___awmod@dividend+1,c
  7811  00E572  0E00               	movlw	0
  7812  00E574  6E04               	movwf	___awmod@divisor+1,c
  7813  00E576  0E0A               	movlw	10
  7814  00E578  6E03               	movwf	___awmod@divisor,c
  7815  00E57A  EC00  F070         	call	___awmod	;wreg free
  7816  00E57E  5001               	movf	?___awmod,w,c
  7817  00E580  0F30               	addlw	48
  7818  00E582  6E53               	movwf	_PED_NS_Count+1,c
  7819                           
  7820                           ;Lab7_redo.c: 700: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  7821  00E584  0E1E               	movlw	30
  7822  00E586  6E29               	movwf	drawtext@y,c
  7823  00E588  0E52               	movlw	low _PED_NS_Count
  7824  00E58A  6E2A               	movwf	drawtext@_text,c
  7825  00E58C  0E00               	movlw	high _PED_NS_Count
  7826  00E58E  6E2B               	movwf	drawtext@_text+1,c
  7827  00E590  0E00               	movlw	0
  7828  00E592  6E2D               	movwf	drawtext@color+1,c
  7829  00E594  0E1F               	movlw	31
  7830  00E596  6E2C               	movwf	drawtext@color,c
  7831  00E598  0E00               	movlw	0
  7832  00E59A  6E2F               	movwf	drawtext@bg+1,c
  7833  00E59C  0E00               	movlw	0
  7834  00E59E  6E2E               	movwf	drawtext@bg,c
  7835  00E5A0  0E02               	movlw	2
  7836  00E5A2  6E30               	movwf	drawtext@size,c
  7837  00E5A4  0E02               	movlw	2
  7838  00E5A6  ECDB  F073         	call	_drawtext
  7839                           
  7840                           ;Lab7_redo.c: 701: break;
  7841  00E5AA  D033               	goto	l485
  7842  00E5AC                     l3285:
  7843                           
  7844                           ;Lab7_redo.c: 704: PED_EW_Count[0] = count/10 + '0';
  7845  00E5AC  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7846  00E5B0  6A02               	clrf	___awdiv@dividend+1,c
  7847  00E5B2  0E00               	movlw	0
  7848  00E5B4  6E04               	movwf	___awdiv@divisor+1,c
  7849  00E5B6  0E0A               	movlw	10
  7850  00E5B8  6E03               	movwf	___awdiv@divisor,c
  7851  00E5BA  EC0A  F071         	call	___awdiv	;wreg free
  7852  00E5BE  5001               	movf	?___awdiv,w,c
  7853  00E5C0  0F30               	addlw	48
  7854  00E5C2  6E4F               	movwf	_PED_EW_Count,c
  7855                           
  7856                           ;Lab7_redo.c: 705: PED_EW_Count[1] = count%10 + '0';
  7857  00E5C4  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7858  00E5C8  6A02               	clrf	___awmod@dividend+1,c
  7859  00E5CA  0E00               	movlw	0
  7860  00E5CC  6E04               	movwf	___awmod@divisor+1,c
  7861  00E5CE  0E0A               	movlw	10
  7862  00E5D0  6E03               	movwf	___awmod@divisor,c
  7863  00E5D2  EC00  F070         	call	___awmod	;wreg free
  7864  00E5D6  5001               	movf	?___awmod,w,c
  7865  00E5D8  0F30               	addlw	48
  7866  00E5DA  6E50               	movwf	_PED_EW_Count+1,c
  7867                           
  7868                           ;Lab7_redo.c: 706: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  7869  00E5DC  0E5A               	movlw	90
  7870  00E5DE  6E29               	movwf	drawtext@y,c
  7871  00E5E0  0E4F               	movlw	low _PED_EW_Count
  7872  00E5E2  6E2A               	movwf	drawtext@_text,c
  7873  00E5E4  0E00               	movlw	high _PED_EW_Count
  7874  00E5E6  6E2B               	movwf	drawtext@_text+1,c
  7875  00E5E8  0E07               	movlw	7
  7876  00E5EA  6E2D               	movwf	drawtext@color+1,c
  7877  00E5EC  682C               	setf	drawtext@color,c
  7878  00E5EE  0E00               	movlw	0
  7879  00E5F0  6E2F               	movwf	drawtext@bg+1,c
  7880  00E5F2  0E00               	movlw	0
  7881  00E5F4  6E2E               	movwf	drawtext@bg,c
  7882  00E5F6  0E02               	movlw	2
  7883  00E5F8  6E30               	movwf	drawtext@size,c
  7884  00E5FA  0E02               	movlw	2
  7885  00E5FC  ECDB  F073         	call	_drawtext
  7886                           
  7887                           ;Lab7_redo.c: 709: }
  7888                           
  7889                           ;Lab7_redo.c: 707: break;
  7890  00E600  D008               	goto	l485
  7891  00E602                     l3291:
  7892  00E602  503B               	movf	update_LCD_PED_Count@direction,w,c
  7893                           
  7894                           ; Switch size 1, requested type "space"
  7895                           ; Number of cases is 2, Range of values is 0 to 2
  7896                           ; switch strategies available:
  7897                           ; Name         Instructions Cycles
  7898                           ; simple_byte            7     4 (average)
  7899                           ;	Chosen strategy is simple_byte
  7900  00E604  0A00               	xorlw	0	; case 0
  7901  00E606  B4D8               	btfsc	status,2,c
  7902  00E608  D7A5               	goto	l3281
  7903  00E60A  0A02               	xorlw	2	; case 2
  7904  00E60C  B4D8               	btfsc	status,2,c
  7905  00E60E  D7CE               	goto	l3285
  7906  00E610  D000               	goto	l485
  7907  00E612                     l485:
  7908  00E612  0012               	return		;funcret
  7909  00E614                     __end_of_update_LCD_PED_Count:
  7910                           	opt stack 0
  7911                           tblptru	equ	0xFF8
  7912                           tblptrh	equ	0xFF7
  7913                           tblptrl	equ	0xFF6
  7914                           tablat	equ	0xFF5
  7915                           prodl	equ	0xFF3
  7916                           postinc0	equ	0xFEE
  7917                           wreg	equ	0xFE8
  7918                           postdec1	equ	0xFE5
  7919                           fsr1l	equ	0xFE1
  7920                           indf2	equ	0xFDF
  7921                           fsr2h	equ	0xFDA
  7922                           fsr2l	equ	0xFD9
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function _drawtext *****************
  7926 ;; Defined at:
  7927 ;;		line 507 in file "ST7735_TFT.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  x               1    wreg     unsigned char 
  7930 ;;  y               1   40[COMRAM] unsigned char 
  7931 ;;  _text           2   41[COMRAM] PTR unsigned char 
  7932 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  7933 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  7934 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  7935 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7936 ;;  color           2   43[COMRAM] unsigned int 
  7937 ;;  bg              2   45[COMRAM] unsigned int 
  7938 ;;  size            1   47[COMRAM] unsigned char 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  x               1   52[COMRAM] unsigned char 
  7941 ;;  i               2   53[COMRAM] unsigned int 
  7942 ;;  textsize        2   50[COMRAM] unsigned int 
  7943 ;;  cursor_x        1   56[COMRAM] unsigned char 
  7944 ;;  cursor_y        1   55[COMRAM] unsigned char 
  7945 ;; Return value:  Size  Location     Type
  7946 ;;		None               void
  7947 ;; Registers used:
  7948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7954 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;Total ram usage:       17 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; Hardware stack levels required when called:    6
  7961 ;; This function calls:
  7962 ;;		_drawChar
  7963 ;;		_strlen
  7964 ;; This function is called by:
  7965 ;;		_Initialize_Screen
  7966 ;;		_Wait_One_Second
  7967 ;;		_update_LCD_count
  7968 ;;		_update_LCD_PED_Count
  7969 ;;		_update_LCD_misc
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           	psect	text38
  7974  00E7B6                     __ptext38:
  7975                           	opt stack 0
  7976  00E7B6                     _drawtext:
  7977                           	opt stack 21
  7978                           
  7979                           ;incstack = 0
  7980                           ;drawtext@x stored from wreg
  7981  00E7B6  6E35               	movwf	drawtext@x,c
  7982                           
  7983                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  7984                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  7985                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  7986  00E7B8  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  7987  00E7BC  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  7988                           
  7989                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  7990  00E7C0  C02A  F001         	movff	drawtext@_text,strlen@s
  7991  00E7C4  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  7992  00E7C8  ECD5  F06D         	call	_strlen	;wreg free
  7993  00E7CC  C001  F033         	movff	?_strlen,drawtext@textsize
  7994  00E7D0  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  7995                           
  7996                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  7997  00E7D4  0E00               	movlw	0
  7998  00E7D6  6E37               	movwf	drawtext@i+1,c
  7999  00E7D8  0E00               	movlw	0
  8000  00E7DA  6E36               	movwf	drawtext@i,c
  8001  00E7DC  D054               	goto	l2785
  8002  00E7DE                     l2759:
  8003                           
  8004                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  8005  00E7DE  5042               	movf	_wrap,w,c
  8006  00E7E0  B4D8               	btfsc	status,2,c
  8007  00E7E2  D02C               	goto	l2775
  8008  00E7E4  5030               	movf	drawtext@size,w,c
  8009  00E7E6  0D05               	mullw	5
  8010  00E7E8  5039               	movf	drawtext@cursor_x,w,c
  8011  00E7EA  6E31               	movwf	??_drawtext& (0+255),c
  8012  00E7EC  6A32               	clrf	(??_drawtext+1)& (0+255),c
  8013  00E7EE  50F3               	movf	prodl,w,c
  8014  00E7F0  2631               	addwf	??_drawtext,f,c
  8015  00E7F2  50F4               	movf	prodh,w,c
  8016  00E7F4  2232               	addwfc	??_drawtext+1,f,c
  8017  00E7F6  BE32               	btfsc	??_drawtext+1,7,c
  8018  00E7F8  D021               	goto	l2775
  8019  00E7FA  5032               	movf	??_drawtext+1,w,c
  8020  00E7FC  E104               	bnz	u1650
  8021  00E7FE  0E81               	movlw	129
  8022  00E800  5C31               	subwf	??_drawtext,w,c
  8023  00E802  A0D8               	btfss	status,0,c
  8024  00E804  D01B               	goto	l2775
  8025  00E806                     u1650:
  8026                           
  8027                           ;ST7735_TFT.c: 515: cursor_x = 0;
  8028  00E806  0E00               	movlw	0
  8029  00E808  6E39               	movwf	drawtext@cursor_x,c
  8030                           
  8031                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  8032  00E80A  5030               	movf	drawtext@size,w,c
  8033  00E80C  0D07               	mullw	7
  8034  00E80E  50F3               	movf	prodl,w,c
  8035  00E810  2438               	addwf	drawtext@cursor_y,w,c
  8036  00E812  0F03               	addlw	3
  8037  00E814  6E38               	movwf	drawtext@cursor_y,c
  8038                           
  8039                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  8040  00E816  0EA0               	movlw	160
  8041  00E818  6438               	cpfsgt	drawtext@cursor_y,c
  8042  00E81A  D003               	goto	l2771
  8043  00E81C  0EA0               	movlw	160
  8044  00E81E  6E38               	movwf	drawtext@cursor_y,c
  8045  00E820  D000               	goto	l2771
  8046  00E822                     l2771:
  8047                           
  8048                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  8049  00E822  5036               	movf	drawtext@i,w,c
  8050  00E824  242A               	addwf	drawtext@_text,w,c
  8051  00E826  6ED9               	movwf	fsr2l,c
  8052  00E828  5037               	movf	drawtext@i+1,w,c
  8053  00E82A  202B               	addwfc	drawtext@_text+1,w,c
  8054  00E82C  6EDA               	movwf	fsr2h,c
  8055  00E82E  0E20               	movlw	32
  8056  00E830  18DE               	xorwf	postinc2,w,c
  8057  00E832  B4D8               	btfsc	status,2,c
  8058  00E834  D025               	goto	l2783
  8059  00E836  D002               	goto	l2775
  8060  00E838  D023               	goto	l2783
  8061  00E83A  D000               	goto	l2775
  8062  00E83C                     l2775:
  8063                           
  8064                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8065  00E83C  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  8066  00E840  5036               	movf	drawtext@i,w,c
  8067  00E842  242A               	addwf	drawtext@_text,w,c
  8068  00E844  6ED9               	movwf	fsr2l,c
  8069  00E846  5037               	movf	drawtext@i+1,w,c
  8070  00E848  202B               	addwfc	drawtext@_text+1,w,c
  8071  00E84A  6EDA               	movwf	fsr2h,c
  8072  00E84C  50DF               	movf	indf2,w,c
  8073  00E84E  6E1F               	movwf	drawChar@c,c
  8074  00E850  C02C  F020         	movff	drawtext@color,drawChar@color
  8075  00E854  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  8076  00E858  C02E  F022         	movff	drawtext@bg,drawChar@bg
  8077  00E85C  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  8078  00E860  C030  F024         	movff	drawtext@size,drawChar@size
  8079  00E864  5039               	movf	drawtext@cursor_x,w,c
  8080  00E866  EC58  F076         	call	_drawChar
  8081                           
  8082                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  8083  00E86A  5030               	movf	drawtext@size,w,c
  8084  00E86C  0D06               	mullw	6
  8085  00E86E  50F3               	movf	prodl,w,c
  8086  00E870  2439               	addwf	drawtext@cursor_x,w,c
  8087  00E872  6E39               	movwf	drawtext@cursor_x,c
  8088                           
  8089                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  8090  00E874  0E80               	movlw	128
  8091  00E876  6439               	cpfsgt	drawtext@cursor_x,c
  8092  00E878  D003               	goto	l2783
  8093  00E87A  0E80               	movlw	128
  8094  00E87C  6E39               	movwf	drawtext@cursor_x,c
  8095  00E87E  D000               	goto	l2783
  8096  00E880                     l2783:
  8097  00E880  4A36               	infsnz	drawtext@i,f,c
  8098  00E882  2A37               	incf	drawtext@i+1,f,c
  8099  00E884  D000               	goto	l2785
  8100  00E886                     l2785:
  8101  00E886  5033               	movf	drawtext@textsize,w,c
  8102  00E888  5C36               	subwf	drawtext@i,w,c
  8103  00E88A  5034               	movf	drawtext@textsize+1,w,c
  8104  00E88C  5837               	subwfb	drawtext@i+1,w,c
  8105  00E88E  A0D8               	btfss	status,0,c
  8106  00E890  D7A6               	goto	l2759
  8107  00E892  0012               	return		;funcret
  8108  00E894                     __end_of_drawtext:
  8109                           	opt stack 0
  8110                           tblptru	equ	0xFF8
  8111                           tblptrh	equ	0xFF7
  8112                           tblptrl	equ	0xFF6
  8113                           tablat	equ	0xFF5
  8114                           prodh	equ	0xFF4
  8115                           prodl	equ	0xFF3
  8116                           postinc0	equ	0xFEE
  8117                           wreg	equ	0xFE8
  8118                           postdec1	equ	0xFE5
  8119                           fsr1l	equ	0xFE1
  8120                           indf2	equ	0xFDF
  8121                           postinc2	equ	0xFDE
  8122                           fsr2h	equ	0xFDA
  8123                           fsr2l	equ	0xFD9
  8124                           status	equ	0xFD8
  8125                           
  8126 ;; *************** function _strlen *****************
  8127 ;; Defined at:
  8128 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;  s               2    0[COMRAM] PTR const unsigned char 
  8131 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8132 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8133 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8134 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  8137 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8138 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8139 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8140 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  2    0[COMRAM] unsigned int 
  8143 ;; Registers used:
  8144 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8150 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;Total ram usage:        6 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; This function calls:
  8157 ;;		Nothing
  8158 ;; This function is called by:
  8159 ;;		_drawtext
  8160 ;; This function uses a non-reentrant model
  8161 ;;
  8162                           
  8163                           	psect	text39
  8164  00DBAA                     __ptext39:
  8165                           	opt stack 0
  8166  00DBAA                     _strlen:
  8167                           	opt stack 26
  8168                           
  8169                           ;incstack = 0
  8170  00DBAA  C001  F005         	movff	strlen@s,strlen@cp
  8171  00DBAE  C002  F006         	movff	strlen@s+1,strlen@cp+1
  8172  00DBB2  D003               	goto	l2709
  8173  00DBB4                     l2707:
  8174  00DBB4  4A05               	infsnz	strlen@cp,f,c
  8175  00DBB6  2A06               	incf	strlen@cp+1,f,c
  8176  00DBB8  D000               	goto	l2709
  8177  00DBBA                     l2709:
  8178  00DBBA  C005  FFD9         	movff	strlen@cp,fsr2l
  8179  00DBBE  C006  FFDA         	movff	strlen@cp+1,fsr2h
  8180  00DBC2  50DF               	movf	indf2,w,c
  8181  00DBC4  A4D8               	btfss	status,2,c
  8182  00DBC6  D7F6               	goto	l2707
  8183  00DBC8  C001  F003         	movff	strlen@s,??_strlen
  8184  00DBCC  C002  F004         	movff	strlen@s+1,??_strlen+1
  8185  00DBD0  1E03               	comf	??_strlen,f,c
  8186  00DBD2  1E04               	comf	??_strlen+1,f,c
  8187  00DBD4  4A03               	infsnz	??_strlen,f,c
  8188  00DBD6  2A04               	incf	??_strlen+1,f,c
  8189  00DBD8  5005               	movf	strlen@cp,w,c
  8190  00DBDA  2403               	addwf	??_strlen,w,c
  8191  00DBDC  6E01               	movwf	?_strlen,c
  8192  00DBDE  5006               	movf	strlen@cp+1,w,c
  8193  00DBE0  2004               	addwfc	??_strlen+1,w,c
  8194  00DBE2  6E02               	movwf	?_strlen+1,c
  8195  00DBE4  D000               	goto	l1091
  8196  00DBE6                     l1091:
  8197  00DBE6  0012               	return		;funcret
  8198  00DBE8                     __end_of_strlen:
  8199                           	opt stack 0
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           prodh	equ	0xFF4
  8205                           prodl	equ	0xFF3
  8206                           postinc0	equ	0xFEE
  8207                           wreg	equ	0xFE8
  8208                           postdec1	equ	0xFE5
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           fsr2h	equ	0xFDA
  8213                           fsr2l	equ	0xFD9
  8214                           status	equ	0xFD8
  8215                           
  8216 ;; *************** function _drawChar *****************
  8217 ;; Defined at:
  8218 ;;		line 480 in file "ST7735_TFT.c"
  8219 ;; Parameters:    Size  Location     Type
  8220 ;;  x               1    wreg     unsigned char 
  8221 ;;  y               1   29[COMRAM] unsigned char 
  8222 ;;  c               1   30[COMRAM] unsigned char 
  8223 ;;  color           2   31[COMRAM] unsigned int 
  8224 ;;  bg              2   33[COMRAM] unsigned int 
  8225 ;;  size            1   35[COMRAM] unsigned char 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  x               1   37[COMRAM] unsigned char 
  8228 ;;  line            1   36[COMRAM] unsigned char 
  8229 ;;  i               1   39[COMRAM] unsigned char 
  8230 ;;  j               1   38[COMRAM] unsigned char 
  8231 ;; Return value:  Size  Location     Type
  8232 ;;		None               void
  8233 ;; Registers used:
  8234 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8240 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;Total ram usage:       11 bytes
  8245 ;; Hardware stack levels used:    1
  8246 ;; Hardware stack levels required when called:    5
  8247 ;; This function calls:
  8248 ;;		___wmul
  8249 ;;		_drawPixel
  8250 ;;		_fillRect
  8251 ;; This function is called by:
  8252 ;;		_drawtext
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text40
  8257  00ECB0                     __ptext40:
  8258                           	opt stack 0
  8259  00ECB0                     _drawChar:
  8260                           	opt stack 21
  8261                           
  8262                           ;incstack = 0
  8263                           ;drawChar@x stored from wreg
  8264  00ECB0  6E26               	movwf	drawChar@x,c
  8265                           
  8266                           ;ST7735_TFT.c: 482: char i, j;
  8267                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  8268  00ECB2  0E80               	movlw	128
  8269  00ECB4  6026               	cpfslt	drawChar@x,c
  8270  00ECB6  D0A6               	goto	l189
  8271  00ECB8  0E9F               	movlw	159
  8272  00ECBA  641E               	cpfsgt	drawChar@y,c
  8273  00ECBC  D001               	goto	l2655
  8274                           
  8275                           ;ST7735_TFT.c: 484: return;
  8276  00ECBE  D0A2               	goto	l189
  8277  00ECC0                     l2655:
  8278                           
  8279                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  8280  00ECC0  5024               	movf	drawChar@size,w,c
  8281  00ECC2  A4D8               	btfss	status,2,c
  8282  00ECC4  D003               	goto	l2659
  8283  00ECC6  0E01               	movlw	1
  8284  00ECC8  6E24               	movwf	drawChar@size,c
  8285  00ECCA  D000               	goto	l2659
  8286  00ECCC                     l2659:
  8287                           
  8288                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8289  00ECCC  0E1F               	movlw	31
  8290  00ECCE  641F               	cpfsgt	drawChar@c,c
  8291  00ECD0  D004               	goto	l2663
  8292  00ECD2  0E7E               	movlw	126
  8293  00ECD4  641F               	cpfsgt	drawChar@c,c
  8294  00ECD6  D003               	goto	l191
  8295  00ECD8  D000               	goto	l2663
  8296  00ECDA                     l2663:
  8297                           
  8298                           ;ST7735_TFT.c: 487: c = '?';
  8299  00ECDA  0E3F               	movlw	63
  8300  00ECDC  6E1F               	movwf	drawChar@c,c
  8301  00ECDE                     l191:
  8302                           
  8303                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8304  00ECDE  0E00               	movlw	0
  8305  00ECE0  6E28               	movwf	drawChar@i,c
  8306  00ECE2                     l2665:
  8307  00ECE2  0E04               	movlw	4
  8308  00ECE4  6428               	cpfsgt	drawChar@i,c
  8309  00ECE6  D001               	goto	l2669
  8310  00ECE8  D08D               	goto	l189
  8311  00ECEA                     l2669:
  8312                           
  8313                           ;ST7735_TFT.c: 489: unsigned char line;
  8314                           ;ST7735_TFT.c: 490: if(c < 'S')
  8315  00ECEA  0E53               	movlw	83
  8316  00ECEC  601F               	cpfslt	drawChar@c,c
  8317  00ECEE  D015               	goto	l2673
  8318                           
  8319                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8320  00ECF0  0EE0               	movlw	224
  8321  00ECF2  241F               	addwf	drawChar@c,w,c
  8322  00ECF4  6E01               	movwf	___wmul@multiplier,c
  8323  00ECF6  6A02               	clrf	___wmul@multiplier+1,c
  8324  00ECF8  0EFF               	movlw	255
  8325  00ECFA  2202               	addwfc	___wmul@multiplier+1,f,c
  8326  00ECFC  0E00               	movlw	0
  8327  00ECFE  6E04               	movwf	___wmul@multiplicand+1,c
  8328  00ED00  0E05               	movlw	5
  8329  00ED02  6E03               	movwf	___wmul@multiplicand,c
  8330  00ED04  EC46  F06D         	call	___wmul	;wreg free
  8331  00ED08  5028               	movf	drawChar@i,w,c
  8332  00ED0A  2601               	addwf	?___wmul,f,c
  8333  00ED0C  0E00               	movlw	0
  8334  00ED0E  2202               	addwfc	?___wmul+1,f,c
  8335  00ED10  0EBD               	movlw	low _font
  8336  00ED12  2401               	addwf	?___wmul,w,c
  8337  00ED14  6EF6               	movwf	tblptrl,c
  8338  00ED16  0EFD               	movlw	high _font
  8339  00ED18  D014               	goto	L14
  8340  00ED1A                     l2673:
  8341                           
  8342                           ;ST7735_TFT.c: 492: else
  8343                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8344  00ED1A  0EAD               	movlw	173
  8345  00ED1C  241F               	addwf	drawChar@c,w,c
  8346  00ED1E  6E01               	movwf	___wmul@multiplier,c
  8347  00ED20  6A02               	clrf	___wmul@multiplier+1,c
  8348  00ED22  0EFF               	movlw	255
  8349  00ED24  2202               	addwfc	___wmul@multiplier+1,f,c
  8350  00ED26  0E00               	movlw	0
  8351  00ED28  6E04               	movwf	___wmul@multiplicand+1,c
  8352  00ED2A  0E05               	movlw	5
  8353  00ED2C  6E03               	movwf	___wmul@multiplicand,c
  8354  00ED2E  EC46  F06D         	call	___wmul	;wreg free
  8355  00ED32  5028               	movf	drawChar@i,w,c
  8356  00ED34  2601               	addwf	?___wmul,f,c
  8357  00ED36  0E00               	movlw	0
  8358  00ED38  2202               	addwfc	?___wmul+1,f,c
  8359  00ED3A  0EBC               	movlw	low _font2
  8360  00ED3C  2401               	addwf	?___wmul,w,c
  8361  00ED3E  6EF6               	movwf	tblptrl,c
  8362  00ED40  0EFE               	movlw	high _font2
  8363  00ED42                     L14:
  8364  00ED42  2002               	addwfc	?___wmul+1,w,c
  8365  00ED44  6EF7               	movwf	tblptrh,c
  8366  00ED46                     	if	0	;There are less than 3 active tblptr bytes
  8367  00ED46                     	endif
  8368  00ED46  0008               	tblrd		*
  8369  00ED48  CFF5 F025          	movff	tablat,drawChar@line
  8370  00ED4C  D000               	goto	l2675
  8371  00ED4E                     l2675:
  8372                           
  8373                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8374  00ED4E  0E00               	movlw	0
  8375  00ED50  6E27               	movwf	drawChar@j,c
  8376  00ED52                     l2677:
  8377  00ED52  0E06               	movlw	6
  8378  00ED54  6427               	cpfsgt	drawChar@j,c
  8379  00ED56  D001               	goto	l198
  8380  00ED58  D053               	goto	l2701
  8381  00ED5A                     l198:
  8382                           
  8383                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8384  00ED5A  A025               	btfss	drawChar@line,0,c
  8385  00ED5C  D023               	goto	l2687
  8386                           
  8387                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8388  00ED5E  0424               	decf	drawChar@size,w,c
  8389  00ED60  A4D8               	btfss	status,2,c
  8390  00ED62  D00C               	goto	l2685
  8391  00ED64  501E               	movf	drawChar@y,w,c
  8392  00ED66  2427               	addwf	drawChar@j,w,c
  8393  00ED68  6E08               	movwf	drawPixel@y,c
  8394  00ED6A  C020  F009         	movff	drawChar@color,drawPixel@color
  8395  00ED6E  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  8396  00ED72  5026               	movf	drawChar@x,w,c
  8397  00ED74  2428               	addwf	drawChar@i,w,c
  8398  00ED76  EC86  F06D         	call	_drawPixel
  8399  00ED7A  D03E               	goto	l2695
  8400  00ED7C                     l2685:
  8401                           
  8402                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8403  00ED7C  5027               	movf	drawChar@j,w,c
  8404  00ED7E  0224               	mulwf	drawChar@size,c
  8405  00ED80  50F3               	movf	prodl,w,c
  8406  00ED82  241E               	addwf	drawChar@y,w,c
  8407  00ED84  6E13               	movwf	fillRect@y,c
  8408  00ED86  C024  F014         	movff	drawChar@size,fillRect@w
  8409  00ED8A  C024  F015         	movff	drawChar@size,fillRect@h
  8410  00ED8E  C020  F016         	movff	drawChar@color,fillRect@color
  8411  00ED92  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  8412  00ED96  5028               	movf	drawChar@i,w,c
  8413  00ED98  0224               	mulwf	drawChar@size,c
  8414  00ED9A  50F3               	movf	prodl,w,c
  8415  00ED9C  2426               	addwf	drawChar@x,w,c
  8416  00ED9E  ECBC  F06E         	call	_fillRect
  8417                           
  8418                           ;ST7735_TFT.c: 498: }
  8419  00EDA2  D02A               	goto	l2695
  8420  00EDA4                     l2687:
  8421                           
  8422                           ;ST7735_TFT.c: 499: else if(bg != color) {
  8423  00EDA4  5020               	movf	drawChar@color,w,c
  8424  00EDA6  1822               	xorwf	drawChar@bg,w,c
  8425  00EDA8  E104               	bnz	u1510
  8426  00EDAA  5021               	movf	drawChar@color+1,w,c
  8427  00EDAC  1823               	xorwf	drawChar@bg+1,w,c
  8428  00EDAE  B4D8               	btfsc	status,2,c
  8429  00EDB0  D023               	goto	l2695
  8430  00EDB2                     u1510:
  8431                           
  8432                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  8433  00EDB2  0424               	decf	drawChar@size,w,c
  8434  00EDB4  A4D8               	btfss	status,2,c
  8435  00EDB6  D00C               	goto	l2693
  8436  00EDB8  501E               	movf	drawChar@y,w,c
  8437  00EDBA  2427               	addwf	drawChar@j,w,c
  8438  00EDBC  6E08               	movwf	drawPixel@y,c
  8439  00EDBE  C022  F009         	movff	drawChar@bg,drawPixel@color
  8440  00EDC2  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  8441  00EDC6  5026               	movf	drawChar@x,w,c
  8442  00EDC8  2428               	addwf	drawChar@i,w,c
  8443  00EDCA  EC86  F06D         	call	_drawPixel
  8444  00EDCE  D014               	goto	l2695
  8445  00EDD0                     l2693:
  8446                           
  8447                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  8448  00EDD0  5027               	movf	drawChar@j,w,c
  8449  00EDD2  0224               	mulwf	drawChar@size,c
  8450  00EDD4  50F3               	movf	prodl,w,c
  8451  00EDD6  241E               	addwf	drawChar@y,w,c
  8452  00EDD8  6E13               	movwf	fillRect@y,c
  8453  00EDDA  C024  F014         	movff	drawChar@size,fillRect@w
  8454  00EDDE  C024  F015         	movff	drawChar@size,fillRect@h
  8455  00EDE2  C022  F016         	movff	drawChar@bg,fillRect@color
  8456  00EDE6  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  8457  00EDEA  5028               	movf	drawChar@i,w,c
  8458  00EDEC  0224               	mulwf	drawChar@size,c
  8459  00EDEE  50F3               	movf	prodl,w,c
  8460  00EDF0  2426               	addwf	drawChar@x,w,c
  8461  00EDF2  ECBC  F06E         	call	_fillRect
  8462  00EDF6  D000               	goto	l2695
  8463  00EDF8                     l2695:
  8464  00EDF8  2A27               	incf	drawChar@j,f,c
  8465  00EDFA  90D8               	bcf	status,0,c
  8466  00EDFC  3225               	rrcf	drawChar@line,f,c
  8467  00EDFE  D7A9               	goto	l2677
  8468  00EE00                     l2701:
  8469  00EE00  2A28               	incf	drawChar@i,f,c
  8470  00EE02  D76F               	goto	l2665
  8471  00EE04                     l189:
  8472  00EE04  0012               	return		;funcret
  8473  00EE06                     __end_of_drawChar:
  8474                           	opt stack 0
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           postdec1	equ	0xFE5
  8484                           fsr1l	equ	0xFE1
  8485                           indf2	equ	0xFDF
  8486                           postinc2	equ	0xFDE
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _fillRect *****************
  8492 ;; Defined at:
  8493 ;;		line 470 in file "ST7735_TFT.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  x               1    wreg     unsigned char 
  8496 ;;  y               1   18[COMRAM] unsigned char 
  8497 ;;  w               1   19[COMRAM] unsigned char 
  8498 ;;  h               1   20[COMRAM] unsigned char 
  8499 ;;  color           2   21[COMRAM] unsigned int 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;  x               1   26[COMRAM] unsigned char 
  8502 ;;  i               2   27[COMRAM] int 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;		None               void
  8505 ;; Registers used:
  8506 ;;		wreg, status,2, status,0, cstack
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8512 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;Total ram usage:       11 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; Hardware stack levels required when called:    4
  8519 ;; This function calls:
  8520 ;;		_drawFastVLine
  8521 ;; This function is called by:
  8522 ;;		_drawChar
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           	psect	text41
  8527  00DD78                     __ptext41:
  8528                           	opt stack 0
  8529  00DD78                     _fillRect:
  8530                           	opt stack 21
  8531                           
  8532                           ;incstack = 0
  8533                           ;fillRect@x stored from wreg
  8534  00DD78  6E1B               	movwf	fillRect@x,c
  8535                           
  8536                           ;ST7735_TFT.c: 472: signed int i;
  8537                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  8538  00DD7A  C01B  F01C         	movff	fillRect@x,fillRect@i
  8539  00DD7E  6A1D               	clrf	fillRect@i+1,c
  8540  00DD80  D00E               	goto	l2643
  8541  00DD82                     l2639:
  8542                           
  8543                           ;ST7735_TFT.c: 475: {
  8544                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  8545  00DD82  C013  F008         	movff	fillRect@y,drawFastVLine@y
  8546  00DD86  C015  F009         	movff	fillRect@h,drawFastVLine@h
  8547  00DD8A  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  8548  00DD8E  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  8549  00DD92  501C               	movf	fillRect@i,w,c
  8550  00DD94  EC82  F070         	call	_drawFastVLine
  8551  00DD98  4A1C               	infsnz	fillRect@i,f,c
  8552  00DD9A  2A1D               	incf	fillRect@i+1,f,c
  8553  00DD9C  D000               	goto	l2643
  8554  00DD9E                     l2643:
  8555  00DD9E  5014               	movf	fillRect@w,w,c
  8556  00DDA0  C01B  F018         	movff	fillRect@x,??_fillRect
  8557  00DDA4  6A19               	clrf	(??_fillRect+1)& (0+255),c
  8558  00DDA6  2618               	addwf	??_fillRect,f,c
  8559  00DDA8  0E00               	movlw	0
  8560  00DDAA  2219               	addwfc	??_fillRect+1,f,c
  8561  00DDAC  5018               	movf	??_fillRect,w,c
  8562  00DDAE  5C1C               	subwf	fillRect@i,w,c
  8563  00DDB0  501D               	movf	fillRect@i+1,w,c
  8564  00DDB2  0A80               	xorlw	128
  8565  00DDB4  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  8566  00DDB6  5019               	movf	??_fillRect+1,w,c
  8567  00DDB8  0A80               	xorlw	128
  8568  00DDBA  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  8569  00DDBC  A0D8               	btfss	status,0,c
  8570  00DDBE  D7E1               	goto	l2639
  8571  00DDC0  0012               	return		;funcret
  8572  00DDC2                     __end_of_fillRect:
  8573                           	opt stack 0
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           postinc0	equ	0xFEE
  8581                           wreg	equ	0xFE8
  8582                           postdec1	equ	0xFE5
  8583                           fsr1l	equ	0xFE1
  8584                           indf2	equ	0xFDF
  8585                           postinc2	equ	0xFDE
  8586                           fsr2h	equ	0xFDA
  8587                           fsr2l	equ	0xFD9
  8588                           status	equ	0xFD8
  8589                           
  8590 ;; *************** function _drawFastVLine *****************
  8591 ;; Defined at:
  8592 ;;		line 449 in file "ST7735_TFT.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;  x               1    wreg     unsigned char 
  8595 ;;  y               1    7[COMRAM] unsigned char 
  8596 ;;  h               1    8[COMRAM] unsigned char 
  8597 ;;  color           2    9[COMRAM] unsigned int 
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;  x               1   17[COMRAM] unsigned char 
  8600 ;;  lo              1   16[COMRAM] unsigned char 
  8601 ;;  hi              1   15[COMRAM] unsigned char 
  8602 ;; Return value:  Size  Location     Type
  8603 ;;		None               void
  8604 ;; Registers used:
  8605 ;;		wreg, status,2, status,0, cstack
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8612 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8613 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8614 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;Total ram usage:       11 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    3
  8618 ;; This function calls:
  8619 ;;		_setAddrWindow
  8620 ;;		_spiwrite
  8621 ;; This function is called by:
  8622 ;;		_fillRect
  8623 ;;		_fillCircleHelper
  8624 ;;		_fillCircle
  8625 ;;		_drawRect
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           	psect	text42
  8630  00E104                     __ptext42:
  8631                           	opt stack 0
  8632  00E104                     _drawFastVLine:
  8633                           	opt stack 21
  8634                           
  8635                           ;incstack = 0
  8636                           ;drawFastVLine@x stored from wreg
  8637  00E104  6E12               	movwf	drawFastVLine@x,c
  8638                           
  8639                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  8640                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  8641  00E106  0E80               	movlw	128
  8642  00E108  6012               	cpfslt	drawFastVLine@x,c
  8643  00E10A  D03F               	goto	l173
  8644  00E10C  0E9F               	movlw	159
  8645  00E10E  6408               	cpfsgt	drawFastVLine@y,c
  8646  00E110  D001               	goto	l2609
  8647                           
  8648                           ;ST7735_TFT.c: 453: return;
  8649  00E112  D03B               	goto	l173
  8650  00E114                     l2609:
  8651                           
  8652                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  8653  00E114  0EFF               	movlw	255
  8654  00E116  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8655  00E118  0EFF               	movlw	255
  8656  00E11A  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  8657  00E11C  5009               	movf	drawFastVLine@h,w,c
  8658  00E11E  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  8659  00E122  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  8660  00E124  260E               	addwf	??_drawFastVLine+2,f,c
  8661  00E126  0E00               	movlw	0
  8662  00E128  220F               	addwfc	??_drawFastVLine+3,f,c
  8663  00E12A  500C               	movf	??_drawFastVLine,w,c
  8664  00E12C  260E               	addwf	??_drawFastVLine+2,f,c
  8665  00E12E  500D               	movf	??_drawFastVLine+1,w,c
  8666  00E130  220F               	addwfc	??_drawFastVLine+3,f,c
  8667  00E132  BE0F               	btfsc	??_drawFastVLine+3,7,c
  8668  00E134  D00B               	goto	l2613
  8669  00E136  500F               	movf	??_drawFastVLine+3,w,c
  8670  00E138  E104               	bnz	u1360
  8671  00E13A  0EA0               	movlw	160
  8672  00E13C  5C0E               	subwf	??_drawFastVLine+2,w,c
  8673  00E13E  A0D8               	btfss	status,0,c
  8674  00E140  D005               	goto	l2613
  8675  00E142                     u1360:
  8676                           
  8677                           ;ST7735_TFT.c: 455: h = 160 - y;
  8678  00E142  5008               	movf	drawFastVLine@y,w,c
  8679  00E144  0800               	sublw	0
  8680  00E146  0FA0               	addlw	160
  8681  00E148  6E09               	movwf	drawFastVLine@h,c
  8682  00E14A  D000               	goto	l2613
  8683  00E14C                     l2613:
  8684                           
  8685                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  8686  00E14C  500B               	movf	drawFastVLine@color+1,w,c
  8687  00E14E  6E10               	movwf	drawFastVLine@hi,c
  8688  00E150  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  8689                           
  8690                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  8691  00E154  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  8692  00E158  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  8693  00E15C  5008               	movf	drawFastVLine@y,w,c
  8694  00E15E  2409               	addwf	drawFastVLine@h,w,c
  8695  00E160  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8696  00E162  040C               	decf	??_drawFastVLine,w,c
  8697  00E164  6E06               	movwf	setAddrWindow@y1,c
  8698  00E166  5012               	movf	drawFastVLine@x,w,c
  8699  00E168  ECE1  F06E         	call	_setAddrWindow
  8700                           
  8701                           ;ST7735_TFT.c: 458: PORTDbits.RD3 = 1;
  8702  00E16C  8683               	bsf	3971,3,c	;volatile
  8703                           
  8704                           ;ST7735_TFT.c: 459: PORTDbits.RD4 = 0;
  8705  00E16E  9883               	bcf	3971,4,c	;volatile
  8706                           
  8707                           ;ST7735_TFT.c: 461: while (h--) {
  8708  00E170  D007               	goto	l2625
  8709  00E172                     l2623:
  8710                           
  8711                           ;ST7735_TFT.c: 462: spiwrite(hi);
  8712  00E172  5010               	movf	drawFastVLine@hi,w,c
  8713  00E174  ECDD  F06C         	call	_spiwrite
  8714                           
  8715                           ;ST7735_TFT.c: 463: spiwrite(lo);
  8716  00E178  5011               	movf	drawFastVLine@lo,w,c
  8717  00E17A  ECDD  F06C         	call	_spiwrite
  8718  00E17E  D000               	goto	l2625
  8719  00E180                     l2625:
  8720  00E180  0609               	decf	drawFastVLine@h,f,c
  8721  00E182  2809               	incf	drawFastVLine@h,w,c
  8722  00E184  A4D8               	btfss	status,2,c
  8723  00E186  D7F5               	goto	l2623
  8724                           
  8725                           ;ST7735_TFT.c: 464: }
  8726                           ;ST7735_TFT.c: 465: PORTDbits.RD4 = 1;
  8727  00E188  8883               	bsf	3971,4,c	;volatile
  8728  00E18A                     l173:
  8729  00E18A  0012               	return		;funcret
  8730  00E18C                     __end_of_drawFastVLine:
  8731                           	opt stack 0
  8732                           tblptru	equ	0xFF8
  8733                           tblptrh	equ	0xFF7
  8734                           tblptrl	equ	0xFF6
  8735                           tablat	equ	0xFF5
  8736                           prodh	equ	0xFF4
  8737                           prodl	equ	0xFF3
  8738                           postinc0	equ	0xFEE
  8739                           wreg	equ	0xFE8
  8740                           postdec1	equ	0xFE5
  8741                           fsr1l	equ	0xFE1
  8742                           indf2	equ	0xFDF
  8743                           postinc2	equ	0xFDE
  8744                           fsr2h	equ	0xFDA
  8745                           fsr2l	equ	0xFD9
  8746                           status	equ	0xFD8
  8747                           
  8748 ;; *************** function _drawPixel *****************
  8749 ;; Defined at:
  8750 ;;		line 440 in file "ST7735_TFT.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  x               1    wreg     unsigned char 
  8753 ;;  y               1    7[COMRAM] unsigned char 
  8754 ;;  color           2    8[COMRAM] unsigned int 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  x               1   10[COMRAM] unsigned char 
  8757 ;; Return value:  Size  Location     Type
  8758 ;;		None               void
  8759 ;; Registers used:
  8760 ;;		wreg, status,2, status,0, cstack
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/0
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8766 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;Total ram usage:        4 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; Hardware stack levels required when called:    3
  8773 ;; This function calls:
  8774 ;;		_setAddrWindow
  8775 ;;		_write_data
  8776 ;; This function is called by:
  8777 ;;		_drawChar
  8778 ;;		_drawCircle
  8779 ;;		_drawCircleHelper
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text43
  8784  00DB0C                     __ptext43:
  8785                           	opt stack 0
  8786  00DB0C                     _drawPixel:
  8787                           	opt stack 22
  8788                           
  8789                           ;incstack = 0
  8790                           ;drawPixel@x stored from wreg
  8791  00DB0C  6E0B               	movwf	drawPixel@x,c
  8792                           
  8793                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  8794  00DB0E  0E80               	movlw	128
  8795  00DB10  600B               	cpfslt	drawPixel@x,c
  8796  00DB12  D013               	goto	l167
  8797  00DB14  0E9F               	movlw	159
  8798  00DB16  6408               	cpfsgt	drawPixel@y,c
  8799  00DB18  D001               	goto	l2631
  8800                           
  8801                           ;ST7735_TFT.c: 443: return;
  8802  00DB1A  D00F               	goto	l167
  8803  00DB1C                     l2631:
  8804                           
  8805                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  8806  00DB1C  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  8807  00DB20  280B               	incf	drawPixel@x,w,c
  8808  00DB22  6E05               	movwf	setAddrWindow@x1,c
  8809  00DB24  2808               	incf	drawPixel@y,w,c
  8810  00DB26  6E06               	movwf	setAddrWindow@y1,c
  8811  00DB28  500B               	movf	drawPixel@x,w,c
  8812  00DB2A  ECE1  F06E         	call	_setAddrWindow
  8813                           
  8814                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  8815  00DB2E  500A               	movf	drawPixel@color+1,w,c
  8816  00DB30  ECC3  F06C         	call	_write_data
  8817                           
  8818                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  8819  00DB34  5009               	movf	drawPixel@color,w,c
  8820  00DB36  ECC3  F06C         	call	_write_data
  8821  00DB3A                     l167:
  8822  00DB3A  0012               	return		;funcret
  8823  00DB3C                     __end_of_drawPixel:
  8824                           	opt stack 0
  8825                           tblptru	equ	0xFF8
  8826                           tblptrh	equ	0xFF7
  8827                           tblptrl	equ	0xFF6
  8828                           tablat	equ	0xFF5
  8829                           prodh	equ	0xFF4
  8830                           prodl	equ	0xFF3
  8831                           postinc0	equ	0xFEE
  8832                           wreg	equ	0xFE8
  8833                           postdec1	equ	0xFE5
  8834                           fsr1l	equ	0xFE1
  8835                           indf2	equ	0xFDF
  8836                           postinc2	equ	0xFDE
  8837                           fsr2h	equ	0xFDA
  8838                           fsr2l	equ	0xFD9
  8839                           status	equ	0xFD8
  8840                           
  8841 ;; *************** function _setAddrWindow *****************
  8842 ;; Defined at:
  8843 ;;		line 425 in file "ST7735_TFT.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  x0              1    wreg     unsigned char 
  8846 ;;  y0              1    3[COMRAM] unsigned char 
  8847 ;;  x1              1    4[COMRAM] unsigned char 
  8848 ;;  y1              1    5[COMRAM] unsigned char 
  8849 ;; Auto vars:     Size  Location     Type
  8850 ;;  x0              1    6[COMRAM] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;		None               void
  8853 ;; Registers used:
  8854 ;;		wreg, status,2, status,0, cstack
  8855 ;; Tracked objects:
  8856 ;;		On entry : 0/0
  8857 ;;		On exit  : 0/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8860 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;Total ram usage:        4 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    2
  8867 ;; This function calls:
  8868 ;;		_write_command
  8869 ;;		_write_data
  8870 ;; This function is called by:
  8871 ;;		_drawPixel
  8872 ;;		_drawFastVLine
  8873 ;;		_fillRectangle
  8874 ;;		_drawFastHLine
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           	psect	text44
  8879  00DDC2                     __ptext44:
  8880                           	opt stack 0
  8881  00DDC2                     _setAddrWindow:
  8882                           	opt stack 21
  8883                           
  8884                           ;incstack = 0
  8885                           ;setAddrWindow@x0 stored from wreg
  8886  00DDC2  6E07               	movwf	setAddrWindow@x0,c
  8887                           
  8888                           ;ST7735_TFT.c: 427: write_command(0x2A);
  8889  00DDC4  0E2A               	movlw	42
  8890  00DDC6  ECBB  F06C         	call	_write_command
  8891                           
  8892                           ;ST7735_TFT.c: 428: write_data(0);
  8893  00DDCA  0E00               	movlw	0
  8894  00DDCC  ECC3  F06C         	call	_write_data
  8895                           
  8896                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  8897  00DDD0  5007               	movf	setAddrWindow@x0,w,c
  8898  00DDD2  2478               	addwf	_colstart,w,c
  8899  00DDD4  ECC3  F06C         	call	_write_data
  8900                           
  8901                           ;ST7735_TFT.c: 430: write_data(0);
  8902  00DDD8  0E00               	movlw	0
  8903  00DDDA  ECC3  F06C         	call	_write_data
  8904                           
  8905                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  8906  00DDDE  5005               	movf	setAddrWindow@x1,w,c
  8907  00DDE0  2478               	addwf	_colstart,w,c
  8908  00DDE2  ECC3  F06C         	call	_write_data
  8909                           
  8910                           ;ST7735_TFT.c: 432: write_command(0x2B);
  8911  00DDE6  0E2B               	movlw	43
  8912  00DDE8  ECBB  F06C         	call	_write_command
  8913                           
  8914                           ;ST7735_TFT.c: 433: write_data(0);
  8915  00DDEC  0E00               	movlw	0
  8916  00DDEE  ECC3  F06C         	call	_write_data
  8917                           
  8918                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  8919  00DDF2  5004               	movf	setAddrWindow@y0,w,c
  8920  00DDF4  247B               	addwf	_rowstart,w,c
  8921  00DDF6  ECC3  F06C         	call	_write_data
  8922                           
  8923                           ;ST7735_TFT.c: 435: write_data(0);
  8924  00DDFA  0E00               	movlw	0
  8925  00DDFC  ECC3  F06C         	call	_write_data
  8926                           
  8927                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  8928  00DE00  5006               	movf	setAddrWindow@y1,w,c
  8929  00DE02  247B               	addwf	_rowstart,w,c
  8930  00DE04  ECC3  F06C         	call	_write_data
  8931                           
  8932                           ;ST7735_TFT.c: 437: write_command(0x2C);
  8933  00DE08  0E2C               	movlw	44
  8934  00DE0A  ECBB  F06C         	call	_write_command
  8935  00DE0E  0012               	return		;funcret
  8936  00DE10                     __end_of_setAddrWindow:
  8937                           	opt stack 0
  8938                           tblptru	equ	0xFF8
  8939                           tblptrh	equ	0xFF7
  8940                           tblptrl	equ	0xFF6
  8941                           tablat	equ	0xFF5
  8942                           prodh	equ	0xFF4
  8943                           prodl	equ	0xFF3
  8944                           postinc0	equ	0xFEE
  8945                           wreg	equ	0xFE8
  8946                           postdec1	equ	0xFE5
  8947                           fsr1l	equ	0xFE1
  8948                           indf2	equ	0xFDF
  8949                           postinc2	equ	0xFDE
  8950                           fsr2h	equ	0xFDA
  8951                           fsr2l	equ	0xFD9
  8952                           status	equ	0xFD8
  8953                           
  8954 ;; *************** function _write_data *****************
  8955 ;; Defined at:
  8956 ;;		line 242 in file "ST7735_TFT.c"
  8957 ;; Parameters:    Size  Location     Type
  8958 ;;  data_           1    wreg     unsigned char 
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;  data_           1    2[COMRAM] unsigned char 
  8961 ;; Return value:  Size  Location     Type
  8962 ;;		None               void
  8963 ;; Registers used:
  8964 ;;		wreg, status,2, cstack
  8965 ;; Tracked objects:
  8966 ;;		On entry : 0/0
  8967 ;;		On exit  : 0/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;Total ram usage:        1 bytes
  8975 ;; Hardware stack levels used:    1
  8976 ;; Hardware stack levels required when called:    1
  8977 ;; This function calls:
  8978 ;;		_spiwrite
  8979 ;; This function is called by:
  8980 ;;		_Rcmd1
  8981 ;;		_Rcmd2red
  8982 ;;		_Rcmd3
  8983 ;;		_setAddrWindow
  8984 ;;		_drawPixel
  8985 ;;		_TFT_GreenTab_Initialize
  8986 ;;		_Bcmd
  8987 ;;		_setScrollDefinition
  8988 ;;		_Rcmd2green
  8989 ;;		_VerticalScroll
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text45
  8994  00D986                     __ptext45:
  8995                           	opt stack 0
  8996  00D986                     _write_data:
  8997                           	opt stack 21
  8998                           
  8999                           ;incstack = 0
  9000                           ;write_data@data_ stored from wreg
  9001  00D986  6E03               	movwf	write_data@data_,c
  9002                           
  9003                           ;ST7735_TFT.c: 244: PORTDbits.RD4 = 0;
  9004  00D988  9883               	bcf	3971,4,c	;volatile
  9005                           
  9006                           ;ST7735_TFT.c: 245: PORTDbits.RD3 = 1;
  9007  00D98A  8683               	bsf	3971,3,c	;volatile
  9008                           
  9009                           ;ST7735_TFT.c: 246: spiwrite(data_);
  9010  00D98C  5003               	movf	write_data@data_,w,c
  9011  00D98E  ECDD  F06C         	call	_spiwrite
  9012                           
  9013                           ;ST7735_TFT.c: 247: PORTDbits.RD4 = 1;
  9014  00D992  8883               	bsf	3971,4,c	;volatile
  9015  00D994  0012               	return		;funcret
  9016  00D996                     __end_of_write_data:
  9017                           	opt stack 0
  9018                           tblptru	equ	0xFF8
  9019                           tblptrh	equ	0xFF7
  9020                           tblptrl	equ	0xFF6
  9021                           tablat	equ	0xFF5
  9022                           prodh	equ	0xFF4
  9023                           prodl	equ	0xFF3
  9024                           postinc0	equ	0xFEE
  9025                           wreg	equ	0xFE8
  9026                           postdec1	equ	0xFE5
  9027                           fsr1l	equ	0xFE1
  9028                           indf2	equ	0xFDF
  9029                           postinc2	equ	0xFDE
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8
  9033                           
  9034 ;; *************** function _write_command *****************
  9035 ;; Defined at:
  9036 ;;		line 231 in file "ST7735_TFT.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  cmd_            1    wreg     unsigned char 
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  cmd_            1    2[COMRAM] unsigned char 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;		None               void
  9043 ;; Registers used:
  9044 ;;		wreg, status,2, cstack
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;Total ram usage:        1 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    1
  9057 ;; This function calls:
  9058 ;;		_spiwrite
  9059 ;; This function is called by:
  9060 ;;		_Rcmd1
  9061 ;;		_Rcmd2red
  9062 ;;		_Rcmd3
  9063 ;;		_setAddrWindow
  9064 ;;		_TFT_GreenTab_Initialize
  9065 ;;		_Bcmd
  9066 ;;		_setScrollDefinition
  9067 ;;		_Rcmd2green
  9068 ;;		_VerticalScroll
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text46
  9073  00D976                     __ptext46:
  9074                           	opt stack 0
  9075  00D976                     _write_command:
  9076                           	opt stack 21
  9077                           
  9078                           ;incstack = 0
  9079                           ;write_command@cmd_ stored from wreg
  9080  00D976  6E03               	movwf	write_command@cmd_,c
  9081                           
  9082                           ;ST7735_TFT.c: 233: PORTDbits.RD4 = 0;
  9083  00D978  9883               	bcf	3971,4,c	;volatile
  9084                           
  9085                           ;ST7735_TFT.c: 235: PORTDbits.RD3 = 0;
  9086  00D97A  9683               	bcf	3971,3,c	;volatile
  9087                           
  9088                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  9089  00D97C  5003               	movf	write_command@cmd_,w,c
  9090  00D97E  ECDD  F06C         	call	_spiwrite
  9091                           
  9092                           ;ST7735_TFT.c: 238: PORTDbits.RD4 = 1;
  9093  00D982  8883               	bsf	3971,4,c	;volatile
  9094  00D984  0012               	return		;funcret
  9095  00D986                     __end_of_write_command:
  9096                           	opt stack 0
  9097                           tblptru	equ	0xFF8
  9098                           tblptrh	equ	0xFF7
  9099                           tblptrl	equ	0xFF6
  9100                           tablat	equ	0xFF5
  9101                           prodh	equ	0xFF4
  9102                           prodl	equ	0xFF3
  9103                           postinc0	equ	0xFEE
  9104                           wreg	equ	0xFE8
  9105                           postdec1	equ	0xFE5
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           fsr2h	equ	0xFDA
  9110                           fsr2l	equ	0xFD9
  9111                           status	equ	0xFD8
  9112                           
  9113 ;; *************** function _spiwrite *****************
  9114 ;; Defined at:
  9115 ;;		line 222 in file "ST7735_TFT.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;  spidata         1    wreg     unsigned char 
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;  spidata         1    1[COMRAM] unsigned char 
  9120 ;;  x               1    0[COMRAM] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;		None               void
  9123 ;; Registers used:
  9124 ;;		wreg
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;Total ram usage:        2 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; This function calls:
  9137 ;;		Nothing
  9138 ;; This function is called by:
  9139 ;;		_write_command
  9140 ;;		_write_data
  9141 ;;		_drawFastVLine
  9142 ;;		_fillRectangle
  9143 ;;		_drawFastHLine
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           	psect	text47
  9148  00D9BA                     __ptext47:
  9149                           	opt stack 0
  9150  00D9BA                     _spiwrite:
  9151                           	opt stack 23
  9152                           
  9153                           ;incstack = 0
  9154                           ;spiwrite@spidata stored from wreg
  9155  00D9BA  6E02               	movwf	spiwrite@spidata,c
  9156                           
  9157                           ;ST7735_TFT.c: 224: char x;
  9158                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  9159  00D9BC  969E               	bcf	3998,3,c	;volatile
  9160                           
  9161                           ;ST7735_TFT.c: 226: x = SSPBUF;
  9162  00D9BE  CFC9 F001          	movff	4041,spiwrite@x	;volatile
  9163                           
  9164                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  9165  00D9C2  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9166                           
  9167                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  9168  00D9C6  D000               	goto	l123
  9169  00D9C8                     l123:
  9170  00D9C8  A0C7               	btfss	4039,0,c	;volatile
  9171  00D9CA  D7FE               	goto	l123
  9172  00D9CC  0012               	return		;funcret
  9173  00D9CE                     __end_of_spiwrite:
  9174                           	opt stack 0
  9175                           tblptru	equ	0xFF8
  9176                           tblptrh	equ	0xFF7
  9177                           tblptrl	equ	0xFF6
  9178                           tablat	equ	0xFF5
  9179                           prodh	equ	0xFF4
  9180                           prodl	equ	0xFF3
  9181                           postinc0	equ	0xFEE
  9182                           wreg	equ	0xFE8
  9183                           postdec1	equ	0xFE5
  9184                           fsr1l	equ	0xFE1
  9185                           indf2	equ	0xFDF
  9186                           postinc2	equ	0xFDE
  9187                           fsr2h	equ	0xFDA
  9188                           fsr2l	equ	0xFD9
  9189                           status	equ	0xFD8
  9190                           
  9191 ;; *************** function ___wmul *****************
  9192 ;; Defined at:
  9193 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;  multiplier      2    0[COMRAM] unsigned int 
  9196 ;;  multiplicand    2    2[COMRAM] unsigned int 
  9197 ;; Auto vars:     Size  Location     Type
  9198 ;;  product         2    4[COMRAM] unsigned int 
  9199 ;; Return value:  Size  Location     Type
  9200 ;;                  2    0[COMRAM] unsigned int 
  9201 ;; Registers used:
  9202 ;;		wreg, status,2, status,0, prodl, prodh
  9203 ;; Tracked objects:
  9204 ;;		On entry : 0/0
  9205 ;;		On exit  : 0/0
  9206 ;;		Unchanged: 0/0
  9207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9212 ;;Total ram usage:        6 bytes
  9213 ;; Hardware stack levels used:    1
  9214 ;; This function calls:
  9215 ;;		Nothing
  9216 ;; This function is called by:
  9217 ;;		_delay_ms
  9218 ;;		_drawChar
  9219 ;;		_main
  9220 ;;		_update_LCD_misc
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           	psect	text48
  9225  00DA8C                     __ptext48:
  9226                           	opt stack 0
  9227  00DA8C                     ___wmul:
  9228                           	opt stack 30
  9229                           
  9230                           ;incstack = 0
  9231  00DA8C  5001               	movf	___wmul@multiplier,w,c
  9232  00DA8E  0203               	mulwf	___wmul@multiplicand,c
  9233  00DA90  CFF3 F005          	movff	prodl,___wmul@product
  9234  00DA94  CFF4 F006          	movff	prodh,___wmul@product+1
  9235  00DA98  5001               	movf	___wmul@multiplier,w,c
  9236  00DA9A  0204               	mulwf	___wmul@multiplicand+1,c
  9237  00DA9C  50F3               	movf	prodl,w,c
  9238  00DA9E  2606               	addwf	___wmul@product+1,f,c
  9239  00DAA0  5002               	movf	___wmul@multiplier+1,w,c
  9240  00DAA2  0203               	mulwf	___wmul@multiplicand,c
  9241  00DAA4  50F3               	movf	prodl,w,c
  9242  00DAA6  2606               	addwf	___wmul@product+1,f,c
  9243  00DAA8  C005  F001         	movff	___wmul@product,?___wmul
  9244  00DAAC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  9245  00DAB0  D000               	goto	l534
  9246  00DAB2                     l534:
  9247  00DAB2  0012               	return		;funcret
  9248  00DAB4                     __end_of___wmul:
  9249                           	opt stack 0
  9250                           tblptru	equ	0xFF8
  9251                           tblptrh	equ	0xFF7
  9252                           tblptrl	equ	0xFF6
  9253                           tablat	equ	0xFF5
  9254                           prodh	equ	0xFF4
  9255                           prodl	equ	0xFF3
  9256                           postinc0	equ	0xFEE
  9257                           wreg	equ	0xFE8
  9258                           postdec1	equ	0xFE5
  9259                           fsr1l	equ	0xFE1
  9260                           indf2	equ	0xFDF
  9261                           postinc2	equ	0xFDE
  9262                           fsr2h	equ	0xFDA
  9263                           fsr2l	equ	0xFD9
  9264                           status	equ	0xFD8
  9265                           
  9266 ;; *************** function ___awmod *****************
  9267 ;; Defined at:
  9268 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;  dividend        2    0[COMRAM] int 
  9271 ;;  divisor         2    2[COMRAM] int 
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;  sign            1    5[COMRAM] unsigned char 
  9274 ;;  counter         1    4[COMRAM] unsigned char 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  2    0[COMRAM] int 
  9277 ;; Registers used:
  9278 ;;		wreg, status,2, status,0
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9284 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;Total ram usage:        6 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; This function calls:
  9291 ;;		Nothing
  9292 ;; This function is called by:
  9293 ;;		_update_LCD_count
  9294 ;;		_update_LCD_PED_Count
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text49
  9299  00E000                     __ptext49:
  9300                           	opt stack 0
  9301  00E000                     ___awmod:
  9302                           	opt stack 27
  9303                           
  9304                           ;incstack = 0
  9305  00E000  0E00               	movlw	0
  9306  00E002  6E06               	movwf	___awmod@sign,c
  9307  00E004  AE02               	btfss	___awmod@dividend+1,7,c
  9308  00E006  D007               	goto	l3079
  9309  00E008  6C01               	negf	___awmod@dividend,c
  9310  00E00A  1E02               	comf	___awmod@dividend+1,f,c
  9311  00E00C  B0D8               	btfsc	status,0,c
  9312  00E00E  2A02               	incf	___awmod@dividend+1,f,c
  9313  00E010  0E01               	movlw	1
  9314  00E012  6E06               	movwf	___awmod@sign,c
  9315  00E014  D000               	goto	l3079
  9316  00E016                     l3079:
  9317  00E016  AE04               	btfss	___awmod@divisor+1,7,c
  9318  00E018  D005               	goto	l3083
  9319  00E01A  6C03               	negf	___awmod@divisor,c
  9320  00E01C  1E04               	comf	___awmod@divisor+1,f,c
  9321  00E01E  B0D8               	btfsc	status,0,c
  9322  00E020  2A04               	incf	___awmod@divisor+1,f,c
  9323  00E022  D000               	goto	l3083
  9324  00E024                     l3083:
  9325  00E024  5003               	movf	___awmod@divisor,w,c
  9326  00E026  1004               	iorwf	___awmod@divisor+1,w,c
  9327  00E028  B4D8               	btfsc	status,2,c
  9328  00E02A  D01D               	goto	l3099
  9329  00E02C  0E01               	movlw	1
  9330  00E02E  6E05               	movwf	___awmod@counter,c
  9331  00E030  D005               	goto	l3089
  9332  00E032                     l3087:
  9333  00E032  90D8               	bcf	status,0,c
  9334  00E034  3603               	rlcf	___awmod@divisor,f,c
  9335  00E036  3604               	rlcf	___awmod@divisor+1,f,c
  9336  00E038  2A05               	incf	___awmod@counter,f,c
  9337  00E03A  D000               	goto	l3089
  9338  00E03C                     l3089:
  9339  00E03C  BE04               	btfsc	___awmod@divisor+1,7,c
  9340  00E03E  D002               	goto	l3091
  9341  00E040  D7F8               	goto	l3087
  9342  00E042  D000               	goto	l3091
  9343  00E044                     l3091:
  9344  00E044  5003               	movf	___awmod@divisor,w,c
  9345  00E046  5C01               	subwf	___awmod@dividend,w,c
  9346  00E048  5004               	movf	___awmod@divisor+1,w,c
  9347  00E04A  5802               	subwfb	___awmod@dividend+1,w,c
  9348  00E04C  A0D8               	btfss	status,0,c
  9349  00E04E  D005               	goto	l3095
  9350  00E050  5003               	movf	___awmod@divisor,w,c
  9351  00E052  5E01               	subwf	___awmod@dividend,f,c
  9352  00E054  5004               	movf	___awmod@divisor+1,w,c
  9353  00E056  5A02               	subwfb	___awmod@dividend+1,f,c
  9354  00E058  D000               	goto	l3095
  9355  00E05A                     l3095:
  9356  00E05A  90D8               	bcf	status,0,c
  9357  00E05C  3204               	rrcf	___awmod@divisor+1,f,c
  9358  00E05E  3203               	rrcf	___awmod@divisor,f,c
  9359  00E060  2E05               	decfsz	___awmod@counter,f,c
  9360  00E062  D7F0               	goto	l3091
  9361  00E064  D000               	goto	l3099
  9362  00E066                     l3099:
  9363  00E066  5006               	movf	___awmod@sign,w,c
  9364  00E068  B4D8               	btfsc	status,2,c
  9365  00E06A  D005               	goto	l3103
  9366  00E06C  6C01               	negf	___awmod@dividend,c
  9367  00E06E  1E02               	comf	___awmod@dividend+1,f,c
  9368  00E070  B0D8               	btfsc	status,0,c
  9369  00E072  2A02               	incf	___awmod@dividend+1,f,c
  9370  00E074  D000               	goto	l3103
  9371  00E076                     l3103:
  9372  00E076  C001  F001         	movff	___awmod@dividend,?___awmod
  9373  00E07A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9374  00E07E  D000               	goto	l740
  9375  00E080                     l740:
  9376  00E080  0012               	return		;funcret
  9377  00E082                     __end_of___awmod:
  9378                           	opt stack 0
  9379                           tblptru	equ	0xFF8
  9380                           tblptrh	equ	0xFF7
  9381                           tblptrl	equ	0xFF6
  9382                           tablat	equ	0xFF5
  9383                           prodh	equ	0xFF4
  9384                           prodl	equ	0xFF3
  9385                           postinc0	equ	0xFEE
  9386                           wreg	equ	0xFE8
  9387                           postdec1	equ	0xFE5
  9388                           fsr1l	equ	0xFE1
  9389                           indf2	equ	0xFDF
  9390                           postinc2	equ	0xFDE
  9391                           fsr2h	equ	0xFDA
  9392                           fsr2l	equ	0xFD9
  9393                           status	equ	0xFD8
  9394                           
  9395 ;; *************** function ___awdiv *****************
  9396 ;; Defined at:
  9397 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;  dividend        2    0[COMRAM] int 
  9400 ;;  divisor         2    2[COMRAM] int 
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;  quotient        2    6[COMRAM] int 
  9403 ;;  sign            1    5[COMRAM] unsigned char 
  9404 ;;  counter         1    4[COMRAM] unsigned char 
  9405 ;; Return value:  Size  Location     Type
  9406 ;;                  2    0[COMRAM] int 
  9407 ;; Registers used:
  9408 ;;		wreg, status,2, status,0
  9409 ;; Tracked objects:
  9410 ;;		On entry : 0/0
  9411 ;;		On exit  : 0/0
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9414 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;Total ram usage:        8 bytes
  9419 ;; Hardware stack levels used:    1
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_update_LCD_count
  9424 ;;		_update_LCD_PED_Count
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           	psect	text50
  9429  00E214                     __ptext50:
  9430                           	opt stack 0
  9431  00E214                     ___awdiv:
  9432                           	opt stack 27
  9433                           
  9434                           ;incstack = 0
  9435  00E214  0E00               	movlw	0
  9436  00E216  6E06               	movwf	___awdiv@sign,c
  9437  00E218  AE04               	btfss	___awdiv@divisor+1,7,c
  9438  00E21A  D007               	goto	l3035
  9439  00E21C  6C03               	negf	___awdiv@divisor,c
  9440  00E21E  1E04               	comf	___awdiv@divisor+1,f,c
  9441  00E220  B0D8               	btfsc	status,0,c
  9442  00E222  2A04               	incf	___awdiv@divisor+1,f,c
  9443  00E224  0E01               	movlw	1
  9444  00E226  6E06               	movwf	___awdiv@sign,c
  9445  00E228  D000               	goto	l3035
  9446  00E22A                     l3035:
  9447  00E22A  AE02               	btfss	___awdiv@dividend+1,7,c
  9448  00E22C  D007               	goto	l3041
  9449  00E22E  6C01               	negf	___awdiv@dividend,c
  9450  00E230  1E02               	comf	___awdiv@dividend+1,f,c
  9451  00E232  B0D8               	btfsc	status,0,c
  9452  00E234  2A02               	incf	___awdiv@dividend+1,f,c
  9453  00E236  0E01               	movlw	1
  9454  00E238  1A06               	xorwf	___awdiv@sign,f,c
  9455  00E23A  D000               	goto	l3041
  9456  00E23C                     l3041:
  9457  00E23C  0E00               	movlw	0
  9458  00E23E  6E08               	movwf	___awdiv@quotient+1,c
  9459  00E240  0E00               	movlw	0
  9460  00E242  6E07               	movwf	___awdiv@quotient,c
  9461  00E244  5003               	movf	___awdiv@divisor,w,c
  9462  00E246  1004               	iorwf	___awdiv@divisor+1,w,c
  9463  00E248  B4D8               	btfsc	status,2,c
  9464  00E24A  D021               	goto	l3063
  9465  00E24C  0E01               	movlw	1
  9466  00E24E  6E05               	movwf	___awdiv@counter,c
  9467  00E250  D005               	goto	l3049
  9468  00E252                     l3047:
  9469  00E252  90D8               	bcf	status,0,c
  9470  00E254  3603               	rlcf	___awdiv@divisor,f,c
  9471  00E256  3604               	rlcf	___awdiv@divisor+1,f,c
  9472  00E258  2A05               	incf	___awdiv@counter,f,c
  9473  00E25A  D000               	goto	l3049
  9474  00E25C                     l3049:
  9475  00E25C  BE04               	btfsc	___awdiv@divisor+1,7,c
  9476  00E25E  D002               	goto	l3051
  9477  00E260  D7F8               	goto	l3047
  9478  00E262  D000               	goto	l3051
  9479  00E264                     l3051:
  9480  00E264  90D8               	bcf	status,0,c
  9481  00E266  3607               	rlcf	___awdiv@quotient,f,c
  9482  00E268  3608               	rlcf	___awdiv@quotient+1,f,c
  9483  00E26A  5003               	movf	___awdiv@divisor,w,c
  9484  00E26C  5C01               	subwf	___awdiv@dividend,w,c
  9485  00E26E  5004               	movf	___awdiv@divisor+1,w,c
  9486  00E270  5802               	subwfb	___awdiv@dividend+1,w,c
  9487  00E272  A0D8               	btfss	status,0,c
  9488  00E274  D006               	goto	l3059
  9489  00E276  5003               	movf	___awdiv@divisor,w,c
  9490  00E278  5E01               	subwf	___awdiv@dividend,f,c
  9491  00E27A  5004               	movf	___awdiv@divisor+1,w,c
  9492  00E27C  5A02               	subwfb	___awdiv@dividend+1,f,c
  9493  00E27E  8007               	bsf	___awdiv@quotient,0,c
  9494  00E280  D000               	goto	l3059
  9495  00E282                     l3059:
  9496  00E282  90D8               	bcf	status,0,c
  9497  00E284  3204               	rrcf	___awdiv@divisor+1,f,c
  9498  00E286  3203               	rrcf	___awdiv@divisor,f,c
  9499  00E288  2E05               	decfsz	___awdiv@counter,f,c
  9500  00E28A  D7EC               	goto	l3051
  9501  00E28C  D000               	goto	l3063
  9502  00E28E                     l3063:
  9503  00E28E  5006               	movf	___awdiv@sign,w,c
  9504  00E290  B4D8               	btfsc	status,2,c
  9505  00E292  D005               	goto	l3067
  9506  00E294  6C07               	negf	___awdiv@quotient,c
  9507  00E296  1E08               	comf	___awdiv@quotient+1,f,c
  9508  00E298  B0D8               	btfsc	status,0,c
  9509  00E29A  2A08               	incf	___awdiv@quotient+1,f,c
  9510  00E29C  D000               	goto	l3067
  9511  00E29E                     l3067:
  9512  00E29E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9513  00E2A2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9514  00E2A6  D000               	goto	l727
  9515  00E2A8                     l727:
  9516  00E2A8  0012               	return		;funcret
  9517  00E2AA                     __end_of___awdiv:
  9518                           	opt stack 0
  9519                           tblptru	equ	0xFF8
  9520                           tblptrh	equ	0xFF7
  9521                           tblptrl	equ	0xFF6
  9522                           tablat	equ	0xFF5
  9523                           prodh	equ	0xFF4
  9524                           prodl	equ	0xFF3
  9525                           postinc0	equ	0xFEE
  9526                           wreg	equ	0xFE8
  9527                           postdec1	equ	0xFE5
  9528                           fsr1l	equ	0xFE1
  9529                           indf2	equ	0xFDF
  9530                           postinc2	equ	0xFDE
  9531                           fsr2h	equ	0xFDA
  9532                           fsr2l	equ	0xFD9
  9533                           status	equ	0xFD8
  9534                           
  9535 ;; *************** function _Wait_One_Second_With_Beep *****************
  9536 ;; Defined at:
  9537 ;;		line 577 in file "Lab7_redo.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;		None
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;		None
  9542 ;; Return value:  Size  Location     Type
  9543 ;;		None               void
  9544 ;; Registers used:
  9545 ;;		wreg, status,2, cstack
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;Total ram usage:        0 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; Hardware stack levels required when called:    1
  9558 ;; This function calls:
  9559 ;;		_Activate_Buzzer
  9560 ;;		_Deactivate_Buzzer
  9561 ;;		_Wait_Half_Second
  9562 ;; This function is called by:
  9563 ;;		_PED_Control
  9564 ;; This function uses a non-reentrant model
  9565 ;;
  9566                           
  9567                           	psect	text51
  9568  00D9F6                     __ptext51:
  9569                           	opt stack 0
  9570  00D9F6                     _Wait_One_Second_With_Beep:
  9571                           	opt stack 27
  9572                           
  9573                           ;Lab7_redo.c: 579: PORTDbits.RD7 = 1;
  9574                           
  9575                           ;incstack = 0
  9576  00D9F6  8E83               	bsf	3971,7,c	;volatile
  9577                           
  9578                           ;Lab7_redo.c: 580: Activate_Buzzer();
  9579  00D9F8  ECCB  F06C         	call	_Activate_Buzzer	;wreg free
  9580                           
  9581                           ;Lab7_redo.c: 581: Wait_Half_Second();
  9582  00D9FC  EC06  F06D         	call	_Wait_Half_Second	;wreg free
  9583                           
  9584                           ;Lab7_redo.c: 582: PORTDbits.RD7 = 0;
  9585  00DA00  9E83               	bcf	3971,7,c	;volatile
  9586                           
  9587                           ;Lab7_redo.c: 583: Deactivate_Buzzer();
  9588  00DA02  ECB0  F06C         	call	_Deactivate_Buzzer	;wreg free
  9589                           
  9590                           ;Lab7_redo.c: 584: Wait_Half_Second();
  9591  00DA06  EC06  F06D         	call	_Wait_Half_Second	;wreg free
  9592  00DA0A  0012               	return		;funcret
  9593  00DA0C                     __end_of_Wait_One_Second_With_Beep:
  9594                           	opt stack 0
  9595                           tblptru	equ	0xFF8
  9596                           tblptrh	equ	0xFF7
  9597                           tblptrl	equ	0xFF6
  9598                           tablat	equ	0xFF5
  9599                           prodh	equ	0xFF4
  9600                           prodl	equ	0xFF3
  9601                           postinc0	equ	0xFEE
  9602                           wreg	equ	0xFE8
  9603                           postdec1	equ	0xFE5
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           fsr2h	equ	0xFDA
  9608                           fsr2l	equ	0xFD9
  9609                           status	equ	0xFD8
  9610                           
  9611 ;; *************** function _Wait_Half_Second *****************
  9612 ;; Defined at:
  9613 ;;		line 587 in file "Lab7_redo.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;		None
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;		None
  9618 ;; Return value:  Size  Location     Type
  9619 ;;		None               void
  9620 ;; Registers used:
  9621 ;;		wreg, status,2
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;Total ram usage:        0 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; This function calls:
  9634 ;;		Nothing
  9635 ;; This function is called by:
  9636 ;;		_Wait_One_Second
  9637 ;;		_Wait_One_Second_With_Beep
  9638 ;;		_Old_Wait_One_Second
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           	psect	text52
  9643  00DA0C                     __ptext52:
  9644                           	opt stack 0
  9645  00DA0C                     _Wait_Half_Second:
  9646                           	opt stack 27
  9647                           
  9648                           ;Lab7_redo.c: 589: T0CON = 0x03;
  9649                           
  9650                           ;incstack = 0
  9651  00DA0C  0E03               	movlw	3
  9652  00DA0E  6ED5               	movwf	4053,c	;volatile
  9653                           
  9654                           ;Lab7_redo.c: 590: TMR0L = 0xDB;
  9655  00DA10  0EDB               	movlw	219
  9656  00DA12  6ED6               	movwf	4054,c	;volatile
  9657                           
  9658                           ;Lab7_redo.c: 591: TMR0H = 0x0B;
  9659  00DA14  0E0B               	movlw	11
  9660  00DA16  6ED7               	movwf	4055,c	;volatile
  9661                           
  9662                           ;Lab7_redo.c: 592: INTCONbits.TMR0IF = 0;
  9663  00DA18  94F2               	bcf	intcon,2,c	;volatile
  9664                           
  9665                           ;Lab7_redo.c: 593: T0CONbits.TMR0ON = 1;
  9666  00DA1A  8ED5               	bsf	4053,7,c	;volatile
  9667                           
  9668                           ;Lab7_redo.c: 594: while (INTCONbits.TMR0IF == 0);
  9669  00DA1C  D000               	goto	l454
  9670  00DA1E                     l454:
  9671  00DA1E  A4F2               	btfss	intcon,2,c	;volatile
  9672  00DA20  D7FE               	goto	l454
  9673                           
  9674                           ;Lab7_redo.c: 595: T0CONbits.TMR0ON = 0;
  9675  00DA22  9ED5               	bcf	4053,7,c	;volatile
  9676  00DA24  0012               	return		;funcret
  9677  00DA26                     __end_of_Wait_Half_Second:
  9678                           	opt stack 0
  9679                           tblptru	equ	0xFF8
  9680                           tblptrh	equ	0xFF7
  9681                           tblptrl	equ	0xFF6
  9682                           tablat	equ	0xFF5
  9683                           prodh	equ	0xFF4
  9684                           prodl	equ	0xFF3
  9685                           intcon	equ	0xFF2
  9686                           postinc0	equ	0xFEE
  9687                           wreg	equ	0xFE8
  9688                           postdec1	equ	0xFE5
  9689                           fsr1l	equ	0xFE1
  9690                           indf2	equ	0xFDF
  9691                           postinc2	equ	0xFDE
  9692                           fsr2h	equ	0xFDA
  9693                           fsr2l	equ	0xFD9
  9694                           status	equ	0xFD8
  9695                           
  9696 ;; *************** function _Deactivate_Buzzer *****************
  9697 ;; Defined at:
  9698 ;;		line 387 in file "Lab7_redo.c"
  9699 ;; Parameters:    Size  Location     Type
  9700 ;;		None
  9701 ;; Auto vars:     Size  Location     Type
  9702 ;;		None
  9703 ;; Return value:  Size  Location     Type
  9704 ;;		None               void
  9705 ;; Registers used:
  9706 ;;		wreg, status,2
  9707 ;; Tracked objects:
  9708 ;;		On entry : 0/0
  9709 ;;		On exit  : 0/0
  9710 ;;		Unchanged: 0/0
  9711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;Total ram usage:        0 bytes
  9717 ;; Hardware stack levels used:    1
  9718 ;; This function calls:
  9719 ;;		Nothing
  9720 ;; This function is called by:
  9721 ;;		_Wait_One_Second_With_Beep
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           	psect	text53
  9726  00D960                     __ptext53:
  9727                           	opt stack 0
  9728  00D960                     _Deactivate_Buzzer:
  9729                           	opt stack 27
  9730                           
  9731                           ;Lab7_redo.c: 389: CCP2CON = 0x0;
  9732                           
  9733                           ;incstack = 0
  9734  00D960  0E00               	movlw	0
  9735  00D962  6EBA               	movwf	4026,c	;volatile
  9736                           
  9737                           ;Lab7_redo.c: 390: PORTBbits.RB3 = 0;
  9738  00D964  9681               	bcf	3969,3,c	;volatile
  9739  00D966  0012               	return		;funcret
  9740  00D968                     __end_of_Deactivate_Buzzer:
  9741                           	opt stack 0
  9742                           tblptru	equ	0xFF8
  9743                           tblptrh	equ	0xFF7
  9744                           tblptrl	equ	0xFF6
  9745                           tablat	equ	0xFF5
  9746                           prodh	equ	0xFF4
  9747                           prodl	equ	0xFF3
  9748                           intcon	equ	0xFF2
  9749                           postinc0	equ	0xFEE
  9750                           wreg	equ	0xFE8
  9751                           postdec1	equ	0xFE5
  9752                           fsr1l	equ	0xFE1
  9753                           indf2	equ	0xFDF
  9754                           postinc2	equ	0xFDE
  9755                           fsr2h	equ	0xFDA
  9756                           fsr2l	equ	0xFD9
  9757                           status	equ	0xFD8
  9758                           
  9759 ;; *************** function _Activate_Buzzer *****************
  9760 ;; Defined at:
  9761 ;;		line 379 in file "Lab7_redo.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;		None
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;		None
  9766 ;; Return value:  Size  Location     Type
  9767 ;;		None               void
  9768 ;; Registers used:
  9769 ;;		wreg, status,2
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;Total ram usage:        0 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; This function calls:
  9782 ;;		Nothing
  9783 ;; This function is called by:
  9784 ;;		_Wait_One_Second_With_Beep
  9785 ;; This function uses a non-reentrant model
  9786 ;;
  9787                           
  9788                           	psect	text54
  9789  00D996                     __ptext54:
  9790                           	opt stack 0
  9791  00D996                     _Activate_Buzzer:
  9792                           	opt stack 27
  9793                           
  9794                           ;Lab7_redo.c: 381: PR2 = 0b11111001;
  9795                           
  9796                           ;incstack = 0
  9797  00D996  0EF9               	movlw	249
  9798  00D998  6ECB               	movwf	4043,c	;volatile
  9799                           
  9800                           ;Lab7_redo.c: 382: T2CON = 0b00000101;
  9801  00D99A  0E05               	movlw	5
  9802  00D99C  6ECA               	movwf	4042,c	;volatile
  9803                           
  9804                           ;Lab7_redo.c: 383: CCPR2L = 0b01001010;
  9805  00D99E  0E4A               	movlw	74
  9806  00D9A0  6EBB               	movwf	4027,c	;volatile
  9807                           
  9808                           ;Lab7_redo.c: 384: CCP2CON = 0b00111100;
  9809  00D9A2  0E3C               	movlw	60
  9810  00D9A4  6EBA               	movwf	4026,c	;volatile
  9811  00D9A6  0012               	return		;funcret
  9812  00D9A8                     __end_of_Activate_Buzzer:
  9813                           	opt stack 0
  9814                           tblptru	equ	0xFF8
  9815                           tblptrh	equ	0xFF7
  9816                           tblptrl	equ	0xFF6
  9817                           tablat	equ	0xFF5
  9818                           prodh	equ	0xFF4
  9819                           prodl	equ	0xFF3
  9820                           intcon	equ	0xFF2
  9821                           postinc0	equ	0xFEE
  9822                           wreg	equ	0xFE8
  9823                           postdec1	equ	0xFE5
  9824                           fsr1l	equ	0xFE1
  9825                           indf2	equ	0xFDF
  9826                           postinc2	equ	0xFDE
  9827                           fsr2h	equ	0xFDA
  9828                           fsr2l	equ	0xFD9
  9829                           status	equ	0xFD8
  9830                           tblptru	equ	0xFF8
  9831                           tblptrh	equ	0xFF7
  9832                           tblptrl	equ	0xFF6
  9833                           tablat	equ	0xFF5
  9834                           prodh	equ	0xFF4
  9835                           prodl	equ	0xFF3
  9836                           intcon	equ	0xFF2
  9837                           postinc0	equ	0xFEE
  9838                           wreg	equ	0xFE8
  9839                           postdec1	equ	0xFE5
  9840                           fsr1l	equ	0xFE1
  9841                           indf2	equ	0xFDF
  9842                           postinc2	equ	0xFDE
  9843                           fsr2h	equ	0xFDA
  9844                           fsr2l	equ	0xFD9
  9845                           status	equ	0xFD8
  9846                           
  9847                           	psect	rparam
  9848  0000                     tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           intcon	equ	0xFF2
  9855                           postinc0	equ	0xFEE
  9856                           wreg	equ	0xFE8
  9857                           postdec1	equ	0xFE5
  9858                           fsr1l	equ	0xFE1
  9859                           indf2	equ	0xFDF
  9860                           postinc2	equ	0xFDE
  9861                           fsr2h	equ	0xFDA
  9862                           fsr2l	equ	0xFD9
  9863                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    475
    Data        35
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     123
    BANK0           128      0      31
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(COMRAM[3]), 
		 -> PED_NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(COMRAM[3]), 
		 -> PED_NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[10]), STR_7(CODE[7]), 
		 -> STR_6(CODE[12]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(COMRAM[3]), 
		 -> PED_NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_PED_Control
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  375840
                                             63 COMRAM     2     2      0
                           _Day_Mode
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  147697
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   52368
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3402
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1521
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1521
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  170392
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   69457
                                             60 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   22347
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   47020
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   25286
                                             57 COMRAM     3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2201
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1826
                                              8 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1559
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          4     3      1   22695
                                             59 COMRAM     4     3      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   22365
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   20175
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7    8408
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     689
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     932
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     936
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      1F       5       24.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      7B       1       96.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9A      34        0.0%
DATA                 0      0      9A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 21 10:07:08 2021

                       drawCircle@f 001A                         drawCircle@r 0010  
                       drawCircle@x 001C                         drawCircle@y 001E  
         _Wait_One_Second_With_Beep D9F6                         _SSPSTATbits 000FC7  
                      drawCircle@x0 000C                        drawCircle@y0 000E  
                      ___awdiv@sign 0006                 ___wmul@multiplicand 0003  
          update_LCD_color@Circle_Y 0035                                 l113 DEAC  
                               l123 D9C8                                 l230 E7B2  
                               l401 DC7A                                 l410 DCBE  
                               l226 E7B4                                 l403 DC7E  
                               l227 E720                                 l404 DC84  
                               l412 DCC2                                 l173 E18A  
                               l237 F046                                 l405 DC88  
                               l413 DCC8                                 l229 E790  
                               l430 DFFE                                 l406 DCAA  
                               l414 DCCC                                 l167 DB3A  
                               l191 ECDE                                 l255 EBE6  
                               l415 DCEE                                 l271 E212  
                               l433 E4C2                                 l442 E3E4  
                               l522 DF46                                 l435 E512  
                               l531 DF88                                 l189 EE04  
                               l437 E54E                                 l454 DA1E  
                               l534 DAB2                                 l198 ED5A  
                               l526 DF60                                 l383 DD02  
                               l527 DF62                                 l392 DD46  
                               l376 DA6A                                 l528 DF6C  
                               l385 DD06                                 l529 DF6E  
                               l386 DD0C                                 l394 DD4A  
                               l387 DD10                                 l395 DD50  
                               l379 DA8A                                 l740 E080  
                               l388 DD32                                 l396 DD54  
                               l485 E612                                 l469 F69C  
                               l397 DD76                                 l478 EF82  
                               l727 E2A8                                 l752 DBA8  
                               l842 E6D8                                 l914 E974  
                               l923 E33E                                 l853 E6B0  
                               l917 E940                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 003B                                 _PR2 000FCB  
                 _Deactivate_Buzzer D960                                 _dir 0079  
                               _nbr 006A                                 _txt 006C  
                    drawFastHLine@w 0009                      drawFastHLine@x 0012  
                    drawFastHLine@y 0008                        ___awmod@sign 0006  
           __end_of_update_LCD_misc F33C                                 wreg 000FE8  
                ??_Wait_Half_Second 0001                  ?_Deactivate_Buzzer 0001  
                   ??_fillRectangle 000D                        __CFG_LVP$OFF 000000  
           _TFT_GreenTab_Initialize DAB4                        ___ftdiv@cntr 0016  
                      ___ftdiv@sign 001B                        __CFG_WDT$OFF 000000  
                    drawFastVLine@h 0009                                l3001 F1F8  
                              l1091 DBE6                                l3011 F21A  
                              l3005 F206                                l3103 E076  
                              l3041 E23C                                l3009 F214  
                              l3051 E264                                l3035 E22A  
                              l3203 E6EA                      drawFastVLine@x 0012  
                              l3221 E786                      drawFastVLine@y 0008  
                              l3047 E252                                l3063 E28E  
                              l3311 EE0A                                l3049 E25C  
                              l3225 E794                                l3209 E758  
                              l3067 E29E                                l3059 E282  
                              l3091 E044                                l3083 E024  
                              l3323 EF10                                l3315 EE62  
                              l3243 E19C                                l3235 E7AE  
                              l2613 E14C                                l2701 EE00  
                              l3413 DD16                                l3421 DD5A  
                              l3229 E79E                                l3095 E05A  
                              l3087 E032                                l3079 E016  
                              l2631 DB1C                                l2623 E172  
                              l3271 F4F0                                l3319 EEBA  
                              l3247 E1D4                                l3089 E03C  
                              l2625 E180                                l2609 E114  
                              l3281 E554                                l3329 EF66  
                              l3257 E1FA                                l3099 E066  
                              l2643 DD9E                                l2707 DBB4  
                              l3291 E602                                l3443 DF96  
                              l3275 F5C6                                l3267 F41C  
                              l2731 E678                                l2723 E634  
                              l3259 E208                                l3371 DF3E  
                              l3363 DF2C                                l2709 DBBA  
                              l3285 E5AC                                l3461 DFC4  
                              l2813 EC48                                l3429 DC8E  
                              l3437 DCD2                                l2741 E6B8  
                              l2733 E698                                l2725 E640  
                              l2639 DD82                                l2663 ECDA  
                              l2655 ECC0                                l3455 DFB2  
                              l3447 DFA0                                l2735 E6A4  
                              l2727 E660                                l2719 E624  
                              l3383 DF58                                l3375 DF4A  
                              l3367 DF36                                l2673 ED1A  
                              l2665 ECE2                                l3465 DFD0  
                              l2817 EC9A                                l2833 E8B2  
                              l2675 ED4E                                l2659 ECCC  
                              l2771 E822                                l2747 E6CA  
                              l2835 E8CC                                l2693 EDD0  
                              l2685 ED7C                                l2677 ED52  
                              l2669 ECEA                                l3477 DFEC  
                              l3469 DFDA                                l3485 DAE4  
                              l2695 EDF8                                l2687 EDA4  
                              l2783 E880                                l2775 E83C  
                              l2759 E7DE                                l2935 F02C  
                              l2839 E8DA                                l3495 DB00  
                              l3647 E4FE                                l2785 E886  
                              l2881 DB84                                l3489 DAEE  
                              l2963 F11C                                l2971 DB50  
                              l2859 E91A                                l2797 EBCC  
                              l2869 E94E                                l2893 E30E  
                              l2969 DB46                                l2889 E2DC  
                              l2993 F1DC                                l3697 E3A2  
                              l2899 E33A                                l3955 E3FC  
                              l2997 F1EA                                l3965 E484  
                              STR_1 FFAD                                STR_2 FFE5  
                              STR_3 FFEB                                STR_4 FFEF  
                              STR_5 FFFD                                STR_6 FFC1  
                              STR_7 FFD7                                STR_8 FFCD  
                              STR_9 FFDE                                u2100 E74E  
                              u1510 EDB2                                u1360 E142  
                              u2170 E1CA                                u2090 E718  
                              u2600 E474                                u1650 E806  
                              u2610 E476                                u1751 E8A4  
                              u1771 E8C2                                u1880 F1AE  
                              u1890 F1B0                                _MODE 0068  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 0001  
                              _main E3E6                                _font FDBD  
                      ___ftpack@arg 0001                        ___ftpack@exp 0004  
                    ??_get_full_ADC 0003                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 0042  
                              _volt 0065                     drawFastHLine@hi 0010  
                   drawFastHLine@lo 0011            __end_of_update_LCD_color F69E  
          __end_of_update_LCD_count EF84                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0000                     ??_drawFastHLine 000C  
                   ??_drawFastVLine 000C                        ___param_bank 000010  
                      _Act_Mode_Txt 0055           __end_of_Deactivate_Buzzer D968  
                   drawFastVLine@hi 0010                     drawFastVLine@lo 0011  
                       _SW_EWLT_Txt 005B                         _SW_MODE_Txt 005F  
                             ?_main 0001                     __end_of___awdiv E2AA  
                   drawCircle@ddF_x 0016                               STR_10 FFF3  
                   drawCircle@ddF_y 0018                               STR_11 FFF7  
                             STR_12 FF98                               STR_13 FFFD  
                             STR_14 FFFB                     __end_of___awmod E082  
                   __end_of___ftdiv E976                               _T0CON 000FD5  
                   ___awdiv@divisor 0003                               _T2CON 000FCA  
                             _T3CON 000FB1                     ___awdiv@counter 0005  
                   drawCircle@color 0012                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _SPBRG 000FAF                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 006E                        ?_PED_Control 003C  
                             _Rcmd1 EA68                               _Rcmd3 E976  
                       _SW_NSLT_Txt 0061                       drawRect@color 001B  
                     ___awtoft@sign 000C                     __end_of_init_IO D9E2  
                             _font2 FEBC               fillCircleHelper@ddF_x 0021  
             fillCircleHelper@ddF_y 0023                   ??_Wait_One_Second 003D  
                     ___ftpack@sign 0005               fillCircleHelper@delta 001B  
             fillCircleHelper@color 001D                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 003B                    __end_of_Day_Mode E550  
                    _Wait_N_Seconds DADE                     write_data@data_ 0003  
                   __initialization DC26                        __end_of_main E48E  
                      __end_of_font FEBC                    __end_of_Init_ADC D976  
                  __end_of_Rcmd2red DC26                          _Night_Mode E340  
                            ??_main 0040                       __activetblptr 000002  
             Wait_N_Seconds@seconds 003D                   __end_of_LCD_Reset D9BA  
                      _SW_EWPED_Txt 005D           ??_TFT_GreenTab_Initialize 000D  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 003D  
                  ___awdiv@dividend 0001                    __end_of___awtoft DBAA  
                  __end_of___ftpack E6DA                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds DB0C                        _SW_NSPED_Txt 0063  
                  __end_of_delay_ms DEB4                              _Set_EW DC68  
                            _Set_NS DCF0                    __end_of_fillRect DDC2  
                  __end_of_drawChar EE06                    __end_of_drawRect DF1A  
                __size_of_Set_EW_LT 0044                  __size_of_OpenUSART 0070  
                            ___ftge E2AA                  __size_of_Set_NS_LT 0044  
          __size_of_Activate_Buzzer 0012                              ___wmul DA8C  
                         ??___awdiv 0005           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext E894                           ??___awmod 0005  
                         ??___ftdiv 0013                              _buffer 0080  
                            clear_0 DC2C                              clear_1 DC38  
                  ___awdiv@quotient 0007                     ___awmod@divisor 0003  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0005  
                      drawtext@size 0030                              _strcpy DB3C  
                            _strlen DBAA                __end_of_get_full_ADC DA8C  
                         ??_init_IO 0001                        __pdataCOMRAM 0042  
__size_of_Wait_One_Second_With_Beep 0016                         Set_EW@color 0036  
                      __mediumconst FDBC                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                  __end_of_spiwrite D9CE                         Set_NS@color 0036  
                        __accesstop 0080             __end_of__initialization DC5E  
                        ___ftge@ff1 0001                          ___ftge@ff2 0004  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 000D                          ___ftdiv@f2 0010  
                        ___ftdiv@f3 0017                          ___awtoft@c 0009  
                     __end_of_Rcmd1 EB78                       __end_of_Rcmd3 EA68  
                    __pcstackCOMRAM 0001                       __end_of_font2 FF98  
                       ?_Night_Mode 0001                      drawPixel@color 0009  
            __size_of_write_command 0010                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0019                             ??_Rcmd1 000D  
                           ??_Rcmd3 000D                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT DCF0                   __end_of_OpenUSART DF8A  
                 __end_of_Set_NS_LT DD78                __size_of_PED_Control 0076  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
         __size_of_Wait_Half_Second 001A                     spiwrite@spidata 0002  
                 ?_update_LCD_color 0033                   ?_update_LCD_count 003A  
                           ?_Set_EW 0001                             ?_Set_NS 0001  
                __CFG_CCP2MX$PORTBE 000000                  ??_update_LCD_color 0034  
                ??_update_LCD_count 003B                             ?___ftge 0001  
                           ?___wmul 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA           update_LCD_PED_Count@count 003A  
                         ?___awtoft 0009                           ?___ftpack 0001  
                   _Wait_One_Second E082                          _fillCircle DE10  
                           ?_strcpy 0001                             ?_strlen 0001  
                 ??_Activate_Buzzer 0001                          _fillScreen DA26  
                        _drawCircle EF84                          ??_Day_Mode 0040  
                         ?_delay_ms 0007                           ?_fillRect 0013  
         update_LCD_count@direction 003B                           ?_drawChar 001E  
                           _SSPCON1 000FC6                           ?_drawRect 0013  
                           _SSPSTAT 000FC7               __end_of_fillRectangle E7B6  
                         ?_drawtext 0029                             _SW_EWLT 0072  
                           _SW_MODE 0074                          ??_Init_ADC 0001  
                           _SW_NSLT 0075                          ??_Rcmd2red 0004  
               __size_of_Night_Mode 00A6                       _write_command D976  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0044                     __size_of_Set_NS 0044  
             __end_of_drawFastHLine E214                   __end_of_drawPixel DB3C  
             __end_of_drawFastVLine E18C                    _fillCircleHelper EB78  
                   __size_of___ftge 0096                             ___awdiv E214  
                           ___awmod E000                             ___ftdiv E894  
                   __size_of___wmul 0028               __size_of_get_full_ADC 0026  
                         ?_spiwrite 0001                             __pcinit DC26  
                        ??___awtoft 000C                          ??___ftpack 0006  
                           __ramtop 1000                             __ptext0 E3E6  
                           __ptext1 D9E2                             __ptext2 DF1A  
                           __ptext3 D9CE                             __ptext4 E340  
                           __ptext5 F69E                             __ptext6 DA26  
                           __ptext7 E6DA                             __ptext8 DEB4  
                           __ptext9 E18C                   __end_of_init_UART D9F6  
                         _T0CONbits 000FD5                     __size_of_strcpy 0032  
                   __size_of_strlen 003E                             _init_IO D9CE  
                         _T3CONbits 000FB1                    ___awmod@dividend 0001  
                        ??_delay_ms 0009                       drawtext@_text 002A  
                     drawtext@color 002C                          ??_fillRect 0018  
                        ??_drawChar 0025                           _LCD_Reset D9A8  
                        ??_drawRect 001D                       _setAddrWindow DDC2  
                drawFastHLine@color 000A                          delay_ms@ms 0007  
              end_of_initialization DC5E                          ??_drawtext 0031  
                    ?_write_command 0001                       __Lmediumconst FDBC  
                         _PED_Count 0071                        _get_full_ADC DA66  
                      PED_Control@i 003E       __size_of_update_LCD_PED_Count 00C4  
           __end_of_Wait_One_Second E104                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 0001  
                           strlen@s 0001                     fillCircle@color 0031  
                       ?_fillCircle 002B                           _PORTAbits 000F80  
                  drawtext@cursor_x 0039                    drawtext@cursor_y 0038  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0014                         ?_drawCircle 000C  
                        drawChar@bg 0022                           _TRISCbits 000F94  
                    ?_setAddrWindow 0004                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 003D                    drawtext@textsize 0033  
          __size_of_update_LCD_misc 020A                          drawPixel@x 000B  
                        drawPixel@y 0008                    _Wait_Half_Second DA0C  
                       ___ftdiv@exp 001A                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 003C                  get_full_ADC@result 0005  
                    __end_of_Set_EW DCAC                      __end_of_Set_NS DD34  
                    __end_of___ftge E340                      __end_of___wmul DAB4  
                     delay_ms@count 000B                          _write_data D986  
                     __pidataCOMRAM DA43                        ??_Night_Mode 003F  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 002E  
                    __end_of_strcpy DB6E                      __end_of_strlen DBE8  
               start_initialization DC26                   __size_of_Day_Mode 00C2  
                   ??_write_command 0003                           _Set_EW_LT DCAC  
                         _OpenUSART DF1A                           _Set_NS_LT DD34  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode E3E6  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 003E                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0036                            ??_Set_NS 0036  
                   _Activate_Buzzer D996                    ?_Wait_One_Second 0001  
                          ??___ftge 0007                            ??___wmul 0005  
                 update_LCD_misc@ch 003A                     setAddrWindow@x0 0007  
                   setAddrWindow@x1 0005                     setAddrWindow@y0 0004  
                   setAddrWindow@y1 0006                            ??_strcpy 0005  
                          ??_strlen 0003                        _PED_EW_Count 004F  
         __size_of_update_LCD_color 0362           __size_of_update_LCD_count 017E  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0065                       ??_PED_Control 003D  
                   ??_setAddrWindow 0007                        _PED_NS_Count 0052  
                       ??_LCD_Reset 000D            __end_of_fillCircleHelper ECB0  
                 __size_of_delay_ms 0052          ?_Wait_One_Second_With_Beep 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_Set_EW_LT 0001                          ?_OpenUSART 0001  
                 __size_of_drawRect 0066                          ?_Set_NS_LT 0001  
                 __size_of_drawtext 00DE                   ??_update_LCD_misc 003A  
   __end_of_TFT_GreenTab_Initialize DADE                       __pmediumconst FDBC  
                          ?___awdiv 0001                            ?___awmod 0001  
                          ?___ftdiv 000D                           __tft_type 0077  
                         _direction 007A                  drawFastVLine@color 000A  
                       ?_write_data 0001                           _drawPixel DB0C  
                 __size_of_spiwrite 0014                            ?_init_IO 0001  
                 _Initialize_Screen F69E                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART D9E2  
                ?_Initialize_Screen 0001                            _FLASHING 006F  
 __end_of_Wait_One_Second_With_Beep DA0C                 __end_of_PED_Control E000  
           __end_of_Activate_Buzzer D9A8                      ___wmul@product 0005  
               ??_Initialize_Screen 003A                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 0046                           fillRect@h 0015  
                         fillRect@i 001C                           fillRect@w 0014  
                         fillRect@x 001B                           fillRect@y 0013  
                         drawChar@c 001F                           drawChar@i 0028  
                         drawChar@j 0027                        ??_fillCircle 0033  
                         drawChar@x 0026                           drawChar@y 001E  
                        ?_drawPixel 0008              __size_of_fillRectangle 00DC  
                          _NS_Count 004C                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second DA26                   ___wmul@multiplier 0001  
         __end_of_Initialize_Screen FDBC                        ??_fillScreen 0016  
                         drawRect@h 0019                           drawRect@w 0017  
                         drawRect@x 0013                           drawRect@y 0015  
                     _FlashingR_Txt 0057                       _FlashingS_Txt 0059  
                 PED_Control@i_1376 003F                        ??_drawCircle 0014  
      __end_of_update_LCD_PED_Count E614                           main@nStep 0040  
                          _SW_EWPED 0073               update_LCD_color@color 0033  
                          _Day_Mode E48E                            _SW_NSPED 0076  
         update_LCD_color@direction 0034                          ?_init_UART 0001  
            __size_of_drawFastHLine 0088                           copy_data0 DC52  
                         drawtext@i 0036              __size_of_drawFastVLine 0088  
                         drawtext@x 0035                           drawtext@y 0029  
                          _Init_ADC D968                   write_command@cmd_ 0003  
                       ??_Set_EW_LT 0036                         ??_OpenUSART 0003  
                       ??_Set_NS_LT 0036                            _Rcmd2red DBE8  
               __size_of_write_data 0010                     OpenUSART@config 0003  
                __end_of_fillCircle DE62                            __Hrparam 0000  
                __end_of_fillScreen DA42               update_LCD_count@count 003A  
                          __Lrparam 0000                  __end_of_drawCircle F132  
                  __size_of___awdiv 0096                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                            ___awtoft DB6E  
                          ___ftpack E614                    _update_LCD_color F33C  
                  _update_LCD_count EE06                    __size_of_init_IO 0014  
                       _PED_Control DF8A                            _delay_ms DE62  
                          __ptext10 DAB4                            __ptext11 E976  
                          __ptext20 E082                            __ptext12 DBE8  
                          __ptext21 F132                            __ptext13 EA68  
                          __ptext30 DCAC                            __ptext22 DA66  
                          __ptext14 D9A8                            __ptext31 DC68  
                          __ptext23 E2AA                            __ptext15 DE62  
                          __ptext40 ECB0                            __ptext32 F33C  
                          __ptext24 E894                            __ptext16 D968  
                          __ptext41 DD78                            __ptext33 DE10  
                          __ptext25 DB6E                            __ptext17 E48E  
                          __ptext50 E214                            __ptext42 E104  
                          __ptext34 EB78                            __ptext26 E614  
                          __ptext18 DADE                            __ptext51 D9F6  
                          __ptext43 DB0C                            __ptext35 EF84  
                          __ptext27 DB3C                            __ptext19 EE06  
                          __ptext52 DA0C                            __ptext44 DDC2  
                          __ptext36 DF8A                            __ptext28 DD34  
                          __ptext53 D960                            __ptext45 D986  
                          __ptext37 E550                            __ptext29 DCF0  
                          __ptext54 D996                            __ptext46 D976  
                          __ptext38 E7B6                            __ptext47 D9BA  
                          __ptext39 DBAA                            __ptext48 DA8C  
                          __ptext49 E000                            _fillRect DD78  
                          _drawChar ECB0                            _drawRect DEB4  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 0070  
                          _colstart 0078                            _drawtext E7B6  
                        strcpy@from 0003                       _fillRectangle E6DA  
                  ?_Activate_Buzzer 0001                       __size_of_main 00A8  
                   fillRectangle@hi 0011                     fillRectangle@lo 0012  
                     _drawFastHLine E18C                      Set_EW_LT@color 0036  
                     _drawFastVLine E104                            _spiwrite D9BA  
                       ??_drawPixel 000B                            _rowstart 007B  
                fillCircleHelper@x0 0013                  fillCircleHelper@y0 0015  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 0001                         ??_init_UART 0004  
                        _EWLT_Count 0043                   ?_fillCircleHelper 0013  
                         spiwrite@x 0001         ??_Wait_One_Second_With_Beep 0001  
                   _update_LCD_misc F132                      ?_fillRectangle 0008  
                ??_fillCircleHelper 001F               __end_of_write_command D986  
                   fillScreen@color 0014                update_LCD_misc@nStep 003B  
              _update_LCD_PED_Count E550             __size_of_Wait_N_Seconds 002E  
                      fillCircle@x0 002B                        fillCircle@y0 002D  
                    ?_drawFastHLine 0008                      fillRectangle@h 000A  
                    fillRectangle@w 0009                      fillRectangle@x 0013  
                    fillRectangle@y 0008                      ?_drawFastVLine 0008  
                 fillCircleHelper@f 0025                   fillCircleHelper@r 0017  
                 fillCircleHelper@x 0027                   fillCircleHelper@y 0029  
                      ??_write_data 0003                       fillRect@color 0016  
          __size_of_Wait_One_Second 0082                            strcpy@cp 0005  
                          strlen@cp 0005                            strcpy@to 0001  
                        _NSLT_Count 0049                         fillCircle@r 002F  
             __end_of_setAddrWindow DE10                  fillRectangle@color 000B  
                     drawChar@color 0020                  __end_of_write_data D996  
                      drawChar@line 0025                      Set_NS_LT@color 0036  
                     ?_get_full_ADC 0001                        drawChar@size 0024  
             ?_update_LCD_PED_Count 003A  
