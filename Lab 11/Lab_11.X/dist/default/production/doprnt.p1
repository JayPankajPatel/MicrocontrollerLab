Version 3.2 HI-TECH Software Intermediate Code
"10 C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdarg.h
[v ___va_start `(*v ~T0 @X0 0 ef ]
[p i ___va_start ]
"24 C:\Program Files (x86)\Microchip\xc8\v1.34\include\conio.h
[v _putch `(v ~T0 @X0 0 ef1`uc ]
"7 C:\Program Files (x86)\Microchip\xc8\v1.34\include\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
[; ;stdio.h: 8: typedef int ptrdiff_t;
[; ;stdio.h: 9: typedef unsigned size_t;
[; ;stdio.h: 10: typedef unsigned short wchar_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 24: extern int errno;
[; ;stdio.h: 55: struct __prbuf
[; ;stdio.h: 56: {
[; ;stdio.h: 57: char * ptr;
[; ;stdio.h: 58: void (* func)(char);
[; ;stdio.h: 59: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 100: extern int cprintf(char *, ...);
[; ;stdio.h: 105: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 195: extern char * gets(char *);
[; ;stdio.h: 196: extern int puts(const char *);
[; ;stdio.h: 197: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 198: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 199: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 200: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 201: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 202: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 206: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 207: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 87: extern void * malloc(size_t);
[; ;stdlib.h: 88: extern void free(void *);
[; ;stdlib.h: 89: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 98: extern int atexit(void (*)(void));
[; ;stdlib.h: 99: extern char * getenv(const char *);
[; ;stdlib.h: 100: extern char ** environ;
[; ;stdlib.h: 101: extern int system(char *);
[; ;stdlib.h: 102: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 103: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 104: extern int abs(int);
[; ;stdlib.h: 105: extern long labs(long);
[; ;stdlib.h: 108: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 109: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 114: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 115: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 117: extern char * ftoa(float f, int * status);
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 42: extern char * strcat(char *, const char *);
[; ;string.h: 43: extern char * strcpy(char *, const char *);
[; ;string.h: 44: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 45: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 46: extern char * strdup(const char *);
[; ;string.h: 47: extern char * strtok(char *, const char *);
[; ;string.h: 50: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 51: extern int strcmp(const char *, const char *);
[; ;string.h: 52: extern int stricmp(const char *, const char *);
[; ;string.h: 53: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 54: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 55: extern void * memchr(const void *, int, size_t);
[; ;string.h: 56: extern size_t strcspn(const char *, const char *);
[; ;string.h: 57: extern char * strpbrk(const char *, const char *);
[; ;string.h: 58: extern size_t strspn(const char *, const char *);
[; ;string.h: 59: extern char * strstr(const char *, const char *);
[; ;string.h: 60: extern char * stristr(const char *, const char *);
[; ;string.h: 61: extern char * strerror(int);
[; ;string.h: 62: extern size_t strlen(const char *);
[; ;string.h: 63: extern char * strchr(const char *, int);
[; ;string.h: 64: extern char * strichr(const char *, int);
[; ;string.h: 65: extern char * strrchr(const char *, int);
[; ;string.h: 66: extern char * strrichr(const char *, int);
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;sys.h: 17: extern int errno;
[; ;sys.h: 30: extern int execl(char *, char *, ...);
[; ;sys.h: 31: extern int execv(char *, char **);
[; ;sys.h: 32: extern int execve(char *, char **, char **);
[; ;sys.h: 33: extern int execle(char *, char *, ...);
[; ;sys.h: 34: extern int execvp(char *, char **);
[; ;sys.h: 35: extern int execlp(char *, char *, ...);
[; ;sys.h: 36: extern int getpid(void);
[; ;sys.h: 37: extern char * mktemp(char *);
[; ;sys.h: 51: extern int spawnl(char *, char *, ...);
[; ;sys.h: 52: extern int spawnv(char *, char **);
[; ;sys.h: 53: extern int spawnle(char *, char *, ...);
[; ;sys.h: 54: extern int spawnve(char *, char **, char **);
[; ;sys.h: 55: extern int spawnlp(char *, char *, ...);
[; ;sys.h: 56: extern int spawnvp(char *, char **);
[; ;sys.h: 58: extern int chdir(char *);
[; ;sys.h: 59: extern int chdrv(char *);
[; ;sys.h: 60: extern int mkdir(char *);
[; ;sys.h: 61: extern int rmdir(char *);
[; ;sys.h: 62: extern char * getcwd(char *);
[; ;sys.h: 63: extern void persist_validate(void);
[; ;sys.h: 64: extern int persist_check(int);
[; ;sys.h: 65: extern char * getdrv(void);
[; ;sys.h: 66: extern char ** _getargs(char *, char *);
[; ;sys.h: 67: extern int _argc_;
[; ;sys.h: 78: extern void * sbrk(size_t);
[; ;sys.h: 79: extern void brk(void *);
[; ;sys.h: 85: extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
[; ;sys.h: 86: extern int _fnum(double, short, short, short, struct __prbuf *, short);
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
"13 C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c
[p n 350 ]
"354
[v _dpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> 1 `i `ui
-> -> 10 `i `ui
-> -> 100 `i `ui
-> -> 1000 `i `ui
-> -> 10000 `i `ui
..
]
[; ;doprnt.c: 354: const static unsigned int dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 359: };
"362
[v _hexpowers `Cui ~T0 @X0 -> 0 `x s ]
[i _hexpowers
:U ..
-> -> 1 `i `ui
-> -> 16 `i `ui
-> -> 256 `i `ui
-> -> 4096 `i `ui
..
]
[; ;doprnt.c: 362: const static unsigned int hexpowers[] = {1, 0x10, 0x100, 0x1000,
[; ;doprnt.c: 366: };
"464
[v _printf `(i ~T0 @X0 1 ev`*Cuc ]
"465
{
[; ;doprnt.c: 455: int
[; ;doprnt.c: 464: printf(const char * f, ...)
[; ;doprnt.c: 465: {
[e :U _printf ]
"464
[v _f `*Cuc ~T0 @X0 1 r0 ]
"465
[f ]
"466
[v _ap `*v ~T0 @X0 -> -> 1 `i `ux a ]
"499
[v _c `c ~T0 @X0 1 a ]
"501
[v _width `i ~T0 @X0 1 a ]
"506
[v _prec `c ~T0 @X0 1 a ]
"508
[v _flag `uc ~T0 @X0 1 a ]
"523
[u S6 `ul 1 `d 1 ]
[n S6 . vd integ ]
"526
[v _tmpval `S6 ~T0 @X0 1 a ]
"528
[v _val `ui ~T0 @X0 1 a ]
"529
[v _len `ui ~T0 @X0 1 a ]
"530
[v _cp `*Cuc ~T0 @X0 1 a ]
[; ;doprnt.c: 466: va_list ap;
[; ;doprnt.c: 499: signed char c;
[; ;doprnt.c: 501: int width;
[; ;doprnt.c: 506: signed char prec;
[; ;doprnt.c: 508: unsigned char flag;
[; ;doprnt.c: 523: union {
[; ;doprnt.c: 524: unsigned long vd;
[; ;doprnt.c: 525: double integ;
[; ;doprnt.c: 526: } tmpval;
[; ;doprnt.c: 528: unsigned int val;
[; ;doprnt.c: 529: unsigned len;
[; ;doprnt.c: 530: const char * cp;
[; ;doprnt.c: 533: *ap = __va_start();
"533
[e = *U &U _ap ( ___va_start ..  ]
[; ;doprnt.c: 536: while(c = *f++) {
"536
[e $U 8  ]
[e :U 9 ]
{
[; ;doprnt.c: 538: if(c != '%')
"538
[e $ ! != -> -> _c `i `ui -> 37 `ui 11  ]
[; ;doprnt.c: 540: {
"540
{
[; ;doprnt.c: 541: (putch(c) );
"541
[e ( _putch (1 -> _c `uc ]
[; ;doprnt.c: 542: continue;
"542
[e $U 8  ]
"543
}
[e :U 11 ]
[; ;doprnt.c: 543: }
[; ;doprnt.c: 546: width = 0;
"546
[e = _width -> 0 `i ]
[; ;doprnt.c: 548: flag = 0;
"548
[e = _flag -> -> 0 `i `uc ]
[; ;doprnt.c: 550: for(;;) {
"550
{
[e :U 12 ]
{
[; ;doprnt.c: 551: switch(*f) {
"551
[e $U 16  ]
{
[; ;doprnt.c: 579: case '0':
"579
[e :U 17 ]
[; ;doprnt.c: 580: flag |= 0x04;
"580
[e =| _flag -> -> 4 `i `uc ]
[; ;doprnt.c: 581: f++;
"581
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 582: continue;
"582
[e $U 14  ]
"584
}
[; ;doprnt.c: 584: }
[e $U 15  ]
"551
[e :U 16 ]
[e [\ *U _f , $ -> -> 48 `ui `uc 17
 15 ]
"584
[e :U 15 ]
[; ;doprnt.c: 585: break;
"585
[e $U 13  ]
"586
}
[e :U 14 ]
[; ;doprnt.c: 586: }
[e $U 12  ]
[e :U 13 ]
}
[; ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
"597
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 18  ]
{
[; ;doprnt.c: 598: width = 0;
"598
[e = _width -> 0 `i ]
[; ;doprnt.c: 599: do {
"599
[e :U 21 ]
{
[; ;doprnt.c: 600: width *= 10;
"600
[e =* _width -> 10 `i ]
[; ;doprnt.c: 601: width += *f++ - '0';
"601
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"602
}
[; ;doprnt.c: 602: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 21  ]
[e :U 20 ]
"608
}
[e :U 18 ]
[; ;doprnt.c: 608: }
[; ;doprnt.c: 635: switch(c = *f++) {
"635
[e $U 23  ]
{
[; ;doprnt.c: 637: case 0:
"637
[e :U 24 ]
[; ;doprnt.c: 638: goto alldone;
"638
[e $U 25  ]
[; ;doprnt.c: 697: case 'd':
"697
[e :U 26 ]
"698
[e :U 27 ]
[; ;doprnt.c: 698: case 'i':
[; ;doprnt.c: 699: break;
"699
[e $U 22  ]
[; ;doprnt.c: 718: case 'x':
"718
[e :U 28 ]
[; ;doprnt.c: 721: flag |= 0x80;
"721
[e =| _flag -> -> 128 `i `uc ]
[; ;doprnt.c: 723: break;
"723
[e $U 22  ]
[; ;doprnt.c: 802: default:
"802
[e :U 29 ]
[; ;doprnt.c: 813: continue;
"813
[e $U 8  ]
"822
}
[; ;doprnt.c: 822: }
[e $U 22  ]
"635
[e :U 23 ]
[e [\ = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c , $ -> -> 0 `i `c 24
 , $ -> -> 100 `ui `c 26
 , $ -> -> 105 `ui `c 27
 , $ -> -> 120 `ui `c 28
 29 ]
"822
[e :U 22 ]
[; ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
"1251
[e $ ! == & -> _flag `i -> 128 `i -> 0 `i 30  ]
[; ;doprnt.c: 1253: {
"1253
{
[; ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
"1259
[e = _val -> *U -> ( ___va_arg , (. -> *U -> &U _ap `**i `*v -> 0 `i `*i `ui ]
[; ;doprnt.c: 1261: if((int)val < 0) {
"1261
[e $ ! < -> _val `i -> 0 `i 31  ]
{
[; ;doprnt.c: 1262: flag |= 0x03;
"1262
[e =| _flag -> -> 3 `i `uc ]
[; ;doprnt.c: 1263: val = -val;
"1263
[e = _val -U _val ]
"1264
}
[e :U 31 ]
"1266
}
[; ;doprnt.c: 1264: }
[; ;doprnt.c: 1266: }
[e $U 32  ]
"1268
[e :U 30 ]
[; ;doprnt.c: 1268: else
[; ;doprnt.c: 1273: {
"1273
{
[; ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
"1286
[e = _val *U -> ( ___va_arg , (. -> *U -> &U _ap `**ui `*v -> -> 0 `i `ui `*ui ]
"1287
}
[e :U 32 ]
[; ;doprnt.c: 1287: }
[; ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
"1294
[e $U 34  ]
{
[; ;doprnt.c: 1299: case 0x00:
"1299
[e :U 35 ]
[; ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1305
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 36  ]
[e $U 37  ]
"1306
[e :U 36 ]
[; ;doprnt.c: 1306: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 39  ]
[; ;doprnt.c: 1307: break;
"1307
[e $U 37  ]
[e :U 39 ]
"1305
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 36  ]
[e :U 37 ]
"1309
}
[; ;doprnt.c: 1309: break;
[e $U 33  ]
[; ;doprnt.c: 1314: case 0x80:
"1314
[e :U 40 ]
[; ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
"1316
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 41  ]
[e $U 42  ]
"1317
[e :U 41 ]
[; ;doprnt.c: 1317: if(val < hexpowers[c])
[e $ ! < _val *U + &U _hexpowers * -> -> _c `uc `ux -> -> # *U &U _hexpowers `ui `ux 44  ]
[; ;doprnt.c: 1318: break;
"1318
[e $U 42  ]
[e :U 44 ]
"1316
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 41  ]
[e :U 42 ]
"1320
}
[; ;doprnt.c: 1320: break;
[e $U 33  ]
"1336
}
[; ;doprnt.c: 1336: }
[e $U 33  ]
"1294
[e :U 34 ]
[e [\ -> & -> _flag `i -> 128 `i `uc , $ -> -> 0 `i `uc 35
 , $ -> -> 128 `i `uc 40
 33 ]
"1336
[e :U 33 ]
[; ;doprnt.c: 1345: if(width && flag & 0x03)
"1345
[e $ ! && != _width -> 0 `i != & -> _flag `i -> 3 `i -> 0 `i 45  ]
[; ;doprnt.c: 1346: width--;
"1346
[e -- _width -> 1 `i ]
[e :U 45 ]
[; ;doprnt.c: 1381: if(width > c)
"1381
[e $ ! > _width -> _c `i 46  ]
[; ;doprnt.c: 1382: width -= c;
"1382
[e =- _width -> _c `i ]
[e $U 47  ]
"1383
[e :U 46 ]
[; ;doprnt.c: 1383: else
[; ;doprnt.c: 1384: width = 0;
"1384
[e = _width -> 0 `i ]
[e :U 47 ]
[; ;doprnt.c: 1387: if(flag & 0x04) {
"1387
[e $ ! != & -> _flag `i -> 4 `i -> 0 `i 48  ]
{
[; ;doprnt.c: 1392: if(flag & 0x03)
"1392
[e $ ! != & -> _flag `i -> 3 `i -> 0 `i 49  ]
[; ;doprnt.c: 1393: (putch('-') );
"1393
[e ( _putch (1 -> -> 45 `ui `uc ]
[e :U 49 ]
[; ;doprnt.c: 1415: if(width)
"1415
[e $ ! != _width -> 0 `i 50  ]
[; ;doprnt.c: 1416: do
"1416
[e :U 53 ]
[; ;doprnt.c: 1417: (putch('0') );
"1417
[e ( _putch (1 -> -> 48 `ui `uc ]
[; ;doprnt.c: 1418: while(--width);
"1418
[e $ != =- _width -> 1 `i -> 0 `i 53  ]
[e :U 52 ]
[e :U 50 ]
"1420
}
[; ;doprnt.c: 1420: } else
[e $U 54  ]
[e :U 48 ]
[; ;doprnt.c: 1422: {
"1422
{
[; ;doprnt.c: 1424: if(width
[; ;doprnt.c: 1428: )
"1428
[e $ ! != _width -> 0 `i 55  ]
[; ;doprnt.c: 1429: do
"1429
[e :U 58 ]
[; ;doprnt.c: 1430: (putch(' ') );
"1430
[e ( _putch (1 -> -> 32 `ui `uc ]
[; ;doprnt.c: 1431: while(--width);
"1431
[e $ != =- _width -> 1 `i -> 0 `i 58  ]
[e :U 57 ]
[e :U 55 ]
[; ;doprnt.c: 1438: if(flag & 0x03)
"1438
[e $ ! != & -> _flag `i -> 3 `i -> 0 `i 59  ]
[; ;doprnt.c: 1439: (putch('-') );
"1439
[e ( _putch (1 -> -> 45 `ui `uc ]
[e :U 59 ]
"1469
}
[e :U 54 ]
[; ;doprnt.c: 1469: }
[; ;doprnt.c: 1472: prec = c;
"1472
[e = _prec _c ]
[; ;doprnt.c: 1474: while(prec--) {
"1474
[e $U 60  ]
[e :U 61 ]
{
[; ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
"1476
[e $U 64  ]
[; ;doprnt.c: 1478: {
"1478
{
[; ;doprnt.c: 1483: case 0x00:
"1483
[e :U 65 ]
[; ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
"1489
[e = _c -> + % / _val *U + &U _dpowers * -> -> _prec `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> 10 `i `ui -> 48 `ui `c ]
[; ;doprnt.c: 1491: break;
"1491
[e $U 63  ]
[; ;doprnt.c: 1497: case 0x80:
"1497
[e :U 66 ]
[; ;doprnt.c: 1499: {
"1499
{
"1500
[v _idx `uc ~T0 @X0 1 a ]
[; ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
[e = _idx -> & / _val *U + &U _hexpowers * -> -> _prec `uc `ux -> -> # *U &U _hexpowers `ui `ux -> -> 15 `i `ui `uc ]
[; ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
"1506
[e = _c -> *U + :s 1C * -> _idx `ux -> -> # *U :s 1C `ui `ux `c ]
"1508
}
[; ;doprnt.c: 1508: }
[; ;doprnt.c: 1510: break;
"1510
[e $U 63  ]
"1523
}
[; ;doprnt.c: 1523: }
[e $U 63  ]
"1476
[e :U 64 ]
[e [\ -> & -> _flag `i -> 128 `i `uc , $ -> -> 0 `i `uc 65
 , $ -> -> 128 `i `uc 66
 63 ]
"1523
[e :U 63 ]
[; ;doprnt.c: 1524: (putch(c) );
"1524
[e ( _putch (1 -> _c `uc ]
"1525
}
[e :U 60 ]
"1474
[e $ != -> -- _prec -> -> 1 `i `c `i -> -> -> 0 `i `c `i 61  ]
[e :U 62 ]
"1533
}
[e :U 8 ]
"536
[e $ != -> = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c `i -> -> -> 0 `i `c `i 9  ]
[e :U 10 ]
[; ;doprnt.c: 1525: }
[; ;doprnt.c: 1533: }
[; ;doprnt.c: 1535: alldone:
"1535
[e :U 25 ]
[; ;doprnt.c: 1540: return 0;
"1540
[e ) -> 0 `i ]
[e $UE 7  ]
[; ;doprnt.c: 1541: }
"1541
[e :UE 7 ]
}
[a 1C 48 49 50 51 52 53 54 55 56 57 97 98 99 100 101 102 0 ]

