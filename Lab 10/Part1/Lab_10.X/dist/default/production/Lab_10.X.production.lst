

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 28 15:24:32 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  001AC6                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _tempSecond
    86  001AC6  FF                 	db	255
    87                           
    88                           ;initializer for _wrap
    89  001AC7  01                 	db	1
    90                           
    91                           	psect	idataBANK0
    92  001692                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _color
    96  001692  F800               	dw	63488
    97  001694  F800               	dw	63488
    98  001696  F800               	dw	63488
    99  001698  001F               	dw	31
   100  00169A  001F               	dw	31
   101  00169C  07E0               	dw	2016
   102  00169E  F81F               	dw	63519
   103  0016A0  F81F               	dw	63519
   104  0016A2  F81F               	dw	63519
   105  0016A4  0000               	dw	0
   106  0016A6  0000               	dw	0
   107  0016A8  0000               	dw	0
   108  0016AA  0000               	dw	0
   109  0016AC  0000               	dw	0
   110  0016AE  0000               	dw	0
   111  0016B0  0000               	dw	0
   112  0016B2  0000               	dw	0
   113  0016B4  0000               	dw	0
   114  0016B6  0000               	dw	0
   115  0016B8  0000               	dw	0
   116  0016BA  0000               	dw	0
   117                           
   118                           ;initializer for _array1
   119  0016BC  A2                 	db	162
   120  0016BD  62                 	db	98
   121  0016BE  E2                 	db	226
   122  0016BF  22                 	db	34
   123  0016C0  02                 	db	2
   124  0016C1  C2                 	db	194
   125  0016C2  E0                 	db	224
   126  0016C3  A8                 	db	168
   127  0016C4  90                 	db	144
   128  0016C5  68                 	db	104
   129  0016C6  98                 	db	152
   130  0016C7  B0                 	db	176
   131  0016C8  30                 	db	48
   132  0016C9  18                 	db	24
   133  0016CA  7A                 	db	122
   134  0016CB  10                 	db	16
   135  0016CC  38                 	db	56
   136  0016CD  5A                 	db	90
   137  0016CE  42                 	db	66
   138  0016CF  4A                 	db	74
   139  0016D0  52                 	db	82
   140                           
   141                           	psect	idataBANK1
   142  0014BA                     __pidataBANK1:
   143                           	opt stack 0
   144                           
   145                           ;initializer for _txt1
   146  0014BA  43                 	db	67
   147  0014BB  48                 	db	72
   148  0014BC  2D                 	db	45
   149  0014BD  00                 	db	0
   150  0014BE  43                 	db	67
   151  0014BF  48                 	db	72
   152  0014C0  00                 	db	0
   153  0014C1  00                 	db	0
   154  0014C2  43                 	db	67
   155  0014C3  48                 	db	72
   156  0014C4  2B                 	db	43
   157  0014C5  00                 	db	0
   158  0014C6  7C                 	db	124
   159  0014C7  3C                 	db	60
   160  0014C8  3C                 	db	60
   161  0014C9  00                 	db	0
   162  0014CA  3E                 	db	62
   163  0014CB  3E                 	db	62
   164  0014CC  7C                 	db	124
   165  0014CD  00                 	db	0
   166  0014CE  3E                 	db	62
   167  0014CF  7C                 	db	124
   168  0014D0  7C                 	db	124
   169  0014D1  00                 	db	0
   170  0014D2  20                 	db	32
   171  0014D3  2D                 	db	45
   172  0014D4  20                 	db	32
   173  0014D5  00                 	db	0
   174  0014D6  20                 	db	32
   175  0014D7  2B                 	db	43
   176  0014D8  20                 	db	32
   177  0014D9  00                 	db	0
   178  0014DA  45                 	db	69
   179  0014DB  51                 	db	81
   180  0014DC  20                 	db	32
   181  0014DD  00                 	db	0
   182  0014DE  20                 	db	32
   183  0014DF  30                 	db	48
   184  0014E0  20                 	db	32
   185  0014E1  00                 	db	0
   186  0014E2  31                 	db	49
   187  0014E3  30                 	db	48
   188  0014E4  30                 	db	48
   189  0014E5  00                 	db	0
   190  0014E6  32                 	db	50
   191  0014E7  30                 	db	48
   192  0014E8  30                 	db	48
   193  0014E9  00                 	db	0
   194  0014EA  20                 	db	32
   195  0014EB  31                 	db	49
   196  0014EC  20                 	db	32
   197  0014ED  00                 	db	0
   198  0014EE  20                 	db	32
   199  0014EF  32                 	db	50
   200  0014F0  20                 	db	32
   201  0014F1  00                 	db	0
   202  0014F2  20                 	db	32
   203  0014F3  33                 	db	51
   204  0014F4  20                 	db	32
   205  0014F5  00                 	db	0
   206  0014F6  20                 	db	32
   207  0014F7  34                 	db	52
   208  0014F8  20                 	db	32
   209  0014F9  00                 	db	0
   210  0014FA  20                 	db	32
   211  0014FB  35                 	db	53
   212  0014FC  20                 	db	32
   213  0014FD  00                 	db	0
   214  0014FE  20                 	db	32
   215  0014FF  36                 	db	54
   216  001500  20                 	db	32
   217  001501  00                 	db	0
   218  001502  20                 	db	32
   219  001503  37                 	db	55
   220  001504  20                 	db	32
   221  001505  00                 	db	0
   222  001506  20                 	db	32
   223  001507  38                 	db	56
   224  001508  20                 	db	32
   225  001509  00                 	db	0
   226  00150A  20                 	db	32
   227  00150B  39                 	db	57
   228  00150C  20                 	db	32
   229  00150D  00                 	db	0
   230                           
   231                           	psect	mediumconst
   232  00FD4A                     __pmediumconst:
   233                           	opt stack 0
   234  00FD4A  00                 	db	0
   235  00FD4B                     _font:
   236                           	opt stack 0
   237  00FD4B  00                 	db	0
   238  00FD4C  00                 	db	0
   239  00FD4D  00                 	db	0
   240  00FD4E  00                 	db	0
   241  00FD4F  00                 	db	0
   242  00FD50  00                 	db	0
   243  00FD51  00                 	db	0
   244  00FD52  5F                 	db	95
   245  00FD53  00                 	db	0
   246  00FD54  00                 	db	0
   247  00FD55  00                 	db	0
   248  00FD56  07                 	db	7
   249  00FD57  00                 	db	0
   250  00FD58  07                 	db	7
   251  00FD59  00                 	db	0
   252  00FD5A  14                 	db	20
   253  00FD5B  7F                 	db	127
   254  00FD5C  14                 	db	20
   255  00FD5D  7F                 	db	127
   256  00FD5E  14                 	db	20
   257  00FD5F  24                 	db	36
   258  00FD60  2A                 	db	42
   259  00FD61  7F                 	db	127
   260  00FD62  2A                 	db	42
   261  00FD63  12                 	db	18
   262  00FD64  23                 	db	35
   263  00FD65  13                 	db	19
   264  00FD66  08                 	db	8
   265  00FD67  64                 	db	100
   266  00FD68  62                 	db	98
   267  00FD69  36                 	db	54
   268  00FD6A  49                 	db	73
   269  00FD6B  56                 	db	86
   270  00FD6C  20                 	db	32
   271  00FD6D  50                 	db	80
   272  00FD6E  00                 	db	0
   273  00FD6F  08                 	db	8
   274  00FD70  07                 	db	7
   275  00FD71  03                 	db	3
   276  00FD72  00                 	db	0
   277  00FD73  00                 	db	0
   278  00FD74  1C                 	db	28
   279  00FD75  22                 	db	34
   280  00FD76  41                 	db	65
   281  00FD77  00                 	db	0
   282  00FD78  00                 	db	0
   283  00FD79  41                 	db	65
   284  00FD7A  22                 	db	34
   285  00FD7B  1C                 	db	28
   286  00FD7C  00                 	db	0
   287  00FD7D  2A                 	db	42
   288  00FD7E  1C                 	db	28
   289  00FD7F  7F                 	db	127
   290  00FD80  1C                 	db	28
   291  00FD81  2A                 	db	42
   292  00FD82  08                 	db	8
   293  00FD83  08                 	db	8
   294  00FD84  3E                 	db	62
   295  00FD85  08                 	db	8
   296  00FD86  08                 	db	8
   297  00FD87  00                 	db	0
   298  00FD88  80                 	db	128
   299  00FD89  70                 	db	112
   300  00FD8A  30                 	db	48
   301  00FD8B  00                 	db	0
   302  00FD8C  08                 	db	8
   303  00FD8D  08                 	db	8
   304  00FD8E  08                 	db	8
   305  00FD8F  08                 	db	8
   306  00FD90  08                 	db	8
   307  00FD91  00                 	db	0
   308  00FD92  00                 	db	0
   309  00FD93  60                 	db	96
   310  00FD94  60                 	db	96
   311  00FD95  00                 	db	0
   312  00FD96  20                 	db	32
   313  00FD97  10                 	db	16
   314  00FD98  08                 	db	8
   315  00FD99  04                 	db	4
   316  00FD9A  02                 	db	2
   317  00FD9B  3E                 	db	62
   318  00FD9C  51                 	db	81
   319  00FD9D  49                 	db	73
   320  00FD9E  45                 	db	69
   321  00FD9F  3E                 	db	62
   322  00FDA0  00                 	db	0
   323  00FDA1  42                 	db	66
   324  00FDA2  7F                 	db	127
   325  00FDA3  40                 	db	64
   326  00FDA4  00                 	db	0
   327  00FDA5  72                 	db	114
   328  00FDA6  49                 	db	73
   329  00FDA7  49                 	db	73
   330  00FDA8  49                 	db	73
   331  00FDA9  46                 	db	70
   332  00FDAA  21                 	db	33
   333  00FDAB  41                 	db	65
   334  00FDAC  49                 	db	73
   335  00FDAD  4D                 	db	77
   336  00FDAE  33                 	db	51
   337  00FDAF  18                 	db	24
   338  00FDB0  14                 	db	20
   339  00FDB1  12                 	db	18
   340  00FDB2  7F                 	db	127
   341  00FDB3  10                 	db	16
   342  00FDB4  27                 	db	39
   343  00FDB5  45                 	db	69
   344  00FDB6  45                 	db	69
   345  00FDB7  45                 	db	69
   346  00FDB8  39                 	db	57
   347  00FDB9  3C                 	db	60
   348  00FDBA  4A                 	db	74
   349  00FDBB  49                 	db	73
   350  00FDBC  49                 	db	73
   351  00FDBD  31                 	db	49
   352  00FDBE  41                 	db	65
   353  00FDBF  21                 	db	33
   354  00FDC0  11                 	db	17
   355  00FDC1  09                 	db	9
   356  00FDC2  07                 	db	7
   357  00FDC3  36                 	db	54
   358  00FDC4  49                 	db	73
   359  00FDC5  49                 	db	73
   360  00FDC6  49                 	db	73
   361  00FDC7  36                 	db	54
   362  00FDC8  46                 	db	70
   363  00FDC9  49                 	db	73
   364  00FDCA  49                 	db	73
   365  00FDCB  29                 	db	41
   366  00FDCC  1E                 	db	30
   367  00FDCD  00                 	db	0
   368  00FDCE  00                 	db	0
   369  00FDCF  14                 	db	20
   370  00FDD0  00                 	db	0
   371  00FDD1  00                 	db	0
   372  00FDD2  00                 	db	0
   373  00FDD3  40                 	db	64
   374  00FDD4  34                 	db	52
   375  00FDD5  00                 	db	0
   376  00FDD6  00                 	db	0
   377  00FDD7  00                 	db	0
   378  00FDD8  08                 	db	8
   379  00FDD9  14                 	db	20
   380  00FDDA  22                 	db	34
   381  00FDDB  41                 	db	65
   382  00FDDC  14                 	db	20
   383  00FDDD  14                 	db	20
   384  00FDDE  14                 	db	20
   385  00FDDF  14                 	db	20
   386  00FDE0  14                 	db	20
   387  00FDE1  00                 	db	0
   388  00FDE2  41                 	db	65
   389  00FDE3  22                 	db	34
   390  00FDE4  14                 	db	20
   391  00FDE5  08                 	db	8
   392  00FDE6  02                 	db	2
   393  00FDE7  01                 	db	1
   394  00FDE8  59                 	db	89
   395  00FDE9  09                 	db	9
   396  00FDEA  06                 	db	6
   397  00FDEB  3E                 	db	62
   398  00FDEC  41                 	db	65
   399  00FDED  5D                 	db	93
   400  00FDEE  59                 	db	89
   401  00FDEF  4E                 	db	78
   402  00FDF0  7C                 	db	124
   403  00FDF1  12                 	db	18
   404  00FDF2  11                 	db	17
   405  00FDF3  12                 	db	18
   406  00FDF4  7C                 	db	124
   407  00FDF5  7F                 	db	127
   408  00FDF6  49                 	db	73
   409  00FDF7  49                 	db	73
   410  00FDF8  49                 	db	73
   411  00FDF9  36                 	db	54
   412  00FDFA  3E                 	db	62
   413  00FDFB  41                 	db	65
   414  00FDFC  41                 	db	65
   415  00FDFD  41                 	db	65
   416  00FDFE  22                 	db	34
   417  00FDFF  7F                 	db	127
   418  00FE00  41                 	db	65
   419  00FE01  41                 	db	65
   420  00FE02  41                 	db	65
   421  00FE03  3E                 	db	62
   422  00FE04  7F                 	db	127
   423  00FE05  49                 	db	73
   424  00FE06  49                 	db	73
   425  00FE07  49                 	db	73
   426  00FE08  41                 	db	65
   427  00FE09  7F                 	db	127
   428  00FE0A  09                 	db	9
   429  00FE0B  09                 	db	9
   430  00FE0C  09                 	db	9
   431  00FE0D  01                 	db	1
   432  00FE0E  3E                 	db	62
   433  00FE0F  41                 	db	65
   434  00FE10  41                 	db	65
   435  00FE11  51                 	db	81
   436  00FE12  73                 	db	115
   437  00FE13  7F                 	db	127
   438  00FE14  08                 	db	8
   439  00FE15  08                 	db	8
   440  00FE16  08                 	db	8
   441  00FE17  7F                 	db	127
   442  00FE18  00                 	db	0
   443  00FE19  41                 	db	65
   444  00FE1A  7F                 	db	127
   445  00FE1B  41                 	db	65
   446  00FE1C  00                 	db	0
   447  00FE1D  20                 	db	32
   448  00FE1E  40                 	db	64
   449  00FE1F  41                 	db	65
   450  00FE20  3F                 	db	63
   451  00FE21  01                 	db	1
   452  00FE22  7F                 	db	127
   453  00FE23  08                 	db	8
   454  00FE24  14                 	db	20
   455  00FE25  22                 	db	34
   456  00FE26  41                 	db	65
   457  00FE27  7F                 	db	127
   458  00FE28  40                 	db	64
   459  00FE29  40                 	db	64
   460  00FE2A  40                 	db	64
   461  00FE2B  40                 	db	64
   462  00FE2C  7F                 	db	127
   463  00FE2D  02                 	db	2
   464  00FE2E  1C                 	db	28
   465  00FE2F  02                 	db	2
   466  00FE30  7F                 	db	127
   467  00FE31  7F                 	db	127
   468  00FE32  04                 	db	4
   469  00FE33  08                 	db	8
   470  00FE34  10                 	db	16
   471  00FE35  7F                 	db	127
   472  00FE36  3E                 	db	62
   473  00FE37  41                 	db	65
   474  00FE38  41                 	db	65
   475  00FE39  41                 	db	65
   476  00FE3A  3E                 	db	62
   477  00FE3B  7F                 	db	127
   478  00FE3C  09                 	db	9
   479  00FE3D  09                 	db	9
   480  00FE3E  09                 	db	9
   481  00FE3F  06                 	db	6
   482  00FE40  3E                 	db	62
   483  00FE41  41                 	db	65
   484  00FE42  51                 	db	81
   485  00FE43  21                 	db	33
   486  00FE44  5E                 	db	94
   487  00FE45  7F                 	db	127
   488  00FE46  09                 	db	9
   489  00FE47  19                 	db	25
   490  00FE48  29                 	db	41
   491  00FE49  46                 	db	70
   492  00FE4A                     __end_of_font:
   493                           	opt stack 0
   494  00FE4A                     _font2:
   495                           	opt stack 0
   496  00FE4A  26                 	db	38
   497  00FE4B  49                 	db	73
   498  00FE4C  49                 	db	73
   499  00FE4D  49                 	db	73
   500  00FE4E  32                 	db	50
   501  00FE4F  03                 	db	3
   502  00FE50  01                 	db	1
   503  00FE51  7F                 	db	127
   504  00FE52  01                 	db	1
   505  00FE53  03                 	db	3
   506  00FE54  3F                 	db	63
   507  00FE55  40                 	db	64
   508  00FE56  40                 	db	64
   509  00FE57  40                 	db	64
   510  00FE58  3F                 	db	63
   511  00FE59  1F                 	db	31
   512  00FE5A  20                 	db	32
   513  00FE5B  40                 	db	64
   514  00FE5C  20                 	db	32
   515  00FE5D  1F                 	db	31
   516  00FE5E  3F                 	db	63
   517  00FE5F  40                 	db	64
   518  00FE60  38                 	db	56
   519  00FE61  40                 	db	64
   520  00FE62  3F                 	db	63
   521  00FE63  63                 	db	99
   522  00FE64  14                 	db	20
   523  00FE65  08                 	db	8
   524  00FE66  14                 	db	20
   525  00FE67  63                 	db	99
   526  00FE68  03                 	db	3
   527  00FE69  04                 	db	4
   528  00FE6A  78                 	db	120
   529  00FE6B  04                 	db	4
   530  00FE6C  03                 	db	3
   531  00FE6D  61                 	db	97
   532  00FE6E  59                 	db	89
   533  00FE6F  49                 	db	73
   534  00FE70  4D                 	db	77
   535  00FE71  43                 	db	67
   536  00FE72  00                 	db	0
   537  00FE73  7F                 	db	127
   538  00FE74  41                 	db	65
   539  00FE75  41                 	db	65
   540  00FE76  41                 	db	65
   541  00FE77  02                 	db	2
   542  00FE78  04                 	db	4
   543  00FE79  08                 	db	8
   544  00FE7A  10                 	db	16
   545  00FE7B  20                 	db	32
   546  00FE7C  00                 	db	0
   547  00FE7D  41                 	db	65
   548  00FE7E  41                 	db	65
   549  00FE7F  41                 	db	65
   550  00FE80  7F                 	db	127
   551  00FE81  04                 	db	4
   552  00FE82  02                 	db	2
   553  00FE83  01                 	db	1
   554  00FE84  02                 	db	2
   555  00FE85  04                 	db	4
   556  00FE86  40                 	db	64
   557  00FE87  40                 	db	64
   558  00FE88  40                 	db	64
   559  00FE89  40                 	db	64
   560  00FE8A  40                 	db	64
   561  00FE8B  00                 	db	0
   562  00FE8C  03                 	db	3
   563  00FE8D  07                 	db	7
   564  00FE8E  08                 	db	8
   565  00FE8F  00                 	db	0
   566  00FE90  20                 	db	32
   567  00FE91  54                 	db	84
   568  00FE92  54                 	db	84
   569  00FE93  78                 	db	120
   570  00FE94  40                 	db	64
   571  00FE95  7F                 	db	127
   572  00FE96  28                 	db	40
   573  00FE97  44                 	db	68
   574  00FE98  44                 	db	68
   575  00FE99  38                 	db	56
   576  00FE9A  38                 	db	56
   577  00FE9B  44                 	db	68
   578  00FE9C  44                 	db	68
   579  00FE9D  44                 	db	68
   580  00FE9E  28                 	db	40
   581  00FE9F  38                 	db	56
   582  00FEA0  44                 	db	68
   583  00FEA1  44                 	db	68
   584  00FEA2  28                 	db	40
   585  00FEA3  7F                 	db	127
   586  00FEA4  38                 	db	56
   587  00FEA5  54                 	db	84
   588  00FEA6  54                 	db	84
   589  00FEA7  54                 	db	84
   590  00FEA8  18                 	db	24
   591  00FEA9  00                 	db	0
   592  00FEAA  08                 	db	8
   593  00FEAB  7E                 	db	126
   594  00FEAC  09                 	db	9
   595  00FEAD  02                 	db	2
   596  00FEAE  18                 	db	24
   597  00FEAF  A4                 	db	164
   598  00FEB0  A4                 	db	164
   599  00FEB1  9C                 	db	156
   600  00FEB2  78                 	db	120
   601  00FEB3  7F                 	db	127
   602  00FEB4  08                 	db	8
   603  00FEB5  04                 	db	4
   604  00FEB6  04                 	db	4
   605  00FEB7  78                 	db	120
   606  00FEB8  00                 	db	0
   607  00FEB9  44                 	db	68
   608  00FEBA  7D                 	db	125
   609  00FEBB  40                 	db	64
   610  00FEBC  00                 	db	0
   611  00FEBD  20                 	db	32
   612  00FEBE  40                 	db	64
   613  00FEBF  40                 	db	64
   614  00FEC0  3D                 	db	61
   615  00FEC1  00                 	db	0
   616  00FEC2  7F                 	db	127
   617  00FEC3  10                 	db	16
   618  00FEC4  28                 	db	40
   619  00FEC5  44                 	db	68
   620  00FEC6  00                 	db	0
   621  00FEC7  00                 	db	0
   622  00FEC8  41                 	db	65
   623  00FEC9  7F                 	db	127
   624  00FECA  40                 	db	64
   625  00FECB  00                 	db	0
   626  00FECC  7C                 	db	124
   627  00FECD  04                 	db	4
   628  00FECE  78                 	db	120
   629  00FECF  04                 	db	4
   630  00FED0  78                 	db	120
   631  00FED1  7C                 	db	124
   632  00FED2  08                 	db	8
   633  00FED3  04                 	db	4
   634  00FED4  04                 	db	4
   635  00FED5  78                 	db	120
   636  00FED6  38                 	db	56
   637  00FED7  44                 	db	68
   638  00FED8  44                 	db	68
   639  00FED9  44                 	db	68
   640  00FEDA  38                 	db	56
   641  00FEDB  FC                 	db	252
   642  00FEDC  18                 	db	24
   643  00FEDD  24                 	db	36
   644  00FEDE  24                 	db	36
   645  00FEDF  18                 	db	24
   646  00FEE0  18                 	db	24
   647  00FEE1  24                 	db	36
   648  00FEE2  24                 	db	36
   649  00FEE3  18                 	db	24
   650  00FEE4  FC                 	db	252
   651  00FEE5  7C                 	db	124
   652  00FEE6  08                 	db	8
   653  00FEE7  04                 	db	4
   654  00FEE8  04                 	db	4
   655  00FEE9  08                 	db	8
   656  00FEEA  48                 	db	72
   657  00FEEB  54                 	db	84
   658  00FEEC  54                 	db	84
   659  00FEED  54                 	db	84
   660  00FEEE  24                 	db	36
   661  00FEEF  04                 	db	4
   662  00FEF0  04                 	db	4
   663  00FEF1  3F                 	db	63
   664  00FEF2  44                 	db	68
   665  00FEF3  24                 	db	36
   666  00FEF4  3C                 	db	60
   667  00FEF5  40                 	db	64
   668  00FEF6  40                 	db	64
   669  00FEF7  20                 	db	32
   670  00FEF8  7C                 	db	124
   671  00FEF9  1C                 	db	28
   672  00FEFA  20                 	db	32
   673  00FEFB  40                 	db	64
   674  00FEFC  20                 	db	32
   675  00FEFD  1C                 	db	28
   676  00FEFE  3C                 	db	60
   677  00FEFF  40                 	db	64
   678  00FF00  30                 	db	48
   679  00FF01  40                 	db	64
   680  00FF02  3C                 	db	60
   681  00FF03  44                 	db	68
   682  00FF04  28                 	db	40
   683  00FF05  10                 	db	16
   684  00FF06  28                 	db	40
   685  00FF07  44                 	db	68
   686  00FF08  4C                 	db	76
   687  00FF09  90                 	db	144
   688  00FF0A  90                 	db	144
   689  00FF0B  90                 	db	144
   690  00FF0C  7C                 	db	124
   691  00FF0D  44                 	db	68
   692  00FF0E  64                 	db	100
   693  00FF0F  54                 	db	84
   694  00FF10  4C                 	db	76
   695  00FF11  44                 	db	68
   696  00FF12  00                 	db	0
   697  00FF13  08                 	db	8
   698  00FF14  36                 	db	54
   699  00FF15  41                 	db	65
   700  00FF16  00                 	db	0
   701  00FF17  00                 	db	0
   702  00FF18  00                 	db	0
   703  00FF19  77                 	db	119
   704  00FF1A  00                 	db	0
   705  00FF1B  00                 	db	0
   706  00FF1C  00                 	db	0
   707  00FF1D  41                 	db	65
   708  00FF1E  36                 	db	54
   709  00FF1F  08                 	db	8
   710  00FF20  00                 	db	0
   711  00FF21  02                 	db	2
   712  00FF22  01                 	db	1
   713  00FF23  02                 	db	2
   714  00FF24  04                 	db	4
   715  00FF25  02                 	db	2
   716  00FF26                     __end_of_font2:
   717                           	opt stack 0
   718  00FF26                     _dpowers:
   719                           	opt stack 0
   720  00FF26  0001               	dw	1
   721  00FF28  0000               	dw	0
   722  00FF2A  000A               	dw	10
   723  00FF2C  0000               	dw	0
   724  00FF2E  0064               	dw	100
   725  00FF30  0000               	dw	0
   726  00FF32  03E8               	dw	1000
   727  00FF34  0000               	dw	0
   728  00FF36  2710               	dw	10000
   729  00FF38  0000               	dw	0
   730  00FF3A  86A0               	dw	34464
   731  00FF3C  0001               	dw	1
   732  00FF3E  4240               	dw	16960
   733  00FF40  000F               	dw	15
   734  00FF42  9680               	dw	38528
   735  00FF44  0098               	dw	152
   736  00FF46  E100               	dw	57600
   737  00FF48  05F5               	dw	1525
   738  00FF4A  CA00               	dw	51712
   739  00FF4C  3B9A               	dw	15258
   740  00FF4E                     __end_of_dpowers:
   741                           	opt stack 0
   742  00FF4E                     _hexpowers:
   743                           	opt stack 0
   744  00FF4E  0001               	dw	1
   745  00FF50  0000               	dw	0
   746  00FF52  0010               	dw	16
   747  00FF54  0000               	dw	0
   748  00FF56  0100               	dw	256
   749  00FF58  0000               	dw	0
   750  00FF5A  1000               	dw	4096
   751  00FF5C  0000               	dw	0
   752  00FF5E  0000               	dw	0
   753  00FF60  0001               	dw	1
   754  00FF62  0000               	dw	0
   755  00FF64  0010               	dw	16
   756  00FF66  0000               	dw	0
   757  00FF68  0100               	dw	256
   758  00FF6A  0000               	dw	0
   759  00FF6C  1000               	dw	4096
   760  00FF6E                     __end_of_hexpowers:
   761                           	opt stack 0
   762  0000                     _ADCON1	set	4033
   763  0000                     _CCP2CON	set	4026
   764  0000                     _CCPR2L	set	4027
   765  0000                     _INTCON2bits	set	4081
   766  0000                     _INTCONbits	set	4082
   767  0000                     _OSCCON	set	4051
   768  0000                     _PIE1bits	set	3997
   769  0000                     _PIR1bits	set	3998
   770  0000                     _PIR2bits	set	4001
   771  0000                     _PORTBbits	set	3969
   772  0000                     _PORTCbits	set	3970
   773  0000                     _PORTDbits	set	3971
   774  0000                     _PORTEbits	set	3972
   775  0000                     _PR2	set	4043
   776  0000                     _RCSTA	set	4011
   777  0000                     _RCSTAbits	set	4011
   778  0000                     _SPBRG	set	4015
   779  0000                     _SPBRGH	set	4016
   780  0000                     _SSPBUF	set	4041
   781  0000                     _SSPCON1	set	4038
   782  0000                     _SSPSTAT	set	4039
   783  0000                     _SSPSTATbits	set	4039
   784  0000                     _T1CON	set	4045
   785  0000                     _T1CONbits	set	4045
   786  0000                     _T2CON	set	4042
   787  0000                     _T3CON	set	4017
   788  0000                     _T3CONbits	set	4017
   789  0000                     _TMR0H	set	4055
   790  0000                     _TMR0L	set	4054
   791  0000                     _TMR1H	set	4047
   792  0000                     _TMR1L	set	4046
   793  0000                     _TRISB	set	3987
   794  0000                     _TRISC	set	3988
   795  0000                     _TRISCbits	set	3988
   796  0000                     _TRISD	set	3989
   797  0000                     _TRISE	set	3990
   798  0000                     _TXREG	set	4013
   799  0000                     _TXSTA	set	4012
   800  0000                     _TXSTAbits	set	4012
   801  0000                     _RBPU	set	32655
   802  0000                     _TRMT	set	32097
   803  00FF6E                     STR_2:
   804  00FF6E  20                 	db	32
   805  00FF6F  54                 	db	84	;'T'
   806  00FF70  65                 	db	101	;'e'
   807  00FF71  6D                 	db	109	;'m'
   808  00FF72  70                 	db	112	;'p'
   809  00FF73  65                 	db	101	;'e'
   810  00FF74  72                 	db	114	;'r'
   811  00FF75  61                 	db	97	;'a'
   812  00FF76  74                 	db	116	;'t'
   813  00FF77  75                 	db	117	;'u'
   814  00FF78  72                 	db	114	;'r'
   815  00FF79  65                 	db	101	;'e'
   816  00FF7A  20                 	db	32
   817  00FF7B  3D                 	db	61	;'='
   818  00FF7C  20                 	db	32
   819  00FF7D  25                 	db	37
   820  00FF7E  64                 	db	100	;'d'
   821  00FF7F  20                 	db	32
   822  00FF80  64                 	db	100	;'d'
   823  00FF81  65                 	db	101	;'e'
   824  00FF82  67                 	db	103	;'g'
   825  00FF83  72                 	db	114	;'r'
   826  00FF84  65                 	db	101	;'e'
   827  00FF85  65                 	db	101	;'e'
   828  00FF86  73                 	db	115	;'s'
   829  00FF87  43                 	db	67	;'C'
   830  00FF88  20                 	db	32
   831  00FF89  3D                 	db	61	;'='
   832  00FF8A  20                 	db	32
   833  00FF8B  25                 	db	37
   834  00FF8C  64                 	db	100	;'d'
   835  00FF8D  20                 	db	32
   836  00FF8E  64                 	db	100	;'d'
   837  00FF8F  65                 	db	101	;'e'
   838  00FF90  67                 	db	103	;'g'
   839  00FF91  72                 	db	114	;'r'
   840  00FF92  65                 	db	101	;'e'
   841  00FF93  65                 	db	101	;'e'
   842  00FF94  73                 	db	115	;'s'
   843  00FF95  46                 	db	70	;'F'
   844  00FF96  0D                 	db	13
   845  00FF97  0A                 	db	10
   846  00FF98  00                 	db	0
   847  00FF99                     STR_1:
   848  00FF99  25                 	db	37
   849  00FF9A  30                 	db	48	;'0'
   850  00FF9B  32                 	db	50	;'2'
   851  00FF9C  78                 	db	120	;'x'
   852  00FF9D  3A                 	db	58	;':'
   853  00FF9E  25                 	db	37
   854  00FF9F  30                 	db	48	;'0'
   855  00FFA0  32                 	db	50	;'2'
   856  00FFA1  78                 	db	120	;'x'
   857  00FFA2  3A                 	db	58	;':'
   858  00FFA3  25                 	db	37
   859  00FFA4  30                 	db	48	;'0'
   860  00FFA5  32                 	db	50	;'2'
   861  00FFA6  78                 	db	120	;'x'
   862  00FFA7  20                 	db	32
   863  00FFA8  25                 	db	37
   864  00FFA9  30                 	db	48	;'0'
   865  00FFAA  32                 	db	50	;'2'
   866  00FFAB  78                 	db	120	;'x'
   867  00FFAC  2F                 	db	47
   868  00FFAD  25                 	db	37
   869  00FFAE  30                 	db	48	;'0'
   870  00FFAF  32                 	db	50	;'2'
   871  00FFB0  78                 	db	120	;'x'
   872  00FFB1  2F                 	db	47
   873  00FFB2  25                 	db	37
   874  00FFB3  30                 	db	48	;'0'
   875  00FFB4  32                 	db	50	;'2'
   876  00FFB5  78                 	db	120	;'x'
   877  00FFB6  00                 	db	0
   878  00FFB7                     STR_3:
   879  00FFB7  4E                 	db	78	;'N'
   880  00FFB8  45                 	db	69	;'E'
   881  00FFB9  43                 	db	67	;'C'
   882  00FFBA  5F                 	db	95	;'_'
   883  00FFBB  43                 	db	67	;'C'
   884  00FFBC  6F                 	db	111	;'o'
   885  00FFBD  64                 	db	100	;'d'
   886  00FFBE  65                 	db	101	;'e'
   887  00FFBF  20                 	db	32
   888  00FFC0  3D                 	db	61	;'='
   889  00FFC1  20                 	db	32
   890  00FFC2  25                 	db	37
   891  00FFC3  30                 	db	48	;'0'
   892  00FFC4  38                 	db	56	;'8'
   893  00FFC5  6C                 	db	108	;'l'
   894  00FFC6  78                 	db	120	;'x'
   895  00FFC7  20                 	db	32
   896  00FFC8  25                 	db	37
   897  00FFC9  78                 	db	120	;'x'
   898  00FFCA  0D                 	db	13
   899  00FFCB  0A                 	db	10
   900  00FFCC  00                 	db	0
   901  00FFCD                     STR_5:
   902  00FFCD  45                 	db	69	;'E'
   903  00FFCE  43                 	db	67	;'C'
   904  00FFCF  45                 	db	69	;'E'
   905  00FFD0  33                 	db	51	;'3'
   906  00FFD1  33                 	db	51	;'3'
   907  00FFD2  30                 	db	48	;'0'
   908  00FFD3  31                 	db	49	;'1'
   909  00FFD4  4C                 	db	76	;'L'
   910  00FFD5  20                 	db	32
   911  00FFD6  46                 	db	70	;'F'
   912  00FFD7  61                 	db	97	;'a'
   913  00FFD8  6C                 	db	108	;'l'
   914  00FFD9  6C                 	db	108	;'l'
   915  00FFDA  20                 	db	32
   916  00FFDB  32                 	db	50	;'2'
   917  00FFDC  31                 	db	49	;'1'
   918  00FFDD  2D                 	db	45
   919  00FFDE  53                 	db	83	;'S'
   920  00FFDF  33                 	db	51	;'3'
   921  00FFE0  00                 	db	0
   922  00FFE1                     STR_7:
   923  00FFE1  30                 	db	48	;'0'
   924  00FFE2  31                 	db	49	;'1'
   925  00FFE3  32                 	db	50	;'2'
   926  00FFE4  33                 	db	51	;'3'
   927  00FFE5  34                 	db	52	;'4'
   928  00FFE6  35                 	db	53	;'5'
   929  00FFE7  36                 	db	54	;'6'
   930  00FFE8  37                 	db	55	;'7'
   931  00FFE9  38                 	db	56	;'8'
   932  00FFEA  39                 	db	57	;'9'
   933  00FFEB  61                 	db	97	;'a'
   934  00FFEC  62                 	db	98	;'b'
   935  00FFED  63                 	db	99	;'c'
   936  00FFEE  64                 	db	100	;'d'
   937  00FFEF  65                 	db	101	;'e'
   938  00FFF0  66                 	db	102	;'f'
   939  00FFF1  00                 	db	0
   940  00FFF2                     STR_6:
   941  00FFF2  4C                 	db	76	;'L'
   942  00FFF3  41                 	db	65	;'A'
   943  00FFF4  42                 	db	66	;'B'
   944  00FFF5  20                 	db	32
   945  00FFF6  31                 	db	49	;'1'
   946  00FFF7  30                 	db	48	;'0'
   947  00FFF8  20                 	db	32
   948  00FFF9  00                 	db	0
   949  00FFFA                     STR_4:
   950  00FFFA  45                 	db	69	;'E'
   951  00FFFB  51                 	db	81	;'Q'
   952  00FFFC  20                 	db	32
   953  00FFFD  00                 	db	0
   954  00FFFE  00                 	db	0
   955                           
   956                           ; #config settings
   957  00FFFF  00                 	db	0	; dummy byte at the end
   958  0000                     
   959                           	psect	cinit
   960  001296                     __pcinit:
   961                           	opt stack 0
   962  001296                     start_initialization:
   963                           	opt stack 0
   964  001296                     __initialization:
   965                           	opt stack 0
   966                           
   967                           ; Clear objects allocated to BANK0 (31 bytes)
   968  001296  EE00  F0BF         	lfsr	0,__pbssBANK0
   969  00129A  0E1F               	movlw	31
   970  00129C                     clear_0:
   971  00129C  6AEE               	clrf	postinc0,c
   972  00129E  06E8               	decf	wreg,f,c
   973  0012A0  E1FD               	bnz	clear_0
   974                           
   975                           ; Clear objects allocated to COMRAM (40 bytes)
   976  0012A2  EE00  F046         	lfsr	0,__pbssCOMRAM
   977  0012A6  0E28               	movlw	40
   978  0012A8                     clear_1:
   979  0012A8  6AEE               	clrf	postinc0,c
   980  0012AA  06E8               	decf	wreg,f,c
   981  0012AC  E1FD               	bnz	clear_1
   982                           
   983                           ; Initialize objects allocated to BANK1 (84 bytes)
   984                           ; load TBLPTR registers with __pidataBANK1
   985  0012AE  0EBA               	movlw	low __pidataBANK1
   986  0012B0  6EF6               	movwf	tblptrl,c
   987  0012B2  0E14               	movlw	high __pidataBANK1
   988  0012B4  6EF7               	movwf	tblptrh,c
   989  0012B6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   990  0012B8  6EF8               	movwf	tblptru,c
   991  0012BA  EE01  F000         	lfsr	0,__pdataBANK1
   992  0012BE  EE10 F054          	lfsr	1,84
   993  0012C2                     copy_data0:
   994  0012C2  0009               	tblrd		*+
   995  0012C4  CFF5 FFEE          	movff	tablat,postinc0
   996  0012C8  50E5               	movf	postdec1,w,c
   997  0012CA  50E1               	movf	fsr1l,w,c
   998  0012CC  E1FA               	bnz	copy_data0
   999                           
  1000                           ; Initialize objects allocated to BANK0 (63 bytes)
  1001                           ; load TBLPTR registers with __pidataBANK0
  1002  0012CE  0E92               	movlw	low __pidataBANK0
  1003  0012D0  6EF6               	movwf	tblptrl,c
  1004  0012D2  0E16               	movlw	high __pidataBANK0
  1005  0012D4  6EF7               	movwf	tblptrh,c
  1006  0012D6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1007  0012D8  6EF8               	movwf	tblptru,c
  1008  0012DA  EE00  F080         	lfsr	0,__pdataBANK0
  1009  0012DE  EE10 F03F          	lfsr	1,63
  1010  0012E2                     copy_data1:
  1011  0012E2  0009               	tblrd		*+
  1012  0012E4  CFF5 FFEE          	movff	tablat,postinc0
  1013  0012E8  50E5               	movf	postdec1,w,c
  1014  0012EA  50E1               	movf	fsr1l,w,c
  1015  0012EC  E1FA               	bnz	copy_data1
  1016                           
  1017                           ; Initialize objects allocated to COMRAM (2 bytes)
  1018                           ; load TBLPTR registers with __pidataCOMRAM
  1019  0012EE  0EC6               	movlw	low __pidataCOMRAM
  1020  0012F0  6EF6               	movwf	tblptrl,c
  1021  0012F2  0E1A               	movlw	high __pidataCOMRAM
  1022  0012F4  6EF7               	movwf	tblptrh,c
  1023  0012F6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1024  0012F8  6EF8               	movwf	tblptru,c
  1025  0012FA  0009               	tblrd		*+	;fetch initializer
  1026  0012FC  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1027  001300  0009               	tblrd		*+	;fetch initializer
  1028  001302  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
  1029  001306                     end_of_initialization:
  1030                           	opt stack 0
  1031  001306                     __end_of__initialization:
  1032                           	opt stack 0
  1033  001306  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1034  001308  6EF8               	movwf	tblptru,c
  1035  00130A  0100               	movlb	0
  1036  00130C  EF2F  F002         	goto	_main	;jump to C main() function
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postdec1	equ	0xFE5
  1044                           fsr1l	equ	0xFE1
  1045                           
  1046                           	psect	bssCOMRAM
  1047  000046                     __pbssCOMRAM:
  1048                           	opt stack 0
  1049  000046                     _Nec_code:
  1050                           	opt stack 0
  1051  000046                     	ds	4
  1052  00004A                     _Time_Elapsed:
  1053                           	opt stack 0
  1054  00004A                     	ds	2
  1055  00004C                     _nbr:
  1056                           	opt stack 0
  1057  00004C                     	ds	2
  1058  00004E                     _nec_ok:
  1059                           	opt stack 0
  1060  00004E                     	ds	2
  1061  000050                     _txt:
  1062                           	opt stack 0
  1063  000050                     	ds	2
  1064  000052                     _Nec_code1:
  1065                           	opt stack 0
  1066  000052                     	ds	1
  1067  000053                     _Nec_state:
  1068                           	opt stack 0
  1069  000053                     	ds	1
  1070  000054                     _TempSecond:
  1071                           	opt stack 0
  1072  000054                     	ds	1
  1073  000055                     __tft_type:
  1074                           	opt stack 0
  1075  000055                     	ds	1
  1076  000056                     _alarm_date:
  1077                           	opt stack 0
  1078  000056                     	ds	1
  1079  000057                     _alarm_hour:
  1080                           	opt stack 0
  1081  000057                     	ds	1
  1082  000058                     _alarm_minute:
  1083                           	opt stack 0
  1084  000058                     	ds	1
  1085  000059                     _alarm_second:
  1086                           	opt stack 0
  1087  000059                     	ds	1
  1088  00005A                     _bit_count:
  1089                           	opt stack 0
  1090  00005A                     	ds	1
  1091  00005B                     _colstart:
  1092                           	opt stack 0
  1093  00005B                     	ds	1
  1094  00005C                     _day:
  1095                           	opt stack 0
  1096  00005C                     	ds	1
  1097  00005D                     _dow:
  1098                           	opt stack 0
  1099  00005D                     	ds	1
  1100  00005E                     _found:
  1101                           	opt stack 0
  1102  00005E                     	ds	1
  1103  00005F                     _hour:
  1104                           	opt stack 0
  1105  00005F                     	ds	1
  1106  000060                     _minute:
  1107                           	opt stack 0
  1108  000060                     	ds	1
  1109  000061                     _month:
  1110                           	opt stack 0
  1111  000061                     	ds	1
  1112  000062                     _rowstart:
  1113                           	opt stack 0
  1114  000062                     	ds	1
  1115  000063                     _second:
  1116                           	opt stack 0
  1117  000063                     	ds	1
  1118  000064                     _setup_alarm_hour:
  1119                           	opt stack 0
  1120  000064                     	ds	1
  1121  000065                     _setup_alarm_minute:
  1122                           	opt stack 0
  1123  000065                     	ds	1
  1124  000066                     _setup_alarm_second:
  1125                           	opt stack 0
  1126  000066                     	ds	1
  1127  000067                     _setup_day:
  1128                           	opt stack 0
  1129  000067                     	ds	1
  1130  000068                     _setup_hour:
  1131                           	opt stack 0
  1132  000068                     	ds	1
  1133  000069                     _setup_minute:
  1134                           	opt stack 0
  1135  000069                     	ds	1
  1136  00006A                     _setup_month:
  1137                           	opt stack 0
  1138  00006A                     	ds	1
  1139  00006B                     _setup_second:
  1140                           	opt stack 0
  1141  00006B                     	ds	1
  1142  00006C                     _setup_year:
  1143                           	opt stack 0
  1144  00006C                     	ds	1
  1145  00006D                     _year:
  1146                           	opt stack 0
  1147  00006D                     	ds	1
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1l	equ	0xFE1
  1156                           
  1157                           	psect	dataCOMRAM
  1158  00006E                     __pdataCOMRAM:
  1159                           	opt stack 0
  1160  00006E                     _tempSecond:
  1161                           	opt stack 0
  1162  00006E                     	ds	1
  1163  00006F                     _wrap:
  1164                           	opt stack 0
  1165  00006F                     	ds	1
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           fsr1l	equ	0xFE1
  1174                           
  1175                           	psect	bssBANK0
  1176  0000BF                     __pbssBANK0:
  1177                           	opt stack 0
  1178  0000BF                     _buffer:
  1179                           	opt stack 0
  1180  0000BF                     	ds	31
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           postinc0	equ	0xFEE
  1186                           wreg	equ	0xFE8
  1187                           postdec1	equ	0xFE5
  1188                           fsr1l	equ	0xFE1
  1189                           
  1190                           	psect	dataBANK0
  1191  000080                     __pdataBANK0:
  1192                           	opt stack 0
  1193  000080                     _color:
  1194                           	opt stack 0
  1195  000080                     	ds	42
  1196  0000AA                     _array1:
  1197                           	opt stack 0
  1198  0000AA                     	ds	21
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           postinc0	equ	0xFEE
  1204                           wreg	equ	0xFE8
  1205                           postdec1	equ	0xFE5
  1206                           fsr1l	equ	0xFE1
  1207                           
  1208                           	psect	dataBANK1
  1209  000100                     __pdataBANK1:
  1210                           	opt stack 0
  1211  000100                     _txt1:
  1212                           	opt stack 0
  1213  000100                     	ds	84
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           tblptrl	equ	0xFF6
  1217                           tablat	equ	0xFF5
  1218                           postinc0	equ	0xFEE
  1219                           wreg	equ	0xFE8
  1220                           postdec1	equ	0xFE5
  1221                           fsr1l	equ	0xFE1
  1222                           
  1223                           	psect	cstackBANK0
  1224  0000DE                     __pcstackBANK0:
  1225                           	opt stack 0
  1226  0000DE                     drawtext@x:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x0
  1230  0000DE                     	ds	1
  1231  0000DF                     drawtext@textsize:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x1
  1235  0000DF                     	ds	2
  1236  0000E1                     drawtext@i:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x3
  1240  0000E1                     	ds	2
  1241  0000E3                     drawtext@cursor_y:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x5
  1245  0000E3                     	ds	1
  1246  0000E4                     drawtext@cursor_x:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x6
  1250  0000E4                     	ds	1
  1251  0000E5                     ??_main:
  1252                           
  1253                           ; 0 bytes @ 0x7
  1254  0000E5                     	ds	2
  1255  0000E7                     main@tempF:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x9
  1259  0000E7                     	ds	1
  1260  0000E8                     main@tempC:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0xA
  1264  0000E8                     	ds	1
  1265  0000E9                     main@i:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0xB
  1269  0000E9                     	ds	2
  1270  0000EB                     main@found:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0xD
  1274  0000EB                     	ds	1
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           postinc0	equ	0xFEE
  1280                           wreg	equ	0xFE8
  1281                           postdec1	equ	0xFE5
  1282                           fsr1l	equ	0xFE1
  1283                           
  1284                           	psect	cstackCOMRAM
  1285  000001                     __pcstackCOMRAM:
  1286                           	opt stack 0
  1287  000001                     ??_INT0_isr:
  1288  000001                     
  1289                           ; 1 bytes @ 0x0
  1290  000001                     	ds	2
  1291  000003                     ??_chkisr:
  1292                           
  1293                           ; 0 bytes @ 0x2
  1294  000003                     	ds	14
  1295  000011                     ??_isdigit:
  1296  000011                     ?_strlen:
  1297                           	opt stack 0
  1298  000011                     ?___wmul:
  1299                           	opt stack 0
  1300  000011                     ?___lldiv:
  1301                           	opt stack 0
  1302  000011                     putch@c:
  1303                           	opt stack 0
  1304  000011                     I2C_Read@ack:
  1305                           	opt stack 0
  1306  000011                     I2C_Write@outByte:
  1307                           	opt stack 0
  1308  000011                     spiwrite@x:
  1309                           	opt stack 0
  1310  000011                     waitHalfSecond@i:
  1311                           	opt stack 0
  1312  000011                     OpenUSART@spbrg:
  1313                           	opt stack 0
  1314  000011                     ___wmul@multiplier:
  1315                           	opt stack 0
  1316  000011                     strcpy@to:
  1317                           	opt stack 0
  1318  000011                     strlen@s:
  1319                           	opt stack 0
  1320  000011                     I2C_Init@c:
  1321                           	opt stack 0
  1322  000011                     ___lldiv@dividend:
  1323                           	opt stack 0
  1324                           
  1325                           ; 4 bytes @ 0x10
  1326  000011                     	ds	1
  1327  000012                     I2C_Read@n:
  1328                           	opt stack 0
  1329  000012                     I2C_Write@n:
  1330                           	opt stack 0
  1331  000012                     spiwrite@spidata:
  1332                           	opt stack 0
  1333  000012                     _isdigit$2148:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x11
  1337  000012                     	ds	1
  1338  000013                     ??_strlen:
  1339  000013                     I2C_Read@inByte:
  1340                           	opt stack 0
  1341  000013                     I2C_Write_Cmd_Only@Cmd:
  1342                           	opt stack 0
  1343  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1344                           	opt stack 0
  1345  000013                     DS3231_Setup_Time@Device:
  1346                           	opt stack 0
  1347  000013                     write_command@cmd_:
  1348                           	opt stack 0
  1349  000013                     write_data@data_:
  1350                           	opt stack 0
  1351  000013                     OpenUSART@config:
  1352                           	opt stack 0
  1353  000013                     isdigit@c:
  1354                           	opt stack 0
  1355  000013                     ___wmul@multiplicand:
  1356                           	opt stack 0
  1357  000013                     strcpy@from:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0x12
  1361  000013                     	ds	1
  1362  000014                     I2C_Write_Cmd_Only@Device:
  1363                           	opt stack 0
  1364  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1365                           	opt stack 0
  1366  000014                     DS1621_Read_Temp@Cmd:
  1367                           	opt stack 0
  1368  000014                     DS3231_Read_Time@Address:
  1369                           	opt stack 0
  1370  000014                     DS3231_Setup_Time@Address:
  1371                           	opt stack 0
  1372  000014                     setAddrWindow@y0:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x13
  1376  000014                     	ds	1
  1377  000015                     I2C_Write_Cmd_Write_Data@Device:
  1378                           	opt stack 0
  1379  000015                     DS1621_Read_Temp@Data_Ret:
  1380                           	opt stack 0
  1381  000015                     DS3231_Read_Time@Device:
  1382                           	opt stack 0
  1383  000015                     setAddrWindow@x1:
  1384                           	opt stack 0
  1385  000015                     ___wmul@product:
  1386                           	opt stack 0
  1387  000015                     strcpy@cp:
  1388                           	opt stack 0
  1389  000015                     strlen@cp:
  1390                           	opt stack 0
  1391  000015                     ___lldiv@divisor:
  1392                           	opt stack 0
  1393                           
  1394                           ; 4 bytes @ 0x14
  1395  000015                     	ds	1
  1396  000016                     DS1621_Init@Device:
  1397                           	opt stack 0
  1398  000016                     DS1621_Read_Temp@Device:
  1399                           	opt stack 0
  1400  000016                     setAddrWindow@y1:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x15
  1404  000016                     	ds	1
  1405  000017                     ?___awdiv:
  1406                           	opt stack 0
  1407  000017                     setAddrWindow@x0:
  1408                           	opt stack 0
  1409  000017                     delay_ms@ms:
  1410                           	opt stack 0
  1411  000017                     ___awdiv@dividend:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x16
  1415  000017                     	ds	1
  1416  000018                     drawPixel@y:
  1417                           	opt stack 0
  1418  000018                     drawFastVLine@y:
  1419                           	opt stack 0
  1420  000018                     fillRectangle@y:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x17
  1424  000018                     	ds	1
  1425  000019                     ??_delay_ms:
  1426  000019                     drawFastVLine@h:
  1427                           	opt stack 0
  1428  000019                     fillRectangle@w:
  1429                           	opt stack 0
  1430  000019                     drawPixel@color:
  1431                           	opt stack 0
  1432  000019                     ___awdiv@divisor:
  1433                           	opt stack 0
  1434  000019                     ___lldiv@quotient:
  1435                           	opt stack 0
  1436                           
  1437                           ; 4 bytes @ 0x18
  1438  000019                     	ds	1
  1439  00001A                     fillRectangle@h:
  1440                           	opt stack 0
  1441  00001A                     drawFastVLine@color:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x19
  1445  00001A                     	ds	1
  1446  00001B                     drawPixel@x:
  1447                           	opt stack 0
  1448  00001B                     ___awdiv@counter:
  1449                           	opt stack 0
  1450  00001B                     delay_ms@count:
  1451                           	opt stack 0
  1452  00001B                     fillRectangle@color:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x1A
  1456  00001B                     	ds	1
  1457  00001C                     ??_drawFastVLine:
  1458  00001C                     ___awdiv@sign:
  1459                           	opt stack 0
  1460  00001C                     drawCircle@x0:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x1B
  1464  00001C                     	ds	1
  1465  00001D                     ??_fillRectangle:
  1466  00001D                     ___lldiv@counter:
  1467                           	opt stack 0
  1468  00001D                     ___awdiv@quotient:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x1C
  1472  00001D                     	ds	1
  1473  00001E                     ?___llmod:
  1474                           	opt stack 0
  1475  00001E                     drawCircle@y0:
  1476                           	opt stack 0
  1477  00001E                     ___llmod@dividend:
  1478                           	opt stack 0
  1479                           
  1480                           ; 4 bytes @ 0x1D
  1481  00001E                     	ds	2
  1482  000020                     drawFastVLine@hi:
  1483                           	opt stack 0
  1484  000020                     drawCircle@r:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x1F
  1488  000020                     	ds	1
  1489  000021                     drawFastVLine@lo:
  1490                           	opt stack 0
  1491  000021                     fillRectangle@hi:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x20
  1495  000021                     	ds	1
  1496  000022                     drawFastVLine@x:
  1497                           	opt stack 0
  1498  000022                     fillRectangle@lo:
  1499                           	opt stack 0
  1500  000022                     drawCircle@color:
  1501                           	opt stack 0
  1502  000022                     ___llmod@divisor:
  1503                           	opt stack 0
  1504                           
  1505                           ; 4 bytes @ 0x21
  1506  000022                     	ds	1
  1507  000023                     fillRect@y:
  1508                           	opt stack 0
  1509  000023                     fillRectangle@x:
  1510                           	opt stack 0
  1511  000023                     fillCircleHelper@x0:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x22
  1515  000023                     	ds	1
  1516  000024                     ??_drawCircle:
  1517  000024                     fillRect@w:
  1518                           	opt stack 0
  1519  000024                     fillScreen@color:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x23
  1523  000024                     	ds	1
  1524  000025                     fillRect@h:
  1525                           	opt stack 0
  1526  000025                     fillCircleHelper@y0:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x24
  1530  000025                     	ds	1
  1531  000026                     ___llmod@counter:
  1532                           	opt stack 0
  1533  000026                     fillRect@color:
  1534                           	opt stack 0
  1535  000026                     drawCircle@ddF_x:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x25
  1539  000026                     	ds	1
  1540  000027                     ?_printf:
  1541                           	opt stack 0
  1542  000027                     fillCircleHelper@r:
  1543                           	opt stack 0
  1544  000027                     printf@f:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x26
  1548  000027                     	ds	1
  1549  000028                     ??_fillRect:
  1550  000028                     drawCircle@ddF_y:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x27
  1554  000028                     	ds	1
  1555  000029                     fillCircleHelper@cornername:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x28
  1559  000029                     	ds	1
  1560  00002A                     drawCircle@f:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x29
  1564  00002A                     	ds	1
  1565  00002B                     fillRect@x:
  1566                           	opt stack 0
  1567  00002B                     fillCircleHelper@delta:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x2A
  1571  00002B                     	ds	1
  1572  00002C                     fillRect@i:
  1573                           	opt stack 0
  1574  00002C                     drawCircle@x:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x2B
  1578  00002C                     	ds	1
  1579  00002D                     fillCircleHelper@color:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x2C
  1583  00002D                     	ds	1
  1584  00002E                     drawChar@y:
  1585                           	opt stack 0
  1586  00002E                     drawCircle@y:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x2D
  1590  00002E                     	ds	1
  1591  00002F                     ??_fillCircleHelper:
  1592  00002F                     drawChar@c:
  1593                           	opt stack 0
  1594                           
  1595                           ; 1 bytes @ 0x2E
  1596  00002F                     	ds	1
  1597  000030                     drawChar@color:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x2F
  1601  000030                     	ds	1
  1602  000031                     fillCircleHelper@ddF_x:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x30
  1606  000031                     	ds	1
  1607  000032                     drawChar@bg:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x31
  1611  000032                     	ds	1
  1612  000033                     fillCircleHelper@ddF_y:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x32
  1616  000033                     	ds	1
  1617  000034                     drawChar@size:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x33
  1621  000034                     	ds	1
  1622  000035                     ??_printf:
  1623  000035                     drawChar@line:
  1624                           	opt stack 0
  1625  000035                     fillCircleHelper@f:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x34
  1629  000035                     	ds	1
  1630  000036                     drawChar@x:
  1631                           	opt stack 0
  1632                           
  1633                           ; 1 bytes @ 0x35
  1634  000036                     	ds	1
  1635  000037                     drawChar@j:
  1636                           	opt stack 0
  1637  000037                     fillCircleHelper@x:
  1638                           	opt stack 0
  1639                           
  1640                           ; 2 bytes @ 0x36
  1641  000037                     	ds	1
  1642  000038                     drawChar@i:
  1643                           	opt stack 0
  1644                           
  1645                           ; 1 bytes @ 0x37
  1646  000038                     	ds	1
  1647  000039                     drawtext@y:
  1648                           	opt stack 0
  1649  000039                     printf@idx:
  1650                           	opt stack 0
  1651  000039                     fillCircleHelper@y:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x38
  1655  000039                     	ds	1
  1656  00003A                     drawtext@_text:
  1657                           	opt stack 0
  1658  00003A                     printf@prec:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x39
  1662  00003A                     	ds	1
  1663  00003B                     fillCircle@x0:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x3A
  1667  00003B                     	ds	1
  1668  00003C                     drawtext@color:
  1669                           	opt stack 0
  1670  00003C                     printf@ap:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x3B
  1674  00003C                     	ds	1
  1675  00003D                     fillCircle@y0:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x3C
  1679  00003D                     	ds	1
  1680  00003E                     drawtext@bg:
  1681                           	opt stack 0
  1682  00003E                     printf@val:
  1683                           	opt stack 0
  1684                           
  1685                           ; 4 bytes @ 0x3D
  1686  00003E                     	ds	1
  1687  00003F                     fillCircle@r:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x3E
  1691  00003F                     	ds	1
  1692  000040                     drawtext@size:
  1693                           	opt stack 0
  1694                           
  1695                           ; 1 bytes @ 0x3F
  1696  000040                     	ds	1
  1697  000041                     ??_drawtext:
  1698  000041                     fillCircle@color:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x40
  1702  000041                     	ds	1
  1703  000042                     printf@width:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x41
  1707  000042                     	ds	1
  1708  000043                     
  1709                           ; 0 bytes @ 0x42
  1710  000043                     	ds	1
  1711  000044                     printf@flag:
  1712                           	opt stack 0
  1713                           
  1714                           ; 1 bytes @ 0x43
  1715  000044                     	ds	1
  1716  000045                     printf@c:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x44
  1720  000045                     	ds	1
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1l	equ	0xFE1
  1729                           
  1730 ;;
  1731 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1732 ;;
  1733 ;; *************** function _main *****************
  1734 ;; Defined at:
  1735 ;;		line 161 in file "Lab10_sample_3.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;		None
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  i               2   11[BANK0 ] int 
  1740 ;;  found           1   13[BANK0 ] unsigned char 
  1741 ;;  tempC           1   10[BANK0 ] char 
  1742 ;;  tempF           1    9[BANK0 ] char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;		None               void
  1745 ;; Registers used:
  1746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1753 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;Total ram usage:        7 bytes
  1757 ;; Hardware stack levels required when called:   11
  1758 ;; This function calls:
  1759 ;;		_DS1621_Read_Temp
  1760 ;;		_DS3231_Read_Time
  1761 ;;		_DS3231_Setup_Time
  1762 ;;		_Do_Init
  1763 ;;		_Initialize_Screen
  1764 ;;		___awdiv
  1765 ;;		___wmul
  1766 ;;		_drawCircle
  1767 ;;		_drawtext
  1768 ;;		_fillCircle
  1769 ;;		_printf
  1770 ;;		_waitHalfSecond
  1771 ;; This function is called by:
  1772 ;;		Startup code after reset
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text0
  1777  00045E                     __ptext0:
  1778                           	opt stack 0
  1779  00045E                     _main:
  1780                           	opt stack 20
  1781                           
  1782                           ;Lab10_sample_3.c: 163: Do_Init();
  1783                           
  1784                           ;incstack = 0
  1785  00045E  ECC6  F00B         	call	_Do_Init	;wreg free
  1786                           
  1787                           ;Lab10_sample_3.c: 164: Initialize_Screen();
  1788  000462  EC3C  F008         	call	_Initialize_Screen	;wreg free
  1789                           
  1790                           ;Lab10_sample_3.c: 165: DS3231_Setup_Time();
  1791  000466  ECF8  F009         	call	_DS3231_Setup_Time	;wreg free
  1792  00046A  D000               	goto	l5121
  1793  00046C                     l5121:
  1794                           
  1795                           ;Lab10_sample_3.c: 169: {
  1796                           ;Lab10_sample_3.c: 170: DS3231_Read_Time();
  1797  00046C  EC2B  F00A         	call	_DS3231_Read_Time	;wreg free
  1798                           
  1799                           ;Lab10_sample_3.c: 172: if (tempSecond != second)
  1800  000470  5063               	movf	_second,w,c
  1801  000472  186E               	xorwf	_tempSecond,w,c
  1802  000474  B4D8               	btfsc	status,2,c
  1803  000476  D04D               	goto	l5137
  1804                           
  1805                           ;Lab10_sample_3.c: 173: {
  1806                           ;Lab10_sample_3.c: 174: tempSecond = second;
  1807  000478  C063  F06E         	movff	_second,_tempSecond
  1808                           
  1809                           ;Lab10_sample_3.c: 175: signed char tempC = DS1621_Read_Temp();
  1810  00047C  ECE4  F00B         	call	_DS1621_Read_Temp	;wreg free
  1811  000480  0100               	movlb	0	; () banked
  1812  000482  6FE8               	movwf	main@tempC& (0+255),b
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;Lab10_sample_3.c: 176: signed char tempF = (tempC * 9 / 5) + 32;
  1816  000484  0100               	movlb	0	; () banked
  1817  000486  51E8               	movf	main@tempC& (0+255),w,b
  1818  000488  6E11               	movwf	___wmul@multiplier,c
  1819  00048A  6A12               	clrf	___wmul@multiplier+1,c
  1820  00048C  BE11               	btfsc	___wmul@multiplier,7,c
  1821  00048E  0612               	decf	___wmul@multiplier+1,f,c
  1822  000490  0E00               	movlw	0
  1823  000492  6E14               	movwf	___wmul@multiplicand+1,c
  1824  000494  0E09               	movlw	9
  1825  000496  6E13               	movwf	___wmul@multiplicand,c
  1826  000498  EC76  F00C         	call	___wmul	;wreg free
  1827  00049C  C011  F017         	movff	?___wmul,___awdiv@dividend
  1828  0004A0  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1829  0004A4  0E00               	movlw	0
  1830  0004A6  6E1A               	movwf	___awdiv@divisor+1,c
  1831  0004A8  0E05               	movlw	5
  1832  0004AA  6E19               	movwf	___awdiv@divisor,c
  1833  0004AC  ECF1  F007         	call	___awdiv	;wreg free
  1834  0004B0  5017               	movf	?___awdiv,w,c
  1835  0004B2  0F20               	addlw	32
  1836  0004B4  0100               	movlb	0	; () banked
  1837  0004B6  6FE7               	movwf	main@tempF& (0+255),b
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;Lab10_sample_3.c: 177: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month
      +                          ,day,year);
  1841  0004B8  0E99               	movlw	low STR_1
  1842  0004BA  6E27               	movwf	printf@f,c
  1843  0004BC  0EFF               	movlw	high STR_1
  1844  0004BE  6E28               	movwf	printf@f+1,c
  1845  0004C0  C05F  F029         	movff	_hour,?_printf+2
  1846  0004C4  6A2A               	clrf	?_printf+3,c
  1847  0004C6  C060  F02B         	movff	_minute,?_printf+4
  1848  0004CA  6A2C               	clrf	?_printf+5,c
  1849  0004CC  C063  F02D         	movff	_second,?_printf+6
  1850  0004D0  6A2E               	clrf	?_printf+7,c
  1851  0004D2  C061  F02F         	movff	_month,?_printf+8
  1852  0004D6  6A30               	clrf	?_printf+9,c
  1853  0004D8  C05C  F031         	movff	_day,?_printf+10
  1854  0004DC  6A32               	clrf	?_printf+11,c
  1855  0004DE  C06D  F033         	movff	_year,?_printf+12
  1856  0004E2  6A34               	clrf	?_printf+13,c
  1857  0004E4  EC0E  F000         	call	_printf	;wreg free
  1858                           
  1859                           ;Lab10_sample_3.c: 178: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, t
      +                          empF);
  1860  0004E8  0E6E               	movlw	low STR_2
  1861  0004EA  6E27               	movwf	printf@f,c
  1862  0004EC  0EFF               	movlw	high STR_2
  1863  0004EE  6E28               	movwf	printf@f+1,c
  1864  0004F0  0100               	movlb	0	; () banked
  1865  0004F2  51E8               	movf	main@tempC& (0+255),w,b
  1866  0004F4  6E29               	movwf	?_printf+2,c
  1867  0004F6  6A2A               	clrf	?_printf+3,c
  1868  0004F8  BE29               	btfsc	?_printf+2,7,c
  1869  0004FA  062A               	decf	?_printf+3,f,c
  1870  0004FC  0100               	movlb	0	; () banked
  1871  0004FE  51E7               	movf	main@tempF& (0+255),w,b
  1872  000500  6E2B               	movwf	?_printf+4,c
  1873  000502  6A2C               	clrf	?_printf+5,c
  1874  000504  BE2B               	btfsc	?_printf+4,7,c
  1875  000506  062C               	decf	?_printf+5,f,c
  1876  000508  EC0E  F000         	call	_printf	;wreg free
  1877                           
  1878                           ;Lab10_sample_3.c: 179: waitHalfSecond();
  1879  00050C  EC19  F00C         	call	_waitHalfSecond	;wreg free
  1880  000510  D000               	goto	l5137
  1881  000512                     l5137:
  1882                           
  1883                           ;Lab10_sample_3.c: 180: }
  1884                           ;Lab10_sample_3.c: 182: if (nec_ok == 1)
  1885  000512  044E               	decf	_nec_ok,w,c
  1886  000514  104F               	iorwf	_nec_ok+1,w,c
  1887  000516  A4D8               	btfss	status,2,c
  1888  000518  D7A9               	goto	l5121
  1889                           
  1890                           ;Lab10_sample_3.c: 183: {
  1891                           ;Lab10_sample_3.c: 184: nec_ok = 0;
  1892  00051A  0E00               	movlw	0
  1893  00051C  6E4F               	movwf	_nec_ok+1,c
  1894  00051E  0E00               	movlw	0
  1895  000520  6E4E               	movwf	_nec_ok,c
  1896                           
  1897                           ;Lab10_sample_3.c: 186: Nec_code1 = (char) ((Nec_code >> 8));
  1898  000522  C047  F052         	movff	_Nec_code+1,_Nec_code1
  1899                           
  1900                           ;Lab10_sample_3.c: 187: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  1901  000526  0EB7               	movlw	low STR_3
  1902  000528  6E27               	movwf	printf@f,c
  1903  00052A  0EFF               	movlw	high STR_3
  1904  00052C  6E28               	movwf	printf@f+1,c
  1905  00052E  C046  F029         	movff	_Nec_code,?_printf+2
  1906  000532  C047  F02A         	movff	_Nec_code+1,?_printf+3
  1907  000536  C048  F02B         	movff	_Nec_code+2,?_printf+4
  1908  00053A  C049  F02C         	movff	_Nec_code+3,?_printf+5
  1909  00053E  C052  F02D         	movff	_Nec_code1,?_printf+6
  1910  000542  6A2E               	clrf	?_printf+7,c
  1911  000544  EC0E  F000         	call	_printf	;wreg free
  1912                           
  1913                           ;Lab10_sample_3.c: 188: INTCONbits.INT0IE = 1;
  1914  000548  88F2               	bsf	intcon,4,c	;volatile
  1915                           
  1916                           ;Lab10_sample_3.c: 189: INTCON2bits.INTEDG0 = 0;
  1917  00054A  9CF1               	bcf	intcon2,6,c	;volatile
  1918                           
  1919                           ;Lab10_sample_3.c: 191: char found = 0xff;
  1920  00054C  0100               	movlb	0	; () banked
  1921  00054E  69EB               	setf	main@found& (0+255),b
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;Lab10_sample_3.c: 193: for( int i = 0; i < 21; i++ )
  1925  000550  0E00               	movlw	0
  1926  000552  0100               	movlb	0	; () banked
  1927  000554  6FEA               	movwf	(main@i+1)& (0+255),b
  1928  000556  0E00               	movlw	0
  1929  000558  6FE9               	movwf	main@i& (0+255),b
  1930  00055A                     l5153:
  1931                           
  1932                           ; BSR set to: 0
  1933  00055A  0100               	movlb	0	; () banked
  1934  00055C  BFEA               	btfsc	(main@i+1)& (0+255),7,b
  1935  00055E  D00A               	goto	l5157
  1936  000560  0100               	movlb	0	; () banked
  1937  000562  51EA               	movf	(main@i+1)& (0+255),w,b
  1938  000564  E11B               	bnz	l5165
  1939  000566  0E15               	movlw	21
  1940  000568  0100               	movlb	0	; () banked
  1941  00056A  5DE9               	subwf	main@i& (0+255),w,b
  1942  00056C  B0D8               	btfsc	status,0,c
  1943  00056E  D016               	goto	l5165
  1944  000570  D001               	goto	l5157
  1945                           
  1946                           ; BSR set to: 0
  1947  000572  D014               	goto	l5165
  1948  000574                     l5157:
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;Lab10_sample_3.c: 194: {
  1952                           ;Lab10_sample_3.c: 195: if( Nec_code1 == array1[i] )
  1953  000574  0EAA               	movlw	low _array1
  1954  000576  0100               	movlb	0	; () banked
  1955  000578  25E9               	addwf	main@i& (0+255),w,b
  1956  00057A  6ED9               	movwf	fsr2l,c
  1957  00057C  0E00               	movlw	high _array1
  1958  00057E  0100               	movlb	0	; () banked
  1959  000580  21EA               	addwfc	(main@i+1)& (0+255),w,b
  1960  000582  6EDA               	movwf	fsr2h,c
  1961  000584  5052               	movf	_Nec_code1,w,c
  1962  000586  18DE               	xorwf	postinc2,w,c
  1963  000588  A4D8               	btfss	status,2,c
  1964  00058A  D003               	goto	l5161
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;Lab10_sample_3.c: 196: {
  1968                           ;Lab10_sample_3.c: 197: found = i;
  1969  00058C  C0E9  F0EB         	movff	main@i,main@found
  1970  000590  D000               	goto	l5161
  1971  000592                     l5161:
  1972                           
  1973                           ; BSR set to: 0
  1974  000592  0100               	movlb	0	; () banked
  1975  000594  4BE9               	infsnz	main@i& (0+255),f,b
  1976  000596  2BEA               	incf	(main@i+1)& (0+255),f,b
  1977  000598  D7E0               	goto	l5153
  1978                           
  1979                           ; BSR set to: 0
  1980  00059A  D000               	goto	l5165
  1981  00059C                     l5165:
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;Lab10_sample_3.c: 198: }
  1985                           ;Lab10_sample_3.c: 200: }
  1986                           ;Lab10_sample_3.c: 203: if (found != 0xff)
  1987  00059C  0100               	movlb	0	; () banked
  1988  00059E  29EB               	incf	main@found& (0+255),w,b
  1989  0005A0  B4D8               	btfsc	status,2,c
  1990  0005A2  D046               	goto	l5175
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;Lab10_sample_3.c: 204: {
  1994                           ;Lab10_sample_3.c: 205: fillCircle(60, 80, 20, color[found]);
  1995  0005A4  0E00               	movlw	0
  1996  0005A6  6E3C               	movwf	fillCircle@x0+1,c
  1997  0005A8  0E3C               	movlw	60
  1998  0005AA  6E3B               	movwf	fillCircle@x0,c
  1999  0005AC  0E00               	movlw	0
  2000  0005AE  6E3E               	movwf	fillCircle@y0+1,c
  2001  0005B0  0E50               	movlw	80
  2002  0005B2  6E3D               	movwf	fillCircle@y0,c
  2003  0005B4  0E00               	movlw	0
  2004  0005B6  6E40               	movwf	fillCircle@r+1,c
  2005  0005B8  0E14               	movlw	20
  2006  0005BA  6E3F               	movwf	fillCircle@r,c
  2007  0005BC  0100               	movlb	0	; () banked
  2008  0005BE  51EB               	movf	main@found& (0+255),w,b
  2009  0005C0  0D02               	mullw	2
  2010  0005C2  0E80               	movlw	low _color
  2011  0005C4  24F3               	addwf	prodl,w,c
  2012  0005C6  6ED9               	movwf	fsr2l,c
  2013  0005C8  0E00               	movlw	high _color
  2014  0005CA  20F4               	addwfc	prodh,w,c
  2015  0005CC  6EDA               	movwf	fsr2h,c
  2016  0005CE  CFDE F041          	movff	postinc2,fillCircle@color
  2017  0005D2  CFDD F042          	movff	postdec2,fillCircle@color+1
  2018  0005D6  EC87  F00A         	call	_fillCircle	;wreg free
  2019                           
  2020                           ;Lab10_sample_3.c: 206: drawCircle(60, 80, 20, 0xFFFF);
  2021  0005DA  0E00               	movlw	0
  2022  0005DC  6E1D               	movwf	drawCircle@x0+1,c
  2023  0005DE  0E3C               	movlw	60
  2024  0005E0  6E1C               	movwf	drawCircle@x0,c
  2025  0005E2  0E00               	movlw	0
  2026  0005E4  6E1F               	movwf	drawCircle@y0+1,c
  2027  0005E6  0E50               	movlw	80
  2028  0005E8  6E1E               	movwf	drawCircle@y0,c
  2029  0005EA  0E00               	movlw	0
  2030  0005EC  6E21               	movwf	drawCircle@r+1,c
  2031  0005EE  0E14               	movlw	20
  2032  0005F0  6E20               	movwf	drawCircle@r,c
  2033  0005F2  0EFF               	movlw	255
  2034  0005F4  6E23               	movwf	drawCircle@color+1,c
  2035  0005F6  6822               	setf	drawCircle@color,c
  2036  0005F8  EC35  F003         	call	_drawCircle	;wreg free
  2037                           
  2038                           ;Lab10_sample_3.c: 207: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  2039  0005FC  0E4D               	movlw	77
  2040  0005FE  6E39               	movwf	drawtext@y,c
  2041  000600  0100               	movlb	0	; () banked
  2042  000602  51EB               	movf	main@found& (0+255),w,b
  2043  000604  0D04               	mullw	4
  2044  000606  0E00               	movlw	low _txt1
  2045  000608  24F3               	addwf	prodl,w,c
  2046  00060A  6E3A               	movwf	drawtext@_text,c
  2047  00060C  0E01               	movlw	high _txt1
  2048  00060E  20F4               	addwfc	prodh,w,c
  2049  000610  6E3B               	movwf	drawtext@_text+1,c
  2050  000612  0EFF               	movlw	255
  2051  000614  6E3D               	movwf	drawtext@color+1,c
  2052  000616  683C               	setf	drawtext@color,c
  2053  000618  0E00               	movlw	0
  2054  00061A  6E3F               	movwf	drawtext@bg+1,c
  2055  00061C  0E00               	movlw	0
  2056  00061E  6E3E               	movwf	drawtext@bg,c
  2057  000620  0E01               	movlw	1
  2058  000622  6E40               	movwf	drawtext@size,c
  2059  000624  0E34               	movlw	52
  2060  000626  EC85  F006         	call	_drawtext
  2061                           
  2062                           ;Lab10_sample_3.c: 208: waitHalfSecond();
  2063  00062A  EC19  F00C         	call	_waitHalfSecond	;wreg free
  2064  00062E  D000               	goto	l5175
  2065  000630                     l5175:
  2066                           
  2067                           ;Lab10_sample_3.c: 210: }
  2068                           ;Lab10_sample_3.c: 212: if (txt1[found] == "EQ \0" )
  2069  000630  0100               	movlb	0	; () banked
  2070  000632  51EB               	movf	main@found& (0+255),w,b
  2071  000634  0D04               	mullw	4
  2072  000636  0E00               	movlw	low _txt1
  2073  000638  0100               	movlb	0	; () banked
  2074  00063A  6FE5               	movwf	??_main& (0+255),b
  2075  00063C  0E01               	movlw	high _txt1
  2076  00063E  0100               	movlb	0	; () banked
  2077  000640  6FE6               	movwf	(??_main+1)& (0+255),b
  2078  000642  50F3               	movf	prodl,w,c
  2079  000644  0100               	movlb	0	; () banked
  2080  000646  27E5               	addwf	??_main& (0+255),f,b
  2081  000648  50F4               	movf	prodh,w,c
  2082  00064A  0100               	movlb	0	; () banked
  2083  00064C  23E6               	addwfc	(??_main+1)& (0+255),f,b
  2084  00064E  0EFA               	movlw	low STR_4
  2085  000650  0100               	movlb	0	; () banked
  2086  000652  19E5               	xorwf	??_main& (0+255),w,b
  2087  000654  E104               	bnz	u3841
  2088  000656  0EFF               	movlw	high STR_4
  2089  000658  0100               	movlb	0	; () banked
  2090  00065A  19E6               	xorwf	(??_main+1)& (0+255),w,b
  2091  00065C  A4D8               	btfss	status,2,c
  2092  00065E                     u3841:
  2093  00065E  D706               	goto	l5121
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;Lab10_sample_3.c: 213: {
  2097                           ;Lab10_sample_3.c: 214: DS3231_Setup_Time();
  2098  000660  ECF8  F009         	call	_DS3231_Setup_Time	;wreg free
  2099  000664  D703               	goto	l5121
  2100  000666  EF0C  F000         	goto	start
  2101  00066A                     __end_of_main:
  2102                           	opt stack 0
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           prodh	equ	0xFF4
  2108                           prodl	equ	0xFF3
  2109                           intcon	equ	0xFF2
  2110                           intcon2	equ	0xFF1
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           postdec1	equ	0xFE5
  2114                           fsr1l	equ	0xFE1
  2115                           postinc2	equ	0xFDE
  2116                           postdec2	equ	0xFDD
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _waitHalfSecond *****************
  2122 ;; Defined at:
  2123 ;;		line 262 in file "Lab10_sample_3.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  i               2   16[COMRAM] int 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;		None               void
  2130 ;; Registers used:
  2131 ;;		wreg, status,2, status,0, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;Total ram usage:        2 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    4
  2144 ;; This function calls:
  2145 ;;		_Activate_Buzzer
  2146 ;;		_Deactivate_Buzzer
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text1
  2153  001832                     __ptext1:
  2154                           	opt stack 0
  2155  001832                     _waitHalfSecond:
  2156                           	opt stack 26
  2157                           
  2158                           ;Lab10_sample_3.c: 264: PORTEbits.RE1 = 1;
  2159                           
  2160                           ;incstack = 0
  2161  001832  8284               	bsf	3972,1,c	;volatile
  2162                           
  2163                           ;Lab10_sample_3.c: 265: Activate_Buzzer();
  2164  001834  ECF4  F00C         	call	_Activate_Buzzer	;wreg free
  2165                           
  2166                           ;Lab10_sample_3.c: 266: for(int i = 0; i < 8800; i++ );
  2167  001838  0E00               	movlw	0
  2168  00183A  6E12               	movwf	waitHalfSecond@i+1,c
  2169  00183C  0E00               	movlw	0
  2170  00183E  6E11               	movwf	waitHalfSecond@i,c
  2171  001840                     l4985:
  2172  001840  BE12               	btfsc	waitHalfSecond@i+1,7,c
  2173  001842  D008               	goto	l4989
  2174  001844  0E60               	movlw	96
  2175  001846  5C11               	subwf	waitHalfSecond@i,w,c
  2176  001848  0E22               	movlw	34
  2177  00184A  5812               	subwfb	waitHalfSecond@i+1,w,c
  2178  00184C  B0D8               	btfsc	status,0,c
  2179  00184E  D005               	goto	l4993
  2180  001850  D001               	goto	l4989
  2181  001852  D003               	goto	l4993
  2182  001854                     l4989:
  2183  001854  4A11               	infsnz	waitHalfSecond@i,f,c
  2184  001856  2A12               	incf	waitHalfSecond@i+1,f,c
  2185  001858  D7F3               	goto	l4985
  2186  00185A                     l4993:
  2187                           
  2188                           ;Lab10_sample_3.c: 267: Deactivate_Buzzer();
  2189  00185A  EC53  F00D         	call	_Deactivate_Buzzer	;wreg free
  2190                           
  2191                           ;Lab10_sample_3.c: 268: PORTEbits.RE1 = 0;
  2192  00185E  9284               	bcf	3972,1,c	;volatile
  2193  001860  0012               	return		;funcret
  2194  001862                     __end_of_waitHalfSecond:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           intcon	equ	0xFF2
  2203                           intcon2	equ	0xFF1
  2204                           postinc0	equ	0xFEE
  2205                           wreg	equ	0xFE8
  2206                           postdec1	equ	0xFE5
  2207                           fsr1l	equ	0xFE1
  2208                           postinc2	equ	0xFDE
  2209                           postdec2	equ	0xFDD
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _Deactivate_Buzzer *****************
  2215 ;; Defined at:
  2216 ;;		line 256 in file "Lab10_sample_3.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;		None               void
  2223 ;; Registers used:
  2224 ;;		wreg, status,2
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    3
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_waitHalfSecond
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text2
  2245  001AA6                     __ptext2:
  2246                           	opt stack 0
  2247  001AA6                     _Deactivate_Buzzer:
  2248                           	opt stack 26
  2249                           
  2250                           ;Lab10_sample_3.c: 258: CCP2CON = 0x0;
  2251                           
  2252                           ;incstack = 0
  2253  001AA6  0E00               	movlw	0
  2254  001AA8  6EBA               	movwf	4026,c	;volatile
  2255                           
  2256                           ;Lab10_sample_3.c: 259: PORTBbits.RB3 = 0;
  2257  001AAA  9681               	bcf	3969,3,c	;volatile
  2258  001AAC  0012               	return		;funcret
  2259  001AAE                     __end_of_Deactivate_Buzzer:
  2260                           	opt stack 0
  2261                           tblptru	equ	0xFF8
  2262                           tblptrh	equ	0xFF7
  2263                           tblptrl	equ	0xFF6
  2264                           tablat	equ	0xFF5
  2265                           prodh	equ	0xFF4
  2266                           prodl	equ	0xFF3
  2267                           intcon	equ	0xFF2
  2268                           intcon2	equ	0xFF1
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           postdec1	equ	0xFE5
  2272                           fsr1l	equ	0xFE1
  2273                           postinc2	equ	0xFDE
  2274                           postdec2	equ	0xFDD
  2275                           fsr2h	equ	0xFDA
  2276                           fsr2l	equ	0xFD9
  2277                           status	equ	0xFD8
  2278                           
  2279 ;; *************** function _Activate_Buzzer *****************
  2280 ;; Defined at:
  2281 ;;		line 249 in file "Lab10_sample_3.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;		None
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;		None
  2286 ;; Return value:  Size  Location     Type
  2287 ;;		None               void
  2288 ;; Registers used:
  2289 ;;		wreg, status,2
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;Total ram usage:        0 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    3
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_waitHalfSecond
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text3
  2310  0019E8                     __ptext3:
  2311                           	opt stack 0
  2312  0019E8                     _Activate_Buzzer:
  2313                           	opt stack 26
  2314                           
  2315                           ;Lab10_sample_3.c: 251: PR2 = 0b11111001;
  2316                           
  2317                           ;incstack = 0
  2318  0019E8  0EF9               	movlw	249
  2319  0019EA  6ECB               	movwf	4043,c	;volatile
  2320                           
  2321                           ;Lab10_sample_3.c: 252: T2CON = 0b00000101;
  2322  0019EC  0E05               	movlw	5
  2323  0019EE  6ECA               	movwf	4042,c	;volatile
  2324                           
  2325                           ;Lab10_sample_3.c: 253: CCPR2L = 0b01001010;
  2326  0019F0  0E4A               	movlw	74
  2327  0019F2  6EBB               	movwf	4027,c	;volatile
  2328                           
  2329                           ;Lab10_sample_3.c: 254: CCP2CON = 0b00111100;
  2330  0019F4  0E3C               	movlw	60
  2331  0019F6  6EBA               	movwf	4026,c	;volatile
  2332  0019F8  0012               	return		;funcret
  2333  0019FA                     __end_of_Activate_Buzzer:
  2334                           	opt stack 0
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           prodh	equ	0xFF4
  2340                           prodl	equ	0xFF3
  2341                           intcon	equ	0xFF2
  2342                           intcon2	equ	0xFF1
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           postdec1	equ	0xFE5
  2346                           fsr1l	equ	0xFE1
  2347                           postinc2	equ	0xFDE
  2348                           postdec2	equ	0xFDD
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function _printf *****************
  2354 ;; Defined at:
  2355 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  f               2   38[COMRAM] PTR const unsigned char 
  2358 ;;		 -> STR_3(22), STR_2(43), STR_1(30), 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  idx             1   56[COMRAM] unsigned char 
  2361 ;;  val             4   61[COMRAM] unsigned long 
  2362 ;;  tmpval          4    0        struct .
  2363 ;;  cp              3    0        PTR const unsigned char 
  2364 ;;  width           2   65[COMRAM] int 
  2365 ;;  ap              2   59[COMRAM] PTR void [1]
  2366 ;;		 -> ?_printf(2), 
  2367 ;;  prec            2   57[COMRAM] int 
  2368 ;;  len             2    0        unsigned int 
  2369 ;;  c               1   68[COMRAM] char 
  2370 ;;  flag            1   67[COMRAM] unsigned char 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  2   38[COMRAM] int 
  2373 ;; Registers used:
  2374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2380 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;Total ram usage:       31 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    4
  2387 ;; This function calls:
  2388 ;;		___lldiv
  2389 ;;		___llmod
  2390 ;;		___wmul
  2391 ;;		_isdigit
  2392 ;;		_putch
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text4
  2399  00001C                     __ptext4:
  2400                           	opt stack 0
  2401  00001C                     _printf:
  2402                           	opt stack 26
  2403                           
  2404                           ;doprnt.c: 466: va_list ap;
  2405                           ;doprnt.c: 499: signed char c;
  2406                           ;doprnt.c: 501: int width;
  2407                           ;doprnt.c: 504: int prec;
  2408                           ;doprnt.c: 508: unsigned char flag;
  2409                           ;doprnt.c: 523: union {
  2410                           ;doprnt.c: 524: unsigned long vd;
  2411                           ;doprnt.c: 525: double integ;
  2412                           ;doprnt.c: 526: } tmpval;
  2413                           ;doprnt.c: 528: unsigned long val;
  2414                           ;doprnt.c: 529: unsigned len;
  2415                           ;doprnt.c: 530: const char * cp;
  2416                           ;doprnt.c: 533: *ap = __va_start();
  2417                           
  2418                           ;incstack = 0
  2419  00001C  0E29               	movlw	low (?_printf+2)
  2420  00001E  6E3C               	movwf	printf@ap,c
  2421  000020  0E00               	movlw	high (?_printf+2)
  2422  000022  6E3D               	movwf	printf@ap+1,c
  2423                           
  2424                           ;doprnt.c: 536: while(c = *f++) {
  2425  000024  D20D               	goto	l4977
  2426  000026                     l4839:
  2427                           
  2428                           ;doprnt.c: 538: if(c != '%')
  2429  000026  0E25               	movlw	37
  2430  000028  1845               	xorwf	printf@c,w,c
  2431  00002A  B4D8               	btfsc	status,2,c
  2432  00002C  D004               	goto	l4843
  2433                           
  2434                           ;doprnt.c: 540: {
  2435                           ;doprnt.c: 541: (putch(c) );
  2436  00002E  5045               	movf	printf@c,w,c
  2437  000030  EC31  F00D         	call	_putch
  2438                           
  2439                           ;doprnt.c: 542: continue;
  2440  000034  D205               	goto	l4977
  2441  000036                     l4843:
  2442                           
  2443                           ;doprnt.c: 543: }
  2444                           ;doprnt.c: 546: width = 0;
  2445  000036  0E00               	movlw	0
  2446  000038  6E43               	movwf	printf@width+1,c
  2447  00003A  0E00               	movlw	0
  2448  00003C  6E42               	movwf	printf@width,c
  2449                           
  2450                           ;doprnt.c: 548: flag = 0;
  2451  00003E  0E00               	movlw	0
  2452  000040  6E44               	movwf	printf@flag,c
  2453                           
  2454                           ;doprnt.c: 551: switch(*f) {
  2455                           
  2456                           ;doprnt.c: 550: for(;;) {
  2457  000042  D005               	goto	l4849
  2458  000044                     l4845:
  2459                           
  2460                           ;doprnt.c: 580: flag |= 0x04;
  2461  000044  8444               	bsf	printf@flag,2,c
  2462                           
  2463                           ;doprnt.c: 581: f++;
  2464  000046  4A27               	infsnz	printf@f,f,c
  2465  000048  2A28               	incf	printf@f+1,f,c
  2466                           
  2467                           ;doprnt.c: 582: continue;
  2468  00004A  D001               	goto	l4849
  2469                           
  2470                           ;doprnt.c: 584: }
  2471  00004C  D00B               	goto	l4851
  2472  00004E                     l4849:
  2473  00004E  C027  FFF6         	movff	printf@f,tblptrl
  2474  000052  C028  FFF7         	movff	printf@f+1,tblptrh
  2475  000056                     	if	0	;tblptru may be non-zero
  2476  000056                     	endif
  2477  000056                     	if	0	;tblptru may be non-zero
  2478  000056                     	endif
  2479  000056  0008               	tblrd		*
  2480  000058  50F5               	movf	tablat,w,c
  2481                           
  2482                           ; Switch size 1, requested type "space"
  2483                           ; Number of cases is 1, Range of values is 48 to 48
  2484                           ; switch strategies available:
  2485                           ; Name         Instructions Cycles
  2486                           ; simple_byte            4     3 (average)
  2487                           ;	Chosen strategy is simple_byte
  2488  00005A  0A30               	xorlw	48	; case 48
  2489  00005C  B4D8               	btfsc	status,2,c
  2490  00005E  D7F2               	goto	l4845
  2491                           
  2492                           ;doprnt.c: 585: break;
  2493  000060  D001               	goto	l4851
  2494                           
  2495                           ;doprnt.c: 586: }
  2496  000062  D7F5               	goto	l4849
  2497  000064                     l4851:
  2498                           
  2499                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2500  000064  C027  FFF6         	movff	printf@f,tblptrl
  2501  000068  C028  FFF7         	movff	printf@f+1,tblptrh
  2502  00006C                     	if	0	;tblptru may be non-zero
  2503  00006C                     	endif
  2504  00006C                     	if	0	;tblptru may be non-zero
  2505  00006C                     	endif
  2506  00006C  0008               	tblrd		*
  2507  00006E  50F5               	movf	tablat,w,c
  2508  000070  EC8A  F00C         	call	_isdigit
  2509  000074  A0D8               	btfss	status,0,c
  2510  000076  D03D               	goto	l4869
  2511                           
  2512                           ;doprnt.c: 598: width = 0;
  2513  000078  0E00               	movlw	0
  2514  00007A  6E43               	movwf	printf@width+1,c
  2515  00007C  0E00               	movlw	0
  2516  00007E  6E42               	movwf	printf@width,c
  2517  000080  D000               	goto	l4855
  2518  000082                     l4855:
  2519                           
  2520                           ;doprnt.c: 600: width *= 10;
  2521  000082  C042  F011         	movff	printf@width,___wmul@multiplier
  2522  000086  C043  F012         	movff	printf@width+1,___wmul@multiplier+1
  2523  00008A  0E00               	movlw	0
  2524  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2525  00008E  0E0A               	movlw	10
  2526  000090  6E13               	movwf	___wmul@multiplicand,c
  2527  000092  EC76  F00C         	call	___wmul	;wreg free
  2528  000096  C011  F042         	movff	?___wmul,printf@width
  2529  00009A  C012  F043         	movff	?___wmul+1,printf@width+1
  2530                           
  2531                           ;doprnt.c: 601: width += *f++ - '0';
  2532  00009E  0ED0               	movlw	208
  2533  0000A0  6E35               	movwf	??_printf& (0+255),c
  2534  0000A2  0EFF               	movlw	255
  2535  0000A4  6E36               	movwf	(??_printf+1)& (0+255),c
  2536  0000A6  C027  FFF6         	movff	printf@f,tblptrl
  2537  0000AA  C028  FFF7         	movff	printf@f+1,tblptrh
  2538  0000AE                     	if	0	;tblptru may be non-zero
  2539  0000AE                     	endif
  2540  0000AE                     	if	0	;tblptru may be non-zero
  2541  0000AE                     	endif
  2542  0000AE  0008               	tblrd		*
  2543  0000B0  50F5               	movf	tablat,w,c
  2544  0000B2  6E37               	movwf	(??_printf+2)& (0+255),c
  2545  0000B4  6A38               	clrf	(??_printf+3)& (0+255),c
  2546  0000B6  5035               	movf	??_printf,w,c
  2547  0000B8  2637               	addwf	??_printf+2,f,c
  2548  0000BA  5036               	movf	??_printf+1,w,c
  2549  0000BC  2238               	addwfc	??_printf+3,f,c
  2550  0000BE  5037               	movf	??_printf+2,w,c
  2551  0000C0  2642               	addwf	printf@width,f,c
  2552  0000C2  5038               	movf	??_printf+3,w,c
  2553  0000C4  2243               	addwfc	printf@width+1,f,c
  2554  0000C6  4A27               	infsnz	printf@f,f,c
  2555  0000C8  2A28               	incf	printf@f+1,f,c
  2556                           
  2557                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2558  0000CA  C027  FFF6         	movff	printf@f,tblptrl
  2559  0000CE  C028  FFF7         	movff	printf@f+1,tblptrh
  2560  0000D2                     	if	0	;tblptru may be non-zero
  2561  0000D2                     	endif
  2562  0000D2                     	if	0	;tblptru may be non-zero
  2563  0000D2                     	endif
  2564  0000D2  0008               	tblrd		*
  2565  0000D4  50F5               	movf	tablat,w,c
  2566  0000D6  EC8A  F00C         	call	_isdigit
  2567  0000DA  A0D8               	btfss	status,0,c
  2568  0000DC  D00A               	goto	l4869
  2569  0000DE  D7D1               	goto	l4855
  2570                           
  2571                           ;doprnt.c: 635: switch(c = *f++) {
  2572                           
  2573                           ;doprnt.c: 608: }
  2574                           ;doprnt.c: 633: loop:
  2575  0000E0  D008               	goto	l4869
  2576                           
  2577                           ;doprnt.c: 638: goto alldone;
  2578                           
  2579                           ;doprnt.c: 637: case 0:
  2580  0000E2  D1BC               	goto	l641
  2581  0000E4                     l4863:
  2582                           
  2583                           ;doprnt.c: 643: flag |= 0x10;
  2584  0000E4  8844               	bsf	printf@flag,4,c
  2585                           
  2586                           ;doprnt.c: 644: goto loop;
  2587  0000E6  D005               	goto	l4869
  2588                           
  2589                           ;doprnt.c: 698: case 'i':
  2590                           ;doprnt.c: 699: break;
  2591                           
  2592                           ;doprnt.c: 697: case 'd':
  2593  0000E8  D01E               	goto	l600
  2594  0000EA                     l4865:
  2595                           
  2596                           ;doprnt.c: 721: flag |= 0x80;
  2597  0000EA  8E44               	bsf	printf@flag,7,c
  2598                           
  2599                           ;doprnt.c: 723: break;
  2600  0000EC  D01C               	goto	l600
  2601                           
  2602                           ;doprnt.c: 813: continue;
  2603                           
  2604                           ;doprnt.c: 802: default:
  2605  0000EE  D1A8               	goto	l4977
  2606                           
  2607                           ;doprnt.c: 822: }
  2608  0000F0  D01A               	goto	l600
  2609  0000F2                     l4869:
  2610  0000F2  C027  FFF6         	movff	printf@f,tblptrl
  2611  0000F6  C028  FFF7         	movff	printf@f+1,tblptrh
  2612  0000FA  4A27               	infsnz	printf@f,f,c
  2613  0000FC  2A28               	incf	printf@f+1,f,c
  2614  0000FE                     	if	0	;tblptru may be non-zero
  2615  0000FE                     	endif
  2616  0000FE                     	if	0	;tblptru may be non-zero
  2617  0000FE                     	endif
  2618  0000FE  0008               	tblrd		*
  2619  000100  CFF5 F045          	movff	tablat,printf@c
  2620  000104  5045               	movf	printf@c,w,c
  2621                           
  2622                           ; Switch size 1, requested type "space"
  2623                           ; Number of cases is 5, Range of values is 0 to 120
  2624                           ; switch strategies available:
  2625                           ; Name         Instructions Cycles
  2626                           ; simple_byte           16     9 (average)
  2627                           ;	Chosen strategy is simple_byte
  2628  000106  0A00               	xorlw	0	; case 0
  2629  000108  B4D8               	btfsc	status,2,c
  2630  00010A  D1A8               	goto	l641
  2631  00010C  0A64               	xorlw	100	; case 100
  2632  00010E  B4D8               	btfsc	status,2,c
  2633  000110  D00A               	goto	l600
  2634  000112  0A0D               	xorlw	13	; case 105
  2635  000114  B4D8               	btfsc	status,2,c
  2636  000116  D007               	goto	l600
  2637  000118  0A05               	xorlw	5	; case 108
  2638  00011A  B4D8               	btfsc	status,2,c
  2639  00011C  D7E3               	goto	l4863
  2640  00011E  0A14               	xorlw	20	; case 120
  2641  000120  B4D8               	btfsc	status,2,c
  2642  000122  D7E3               	goto	l4865
  2643  000124  D18D               	goto	l4977
  2644  000126                     l600:
  2645                           
  2646                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2647  000126  BE44               	btfsc	printf@flag,7,c
  2648  000128  D02F               	goto	l603
  2649                           
  2650                           ;doprnt.c: 1253: {
  2651                           ;doprnt.c: 1255: if(flag & 0x10)
  2652  00012A  A844               	btfss	printf@flag,4,c
  2653  00012C  D00E               	goto	l4877
  2654                           
  2655                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2656  00012E  C03C  FFD9         	movff	printf@ap,fsr2l
  2657  000132  C03D  FFDA         	movff	printf@ap+1,fsr2h
  2658  000136  CFDE F03E          	movff	postinc2,printf@val
  2659  00013A  CFDE F03F          	movff	postinc2,printf@val+1
  2660  00013E  CFDE F040          	movff	postinc2,printf@val+2
  2661  000142  CFDE F041          	movff	postinc2,printf@val+3
  2662  000146  0E04               	movlw	4
  2663  000148  D00E               	goto	L1
  2664  00014A                     l4877:
  2665                           
  2666                           ;doprnt.c: 1257: else
  2667                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2668  00014A  C03C  FFD9         	movff	printf@ap,fsr2l
  2669  00014E  C03D  FFDA         	movff	printf@ap+1,fsr2h
  2670  000152  CFDE F03E          	movff	postinc2,printf@val
  2671  000156  CFDD F03F          	movff	postdec2,printf@val+1
  2672  00015A  0E00               	movlw	0
  2673  00015C  BE3F               	btfsc	printf@val+1,7,c
  2674  00015E  0EFF               	movlw	-1
  2675  000160  6E40               	movwf	printf@val+2,c
  2676  000162  6E41               	movwf	printf@val+3,c
  2677  000164  0E02               	movlw	2
  2678  000166                     L1:
  2679  000166  263C               	addwf	printf@ap,f,c
  2680  000168  0E00               	movlw	0
  2681  00016A  223D               	addwfc	printf@ap+1,f,c
  2682  00016C  D000               	goto	l4881
  2683  00016E                     l4881:
  2684                           
  2685                           ;doprnt.c: 1261: if((long)val < 0) {
  2686  00016E  AE41               	btfss	printf@val+3,7,c
  2687  000170  D074               	goto	l4925
  2688                           
  2689                           ;doprnt.c: 1262: flag |= 0x03;
  2690  000172  0E03               	movlw	3
  2691  000174  1244               	iorwf	printf@flag,f,c
  2692                           
  2693                           ;doprnt.c: 1263: val = -val;
  2694  000176  1E41               	comf	printf@val+3,f,c
  2695  000178  1E40               	comf	printf@val+2,f,c
  2696  00017A  1E3F               	comf	printf@val+1,f,c
  2697  00017C  6C3E               	negf	printf@val,c
  2698  00017E  0E00               	movlw	0
  2699  000180  223F               	addwfc	printf@val+1,f,c
  2700  000182  2240               	addwfc	printf@val+2,f,c
  2701  000184  2241               	addwfc	printf@val+3,f,c
  2702                           
  2703                           ;doprnt.c: 1264: }
  2704                           ;doprnt.c: 1266: }
  2705  000186  D069               	goto	l4925
  2706  000188                     l603:
  2707                           
  2708                           ;doprnt.c: 1268: else
  2709                           ;doprnt.c: 1273: {
  2710                           ;doprnt.c: 1281: if(flag & 0x10)
  2711  000188  A844               	btfss	printf@flag,4,c
  2712  00018A  D00E               	goto	l4891
  2713                           
  2714                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2715  00018C  C03C  FFD9         	movff	printf@ap,fsr2l
  2716  000190  C03D  FFDA         	movff	printf@ap+1,fsr2h
  2717  000194  CFDE F03E          	movff	postinc2,printf@val
  2718  000198  CFDE F03F          	movff	postinc2,printf@val+1
  2719  00019C  CFDE F040          	movff	postinc2,printf@val+2
  2720  0001A0  CFDE F041          	movff	postinc2,printf@val+3
  2721  0001A4  0E04               	movlw	4
  2722  0001A6  D00F               	goto	L2
  2723  0001A8                     l4891:
  2724                           
  2725                           ;doprnt.c: 1283: else
  2726                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2727  0001A8  C03C  FFD9         	movff	printf@ap,fsr2l
  2728  0001AC  C03D  FFDA         	movff	printf@ap+1,fsr2h
  2729  0001B0  CFDE F035          	movff	postinc2,??_printf
  2730  0001B4  CFDD F036          	movff	postdec2,??_printf+1
  2731  0001B8  C035  F03E         	movff	??_printf,printf@val
  2732  0001BC  C036  F03F         	movff	??_printf+1,printf@val+1
  2733  0001C0  6A40               	clrf	printf@val+2,c
  2734  0001C2  6A41               	clrf	printf@val+3,c
  2735  0001C4  0E02               	movlw	2
  2736  0001C6                     L2:
  2737  0001C6  263C               	addwf	printf@ap,f,c
  2738  0001C8  0E00               	movlw	0
  2739  0001CA  223D               	addwfc	printf@ap+1,f,c
  2740                           
  2741                           ;doprnt.c: 1287: }
  2742                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2743  0001CC  D046               	goto	l4925
  2744  0001CE                     l4895:
  2745                           
  2746                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2747  0001CE  0E01               	movlw	1
  2748  0001D0  6E45               	movwf	printf@c,c
  2749  0001D2                     l4897:
  2750  0001D2  0E0A               	movlw	10
  2751  0001D4  1845               	xorwf	printf@c,w,c
  2752  0001D6  B4D8               	btfsc	status,2,c
  2753  0001D8  D049               	goto	l4927
  2754  0001DA  D001               	goto	l4901
  2755  0001DC  D047               	goto	l4927
  2756  0001DE                     l4901:
  2757                           
  2758                           ;doprnt.c: 1306: if(val < dpowers[c])
  2759  0001DE  5045               	movf	printf@c,w,c
  2760  0001E0  0D04               	mullw	4
  2761  0001E2  0E26               	movlw	low _dpowers
  2762  0001E4  24F3               	addwf	prodl,w,c
  2763  0001E6  6EF6               	movwf	tblptrl,c
  2764  0001E8  0EFF               	movlw	high _dpowers
  2765  0001EA  20F4               	addwfc	prodh,w,c
  2766  0001EC  6EF7               	movwf	tblptrh,c
  2767  0001EE                     	if	0	;There are less than 3 active tblptr bytes
  2768  0001EE                     	endif
  2769  0001EE  0009               	tblrd		*+
  2770  0001F0  50F5               	movf	tablat,w,c
  2771  0001F2  5C3E               	subwf	printf@val,w,c
  2772  0001F4  0009               	tblrd		*+
  2773  0001F6  50F5               	movf	tablat,w,c
  2774  0001F8  583F               	subwfb	printf@val+1,w,c
  2775  0001FA  0009               	tblrd		*+
  2776  0001FC  50F5               	movf	tablat,w,c
  2777  0001FE  5840               	subwfb	printf@val+2,w,c
  2778  000200  0009               	tblrd		*+
  2779  000202  50F5               	movf	tablat,w,c
  2780  000204  5841               	subwfb	printf@val+3,w,c
  2781  000206  A0D8               	btfss	status,0,c
  2782  000208  D031               	goto	l4927
  2783  00020A  D001               	goto	l4905
  2784                           
  2785                           ;doprnt.c: 1307: break;
  2786  00020C  D02F               	goto	l4927
  2787  00020E                     l4905:
  2788  00020E  2A45               	incf	printf@c,f,c
  2789  000210  D7E0               	goto	l4897
  2790                           
  2791                           ;doprnt.c: 1309: break;
  2792  000212  D02C               	goto	l4927
  2793  000214                     l4909:
  2794                           
  2795                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2796  000214  0E01               	movlw	1
  2797  000216  6E45               	movwf	printf@c,c
  2798  000218                     l4911:
  2799  000218  0E08               	movlw	8
  2800  00021A  1845               	xorwf	printf@c,w,c
  2801  00021C  B4D8               	btfsc	status,2,c
  2802  00021E  D026               	goto	l4927
  2803  000220  D001               	goto	l4915
  2804  000222  D024               	goto	l4927
  2805  000224                     l4915:
  2806                           
  2807                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2808  000224  5045               	movf	printf@c,w,c
  2809  000226  0D04               	mullw	4
  2810  000228  0E4E               	movlw	low _hexpowers
  2811  00022A  24F3               	addwf	prodl,w,c
  2812  00022C  6EF6               	movwf	tblptrl,c
  2813  00022E  0EFF               	movlw	high _hexpowers
  2814  000230  20F4               	addwfc	prodh,w,c
  2815  000232  6EF7               	movwf	tblptrh,c
  2816  000234                     	if	0	;There are less than 3 active tblptr bytes
  2817  000234                     	endif
  2818  000234  0009               	tblrd		*+
  2819  000236  50F5               	movf	tablat,w,c
  2820  000238  5C3E               	subwf	printf@val,w,c
  2821  00023A  0009               	tblrd		*+
  2822  00023C  50F5               	movf	tablat,w,c
  2823  00023E  583F               	subwfb	printf@val+1,w,c
  2824  000240  0009               	tblrd		*+
  2825  000242  50F5               	movf	tablat,w,c
  2826  000244  5840               	subwfb	printf@val+2,w,c
  2827  000246  0009               	tblrd		*+
  2828  000248  50F5               	movf	tablat,w,c
  2829  00024A  5841               	subwfb	printf@val+3,w,c
  2830  00024C  A0D8               	btfss	status,0,c
  2831  00024E  D00E               	goto	l4927
  2832  000250  D001               	goto	l4919
  2833                           
  2834                           ;doprnt.c: 1318: break;
  2835  000252  D00C               	goto	l4927
  2836  000254                     l4919:
  2837  000254  2A45               	incf	printf@c,f,c
  2838  000256  D7E0               	goto	l4911
  2839                           
  2840                           ;doprnt.c: 1336: }
  2841                           
  2842                           ;doprnt.c: 1320: break;
  2843  000258  D009               	goto	l4927
  2844  00025A                     l4925:
  2845  00025A  5044               	movf	printf@flag,w,c
  2846  00025C  0B80               	andlw	128
  2847                           
  2848                           ; Switch size 1, requested type "space"
  2849                           ; Number of cases is 2, Range of values is 0 to 128
  2850                           ; switch strategies available:
  2851                           ; Name         Instructions Cycles
  2852                           ; simple_byte            7     4 (average)
  2853                           ;	Chosen strategy is simple_byte
  2854  00025E  0A00               	xorlw	0	; case 0
  2855  000260  B4D8               	btfsc	status,2,c
  2856  000262  D7B5               	goto	l4895
  2857  000264  0A80               	xorlw	128	; case 128
  2858  000266  B4D8               	btfsc	status,2,c
  2859  000268  D7D5               	goto	l4909
  2860  00026A  D000               	goto	l4927
  2861  00026C                     l4927:
  2862                           
  2863                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2864  00026C  5042               	movf	printf@width,w,c
  2865  00026E  1043               	iorwf	printf@width+1,w,c
  2866  000270  B4D8               	btfsc	status,2,c
  2867  000272  D00A               	goto	l4933
  2868  000274  C044  F035         	movff	printf@flag,??_printf
  2869  000278  0E03               	movlw	3
  2870  00027A  1635               	andwf	??_printf,f,c
  2871  00027C  B4D8               	btfsc	status,2,c
  2872  00027E  D004               	goto	l4933
  2873                           
  2874                           ;doprnt.c: 1346: width--;
  2875  000280  0642               	decf	printf@width,f,c
  2876  000282  A0D8               	btfss	status,0,c
  2877  000284  0643               	decf	printf@width+1,f,c
  2878  000286  D000               	goto	l4933
  2879  000288                     l4933:
  2880                           
  2881                           ;doprnt.c: 1381: if(width > c)
  2882  000288  0E80               	movlw	128
  2883  00028A  BE45               	btfsc	printf@c,7,c
  2884  00028C  0E7F               	movlw	127
  2885  00028E  6E35               	movwf	??_printf& (0+255),c
  2886  000290  5042               	movf	printf@width,w,c
  2887  000292  5C45               	subwf	printf@c,w,c
  2888  000294  5043               	movf	printf@width+1,w,c
  2889  000296  0A80               	xorlw	128
  2890  000298  5835               	subwfb	??_printf& (0+255),w,c
  2891  00029A  B0D8               	btfsc	status,0,c
  2892  00029C  D007               	goto	l4937
  2893                           
  2894                           ;doprnt.c: 1382: width -= c;
  2895  00029E  5045               	movf	printf@c,w,c
  2896  0002A0  5E42               	subwf	printf@width,f,c
  2897  0002A2  0E00               	movlw	0
  2898  0002A4  BE45               	btfsc	printf@c,7,c
  2899  0002A6  0EFF               	movlw	255
  2900  0002A8  5A43               	subwfb	printf@width+1,f,c
  2901  0002AA  D005               	goto	l4939
  2902  0002AC                     l4937:
  2903                           
  2904                           ;doprnt.c: 1383: else
  2905                           ;doprnt.c: 1384: width = 0;
  2906  0002AC  0E00               	movlw	0
  2907  0002AE  6E43               	movwf	printf@width+1,c
  2908  0002B0  0E00               	movlw	0
  2909  0002B2  6E42               	movwf	printf@width,c
  2910  0002B4  D000               	goto	l4939
  2911  0002B6                     l4939:
  2912                           
  2913                           ;doprnt.c: 1387: if(flag & 0x04) {
  2914  0002B6  A444               	btfss	printf@flag,2,c
  2915  0002B8  D01A               	goto	l4951
  2916                           
  2917                           ;doprnt.c: 1392: if(flag & 0x03)
  2918  0002BA  C044  F035         	movff	printf@flag,??_printf
  2919  0002BE  0E03               	movlw	3
  2920  0002C0  1635               	andwf	??_printf,f,c
  2921  0002C2  B4D8               	btfsc	status,2,c
  2922  0002C4  D004               	goto	l4945
  2923                           
  2924                           ;doprnt.c: 1393: (putch('-') );
  2925  0002C6  0E2D               	movlw	45
  2926  0002C8  EC31  F00D         	call	_putch
  2927  0002CC  D000               	goto	l4945
  2928  0002CE                     l4945:
  2929                           
  2930                           ;doprnt.c: 1415: if(width)
  2931  0002CE  5042               	movf	printf@width,w,c
  2932  0002D0  1043               	iorwf	printf@width+1,w,c
  2933  0002D2  B4D8               	btfsc	status,2,c
  2934  0002D4  D026               	goto	l4961
  2935  0002D6                     l4947:
  2936                           
  2937                           ;doprnt.c: 1417: (putch('0') );
  2938  0002D6  0E30               	movlw	48
  2939  0002D8  EC31  F00D         	call	_putch
  2940                           
  2941                           ;doprnt.c: 1418: while(--width);
  2942  0002DC  0642               	decf	printf@width,f,c
  2943  0002DE  A0D8               	btfss	status,0,c
  2944  0002E0  0643               	decf	printf@width+1,f,c
  2945  0002E2  5042               	movf	printf@width,w,c
  2946  0002E4  1043               	iorwf	printf@width+1,w,c
  2947  0002E6  B4D8               	btfsc	status,2,c
  2948  0002E8  D01C               	goto	l4961
  2949  0002EA  D7F5               	goto	l4947
  2950                           
  2951                           ;doprnt.c: 1420: } else
  2952  0002EC  D01A               	goto	l4961
  2953  0002EE                     l4951:
  2954                           
  2955                           ;doprnt.c: 1422: {
  2956                           ;doprnt.c: 1424: if(width
  2957                           ;doprnt.c: 1428: )
  2958  0002EE  5042               	movf	printf@width,w,c
  2959  0002F0  1043               	iorwf	printf@width+1,w,c
  2960  0002F2  B4D8               	btfsc	status,2,c
  2961  0002F4  D00C               	goto	l4957
  2962  0002F6                     l4953:
  2963                           
  2964                           ;doprnt.c: 1430: (putch(' ') );
  2965  0002F6  0E20               	movlw	32
  2966  0002F8  EC31  F00D         	call	_putch
  2967                           
  2968                           ;doprnt.c: 1431: while(--width);
  2969  0002FC  0642               	decf	printf@width,f,c
  2970  0002FE  A0D8               	btfss	status,0,c
  2971  000300  0643               	decf	printf@width+1,f,c
  2972  000302  5042               	movf	printf@width,w,c
  2973  000304  1043               	iorwf	printf@width+1,w,c
  2974  000306  B4D8               	btfsc	status,2,c
  2975  000308  D002               	goto	l4957
  2976  00030A  D7F5               	goto	l4953
  2977  00030C  D000               	goto	l4957
  2978  00030E                     l4957:
  2979                           
  2980                           ;doprnt.c: 1438: if(flag & 0x03)
  2981  00030E  C044  F035         	movff	printf@flag,??_printf
  2982  000312  0E03               	movlw	3
  2983  000314  1635               	andwf	??_printf,f,c
  2984  000316  B4D8               	btfsc	status,2,c
  2985  000318  D004               	goto	l4961
  2986                           
  2987                           ;doprnt.c: 1439: (putch('-') );
  2988  00031A  0E2D               	movlw	45
  2989  00031C  EC31  F00D         	call	_putch
  2990  000320  D000               	goto	l4961
  2991  000322                     l4961:
  2992                           
  2993                           ;doprnt.c: 1469: }
  2994                           ;doprnt.c: 1472: prec = c;
  2995  000322  5045               	movf	printf@c,w,c
  2996  000324  6E3A               	movwf	printf@prec,c
  2997  000326  6A3B               	clrf	printf@prec+1,c
  2998  000328  BE3A               	btfsc	printf@prec,7,c
  2999  00032A  063B               	decf	printf@prec+1,f,c
  3000                           
  3001                           ;doprnt.c: 1474: while(prec--) {
  3002  00032C  D07F               	goto	l4975
  3003                           
  3004                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3005  00032E  D071               	goto	l4971
  3006  000330                     l4963:
  3007                           
  3008                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3009  000330  C03A  F035         	movff	printf@prec,??_printf
  3010  000334  C03B  F036         	movff	printf@prec+1,??_printf+1
  3011  000338  90D8               	bcf	status,0,c
  3012  00033A  3635               	rlcf	??_printf,f,c
  3013  00033C  3636               	rlcf	??_printf+1,f,c
  3014  00033E  90D8               	bcf	status,0,c
  3015  000340  3635               	rlcf	??_printf,f,c
  3016  000342  3636               	rlcf	??_printf+1,f,c
  3017  000344  0E26               	movlw	low _dpowers
  3018  000346  2435               	addwf	??_printf,w,c
  3019  000348  6EF6               	movwf	tblptrl,c
  3020  00034A  0EFF               	movlw	high _dpowers
  3021  00034C  2036               	addwfc	??_printf+1,w,c
  3022  00034E  6EF7               	movwf	tblptrh,c
  3023  000350                     	if	0	;There are less than 3 active tblptr bytes
  3024  000350                     	endif
  3025  000350  0009               	tblrd		*+
  3026  000352  CFF5 F015          	movff	tablat,___lldiv@divisor
  3027  000356  0009               	tblrd		*+
  3028  000358  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3029  00035C  0009               	tblrd		*+
  3030  00035E  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3031  000362  000A               	tblrd		*-
  3032  000364  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3033  000368  C03E  F011         	movff	printf@val,___lldiv@dividend
  3034  00036C  C03F  F012         	movff	printf@val+1,___lldiv@dividend+1
  3035  000370  C040  F013         	movff	printf@val+2,___lldiv@dividend+2
  3036  000374  C041  F014         	movff	printf@val+3,___lldiv@dividend+3
  3037  000378  EC83  F008         	call	___lldiv	;wreg free
  3038  00037C  C011  F01E         	movff	?___lldiv,___llmod@dividend
  3039  000380  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  3040  000384  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  3041  000388  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  3042  00038C  0E0A               	movlw	10
  3043  00038E  6E22               	movwf	___llmod@divisor,c
  3044  000390  0E00               	movlw	0
  3045  000392  6E23               	movwf	___llmod@divisor+1,c
  3046  000394  0E00               	movlw	0
  3047  000396  6E24               	movwf	___llmod@divisor+2,c
  3048  000398  0E00               	movlw	0
  3049  00039A  6E25               	movwf	___llmod@divisor+3,c
  3050  00039C  EC88  F009         	call	___llmod	;wreg free
  3051  0003A0  501E               	movf	?___llmod,w,c
  3052  0003A2  0F30               	addlw	48
  3053  0003A4  6E45               	movwf	printf@c,c
  3054                           
  3055                           ;doprnt.c: 1491: break;
  3056  0003A6  D03E               	goto	l4973
  3057  0003A8                     l4965:
  3058                           
  3059                           ;doprnt.c: 1499: {
  3060                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3061  0003A8  C03E  F011         	movff	printf@val,___lldiv@dividend
  3062  0003AC  C03F  F012         	movff	printf@val+1,___lldiv@dividend+1
  3063  0003B0  C040  F013         	movff	printf@val+2,___lldiv@dividend+2
  3064  0003B4  C041  F014         	movff	printf@val+3,___lldiv@dividend+3
  3065  0003B8  C03A  F035         	movff	printf@prec,??_printf
  3066  0003BC  C03B  F036         	movff	printf@prec+1,??_printf+1
  3067  0003C0  90D8               	bcf	status,0,c
  3068  0003C2  3635               	rlcf	??_printf,f,c
  3069  0003C4  3636               	rlcf	??_printf+1,f,c
  3070  0003C6  90D8               	bcf	status,0,c
  3071  0003C8  3635               	rlcf	??_printf,f,c
  3072  0003CA  3636               	rlcf	??_printf+1,f,c
  3073  0003CC  0E4E               	movlw	low _hexpowers
  3074  0003CE  2435               	addwf	??_printf,w,c
  3075  0003D0  6EF6               	movwf	tblptrl,c
  3076  0003D2  0EFF               	movlw	high _hexpowers
  3077  0003D4  2036               	addwfc	??_printf+1,w,c
  3078  0003D6  6EF7               	movwf	tblptrh,c
  3079  0003D8                     	if	0	;There are less than 3 active tblptr bytes
  3080  0003D8                     	endif
  3081  0003D8  0009               	tblrd		*+
  3082  0003DA  CFF5 F015          	movff	tablat,___lldiv@divisor
  3083  0003DE  0009               	tblrd		*+
  3084  0003E0  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3085  0003E4  0009               	tblrd		*+
  3086  0003E6  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3087  0003EA  000A               	tblrd		*-
  3088  0003EC  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3089  0003F0  EC83  F008         	call	___lldiv	;wreg free
  3090  0003F4  5011               	movf	?___lldiv,w,c
  3091  0003F6  0B0F               	andlw	15
  3092  0003F8  6E39               	movwf	printf@idx,c
  3093                           
  3094                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3095  0003FA  5039               	movf	printf@idx,w,c
  3096  0003FC  0D01               	mullw	1
  3097  0003FE  0EE1               	movlw	low STR_7
  3098  000400  24F3               	addwf	prodl,w,c
  3099  000402  6EF6               	movwf	tblptrl,c
  3100  000404  0EFF               	movlw	high STR_7
  3101  000406  20F4               	addwfc	prodh,w,c
  3102  000408  6EF7               	movwf	tblptrh,c
  3103  00040A                     	if	0	;There are less than 3 active tblptr bytes
  3104  00040A                     	endif
  3105  00040A  0008               	tblrd		*
  3106  00040C  CFF5 F045          	movff	tablat,printf@c
  3107                           
  3108                           ;doprnt.c: 1523: }
  3109                           
  3110                           ;doprnt.c: 1508: }
  3111                           ;doprnt.c: 1510: break;
  3112  000410  D009               	goto	l4973
  3113  000412                     l4971:
  3114  000412  5044               	movf	printf@flag,w,c
  3115  000414  0B80               	andlw	128
  3116                           
  3117                           ; Switch size 1, requested type "space"
  3118                           ; Number of cases is 2, Range of values is 0 to 128
  3119                           ; switch strategies available:
  3120                           ; Name         Instructions Cycles
  3121                           ; simple_byte            7     4 (average)
  3122                           ;	Chosen strategy is simple_byte
  3123  000416  0A00               	xorlw	0	; case 0
  3124  000418  B4D8               	btfsc	status,2,c
  3125  00041A  D78A               	goto	l4963
  3126  00041C  0A80               	xorlw	128	; case 128
  3127  00041E  B4D8               	btfsc	status,2,c
  3128  000420  D7C3               	goto	l4965
  3129  000422  D000               	goto	l4973
  3130  000424                     l4973:
  3131                           
  3132                           ;doprnt.c: 1524: (putch(c) );
  3133  000424  5045               	movf	printf@c,w,c
  3134  000426  EC31  F00D         	call	_putch
  3135  00042A  D000               	goto	l4975
  3136  00042C                     l4975:
  3137  00042C  063A               	decf	printf@prec,f,c
  3138  00042E  A0D8               	btfss	status,0,c
  3139  000430  063B               	decf	printf@prec+1,f,c
  3140  000432  283A               	incf	printf@prec,w,c
  3141  000434  E1EE               	bnz	l4971
  3142  000436  283B               	incf	printf@prec+1,w,c
  3143  000438  B4D8               	btfsc	status,2,c
  3144  00043A  D002               	goto	l4977
  3145  00043C  D7EA               	goto	l4971
  3146  00043E  D000               	goto	l4977
  3147  000440                     l4977:
  3148  000440  C027  FFF6         	movff	printf@f,tblptrl
  3149  000444  C028  FFF7         	movff	printf@f+1,tblptrh
  3150  000448  4A27               	infsnz	printf@f,f,c
  3151  00044A  2A28               	incf	printf@f+1,f,c
  3152  00044C                     	if	0	;tblptru may be non-zero
  3153  00044C                     	endif
  3154  00044C                     	if	0	;tblptru may be non-zero
  3155  00044C                     	endif
  3156  00044C  0008               	tblrd		*
  3157  00044E  CFF5 F045          	movff	tablat,printf@c
  3158  000452  5045               	movf	printf@c,w,c
  3159  000454  B4D8               	btfsc	status,2,c
  3160  000456  D002               	goto	l641
  3161  000458  D5E6               	goto	l4839
  3162  00045A  D000               	goto	l641
  3163  00045C                     l641:
  3164  00045C  0012               	return		;funcret
  3165  00045E                     __end_of_printf:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           tblptrh	equ	0xFF7
  3169                           tblptrl	equ	0xFF6
  3170                           tablat	equ	0xFF5
  3171                           prodh	equ	0xFF4
  3172                           prodl	equ	0xFF3
  3173                           intcon	equ	0xFF2
  3174                           intcon2	equ	0xFF1
  3175                           postinc0	equ	0xFEE
  3176                           wreg	equ	0xFE8
  3177                           postdec1	equ	0xFE5
  3178                           fsr1l	equ	0xFE1
  3179                           postinc2	equ	0xFDE
  3180                           postdec2	equ	0xFDD
  3181                           fsr2h	equ	0xFDA
  3182                           fsr2l	equ	0xFD9
  3183                           status	equ	0xFD8
  3184                           
  3185 ;; *************** function _putch *****************
  3186 ;; Defined at:
  3187 ;;		line 121 in file "Lab10_sample_3.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;  c               1    wreg     unsigned char 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  c               1   16[COMRAM] unsigned char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;		None               void
  3194 ;; Registers used:
  3195 ;;		wreg
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;Total ram usage:        1 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    3
  3208 ;; This function calls:
  3209 ;;		Nothing
  3210 ;; This function is called by:
  3211 ;;		_printf
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text5
  3216  001A62                     __ptext5:
  3217                           	opt stack 0
  3218  001A62                     _putch:
  3219                           	opt stack 26
  3220                           
  3221                           ;incstack = 0
  3222                           ;putch@c stored from wreg
  3223  001A62  6E11               	movwf	putch@c,c
  3224                           
  3225                           ;Lab10_sample_3.c: 123: while (!TRMT);
  3226  001A64  D000               	goto	l137
  3227  001A66                     l137:
  3228  001A66  A2AC               	btfss	4012,1,c	;volatile
  3229  001A68  D7FE               	goto	l137
  3230                           
  3231                           ;Lab10_sample_3.c: 124: TXREG = c;
  3232  001A6A  C011  FFAD         	movff	putch@c,4013	;volatile
  3233  001A6E  0012               	return		;funcret
  3234  001A70                     __end_of_putch:
  3235                           	opt stack 0
  3236                           tblptru	equ	0xFF8
  3237                           tblptrh	equ	0xFF7
  3238                           tblptrl	equ	0xFF6
  3239                           tablat	equ	0xFF5
  3240                           prodh	equ	0xFF4
  3241                           prodl	equ	0xFF3
  3242                           intcon	equ	0xFF2
  3243                           intcon2	equ	0xFF1
  3244                           postinc0	equ	0xFEE
  3245                           wreg	equ	0xFE8
  3246                           postdec1	equ	0xFE5
  3247                           fsr1l	equ	0xFE1
  3248                           postinc2	equ	0xFDE
  3249                           postdec2	equ	0xFDD
  3250                           fsr2h	equ	0xFDA
  3251                           fsr2l	equ	0xFD9
  3252                           status	equ	0xFD8
  3253                           
  3254 ;; *************** function _isdigit *****************
  3255 ;; Defined at:
  3256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;  c               1    wreg     unsigned char 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  c               1   18[COMRAM] unsigned char 
  3261 ;; Return value:  Size  Location     Type
  3262 ;;		None               void
  3263 ;; Registers used:
  3264 ;;		wreg, status,2, status,0
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;Total ram usage:        3 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    3
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_printf
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text6
  3285  001914                     __ptext6:
  3286                           	opt stack 0
  3287  001914                     _isdigit:
  3288                           	opt stack 26
  3289                           
  3290                           ;incstack = 0
  3291                           ;isdigit@c stored from wreg
  3292  001914  6E13               	movwf	isdigit@c,c
  3293  001916  0E00               	movlw	0
  3294  001918  6E12               	movwf	_isdigit$2148,c
  3295  00191A  0E3A               	movlw	58
  3296  00191C  6013               	cpfslt	isdigit@c,c
  3297  00191E  D006               	goto	l4691
  3298  001920  0E2F               	movlw	47
  3299  001922  6413               	cpfsgt	isdigit@c,c
  3300  001924  D003               	goto	l4691
  3301  001926  0E01               	movlw	1
  3302  001928  6E12               	movwf	_isdigit$2148,c
  3303  00192A  D000               	goto	l4691
  3304  00192C                     l4691:
  3305  00192C  C012  F011         	movff	_isdigit$2148,??_isdigit
  3306  001930  3011               	rrcf	??_isdigit,w,c
  3307  001932  D000               	goto	l1108
  3308  001934                     l1108:
  3309  001934  0012               	return		;funcret
  3310  001936                     __end_of_isdigit:
  3311                           	opt stack 0
  3312                           tblptru	equ	0xFF8
  3313                           tblptrh	equ	0xFF7
  3314                           tblptrl	equ	0xFF6
  3315                           tablat	equ	0xFF5
  3316                           prodh	equ	0xFF4
  3317                           prodl	equ	0xFF3
  3318                           intcon	equ	0xFF2
  3319                           intcon2	equ	0xFF1
  3320                           postinc0	equ	0xFEE
  3321                           wreg	equ	0xFE8
  3322                           postdec1	equ	0xFE5
  3323                           fsr1l	equ	0xFE1
  3324                           postinc2	equ	0xFDE
  3325                           postdec2	equ	0xFDD
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function ___llmod *****************
  3331 ;; Defined at:
  3332 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  dividend        4   29[COMRAM] unsigned long 
  3335 ;;  divisor         4   33[COMRAM] unsigned long 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;  counter         1   37[COMRAM] unsigned char 
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  4   29[COMRAM] unsigned long 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2, status,0
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3347 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;Total ram usage:        9 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    3
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_printf
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text7
  3362  001310                     __ptext7:
  3363                           	opt stack 0
  3364  001310                     ___llmod:
  3365                           	opt stack 26
  3366                           
  3367                           ;incstack = 0
  3368  001310  5022               	movf	___llmod@divisor,w,c
  3369  001312  1023               	iorwf	___llmod@divisor+1,w,c
  3370  001314  1024               	iorwf	___llmod@divisor+2,w,c
  3371  001316  1025               	iorwf	___llmod@divisor+3,w,c
  3372  001318  B4D8               	btfsc	status,2,c
  3373  00131A  D029               	goto	l1147
  3374  00131C  0E01               	movlw	1
  3375  00131E  6E26               	movwf	___llmod@counter,c
  3376  001320  D007               	goto	l4723
  3377  001322                     l4721:
  3378  001322  90D8               	bcf	status,0,c
  3379  001324  3622               	rlcf	___llmod@divisor,f,c
  3380  001326  3623               	rlcf	___llmod@divisor+1,f,c
  3381  001328  3624               	rlcf	___llmod@divisor+2,f,c
  3382  00132A  3625               	rlcf	___llmod@divisor+3,f,c
  3383  00132C  2A26               	incf	___llmod@counter,f,c
  3384  00132E  D000               	goto	l4723
  3385  001330                     l4723:
  3386  001330  BE25               	btfsc	___llmod@divisor+3,7,c
  3387  001332  D002               	goto	l4725
  3388  001334  D7F6               	goto	l4721
  3389  001336  D000               	goto	l4725
  3390  001338                     l4725:
  3391  001338  5022               	movf	___llmod@divisor,w,c
  3392  00133A  5C1E               	subwf	___llmod@dividend,w,c
  3393  00133C  5023               	movf	___llmod@divisor+1,w,c
  3394  00133E  581F               	subwfb	___llmod@dividend+1,w,c
  3395  001340  5024               	movf	___llmod@divisor+2,w,c
  3396  001342  5820               	subwfb	___llmod@dividend+2,w,c
  3397  001344  5025               	movf	___llmod@divisor+3,w,c
  3398  001346  5821               	subwfb	___llmod@dividend+3,w,c
  3399  001348  A0D8               	btfss	status,0,c
  3400  00134A  D009               	goto	l4729
  3401  00134C  5022               	movf	___llmod@divisor,w,c
  3402  00134E  5E1E               	subwf	___llmod@dividend,f,c
  3403  001350  5023               	movf	___llmod@divisor+1,w,c
  3404  001352  5A1F               	subwfb	___llmod@dividend+1,f,c
  3405  001354  5024               	movf	___llmod@divisor+2,w,c
  3406  001356  5A20               	subwfb	___llmod@dividend+2,f,c
  3407  001358  5025               	movf	___llmod@divisor+3,w,c
  3408  00135A  5A21               	subwfb	___llmod@dividend+3,f,c
  3409  00135C  D000               	goto	l4729
  3410  00135E                     l4729:
  3411  00135E  90D8               	bcf	status,0,c
  3412  001360  3225               	rrcf	___llmod@divisor+3,f,c
  3413  001362  3224               	rrcf	___llmod@divisor+2,f,c
  3414  001364  3223               	rrcf	___llmod@divisor+1,f,c
  3415  001366  3222               	rrcf	___llmod@divisor,f,c
  3416  001368  2E26               	decfsz	___llmod@counter,f,c
  3417  00136A  D7E6               	goto	l4725
  3418  00136C  D000               	goto	l1147
  3419  00136E                     l1147:
  3420  00136E  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3421  001372  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3422  001376  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3423  00137A  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3424  00137E  0012               	return		;funcret
  3425  001380                     __end_of___llmod:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           intcon	equ	0xFF2
  3434                           intcon2	equ	0xFF1
  3435                           postinc0	equ	0xFEE
  3436                           wreg	equ	0xFE8
  3437                           postdec1	equ	0xFE5
  3438                           fsr1l	equ	0xFE1
  3439                           postinc2	equ	0xFDE
  3440                           postdec2	equ	0xFDD
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function ___lldiv *****************
  3446 ;; Defined at:
  3447 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  dividend        4   16[COMRAM] unsigned long 
  3450 ;;  divisor         4   20[COMRAM] unsigned long 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  quotient        4   24[COMRAM] unsigned long 
  3453 ;;  counter         1   28[COMRAM] unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  4   16[COMRAM] unsigned long 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3463 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;Total ram usage:       13 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    3
  3470 ;; This function calls:
  3471 ;;		Nothing
  3472 ;; This function is called by:
  3473 ;;		_printf
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text8
  3478  001106                     __ptext8:
  3479                           	opt stack 0
  3480  001106                     ___lldiv:
  3481                           	opt stack 26
  3482                           
  3483                           ;incstack = 0
  3484  001106  0E00               	movlw	0
  3485  001108  6E19               	movwf	___lldiv@quotient,c
  3486  00110A  0E00               	movlw	0
  3487  00110C  6E1A               	movwf	___lldiv@quotient+1,c
  3488  00110E  0E00               	movlw	0
  3489  001110  6E1B               	movwf	___lldiv@quotient+2,c
  3490  001112  0E00               	movlw	0
  3491  001114  6E1C               	movwf	___lldiv@quotient+3,c
  3492  001116  5015               	movf	___lldiv@divisor,w,c
  3493  001118  1016               	iorwf	___lldiv@divisor+1,w,c
  3494  00111A  1017               	iorwf	___lldiv@divisor+2,w,c
  3495  00111C  1018               	iorwf	___lldiv@divisor+3,w,c
  3496  00111E  B4D8               	btfsc	status,2,c
  3497  001120  D02F               	goto	l1137
  3498  001122  0E01               	movlw	1
  3499  001124  6E1D               	movwf	___lldiv@counter,c
  3500  001126  D007               	goto	l4703
  3501  001128                     l4701:
  3502  001128  90D8               	bcf	status,0,c
  3503  00112A  3615               	rlcf	___lldiv@divisor,f,c
  3504  00112C  3616               	rlcf	___lldiv@divisor+1,f,c
  3505  00112E  3617               	rlcf	___lldiv@divisor+2,f,c
  3506  001130  3618               	rlcf	___lldiv@divisor+3,f,c
  3507  001132  2A1D               	incf	___lldiv@counter,f,c
  3508  001134  D000               	goto	l4703
  3509  001136                     l4703:
  3510  001136  BE18               	btfsc	___lldiv@divisor+3,7,c
  3511  001138  D002               	goto	l4705
  3512  00113A  D7F6               	goto	l4701
  3513  00113C  D000               	goto	l4705
  3514  00113E                     l4705:
  3515  00113E  90D8               	bcf	status,0,c
  3516  001140  3619               	rlcf	___lldiv@quotient,f,c
  3517  001142  361A               	rlcf	___lldiv@quotient+1,f,c
  3518  001144  361B               	rlcf	___lldiv@quotient+2,f,c
  3519  001146  361C               	rlcf	___lldiv@quotient+3,f,c
  3520  001148  5015               	movf	___lldiv@divisor,w,c
  3521  00114A  5C11               	subwf	___lldiv@dividend,w,c
  3522  00114C  5016               	movf	___lldiv@divisor+1,w,c
  3523  00114E  5812               	subwfb	___lldiv@dividend+1,w,c
  3524  001150  5017               	movf	___lldiv@divisor+2,w,c
  3525  001152  5813               	subwfb	___lldiv@dividend+2,w,c
  3526  001154  5018               	movf	___lldiv@divisor+3,w,c
  3527  001156  5814               	subwfb	___lldiv@dividend+3,w,c
  3528  001158  A0D8               	btfss	status,0,c
  3529  00115A  D00A               	goto	l4713
  3530  00115C  5015               	movf	___lldiv@divisor,w,c
  3531  00115E  5E11               	subwf	___lldiv@dividend,f,c
  3532  001160  5016               	movf	___lldiv@divisor+1,w,c
  3533  001162  5A12               	subwfb	___lldiv@dividend+1,f,c
  3534  001164  5017               	movf	___lldiv@divisor+2,w,c
  3535  001166  5A13               	subwfb	___lldiv@dividend+2,f,c
  3536  001168  5018               	movf	___lldiv@divisor+3,w,c
  3537  00116A  5A14               	subwfb	___lldiv@dividend+3,f,c
  3538  00116C  8019               	bsf	___lldiv@quotient,0,c
  3539  00116E  D000               	goto	l4713
  3540  001170                     l4713:
  3541  001170  90D8               	bcf	status,0,c
  3542  001172  3218               	rrcf	___lldiv@divisor+3,f,c
  3543  001174  3217               	rrcf	___lldiv@divisor+2,f,c
  3544  001176  3216               	rrcf	___lldiv@divisor+1,f,c
  3545  001178  3215               	rrcf	___lldiv@divisor,f,c
  3546  00117A  2E1D               	decfsz	___lldiv@counter,f,c
  3547  00117C  D7E0               	goto	l4705
  3548  00117E  D000               	goto	l1137
  3549  001180                     l1137:
  3550  001180  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3551  001184  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3552  001188  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3553  00118C  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3554  001190  0012               	return		;funcret
  3555  001192                     __end_of___lldiv:
  3556                           	opt stack 0
  3557                           tblptru	equ	0xFF8
  3558                           tblptrh	equ	0xFF7
  3559                           tblptrl	equ	0xFF6
  3560                           tablat	equ	0xFF5
  3561                           prodh	equ	0xFF4
  3562                           prodl	equ	0xFF3
  3563                           intcon	equ	0xFF2
  3564                           intcon2	equ	0xFF1
  3565                           postinc0	equ	0xFEE
  3566                           wreg	equ	0xFE8
  3567                           postdec1	equ	0xFE5
  3568                           fsr1l	equ	0xFE1
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _fillCircle *****************
  3576 ;; Defined at:
  3577 ;;		line 651 in file "ST7735_TFT.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  x0              2   58[COMRAM] int 
  3580 ;;  y0              2   60[COMRAM] int 
  3581 ;;  r               2   62[COMRAM] int 
  3582 ;;  color           2   64[COMRAM] unsigned int 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;		None               void
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3594 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;Total ram usage:        8 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    8
  3601 ;; This function calls:
  3602 ;;		_drawFastVLine
  3603 ;;		_fillCircleHelper
  3604 ;; This function is called by:
  3605 ;;		_main
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text9
  3610  00150E                     __ptext9:
  3611                           	opt stack 0
  3612  00150E                     _fillCircle:
  3613                           	opt stack 22
  3614                           
  3615                           ;ST7735_TFT.c: 653: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3616                           
  3617                           ;incstack = 0
  3618  00150E  503F               	movf	fillCircle@r,w,c
  3619  001510  0800               	sublw	0
  3620  001512  243D               	addwf	fillCircle@y0,w,c
  3621  001514  6E18               	movwf	drawFastVLine@y,c
  3622  001516  80D8               	bsf	status,0,c
  3623  001518  343F               	rlcf	fillCircle@r,w,c
  3624  00151A  6E19               	movwf	drawFastVLine@h,c
  3625  00151C  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3626  001520  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3627  001524  503B               	movf	fillCircle@x0,w,c
  3628  001526  ECC9  F008         	call	_drawFastVLine
  3629                           
  3630                           ;ST7735_TFT.c: 654: fillCircleHelper(x0, y0, r, 3, 0, color);
  3631  00152A  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3632  00152E  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3633  001532  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3634  001536  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3635  00153A  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3636  00153E  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3637  001542  0E00               	movlw	0
  3638  001544  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3639  001546  0E03               	movlw	3
  3640  001548  6E29               	movwf	fillCircleHelper@cornername,c
  3641  00154A  0E00               	movlw	0
  3642  00154C  6E2C               	movwf	fillCircleHelper@delta+1,c
  3643  00154E  0E00               	movlw	0
  3644  001550  6E2B               	movwf	fillCircleHelper@delta,c
  3645  001552  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3646  001556  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3647  00155A  EC61  F005         	call	_fillCircleHelper	;wreg free
  3648  00155E  0012               	return		;funcret
  3649  001560                     __end_of_fillCircle:
  3650                           	opt stack 0
  3651                           tblptru	equ	0xFF8
  3652                           tblptrh	equ	0xFF7
  3653                           tblptrl	equ	0xFF6
  3654                           tablat	equ	0xFF5
  3655                           prodh	equ	0xFF4
  3656                           prodl	equ	0xFF3
  3657                           intcon	equ	0xFF2
  3658                           intcon2	equ	0xFF1
  3659                           postinc0	equ	0xFEE
  3660                           wreg	equ	0xFE8
  3661                           postdec1	equ	0xFE5
  3662                           fsr1l	equ	0xFE1
  3663                           postinc2	equ	0xFDE
  3664                           postdec2	equ	0xFDD
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function _fillCircleHelper *****************
  3670 ;; Defined at:
  3671 ;;		line 626 in file "ST7735_TFT.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  x0              2   34[COMRAM] int 
  3674 ;;  y0              2   36[COMRAM] int 
  3675 ;;  r               2   38[COMRAM] int 
  3676 ;;  cornername      2   40[COMRAM] unsigned int 
  3677 ;;  delta           2   42[COMRAM] int 
  3678 ;;  color           2   44[COMRAM] unsigned int 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  y               2   56[COMRAM] int 
  3681 ;;  x               2   54[COMRAM] int 
  3682 ;;  f               2   52[COMRAM] int 
  3683 ;;  ddF_y           2   50[COMRAM] int 
  3684 ;;  ddF_x           2   48[COMRAM] int 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;		None               void
  3687 ;; Registers used:
  3688 ;;		wreg, status,2, status,0, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3694 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;Total ram usage:       24 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    7
  3701 ;; This function calls:
  3702 ;;		_drawFastVLine
  3703 ;; This function is called by:
  3704 ;;		_fillCircle
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text10
  3709  000AC2                     __ptext10:
  3710                           	opt stack 0
  3711  000AC2                     _fillCircleHelper:
  3712                           	opt stack 22
  3713                           
  3714                           ;ST7735_TFT.c: 628: signed int f, ddF_x, ddF_y, x, y;
  3715                           ;ST7735_TFT.c: 629: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3716                           
  3717                           ;incstack = 0
  3718  000AC2  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3719  000AC6  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3720  000ACA  1E2F               	comf	??_fillCircleHelper,f,c
  3721  000ACC  1E30               	comf	??_fillCircleHelper+1,f,c
  3722  000ACE  4A2F               	infsnz	??_fillCircleHelper,f,c
  3723  000AD0  2A30               	incf	??_fillCircleHelper+1,f,c
  3724  000AD2  0E01               	movlw	1
  3725  000AD4  242F               	addwf	??_fillCircleHelper,w,c
  3726  000AD6  6E35               	movwf	fillCircleHelper@f,c
  3727  000AD8  0E00               	movlw	0
  3728  000ADA  2030               	addwfc	??_fillCircleHelper+1,w,c
  3729  000ADC  6E36               	movwf	fillCircleHelper@f+1,c
  3730  000ADE  0E00               	movlw	0
  3731  000AE0  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3732  000AE2  0E01               	movlw	1
  3733  000AE4  6E31               	movwf	fillCircleHelper@ddF_x,c
  3734  000AE6  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3735  000AEA  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3736  000AEE  90D8               	bcf	status,0,c
  3737  000AF0  362F               	rlcf	??_fillCircleHelper,f,c
  3738  000AF2  3630               	rlcf	??_fillCircleHelper+1,f,c
  3739  000AF4  1E2F               	comf	??_fillCircleHelper,f,c
  3740  000AF6  1E30               	comf	??_fillCircleHelper+1,f,c
  3741  000AF8  4A2F               	infsnz	??_fillCircleHelper,f,c
  3742  000AFA  2A30               	incf	??_fillCircleHelper+1,f,c
  3743  000AFC  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3744  000B00  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3745  000B04  0E00               	movlw	0
  3746  000B06  6E38               	movwf	fillCircleHelper@x+1,c
  3747  000B08  0E00               	movlw	0
  3748  000B0A  6E37               	movwf	fillCircleHelper@x,c
  3749  000B0C  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3750  000B10  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3751                           
  3752                           ;ST7735_TFT.c: 630: while (x<y) {
  3753  000B14  D067               	goto	l4681
  3754  000B16                     l4661:
  3755                           
  3756                           ;ST7735_TFT.c: 631: if (f >= 0) {
  3757  000B16  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3758  000B18  D00B               	goto	l534
  3759                           
  3760                           ;ST7735_TFT.c: 632: y--;
  3761  000B1A  0639               	decf	fillCircleHelper@y,f,c
  3762  000B1C  A0D8               	btfss	status,0,c
  3763  000B1E  063A               	decf	fillCircleHelper@y+1,f,c
  3764                           
  3765                           ;ST7735_TFT.c: 633: ddF_y += 2;
  3766  000B20  0E02               	movlw	2
  3767  000B22  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3768  000B24  0E00               	movlw	0
  3769  000B26  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3770                           
  3771                           ;ST7735_TFT.c: 634: f += ddF_y;
  3772  000B28  5033               	movf	fillCircleHelper@ddF_y,w,c
  3773  000B2A  2635               	addwf	fillCircleHelper@f,f,c
  3774  000B2C  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3775  000B2E  2236               	addwfc	fillCircleHelper@f+1,f,c
  3776  000B30                     l534:
  3777                           
  3778                           ;ST7735_TFT.c: 635: }
  3779                           ;ST7735_TFT.c: 636: x++;
  3780  000B30  4A37               	infsnz	fillCircleHelper@x,f,c
  3781  000B32  2A38               	incf	fillCircleHelper@x+1,f,c
  3782                           
  3783                           ;ST7735_TFT.c: 637: ddF_x += 2;
  3784  000B34  0E02               	movlw	2
  3785  000B36  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3786  000B38  0E00               	movlw	0
  3787  000B3A  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3788                           
  3789                           ;ST7735_TFT.c: 638: f += ddF_x;
  3790  000B3C  5031               	movf	fillCircleHelper@ddF_x,w,c
  3791  000B3E  2635               	addwf	fillCircleHelper@f,f,c
  3792  000B40  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3793  000B42  2236               	addwfc	fillCircleHelper@f+1,f,c
  3794                           
  3795                           ;ST7735_TFT.c: 640: if (cornername & 0x1) {
  3796  000B44  A029               	btfss	fillCircleHelper@cornername,0,c
  3797  000B46  D025               	goto	l4677
  3798                           
  3799                           ;ST7735_TFT.c: 641: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3800  000B48  5039               	movf	fillCircleHelper@y,w,c
  3801  000B4A  0800               	sublw	0
  3802  000B4C  2425               	addwf	fillCircleHelper@y0,w,c
  3803  000B4E  6E18               	movwf	drawFastVLine@y,c
  3804  000B50  5039               	movf	fillCircleHelper@y,w,c
  3805  000B52  2439               	addwf	fillCircleHelper@y,w,c
  3806  000B54  242B               	addwf	fillCircleHelper@delta,w,c
  3807  000B56  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3808  000B58  282F               	incf	??_fillCircleHelper,w,c
  3809  000B5A  6E19               	movwf	drawFastVLine@h,c
  3810  000B5C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3811  000B60  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3812  000B64  5023               	movf	fillCircleHelper@x0,w,c
  3813  000B66  2437               	addwf	fillCircleHelper@x,w,c
  3814  000B68  ECC9  F008         	call	_drawFastVLine
  3815                           
  3816                           ;ST7735_TFT.c: 642: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3817  000B6C  5037               	movf	fillCircleHelper@x,w,c
  3818  000B6E  0800               	sublw	0
  3819  000B70  2425               	addwf	fillCircleHelper@y0,w,c
  3820  000B72  6E18               	movwf	drawFastVLine@y,c
  3821  000B74  5037               	movf	fillCircleHelper@x,w,c
  3822  000B76  2437               	addwf	fillCircleHelper@x,w,c
  3823  000B78  242B               	addwf	fillCircleHelper@delta,w,c
  3824  000B7A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3825  000B7C  282F               	incf	??_fillCircleHelper,w,c
  3826  000B7E  6E19               	movwf	drawFastVLine@h,c
  3827  000B80  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3828  000B84  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3829  000B88  5023               	movf	fillCircleHelper@x0,w,c
  3830  000B8A  2439               	addwf	fillCircleHelper@y,w,c
  3831  000B8C  ECC9  F008         	call	_drawFastVLine
  3832  000B90  D000               	goto	l4677
  3833  000B92                     l4677:
  3834                           
  3835                           ;ST7735_TFT.c: 643: }
  3836                           ;ST7735_TFT.c: 644: if (cornername & 0x2) {
  3837  000B92  A229               	btfss	fillCircleHelper@cornername,1,c
  3838  000B94  D027               	goto	l4681
  3839                           
  3840                           ;ST7735_TFT.c: 645: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3841  000B96  5039               	movf	fillCircleHelper@y,w,c
  3842  000B98  0800               	sublw	0
  3843  000B9A  2425               	addwf	fillCircleHelper@y0,w,c
  3844  000B9C  6E18               	movwf	drawFastVLine@y,c
  3845  000B9E  5039               	movf	fillCircleHelper@y,w,c
  3846  000BA0  2439               	addwf	fillCircleHelper@y,w,c
  3847  000BA2  242B               	addwf	fillCircleHelper@delta,w,c
  3848  000BA4  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3849  000BA6  282F               	incf	??_fillCircleHelper,w,c
  3850  000BA8  6E19               	movwf	drawFastVLine@h,c
  3851  000BAA  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3852  000BAE  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3853  000BB2  5037               	movf	fillCircleHelper@x,w,c
  3854  000BB4  0800               	sublw	0
  3855  000BB6  2423               	addwf	fillCircleHelper@x0,w,c
  3856  000BB8  ECC9  F008         	call	_drawFastVLine
  3857                           
  3858                           ;ST7735_TFT.c: 646: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3859  000BBC  5037               	movf	fillCircleHelper@x,w,c
  3860  000BBE  0800               	sublw	0
  3861  000BC0  2425               	addwf	fillCircleHelper@y0,w,c
  3862  000BC2  6E18               	movwf	drawFastVLine@y,c
  3863  000BC4  5037               	movf	fillCircleHelper@x,w,c
  3864  000BC6  2437               	addwf	fillCircleHelper@x,w,c
  3865  000BC8  242B               	addwf	fillCircleHelper@delta,w,c
  3866  000BCA  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3867  000BCC  282F               	incf	??_fillCircleHelper,w,c
  3868  000BCE  6E19               	movwf	drawFastVLine@h,c
  3869  000BD0  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3870  000BD4  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3871  000BD8  5039               	movf	fillCircleHelper@y,w,c
  3872  000BDA  0800               	sublw	0
  3873  000BDC  2423               	addwf	fillCircleHelper@x0,w,c
  3874  000BDE  ECC9  F008         	call	_drawFastVLine
  3875  000BE2  D000               	goto	l4681
  3876  000BE4                     l4681:
  3877  000BE4  5039               	movf	fillCircleHelper@y,w,c
  3878  000BE6  5C37               	subwf	fillCircleHelper@x,w,c
  3879  000BE8  5038               	movf	fillCircleHelper@x+1,w,c
  3880  000BEA  0A80               	xorlw	128
  3881  000BEC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3882  000BEE  503A               	movf	fillCircleHelper@y+1,w,c
  3883  000BF0  0A80               	xorlw	128
  3884  000BF2  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3885  000BF4  A0D8               	btfss	status,0,c
  3886  000BF6  D78F               	goto	l4661
  3887  000BF8  0012               	return		;funcret
  3888  000BFA                     __end_of_fillCircleHelper:
  3889                           	opt stack 0
  3890                           tblptru	equ	0xFF8
  3891                           tblptrh	equ	0xFF7
  3892                           tblptrl	equ	0xFF6
  3893                           tablat	equ	0xFF5
  3894                           prodh	equ	0xFF4
  3895                           prodl	equ	0xFF3
  3896                           intcon	equ	0xFF2
  3897                           intcon2	equ	0xFF1
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           postdec1	equ	0xFE5
  3901                           fsr1l	equ	0xFE1
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           fsr2h	equ	0xFDA
  3905                           fsr2l	equ	0xFD9
  3906                           status	equ	0xFD8
  3907                           
  3908 ;; *************** function _drawCircle *****************
  3909 ;; Defined at:
  3910 ;;		line 565 in file "ST7735_TFT.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  x0              2   27[COMRAM] int 
  3913 ;;  y0              2   29[COMRAM] int 
  3914 ;;  r               2   31[COMRAM] int 
  3915 ;;  color           2   33[COMRAM] unsigned int 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  y               2   45[COMRAM] int 
  3918 ;;  x               2   43[COMRAM] int 
  3919 ;;  f               2   41[COMRAM] int 
  3920 ;;  ddF_y           2   39[COMRAM] int 
  3921 ;;  ddF_x           2   37[COMRAM] int 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;		None               void
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3931 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;Total ram usage:       20 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    7
  3938 ;; This function calls:
  3939 ;;		_drawPixel
  3940 ;; This function is called by:
  3941 ;;		_main
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text11
  3946  00066A                     __ptext11:
  3947                           	opt stack 0
  3948  00066A                     _drawCircle:
  3949                           	opt stack 23
  3950                           
  3951                           ;ST7735_TFT.c: 567: signed int f, ddF_x, ddF_y, x, y;
  3952                           ;ST7735_TFT.c: 568: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3953                           
  3954                           ;incstack = 0
  3955  00066A  C020  F024         	movff	drawCircle@r,??_drawCircle
  3956  00066E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3957  000672  1E24               	comf	??_drawCircle,f,c
  3958  000674  1E25               	comf	??_drawCircle+1,f,c
  3959  000676  4A24               	infsnz	??_drawCircle,f,c
  3960  000678  2A25               	incf	??_drawCircle+1,f,c
  3961  00067A  0E01               	movlw	1
  3962  00067C  2424               	addwf	??_drawCircle,w,c
  3963  00067E  6E2A               	movwf	drawCircle@f,c
  3964  000680  0E00               	movlw	0
  3965  000682  2025               	addwfc	??_drawCircle+1,w,c
  3966  000684  6E2B               	movwf	drawCircle@f+1,c
  3967  000686  0E00               	movlw	0
  3968  000688  6E27               	movwf	drawCircle@ddF_x+1,c
  3969  00068A  0E01               	movlw	1
  3970  00068C  6E26               	movwf	drawCircle@ddF_x,c
  3971  00068E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3972  000692  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3973  000696  90D8               	bcf	status,0,c
  3974  000698  3624               	rlcf	??_drawCircle,f,c
  3975  00069A  3625               	rlcf	??_drawCircle+1,f,c
  3976  00069C  1E24               	comf	??_drawCircle,f,c
  3977  00069E  1E25               	comf	??_drawCircle+1,f,c
  3978  0006A0  4A24               	infsnz	??_drawCircle,f,c
  3979  0006A2  2A25               	incf	??_drawCircle+1,f,c
  3980  0006A4  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3981  0006A8  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3982  0006AC  0E00               	movlw	0
  3983  0006AE  6E2D               	movwf	drawCircle@x+1,c
  3984  0006B0  0E00               	movlw	0
  3985  0006B2  6E2C               	movwf	drawCircle@x,c
  3986  0006B4  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3987  0006B8  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3988                           
  3989                           ;ST7735_TFT.c: 569: drawPixel(x0 , y0 + r, color);
  3990  0006BC  501E               	movf	drawCircle@y0,w,c
  3991  0006BE  2420               	addwf	drawCircle@r,w,c
  3992  0006C0  6E18               	movwf	drawPixel@y,c
  3993  0006C2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3994  0006C6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3995  0006CA  501C               	movf	drawCircle@x0,w,c
  3996  0006CC  EC31  F00C         	call	_drawPixel
  3997                           
  3998                           ;ST7735_TFT.c: 570: drawPixel(x0 , y0 - r, color);
  3999  0006D0  5020               	movf	drawCircle@r,w,c
  4000  0006D2  0800               	sublw	0
  4001  0006D4  241E               	addwf	drawCircle@y0,w,c
  4002  0006D6  6E18               	movwf	drawPixel@y,c
  4003  0006D8  C022  F019         	movff	drawCircle@color,drawPixel@color
  4004  0006DC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4005  0006E0  501C               	movf	drawCircle@x0,w,c
  4006  0006E2  EC31  F00C         	call	_drawPixel
  4007                           
  4008                           ;ST7735_TFT.c: 571: drawPixel(x0+r, y0 , color);
  4009  0006E6  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4010  0006EA  C022  F019         	movff	drawCircle@color,drawPixel@color
  4011  0006EE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4012  0006F2  501C               	movf	drawCircle@x0,w,c
  4013  0006F4  2420               	addwf	drawCircle@r,w,c
  4014  0006F6  EC31  F00C         	call	_drawPixel
  4015                           
  4016                           ;ST7735_TFT.c: 572: drawPixel(x0-r, y0 , color);
  4017  0006FA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4018  0006FE  C022  F019         	movff	drawCircle@color,drawPixel@color
  4019  000702  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4020  000706  5020               	movf	drawCircle@r,w,c
  4021  000708  0800               	sublw	0
  4022  00070A  241C               	addwf	drawCircle@x0,w,c
  4023  00070C  EC31  F00C         	call	_drawPixel
  4024                           
  4025                           ;ST7735_TFT.c: 573: while (x < y) {
  4026  000710  D078               	goto	l5045
  4027  000712                     l5017:
  4028                           
  4029                           ;ST7735_TFT.c: 574: if (f >= 0) {
  4030  000712  BE2B               	btfsc	drawCircle@f+1,7,c
  4031  000714  D00B               	goto	l516
  4032                           
  4033                           ;ST7735_TFT.c: 575: y--;
  4034  000716  062E               	decf	drawCircle@y,f,c
  4035  000718  A0D8               	btfss	status,0,c
  4036  00071A  062F               	decf	drawCircle@y+1,f,c
  4037                           
  4038                           ;ST7735_TFT.c: 576: ddF_y += 2;
  4039  00071C  0E02               	movlw	2
  4040  00071E  2628               	addwf	drawCircle@ddF_y,f,c
  4041  000720  0E00               	movlw	0
  4042  000722  2229               	addwfc	drawCircle@ddF_y+1,f,c
  4043                           
  4044                           ;ST7735_TFT.c: 577: f += ddF_y;
  4045  000724  5028               	movf	drawCircle@ddF_y,w,c
  4046  000726  262A               	addwf	drawCircle@f,f,c
  4047  000728  5029               	movf	drawCircle@ddF_y+1,w,c
  4048  00072A  222B               	addwfc	drawCircle@f+1,f,c
  4049  00072C                     l516:
  4050                           
  4051                           ;ST7735_TFT.c: 578: }
  4052                           ;ST7735_TFT.c: 579: x++;
  4053  00072C  4A2C               	infsnz	drawCircle@x,f,c
  4054  00072E  2A2D               	incf	drawCircle@x+1,f,c
  4055                           
  4056                           ;ST7735_TFT.c: 580: ddF_x += 2;
  4057  000730  0E02               	movlw	2
  4058  000732  2626               	addwf	drawCircle@ddF_x,f,c
  4059  000734  0E00               	movlw	0
  4060  000736  2227               	addwfc	drawCircle@ddF_x+1,f,c
  4061                           
  4062                           ;ST7735_TFT.c: 581: f += ddF_x;
  4063  000738  5026               	movf	drawCircle@ddF_x,w,c
  4064  00073A  262A               	addwf	drawCircle@f,f,c
  4065  00073C  5027               	movf	drawCircle@ddF_x+1,w,c
  4066  00073E  222B               	addwfc	drawCircle@f+1,f,c
  4067                           
  4068                           ;ST7735_TFT.c: 582: drawPixel(x0 + x, y0 + y, color);
  4069  000740  501E               	movf	drawCircle@y0,w,c
  4070  000742  242E               	addwf	drawCircle@y,w,c
  4071  000744  6E18               	movwf	drawPixel@y,c
  4072  000746  C022  F019         	movff	drawCircle@color,drawPixel@color
  4073  00074A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4074  00074E  501C               	movf	drawCircle@x0,w,c
  4075  000750  242C               	addwf	drawCircle@x,w,c
  4076  000752  EC31  F00C         	call	_drawPixel
  4077                           
  4078                           ;ST7735_TFT.c: 583: drawPixel(x0 - x, y0 + y, color);
  4079  000756  501E               	movf	drawCircle@y0,w,c
  4080  000758  242E               	addwf	drawCircle@y,w,c
  4081  00075A  6E18               	movwf	drawPixel@y,c
  4082  00075C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4083  000760  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4084  000764  502C               	movf	drawCircle@x,w,c
  4085  000766  0800               	sublw	0
  4086  000768  241C               	addwf	drawCircle@x0,w,c
  4087  00076A  EC31  F00C         	call	_drawPixel
  4088                           
  4089                           ;ST7735_TFT.c: 584: drawPixel(x0 + x, y0 - y, color);
  4090  00076E  502E               	movf	drawCircle@y,w,c
  4091  000770  0800               	sublw	0
  4092  000772  241E               	addwf	drawCircle@y0,w,c
  4093  000774  6E18               	movwf	drawPixel@y,c
  4094  000776  C022  F019         	movff	drawCircle@color,drawPixel@color
  4095  00077A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4096  00077E  501C               	movf	drawCircle@x0,w,c
  4097  000780  242C               	addwf	drawCircle@x,w,c
  4098  000782  EC31  F00C         	call	_drawPixel
  4099                           
  4100                           ;ST7735_TFT.c: 585: drawPixel(x0 - x, y0 - y, color);
  4101  000786  502E               	movf	drawCircle@y,w,c
  4102  000788  0800               	sublw	0
  4103  00078A  241E               	addwf	drawCircle@y0,w,c
  4104  00078C  6E18               	movwf	drawPixel@y,c
  4105  00078E  C022  F019         	movff	drawCircle@color,drawPixel@color
  4106  000792  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4107  000796  502C               	movf	drawCircle@x,w,c
  4108  000798  0800               	sublw	0
  4109  00079A  241C               	addwf	drawCircle@x0,w,c
  4110  00079C  EC31  F00C         	call	_drawPixel
  4111                           
  4112                           ;ST7735_TFT.c: 586: drawPixel(x0 + y, y0 + x, color);
  4113  0007A0  501E               	movf	drawCircle@y0,w,c
  4114  0007A2  242C               	addwf	drawCircle@x,w,c
  4115  0007A4  6E18               	movwf	drawPixel@y,c
  4116  0007A6  C022  F019         	movff	drawCircle@color,drawPixel@color
  4117  0007AA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4118  0007AE  501C               	movf	drawCircle@x0,w,c
  4119  0007B0  242E               	addwf	drawCircle@y,w,c
  4120  0007B2  EC31  F00C         	call	_drawPixel
  4121                           
  4122                           ;ST7735_TFT.c: 587: drawPixel(x0 - y, y0 + x, color);
  4123  0007B6  501E               	movf	drawCircle@y0,w,c
  4124  0007B8  242C               	addwf	drawCircle@x,w,c
  4125  0007BA  6E18               	movwf	drawPixel@y,c
  4126  0007BC  C022  F019         	movff	drawCircle@color,drawPixel@color
  4127  0007C0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4128  0007C4  502E               	movf	drawCircle@y,w,c
  4129  0007C6  0800               	sublw	0
  4130  0007C8  241C               	addwf	drawCircle@x0,w,c
  4131  0007CA  EC31  F00C         	call	_drawPixel
  4132                           
  4133                           ;ST7735_TFT.c: 588: drawPixel(x0 + y, y0 - x, color);
  4134  0007CE  502C               	movf	drawCircle@x,w,c
  4135  0007D0  0800               	sublw	0
  4136  0007D2  241E               	addwf	drawCircle@y0,w,c
  4137  0007D4  6E18               	movwf	drawPixel@y,c
  4138  0007D6  C022  F019         	movff	drawCircle@color,drawPixel@color
  4139  0007DA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4140  0007DE  501C               	movf	drawCircle@x0,w,c
  4141  0007E0  242E               	addwf	drawCircle@y,w,c
  4142  0007E2  EC31  F00C         	call	_drawPixel
  4143                           
  4144                           ;ST7735_TFT.c: 589: drawPixel(x0 - y, y0 - x, color);
  4145  0007E6  502C               	movf	drawCircle@x,w,c
  4146  0007E8  0800               	sublw	0
  4147  0007EA  241E               	addwf	drawCircle@y0,w,c
  4148  0007EC  6E18               	movwf	drawPixel@y,c
  4149  0007EE  C022  F019         	movff	drawCircle@color,drawPixel@color
  4150  0007F2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4151  0007F6  502E               	movf	drawCircle@y,w,c
  4152  0007F8  0800               	sublw	0
  4153  0007FA  241C               	addwf	drawCircle@x0,w,c
  4154  0007FC  EC31  F00C         	call	_drawPixel
  4155  000800  D000               	goto	l5045
  4156  000802                     l5045:
  4157  000802  502E               	movf	drawCircle@y,w,c
  4158  000804  5C2C               	subwf	drawCircle@x,w,c
  4159  000806  502D               	movf	drawCircle@x+1,w,c
  4160  000808  0A80               	xorlw	128
  4161  00080A  6E24               	movwf	??_drawCircle& (0+255),c
  4162  00080C  502F               	movf	drawCircle@y+1,w,c
  4163  00080E  0A80               	xorlw	128
  4164  000810  5824               	subwfb	??_drawCircle& (0+255),w,c
  4165  000812  A0D8               	btfss	status,0,c
  4166  000814  D77E               	goto	l5017
  4167  000816  0012               	return		;funcret
  4168  000818                     __end_of_drawCircle:
  4169                           	opt stack 0
  4170                           tblptru	equ	0xFF8
  4171                           tblptrh	equ	0xFF7
  4172                           tblptrl	equ	0xFF6
  4173                           tablat	equ	0xFF5
  4174                           prodh	equ	0xFF4
  4175                           prodl	equ	0xFF3
  4176                           intcon	equ	0xFF2
  4177                           intcon2	equ	0xFF1
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           postdec1	equ	0xFE5
  4181                           fsr1l	equ	0xFE1
  4182                           postinc2	equ	0xFDE
  4183                           postdec2	equ	0xFDD
  4184                           fsr2h	equ	0xFDA
  4185                           fsr2l	equ	0xFD9
  4186                           status	equ	0xFD8
  4187                           
  4188 ;; *************** function ___awdiv *****************
  4189 ;; Defined at:
  4190 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;  dividend        2   22[COMRAM] int 
  4193 ;;  divisor         2   24[COMRAM] int 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  quotient        2   28[COMRAM] int 
  4196 ;;  sign            1   27[COMRAM] unsigned char 
  4197 ;;  counter         1   26[COMRAM] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  2   22[COMRAM] int 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:        8 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    3
  4214 ;; This function calls:
  4215 ;;		Nothing
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text12
  4222  000FE2                     __ptext12:
  4223                           	opt stack 0
  4224  000FE2                     ___awdiv:
  4225                           	opt stack 27
  4226                           
  4227                           ;incstack = 0
  4228  000FE2  0E00               	movlw	0
  4229  000FE4  6E1C               	movwf	___awdiv@sign,c
  4230  000FE6  AE1A               	btfss	___awdiv@divisor+1,7,c
  4231  000FE8  D007               	goto	l5079
  4232  000FEA  6C19               	negf	___awdiv@divisor,c
  4233  000FEC  1E1A               	comf	___awdiv@divisor+1,f,c
  4234  000FEE  B0D8               	btfsc	status,0,c
  4235  000FF0  2A1A               	incf	___awdiv@divisor+1,f,c
  4236  000FF2  0E01               	movlw	1
  4237  000FF4  6E1C               	movwf	___awdiv@sign,c
  4238  000FF6  D000               	goto	l5079
  4239  000FF8                     l5079:
  4240  000FF8  AE18               	btfss	___awdiv@dividend+1,7,c
  4241  000FFA  D007               	goto	l5085
  4242  000FFC  6C17               	negf	___awdiv@dividend,c
  4243  000FFE  1E18               	comf	___awdiv@dividend+1,f,c
  4244  001000  B0D8               	btfsc	status,0,c
  4245  001002  2A18               	incf	___awdiv@dividend+1,f,c
  4246  001004  0E01               	movlw	1
  4247  001006  1A1C               	xorwf	___awdiv@sign,f,c
  4248  001008  D000               	goto	l5085
  4249  00100A                     l5085:
  4250  00100A  0E00               	movlw	0
  4251  00100C  6E1E               	movwf	___awdiv@quotient+1,c
  4252  00100E  0E00               	movlw	0
  4253  001010  6E1D               	movwf	___awdiv@quotient,c
  4254  001012  5019               	movf	___awdiv@divisor,w,c
  4255  001014  101A               	iorwf	___awdiv@divisor+1,w,c
  4256  001016  B4D8               	btfsc	status,2,c
  4257  001018  D021               	goto	l5107
  4258  00101A  0E01               	movlw	1
  4259  00101C  6E1B               	movwf	___awdiv@counter,c
  4260  00101E  D005               	goto	l5093
  4261  001020                     l5091:
  4262  001020  90D8               	bcf	status,0,c
  4263  001022  3619               	rlcf	___awdiv@divisor,f,c
  4264  001024  361A               	rlcf	___awdiv@divisor+1,f,c
  4265  001026  2A1B               	incf	___awdiv@counter,f,c
  4266  001028  D000               	goto	l5093
  4267  00102A                     l5093:
  4268  00102A  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4269  00102C  D002               	goto	l5095
  4270  00102E  D7F8               	goto	l5091
  4271  001030  D000               	goto	l5095
  4272  001032                     l5095:
  4273  001032  90D8               	bcf	status,0,c
  4274  001034  361D               	rlcf	___awdiv@quotient,f,c
  4275  001036  361E               	rlcf	___awdiv@quotient+1,f,c
  4276  001038  5019               	movf	___awdiv@divisor,w,c
  4277  00103A  5C17               	subwf	___awdiv@dividend,w,c
  4278  00103C  501A               	movf	___awdiv@divisor+1,w,c
  4279  00103E  5818               	subwfb	___awdiv@dividend+1,w,c
  4280  001040  A0D8               	btfss	status,0,c
  4281  001042  D006               	goto	l5103
  4282  001044  5019               	movf	___awdiv@divisor,w,c
  4283  001046  5E17               	subwf	___awdiv@dividend,f,c
  4284  001048  501A               	movf	___awdiv@divisor+1,w,c
  4285  00104A  5A18               	subwfb	___awdiv@dividend+1,f,c
  4286  00104C  801D               	bsf	___awdiv@quotient,0,c
  4287  00104E  D000               	goto	l5103
  4288  001050                     l5103:
  4289  001050  90D8               	bcf	status,0,c
  4290  001052  321A               	rrcf	___awdiv@divisor+1,f,c
  4291  001054  3219               	rrcf	___awdiv@divisor,f,c
  4292  001056  2E1B               	decfsz	___awdiv@counter,f,c
  4293  001058  D7EC               	goto	l5095
  4294  00105A  D000               	goto	l5107
  4295  00105C                     l5107:
  4296  00105C  501C               	movf	___awdiv@sign,w,c
  4297  00105E  B4D8               	btfsc	status,2,c
  4298  001060  D005               	goto	l5111
  4299  001062  6C1D               	negf	___awdiv@quotient,c
  4300  001064  1E1E               	comf	___awdiv@quotient+1,f,c
  4301  001066  B0D8               	btfsc	status,0,c
  4302  001068  2A1E               	incf	___awdiv@quotient+1,f,c
  4303  00106A  D000               	goto	l5111
  4304  00106C                     l5111:
  4305  00106C  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4306  001070  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4307  001074  D000               	goto	l870
  4308  001076                     l870:
  4309  001076  0012               	return		;funcret
  4310  001078                     __end_of___awdiv:
  4311                           	opt stack 0
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           intcon	equ	0xFF2
  4319                           intcon2	equ	0xFF1
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           postdec1	equ	0xFE5
  4323                           fsr1l	equ	0xFE1
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function _Initialize_Screen *****************
  4331 ;; Defined at:
  4332 ;;		line 272 in file "Lab10_sample_3.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;		None
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;		None
  4337 ;; Return value:  Size  Location     Type
  4338 ;;		None               void
  4339 ;; Registers used:
  4340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;Total ram usage:        0 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:   10
  4353 ;; This function calls:
  4354 ;;		_LCD_Reset
  4355 ;;		_TFT_GreenTab_Initialize
  4356 ;;		_drawtext
  4357 ;;		_fillScreen
  4358 ;;		_strcpy
  4359 ;; This function is called by:
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text13
  4365  001078                     __ptext13:
  4366                           	opt stack 0
  4367  001078                     _Initialize_Screen:
  4368                           	opt stack 20
  4369                           
  4370                           ;Lab10_sample_3.c: 274: LCD_Reset();
  4371                           
  4372                           ;incstack = 0
  4373  001078  ECFD  F00C         	call	_LCD_Reset	;wreg free
  4374                           
  4375                           ;Lab10_sample_3.c: 275: TFT_GreenTab_Initialize();
  4376  00107C  EC61  F00C         	call	_TFT_GreenTab_Initialize	;wreg free
  4377                           
  4378                           ;Lab10_sample_3.c: 276: fillScreen(0x0000);
  4379  001080  0E00               	movlw	0
  4380  001082  6E25               	movwf	fillScreen@color+1,c
  4381  001084  0E00               	movlw	0
  4382  001086  6E24               	movwf	fillScreen@color,c
  4383  001088  ECBA  F00C         	call	_fillScreen	;wreg free
  4384                           
  4385                           ;Lab10_sample_3.c: 279: txt = buffer;
  4386  00108C  0EBF               	movlw	low _buffer
  4387  00108E  6E50               	movwf	_txt,c
  4388  001090  0E00               	movlw	high _buffer
  4389  001092  6E51               	movwf	_txt+1,c
  4390                           
  4391                           ;Lab10_sample_3.c: 280: strcpy(txt, "ECE3301L Fall 21-S3");
  4392  001094  C050  F011         	movff	_txt,strcpy@to
  4393  001098  C051  F012         	movff	_txt+1,strcpy@to+1
  4394  00109C  0ECD               	movlw	low STR_5
  4395  00109E  6E13               	movwf	strcpy@from,c
  4396  0010A0  0EFF               	movlw	high STR_5
  4397  0010A2  6E14               	movwf	strcpy@from+1,c
  4398  0010A4  EC00  F00C         	call	_strcpy	;wreg free
  4399                           
  4400                           ;Lab10_sample_3.c: 281: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4401  0010A8  0E02               	movlw	2
  4402  0010AA  6E39               	movwf	drawtext@y,c
  4403  0010AC  C050  F03A         	movff	_txt,drawtext@_text
  4404  0010B0  C051  F03B         	movff	_txt+1,drawtext@_text+1
  4405  0010B4  0EFF               	movlw	255
  4406  0010B6  6E3D               	movwf	drawtext@color+1,c
  4407  0010B8  683C               	setf	drawtext@color,c
  4408  0010BA  0E00               	movlw	0
  4409  0010BC  6E3F               	movwf	drawtext@bg+1,c
  4410  0010BE  0E00               	movlw	0
  4411  0010C0  6E3E               	movwf	drawtext@bg,c
  4412  0010C2  0E01               	movlw	1
  4413  0010C4  6E40               	movwf	drawtext@size,c
  4414  0010C6  0E02               	movlw	2
  4415  0010C8  EC85  F006         	call	_drawtext
  4416                           
  4417                           ;Lab10_sample_3.c: 283: strcpy(txt, "LAB 10 ");
  4418  0010CC  C050  F011         	movff	_txt,strcpy@to
  4419  0010D0  C051  F012         	movff	_txt+1,strcpy@to+1
  4420  0010D4  0EF2               	movlw	low STR_6
  4421  0010D6  6E13               	movwf	strcpy@from,c
  4422  0010D8  0EFF               	movlw	high STR_6
  4423  0010DA  6E14               	movwf	strcpy@from+1,c
  4424  0010DC  EC00  F00C         	call	_strcpy	;wreg free
  4425                           
  4426                           ;Lab10_sample_3.c: 284: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4427  0010E0  0E0A               	movlw	10
  4428  0010E2  6E39               	movwf	drawtext@y,c
  4429  0010E4  C050  F03A         	movff	_txt,drawtext@_text
  4430  0010E8  C051  F03B         	movff	_txt+1,drawtext@_text+1
  4431  0010EC  0EFF               	movlw	255
  4432  0010EE  6E3D               	movwf	drawtext@color+1,c
  4433  0010F0  683C               	setf	drawtext@color,c
  4434  0010F2  0E00               	movlw	0
  4435  0010F4  6E3F               	movwf	drawtext@bg+1,c
  4436  0010F6  0E00               	movlw	0
  4437  0010F8  6E3E               	movwf	drawtext@bg,c
  4438  0010FA  0E01               	movlw	1
  4439  0010FC  6E40               	movwf	drawtext@size,c
  4440  0010FE  0E32               	movlw	50
  4441  001100  EC85  F006         	call	_drawtext
  4442  001104  0012               	return		;funcret
  4443  001106                     __end_of_Initialize_Screen:
  4444                           	opt stack 0
  4445                           tblptru	equ	0xFF8
  4446                           tblptrh	equ	0xFF7
  4447                           tblptrl	equ	0xFF6
  4448                           tablat	equ	0xFF5
  4449                           prodh	equ	0xFF4
  4450                           prodl	equ	0xFF3
  4451                           intcon	equ	0xFF2
  4452                           intcon2	equ	0xFF1
  4453                           postinc0	equ	0xFEE
  4454                           wreg	equ	0xFE8
  4455                           postdec1	equ	0xFE5
  4456                           fsr1l	equ	0xFE1
  4457                           postinc2	equ	0xFDE
  4458                           postdec2	equ	0xFDD
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _strcpy *****************
  4464 ;; Defined at:
  4465 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  to              2   16[COMRAM] PTR unsigned char 
  4468 ;;		 -> NULL(0), buffer(31), 
  4469 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4470 ;;		 -> STR_6(8), STR_5(20), 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4473 ;;		 -> NULL(0), buffer(31), 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  2   16[COMRAM] PTR unsigned char 
  4476 ;; Registers used:
  4477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;Total ram usage:        6 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    3
  4490 ;; This function calls:
  4491 ;;		Nothing
  4492 ;; This function is called by:
  4493 ;;		_Initialize_Screen
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text14
  4498  001800                     __ptext14:
  4499                           	opt stack 0
  4500  001800                     _strcpy:
  4501                           	opt stack 26
  4502                           
  4503                           ;incstack = 0
  4504  001800  C011  F015         	movff	strcpy@to,strcpy@cp
  4505  001804  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4506  001808  D005               	goto	l4609
  4507  00180A                     l4607:
  4508  00180A  4A15               	infsnz	strcpy@cp,f,c
  4509  00180C  2A16               	incf	strcpy@cp+1,f,c
  4510  00180E  4A13               	infsnz	strcpy@from,f,c
  4511  001810  2A14               	incf	strcpy@from+1,f,c
  4512  001812  D000               	goto	l4609
  4513  001814                     l4609:
  4514  001814  C013  FFF6         	movff	strcpy@from,tblptrl
  4515  001818  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4516  00181C                     	if	0	;tblptru may be non-zero
  4517  00181C                     	endif
  4518  00181C                     	if	0	;tblptru may be non-zero
  4519  00181C                     	endif
  4520  00181C  C015  FFD9         	movff	strcpy@cp,fsr2l
  4521  001820  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4522  001824  0008               	tblrd		*
  4523  001826  CFF5 FFDF          	movff	tablat,indf2
  4524  00182A  50DF               	movf	indf2,w,c
  4525  00182C  A4D8               	btfss	status,2,c
  4526  00182E  D7ED               	goto	l4607
  4527                           
  4528                           ;	Return value of _strcpy is never used
  4529  001830  0012               	return		;funcret
  4530  001832                     __end_of_strcpy:
  4531                           	opt stack 0
  4532                           tblptru	equ	0xFF8
  4533                           tblptrh	equ	0xFF7
  4534                           tblptrl	equ	0xFF6
  4535                           tablat	equ	0xFF5
  4536                           prodh	equ	0xFF4
  4537                           prodl	equ	0xFF3
  4538                           intcon	equ	0xFF2
  4539                           intcon2	equ	0xFF1
  4540                           postinc0	equ	0xFEE
  4541                           wreg	equ	0xFE8
  4542                           postdec1	equ	0xFE5
  4543                           fsr1l	equ	0xFE1
  4544                           indf2	equ	0xFDF
  4545                           postinc2	equ	0xFDE
  4546                           postdec2	equ	0xFDD
  4547                           fsr2h	equ	0xFDA
  4548                           fsr2l	equ	0xFD9
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function _fillScreen *****************
  4552 ;; Defined at:
  4553 ;;		line 656 in file "ST7735_TFT.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  color           2   35[COMRAM] unsigned int 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;		None
  4558 ;; Return value:  Size  Location     Type
  4559 ;;		None               void
  4560 ;; Registers used:
  4561 ;;		wreg, status,2, status,0, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;Total ram usage:        2 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    7
  4574 ;; This function calls:
  4575 ;;		_fillRectangle
  4576 ;; This function is called by:
  4577 ;;		_Initialize_Screen
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           	psect	text15
  4582  001974                     __ptext15:
  4583                           	opt stack 0
  4584  001974                     _fillScreen:
  4585                           	opt stack 22
  4586                           
  4587                           ;ST7735_TFT.c: 658: fillRectangle(0, 0, 128, 160, color);
  4588                           
  4589                           ;incstack = 0
  4590  001974  0E00               	movlw	0
  4591  001976  6E18               	movwf	fillRectangle@y,c
  4592  001978  0E80               	movlw	128
  4593  00197A  6E19               	movwf	fillRectangle@w,c
  4594  00197C  0EA0               	movlw	160
  4595  00197E  6E1A               	movwf	fillRectangle@h,c
  4596  001980  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4597  001984  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4598  001988  0E00               	movlw	0
  4599  00198A  EC83  F007         	call	_fillRectangle
  4600  00198E  0012               	return		;funcret
  4601  001990                     __end_of_fillScreen:
  4602                           	opt stack 0
  4603                           tblptru	equ	0xFF8
  4604                           tblptrh	equ	0xFF7
  4605                           tblptrl	equ	0xFF6
  4606                           tablat	equ	0xFF5
  4607                           prodh	equ	0xFF4
  4608                           prodl	equ	0xFF3
  4609                           intcon	equ	0xFF2
  4610                           intcon2	equ	0xFF1
  4611                           postinc0	equ	0xFEE
  4612                           wreg	equ	0xFE8
  4613                           postdec1	equ	0xFE5
  4614                           fsr1l	equ	0xFE1
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function _fillRectangle *****************
  4623 ;; Defined at:
  4624 ;;		line 540 in file "ST7735_TFT.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  x               1    wreg     unsigned char 
  4627 ;;  y               1   23[COMRAM] unsigned char 
  4628 ;;  w               1   24[COMRAM] unsigned char 
  4629 ;;  h               1   25[COMRAM] unsigned char 
  4630 ;;  color           2   26[COMRAM] unsigned int 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  x               1   34[COMRAM] unsigned char 
  4633 ;;  lo              1   33[COMRAM] unsigned char 
  4634 ;;  hi              1   32[COMRAM] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;		None               void
  4637 ;; Registers used:
  4638 ;;		wreg, status,2, status,0, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4644 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;Total ram usage:       12 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    6
  4651 ;; This function calls:
  4652 ;;		_setAddrWindow
  4653 ;;		_spiwrite
  4654 ;; This function is called by:
  4655 ;;		_fillScreen
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text16
  4660  000F06                     __ptext16:
  4661                           	opt stack 0
  4662  000F06                     _fillRectangle:
  4663                           	opt stack 22
  4664                           
  4665                           ;incstack = 0
  4666                           ;fillRectangle@x stored from wreg
  4667  000F06  6E23               	movwf	fillRectangle@x,c
  4668                           
  4669                           ;ST7735_TFT.c: 542: unsigned char hi, lo;
  4670                           ;ST7735_TFT.c: 543: if((x >= 128) || (y >= 160))
  4671  000F08  0E80               	movlw	128
  4672  000F0A  6023               	cpfslt	fillRectangle@x,c
  4673  000F0C  D069               	goto	l505
  4674  000F0E  0E9F               	movlw	159
  4675  000F10  6418               	cpfsgt	fillRectangle@y,c
  4676  000F12  D001               	goto	l4473
  4677                           
  4678                           ;ST7735_TFT.c: 544: return;
  4679  000F14  D065               	goto	l505
  4680  000F16                     l4473:
  4681                           
  4682                           ;ST7735_TFT.c: 545: if((x + w - 1) >= 128)
  4683  000F16  0EFF               	movlw	255
  4684  000F18  6E1D               	movwf	??_fillRectangle& (0+255),c
  4685  000F1A  0EFF               	movlw	255
  4686  000F1C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4687  000F1E  5019               	movf	fillRectangle@w,w,c
  4688  000F20  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4689  000F24  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4690  000F26  261F               	addwf	??_fillRectangle+2,f,c
  4691  000F28  0E00               	movlw	0
  4692  000F2A  2220               	addwfc	??_fillRectangle+3,f,c
  4693  000F2C  501D               	movf	??_fillRectangle,w,c
  4694  000F2E  261F               	addwf	??_fillRectangle+2,f,c
  4695  000F30  501E               	movf	??_fillRectangle+1,w,c
  4696  000F32  2220               	addwfc	??_fillRectangle+3,f,c
  4697  000F34  BE20               	btfsc	??_fillRectangle+3,7,c
  4698  000F36  D00A               	goto	l506
  4699  000F38  5020               	movf	??_fillRectangle+3,w,c
  4700  000F3A  E104               	bnz	u3090
  4701  000F3C  0E80               	movlw	128
  4702  000F3E  5C1F               	subwf	??_fillRectangle+2,w,c
  4703  000F40  A0D8               	btfss	status,0,c
  4704  000F42  D004               	goto	l506
  4705  000F44                     u3090:
  4706                           
  4707                           ;ST7735_TFT.c: 546: w = 128 - x;
  4708  000F44  5023               	movf	fillRectangle@x,w,c
  4709  000F46  0800               	sublw	0
  4710  000F48  0F80               	addlw	128
  4711  000F4A  6E19               	movwf	fillRectangle@w,c
  4712  000F4C                     l506:
  4713                           
  4714                           ;ST7735_TFT.c: 547: if((y + h - 1) >= 160)
  4715  000F4C  0EFF               	movlw	255
  4716  000F4E  6E1D               	movwf	??_fillRectangle& (0+255),c
  4717  000F50  0EFF               	movlw	255
  4718  000F52  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4719  000F54  501A               	movf	fillRectangle@h,w,c
  4720  000F56  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4721  000F5A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4722  000F5C  261F               	addwf	??_fillRectangle+2,f,c
  4723  000F5E  0E00               	movlw	0
  4724  000F60  2220               	addwfc	??_fillRectangle+3,f,c
  4725  000F62  501D               	movf	??_fillRectangle,w,c
  4726  000F64  261F               	addwf	??_fillRectangle+2,f,c
  4727  000F66  501E               	movf	??_fillRectangle+1,w,c
  4728  000F68  2220               	addwfc	??_fillRectangle+3,f,c
  4729  000F6A  BE20               	btfsc	??_fillRectangle+3,7,c
  4730  000F6C  D00B               	goto	l4479
  4731  000F6E  5020               	movf	??_fillRectangle+3,w,c
  4732  000F70  E104               	bnz	u3100
  4733  000F72  0EA0               	movlw	160
  4734  000F74  5C1F               	subwf	??_fillRectangle+2,w,c
  4735  000F76  A0D8               	btfss	status,0,c
  4736  000F78  D005               	goto	l4479
  4737  000F7A                     u3100:
  4738                           
  4739                           ;ST7735_TFT.c: 548: h = 160 - y;
  4740  000F7A  5018               	movf	fillRectangle@y,w,c
  4741  000F7C  0800               	sublw	0
  4742  000F7E  0FA0               	addlw	160
  4743  000F80  6E1A               	movwf	fillRectangle@h,c
  4744  000F82  D000               	goto	l4479
  4745  000F84                     l4479:
  4746                           
  4747                           ;ST7735_TFT.c: 549: setAddrWindow(x, y, x+w-1, y+h-1);
  4748  000F84  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4749  000F88  5023               	movf	fillRectangle@x,w,c
  4750  000F8A  2419               	addwf	fillRectangle@w,w,c
  4751  000F8C  6E1D               	movwf	??_fillRectangle& (0+255),c
  4752  000F8E  041D               	decf	??_fillRectangle,w,c
  4753  000F90  6E15               	movwf	setAddrWindow@x1,c
  4754  000F92  5018               	movf	fillRectangle@y,w,c
  4755  000F94  241A               	addwf	fillRectangle@h,w,c
  4756  000F96  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4757  000F98  041E               	decf	??_fillRectangle+1,w,c
  4758  000F9A  6E16               	movwf	setAddrWindow@y1,c
  4759  000F9C  5023               	movf	fillRectangle@x,w,c
  4760  000F9E  ECD9  F00A         	call	_setAddrWindow
  4761                           
  4762                           ;ST7735_TFT.c: 550: hi = color >> 8; lo = color;
  4763  000FA2  501C               	movf	fillRectangle@color+1,w,c
  4764  000FA4  6E21               	movwf	fillRectangle@hi,c
  4765  000FA6  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4766                           
  4767                           ;ST7735_TFT.c: 551: PORTDbits.RD3 = 1;
  4768  000FAA  8683               	bsf	3971,3,c	;volatile
  4769                           
  4770                           ;ST7735_TFT.c: 552: PORTDbits.RD4 = 0;
  4771  000FAC  9883               	bcf	3971,4,c	;volatile
  4772                           
  4773                           ;ST7735_TFT.c: 554: for(y=h; y>0; y--) {
  4774  000FAE  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4775  000FB2                     l4491:
  4776  000FB2  5018               	movf	fillRectangle@y,w,c
  4777  000FB4  B4D8               	btfsc	status,2,c
  4778  000FB6  D013               	goto	l509
  4779  000FB8  D001               	goto	l508
  4780  000FBA  D011               	goto	l509
  4781  000FBC                     l508:
  4782                           
  4783                           ;ST7735_TFT.c: 555: for(x = w; x > 0; x--) {
  4784  000FBC  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4785  000FC0                     l4495:
  4786  000FC0  5023               	movf	fillRectangle@x,w,c
  4787  000FC2  B4D8               	btfsc	status,2,c
  4788  000FC4  D00A               	goto	l4505
  4789  000FC6  D001               	goto	l4499
  4790  000FC8  D008               	goto	l4505
  4791  000FCA                     l4499:
  4792                           
  4793                           ;ST7735_TFT.c: 556: spiwrite(hi);
  4794  000FCA  5021               	movf	fillRectangle@hi,w,c
  4795  000FCC  ECE0  F00C         	call	_spiwrite
  4796                           
  4797                           ;ST7735_TFT.c: 557: spiwrite(lo);
  4798  000FD0  5022               	movf	fillRectangle@lo,w,c
  4799  000FD2  ECE0  F00C         	call	_spiwrite
  4800  000FD6  0623               	decf	fillRectangle@x,f,c
  4801  000FD8  D7F3               	goto	l4495
  4802  000FDA                     l4505:
  4803  000FDA  0618               	decf	fillRectangle@y,f,c
  4804  000FDC  D7EA               	goto	l4491
  4805  000FDE                     l509:
  4806                           
  4807                           ;ST7735_TFT.c: 558: }
  4808                           ;ST7735_TFT.c: 559: }
  4809                           ;ST7735_TFT.c: 560: PORTDbits.RD4 = 1;
  4810  000FDE  8883               	bsf	3971,4,c	;volatile
  4811  000FE0                     l505:
  4812  000FE0  0012               	return		;funcret
  4813  000FE2                     __end_of_fillRectangle:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           intcon2	equ	0xFF1
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           postdec1	equ	0xFE5
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _drawtext *****************
  4835 ;; Defined at:
  4836 ;;		line 511 in file "ST7735_TFT.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  x               1    wreg     unsigned char 
  4839 ;;  y               1   56[COMRAM] unsigned char 
  4840 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4841 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4842 ;;  color           2   59[COMRAM] unsigned int 
  4843 ;;  bg              2   61[COMRAM] unsigned int 
  4844 ;;  size            1   63[COMRAM] unsigned char 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  x               1    0[BANK0 ] unsigned char 
  4847 ;;  i               2    3[BANK0 ] unsigned int 
  4848 ;;  textsize        2    1[BANK0 ] unsigned int 
  4849 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4850 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4860 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;Total ram usage:       17 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    9
  4867 ;; This function calls:
  4868 ;;		_drawChar
  4869 ;;		_strlen
  4870 ;; This function is called by:
  4871 ;;		_main
  4872 ;;		_Initialize_Screen
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text17
  4877  000D0A                     __ptext17:
  4878                           	opt stack 0
  4879  000D0A                     _drawtext:
  4880                           	opt stack 21
  4881                           
  4882                           ;incstack = 0
  4883                           ;drawtext@x stored from wreg
  4884  000D0A  0100               	movlb	0	; () banked
  4885  000D0C  6FDE               	movwf	drawtext@x& (0+255),b
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;ST7735_TFT.c: 513: unsigned char cursor_x, cursor_y;
  4889                           ;ST7735_TFT.c: 514: unsigned int textsize, i;
  4890                           ;ST7735_TFT.c: 515: cursor_x = x, cursor_y = y;
  4891  000D0E  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4892                           
  4893                           ; BSR set to: 0
  4894  000D12  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;ST7735_TFT.c: 516: textsize = strlen(_text);
  4898  000D16  C03A  F011         	movff	drawtext@_text,strlen@s
  4899  000D1A  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4900  000D1E  EC69  F00B         	call	_strlen	;wreg free
  4901  000D22  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4902  000D26  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4903                           
  4904                           ;ST7735_TFT.c: 517: for(i = 0; i < textsize; i++){
  4905  000D2A  0E00               	movlw	0
  4906  000D2C  0100               	movlb	0	; () banked
  4907  000D2E  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4908  000D30  0E00               	movlw	0
  4909  000D32  6FE1               	movwf	drawtext@i& (0+255),b
  4910  000D34  D064               	goto	l4573
  4911  000D36                     l4547:
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;ST7735_TFT.c: 518: if(wrap && ((cursor_x + size * 5) > 128)){
  4915  000D36  506F               	movf	_wrap,w,c
  4916  000D38  B4D8               	btfsc	status,2,c
  4917  000D3A  D034               	goto	l4563
  4918                           
  4919                           ; BSR set to: 0
  4920  000D3C  5040               	movf	drawtext@size,w,c
  4921  000D3E  0D05               	mullw	5
  4922  000D40  0100               	movlb	0	; () banked
  4923  000D42  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4924  000D44  6E41               	movwf	??_drawtext& (0+255),c
  4925  000D46  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4926  000D48  50F3               	movf	prodl,w,c
  4927  000D4A  2641               	addwf	??_drawtext,f,c
  4928  000D4C  50F4               	movf	prodh,w,c
  4929  000D4E  2242               	addwfc	??_drawtext+1,f,c
  4930  000D50  BE42               	btfsc	??_drawtext+1,7,c
  4931  000D52  D028               	goto	l4563
  4932  000D54  5042               	movf	??_drawtext+1,w,c
  4933  000D56  E104               	bnz	u3170
  4934  000D58  0E81               	movlw	129
  4935  000D5A  5C41               	subwf	??_drawtext,w,c
  4936  000D5C  A0D8               	btfss	status,0,c
  4937  000D5E  D022               	goto	l4563
  4938  000D60                     u3170:
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;ST7735_TFT.c: 519: cursor_x = 0;
  4942  000D60  0E00               	movlw	0
  4943  000D62  0100               	movlb	0	; () banked
  4944  000D64  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;ST7735_TFT.c: 520: cursor_y = cursor_y + size * 7 + 3 ;
  4948  000D66  5040               	movf	drawtext@size,w,c
  4949  000D68  0D07               	mullw	7
  4950  000D6A  50F3               	movf	prodl,w,c
  4951  000D6C  0100               	movlb	0	; () banked
  4952  000D6E  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4953  000D70  0F03               	addlw	3
  4954  000D72  0100               	movlb	0	; () banked
  4955  000D74  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;ST7735_TFT.c: 521: if(cursor_y > 160) cursor_y = 160;
  4959  000D76  0EA0               	movlw	160
  4960  000D78  0100               	movlb	0	; () banked
  4961  000D7A  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4962  000D7C  D004               	goto	l4559
  4963                           
  4964                           ; BSR set to: 0
  4965  000D7E  0EA0               	movlw	160
  4966  000D80  0100               	movlb	0	; () banked
  4967  000D82  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4968  000D84  D000               	goto	l4559
  4969  000D86                     l4559:
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;ST7735_TFT.c: 522: if(_text[i] == 0x20) goto _skip; }
  4973  000D86  0100               	movlb	0	; () banked
  4974  000D88  51E1               	movf	drawtext@i& (0+255),w,b
  4975  000D8A  243A               	addwf	drawtext@_text,w,c
  4976  000D8C  6ED9               	movwf	fsr2l,c
  4977  000D8E  0100               	movlb	0	; () banked
  4978  000D90  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4979  000D92  203B               	addwfc	drawtext@_text+1,w,c
  4980  000D94  6EDA               	movwf	fsr2h,c
  4981  000D96  0E20               	movlw	32
  4982  000D98  18DE               	xorwf	postinc2,w,c
  4983  000D9A  B4D8               	btfsc	status,2,c
  4984  000D9C  D02C               	goto	l4571
  4985  000D9E  D002               	goto	l4563
  4986                           
  4987                           ; BSR set to: 0
  4988  000DA0  D02A               	goto	l4571
  4989                           
  4990                           ; BSR set to: 0
  4991  000DA2  D000               	goto	l4563
  4992  000DA4                     l4563:
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;ST7735_TFT.c: 523: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4996  000DA4  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4997  000DA8  0100               	movlb	0	; () banked
  4998  000DAA  51E1               	movf	drawtext@i& (0+255),w,b
  4999  000DAC  243A               	addwf	drawtext@_text,w,c
  5000  000DAE  6ED9               	movwf	fsr2l,c
  5001  000DB0  0100               	movlb	0	; () banked
  5002  000DB2  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  5003  000DB4  203B               	addwfc	drawtext@_text+1,w,c
  5004  000DB6  6EDA               	movwf	fsr2h,c
  5005  000DB8  50DF               	movf	indf2,w,c
  5006  000DBA  6E2F               	movwf	drawChar@c,c
  5007  000DBC  C03C  F030         	movff	drawtext@color,drawChar@color
  5008  000DC0  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5009  000DC4  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5010  000DC8  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5011  000DCC  C040  F034         	movff	drawtext@size,drawChar@size
  5012  000DD0  0100               	movlb	0	; () banked
  5013  000DD2  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  5014  000DD4  EC0C  F004         	call	_drawChar
  5015                           
  5016                           ;ST7735_TFT.c: 524: cursor_x = cursor_x + size * 6;
  5017  000DD8  5040               	movf	drawtext@size,w,c
  5018  000DDA  0D06               	mullw	6
  5019  000DDC  50F3               	movf	prodl,w,c
  5020  000DDE  0100               	movlb	0	; () banked
  5021  000DE0  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  5022  000DE2  0100               	movlb	0	; () banked
  5023  000DE4  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;ST7735_TFT.c: 525: if(cursor_x > 128) cursor_x = 128;
  5027  000DE6  0E80               	movlw	128
  5028  000DE8  0100               	movlb	0	; () banked
  5029  000DEA  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  5030  000DEC  D004               	goto	l4571
  5031                           
  5032                           ; BSR set to: 0
  5033  000DEE  0E80               	movlw	128
  5034  000DF0  0100               	movlb	0	; () banked
  5035  000DF2  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038  000DF4  D000               	goto	l4571
  5039  000DF6                     l4571:
  5040                           
  5041                           ; BSR set to: 0
  5042  000DF6  0100               	movlb	0	; () banked
  5043  000DF8  4BE1               	infsnz	drawtext@i& (0+255),f,b
  5044  000DFA  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  5045  000DFC  D000               	goto	l4573
  5046  000DFE                     l4573:
  5047                           
  5048                           ; BSR set to: 0
  5049  000DFE  0100               	movlb	0	; () banked
  5050  000E00  51DF               	movf	drawtext@textsize& (0+255),w,b
  5051  000E02  0100               	movlb	0	; () banked
  5052  000E04  5DE1               	subwf	drawtext@i& (0+255),w,b
  5053  000E06  0100               	movlb	0	; () banked
  5054  000E08  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  5055  000E0A  0100               	movlb	0	; () banked
  5056  000E0C  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  5057  000E0E  A0D8               	btfss	status,0,c
  5058  000E10  D792               	goto	l4547
  5059                           
  5060                           ; BSR set to: 0
  5061                           
  5062                           ; BSR set to: 0
  5063  000E12  0012               	return		;funcret
  5064  000E14                     __end_of_drawtext:
  5065                           	opt stack 0
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           intcon2	equ	0xFF1
  5074                           postinc0	equ	0xFEE
  5075                           wreg	equ	0xFE8
  5076                           postdec1	equ	0xFE5
  5077                           fsr1l	equ	0xFE1
  5078                           indf2	equ	0xFDF
  5079                           postinc2	equ	0xFDE
  5080                           postdec2	equ	0xFDD
  5081                           fsr2h	equ	0xFDA
  5082                           fsr2l	equ	0xFD9
  5083                           status	equ	0xFD8
  5084                           
  5085 ;; *************** function _strlen *****************
  5086 ;; Defined at:
  5087 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5090 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5093 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  2   16[COMRAM] unsigned int 
  5096 ;; Registers used:
  5097 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;Total ram usage:        6 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    3
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_drawtext
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text18
  5118  0016D2                     __ptext18:
  5119                           	opt stack 0
  5120  0016D2                     _strlen:
  5121                           	opt stack 26
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;incstack = 0
  5125  0016D2  C011  F015         	movff	strlen@s,strlen@cp
  5126  0016D6  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5127  0016DA  D003               	goto	l4463
  5128  0016DC                     l4461:
  5129  0016DC  4A15               	infsnz	strlen@cp,f,c
  5130  0016DE  2A16               	incf	strlen@cp+1,f,c
  5131  0016E0  D000               	goto	l4463
  5132  0016E2                     l4463:
  5133  0016E2  C015  FFD9         	movff	strlen@cp,fsr2l
  5134  0016E6  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5135  0016EA  50DF               	movf	indf2,w,c
  5136  0016EC  A4D8               	btfss	status,2,c
  5137  0016EE  D7F6               	goto	l4461
  5138  0016F0  C011  F013         	movff	strlen@s,??_strlen
  5139  0016F4  C012  F014         	movff	strlen@s+1,??_strlen+1
  5140  0016F8  1E13               	comf	??_strlen,f,c
  5141  0016FA  1E14               	comf	??_strlen+1,f,c
  5142  0016FC  4A13               	infsnz	??_strlen,f,c
  5143  0016FE  2A14               	incf	??_strlen+1,f,c
  5144  001700  5015               	movf	strlen@cp,w,c
  5145  001702  2413               	addwf	??_strlen,w,c
  5146  001704  6E11               	movwf	?_strlen,c
  5147  001706  5016               	movf	strlen@cp+1,w,c
  5148  001708  2014               	addwfc	??_strlen+1,w,c
  5149  00170A  6E12               	movwf	?_strlen+1,c
  5150  00170C  D000               	goto	l1239
  5151  00170E                     l1239:
  5152  00170E  0012               	return		;funcret
  5153  001710                     __end_of_strlen:
  5154                           	opt stack 0
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           intcon2	equ	0xFF1
  5163                           postinc0	equ	0xFEE
  5164                           wreg	equ	0xFE8
  5165                           postdec1	equ	0xFE5
  5166                           fsr1l	equ	0xFE1
  5167                           indf2	equ	0xFDF
  5168                           postinc2	equ	0xFDE
  5169                           postdec2	equ	0xFDD
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function _drawChar *****************
  5175 ;; Defined at:
  5176 ;;		line 484 in file "ST7735_TFT.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;  x               1    wreg     unsigned char 
  5179 ;;  y               1   45[COMRAM] unsigned char 
  5180 ;;  c               1   46[COMRAM] unsigned char 
  5181 ;;  color           2   47[COMRAM] unsigned int 
  5182 ;;  bg              2   49[COMRAM] unsigned int 
  5183 ;;  size            1   51[COMRAM] unsigned char 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  x               1   53[COMRAM] unsigned char 
  5186 ;;  line            1   52[COMRAM] unsigned char 
  5187 ;;  i               1   55[COMRAM] unsigned char 
  5188 ;;  j               1   54[COMRAM] unsigned char 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;		None               void
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5198 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5201 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5202 ;;Total ram usage:       11 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    8
  5205 ;; This function calls:
  5206 ;;		___wmul
  5207 ;;		_drawPixel
  5208 ;;		_fillRect
  5209 ;; This function is called by:
  5210 ;;		_drawtext
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214                           	psect	text19
  5215  000818                     __ptext19:
  5216                           	opt stack 0
  5217  000818                     _drawChar:
  5218                           	opt stack 21
  5219                           
  5220                           ;incstack = 0
  5221                           ;drawChar@x stored from wreg
  5222  000818  6E36               	movwf	drawChar@x,c
  5223                           
  5224                           ;ST7735_TFT.c: 486: char i, j;
  5225                           ;ST7735_TFT.c: 487: if((x >= 128) || (y >= 160))
  5226  00081A  0E80               	movlw	128
  5227  00081C  6036               	cpfslt	drawChar@x,c
  5228  00081E  D0A6               	goto	l468
  5229  000820  0E9F               	movlw	159
  5230  000822  642E               	cpfsgt	drawChar@y,c
  5231  000824  D001               	goto	l4409
  5232                           
  5233                           ;ST7735_TFT.c: 488: return;
  5234  000826  D0A2               	goto	l468
  5235  000828                     l4409:
  5236                           
  5237                           ;ST7735_TFT.c: 489: if(size < 1) size = 1;
  5238  000828  5034               	movf	drawChar@size,w,c
  5239  00082A  A4D8               	btfss	status,2,c
  5240  00082C  D003               	goto	l4413
  5241  00082E  0E01               	movlw	1
  5242  000830  6E34               	movwf	drawChar@size,c
  5243  000832  D000               	goto	l4413
  5244  000834                     l4413:
  5245                           
  5246                           ;ST7735_TFT.c: 490: if((c < ' ') || (c > '~'))
  5247  000834  0E1F               	movlw	31
  5248  000836  642F               	cpfsgt	drawChar@c,c
  5249  000838  D004               	goto	l4417
  5250  00083A  0E7E               	movlw	126
  5251  00083C  642F               	cpfsgt	drawChar@c,c
  5252  00083E  D003               	goto	l470
  5253  000840  D000               	goto	l4417
  5254  000842                     l4417:
  5255                           
  5256                           ;ST7735_TFT.c: 491: c = '?';
  5257  000842  0E3F               	movlw	63
  5258  000844  6E2F               	movwf	drawChar@c,c
  5259  000846                     l470:
  5260                           
  5261                           ;ST7735_TFT.c: 492: for(i=0; i<5; i++ ) {
  5262  000846  0E00               	movlw	0
  5263  000848  6E38               	movwf	drawChar@i,c
  5264  00084A                     l4419:
  5265  00084A  0E04               	movlw	4
  5266  00084C  6438               	cpfsgt	drawChar@i,c
  5267  00084E  D001               	goto	l4423
  5268  000850  D08D               	goto	l468
  5269  000852                     l4423:
  5270                           
  5271                           ;ST7735_TFT.c: 493: unsigned char line;
  5272                           ;ST7735_TFT.c: 494: if(c < 'S')
  5273  000852  0E53               	movlw	83
  5274  000854  602F               	cpfslt	drawChar@c,c
  5275  000856  D015               	goto	l4427
  5276                           
  5277                           ;ST7735_TFT.c: 495: line = font[(c - 32)*5 + i];
  5278  000858  0EE0               	movlw	224
  5279  00085A  242F               	addwf	drawChar@c,w,c
  5280  00085C  6E11               	movwf	___wmul@multiplier,c
  5281  00085E  6A12               	clrf	___wmul@multiplier+1,c
  5282  000860  0EFF               	movlw	255
  5283  000862  2212               	addwfc	___wmul@multiplier+1,f,c
  5284  000864  0E00               	movlw	0
  5285  000866  6E14               	movwf	___wmul@multiplicand+1,c
  5286  000868  0E05               	movlw	5
  5287  00086A  6E13               	movwf	___wmul@multiplicand,c
  5288  00086C  EC76  F00C         	call	___wmul	;wreg free
  5289  000870  5038               	movf	drawChar@i,w,c
  5290  000872  2611               	addwf	?___wmul,f,c
  5291  000874  0E00               	movlw	0
  5292  000876  2212               	addwfc	?___wmul+1,f,c
  5293  000878  0E4B               	movlw	low _font
  5294  00087A  2411               	addwf	?___wmul,w,c
  5295  00087C  6EF6               	movwf	tblptrl,c
  5296  00087E  0EFD               	movlw	high _font
  5297  000880  D014               	goto	L3
  5298  000882                     l4427:
  5299                           
  5300                           ;ST7735_TFT.c: 496: else
  5301                           ;ST7735_TFT.c: 497: line = font2[(c - 'S')*5 + i];
  5302  000882  0EAD               	movlw	173
  5303  000884  242F               	addwf	drawChar@c,w,c
  5304  000886  6E11               	movwf	___wmul@multiplier,c
  5305  000888  6A12               	clrf	___wmul@multiplier+1,c
  5306  00088A  0EFF               	movlw	255
  5307  00088C  2212               	addwfc	___wmul@multiplier+1,f,c
  5308  00088E  0E00               	movlw	0
  5309  000890  6E14               	movwf	___wmul@multiplicand+1,c
  5310  000892  0E05               	movlw	5
  5311  000894  6E13               	movwf	___wmul@multiplicand,c
  5312  000896  EC76  F00C         	call	___wmul	;wreg free
  5313  00089A  5038               	movf	drawChar@i,w,c
  5314  00089C  2611               	addwf	?___wmul,f,c
  5315  00089E  0E00               	movlw	0
  5316  0008A0  2212               	addwfc	?___wmul+1,f,c
  5317  0008A2  0E4A               	movlw	low _font2
  5318  0008A4  2411               	addwf	?___wmul,w,c
  5319  0008A6  6EF6               	movwf	tblptrl,c
  5320  0008A8  0EFE               	movlw	high _font2
  5321  0008AA                     L3:
  5322  0008AA  2012               	addwfc	?___wmul+1,w,c
  5323  0008AC  6EF7               	movwf	tblptrh,c
  5324  0008AE                     	if	0	;There are less than 3 active tblptr bytes
  5325  0008AE                     	endif
  5326  0008AE  0008               	tblrd		*
  5327  0008B0  CFF5 F035          	movff	tablat,drawChar@line
  5328  0008B4  D000               	goto	l4429
  5329  0008B6                     l4429:
  5330                           
  5331                           ;ST7735_TFT.c: 498: for(j=0; j<7; j++, line >>= 1) {
  5332  0008B6  0E00               	movlw	0
  5333  0008B8  6E37               	movwf	drawChar@j,c
  5334  0008BA                     l4431:
  5335  0008BA  0E06               	movlw	6
  5336  0008BC  6437               	cpfsgt	drawChar@j,c
  5337  0008BE  D001               	goto	l477
  5338  0008C0  D053               	goto	l4455
  5339  0008C2                     l477:
  5340                           
  5341                           ;ST7735_TFT.c: 499: if(line & 0x01) {
  5342  0008C2  A035               	btfss	drawChar@line,0,c
  5343  0008C4  D023               	goto	l4441
  5344                           
  5345                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, color);
  5346  0008C6  0434               	decf	drawChar@size,w,c
  5347  0008C8  A4D8               	btfss	status,2,c
  5348  0008CA  D00C               	goto	l4439
  5349  0008CC  502E               	movf	drawChar@y,w,c
  5350  0008CE  2437               	addwf	drawChar@j,w,c
  5351  0008D0  6E18               	movwf	drawPixel@y,c
  5352  0008D2  C030  F019         	movff	drawChar@color,drawPixel@color
  5353  0008D6  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5354  0008DA  5036               	movf	drawChar@x,w,c
  5355  0008DC  2438               	addwf	drawChar@i,w,c
  5356  0008DE  EC31  F00C         	call	_drawPixel
  5357  0008E2  D03E               	goto	l4449
  5358  0008E4                     l4439:
  5359                           
  5360                           ;ST7735_TFT.c: 501: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5361  0008E4  5037               	movf	drawChar@j,w,c
  5362  0008E6  0234               	mulwf	drawChar@size,c
  5363  0008E8  50F3               	movf	prodl,w,c
  5364  0008EA  242E               	addwf	drawChar@y,w,c
  5365  0008EC  6E23               	movwf	fillRect@y,c
  5366  0008EE  C034  F024         	movff	drawChar@size,fillRect@w
  5367  0008F2  C034  F025         	movff	drawChar@size,fillRect@h
  5368  0008F6  C030  F026         	movff	drawChar@color,fillRect@color
  5369  0008FA  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5370  0008FE  5038               	movf	drawChar@i,w,c
  5371  000900  0234               	mulwf	drawChar@size,c
  5372  000902  50F3               	movf	prodl,w,c
  5373  000904  2436               	addwf	drawChar@x,w,c
  5374  000906  EC00  F00B         	call	_fillRect
  5375                           
  5376                           ;ST7735_TFT.c: 502: }
  5377  00090A  D02A               	goto	l4449
  5378  00090C                     l4441:
  5379                           
  5380                           ;ST7735_TFT.c: 503: else if(bg != color) {
  5381  00090C  5030               	movf	drawChar@color,w,c
  5382  00090E  1832               	xorwf	drawChar@bg,w,c
  5383  000910  E104               	bnz	u3020
  5384  000912  5031               	movf	drawChar@color+1,w,c
  5385  000914  1833               	xorwf	drawChar@bg+1,w,c
  5386  000916  B4D8               	btfsc	status,2,c
  5387  000918  D023               	goto	l4449
  5388  00091A                     u3020:
  5389                           
  5390                           ;ST7735_TFT.c: 504: if(size == 1) drawPixel(x+i, y+j, bg);
  5391  00091A  0434               	decf	drawChar@size,w,c
  5392  00091C  A4D8               	btfss	status,2,c
  5393  00091E  D00C               	goto	l4447
  5394  000920  502E               	movf	drawChar@y,w,c
  5395  000922  2437               	addwf	drawChar@j,w,c
  5396  000924  6E18               	movwf	drawPixel@y,c
  5397  000926  C032  F019         	movff	drawChar@bg,drawPixel@color
  5398  00092A  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5399  00092E  5036               	movf	drawChar@x,w,c
  5400  000930  2438               	addwf	drawChar@i,w,c
  5401  000932  EC31  F00C         	call	_drawPixel
  5402  000936  D014               	goto	l4449
  5403  000938                     l4447:
  5404                           
  5405                           ;ST7735_TFT.c: 505: else fillRect(x+i*size, y+j*size, size, size, bg);
  5406  000938  5037               	movf	drawChar@j,w,c
  5407  00093A  0234               	mulwf	drawChar@size,c
  5408  00093C  50F3               	movf	prodl,w,c
  5409  00093E  242E               	addwf	drawChar@y,w,c
  5410  000940  6E23               	movwf	fillRect@y,c
  5411  000942  C034  F024         	movff	drawChar@size,fillRect@w
  5412  000946  C034  F025         	movff	drawChar@size,fillRect@h
  5413  00094A  C032  F026         	movff	drawChar@bg,fillRect@color
  5414  00094E  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5415  000952  5038               	movf	drawChar@i,w,c
  5416  000954  0234               	mulwf	drawChar@size,c
  5417  000956  50F3               	movf	prodl,w,c
  5418  000958  2436               	addwf	drawChar@x,w,c
  5419  00095A  EC00  F00B         	call	_fillRect
  5420  00095E  D000               	goto	l4449
  5421  000960                     l4449:
  5422  000960  2A37               	incf	drawChar@j,f,c
  5423  000962  90D8               	bcf	status,0,c
  5424  000964  3235               	rrcf	drawChar@line,f,c
  5425  000966  D7A9               	goto	l4431
  5426  000968                     l4455:
  5427  000968  2A38               	incf	drawChar@i,f,c
  5428  00096A  D76F               	goto	l4419
  5429  00096C                     l468:
  5430  00096C  0012               	return		;funcret
  5431  00096E                     __end_of_drawChar:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           intcon	equ	0xFF2
  5440                           intcon2	equ	0xFF1
  5441                           postinc0	equ	0xFEE
  5442                           wreg	equ	0xFE8
  5443                           postdec1	equ	0xFE5
  5444                           fsr1l	equ	0xFE1
  5445                           indf2	equ	0xFDF
  5446                           postinc2	equ	0xFDE
  5447                           postdec2	equ	0xFDD
  5448                           fsr2h	equ	0xFDA
  5449                           fsr2l	equ	0xFD9
  5450                           status	equ	0xFD8
  5451                           
  5452 ;; *************** function _fillRect *****************
  5453 ;; Defined at:
  5454 ;;		line 474 in file "ST7735_TFT.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  x               1    wreg     unsigned char 
  5457 ;;  y               1   34[COMRAM] unsigned char 
  5458 ;;  w               1   35[COMRAM] unsigned char 
  5459 ;;  h               1   36[COMRAM] unsigned char 
  5460 ;;  color           2   37[COMRAM] unsigned int 
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  x               1   42[COMRAM] unsigned char 
  5463 ;;  i               2   43[COMRAM] int 
  5464 ;; Return value:  Size  Location     Type
  5465 ;;		None               void
  5466 ;; Registers used:
  5467 ;;		wreg, status,2, status,0, cstack
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5473 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;Total ram usage:       11 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    7
  5480 ;; This function calls:
  5481 ;;		_drawFastVLine
  5482 ;; This function is called by:
  5483 ;;		_drawChar
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text20
  5488  001600                     __ptext20:
  5489                           	opt stack 0
  5490  001600                     _fillRect:
  5491                           	opt stack 21
  5492                           
  5493                           ;incstack = 0
  5494                           ;fillRect@x stored from wreg
  5495  001600  6E2B               	movwf	fillRect@x,c
  5496                           
  5497                           ;ST7735_TFT.c: 476: signed int i;
  5498                           ;ST7735_TFT.c: 478: for (i = x; i < x + w; i++)
  5499  001602  C02B  F02C         	movff	fillRect@x,fillRect@i
  5500  001606  6A2D               	clrf	fillRect@i+1,c
  5501  001608  D00E               	goto	l4233
  5502  00160A                     l4229:
  5503                           
  5504                           ;ST7735_TFT.c: 479: {
  5505                           ;ST7735_TFT.c: 480: drawFastVLine(i, y, h, color);
  5506  00160A  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5507  00160E  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5508  001612  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5509  001616  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5510  00161A  502C               	movf	fillRect@i,w,c
  5511  00161C  ECC9  F008         	call	_drawFastVLine
  5512  001620  4A2C               	infsnz	fillRect@i,f,c
  5513  001622  2A2D               	incf	fillRect@i+1,f,c
  5514  001624  D000               	goto	l4233
  5515  001626                     l4233:
  5516  001626  5024               	movf	fillRect@w,w,c
  5517  001628  C02B  F028         	movff	fillRect@x,??_fillRect
  5518  00162C  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5519  00162E  2628               	addwf	??_fillRect,f,c
  5520  001630  0E00               	movlw	0
  5521  001632  2229               	addwfc	??_fillRect+1,f,c
  5522  001634  5028               	movf	??_fillRect,w,c
  5523  001636  5C2C               	subwf	fillRect@i,w,c
  5524  001638  502D               	movf	fillRect@i+1,w,c
  5525  00163A  0A80               	xorlw	128
  5526  00163C  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5527  00163E  5029               	movf	??_fillRect+1,w,c
  5528  001640  0A80               	xorlw	128
  5529  001642  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5530  001644  A0D8               	btfss	status,0,c
  5531  001646  D7E1               	goto	l4229
  5532  001648  0012               	return		;funcret
  5533  00164A                     __end_of_fillRect:
  5534                           	opt stack 0
  5535                           tblptru	equ	0xFF8
  5536                           tblptrh	equ	0xFF7
  5537                           tblptrl	equ	0xFF6
  5538                           tablat	equ	0xFF5
  5539                           prodh	equ	0xFF4
  5540                           prodl	equ	0xFF3
  5541                           intcon	equ	0xFF2
  5542                           intcon2	equ	0xFF1
  5543                           postinc0	equ	0xFEE
  5544                           wreg	equ	0xFE8
  5545                           postdec1	equ	0xFE5
  5546                           fsr1l	equ	0xFE1
  5547                           indf2	equ	0xFDF
  5548                           postinc2	equ	0xFDE
  5549                           postdec2	equ	0xFDD
  5550                           fsr2h	equ	0xFDA
  5551                           fsr2l	equ	0xFD9
  5552                           status	equ	0xFD8
  5553                           
  5554 ;; *************** function _drawFastVLine *****************
  5555 ;; Defined at:
  5556 ;;		line 453 in file "ST7735_TFT.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  x               1    wreg     unsigned char 
  5559 ;;  y               1   23[COMRAM] unsigned char 
  5560 ;;  h               1   24[COMRAM] unsigned char 
  5561 ;;  color           2   25[COMRAM] unsigned int 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  x               1   33[COMRAM] unsigned char 
  5564 ;;  lo              1   32[COMRAM] unsigned char 
  5565 ;;  hi              1   31[COMRAM] unsigned char 
  5566 ;; Return value:  Size  Location     Type
  5567 ;;		None               void
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0, cstack
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;Total ram usage:       11 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    6
  5582 ;; This function calls:
  5583 ;;		_setAddrWindow
  5584 ;;		_spiwrite
  5585 ;; This function is called by:
  5586 ;;		_fillRect
  5587 ;;		_fillCircleHelper
  5588 ;;		_fillCircle
  5589 ;;		_drawRect
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text21
  5594  001192                     __ptext21:
  5595                           	opt stack 0
  5596  001192                     _drawFastVLine:
  5597                           	opt stack 22
  5598                           
  5599                           ;incstack = 0
  5600                           ;drawFastVLine@x stored from wreg
  5601  001192  6E22               	movwf	drawFastVLine@x,c
  5602                           
  5603                           ;ST7735_TFT.c: 455: unsigned char hi, lo;
  5604                           ;ST7735_TFT.c: 456: if((x >= 128) || (y >= 160))
  5605  001194  0E80               	movlw	128
  5606  001196  6022               	cpfslt	drawFastVLine@x,c
  5607  001198  D03F               	goto	l452
  5608  00119A  0E9F               	movlw	159
  5609  00119C  6418               	cpfsgt	drawFastVLine@y,c
  5610  00119E  D001               	goto	l4139
  5611                           
  5612                           ;ST7735_TFT.c: 457: return;
  5613  0011A0  D03B               	goto	l452
  5614  0011A2                     l4139:
  5615                           
  5616                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  5617  0011A2  0EFF               	movlw	255
  5618  0011A4  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5619  0011A6  0EFF               	movlw	255
  5620  0011A8  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5621  0011AA  5019               	movf	drawFastVLine@h,w,c
  5622  0011AC  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5623  0011B0  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5624  0011B2  261E               	addwf	??_drawFastVLine+2,f,c
  5625  0011B4  0E00               	movlw	0
  5626  0011B6  221F               	addwfc	??_drawFastVLine+3,f,c
  5627  0011B8  501C               	movf	??_drawFastVLine,w,c
  5628  0011BA  261E               	addwf	??_drawFastVLine+2,f,c
  5629  0011BC  501D               	movf	??_drawFastVLine+1,w,c
  5630  0011BE  221F               	addwfc	??_drawFastVLine+3,f,c
  5631  0011C0  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5632  0011C2  D00B               	goto	l4143
  5633  0011C4  501F               	movf	??_drawFastVLine+3,w,c
  5634  0011C6  E104               	bnz	u2730
  5635  0011C8  0EA0               	movlw	160
  5636  0011CA  5C1E               	subwf	??_drawFastVLine+2,w,c
  5637  0011CC  A0D8               	btfss	status,0,c
  5638  0011CE  D005               	goto	l4143
  5639  0011D0                     u2730:
  5640                           
  5641                           ;ST7735_TFT.c: 459: h = 160 - y;
  5642  0011D0  5018               	movf	drawFastVLine@y,w,c
  5643  0011D2  0800               	sublw	0
  5644  0011D4  0FA0               	addlw	160
  5645  0011D6  6E19               	movwf	drawFastVLine@h,c
  5646  0011D8  D000               	goto	l4143
  5647  0011DA                     l4143:
  5648                           
  5649                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  5650  0011DA  501B               	movf	drawFastVLine@color+1,w,c
  5651  0011DC  6E20               	movwf	drawFastVLine@hi,c
  5652  0011DE  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5653                           
  5654                           ;ST7735_TFT.c: 461: setAddrWindow(x, y, x, y + h - 1);
  5655  0011E2  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5656  0011E6  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5657  0011EA  5018               	movf	drawFastVLine@y,w,c
  5658  0011EC  2419               	addwf	drawFastVLine@h,w,c
  5659  0011EE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5660  0011F0  041C               	decf	??_drawFastVLine,w,c
  5661  0011F2  6E16               	movwf	setAddrWindow@y1,c
  5662  0011F4  5022               	movf	drawFastVLine@x,w,c
  5663  0011F6  ECD9  F00A         	call	_setAddrWindow
  5664                           
  5665                           ;ST7735_TFT.c: 462: PORTDbits.RD3 = 1;
  5666  0011FA  8683               	bsf	3971,3,c	;volatile
  5667                           
  5668                           ;ST7735_TFT.c: 463: PORTDbits.RD4 = 0;
  5669  0011FC  9883               	bcf	3971,4,c	;volatile
  5670                           
  5671                           ;ST7735_TFT.c: 465: while (h--) {
  5672  0011FE  D007               	goto	l4155
  5673  001200                     l4153:
  5674                           
  5675                           ;ST7735_TFT.c: 466: spiwrite(hi);
  5676  001200  5020               	movf	drawFastVLine@hi,w,c
  5677  001202  ECE0  F00C         	call	_spiwrite
  5678                           
  5679                           ;ST7735_TFT.c: 467: spiwrite(lo);
  5680  001206  5021               	movf	drawFastVLine@lo,w,c
  5681  001208  ECE0  F00C         	call	_spiwrite
  5682  00120C  D000               	goto	l4155
  5683  00120E                     l4155:
  5684  00120E  0619               	decf	drawFastVLine@h,f,c
  5685  001210  2819               	incf	drawFastVLine@h,w,c
  5686  001212  A4D8               	btfss	status,2,c
  5687  001214  D7F5               	goto	l4153
  5688                           
  5689                           ;ST7735_TFT.c: 468: }
  5690                           ;ST7735_TFT.c: 469: PORTDbits.RD4 = 1;
  5691  001216  8883               	bsf	3971,4,c	;volatile
  5692  001218                     l452:
  5693  001218  0012               	return		;funcret
  5694  00121A                     __end_of_drawFastVLine:
  5695                           	opt stack 0
  5696                           tblptru	equ	0xFF8
  5697                           tblptrh	equ	0xFF7
  5698                           tblptrl	equ	0xFF6
  5699                           tablat	equ	0xFF5
  5700                           prodh	equ	0xFF4
  5701                           prodl	equ	0xFF3
  5702                           intcon	equ	0xFF2
  5703                           intcon2	equ	0xFF1
  5704                           postinc0	equ	0xFEE
  5705                           wreg	equ	0xFE8
  5706                           postdec1	equ	0xFE5
  5707                           fsr1l	equ	0xFE1
  5708                           indf2	equ	0xFDF
  5709                           postinc2	equ	0xFDE
  5710                           postdec2	equ	0xFDD
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function _drawPixel *****************
  5716 ;; Defined at:
  5717 ;;		line 444 in file "ST7735_TFT.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  x               1    wreg     unsigned char 
  5720 ;;  y               1   23[COMRAM] unsigned char 
  5721 ;;  color           2   24[COMRAM] unsigned int 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  x               1   26[COMRAM] unsigned char 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;		None               void
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5733 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;Total ram usage:        4 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    6
  5740 ;; This function calls:
  5741 ;;		_setAddrWindow
  5742 ;;		_write_data
  5743 ;; This function is called by:
  5744 ;;		_drawChar
  5745 ;;		_drawCircle
  5746 ;;		_drawCircleHelper
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text22
  5751  001862                     __ptext22:
  5752                           	opt stack 0
  5753  001862                     _drawPixel:
  5754                           	opt stack 22
  5755                           
  5756                           ;incstack = 0
  5757                           ;drawPixel@x stored from wreg
  5758  001862  6E1B               	movwf	drawPixel@x,c
  5759                           
  5760                           ;ST7735_TFT.c: 446: if((x >= 128) || (y >= 160))
  5761  001864  0E80               	movlw	128
  5762  001866  601B               	cpfslt	drawPixel@x,c
  5763  001868  D013               	goto	l446
  5764  00186A  0E9F               	movlw	159
  5765  00186C  6418               	cpfsgt	drawPixel@y,c
  5766  00186E  D001               	goto	l4221
  5767                           
  5768                           ;ST7735_TFT.c: 447: return;
  5769  001870  D00F               	goto	l446
  5770  001872                     l4221:
  5771                           
  5772                           ;ST7735_TFT.c: 448: setAddrWindow(x,y,x+1,y+1);
  5773  001872  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5774  001876  281B               	incf	drawPixel@x,w,c
  5775  001878  6E15               	movwf	setAddrWindow@x1,c
  5776  00187A  2818               	incf	drawPixel@y,w,c
  5777  00187C  6E16               	movwf	setAddrWindow@y1,c
  5778  00187E  501B               	movf	drawPixel@x,w,c
  5779  001880  ECD9  F00A         	call	_setAddrWindow
  5780                           
  5781                           ;ST7735_TFT.c: 449: write_data(color >> 8);
  5782  001884  501A               	movf	drawPixel@color+1,w,c
  5783  001886  EC21  F00D         	call	_write_data
  5784                           
  5785                           ;ST7735_TFT.c: 450: write_data(color & 0xFF);
  5786  00188A  5019               	movf	drawPixel@color,w,c
  5787  00188C  EC21  F00D         	call	_write_data
  5788  001890                     l446:
  5789  001890  0012               	return		;funcret
  5790  001892                     __end_of_drawPixel:
  5791                           	opt stack 0
  5792                           tblptru	equ	0xFF8
  5793                           tblptrh	equ	0xFF7
  5794                           tblptrl	equ	0xFF6
  5795                           tablat	equ	0xFF5
  5796                           prodh	equ	0xFF4
  5797                           prodl	equ	0xFF3
  5798                           intcon	equ	0xFF2
  5799                           intcon2	equ	0xFF1
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function _setAddrWindow *****************
  5812 ;; Defined at:
  5813 ;;		line 429 in file "ST7735_TFT.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  x0              1    wreg     unsigned char 
  5816 ;;  y0              1   19[COMRAM] unsigned char 
  5817 ;;  x1              1   20[COMRAM] unsigned char 
  5818 ;;  y1              1   21[COMRAM] unsigned char 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  x0              1   22[COMRAM] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;		None               void
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5830 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;Total ram usage:        4 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    5
  5837 ;; This function calls:
  5838 ;;		_write_command
  5839 ;;		_write_data
  5840 ;; This function is called by:
  5841 ;;		_drawPixel
  5842 ;;		_drawFastVLine
  5843 ;;		_fillRectangle
  5844 ;;		_drawFastHLine
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text23
  5849  0015B2                     __ptext23:
  5850                           	opt stack 0
  5851  0015B2                     _setAddrWindow:
  5852                           	opt stack 22
  5853                           
  5854                           ;incstack = 0
  5855                           ;setAddrWindow@x0 stored from wreg
  5856  0015B2  6E17               	movwf	setAddrWindow@x0,c
  5857                           
  5858                           ;ST7735_TFT.c: 431: write_command(0x2A);
  5859  0015B4  0E2A               	movlw	42
  5860  0015B6  EC29  F00D         	call	_write_command
  5861                           
  5862                           ;ST7735_TFT.c: 432: write_data(0);
  5863  0015BA  0E00               	movlw	0
  5864  0015BC  EC21  F00D         	call	_write_data
  5865                           
  5866                           ;ST7735_TFT.c: 433: write_data(x0 + colstart);
  5867  0015C0  5017               	movf	setAddrWindow@x0,w,c
  5868  0015C2  245B               	addwf	_colstart,w,c
  5869  0015C4  EC21  F00D         	call	_write_data
  5870                           
  5871                           ;ST7735_TFT.c: 434: write_data(0);
  5872  0015C8  0E00               	movlw	0
  5873  0015CA  EC21  F00D         	call	_write_data
  5874                           
  5875                           ;ST7735_TFT.c: 435: write_data(x1 + colstart);
  5876  0015CE  5015               	movf	setAddrWindow@x1,w,c
  5877  0015D0  245B               	addwf	_colstart,w,c
  5878  0015D2  EC21  F00D         	call	_write_data
  5879                           
  5880                           ;ST7735_TFT.c: 436: write_command(0x2B);
  5881  0015D6  0E2B               	movlw	43
  5882  0015D8  EC29  F00D         	call	_write_command
  5883                           
  5884                           ;ST7735_TFT.c: 437: write_data(0);
  5885  0015DC  0E00               	movlw	0
  5886  0015DE  EC21  F00D         	call	_write_data
  5887                           
  5888                           ;ST7735_TFT.c: 438: write_data(y0 + rowstart);
  5889  0015E2  5014               	movf	setAddrWindow@y0,w,c
  5890  0015E4  2462               	addwf	_rowstart,w,c
  5891  0015E6  EC21  F00D         	call	_write_data
  5892                           
  5893                           ;ST7735_TFT.c: 439: write_data(0);
  5894  0015EA  0E00               	movlw	0
  5895  0015EC  EC21  F00D         	call	_write_data
  5896                           
  5897                           ;ST7735_TFT.c: 440: write_data(y1 + rowstart);
  5898  0015F0  5016               	movf	setAddrWindow@y1,w,c
  5899  0015F2  2462               	addwf	_rowstart,w,c
  5900  0015F4  EC21  F00D         	call	_write_data
  5901                           
  5902                           ;ST7735_TFT.c: 441: write_command(0x2C);
  5903  0015F8  0E2C               	movlw	44
  5904  0015FA  EC29  F00D         	call	_write_command
  5905  0015FE  0012               	return		;funcret
  5906  001600                     __end_of_setAddrWindow:
  5907                           	opt stack 0
  5908                           tblptru	equ	0xFF8
  5909                           tblptrh	equ	0xFF7
  5910                           tblptrl	equ	0xFF6
  5911                           tablat	equ	0xFF5
  5912                           prodh	equ	0xFF4
  5913                           prodl	equ	0xFF3
  5914                           intcon	equ	0xFF2
  5915                           intcon2	equ	0xFF1
  5916                           postinc0	equ	0xFEE
  5917                           wreg	equ	0xFE8
  5918                           postdec1	equ	0xFE5
  5919                           fsr1l	equ	0xFE1
  5920                           indf2	equ	0xFDF
  5921                           postinc2	equ	0xFDE
  5922                           postdec2	equ	0xFDD
  5923                           fsr2h	equ	0xFDA
  5924                           fsr2l	equ	0xFD9
  5925                           status	equ	0xFD8
  5926                           
  5927 ;; *************** function _TFT_GreenTab_Initialize *****************
  5928 ;; Defined at:
  5929 ;;		line 681 in file "ST7735_TFT.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;		None
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;		None
  5934 ;; Return value:  Size  Location     Type
  5935 ;;		None               void
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;Total ram usage:        0 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    6
  5950 ;; This function calls:
  5951 ;;		_Rcmd1
  5952 ;;		_Rcmd2red
  5953 ;;		_Rcmd3
  5954 ;;		_write_command
  5955 ;;		_write_data
  5956 ;; This function is called by:
  5957 ;;		_Initialize_Screen
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           	psect	text24
  5962  0018C2                     __ptext24:
  5963                           	opt stack 0
  5964  0018C2                     _TFT_GreenTab_Initialize:
  5965                           	opt stack 23
  5966                           
  5967                           ;ST7735_TFT.c: 683: PORTDbits.RD4 = 1;
  5968                           
  5969                           ;incstack = 0
  5970  0018C2  8883               	bsf	3971,4,c	;volatile
  5971                           
  5972                           ;ST7735_TFT.c: 684: PORTDbits.RD3 = 0;
  5973  0018C4  9683               	bcf	3971,3,c	;volatile
  5974                           
  5975                           ;ST7735_TFT.c: 686: SSPSTAT=0x80;
  5976  0018C6  0E80               	movlw	128
  5977  0018C8  6EC7               	movwf	4039,c	;volatile
  5978                           
  5979                           ;ST7735_TFT.c: 687: SSPCON1=0x30;
  5980  0018CA  0E30               	movlw	48
  5981  0018CC  6EC6               	movwf	4038,c	;volatile
  5982                           
  5983                           ;ST7735_TFT.c: 690: Rcmd1();
  5984  0018CE  ECFD  F005         	call	_Rcmd1	;wreg free
  5985                           
  5986                           ;ST7735_TFT.c: 691: Rcmd2red();
  5987  0018D2  EC88  F00B         	call	_Rcmd2red	;wreg free
  5988                           
  5989                           ;ST7735_TFT.c: 692: Rcmd3();
  5990  0018D6  EC0A  F007         	call	_Rcmd3	;wreg free
  5991                           
  5992                           ;ST7735_TFT.c: 693: write_command(0x36);
  5993  0018DA  0E36               	movlw	54
  5994  0018DC  EC29  F00D         	call	_write_command
  5995                           
  5996                           ;ST7735_TFT.c: 694: write_data(0xC0);
  5997  0018E0  0EC0               	movlw	192
  5998  0018E2  EC21  F00D         	call	_write_data
  5999                           
  6000                           ;ST7735_TFT.c: 695: _tft_type = 1;
  6001  0018E6  0E01               	movlw	1
  6002  0018E8  6E55               	movwf	__tft_type,c
  6003  0018EA  0012               	return		;funcret
  6004  0018EC                     __end_of_TFT_GreenTab_Initialize:
  6005                           	opt stack 0
  6006                           tblptru	equ	0xFF8
  6007                           tblptrh	equ	0xFF7
  6008                           tblptrl	equ	0xFF6
  6009                           tablat	equ	0xFF5
  6010                           prodh	equ	0xFF4
  6011                           prodl	equ	0xFF3
  6012                           intcon	equ	0xFF2
  6013                           intcon2	equ	0xFF1
  6014                           postinc0	equ	0xFEE
  6015                           wreg	equ	0xFE8
  6016                           postdec1	equ	0xFE5
  6017                           fsr1l	equ	0xFE1
  6018                           indf2	equ	0xFDF
  6019                           postinc2	equ	0xFDE
  6020                           postdec2	equ	0xFDD
  6021                           fsr2h	equ	0xFDA
  6022                           fsr2l	equ	0xFD9
  6023                           status	equ	0xFD8
  6024                           
  6025 ;; *************** function _Rcmd3 *****************
  6026 ;; Defined at:
  6027 ;;		line 375 in file "ST7735_TFT.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;		None
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;		None
  6032 ;; Return value:  Size  Location     Type
  6033 ;;		None               void
  6034 ;; Registers used:
  6035 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;Total ram usage:        0 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; Hardware stack levels required when called:    5
  6048 ;; This function calls:
  6049 ;;		_delay_ms
  6050 ;;		_write_command
  6051 ;;		_write_data
  6052 ;; This function is called by:
  6053 ;;		_TFT_GreenTab_Initialize
  6054 ;;		_TFT_BlackTab_Initialize
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           	psect	text25
  6059  000E14                     __ptext25:
  6060                           	opt stack 0
  6061  000E14                     _Rcmd3:
  6062                           	opt stack 23
  6063                           
  6064                           ;ST7735_TFT.c: 377: write_command(0xE0);
  6065                           
  6066                           ;incstack = 0
  6067  000E14  0EE0               	movlw	224
  6068  000E16  EC29  F00D         	call	_write_command
  6069                           
  6070                           ;ST7735_TFT.c: 378: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6071  000E1A  0E02               	movlw	2
  6072  000E1C  EC21  F00D         	call	_write_data
  6073  000E20  0E1C               	movlw	28
  6074  000E22  EC21  F00D         	call	_write_data
  6075  000E26  0E07               	movlw	7
  6076  000E28  EC21  F00D         	call	_write_data
  6077  000E2C  0E12               	movlw	18
  6078  000E2E  EC21  F00D         	call	_write_data
  6079                           
  6080                           ;ST7735_TFT.c: 379: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6081  000E32  0E37               	movlw	55
  6082  000E34  EC21  F00D         	call	_write_data
  6083  000E38  0E32               	movlw	50
  6084  000E3A  EC21  F00D         	call	_write_data
  6085  000E3E  0E29               	movlw	41
  6086  000E40  EC21  F00D         	call	_write_data
  6087  000E44  0E2D               	movlw	45
  6088  000E46  EC21  F00D         	call	_write_data
  6089                           
  6090                           ;ST7735_TFT.c: 380: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6091  000E4A  0E29               	movlw	41
  6092  000E4C  EC21  F00D         	call	_write_data
  6093  000E50  0E25               	movlw	37
  6094  000E52  EC21  F00D         	call	_write_data
  6095  000E56  0E2B               	movlw	43
  6096  000E58  EC21  F00D         	call	_write_data
  6097  000E5C  0E39               	movlw	57
  6098  000E5E  EC21  F00D         	call	_write_data
  6099                           
  6100                           ;ST7735_TFT.c: 381: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6101  000E62  0E00               	movlw	0
  6102  000E64  EC21  F00D         	call	_write_data
  6103  000E68  0E01               	movlw	1
  6104  000E6A  EC21  F00D         	call	_write_data
  6105  000E6E  0E03               	movlw	3
  6106  000E70  EC21  F00D         	call	_write_data
  6107  000E74  0E10               	movlw	16
  6108  000E76  EC21  F00D         	call	_write_data
  6109                           
  6110                           ;ST7735_TFT.c: 382: write_command(0xE1);
  6111  000E7A  0EE1               	movlw	225
  6112  000E7C  EC29  F00D         	call	_write_command
  6113                           
  6114                           ;ST7735_TFT.c: 383: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6115  000E80  0E03               	movlw	3
  6116  000E82  EC21  F00D         	call	_write_data
  6117  000E86  0E1D               	movlw	29
  6118  000E88  EC21  F00D         	call	_write_data
  6119  000E8C  0E07               	movlw	7
  6120  000E8E  EC21  F00D         	call	_write_data
  6121  000E92  0E06               	movlw	6
  6122  000E94  EC21  F00D         	call	_write_data
  6123                           
  6124                           ;ST7735_TFT.c: 384: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6125  000E98  0E2E               	movlw	46
  6126  000E9A  EC21  F00D         	call	_write_data
  6127  000E9E  0E2C               	movlw	44
  6128  000EA0  EC21  F00D         	call	_write_data
  6129  000EA4  0E29               	movlw	41
  6130  000EA6  EC21  F00D         	call	_write_data
  6131  000EAA  0E2D               	movlw	45
  6132  000EAC  EC21  F00D         	call	_write_data
  6133                           
  6134                           ;ST7735_TFT.c: 385: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6135  000EB0  0E2E               	movlw	46
  6136  000EB2  EC21  F00D         	call	_write_data
  6137  000EB6  0E2E               	movlw	46
  6138  000EB8  EC21  F00D         	call	_write_data
  6139  000EBC  0E37               	movlw	55
  6140  000EBE  EC21  F00D         	call	_write_data
  6141  000EC2  0E3F               	movlw	63
  6142  000EC4  EC21  F00D         	call	_write_data
  6143                           
  6144                           ;ST7735_TFT.c: 386: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6145  000EC8  0E00               	movlw	0
  6146  000ECA  EC21  F00D         	call	_write_data
  6147  000ECE  0E00               	movlw	0
  6148  000ED0  EC21  F00D         	call	_write_data
  6149  000ED4  0E02               	movlw	2
  6150  000ED6  EC21  F00D         	call	_write_data
  6151  000EDA  0E10               	movlw	16
  6152  000EDC  EC21  F00D         	call	_write_data
  6153                           
  6154                           ;ST7735_TFT.c: 387: write_command(0x13);
  6155  000EE0  0E13               	movlw	19
  6156  000EE2  EC29  F00D         	call	_write_command
  6157                           
  6158                           ;ST7735_TFT.c: 388: delay_ms(10);
  6159  000EE6  0E00               	movlw	0
  6160  000EE8  6E18               	movwf	delay_ms@ms+1,c
  6161  000EEA  0E0A               	movlw	10
  6162  000EEC  6E17               	movwf	delay_ms@ms,c
  6163  000EEE  ECB0  F00A         	call	_delay_ms	;wreg free
  6164                           
  6165                           ;ST7735_TFT.c: 389: write_command(0x29);
  6166  000EF2  0E29               	movlw	41
  6167  000EF4  EC29  F00D         	call	_write_command
  6168                           
  6169                           ;ST7735_TFT.c: 390: delay_ms(100);
  6170  000EF8  0E00               	movlw	0
  6171  000EFA  6E18               	movwf	delay_ms@ms+1,c
  6172  000EFC  0E64               	movlw	100
  6173  000EFE  6E17               	movwf	delay_ms@ms,c
  6174  000F00  ECB0  F00A         	call	_delay_ms	;wreg free
  6175  000F04  0012               	return		;funcret
  6176  000F06                     __end_of_Rcmd3:
  6177                           	opt stack 0
  6178                           tblptru	equ	0xFF8
  6179                           tblptrh	equ	0xFF7
  6180                           tblptrl	equ	0xFF6
  6181                           tablat	equ	0xFF5
  6182                           prodh	equ	0xFF4
  6183                           prodl	equ	0xFF3
  6184                           intcon	equ	0xFF2
  6185                           intcon2	equ	0xFF1
  6186                           postinc0	equ	0xFEE
  6187                           wreg	equ	0xFE8
  6188                           postdec1	equ	0xFE5
  6189                           fsr1l	equ	0xFE1
  6190                           indf2	equ	0xFDF
  6191                           postinc2	equ	0xFDE
  6192                           postdec2	equ	0xFDD
  6193                           fsr2h	equ	0xFDA
  6194                           fsr2l	equ	0xFD9
  6195                           status	equ	0xFD8
  6196                           
  6197 ;; *************** function _Rcmd2red *****************
  6198 ;; Defined at:
  6199 ;;		line 365 in file "ST7735_TFT.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;		None
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;		None
  6204 ;; Return value:  Size  Location     Type
  6205 ;;		None               void
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;Total ram usage:        0 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    5
  6220 ;; This function calls:
  6221 ;;		_write_command
  6222 ;;		_write_data
  6223 ;; This function is called by:
  6224 ;;		_TFT_GreenTab_Initialize
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text26
  6229  001710                     __ptext26:
  6230                           	opt stack 0
  6231  001710                     _Rcmd2red:
  6232                           	opt stack 23
  6233                           
  6234                           ;ST7735_TFT.c: 367: write_command(0x2A);
  6235                           
  6236                           ;incstack = 0
  6237  001710  0E2A               	movlw	42
  6238  001712  EC29  F00D         	call	_write_command
  6239                           
  6240                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x00);
  6241  001716  0E00               	movlw	0
  6242  001718  EC21  F00D         	call	_write_data
  6243  00171C  0E00               	movlw	0
  6244  00171E  EC21  F00D         	call	_write_data
  6245                           
  6246                           ;ST7735_TFT.c: 369: write_data(0x00); write_data(0x7F);
  6247  001722  0E00               	movlw	0
  6248  001724  EC21  F00D         	call	_write_data
  6249  001728  0E7F               	movlw	127
  6250  00172A  EC21  F00D         	call	_write_data
  6251                           
  6252                           ;ST7735_TFT.c: 370: write_command(0x2B);
  6253  00172E  0E2B               	movlw	43
  6254  001730  EC29  F00D         	call	_write_command
  6255                           
  6256                           ;ST7735_TFT.c: 371: write_data(0x00); write_data(0x00);
  6257  001734  0E00               	movlw	0
  6258  001736  EC21  F00D         	call	_write_data
  6259  00173A  0E00               	movlw	0
  6260  00173C  EC21  F00D         	call	_write_data
  6261                           
  6262                           ;ST7735_TFT.c: 372: write_data(0x00); write_data(0x9F);
  6263  001740  0E00               	movlw	0
  6264  001742  EC21  F00D         	call	_write_data
  6265  001746  0E9F               	movlw	159
  6266  001748  EC21  F00D         	call	_write_data
  6267  00174C  0012               	return		;funcret
  6268  00174E                     __end_of_Rcmd2red:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           intcon	equ	0xFF2
  6277                           intcon2	equ	0xFF1
  6278                           postinc0	equ	0xFEE
  6279                           wreg	equ	0xFE8
  6280                           postdec1	equ	0xFE5
  6281                           fsr1l	equ	0xFE1
  6282                           indf2	equ	0xFDF
  6283                           postinc2	equ	0xFDE
  6284                           postdec2	equ	0xFDD
  6285                           fsr2h	equ	0xFDA
  6286                           fsr2l	equ	0xFD9
  6287                           status	equ	0xFD8
  6288                           
  6289 ;; *************** function _Rcmd1 *****************
  6290 ;; Defined at:
  6291 ;;		line 318 in file "ST7735_TFT.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;		None
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;		None
  6296 ;; Return value:  Size  Location     Type
  6297 ;;		None               void
  6298 ;; Registers used:
  6299 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;Total ram usage:        0 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    5
  6312 ;; This function calls:
  6313 ;;		_delay_ms
  6314 ;;		_write_command
  6315 ;;		_write_data
  6316 ;; This function is called by:
  6317 ;;		_TFT_GreenTab_Initialize
  6318 ;;		_TFT_BlackTab_Initialize
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text27
  6323  000BFA                     __ptext27:
  6324                           	opt stack 0
  6325  000BFA                     _Rcmd1:
  6326                           	opt stack 23
  6327                           
  6328                           ;ST7735_TFT.c: 320: write_command(0x01);
  6329                           
  6330                           ;incstack = 0
  6331  000BFA  0E01               	movlw	1
  6332  000BFC  EC29  F00D         	call	_write_command
  6333                           
  6334                           ;ST7735_TFT.c: 321: delay_ms(150);
  6335  000C00  0E00               	movlw	0
  6336  000C02  6E18               	movwf	delay_ms@ms+1,c
  6337  000C04  0E96               	movlw	150
  6338  000C06  6E17               	movwf	delay_ms@ms,c
  6339  000C08  ECB0  F00A         	call	_delay_ms	;wreg free
  6340                           
  6341                           ;ST7735_TFT.c: 322: write_command(0x11);
  6342  000C0C  0E11               	movlw	17
  6343  000C0E  EC29  F00D         	call	_write_command
  6344                           
  6345                           ;ST7735_TFT.c: 323: delay_ms(500);
  6346  000C12  0E01               	movlw	1
  6347  000C14  6E18               	movwf	delay_ms@ms+1,c
  6348  000C16  0EF4               	movlw	244
  6349  000C18  6E17               	movwf	delay_ms@ms,c
  6350  000C1A  ECB0  F00A         	call	_delay_ms	;wreg free
  6351                           
  6352                           ;ST7735_TFT.c: 324: write_command(0xB1);
  6353  000C1E  0EB1               	movlw	177
  6354  000C20  EC29  F00D         	call	_write_command
  6355                           
  6356                           ;ST7735_TFT.c: 325: write_data(0x01);
  6357  000C24  0E01               	movlw	1
  6358  000C26  EC21  F00D         	call	_write_data
  6359                           
  6360                           ;ST7735_TFT.c: 326: write_data(0x2C);
  6361  000C2A  0E2C               	movlw	44
  6362  000C2C  EC21  F00D         	call	_write_data
  6363                           
  6364                           ;ST7735_TFT.c: 327: write_data(0x2D);
  6365  000C30  0E2D               	movlw	45
  6366  000C32  EC21  F00D         	call	_write_data
  6367                           
  6368                           ;ST7735_TFT.c: 328: write_command(0xB2);
  6369  000C36  0EB2               	movlw	178
  6370  000C38  EC29  F00D         	call	_write_command
  6371                           
  6372                           ;ST7735_TFT.c: 329: write_data(0x01);
  6373  000C3C  0E01               	movlw	1
  6374  000C3E  EC21  F00D         	call	_write_data
  6375                           
  6376                           ;ST7735_TFT.c: 330: write_data(0x2C);
  6377  000C42  0E2C               	movlw	44
  6378  000C44  EC21  F00D         	call	_write_data
  6379                           
  6380                           ;ST7735_TFT.c: 331: write_data(0x2D);
  6381  000C48  0E2D               	movlw	45
  6382  000C4A  EC21  F00D         	call	_write_data
  6383                           
  6384                           ;ST7735_TFT.c: 332: write_command(0xB3);
  6385  000C4E  0EB3               	movlw	179
  6386  000C50  EC29  F00D         	call	_write_command
  6387                           
  6388                           ;ST7735_TFT.c: 333: write_data(0x01);
  6389  000C54  0E01               	movlw	1
  6390  000C56  EC21  F00D         	call	_write_data
  6391                           
  6392                           ;ST7735_TFT.c: 334: write_data(0x2C);
  6393  000C5A  0E2C               	movlw	44
  6394  000C5C  EC21  F00D         	call	_write_data
  6395                           
  6396                           ;ST7735_TFT.c: 335: write_data(0x2D);
  6397  000C60  0E2D               	movlw	45
  6398  000C62  EC21  F00D         	call	_write_data
  6399                           
  6400                           ;ST7735_TFT.c: 336: write_data(0x01);
  6401  000C66  0E01               	movlw	1
  6402  000C68  EC21  F00D         	call	_write_data
  6403                           
  6404                           ;ST7735_TFT.c: 337: write_data(0x2C);
  6405  000C6C  0E2C               	movlw	44
  6406  000C6E  EC21  F00D         	call	_write_data
  6407                           
  6408                           ;ST7735_TFT.c: 338: write_data(0x2D);
  6409  000C72  0E2D               	movlw	45
  6410  000C74  EC21  F00D         	call	_write_data
  6411                           
  6412                           ;ST7735_TFT.c: 339: write_command(0xB4);
  6413  000C78  0EB4               	movlw	180
  6414  000C7A  EC29  F00D         	call	_write_command
  6415                           
  6416                           ;ST7735_TFT.c: 340: write_data(0x07);
  6417  000C7E  0E07               	movlw	7
  6418  000C80  EC21  F00D         	call	_write_data
  6419                           
  6420                           ;ST7735_TFT.c: 341: write_command(0xC0);
  6421  000C84  0EC0               	movlw	192
  6422  000C86  EC29  F00D         	call	_write_command
  6423                           
  6424                           ;ST7735_TFT.c: 342: write_data(0xA2);
  6425  000C8A  0EA2               	movlw	162
  6426  000C8C  EC21  F00D         	call	_write_data
  6427                           
  6428                           ;ST7735_TFT.c: 343: write_data(0x02);
  6429  000C90  0E02               	movlw	2
  6430  000C92  EC21  F00D         	call	_write_data
  6431                           
  6432                           ;ST7735_TFT.c: 344: write_data(0x84);
  6433  000C96  0E84               	movlw	132
  6434  000C98  EC21  F00D         	call	_write_data
  6435                           
  6436                           ;ST7735_TFT.c: 345: write_command(0xC1);
  6437  000C9C  0EC1               	movlw	193
  6438  000C9E  EC29  F00D         	call	_write_command
  6439                           
  6440                           ;ST7735_TFT.c: 346: write_data(0xC5);
  6441  000CA2  0EC5               	movlw	197
  6442  000CA4  EC21  F00D         	call	_write_data
  6443                           
  6444                           ;ST7735_TFT.c: 347: write_command(0xC2);
  6445  000CA8  0EC2               	movlw	194
  6446  000CAA  EC29  F00D         	call	_write_command
  6447                           
  6448                           ;ST7735_TFT.c: 348: write_data(0x0A);
  6449  000CAE  0E0A               	movlw	10
  6450  000CB0  EC21  F00D         	call	_write_data
  6451                           
  6452                           ;ST7735_TFT.c: 349: write_data(0x00);
  6453  000CB4  0E00               	movlw	0
  6454  000CB6  EC21  F00D         	call	_write_data
  6455                           
  6456                           ;ST7735_TFT.c: 350: write_command(0xC3);
  6457  000CBA  0EC3               	movlw	195
  6458  000CBC  EC29  F00D         	call	_write_command
  6459                           
  6460                           ;ST7735_TFT.c: 351: write_data(0x8A);
  6461  000CC0  0E8A               	movlw	138
  6462  000CC2  EC21  F00D         	call	_write_data
  6463                           
  6464                           ;ST7735_TFT.c: 352: write_data(0x2A);
  6465  000CC6  0E2A               	movlw	42
  6466  000CC8  EC21  F00D         	call	_write_data
  6467                           
  6468                           ;ST7735_TFT.c: 353: write_command(0xC4);
  6469  000CCC  0EC4               	movlw	196
  6470  000CCE  EC29  F00D         	call	_write_command
  6471                           
  6472                           ;ST7735_TFT.c: 354: write_data(0x8A);
  6473  000CD2  0E8A               	movlw	138
  6474  000CD4  EC21  F00D         	call	_write_data
  6475                           
  6476                           ;ST7735_TFT.c: 355: write_data(0xEE);
  6477  000CD8  0EEE               	movlw	238
  6478  000CDA  EC21  F00D         	call	_write_data
  6479                           
  6480                           ;ST7735_TFT.c: 356: write_command(0xC5);
  6481  000CDE  0EC5               	movlw	197
  6482  000CE0  EC29  F00D         	call	_write_command
  6483                           
  6484                           ;ST7735_TFT.c: 357: write_data(0x0E);
  6485  000CE4  0E0E               	movlw	14
  6486  000CE6  EC21  F00D         	call	_write_data
  6487                           
  6488                           ;ST7735_TFT.c: 358: write_command(0x20);
  6489  000CEA  0E20               	movlw	32
  6490  000CEC  EC29  F00D         	call	_write_command
  6491                           
  6492                           ;ST7735_TFT.c: 359: write_command(0x36);
  6493  000CF0  0E36               	movlw	54
  6494  000CF2  EC29  F00D         	call	_write_command
  6495                           
  6496                           ;ST7735_TFT.c: 360: write_data(0xC8);
  6497  000CF6  0EC8               	movlw	200
  6498  000CF8  EC21  F00D         	call	_write_data
  6499                           
  6500                           ;ST7735_TFT.c: 361: write_command(0x3A);
  6501  000CFC  0E3A               	movlw	58
  6502  000CFE  EC29  F00D         	call	_write_command
  6503                           
  6504                           ;ST7735_TFT.c: 362: write_data(0x05);
  6505  000D02  0E05               	movlw	5
  6506  000D04  EC21  F00D         	call	_write_data
  6507  000D08  0012               	return		;funcret
  6508  000D0A                     __end_of_Rcmd1:
  6509                           	opt stack 0
  6510                           tblptru	equ	0xFF8
  6511                           tblptrh	equ	0xFF7
  6512                           tblptrl	equ	0xFF6
  6513                           tablat	equ	0xFF5
  6514                           prodh	equ	0xFF4
  6515                           prodl	equ	0xFF3
  6516                           intcon	equ	0xFF2
  6517                           intcon2	equ	0xFF1
  6518                           postinc0	equ	0xFEE
  6519                           wreg	equ	0xFE8
  6520                           postdec1	equ	0xFE5
  6521                           fsr1l	equ	0xFE1
  6522                           indf2	equ	0xFDF
  6523                           postinc2	equ	0xFDE
  6524                           postdec2	equ	0xFDD
  6525                           fsr2h	equ	0xFDA
  6526                           fsr2l	equ	0xFD9
  6527                           status	equ	0xFD8
  6528                           
  6529 ;; *************** function _write_data *****************
  6530 ;; Defined at:
  6531 ;;		line 246 in file "ST7735_TFT.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;  data_           1    wreg     unsigned char 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  data_           1   18[COMRAM] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, status,2, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;Total ram usage:        1 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    4
  6552 ;; This function calls:
  6553 ;;		_spiwrite
  6554 ;; This function is called by:
  6555 ;;		_Rcmd1
  6556 ;;		_Rcmd2red
  6557 ;;		_Rcmd3
  6558 ;;		_setAddrWindow
  6559 ;;		_drawPixel
  6560 ;;		_TFT_GreenTab_Initialize
  6561 ;;		_Bcmd
  6562 ;;		_setScrollDefinition
  6563 ;;		_Rcmd2green
  6564 ;;		_VerticalScroll
  6565 ;; This function uses a non-reentrant model
  6566 ;;
  6567                           
  6568                           	psect	text28
  6569  001A42                     __ptext28:
  6570                           	opt stack 0
  6571  001A42                     _write_data:
  6572                           	opt stack 22
  6573                           
  6574                           ;incstack = 0
  6575                           ;write_data@data_ stored from wreg
  6576  001A42  6E13               	movwf	write_data@data_,c
  6577                           
  6578                           ;ST7735_TFT.c: 248: PORTDbits.RD4 = 0;
  6579  001A44  9883               	bcf	3971,4,c	;volatile
  6580                           
  6581                           ;ST7735_TFT.c: 249: PORTDbits.RD3 = 1;
  6582  001A46  8683               	bsf	3971,3,c	;volatile
  6583                           
  6584                           ;ST7735_TFT.c: 250: spiwrite(data_);
  6585  001A48  5013               	movf	write_data@data_,w,c
  6586  001A4A  ECE0  F00C         	call	_spiwrite
  6587                           
  6588                           ;ST7735_TFT.c: 251: PORTDbits.RD4 = 1;
  6589  001A4E  8883               	bsf	3971,4,c	;volatile
  6590  001A50  0012               	return		;funcret
  6591  001A52                     __end_of_write_data:
  6592                           	opt stack 0
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           intcon	equ	0xFF2
  6600                           intcon2	equ	0xFF1
  6601                           postinc0	equ	0xFEE
  6602                           wreg	equ	0xFE8
  6603                           postdec1	equ	0xFE5
  6604                           fsr1l	equ	0xFE1
  6605                           indf2	equ	0xFDF
  6606                           postinc2	equ	0xFDE
  6607                           postdec2	equ	0xFDD
  6608                           fsr2h	equ	0xFDA
  6609                           fsr2l	equ	0xFD9
  6610                           status	equ	0xFD8
  6611                           
  6612 ;; *************** function _write_command *****************
  6613 ;; Defined at:
  6614 ;;		line 235 in file "ST7735_TFT.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  cmd_            1    wreg     unsigned char 
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;  cmd_            1   18[COMRAM] unsigned char 
  6619 ;; Return value:  Size  Location     Type
  6620 ;;		None               void
  6621 ;; Registers used:
  6622 ;;		wreg, status,2, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;Total ram usage:        1 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    4
  6635 ;; This function calls:
  6636 ;;		_spiwrite
  6637 ;; This function is called by:
  6638 ;;		_Rcmd1
  6639 ;;		_Rcmd2red
  6640 ;;		_Rcmd3
  6641 ;;		_setAddrWindow
  6642 ;;		_TFT_GreenTab_Initialize
  6643 ;;		_Bcmd
  6644 ;;		_setScrollDefinition
  6645 ;;		_Rcmd2green
  6646 ;;		_VerticalScroll
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	text29
  6651  001A52                     __ptext29:
  6652                           	opt stack 0
  6653  001A52                     _write_command:
  6654                           	opt stack 22
  6655                           
  6656                           ;incstack = 0
  6657                           ;write_command@cmd_ stored from wreg
  6658  001A52  6E13               	movwf	write_command@cmd_,c
  6659                           
  6660                           ;ST7735_TFT.c: 237: PORTDbits.RD4 = 0;
  6661  001A54  9883               	bcf	3971,4,c	;volatile
  6662                           
  6663                           ;ST7735_TFT.c: 239: PORTDbits.RD3 = 0;
  6664  001A56  9683               	bcf	3971,3,c	;volatile
  6665                           
  6666                           ;ST7735_TFT.c: 240: spiwrite(cmd_);
  6667  001A58  5013               	movf	write_command@cmd_,w,c
  6668  001A5A  ECE0  F00C         	call	_spiwrite
  6669                           
  6670                           ;ST7735_TFT.c: 242: PORTDbits.RD4 = 1;
  6671  001A5E  8883               	bsf	3971,4,c	;volatile
  6672  001A60  0012               	return		;funcret
  6673  001A62                     __end_of_write_command:
  6674                           	opt stack 0
  6675                           tblptru	equ	0xFF8
  6676                           tblptrh	equ	0xFF7
  6677                           tblptrl	equ	0xFF6
  6678                           tablat	equ	0xFF5
  6679                           prodh	equ	0xFF4
  6680                           prodl	equ	0xFF3
  6681                           intcon	equ	0xFF2
  6682                           intcon2	equ	0xFF1
  6683                           postinc0	equ	0xFEE
  6684                           wreg	equ	0xFE8
  6685                           postdec1	equ	0xFE5
  6686                           fsr1l	equ	0xFE1
  6687                           indf2	equ	0xFDF
  6688                           postinc2	equ	0xFDE
  6689                           postdec2	equ	0xFDD
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _spiwrite *****************
  6695 ;; Defined at:
  6696 ;;		line 226 in file "ST7735_TFT.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  spidata         1    wreg     unsigned char 
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  spidata         1   17[COMRAM] unsigned char 
  6701 ;;  x               1   16[COMRAM] unsigned char 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;		None               void
  6704 ;; Registers used:
  6705 ;;		wreg
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;Total ram usage:        2 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    3
  6718 ;; This function calls:
  6719 ;;		Nothing
  6720 ;; This function is called by:
  6721 ;;		_write_command
  6722 ;;		_write_data
  6723 ;;		_drawFastVLine
  6724 ;;		_fillRectangle
  6725 ;;		_drawFastHLine
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           	psect	text30
  6730  0019C0                     __ptext30:
  6731                           	opt stack 0
  6732  0019C0                     _spiwrite:
  6733                           	opt stack 24
  6734                           
  6735                           ;incstack = 0
  6736                           ;spiwrite@spidata stored from wreg
  6737  0019C0  6E12               	movwf	spiwrite@spidata,c
  6738                           
  6739                           ;ST7735_TFT.c: 228: char x;
  6740                           ;ST7735_TFT.c: 229: PIR1bits.SSPIF = 0;
  6741  0019C2  969E               	bcf	3998,3,c	;volatile
  6742                           
  6743                           ;ST7735_TFT.c: 230: x = SSPBUF;
  6744  0019C4  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6745                           
  6746                           ;ST7735_TFT.c: 231: SSPBUF = spidata;
  6747  0019C8  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6748                           
  6749                           ;ST7735_TFT.c: 232: while (!SSPSTATbits.BF);
  6750  0019CC  D000               	goto	l402
  6751  0019CE                     l402:
  6752  0019CE  A0C7               	btfss	4039,0,c	;volatile
  6753  0019D0  D7FE               	goto	l402
  6754  0019D2  0012               	return		;funcret
  6755  0019D4                     __end_of_spiwrite:
  6756                           	opt stack 0
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           intcon	equ	0xFF2
  6764                           intcon2	equ	0xFF1
  6765                           postinc0	equ	0xFEE
  6766                           wreg	equ	0xFE8
  6767                           postdec1	equ	0xFE5
  6768                           fsr1l	equ	0xFE1
  6769                           indf2	equ	0xFDF
  6770                           postinc2	equ	0xFDE
  6771                           postdec2	equ	0xFDD
  6772                           fsr2h	equ	0xFDA
  6773                           fsr2l	equ	0xFD9
  6774                           status	equ	0xFD8
  6775                           
  6776 ;; *************** function _LCD_Reset *****************
  6777 ;; Defined at:
  6778 ;;		line 254 in file "ST7735_TFT.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;		None
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;		None
  6783 ;; Return value:  Size  Location     Type
  6784 ;;		None               void
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;Total ram usage:        0 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    5
  6799 ;; This function calls:
  6800 ;;		_delay_ms
  6801 ;; This function is called by:
  6802 ;;		_Initialize_Screen
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	text31
  6807  0019FA                     __ptext31:
  6808                           	opt stack 0
  6809  0019FA                     _LCD_Reset:
  6810                           	opt stack 24
  6811                           
  6812                           ;ST7735_TFT.c: 256: PORTDbits.RD2 = 0;
  6813                           
  6814                           ;incstack = 0
  6815  0019FA  9483               	bcf	3971,2,c	;volatile
  6816                           
  6817                           ;ST7735_TFT.c: 257: delay_ms(100);
  6818  0019FC  0E00               	movlw	0
  6819  0019FE  6E18               	movwf	delay_ms@ms+1,c
  6820  001A00  0E64               	movlw	100
  6821  001A02  6E17               	movwf	delay_ms@ms,c
  6822  001A04  ECB0  F00A         	call	_delay_ms	;wreg free
  6823                           
  6824                           ;ST7735_TFT.c: 258: PORTDbits.RD2 = 1;
  6825  001A08  8483               	bsf	3971,2,c	;volatile
  6826  001A0A  0012               	return		;funcret
  6827  001A0C                     __end_of_LCD_Reset:
  6828                           	opt stack 0
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           prodh	equ	0xFF4
  6834                           prodl	equ	0xFF3
  6835                           intcon	equ	0xFF2
  6836                           intcon2	equ	0xFF1
  6837                           postinc0	equ	0xFEE
  6838                           wreg	equ	0xFE8
  6839                           postdec1	equ	0xFE5
  6840                           fsr1l	equ	0xFE1
  6841                           indf2	equ	0xFDF
  6842                           postinc2	equ	0xFDE
  6843                           postdec2	equ	0xFDD
  6844                           fsr2h	equ	0xFDA
  6845                           fsr2l	equ	0xFD9
  6846                           status	equ	0xFD8
  6847                           
  6848 ;; *************** function _delay_ms *****************
  6849 ;; Defined at:
  6850 ;;		line 101 in file "ST7735_TFT.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  ms              2   22[COMRAM] int 
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;  count           2   26[COMRAM] int 
  6855 ;; Return value:  Size  Location     Type
  6856 ;;		None               void
  6857 ;; Registers used:
  6858 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;Total ram usage:        6 bytes
  6869 ;; Hardware stack levels used:    1
  6870 ;; Hardware stack levels required when called:    4
  6871 ;; This function calls:
  6872 ;;		___wmul
  6873 ;; This function is called by:
  6874 ;;		_LCD_Reset
  6875 ;;		_Rcmd1
  6876 ;;		_Rcmd3
  6877 ;;		_Bcmd
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text32
  6882  001560                     __ptext32:
  6883                           	opt stack 0
  6884  001560                     _delay_ms:
  6885                           	opt stack 23
  6886                           
  6887                           ;ST7735_TFT.c: 107: int count;
  6888                           ;ST7735_TFT.c: 108: count = 8000000/4000/8 * ms;
  6889                           
  6890                           ;incstack = 0
  6891  001560  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6892  001564  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6893  001568  0E00               	movlw	0
  6894  00156A  6E14               	movwf	___wmul@multiplicand+1,c
  6895  00156C  0EFA               	movlw	250
  6896  00156E  6E13               	movwf	___wmul@multiplicand,c
  6897  001570  EC76  F00C         	call	___wmul	;wreg free
  6898  001574  C011  F01B         	movff	?___wmul,delay_ms@count
  6899  001578  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6900                           
  6901                           ;ST7735_TFT.c: 109: count = (0xffff - count);
  6902  00157C  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6903  001580  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6904  001584  1E19               	comf	??_delay_ms,f,c
  6905  001586  1E1A               	comf	??_delay_ms+1,f,c
  6906  001588  4A19               	infsnz	??_delay_ms,f,c
  6907  00158A  2A1A               	incf	??_delay_ms+1,f,c
  6908  00158C  0EFF               	movlw	255
  6909  00158E  2419               	addwf	??_delay_ms,w,c
  6910  001590  6E1B               	movwf	delay_ms@count,c
  6911  001592  0EFF               	movlw	255
  6912  001594  201A               	addwfc	??_delay_ms+1,w,c
  6913  001596  6E1C               	movwf	delay_ms@count+1,c
  6914                           
  6915                           ;ST7735_TFT.c: 111: T3CON = 0xb8;
  6916  001598  0EB8               	movlw	184
  6917  00159A  6EB1               	movwf	4017,c	;volatile
  6918                           
  6919                           ;ST7735_TFT.c: 113: TMR0L = count & 0x00ff;
  6920  00159C  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  6921                           
  6922                           ;ST7735_TFT.c: 114: TMR0H = count >> 8;
  6923  0015A0  501C               	movf	delay_ms@count+1,w,c
  6924  0015A2  6ED7               	movwf	4055,c	;volatile
  6925                           
  6926                           ;ST7735_TFT.c: 116: PIR2bits.TMR3IF = 0;
  6927  0015A4  92A1               	bcf	4001,1,c	;volatile
  6928                           
  6929                           ;ST7735_TFT.c: 117: T3CONbits.TMR3ON = 1;
  6930  0015A6  80B1               	bsf	4017,0,c	;volatile
  6931                           
  6932                           ;ST7735_TFT.c: 119: while (PIR2bits.TMR3IF == 0);
  6933  0015A8  D000               	goto	l392
  6934  0015AA                     l392:
  6935  0015AA  A2A1               	btfss	4001,1,c	;volatile
  6936  0015AC  D7FE               	goto	l392
  6937                           
  6938                           ;ST7735_TFT.c: 120: T3CONbits.TMR3ON = 0;
  6939  0015AE  90B1               	bcf	4017,0,c	;volatile
  6940  0015B0  0012               	return		;funcret
  6941  0015B2                     __end_of_delay_ms:
  6942                           	opt stack 0
  6943                           tblptru	equ	0xFF8
  6944                           tblptrh	equ	0xFF7
  6945                           tblptrl	equ	0xFF6
  6946                           tablat	equ	0xFF5
  6947                           prodh	equ	0xFF4
  6948                           prodl	equ	0xFF3
  6949                           intcon	equ	0xFF2
  6950                           intcon2	equ	0xFF1
  6951                           postinc0	equ	0xFEE
  6952                           wreg	equ	0xFE8
  6953                           postdec1	equ	0xFE5
  6954                           fsr1l	equ	0xFE1
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           fsr2h	equ	0xFDA
  6959                           fsr2l	equ	0xFD9
  6960                           status	equ	0xFD8
  6961                           
  6962 ;; *************** function ___wmul *****************
  6963 ;; Defined at:
  6964 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  multiplier      2   16[COMRAM] unsigned int 
  6967 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;  product         2   20[COMRAM] unsigned int 
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  2   16[COMRAM] unsigned int 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0, prodl, prodh
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;Total ram usage:        6 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    3
  6986 ;; This function calls:
  6987 ;;		Nothing
  6988 ;; This function is called by:
  6989 ;;		_main
  6990 ;;		_delay_ms
  6991 ;;		_drawChar
  6992 ;;		_printf
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text33
  6997  0018EC                     __ptext33:
  6998                           	opt stack 0
  6999  0018EC                     ___wmul:
  7000                           	opt stack 26
  7001                           
  7002                           ;incstack = 0
  7003  0018EC  5011               	movf	___wmul@multiplier,w,c
  7004  0018EE  0213               	mulwf	___wmul@multiplicand,c
  7005  0018F0  CFF3 F015          	movff	prodl,___wmul@product
  7006  0018F4  CFF4 F016          	movff	prodh,___wmul@product+1
  7007  0018F8  5011               	movf	___wmul@multiplier,w,c
  7008  0018FA  0214               	mulwf	___wmul@multiplicand+1,c
  7009  0018FC  50F3               	movf	prodl,w,c
  7010  0018FE  2616               	addwf	___wmul@product+1,f,c
  7011  001900  5012               	movf	___wmul@multiplier+1,w,c
  7012  001902  0213               	mulwf	___wmul@multiplicand,c
  7013  001904  50F3               	movf	prodl,w,c
  7014  001906  2616               	addwf	___wmul@product+1,f,c
  7015  001908  C015  F011         	movff	___wmul@product,?___wmul
  7016  00190C  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7017  001910  D000               	goto	l677
  7018  001912                     l677:
  7019  001912  0012               	return		;funcret
  7020  001914                     __end_of___wmul:
  7021                           	opt stack 0
  7022                           tblptru	equ	0xFF8
  7023                           tblptrh	equ	0xFF7
  7024                           tblptrl	equ	0xFF6
  7025                           tablat	equ	0xFF5
  7026                           prodh	equ	0xFF4
  7027                           prodl	equ	0xFF3
  7028                           intcon	equ	0xFF2
  7029                           intcon2	equ	0xFF1
  7030                           postinc0	equ	0xFEE
  7031                           wreg	equ	0xFE8
  7032                           postdec1	equ	0xFE5
  7033                           fsr1l	equ	0xFE1
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           postdec2	equ	0xFDD
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function _Do_Init *****************
  7042 ;; Defined at:
  7043 ;;		line 141 in file "Lab10_sample_3.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;		None               void
  7050 ;; Registers used:
  7051 ;;		wreg, status,2, status,0, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    7
  7064 ;; This function calls:
  7065 ;;		_DS1621_Init
  7066 ;;		_I2C_Init
  7067 ;;		_init_INTERRUPT
  7068 ;;		_init_UART
  7069 ;; This function is called by:
  7070 ;;		_main
  7071 ;; This function uses a non-reentrant model
  7072 ;;
  7073                           
  7074                           	psect	text34
  7075  00178C                     __ptext34:
  7076                           	opt stack 0
  7077  00178C                     _Do_Init:
  7078                           	opt stack 23
  7079                           
  7080                           ;Lab10_sample_3.c: 143: init_UART();
  7081                           
  7082                           ;incstack = 0
  7083  00178C  ECEA  F00C         	call	_init_UART	;wreg free
  7084                           
  7085                           ;Lab10_sample_3.c: 144: OSCCON=0x70;
  7086  001790  0E70               	movlw	112
  7087  001792  6ED3               	movwf	4051,c	;volatile
  7088                           
  7089                           ;Lab10_sample_3.c: 146: ADCON1=0x0F;
  7090  001794  0E0F               	movlw	15
  7091  001796  6EC1               	movwf	4033,c	;volatile
  7092                           
  7093                           ;Lab10_sample_3.c: 148: TRISB = 0x01;
  7094  001798  0E01               	movlw	1
  7095  00179A  6E93               	movwf	3987,c	;volatile
  7096                           
  7097                           ;Lab10_sample_3.c: 149: TRISC = 0x00;
  7098  00179C  0E00               	movlw	0
  7099  00179E  6E94               	movwf	3988,c	;volatile
  7100                           
  7101                           ;Lab10_sample_3.c: 150: TRISD = 0x00;
  7102  0017A0  0E00               	movlw	0
  7103  0017A2  6E95               	movwf	3989,c	;volatile
  7104                           
  7105                           ;Lab10_sample_3.c: 151: TRISE = 0x00;
  7106  0017A4  0E00               	movlw	0
  7107  0017A6  6E96               	movwf	3990,c	;volatile
  7108                           
  7109                           ;Lab10_sample_3.c: 153: RBPU = 0;
  7110  0017A8  9EF1               	bcf	intcon2,7,c	;volatile
  7111                           
  7112                           ;Lab10_sample_3.c: 154: init_INTERRUPT();
  7113  0017AA  EC49  F00C         	call	_init_INTERRUPT	;wreg free
  7114                           
  7115                           ;Lab10_sample_3.c: 155: I2C_Init(100000);
  7116  0017AE  0EA0               	movlw	160
  7117  0017B0  6E11               	movwf	I2C_Init@c,c
  7118  0017B2  0E86               	movlw	134
  7119  0017B4  6E12               	movwf	I2C_Init@c+1,c
  7120  0017B6  0E01               	movlw	1
  7121  0017B8  6E13               	movwf	I2C_Init@c+2,c
  7122  0017BA  0E00               	movlw	0
  7123  0017BC  6E14               	movwf	I2C_Init@c+3,c
  7124  0017BE  EC44  F00D         	call	_I2C_Init	;wreg free
  7125                           
  7126                           ;Lab10_sample_3.c: 156: DS1621_Init();
  7127  0017C2  ECAB  F00C         	call	_DS1621_Init	;wreg free
  7128  0017C6  0012               	return		;funcret
  7129  0017C8                     __end_of_Do_Init:
  7130                           	opt stack 0
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           intcon2	equ	0xFF1
  7139                           postinc0	equ	0xFEE
  7140                           wreg	equ	0xFE8
  7141                           postdec1	equ	0xFE5
  7142                           fsr1l	equ	0xFE1
  7143                           indf2	equ	0xFDF
  7144                           postinc2	equ	0xFDE
  7145                           postdec2	equ	0xFDD
  7146                           fsr2h	equ	0xFDA
  7147                           fsr2l	equ	0xFD9
  7148                           status	equ	0xFD8
  7149                           
  7150 ;; *************** function _init_UART *****************
  7151 ;; Defined at:
  7152 ;;		line 127 in file "Lab10_sample_3.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;		None
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;		None
  7157 ;; Return value:  Size  Location     Type
  7158 ;;		None               void
  7159 ;; Registers used:
  7160 ;;		wreg, status,2, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;Total ram usage:        0 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    4
  7173 ;; This function calls:
  7174 ;;		_OpenUSART
  7175 ;; This function is called by:
  7176 ;;		_Do_Init
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           	psect	text35
  7181  0019D4                     __ptext35:
  7182                           	opt stack 0
  7183  0019D4                     _init_UART:
  7184                           	opt stack 25
  7185                           
  7186                           ;Lab10_sample_3.c: 129: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0
      +                          b11111111 & 0b11111111, 25);
  7187                           
  7188                           ;incstack = 0
  7189  0019D4  0E00               	movlw	0
  7190  0019D6  6E12               	movwf	OpenUSART@spbrg+1,c
  7191  0019D8  0E19               	movlw	25
  7192  0019DA  6E11               	movwf	OpenUSART@spbrg,c
  7193  0019DC  0E3C               	movlw	60
  7194  0019DE  ECC0  F009         	call	_OpenUSART
  7195                           
  7196                           ;Lab10_sample_3.c: 130: OSCCON = 0x70;
  7197  0019E2  0E70               	movlw	112
  7198  0019E4  6ED3               	movwf	4051,c	;volatile
  7199  0019E6  0012               	return		;funcret
  7200  0019E8                     __end_of_init_UART:
  7201                           	opt stack 0
  7202                           tblptru	equ	0xFF8
  7203                           tblptrh	equ	0xFF7
  7204                           tblptrl	equ	0xFF6
  7205                           tablat	equ	0xFF5
  7206                           prodh	equ	0xFF4
  7207                           prodl	equ	0xFF3
  7208                           intcon	equ	0xFF2
  7209                           intcon2	equ	0xFF1
  7210                           postinc0	equ	0xFEE
  7211                           wreg	equ	0xFE8
  7212                           postdec1	equ	0xFE5
  7213                           fsr1l	equ	0xFE1
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           postdec2	equ	0xFDD
  7217                           fsr2h	equ	0xFDA
  7218                           fsr2l	equ	0xFD9
  7219                           status	equ	0xFD8
  7220                           
  7221 ;; *************** function _OpenUSART *****************
  7222 ;; Defined at:
  7223 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  config          1    wreg     unsigned char 
  7226 ;;  spbrg           2   16[COMRAM] unsigned int 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  config          1   18[COMRAM] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;		None               void
  7231 ;; Registers used:
  7232 ;;		wreg, status,2
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;Total ram usage:        3 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    3
  7245 ;; This function calls:
  7246 ;;		Nothing
  7247 ;; This function is called by:
  7248 ;;		_init_UART
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           	psect	text36
  7253  001380                     __ptext36:
  7254                           	opt stack 0
  7255  001380                     _OpenUSART:
  7256                           	opt stack 25
  7257                           
  7258                           ;incstack = 0
  7259                           ;OpenUSART@config stored from wreg
  7260  001380  6E13               	movwf	OpenUSART@config,c
  7261  001382  0E00               	movlw	0
  7262  001384  6EAC               	movwf	4012,c	;volatile
  7263  001386  0E00               	movlw	0
  7264  001388  6EAB               	movwf	4011,c	;volatile
  7265  00138A  A013               	btfss	OpenUSART@config,0,c
  7266  00138C  D002               	goto	l4241
  7267  00138E  88AC               	bsf	4012,4,c	;volatile
  7268  001390  D000               	goto	l4241
  7269  001392                     l4241:
  7270  001392  A213               	btfss	OpenUSART@config,1,c
  7271  001394  D003               	goto	l4245
  7272  001396  8CAC               	bsf	4012,6,c	;volatile
  7273  001398  8CAB               	bsf	4011,6,c	;volatile
  7274  00139A  D000               	goto	l4245
  7275  00139C                     l4245:
  7276  00139C  A413               	btfss	OpenUSART@config,2,c
  7277  00139E  D002               	goto	l4249
  7278  0013A0  8EAC               	bsf	4012,7,c	;volatile
  7279  0013A2  D000               	goto	l4249
  7280  0013A4                     l4249:
  7281  0013A4  A613               	btfss	OpenUSART@config,3,c
  7282  0013A6  D002               	goto	l665
  7283  0013A8  88AB               	bsf	4011,4,c	;volatile
  7284  0013AA  D002               	goto	l4253
  7285  0013AC                     l665:
  7286  0013AC  8AAB               	bsf	4011,5,c	;volatile
  7287  0013AE  D000               	goto	l4253
  7288  0013B0                     l4253:
  7289  0013B0  B813               	btfsc	OpenUSART@config,4,c
  7290  0013B2  84AC               	bsf	4012,2,c	;volatile
  7291  0013B4  989E               	bcf	3998,4,c	;volatile
  7292  0013B6  AA13               	btfss	OpenUSART@config,5,c
  7293  0013B8  D002               	goto	l4261
  7294  0013BA  86AB               	bsf	4011,3,c	;volatile
  7295  0013BC  D000               	goto	l4261
  7296  0013BE                     l4261:
  7297  0013BE  AC13               	btfss	OpenUSART@config,6,c
  7298  0013C0  D002               	goto	l669
  7299  0013C2  8A9D               	bsf	3997,5,c	;volatile
  7300  0013C4  D001               	goto	l670
  7301  0013C6                     l669:
  7302  0013C6  9A9D               	bcf	3997,5,c	;volatile
  7303  0013C8                     l670:
  7304  0013C8  9A9E               	bcf	3998,5,c	;volatile
  7305  0013CA  AE13               	btfss	OpenUSART@config,7,c
  7306  0013CC  D002               	goto	l671
  7307  0013CE  889D               	bsf	3997,4,c	;volatile
  7308  0013D0  D001               	goto	l672
  7309  0013D2                     l671:
  7310  0013D2  989D               	bcf	3997,4,c	;volatile
  7311  0013D4                     l672:
  7312  0013D4  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7313  0013D8  5012               	movf	OpenUSART@spbrg+1,w,c
  7314  0013DA  6EB0               	movwf	4016,c	;volatile
  7315  0013DC  8AAC               	bsf	4012,5,c	;volatile
  7316  0013DE  8EAB               	bsf	4011,7,c	;volatile
  7317  0013E0  9C94               	bcf	3988,6,c	;volatile
  7318  0013E2  8E94               	bsf	3988,7,c	;volatile
  7319  0013E4  B8AC               	btfsc	4012,4,c	;volatile
  7320  0013E6  BEAC               	btfsc	4012,7,c	;volatile
  7321  0013E8  D002               	goto	l674
  7322  0013EA  8C94               	bsf	3988,6,c	;volatile
  7323  0013EC  D000               	goto	l674
  7324  0013EE                     l674:
  7325  0013EE  0012               	return		;funcret
  7326  0013F0                     __end_of_OpenUSART:
  7327                           	opt stack 0
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           prodh	equ	0xFF4
  7333                           prodl	equ	0xFF3
  7334                           intcon	equ	0xFF2
  7335                           intcon2	equ	0xFF1
  7336                           postinc0	equ	0xFEE
  7337                           wreg	equ	0xFE8
  7338                           postdec1	equ	0xFE5
  7339                           fsr1l	equ	0xFE1
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _init_INTERRUPT *****************
  7348 ;; Defined at:
  7349 ;;		line 13 in file "Interrupt.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;		None
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;		None               void
  7356 ;; Registers used:
  7357 ;;		wreg, status,2
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;Total ram usage:        0 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    3
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_Do_Init
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text37
  7378  001892                     __ptext37:
  7379                           	opt stack 0
  7380  001892                     _init_INTERRUPT:
  7381                           	opt stack 26
  7382                           
  7383                           ;Interrupt.c: 15: INTCONbits.INT0IF = 0;
  7384                           
  7385                           ;incstack = 0
  7386  001892  92F2               	bcf	intcon,1,c	;volatile
  7387                           
  7388                           ;Interrupt.c: 16: INTCON2bits.INTEDG0 = 0;
  7389  001894  9CF1               	bcf	intcon2,6,c	;volatile
  7390                           
  7391                           ;Interrupt.c: 17: INTCONbits.INT0IE = 1;
  7392  001896  88F2               	bsf	intcon,4,c	;volatile
  7393                           
  7394                           ;Interrupt.c: 18: TMR1H = 0;
  7395  001898  0E00               	movlw	0
  7396  00189A  6ECF               	movwf	4047,c	;volatile
  7397                           
  7398                           ;Interrupt.c: 19: TMR1L = 0;
  7399  00189C  0E00               	movlw	0
  7400  00189E  6ECE               	movwf	4046,c	;volatile
  7401                           
  7402                           ;Interrupt.c: 20: PIR1bits.TMR1IF = 0;
  7403  0018A0  909E               	bcf	3998,0,c	;volatile
  7404                           
  7405                           ;Interrupt.c: 21: PIE1bits.TMR1IE = 1;
  7406  0018A2  809D               	bsf	3997,0,c	;volatile
  7407                           
  7408                           ;Interrupt.c: 22: INTCONbits.PEIE = 1;
  7409  0018A4  8CF2               	bsf	intcon,6,c	;volatile
  7410                           
  7411                           ;Interrupt.c: 23: INTCONbits.GIE = 1;
  7412  0018A6  8EF2               	bsf	intcon,7,c	;volatile
  7413                           
  7414                           ;Interrupt.c: 24: nec_ok = 0;
  7415  0018A8  0E00               	movlw	0
  7416  0018AA  6E4F               	movwf	_nec_ok+1,c
  7417  0018AC  0E00               	movlw	0
  7418  0018AE  6E4E               	movwf	_nec_ok,c
  7419                           
  7420                           ;Interrupt.c: 25: Nec_code = 0x00;
  7421  0018B0  0E00               	movlw	0
  7422  0018B2  6E46               	movwf	_Nec_code,c
  7423  0018B4  0E00               	movlw	0
  7424  0018B6  6E47               	movwf	_Nec_code+1,c
  7425  0018B8  0E00               	movlw	0
  7426  0018BA  6E48               	movwf	_Nec_code+2,c
  7427  0018BC  0E00               	movlw	0
  7428  0018BE  6E49               	movwf	_Nec_code+3,c
  7429  0018C0  0012               	return		;funcret
  7430  0018C2                     __end_of_init_INTERRUPT:
  7431                           	opt stack 0
  7432                           tblptru	equ	0xFF8
  7433                           tblptrh	equ	0xFF7
  7434                           tblptrl	equ	0xFF6
  7435                           tablat	equ	0xFF5
  7436                           prodh	equ	0xFF4
  7437                           prodl	equ	0xFF3
  7438                           intcon	equ	0xFF2
  7439                           intcon2	equ	0xFF1
  7440                           postinc0	equ	0xFEE
  7441                           wreg	equ	0xFE8
  7442                           postdec1	equ	0xFE5
  7443                           fsr1l	equ	0xFE1
  7444                           indf2	equ	0xFDF
  7445                           postinc2	equ	0xFDE
  7446                           postdec2	equ	0xFDD
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451 ;; *************** function _I2C_Init *****************
  7452 ;; Defined at:
  7453 ;;		line 14 in file "I2C.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;  c               4   16[COMRAM] unsigned long 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;		None               void
  7460 ;; Registers used:
  7461 ;;		wreg, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7467 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;Total ram usage:        4 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    4
  7474 ;; This function calls:
  7475 ;;		_i2cHighScl
  7476 ;;		_i2cHighSda
  7477 ;; This function is called by:
  7478 ;;		_Do_Init
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text38
  7483  001A88                     __ptext38:
  7484                           	opt stack 0
  7485  001A88                     _I2C_Init:
  7486                           	opt stack 25
  7487                           
  7488                           ;I2C.c: 16: i2cHighScl();
  7489                           
  7490                           ;incstack = 0
  7491  001A88  EC38  F00D         	call	_i2cHighScl	;wreg free
  7492                           
  7493                           ;I2C.c: 17: i2cHighSda();
  7494  001A8C  EC5B  F00D         	call	_i2cHighSda	;wreg free
  7495  001A90  0012               	return		;funcret
  7496  001A92                     __end_of_I2C_Init:
  7497                           	opt stack 0
  7498                           tblptru	equ	0xFF8
  7499                           tblptrh	equ	0xFF7
  7500                           tblptrl	equ	0xFF6
  7501                           tablat	equ	0xFF5
  7502                           prodh	equ	0xFF4
  7503                           prodl	equ	0xFF3
  7504                           intcon	equ	0xFF2
  7505                           intcon2	equ	0xFF1
  7506                           postinc0	equ	0xFEE
  7507                           wreg	equ	0xFE8
  7508                           postdec1	equ	0xFE5
  7509                           fsr1l	equ	0xFE1
  7510                           indf2	equ	0xFDF
  7511                           postinc2	equ	0xFDE
  7512                           postdec2	equ	0xFDD
  7513                           fsr2h	equ	0xFDA
  7514                           fsr2l	equ	0xFD9
  7515                           status	equ	0xFD8
  7516                           
  7517 ;; *************** function _DS1621_Init *****************
  7518 ;; Defined at:
  7519 ;;		line 21 in file "I2C_Support.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;		None
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;  Device          1   21[COMRAM] unsigned char 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;		None               void
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0, cstack
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;Total ram usage:        1 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    6
  7540 ;; This function calls:
  7541 ;;		_I2C_Write_Cmd_Only
  7542 ;;		_I2C_Write_Cmd_Write_Data
  7543 ;; This function is called by:
  7544 ;;		_Do_Init
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           	psect	text39
  7549  001956                     __ptext39:
  7550                           	opt stack 0
  7551  001956                     _DS1621_Init:
  7552                           	opt stack 23
  7553                           
  7554                           ;I2C_Support.c: 23: char Device = 0x48;
  7555                           
  7556                           ;incstack = 0
  7557  001956  0E48               	movlw	72
  7558  001958  6E16               	movwf	DS1621_Init@Device,c
  7559                           
  7560                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7561  00195A  0EAC               	movlw	172
  7562  00195C  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7563  00195E  0E02               	movlw	2
  7564  001960  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7565  001962  5016               	movf	DS1621_Init@Device,w,c
  7566  001964  EC9B  F00C         	call	_I2C_Write_Cmd_Write_Data
  7567                           
  7568                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7569  001968  0EEE               	movlw	238
  7570  00196A  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7571  00196C  5016               	movf	DS1621_Init@Device,w,c
  7572  00196E  ECC8  F00C         	call	_I2C_Write_Cmd_Only
  7573  001972  0012               	return		;funcret
  7574  001974                     __end_of_DS1621_Init:
  7575                           	opt stack 0
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           intcon	equ	0xFF2
  7583                           intcon2	equ	0xFF1
  7584                           postinc0	equ	0xFEE
  7585                           wreg	equ	0xFE8
  7586                           postdec1	equ	0xFE5
  7587                           fsr1l	equ	0xFE1
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           
  7595 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7596 ;; Defined at:
  7597 ;;		line 152 in file "I2C.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  Device          1    wreg     unsigned char 
  7600 ;;  Cmd             1   18[COMRAM] unsigned char 
  7601 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  Device          1   20[COMRAM] unsigned char 
  7604 ;; Return value:  Size  Location     Type
  7605 ;;		None               void
  7606 ;; Registers used:
  7607 ;;		wreg, status,2, status,0, cstack
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;Total ram usage:        3 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; Hardware stack levels required when called:    5
  7620 ;; This function calls:
  7621 ;;		_I2C_Start
  7622 ;;		_I2C_Stop
  7623 ;;		_I2C_Write
  7624 ;; This function is called by:
  7625 ;;		_DS1621_Init
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text40
  7630  001936                     __ptext40:
  7631                           	opt stack 0
  7632  001936                     _I2C_Write_Cmd_Write_Data:
  7633                           	opt stack 23
  7634                           
  7635                           ;incstack = 0
  7636                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7637  001936  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7638                           
  7639                           ;I2C.c: 154: I2C_Start();
  7640  001938  EC0F  F00D         	call	_I2C_Start	;wreg free
  7641                           
  7642                           ;I2C.c: 155: I2C_Write((Device << 1) | 0);
  7643  00193C  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7644  00193E  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7645  001940  ECA7  F00B         	call	_I2C_Write
  7646                           
  7647                           ;I2C.c: 156: I2C_Write(Cmd);
  7648  001944  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7649  001946  ECA7  F00B         	call	_I2C_Write
  7650                           
  7651                           ;I2C.c: 157: I2C_Write(Data_Out);
  7652  00194A  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7653  00194C  ECA7  F00B         	call	_I2C_Write
  7654                           
  7655                           ;I2C.c: 158: I2C_Stop();
  7656  001950  EC06  F00D         	call	_I2C_Stop	;wreg free
  7657  001954  0012               	return		;funcret
  7658  001956                     __end_of_I2C_Write_Cmd_Write_Data:
  7659                           	opt stack 0
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           intcon	equ	0xFF2
  7667                           intcon2	equ	0xFF1
  7668                           postinc0	equ	0xFEE
  7669                           wreg	equ	0xFE8
  7670                           postdec1	equ	0xFE5
  7671                           fsr1l	equ	0xFE1
  7672                           indf2	equ	0xFDF
  7673                           postinc2	equ	0xFDE
  7674                           postdec2	equ	0xFDD
  7675                           fsr2h	equ	0xFDA
  7676                           fsr2l	equ	0xFD9
  7677                           status	equ	0xFD8
  7678                           
  7679 ;; *************** function _I2C_Write_Cmd_Only *****************
  7680 ;; Defined at:
  7681 ;;		line 144 in file "I2C.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;  Device          1    wreg     unsigned char 
  7684 ;;  Cmd             1   18[COMRAM] unsigned char 
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;  Device          1   19[COMRAM] unsigned char 
  7687 ;; Return value:  Size  Location     Type
  7688 ;;		None               void
  7689 ;; Registers used:
  7690 ;;		wreg, status,2, status,0, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7696 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;Total ram usage:        2 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    5
  7703 ;; This function calls:
  7704 ;;		_I2C_Start
  7705 ;;		_I2C_Stop
  7706 ;;		_I2C_Write
  7707 ;; This function is called by:
  7708 ;;		_DS1621_Init
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           	psect	text41
  7713  001990                     __ptext41:
  7714                           	opt stack 0
  7715  001990                     _I2C_Write_Cmd_Only:
  7716                           	opt stack 23
  7717                           
  7718                           ;incstack = 0
  7719                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7720  001990  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7721                           
  7722                           ;I2C.c: 146: I2C_Start();
  7723  001992  EC0F  F00D         	call	_I2C_Start	;wreg free
  7724                           
  7725                           ;I2C.c: 147: I2C_Write((Device << 1) | 0);
  7726  001996  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7727  001998  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7728  00199A  ECA7  F00B         	call	_I2C_Write
  7729                           
  7730                           ;I2C.c: 148: I2C_Write(Cmd);
  7731  00199E  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7732  0019A0  ECA7  F00B         	call	_I2C_Write
  7733                           
  7734                           ;I2C.c: 149: I2C_Stop();
  7735  0019A4  EC06  F00D         	call	_I2C_Stop	;wreg free
  7736  0019A8  0012               	return		;funcret
  7737  0019AA                     __end_of_I2C_Write_Cmd_Only:
  7738                           	opt stack 0
  7739                           tblptru	equ	0xFF8
  7740                           tblptrh	equ	0xFF7
  7741                           tblptrl	equ	0xFF6
  7742                           tablat	equ	0xFF5
  7743                           prodh	equ	0xFF4
  7744                           prodl	equ	0xFF3
  7745                           intcon	equ	0xFF2
  7746                           intcon2	equ	0xFF1
  7747                           postinc0	equ	0xFEE
  7748                           wreg	equ	0xFE8
  7749                           postdec1	equ	0xFE5
  7750                           fsr1l	equ	0xFE1
  7751                           indf2	equ	0xFDF
  7752                           postinc2	equ	0xFDE
  7753                           postdec2	equ	0xFDD
  7754                           fsr2h	equ	0xFDA
  7755                           fsr2l	equ	0xFD9
  7756                           status	equ	0xFD8
  7757                           
  7758 ;; *************** function _DS3231_Setup_Time *****************
  7759 ;; Defined at:
  7760 ;;		line 68 in file "I2C_Support.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;		None
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;  Address         1   19[COMRAM] unsigned char 
  7765 ;;  Device          1   18[COMRAM] unsigned char 
  7766 ;;  Data_Ret        1    0        unsigned char 
  7767 ;; Return value:  Size  Location     Type
  7768 ;;		None               void
  7769 ;; Registers used:
  7770 ;;		wreg, status,2, status,0, cstack
  7771 ;; Tracked objects:
  7772 ;;		On entry : 0/0
  7773 ;;		On exit  : 0/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7779 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7780 ;;Total ram usage:        2 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; Hardware stack levels required when called:    5
  7783 ;; This function calls:
  7784 ;;		_I2C_Start
  7785 ;;		_I2C_Stop
  7786 ;;		_I2C_Write
  7787 ;; This function is called by:
  7788 ;;		_main
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           	psect	text42
  7793  0013F0                     __ptext42:
  7794                           	opt stack 0
  7795  0013F0                     _DS3231_Setup_Time:
  7796                           	opt stack 25
  7797                           
  7798                           ;I2C_Support.c: 70: char Data_Ret;
  7799                           ;I2C_Support.c: 71: char Device = 0x68;
  7800                           
  7801                           ;incstack = 0
  7802  0013F0  0E68               	movlw	104
  7803  0013F2  6E13               	movwf	DS3231_Setup_Time@Device,c
  7804                           
  7805                           ;I2C_Support.c: 72: char Address = 0x00;
  7806  0013F4  0E00               	movlw	0
  7807  0013F6  6E14               	movwf	DS3231_Setup_Time@Address,c
  7808                           
  7809                           ;I2C_Support.c: 74: second = 0x00;
  7810  0013F8  0E00               	movlw	0
  7811  0013FA  6E63               	movwf	_second,c
  7812                           
  7813                           ;I2C_Support.c: 75: minute = 0x00;
  7814  0013FC  0E00               	movlw	0
  7815  0013FE  6E60               	movwf	_minute,c
  7816                           
  7817                           ;I2C_Support.c: 76: hour = 0x19;
  7818  001400  0E19               	movlw	25
  7819  001402  6E5F               	movwf	_hour,c
  7820                           
  7821                           ;I2C_Support.c: 77: dow = 0x05;
  7822  001404  0E05               	movlw	5
  7823  001406  6E5D               	movwf	_dow,c
  7824                           
  7825                           ;I2C_Support.c: 78: day = 0x28;
  7826  001408  0E28               	movlw	40
  7827  00140A  6E5C               	movwf	_day,c
  7828                           
  7829                           ;I2C_Support.c: 79: month = 0x10;
  7830  00140C  0E10               	movlw	16
  7831  00140E  6E61               	movwf	_month,c
  7832                           
  7833                           ;I2C_Support.c: 80: year = 0x21;
  7834  001410  0E21               	movlw	33
  7835  001412  6E6D               	movwf	_year,c
  7836                           
  7837                           ;I2C_Support.c: 82: I2C_Start();
  7838  001414  EC0F  F00D         	call	_I2C_Start	;wreg free
  7839                           
  7840                           ;I2C_Support.c: 83: I2C_Write((Device << 1) | 0);
  7841  001418  5013               	movf	DS3231_Setup_Time@Device,w,c
  7842  00141A  2413               	addwf	DS3231_Setup_Time@Device,w,c
  7843  00141C  ECA7  F00B         	call	_I2C_Write
  7844                           
  7845                           ;I2C_Support.c: 84: I2C_Write(Address);
  7846  001420  5014               	movf	DS3231_Setup_Time@Address,w,c
  7847  001422  ECA7  F00B         	call	_I2C_Write
  7848                           
  7849                           ;I2C_Support.c: 86: I2C_Write(second);
  7850  001426  5063               	movf	_second,w,c
  7851  001428  ECA7  F00B         	call	_I2C_Write
  7852                           
  7853                           ;I2C_Support.c: 87: I2C_Write(minute);
  7854  00142C  5060               	movf	_minute,w,c
  7855  00142E  ECA7  F00B         	call	_I2C_Write
  7856                           
  7857                           ;I2C_Support.c: 88: I2C_Write(hour);
  7858  001432  505F               	movf	_hour,w,c
  7859  001434  ECA7  F00B         	call	_I2C_Write
  7860                           
  7861                           ;I2C_Support.c: 89: I2C_Write(dow);
  7862  001438  505D               	movf	_dow,w,c
  7863  00143A  ECA7  F00B         	call	_I2C_Write
  7864                           
  7865                           ;I2C_Support.c: 90: I2C_Write(day);
  7866  00143E  505C               	movf	_day,w,c
  7867  001440  ECA7  F00B         	call	_I2C_Write
  7868                           
  7869                           ;I2C_Support.c: 91: I2C_Write(month);
  7870  001444  5061               	movf	_month,w,c
  7871  001446  ECA7  F00B         	call	_I2C_Write
  7872                           
  7873                           ;I2C_Support.c: 92: I2C_Write(year);
  7874  00144A  506D               	movf	_year,w,c
  7875  00144C  ECA7  F00B         	call	_I2C_Write
  7876                           
  7877                           ;I2C_Support.c: 94: I2C_Stop();
  7878  001450  EC06  F00D         	call	_I2C_Stop	;wreg free
  7879  001454  0012               	return		;funcret
  7880  001456                     __end_of_DS3231_Setup_Time:
  7881                           	opt stack 0
  7882                           tblptru	equ	0xFF8
  7883                           tblptrh	equ	0xFF7
  7884                           tblptrl	equ	0xFF6
  7885                           tablat	equ	0xFF5
  7886                           prodh	equ	0xFF4
  7887                           prodl	equ	0xFF3
  7888                           intcon	equ	0xFF2
  7889                           intcon2	equ	0xFF1
  7890                           postinc0	equ	0xFEE
  7891                           wreg	equ	0xFE8
  7892                           postdec1	equ	0xFE5
  7893                           fsr1l	equ	0xFE1
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function _DS3231_Read_Time *****************
  7902 ;; Defined at:
  7903 ;;		line 44 in file "I2C_Support.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;		None
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;  Device          1   20[COMRAM] unsigned char 
  7908 ;;  Address         1   19[COMRAM] unsigned char 
  7909 ;;  Data_Ret        1    0        unsigned char 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;		None               void
  7912 ;; Registers used:
  7913 ;;		wreg, status,2, status,0, cstack
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;Total ram usage:        2 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; Hardware stack levels required when called:    6
  7926 ;; This function calls:
  7927 ;;		_I2C_ReStart
  7928 ;;		_I2C_Read
  7929 ;;		_I2C_Start
  7930 ;;		_I2C_Stop
  7931 ;;		_I2C_Write
  7932 ;; This function is called by:
  7933 ;;		_main
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           	psect	text43
  7938  001456                     __ptext43:
  7939                           	opt stack 0
  7940  001456                     _DS3231_Read_Time:
  7941                           	opt stack 24
  7942                           
  7943                           ;I2C_Support.c: 46: char Device = 0x68;
  7944                           
  7945                           ;incstack = 0
  7946  001456  0E68               	movlw	104
  7947  001458  6E15               	movwf	DS3231_Read_Time@Device,c
  7948                           
  7949                           ;I2C_Support.c: 47: char Address = 0x00;
  7950  00145A  0E00               	movlw	0
  7951  00145C  6E14               	movwf	DS3231_Read_Time@Address,c
  7952                           
  7953                           ;I2C_Support.c: 48: char Data_Ret;
  7954                           ;I2C_Support.c: 49: I2C_Start();
  7955  00145E  EC0F  F00D         	call	_I2C_Start	;wreg free
  7956                           
  7957                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
  7958  001462  5015               	movf	DS3231_Read_Time@Device,w,c
  7959  001464  2415               	addwf	DS3231_Read_Time@Device,w,c
  7960  001466  ECA7  F00B         	call	_I2C_Write
  7961                           
  7962                           ;I2C_Support.c: 51: I2C_Write(Address);
  7963  00146A  5014               	movf	DS3231_Read_Time@Address,w,c
  7964  00146C  ECA7  F00B         	call	_I2C_Write
  7965                           
  7966                           ;I2C_Support.c: 52: I2C_ReStart();
  7967  001470  ECD5  F00C         	call	_I2C_ReStart	;wreg free
  7968                           
  7969                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
  7970  001474  80D8               	bsf	status,0,c
  7971  001476  3415               	rlcf	DS3231_Read_Time@Device,w,c
  7972  001478  ECA7  F00B         	call	_I2C_Write
  7973                           
  7974                           ;I2C_Support.c: 55: second = I2C_Read(1);
  7975  00147C  0E01               	movlw	1
  7976  00147E  EC25  F00B         	call	_I2C_Read
  7977  001482  6E63               	movwf	_second,c
  7978                           
  7979                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  7980  001484  0E01               	movlw	1
  7981  001486  EC25  F00B         	call	_I2C_Read
  7982  00148A  6E60               	movwf	_minute,c
  7983                           
  7984                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  7985  00148C  0E01               	movlw	1
  7986  00148E  EC25  F00B         	call	_I2C_Read
  7987  001492  6E5F               	movwf	_hour,c
  7988                           
  7989                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  7990  001494  0E01               	movlw	1
  7991  001496  EC25  F00B         	call	_I2C_Read
  7992  00149A  6E5D               	movwf	_dow,c
  7993                           
  7994                           ;I2C_Support.c: 59: day = I2C_Read(1);
  7995  00149C  0E01               	movlw	1
  7996  00149E  EC25  F00B         	call	_I2C_Read
  7997  0014A2  6E5C               	movwf	_day,c
  7998                           
  7999                           ;I2C_Support.c: 60: month = I2C_Read(1);
  8000  0014A4  0E01               	movlw	1
  8001  0014A6  EC25  F00B         	call	_I2C_Read
  8002  0014AA  6E61               	movwf	_month,c
  8003                           
  8004                           ;I2C_Support.c: 61: year = I2C_Read(0);
  8005  0014AC  0E00               	movlw	0
  8006  0014AE  EC25  F00B         	call	_I2C_Read
  8007  0014B2  6E6D               	movwf	_year,c
  8008                           
  8009                           ;I2C_Support.c: 63: I2C_Stop();
  8010  0014B4  EC06  F00D         	call	_I2C_Stop	;wreg free
  8011  0014B8  0012               	return		;funcret
  8012  0014BA                     __end_of_DS3231_Read_Time:
  8013                           	opt stack 0
  8014                           tblptru	equ	0xFF8
  8015                           tblptrh	equ	0xFF7
  8016                           tblptrl	equ	0xFF6
  8017                           tablat	equ	0xFF5
  8018                           prodh	equ	0xFF4
  8019                           prodl	equ	0xFF3
  8020                           intcon	equ	0xFF2
  8021                           intcon2	equ	0xFF1
  8022                           postinc0	equ	0xFEE
  8023                           wreg	equ	0xFE8
  8024                           postdec1	equ	0xFE5
  8025                           fsr1l	equ	0xFE1
  8026                           indf2	equ	0xFDF
  8027                           postinc2	equ	0xFDE
  8028                           postdec2	equ	0xFDD
  8029                           fsr2h	equ	0xFDA
  8030                           fsr2l	equ	0xFD9
  8031                           status	equ	0xFD8
  8032                           
  8033 ;; *************** function _DS1621_Read_Temp *****************
  8034 ;; Defined at:
  8035 ;;		line 29 in file "I2C_Support.c"
  8036 ;; Parameters:    Size  Location     Type
  8037 ;;		None
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  Device          1   21[COMRAM] unsigned char 
  8040 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  8041 ;;  Cmd             1   19[COMRAM] unsigned char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  1    wreg      unsigned char 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0, cstack
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;Total ram usage:        3 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    6
  8058 ;; This function calls:
  8059 ;;		_I2C_ReStart
  8060 ;;		_I2C_Read
  8061 ;;		_I2C_Start
  8062 ;;		_I2C_Stop
  8063 ;;		_I2C_Write
  8064 ;; This function is called by:
  8065 ;;		_main
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           	psect	text44
  8070  0017C8                     __ptext44:
  8071                           	opt stack 0
  8072  0017C8                     _DS1621_Read_Temp:
  8073                           	opt stack 24
  8074                           
  8075                           ;I2C_Support.c: 31: char Device = 0x48;
  8076                           
  8077                           ;incstack = 0
  8078  0017C8  0E48               	movlw	72
  8079  0017CA  6E16               	movwf	DS1621_Read_Temp@Device,c
  8080                           
  8081                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  8082  0017CC  0EAA               	movlw	170
  8083  0017CE  6E14               	movwf	DS1621_Read_Temp@Cmd,c
  8084                           
  8085                           ;I2C_Support.c: 33: char Data_Ret;
  8086                           ;I2C_Support.c: 34: I2C_Start();
  8087  0017D0  EC0F  F00D         	call	_I2C_Start	;wreg free
  8088                           
  8089                           ;I2C_Support.c: 35: I2C_Write((Device << 1) | 0);
  8090  0017D4  5016               	movf	DS1621_Read_Temp@Device,w,c
  8091  0017D6  2416               	addwf	DS1621_Read_Temp@Device,w,c
  8092  0017D8  ECA7  F00B         	call	_I2C_Write
  8093                           
  8094                           ;I2C_Support.c: 36: I2C_Write(Cmd);
  8095  0017DC  5014               	movf	DS1621_Read_Temp@Cmd,w,c
  8096  0017DE  ECA7  F00B         	call	_I2C_Write
  8097                           
  8098                           ;I2C_Support.c: 37: I2C_ReStart();
  8099  0017E2  ECD5  F00C         	call	_I2C_ReStart	;wreg free
  8100                           
  8101                           ;I2C_Support.c: 38: I2C_Write((Device << 1) | 1);
  8102  0017E6  80D8               	bsf	status,0,c
  8103  0017E8  3416               	rlcf	DS1621_Read_Temp@Device,w,c
  8104  0017EA  ECA7  F00B         	call	_I2C_Write
  8105                           
  8106                           ;I2C_Support.c: 39: Data_Ret = I2C_Read(0);
  8107  0017EE  0E00               	movlw	0
  8108  0017F0  EC25  F00B         	call	_I2C_Read
  8109  0017F4  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
  8110                           
  8111                           ;I2C_Support.c: 40: I2C_Stop();
  8112  0017F6  EC06  F00D         	call	_I2C_Stop	;wreg free
  8113                           
  8114                           ;I2C_Support.c: 41: return Data_Ret;
  8115  0017FA  5015               	movf	DS1621_Read_Temp@Data_Ret,w,c
  8116  0017FC  D000               	goto	l286
  8117  0017FE                     l286:
  8118  0017FE  0012               	return		;funcret
  8119  001800                     __end_of_DS1621_Read_Temp:
  8120                           	opt stack 0
  8121                           tblptru	equ	0xFF8
  8122                           tblptrh	equ	0xFF7
  8123                           tblptrl	equ	0xFF6
  8124                           tablat	equ	0xFF5
  8125                           prodh	equ	0xFF4
  8126                           prodl	equ	0xFF3
  8127                           intcon	equ	0xFF2
  8128                           intcon2	equ	0xFF1
  8129                           postinc0	equ	0xFEE
  8130                           wreg	equ	0xFE8
  8131                           postdec1	equ	0xFE5
  8132                           fsr1l	equ	0xFE1
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function _I2C_Write *****************
  8141 ;; Defined at:
  8142 ;;		line 41 in file "I2C.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  outByte         1    wreg     unsigned char 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;  outByte         1   16[COMRAM] unsigned char 
  8147 ;;  n               1   17[COMRAM] unsigned char 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;		None               void
  8150 ;; Registers used:
  8151 ;;		wreg, status,2, status,0, cstack
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;Total ram usage:        2 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; Hardware stack levels required when called:    4
  8164 ;; This function calls:
  8165 ;;		_i2cHighScl
  8166 ;;		_i2cHighSda
  8167 ;;		_i2cLowScl
  8168 ;;		_i2cLowSda
  8169 ;; This function is called by:
  8170 ;;		_I2C_Write_Cmd_Only
  8171 ;;		_I2C_Write_Cmd_Write_Data
  8172 ;;		_DS1621_Read_Temp
  8173 ;;		_DS3231_Read_Time
  8174 ;;		_DS3231_Setup_Time
  8175 ;;		_I2C_Write_Address_Read_One_Byte
  8176 ;;		_I2C_Write_Address_Write_One_Byte
  8177 ;;		_I2C_Write_Cmd_Read_One_Byte
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text45
  8182  00174E                     __ptext45:
  8183                           	opt stack 0
  8184  00174E                     _I2C_Write:
  8185                           	opt stack 23
  8186                           
  8187                           ;incstack = 0
  8188                           ;I2C_Write@outByte stored from wreg
  8189  00174E  6E11               	movwf	I2C_Write@outByte,c
  8190                           
  8191                           ;I2C.c: 43: unsigned char n;
  8192                           ;I2C.c: 44: for(n=0; n<8; n++)
  8193  001750  0E00               	movlw	0
  8194  001752  6E12               	movwf	I2C_Write@n,c
  8195  001754                     l4165:
  8196  001754  0E07               	movlw	7
  8197  001756  6412               	cpfsgt	I2C_Write@n,c
  8198  001758  D001               	goto	l206
  8199  00175A  D011               	goto	l4183
  8200  00175C                     l206:
  8201                           
  8202                           ;I2C.c: 45: {
  8203                           ;I2C.c: 46: if(outByte&0x80) i2cHighSda();
  8204  00175C  AE11               	btfss	I2C_Write@outByte,7,c
  8205  00175E  D003               	goto	l4171
  8206  001760  EC5B  F00D         	call	_i2cHighSda	;wreg free
  8207  001764  D003               	goto	l4173
  8208  001766                     l4171:
  8209                           
  8210                           ;I2C.c: 47: else i2cLowSda();
  8211  001766  EC4E  F00D         	call	_i2cLowSda	;wreg free
  8212  00176A  D000               	goto	l4173
  8213  00176C                     l4173:
  8214                           
  8215                           ;I2C.c: 48: i2cHighScl();
  8216  00176C  EC38  F00D         	call	_i2cHighScl	;wreg free
  8217                           
  8218                           ;I2C.c: 49: i2cLowScl();
  8219  001770  EC57  F00D         	call	_i2cLowScl	;wreg free
  8220                           
  8221                           ;I2C.c: 50: outByte = outByte << 1;
  8222  001774  5011               	movf	I2C_Write@outByte,w,c
  8223  001776  2411               	addwf	I2C_Write@outByte,w,c
  8224  001778  6E11               	movwf	I2C_Write@outByte,c
  8225  00177A  2A12               	incf	I2C_Write@n,f,c
  8226  00177C  D7EB               	goto	l4165
  8227  00177E                     l4183:
  8228                           
  8229                           ;I2C.c: 51: }
  8230                           ;I2C.c: 52: i2cHighSda();
  8231  00177E  EC5B  F00D         	call	_i2cHighSda	;wreg free
  8232                           
  8233                           ;I2C.c: 53: i2cHighScl();
  8234  001782  EC38  F00D         	call	_i2cHighScl	;wreg free
  8235                           
  8236                           ;I2C.c: 54: i2cLowScl();
  8237  001786  EC57  F00D         	call	_i2cLowScl	;wreg free
  8238  00178A  0012               	return		;funcret
  8239  00178C                     __end_of_I2C_Write:
  8240                           	opt stack 0
  8241                           tblptru	equ	0xFF8
  8242                           tblptrh	equ	0xFF7
  8243                           tblptrl	equ	0xFF6
  8244                           tablat	equ	0xFF5
  8245                           prodh	equ	0xFF4
  8246                           prodl	equ	0xFF3
  8247                           intcon	equ	0xFF2
  8248                           intcon2	equ	0xFF1
  8249                           postinc0	equ	0xFEE
  8250                           wreg	equ	0xFE8
  8251                           postdec1	equ	0xFE5
  8252                           fsr1l	equ	0xFE1
  8253                           indf2	equ	0xFDF
  8254                           postinc2	equ	0xFDE
  8255                           postdec2	equ	0xFDD
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _I2C_Stop *****************
  8261 ;; Defined at:
  8262 ;;		line 88 in file "I2C.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;		None
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;		None
  8267 ;; Return value:  Size  Location     Type
  8268 ;;		None               void
  8269 ;; Registers used:
  8270 ;;		wreg, cstack
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:        0 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    4
  8283 ;; This function calls:
  8284 ;;		_i2cHighScl
  8285 ;;		_i2cHighSda
  8286 ;;		_i2cLowScl
  8287 ;;		_i2cLowSda
  8288 ;; This function is called by:
  8289 ;;		_I2C_Write_Cmd_Only
  8290 ;;		_I2C_Write_Cmd_Write_Data
  8291 ;;		_DS1621_Read_Temp
  8292 ;;		_DS3231_Read_Time
  8293 ;;		_DS3231_Setup_Time
  8294 ;;		_I2C_Write_Address_Read_One_Byte
  8295 ;;		_I2C_Write_Address_Write_One_Byte
  8296 ;;		_I2C_Write_Cmd_Read_One_Byte
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           	psect	text46
  8301  001A0C                     __ptext46:
  8302                           	opt stack 0
  8303  001A0C                     _I2C_Stop:
  8304                           	opt stack 23
  8305                           
  8306                           ;I2C.c: 90: i2cLowScl();
  8307                           
  8308                           ;incstack = 0
  8309  001A0C  EC57  F00D         	call	_i2cLowScl	;wreg free
  8310                           
  8311                           ;I2C.c: 91: i2cLowSda();
  8312  001A10  EC4E  F00D         	call	_i2cLowSda	;wreg free
  8313                           
  8314                           ;I2C.c: 92: i2cHighScl();
  8315  001A14  EC38  F00D         	call	_i2cHighScl	;wreg free
  8316                           
  8317                           ;I2C.c: 93: i2cHighSda();
  8318  001A18  EC5B  F00D         	call	_i2cHighSda	;wreg free
  8319  001A1C  0012               	return		;funcret
  8320  001A1E                     __end_of_I2C_Stop:
  8321                           	opt stack 0
  8322                           tblptru	equ	0xFF8
  8323                           tblptrh	equ	0xFF7
  8324                           tblptrl	equ	0xFF6
  8325                           tablat	equ	0xFF5
  8326                           prodh	equ	0xFF4
  8327                           prodl	equ	0xFF3
  8328                           intcon	equ	0xFF2
  8329                           intcon2	equ	0xFF1
  8330                           postinc0	equ	0xFEE
  8331                           wreg	equ	0xFE8
  8332                           postdec1	equ	0xFE5
  8333                           fsr1l	equ	0xFE1
  8334                           indf2	equ	0xFDF
  8335                           postinc2	equ	0xFDE
  8336                           postdec2	equ	0xFDD
  8337                           fsr2h	equ	0xFDA
  8338                           fsr2l	equ	0xFD9
  8339                           status	equ	0xFD8
  8340                           
  8341 ;; *************** function _I2C_Start *****************
  8342 ;; Defined at:
  8343 ;;		line 71 in file "I2C.c"
  8344 ;; Parameters:    Size  Location     Type
  8345 ;;		None
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;		None               void
  8350 ;; Registers used:
  8351 ;;		wreg, cstack
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8361 ;;Total ram usage:        0 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:    4
  8364 ;; This function calls:
  8365 ;;		_i2cHighScl
  8366 ;;		_i2cHighSda
  8367 ;;		_i2cLowScl
  8368 ;;		_i2cLowSda
  8369 ;; This function is called by:
  8370 ;;		_I2C_Write_Cmd_Only
  8371 ;;		_I2C_Write_Cmd_Write_Data
  8372 ;;		_DS1621_Read_Temp
  8373 ;;		_DS3231_Read_Time
  8374 ;;		_DS3231_Setup_Time
  8375 ;;		_I2C_Write_Address_Read_One_Byte
  8376 ;;		_I2C_Write_Address_Write_One_Byte
  8377 ;;		_I2C_Write_Cmd_Read_One_Byte
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           	psect	text47
  8382  001A1E                     __ptext47:
  8383                           	opt stack 0
  8384  001A1E                     _I2C_Start:
  8385                           	opt stack 23
  8386                           
  8387                           ;I2C.c: 73: i2cHighSda();
  8388                           
  8389                           ;incstack = 0
  8390  001A1E  EC5B  F00D         	call	_i2cHighSda	;wreg free
  8391                           
  8392                           ;I2C.c: 74: i2cHighScl();
  8393  001A22  EC38  F00D         	call	_i2cHighScl	;wreg free
  8394                           
  8395                           ;I2C.c: 75: i2cLowSda();
  8396  001A26  EC4E  F00D         	call	_i2cLowSda	;wreg free
  8397                           
  8398                           ;I2C.c: 76: i2cLowScl();
  8399  001A2A  EC57  F00D         	call	_i2cLowScl	;wreg free
  8400  001A2E  0012               	return		;funcret
  8401  001A30                     __end_of_I2C_Start:
  8402                           	opt stack 0
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           prodh	equ	0xFF4
  8408                           prodl	equ	0xFF3
  8409                           intcon	equ	0xFF2
  8410                           intcon2	equ	0xFF1
  8411                           postinc0	equ	0xFEE
  8412                           wreg	equ	0xFE8
  8413                           postdec1	equ	0xFE5
  8414                           fsr1l	equ	0xFE1
  8415                           indf2	equ	0xFDF
  8416                           postinc2	equ	0xFDE
  8417                           postdec2	equ	0xFDD
  8418                           fsr2h	equ	0xFDA
  8419                           fsr2l	equ	0xFD9
  8420                           status	equ	0xFD8
  8421                           
  8422 ;; *************** function _I2C_Read *****************
  8423 ;; Defined at:
  8424 ;;		line 20 in file "I2C.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;  ack             1    wreg     unsigned char 
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  ack             1   16[COMRAM] unsigned char 
  8429 ;;  inByte          1   18[COMRAM] unsigned char 
  8430 ;;  n               1   17[COMRAM] unsigned char 
  8431 ;; Return value:  Size  Location     Type
  8432 ;;                  1    wreg      unsigned char 
  8433 ;; Registers used:
  8434 ;;		wreg, status,2, status,0, cstack
  8435 ;; Tracked objects:
  8436 ;;		On entry : 0/0
  8437 ;;		On exit  : 0/0
  8438 ;;		Unchanged: 0/0
  8439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;Total ram usage:        3 bytes
  8445 ;; Hardware stack levels used:    1
  8446 ;; Hardware stack levels required when called:    5
  8447 ;; This function calls:
  8448 ;;		_i2cAck
  8449 ;;		_i2cHighScl
  8450 ;;		_i2cHighSda
  8451 ;;		_i2cLowScl
  8452 ;;		_i2cNack
  8453 ;; This function is called by:
  8454 ;;		_DS1621_Read_Temp
  8455 ;;		_DS3231_Read_Time
  8456 ;;		_I2C_Write_Address_Read_One_Byte
  8457 ;;		_I2C_Write_Cmd_Read_One_Byte
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           	psect	text48
  8462  00164A                     __ptext48:
  8463                           	opt stack 0
  8464  00164A                     _I2C_Read:
  8465                           	opt stack 24
  8466                           
  8467                           ;incstack = 0
  8468                           ;I2C_Read@ack stored from wreg
  8469  00164A  6E11               	movwf	I2C_Read@ack,c
  8470                           
  8471                           ;I2C.c: 22: unsigned char inByte, n;
  8472                           ;I2C.c: 23: i2cHighSda();
  8473  00164C  EC5B  F00D         	call	_i2cHighSda	;wreg free
  8474                           
  8475                           ;I2C.c: 24: for (n=0; n<8; n++)
  8476  001650  0E00               	movlw	0
  8477  001652  6E12               	movwf	I2C_Read@n,c
  8478  001654                     l4615:
  8479  001654  0E07               	movlw	7
  8480  001656  6412               	cpfsgt	I2C_Read@n,c
  8481  001658  D001               	goto	l4619
  8482  00165A  D00F               	goto	l4633
  8483  00165C                     l4619:
  8484                           
  8485                           ;I2C.c: 25: {
  8486                           ;I2C.c: 26: i2cHighScl();
  8487  00165C  EC38  F00D         	call	_i2cHighScl	;wreg free
  8488                           
  8489                           ;I2C.c: 28: if (PORTCbits.RC1)
  8490  001660  A282               	btfss	3970,1,c	;volatile
  8491  001662  D003               	goto	l4625
  8492                           
  8493                           ;I2C.c: 29: inByte = (inByte << 1) | 0x01;
  8494  001664  80D8               	bsf	status,0,c
  8495  001666  3613               	rlcf	I2C_Read@inByte,f,c
  8496  001668  D004               	goto	l4627
  8497  00166A                     l4625:
  8498                           
  8499                           ;I2C.c: 30: else
  8500                           ;I2C.c: 31: inByte = inByte << 1;
  8501  00166A  5013               	movf	I2C_Read@inByte,w,c
  8502  00166C  2413               	addwf	I2C_Read@inByte,w,c
  8503  00166E  6E13               	movwf	I2C_Read@inByte,c
  8504  001670  D000               	goto	l4627
  8505  001672                     l4627:
  8506                           
  8507                           ;I2C.c: 32: i2cLowScl();
  8508  001672  EC57  F00D         	call	_i2cLowScl	;wreg free
  8509  001676  2A12               	incf	I2C_Read@n,f,c
  8510  001678  D7ED               	goto	l4615
  8511  00167A                     l4633:
  8512                           
  8513                           ;I2C.c: 33: }
  8514                           ;I2C.c: 34: if (ack) i2cAck();
  8515  00167A  5011               	movf	I2C_Read@ack,w,c
  8516  00167C  B4D8               	btfsc	status,2,c
  8517  00167E  D003               	goto	l4637
  8518  001680  EC18  F00D         	call	_i2cAck	;wreg free
  8519  001684  D003               	goto	l4639
  8520  001686                     l4637:
  8521                           
  8522                           ;I2C.c: 35: else i2cNack();
  8523  001686  EC49  F00D         	call	_i2cNack	;wreg free
  8524  00168A  D000               	goto	l4639
  8525  00168C                     l4639:
  8526                           
  8527                           ;I2C.c: 38: return(inByte);
  8528  00168C  5013               	movf	I2C_Read@inByte,w,c
  8529  00168E  D000               	goto	l203
  8530  001690                     l203:
  8531  001690  0012               	return		;funcret
  8532  001692                     __end_of_I2C_Read:
  8533                           	opt stack 0
  8534                           tblptru	equ	0xFF8
  8535                           tblptrh	equ	0xFF7
  8536                           tblptrl	equ	0xFF6
  8537                           tablat	equ	0xFF5
  8538                           prodh	equ	0xFF4
  8539                           prodl	equ	0xFF3
  8540                           intcon	equ	0xFF2
  8541                           intcon2	equ	0xFF1
  8542                           postinc0	equ	0xFEE
  8543                           wreg	equ	0xFE8
  8544                           postdec1	equ	0xFE5
  8545                           fsr1l	equ	0xFE1
  8546                           indf2	equ	0xFDF
  8547                           postinc2	equ	0xFDE
  8548                           postdec2	equ	0xFDD
  8549                           fsr2h	equ	0xFDA
  8550                           fsr2l	equ	0xFD9
  8551                           status	equ	0xFD8
  8552                           
  8553 ;; *************** function _i2cNack *****************
  8554 ;; Defined at:
  8555 ;;		line 57 in file "I2C.c"
  8556 ;; Parameters:    Size  Location     Type
  8557 ;;		None
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;		None
  8560 ;; Return value:  Size  Location     Type
  8561 ;;		None               void
  8562 ;; Registers used:
  8563 ;;		wreg, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;Total ram usage:        0 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    4
  8576 ;; This function calls:
  8577 ;;		_i2cHighScl
  8578 ;;		_i2cLowScl
  8579 ;; This function is called by:
  8580 ;;		_I2C_Read
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           	psect	text49
  8585  001A92                     __ptext49:
  8586                           	opt stack 0
  8587  001A92                     _i2cNack:
  8588                           	opt stack 24
  8589                           
  8590                           ;I2C.c: 59: i2cHighScl();
  8591                           
  8592                           ;incstack = 0
  8593  001A92  EC38  F00D         	call	_i2cHighScl	;wreg free
  8594                           
  8595                           ;I2C.c: 60: i2cLowScl();
  8596  001A96  EC57  F00D         	call	_i2cLowScl	;wreg free
  8597  001A9A  0012               	return		;funcret
  8598  001A9C                     __end_of_i2cNack:
  8599                           	opt stack 0
  8600                           tblptru	equ	0xFF8
  8601                           tblptrh	equ	0xFF7
  8602                           tblptrl	equ	0xFF6
  8603                           tablat	equ	0xFF5
  8604                           prodh	equ	0xFF4
  8605                           prodl	equ	0xFF3
  8606                           intcon	equ	0xFF2
  8607                           intcon2	equ	0xFF1
  8608                           postinc0	equ	0xFEE
  8609                           wreg	equ	0xFE8
  8610                           postdec1	equ	0xFE5
  8611                           fsr1l	equ	0xFE1
  8612                           indf2	equ	0xFDF
  8613                           postinc2	equ	0xFDE
  8614                           postdec2	equ	0xFDD
  8615                           fsr2h	equ	0xFDA
  8616                           fsr2l	equ	0xFD9
  8617                           status	equ	0xFD8
  8618                           
  8619 ;; *************** function _i2cAck *****************
  8620 ;; Defined at:
  8621 ;;		line 63 in file "I2C.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;		None
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;		None
  8626 ;; Return value:  Size  Location     Type
  8627 ;;		None               void
  8628 ;; Registers used:
  8629 ;;		wreg, cstack
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;Total ram usage:        0 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    4
  8642 ;; This function calls:
  8643 ;;		_i2cHighScl
  8644 ;;		_i2cHighSda
  8645 ;;		_i2cLowScl
  8646 ;;		_i2cLowSda
  8647 ;; This function is called by:
  8648 ;;		_I2C_Read
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           	psect	text50
  8653  001A30                     __ptext50:
  8654                           	opt stack 0
  8655  001A30                     _i2cAck:
  8656                           	opt stack 24
  8657                           
  8658                           ;I2C.c: 65: i2cLowSda();
  8659                           
  8660                           ;incstack = 0
  8661  001A30  EC4E  F00D         	call	_i2cLowSda	;wreg free
  8662                           
  8663                           ;I2C.c: 66: i2cHighScl();
  8664  001A34  EC38  F00D         	call	_i2cHighScl	;wreg free
  8665                           
  8666                           ;I2C.c: 67: i2cLowScl();
  8667  001A38  EC57  F00D         	call	_i2cLowScl	;wreg free
  8668                           
  8669                           ;I2C.c: 68: i2cHighSda();
  8670  001A3C  EC5B  F00D         	call	_i2cHighSda	;wreg free
  8671  001A40  0012               	return		;funcret
  8672  001A42                     __end_of_i2cAck:
  8673                           	opt stack 0
  8674                           tblptru	equ	0xFF8
  8675                           tblptrh	equ	0xFF7
  8676                           tblptrl	equ	0xFF6
  8677                           tablat	equ	0xFF5
  8678                           prodh	equ	0xFF4
  8679                           prodl	equ	0xFF3
  8680                           intcon	equ	0xFF2
  8681                           intcon2	equ	0xFF1
  8682                           postinc0	equ	0xFEE
  8683                           wreg	equ	0xFE8
  8684                           postdec1	equ	0xFE5
  8685                           fsr1l	equ	0xFE1
  8686                           indf2	equ	0xFDF
  8687                           postinc2	equ	0xFDE
  8688                           postdec2	equ	0xFDD
  8689                           fsr2h	equ	0xFDA
  8690                           fsr2l	equ	0xFD9
  8691                           status	equ	0xFD8
  8692                           
  8693 ;; *************** function _I2C_ReStart *****************
  8694 ;; Defined at:
  8695 ;;		line 79 in file "I2C.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;		None               void
  8702 ;; Registers used:
  8703 ;;		wreg, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;Total ram usage:        0 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    4
  8716 ;; This function calls:
  8717 ;;		_i2cHighScl
  8718 ;;		_i2cHighSda
  8719 ;;		_i2cLowScl
  8720 ;;		_i2cLowSda
  8721 ;; This function is called by:
  8722 ;;		_DS1621_Read_Temp
  8723 ;;		_DS3231_Read_Time
  8724 ;;		_I2C_Write_Address_Read_One_Byte
  8725 ;;		_I2C_Write_Cmd_Read_One_Byte
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           	psect	text51
  8730  0019AA                     __ptext51:
  8731                           	opt stack 0
  8732  0019AA                     _I2C_ReStart:
  8733                           	opt stack 25
  8734                           
  8735                           ;I2C.c: 81: i2cLowScl();
  8736                           
  8737                           ;incstack = 0
  8738  0019AA  EC57  F00D         	call	_i2cLowScl	;wreg free
  8739                           
  8740                           ;I2C.c: 82: i2cHighSda();
  8741  0019AE  EC5B  F00D         	call	_i2cHighSda	;wreg free
  8742                           
  8743                           ;I2C.c: 83: i2cHighScl();
  8744  0019B2  EC38  F00D         	call	_i2cHighScl	;wreg free
  8745                           
  8746                           ;I2C.c: 84: i2cLowSda();
  8747  0019B6  EC4E  F00D         	call	_i2cLowSda	;wreg free
  8748                           
  8749                           ;I2C.c: 85: i2cLowScl();
  8750  0019BA  EC57  F00D         	call	_i2cLowScl	;wreg free
  8751  0019BE  0012               	return		;funcret
  8752  0019C0                     __end_of_I2C_ReStart:
  8753                           	opt stack 0
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           intcon2	equ	0xFF1
  8762                           postinc0	equ	0xFEE
  8763                           wreg	equ	0xFE8
  8764                           postdec1	equ	0xFE5
  8765                           fsr1l	equ	0xFE1
  8766                           indf2	equ	0xFDF
  8767                           postinc2	equ	0xFDE
  8768                           postdec2	equ	0xFDD
  8769                           fsr2h	equ	0xFDA
  8770                           fsr2l	equ	0xFD9
  8771                           status	equ	0xFD8
  8772                           
  8773 ;; *************** function _i2cLowSda *****************
  8774 ;; Defined at:
  8775 ;;		line 102 in file "I2C.c"
  8776 ;; Parameters:    Size  Location     Type
  8777 ;;		None
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;		None
  8780 ;; Return value:  Size  Location     Type
  8781 ;;		None               void
  8782 ;; Registers used:
  8783 ;;		None
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8793 ;;Total ram usage:        0 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; Hardware stack levels required when called:    3
  8796 ;; This function calls:
  8797 ;;		Nothing
  8798 ;; This function is called by:
  8799 ;;		_I2C_Write
  8800 ;;		_i2cAck
  8801 ;;		_I2C_Start
  8802 ;;		_I2C_ReStart
  8803 ;;		_I2C_Stop
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           	psect	text52
  8808  001A9C                     __ptext52:
  8809                           	opt stack 0
  8810  001A9C                     _i2cLowSda:
  8811                           	opt stack 23
  8812                           
  8813                           ;I2C.c: 104: PORTCbits.RC1 = 0;
  8814                           
  8815                           ;incstack = 0
  8816  001A9C  9282               	bcf	3970,1,c	;volatile
  8817                           
  8818                           ;I2C.c: 105: TRISCbits.RC1 = 0;
  8819  001A9E  9294               	bcf	3988,1,c	;volatile
  8820                           
  8821                           ;I2C.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8822  001AA0  D000               	nop2		;2 cycle nop
  8823  001AA2  D000               	nop2		;2 cycle nop
  8824  001AA4  0012               	return		;funcret
  8825  001AA6                     __end_of_i2cLowSda:
  8826                           	opt stack 0
  8827                           tblptru	equ	0xFF8
  8828                           tblptrh	equ	0xFF7
  8829                           tblptrl	equ	0xFF6
  8830                           tablat	equ	0xFF5
  8831                           prodh	equ	0xFF4
  8832                           prodl	equ	0xFF3
  8833                           intcon	equ	0xFF2
  8834                           intcon2	equ	0xFF1
  8835                           postinc0	equ	0xFEE
  8836                           wreg	equ	0xFE8
  8837                           postdec1	equ	0xFE5
  8838                           fsr1l	equ	0xFE1
  8839                           indf2	equ	0xFDF
  8840                           postinc2	equ	0xFDE
  8841                           postdec2	equ	0xFDD
  8842                           fsr2h	equ	0xFDA
  8843                           fsr2l	equ	0xFD9
  8844                           status	equ	0xFD8
  8845                           
  8846 ;; *************** function _i2cLowScl *****************
  8847 ;; Defined at:
  8848 ;;		line 115 in file "I2C.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;		None
  8853 ;; Return value:  Size  Location     Type
  8854 ;;		None               void
  8855 ;; Registers used:
  8856 ;;		None
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;Total ram usage:        0 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    3
  8869 ;; This function calls:
  8870 ;;		Nothing
  8871 ;; This function is called by:
  8872 ;;		_I2C_Read
  8873 ;;		_I2C_Write
  8874 ;;		_i2cNack
  8875 ;;		_i2cAck
  8876 ;;		_I2C_Start
  8877 ;;		_I2C_ReStart
  8878 ;;		_I2C_Stop
  8879 ;; This function uses a non-reentrant model
  8880 ;;
  8881                           
  8882                           	psect	text53
  8883  001AAE                     __ptext53:
  8884                           	opt stack 0
  8885  001AAE                     _i2cLowScl:
  8886                           	opt stack 23
  8887                           
  8888                           ;I2C.c: 117: PORTCbits.RC0 = 0;
  8889                           
  8890                           ;incstack = 0
  8891  001AAE  9082               	bcf	3970,0,c	;volatile
  8892                           
  8893                           ;I2C.c: 118: TRISCbits.RC0 = 0;
  8894  001AB0  9094               	bcf	3988,0,c	;volatile
  8895                           
  8896                           ;I2C.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8897  001AB2  D000               	nop2		;2 cycle nop
  8898  001AB4  0012               	return		;funcret
  8899  001AB6                     __end_of_i2cLowScl:
  8900                           	opt stack 0
  8901                           tblptru	equ	0xFF8
  8902                           tblptrh	equ	0xFF7
  8903                           tblptrl	equ	0xFF6
  8904                           tablat	equ	0xFF5
  8905                           prodh	equ	0xFF4
  8906                           prodl	equ	0xFF3
  8907                           intcon	equ	0xFF2
  8908                           intcon2	equ	0xFF1
  8909                           postinc0	equ	0xFEE
  8910                           wreg	equ	0xFE8
  8911                           postdec1	equ	0xFE5
  8912                           fsr1l	equ	0xFE1
  8913                           indf2	equ	0xFDF
  8914                           postinc2	equ	0xFDE
  8915                           postdec2	equ	0xFDD
  8916                           fsr2h	equ	0xFDA
  8917                           fsr2l	equ	0xFD9
  8918                           status	equ	0xFD8
  8919                           
  8920 ;; *************** function _i2cHighSda *****************
  8921 ;; Defined at:
  8922 ;;		line 96 in file "I2C.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;		None
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;		None
  8927 ;; Return value:  Size  Location     Type
  8928 ;;		None               void
  8929 ;; Registers used:
  8930 ;;		None
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;Total ram usage:        0 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    3
  8943 ;; This function calls:
  8944 ;;		Nothing
  8945 ;; This function is called by:
  8946 ;;		_I2C_Init
  8947 ;;		_I2C_Read
  8948 ;;		_I2C_Write
  8949 ;;		_i2cAck
  8950 ;;		_I2C_Start
  8951 ;;		_I2C_ReStart
  8952 ;;		_I2C_Stop
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           	psect	text54
  8957  001AB6                     __ptext54:
  8958                           	opt stack 0
  8959  001AB6                     _i2cHighSda:
  8960                           	opt stack 25
  8961                           
  8962                           ;I2C.c: 98: TRISCbits.RC1 = 1;
  8963                           
  8964                           ;incstack = 0
  8965  001AB6  8294               	bsf	3988,1,c	;volatile
  8966                           
  8967                           ;I2C.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8968  001AB8  D000               	nop2		;2 cycle nop
  8969  001ABA  D000               	nop2		;2 cycle nop
  8970  001ABC  0012               	return		;funcret
  8971  001ABE                     __end_of_i2cHighSda:
  8972                           	opt stack 0
  8973                           tblptru	equ	0xFF8
  8974                           tblptrh	equ	0xFF7
  8975                           tblptrl	equ	0xFF6
  8976                           tablat	equ	0xFF5
  8977                           prodh	equ	0xFF4
  8978                           prodl	equ	0xFF3
  8979                           intcon	equ	0xFF2
  8980                           intcon2	equ	0xFF1
  8981                           postinc0	equ	0xFEE
  8982                           wreg	equ	0xFE8
  8983                           postdec1	equ	0xFE5
  8984                           fsr1l	equ	0xFE1
  8985                           indf2	equ	0xFDF
  8986                           postinc2	equ	0xFDE
  8987                           postdec2	equ	0xFDD
  8988                           fsr2h	equ	0xFDA
  8989                           fsr2l	equ	0xFD9
  8990                           status	equ	0xFD8
  8991                           
  8992 ;; *************** function _i2cHighScl *****************
  8993 ;; Defined at:
  8994 ;;		line 109 in file "I2C.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;		None
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;		None
  8999 ;; Return value:  Size  Location     Type
  9000 ;;		None               void
  9001 ;; Registers used:
  9002 ;;		wreg
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;Total ram usage:        0 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    3
  9015 ;; This function calls:
  9016 ;;		Nothing
  9017 ;; This function is called by:
  9018 ;;		_I2C_Init
  9019 ;;		_I2C_Read
  9020 ;;		_I2C_Write
  9021 ;;		_i2cNack
  9022 ;;		_i2cAck
  9023 ;;		_I2C_Start
  9024 ;;		_I2C_ReStart
  9025 ;;		_I2C_Stop
  9026 ;; This function uses a non-reentrant model
  9027 ;;
  9028                           
  9029                           	psect	text55
  9030  001A70                     __ptext55:
  9031                           	opt stack 0
  9032  001A70                     _i2cHighScl:
  9033                           	opt stack 25
  9034                           
  9035                           ;I2C.c: 111: TRISCbits.RC0 = 1;
  9036                           
  9037                           ;incstack = 0
  9038  001A70  8094               	bsf	3988,0,c	;volatile
  9039                           
  9040                           ;I2C.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9041  001A72  0E06               	movlw	6
  9042  001A74                     u3987:
  9043  001A74  2EE8               	decfsz	wreg,f,c
  9044  001A76  D7FE               	goto	u3987
  9045  001A78  D000               	nop2		;nop
  9046  001A7A  0012               	return		;funcret
  9047  001A7C                     __end_of_i2cHighScl:
  9048                           	opt stack 0
  9049                           tblptru	equ	0xFF8
  9050                           tblptrh	equ	0xFF7
  9051                           tblptrl	equ	0xFF6
  9052                           tablat	equ	0xFF5
  9053                           prodh	equ	0xFF4
  9054                           prodl	equ	0xFF3
  9055                           intcon	equ	0xFF2
  9056                           intcon2	equ	0xFF1
  9057                           postinc0	equ	0xFEE
  9058                           wreg	equ	0xFE8
  9059                           postdec1	equ	0xFE5
  9060                           fsr1l	equ	0xFE1
  9061                           indf2	equ	0xFDF
  9062                           postinc2	equ	0xFDE
  9063                           postdec2	equ	0xFDD
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068 ;; *************** function _chkisr *****************
  9069 ;; Defined at:
  9070 ;;		line 28 in file "Interrupt.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;		None
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;		None
  9075 ;; Return value:  Size  Location     Type
  9076 ;;		None               void
  9077 ;; Registers used:
  9078 ;;		wreg, status,2, status,0, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;Total ram usage:       14 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    2
  9091 ;; This function calls:
  9092 ;;		_INT0_isr
  9093 ;;		_TIMER1_isr
  9094 ;; This function is called by:
  9095 ;;		Interrupt level 2
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	intcode
  9100  000008                     __pintcode:
  9101                           	opt stack 0
  9102  000008                     _chkisr:
  9103                           	opt stack 20
  9104                           
  9105                           ;incstack = 0
  9106  000008  CFFA F003          	movff	pclath,??_chkisr
  9107  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9108  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9109  000014  ED0D  F009         	call	int_func,f	;refresh shadow registers
  9110                           pclatu	equ	0xFFB
  9111                           pclath	equ	0xFFA
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           intcon	equ	0xFF2
  9119                           intcon2	equ	0xFF1
  9120                           postinc0	equ	0xFEE
  9121                           fsr0l	equ	0xFE9
  9122                           wreg	equ	0xFE8
  9123                           postdec1	equ	0xFE5
  9124                           fsr1l	equ	0xFE1
  9125                           indf2	equ	0xFDF
  9126                           postinc2	equ	0xFDE
  9127                           postdec2	equ	0xFDD
  9128                           fsr2h	equ	0xFDA
  9129                           fsr2l	equ	0xFD9
  9130                           status	equ	0xFD8
  9131                           
  9132                           	psect	intcode_body
  9133  00121A                     __pintcode_body:
  9134                           	opt stack 20
  9135  00121A                     int_func:
  9136                           	opt stack 20
  9137  00121A  0006               	pop		; remove dummy address from shadow register refresh
  9138  00121C  CFEA F006          	movff	fsr0h,??_chkisr+3
  9139  001220  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9140  001224  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9141  001228  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9142  00122C  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9143  001230  CFF3 F00B          	movff	prodl,??_chkisr+8
  9144  001234  CFF4 F00C          	movff	prodh,??_chkisr+9
  9145  001238  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9146  00123C  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9147  001240  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9148  001244  CFF5 F010          	movff	tablat,??_chkisr+13
  9149                           
  9150                           ;Interrupt.c: 30: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9151  001248  A09E               	btfss	3998,0,c	;volatile
  9152  00124A  D003               	goto	i2l2497
  9153  00124C  EC3E  F00D         	call	_TIMER1_isr	;wreg free
  9154  001250  D000               	goto	i2l2497
  9155  001252                     i2l2497:
  9156                           
  9157                           ;Interrupt.c: 31: if (INTCONbits.INT0IF == 1) INT0_isr();
  9158  001252  A2F2               	btfss	intcon,1,c	;volatile
  9159  001254  D003               	goto	i2l330
  9160  001256  ECB7  F004         	call	_INT0_isr	;wreg free
  9161  00125A  D000               	goto	i2l330
  9162  00125C                     i2l330:
  9163  00125C  C010  FFF5         	movff	??_chkisr+13,tablat
  9164  001260  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9165  001264  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9166  001268  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9167  00126C  C00C  FFF4         	movff	??_chkisr+9,prodh
  9168  001270  C00B  FFF3         	movff	??_chkisr+8,prodl
  9169  001274  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9170  001278  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9171  00127C  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9172  001280  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9173  001284  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9174  001288  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9175  00128C  C004  FFFB         	movff	??_chkisr+1,pclatu
  9176  001290  C003  FFFA         	movff	??_chkisr,pclath
  9177  001294  0011               	retfie		f
  9178  001296                     __end_of_chkisr:
  9179                           	opt stack 0
  9180                           pclatu	equ	0xFFB
  9181                           pclath	equ	0xFFA
  9182                           tblptru	equ	0xFF8
  9183                           tblptrh	equ	0xFF7
  9184                           tblptrl	equ	0xFF6
  9185                           tablat	equ	0xFF5
  9186                           prodh	equ	0xFF4
  9187                           prodl	equ	0xFF3
  9188                           intcon	equ	0xFF2
  9189                           intcon2	equ	0xFF1
  9190                           postinc0	equ	0xFEE
  9191                           fsr0h	equ	0xFEA
  9192                           fsr0l	equ	0xFE9
  9193                           wreg	equ	0xFE8
  9194                           postdec1	equ	0xFE5
  9195                           fsr1h	equ	0xFE2
  9196                           fsr1l	equ	0xFE1
  9197                           indf2	equ	0xFDF
  9198                           postinc2	equ	0xFDE
  9199                           postdec2	equ	0xFDD
  9200                           fsr2h	equ	0xFDA
  9201                           fsr2l	equ	0xFD9
  9202                           status	equ	0xFD8
  9203                           
  9204 ;; *************** function _TIMER1_isr *****************
  9205 ;; Defined at:
  9206 ;;		line 34 in file "Interrupt.c"
  9207 ;; Parameters:    Size  Location     Type
  9208 ;;		None
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;		None
  9211 ;; Return value:  Size  Location     Type
  9212 ;;		None               void
  9213 ;; Registers used:
  9214 ;;		wreg, status,2
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;Total ram usage:        0 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; This function calls:
  9227 ;;		Nothing
  9228 ;; This function is called by:
  9229 ;;		_chkisr
  9230 ;; This function uses a non-reentrant model
  9231 ;;
  9232                           
  9233                           	psect	text57
  9234  001A7C                     __ptext57:
  9235                           	opt stack 0
  9236  001A7C                     _TIMER1_isr:
  9237                           	opt stack 21
  9238                           
  9239                           ;Interrupt.c: 36: Nec_state = 0;
  9240                           
  9241                           ;incstack = 0
  9242  001A7C  0E00               	movlw	0
  9243  001A7E  6E53               	movwf	_Nec_state,c
  9244                           
  9245                           ;Interrupt.c: 37: INTCON2bits.INTEDG0 = 0;
  9246  001A80  9CF1               	bcf	intcon2,6,c	;volatile
  9247                           
  9248                           ;Interrupt.c: 38: T1CONbits.TMR1ON = 0;
  9249  001A82  90CD               	bcf	4045,0,c	;volatile
  9250                           
  9251                           ;Interrupt.c: 39: PIR1bits.TMR1IF = 0;
  9252  001A84  909E               	bcf	3998,0,c	;volatile
  9253  001A86  0012               	return		;funcret
  9254  001A88                     __end_of_TIMER1_isr:
  9255                           	opt stack 0
  9256                           pclatu	equ	0xFFB
  9257                           pclath	equ	0xFFA
  9258                           tblptru	equ	0xFF8
  9259                           tblptrh	equ	0xFF7
  9260                           tblptrl	equ	0xFF6
  9261                           tablat	equ	0xFF5
  9262                           prodh	equ	0xFF4
  9263                           prodl	equ	0xFF3
  9264                           intcon	equ	0xFF2
  9265                           intcon2	equ	0xFF1
  9266                           postinc0	equ	0xFEE
  9267                           fsr0h	equ	0xFEA
  9268                           fsr0l	equ	0xFE9
  9269                           wreg	equ	0xFE8
  9270                           postdec1	equ	0xFE5
  9271                           fsr1h	equ	0xFE2
  9272                           fsr1l	equ	0xFE1
  9273                           indf2	equ	0xFDF
  9274                           postinc2	equ	0xFDE
  9275                           postdec2	equ	0xFDD
  9276                           fsr2h	equ	0xFDA
  9277                           fsr2l	equ	0xFD9
  9278                           status	equ	0xFD8
  9279                           
  9280 ;; *************** function _INT0_isr *****************
  9281 ;; Defined at:
  9282 ;;		line 48 in file "Interrupt.c"
  9283 ;; Parameters:    Size  Location     Type
  9284 ;;		None
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;		None
  9287 ;; Return value:  Size  Location     Type
  9288 ;;		None               void
  9289 ;; Registers used:
  9290 ;;		wreg, status,2, status,0, cstack
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;Total ram usage:        2 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    1
  9303 ;; This function calls:
  9304 ;;		_force_nec_state0
  9305 ;; This function is called by:
  9306 ;;		_chkisr
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           	psect	text58
  9311  00096E                     __ptext58:
  9312                           	opt stack 0
  9313  00096E                     _INT0_isr:
  9314                           	opt stack 20
  9315                           
  9316                           ;Interrupt.c: 50: INTCONbits.INT0IF = 0;
  9317                           
  9318                           ;incstack = 0
  9319  00096E  92F2               	bcf	intcon,1,c	;volatile
  9320                           
  9321                           ;Interrupt.c: 51: if (Nec_state != 0)
  9322  000970  5053               	movf	_Nec_state,w,c
  9323  000972  B4D8               	btfsc	status,2,c
  9324  000974  D094               	goto	i2l2325
  9325                           
  9326                           ;Interrupt.c: 52: {
  9327                           ;Interrupt.c: 53: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9328  000976  50CE               	movf	4046,w,c	;volatile
  9329  000978  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9330  00097C  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9331  00097E  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9332  000982  6A01               	clrf	??_INT0_isr,c
  9333  000984  1001               	iorwf	??_INT0_isr,w,c
  9334  000986  6E4A               	movwf	_Time_Elapsed,c
  9335  000988  5002               	movf	??_INT0_isr+1,w,c
  9336  00098A  6E4B               	movwf	_Time_Elapsed+1,c
  9337                           
  9338                           ;Interrupt.c: 54: TMR1H = 0;
  9339  00098C  0E00               	movlw	0
  9340  00098E  6ECF               	movwf	4047,c	;volatile
  9341                           
  9342                           ;Interrupt.c: 55: TMR1L = 0;
  9343  000990  0E00               	movlw	0
  9344  000992  6ECE               	movwf	4046,c	;volatile
  9345                           
  9346                           ;Interrupt.c: 56: }
  9347                           ;Interrupt.c: 58: switch(Nec_state)
  9348  000994  D084               	goto	i2l2325
  9349  000996                     i2l2255:
  9350                           
  9351                           ;Interrupt.c: 61: {
  9352                           ;Interrupt.c: 63: TMR1H = 0;
  9353  000996  0E00               	movlw	0
  9354  000998  6ECF               	movwf	4047,c	;volatile
  9355                           
  9356                           ;Interrupt.c: 64: TMR1L = 0;
  9357  00099A  0E00               	movlw	0
  9358  00099C  6ECE               	movwf	4046,c	;volatile
  9359                           
  9360                           ;Interrupt.c: 65: PIR1bits.TMR1IF = 0;
  9361  00099E  909E               	bcf	3998,0,c	;volatile
  9362                           
  9363                           ;Interrupt.c: 66: T1CON= 0x90;
  9364  0009A0  0E90               	movlw	144
  9365  0009A2  6ECD               	movwf	4045,c	;volatile
  9366                           
  9367                           ;Interrupt.c: 67: T1CONbits.TMR1ON = 1;
  9368  0009A4  80CD               	bsf	4045,0,c	;volatile
  9369                           
  9370                           ;Interrupt.c: 68: bit_count = 0;
  9371  0009A6  0E00               	movlw	0
  9372  0009A8  6E5A               	movwf	_bit_count,c
  9373                           
  9374                           ;Interrupt.c: 69: Nec_code = 0;
  9375  0009AA  0E00               	movlw	0
  9376  0009AC  6E46               	movwf	_Nec_code,c
  9377  0009AE  0E00               	movlw	0
  9378  0009B0  6E47               	movwf	_Nec_code+1,c
  9379  0009B2  0E00               	movlw	0
  9380  0009B4  6E48               	movwf	_Nec_code+2,c
  9381  0009B6  0E00               	movlw	0
  9382  0009B8  6E49               	movwf	_Nec_code+3,c
  9383                           
  9384                           ;Interrupt.c: 70: Nec_state = 1;
  9385  0009BA  0E01               	movlw	1
  9386  0009BC  6E53               	movwf	_Nec_state,c
  9387  0009BE  D06D               	goto	i2l2319
  9388                           
  9389                           ;Interrupt.c: 72: return;
  9390                           
  9391                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 1;
  9392  0009C0  D07F               	goto	i2l342
  9393  0009C2                     i2l2265:
  9394                           
  9395                           ;Interrupt.c: 76: {
  9396                           ;Interrupt.c: 79: if( (Time_Elapsed > 8500 ) && (Time_Elapsed < 9500))
  9397  0009C2  0E35               	movlw	53
  9398  0009C4  5C4A               	subwf	_Time_Elapsed,w,c
  9399  0009C6  0E21               	movlw	33
  9400  0009C8  584B               	subwfb	_Time_Elapsed+1,w,c
  9401  0009CA  A0D8               	btfss	status,0,c
  9402  0009CC  D009               	goto	i2l2271
  9403  0009CE  0E1C               	movlw	28
  9404  0009D0  5C4A               	subwf	_Time_Elapsed,w,c
  9405  0009D2  0E25               	movlw	37
  9406  0009D4  584B               	subwfb	_Time_Elapsed+1,w,c
  9407  0009D6  B0D8               	btfsc	status,0,c
  9408  0009D8  D003               	goto	i2l2271
  9409                           
  9410                           ;Interrupt.c: 80: {
  9411                           ;Interrupt.c: 81: Nec_state = 2;
  9412  0009DA  0E02               	movlw	2
  9413  0009DC  6E53               	movwf	_Nec_state,c
  9414                           
  9415                           ;Interrupt.c: 82: }
  9416  0009DE  D02A               	goto	i2l2297
  9417  0009E0                     i2l2271:
  9418                           
  9419                           ;Interrupt.c: 83: else
  9420                           ;Interrupt.c: 84: {
  9421                           ;Interrupt.c: 85: force_nec_state0();
  9422  0009E0  EC5F  F00D         	call	_force_nec_state0	;wreg free
  9423  0009E4  D027               	goto	i2l2297
  9424  0009E6  D026               	goto	i2l2297
  9425                           
  9426                           ;Interrupt.c: 89: return;
  9427                           
  9428                           ;Interrupt.c: 86: }
  9429                           ;Interrupt.c: 88: INTCON2bits.INTEDG0 = 0;
  9430  0009E8  D06B               	goto	i2l342
  9431  0009EA                     i2l2277:
  9432                           
  9433                           ;Interrupt.c: 93: {
  9434                           ;Interrupt.c: 95: if( (Time_Elapsed > 4000 ) && (Time_Elapsed < 5000))
  9435  0009EA  0EA1               	movlw	161
  9436  0009EC  5C4A               	subwf	_Time_Elapsed,w,c
  9437  0009EE  0E0F               	movlw	15
  9438  0009F0  584B               	subwfb	_Time_Elapsed+1,w,c
  9439  0009F2  A0D8               	btfss	status,0,c
  9440  0009F4  D009               	goto	i2l2283
  9441  0009F6  0E88               	movlw	136
  9442  0009F8  5C4A               	subwf	_Time_Elapsed,w,c
  9443  0009FA  0E13               	movlw	19
  9444  0009FC  584B               	subwfb	_Time_Elapsed+1,w,c
  9445  0009FE  B0D8               	btfsc	status,0,c
  9446  000A00  D003               	goto	i2l2283
  9447  000A02                     
  9448                           ;Interrupt.c: 96: {
  9449                           ;Interrupt.c: 97: Nec_state = 3;
  9450  000A02  0E03               	movlw	3
  9451  000A04  6E53               	movwf	_Nec_state,c
  9452                           
  9453                           ;Interrupt.c: 98: }
  9454  000A06  D049               	goto	i2l2319
  9455  000A08                     i2l2283:
  9456                           
  9457                           ;Interrupt.c: 100: else
  9458                           ;Interrupt.c: 101: {
  9459                           ;Interrupt.c: 102: force_nec_state0();
  9460  000A08  EC5F  F00D         	call	_force_nec_state0	;wreg free
  9461  000A0C  D046               	goto	i2l2319
  9462  000A0E  D045               	goto	i2l2319
  9463                           
  9464                           ;Interrupt.c: 105: return;
  9465                           
  9466                           ;Interrupt.c: 103: }
  9467                           ;Interrupt.c: 104: INTCON2bits.INTEDG0 = 1;
  9468  000A10  D057               	goto	i2l342
  9469  000A12                     i2l2289:
  9470                           
  9471                           ;Interrupt.c: 109: {
  9472                           ;Interrupt.c: 111: if( (Time_Elapsed > 400 ) && (Time_Elapsed < 700))
  9473  000A12  0E91               	movlw	145
  9474  000A14  5C4A               	subwf	_Time_Elapsed,w,c
  9475  000A16  0E01               	movlw	1
  9476  000A18  584B               	subwfb	_Time_Elapsed+1,w,c
  9477  000A1A  A0D8               	btfss	status,0,c
  9478  000A1C  D008               	goto	i2l2295
  9479  000A1E  0EBC               	movlw	188
  9480  000A20  5C4A               	subwf	_Time_Elapsed,w,c
  9481  000A22  0E02               	movlw	2
  9482  000A24  584B               	subwfb	_Time_Elapsed+1,w,c
  9483  000A26  B0D8               	btfsc	status,0,c
  9484  000A28  D002               	goto	i2l2295
  9485                           
  9486                           ;Interrupt.c: 112: {
  9487                           ;Interrupt.c: 113: Nec_state = 4;
  9488  000A2A  0E04               	movlw	4
  9489  000A2C  D7D7               	goto	L4
  9490  000A2E                     i2l2295:
  9491                           
  9492                           ;Interrupt.c: 116: else
  9493                           ;Interrupt.c: 117: {
  9494                           ;Interrupt.c: 118: force_nec_state0();
  9495  000A2E  EC5F  F00D         	call	_force_nec_state0	;wreg free
  9496  000A32  D000               	goto	i2l2297
  9497  000A34                     i2l2297:
  9498                           
  9499                           ;Interrupt.c: 119: }
  9500                           ;Interrupt.c: 120: INTCON2bits.INTEDG0 = 0;
  9501  000A34  9CF1               	bcf	intcon2,6,c	;volatile
  9502                           
  9503                           ;Interrupt.c: 121: return;
  9504  000A36  D044               	goto	i2l342
  9505  000A38                     i2l2301:
  9506                           
  9507                           ;Interrupt.c: 125: {
  9508                           ;Interrupt.c: 127: if( (Time_Elapsed > 400) && (Time_Elapsed < 1800))
  9509  000A38  0E91               	movlw	145
  9510  000A3A  5C4A               	subwf	_Time_Elapsed,w,c
  9511  000A3C  0E01               	movlw	1
  9512  000A3E  584B               	subwfb	_Time_Elapsed+1,w,c
  9513  000A40  A0D8               	btfss	status,0,c
  9514  000A42  D028               	goto	i2l2317
  9515  000A44  0E08               	movlw	8
  9516  000A46  5C4A               	subwf	_Time_Elapsed,w,c
  9517  000A48  0E07               	movlw	7
  9518  000A4A  584B               	subwfb	_Time_Elapsed+1,w,c
  9519  000A4C  B0D8               	btfsc	status,0,c
  9520  000A4E  D022               	goto	i2l2317
  9521                           
  9522                           ;Interrupt.c: 128: {
  9523                           ;Interrupt.c: 129: Nec_code = Nec_code << 1;
  9524  000A50  90D8               	bcf	status,0,c
  9525  000A52  3446               	rlcf	_Nec_code,w,c
  9526  000A54  6E46               	movwf	_Nec_code,c
  9527  000A56  3447               	rlcf	_Nec_code+1,w,c
  9528  000A58  6E47               	movwf	_Nec_code+1,c
  9529  000A5A  3448               	rlcf	_Nec_code+2,w,c
  9530  000A5C  6E48               	movwf	_Nec_code+2,c
  9531  000A5E  3449               	rlcf	_Nec_code+3,w,c
  9532  000A60  6E49               	movwf	_Nec_code+3,c
  9533                           
  9534                           ;Interrupt.c: 131: if( Time_Elapsed > 1000 )
  9535  000A62  0EE9               	movlw	233
  9536  000A64  5C4A               	subwf	_Time_Elapsed,w,c
  9537  000A66  0E03               	movlw	3
  9538  000A68  584B               	subwfb	_Time_Elapsed+1,w,c
  9539  000A6A  A0D8               	btfss	status,0,c
  9540  000A6C  D007               	goto	i2l2309
  9541                           
  9542                           ;Interrupt.c: 132: {
  9543                           ;Interrupt.c: 133: Nec_code += 1;
  9544  000A6E  0E01               	movlw	1
  9545  000A70  2646               	addwf	_Nec_code,f,c
  9546  000A72  0E00               	movlw	0
  9547  000A74  2247               	addwfc	_Nec_code+1,f,c
  9548  000A76  2248               	addwfc	_Nec_code+2,f,c
  9549  000A78  2249               	addwfc	_Nec_code+3,f,c
  9550  000A7A  D000               	goto	i2l2309
  9551  000A7C                     i2l2309:
  9552                           
  9553                           ;Interrupt.c: 134: }
  9554                           ;Interrupt.c: 136: bit_count++;
  9555  000A7C  2A5A               	incf	_bit_count,f,c
  9556                           
  9557                           ;Interrupt.c: 138: if( bit_count > 31 )
  9558  000A7E  0E1F               	movlw	31
  9559  000A80  645A               	cpfsgt	_bit_count,c
  9560  000A82  D7BF               	goto	L5
  9561                           
  9562                           ;Interrupt.c: 139: {
  9563                           ;Interrupt.c: 140: nec_ok = 1;
  9564  000A84  0E00               	movlw	0
  9565  000A86  6E4F               	movwf	_nec_ok+1,c
  9566  000A88  0E01               	movlw	1
  9567  000A8A  6E4E               	movwf	_nec_ok,c
  9568                           
  9569                           ;Interrupt.c: 141: INTCONbits.INT0IE = 0;
  9570  000A8C  98F2               	bcf	intcon,4,c	;volatile
  9571                           
  9572                           ;Interrupt.c: 142: Nec_state = 0;
  9573  000A8E  0E00               	movlw	0
  9574  000A90  6E53               	movwf	_Nec_state,c
  9575  000A92  D7B7               	goto	L5
  9576  000A94                     i2l2317:
  9577                           
  9578                           ;Interrupt.c: 149: else
  9579                           ;Interrupt.c: 150: {
  9580                           ;Interrupt.c: 151: force_nec_state0();
  9581  000A94  EC5F  F00D         	call	_force_nec_state0	;wreg free
  9582  000A98  D000               	goto	i2l2319
  9583  000A9A                     i2l2319:
  9584                           
  9585                           ;Interrupt.c: 152: }
  9586                           ;Interrupt.c: 153: INTCON2bits.INTEDG0 = 1;
  9587  000A9A  8CF1               	bsf	intcon2,6,c	;volatile
  9588                           
  9589                           ;Interrupt.c: 156: }
  9590                           ;Interrupt.c: 157: }
  9591                           
  9592                           ;Interrupt.c: 155: return;
  9593  000A9C  D011               	goto	i2l342
  9594  000A9E                     i2l2325:
  9595  000A9E  5053               	movf	_Nec_state,w,c
  9596                           
  9597                           ; Switch size 1, requested type "space"
  9598                           ; Number of cases is 5, Range of values is 0 to 4
  9599                           ; switch strategies available:
  9600                           ; Name         Instructions Cycles
  9601                           ; simple_byte           16     9 (average)
  9602                           ;	Chosen strategy is simple_byte
  9603  000AA0  0A00               	xorlw	0	; case 0
  9604  000AA2  B4D8               	btfsc	status,2,c
  9605  000AA4  D778               	goto	i2l2255
  9606  000AA6  0A01               	xorlw	1	; case 1
  9607  000AA8  B4D8               	btfsc	status,2,c
  9608  000AAA  D78B               	goto	i2l2265
  9609  000AAC  0A03               	xorlw	3	; case 2
  9610  000AAE  B4D8               	btfsc	status,2,c
  9611  000AB0  D79C               	goto	i2l2277
  9612  000AB2  0A01               	xorlw	1	; case 3
  9613  000AB4  B4D8               	btfsc	status,2,c
  9614  000AB6  D7AD               	goto	i2l2289
  9615  000AB8  0A07               	xorlw	7	; case 4
  9616  000ABA  B4D8               	btfsc	status,2,c
  9617  000ABC  D7BD               	goto	i2l2301
  9618  000ABE  D000               	goto	i2l342
  9619  000AC0                     i2l342:
  9620  000AC0  0012               	return		;funcret
  9621  000AC2                     __end_of_INT0_isr:
  9622                           	opt stack 0
  9623                           pclatu	equ	0xFFB
  9624                           pclath	equ	0xFFA
  9625                           tblptru	equ	0xFF8
  9626                           tblptrh	equ	0xFF7
  9627                           tblptrl	equ	0xFF6
  9628                           tablat	equ	0xFF5
  9629                           prodh	equ	0xFF4
  9630                           prodl	equ	0xFF3
  9631                           intcon	equ	0xFF2
  9632                           intcon2	equ	0xFF1
  9633                           postinc0	equ	0xFEE
  9634                           fsr0h	equ	0xFEA
  9635                           fsr0l	equ	0xFE9
  9636                           wreg	equ	0xFE8
  9637                           postdec1	equ	0xFE5
  9638                           fsr1h	equ	0xFE2
  9639                           fsr1l	equ	0xFE1
  9640                           indf2	equ	0xFDF
  9641                           postinc2	equ	0xFDE
  9642                           postdec2	equ	0xFDD
  9643                           fsr2h	equ	0xFDA
  9644                           fsr2l	equ	0xFD9
  9645                           status	equ	0xFD8
  9646                           
  9647 ;; *************** function _force_nec_state0 *****************
  9648 ;; Defined at:
  9649 ;;		line 42 in file "Interrupt.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;		None
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;		None
  9654 ;; Return value:  Size  Location     Type
  9655 ;;		None               void
  9656 ;; Registers used:
  9657 ;;		wreg, status,2
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;Total ram usage:        0 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; This function calls:
  9670 ;;		Nothing
  9671 ;; This function is called by:
  9672 ;;		_INT0_isr
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           	psect	text59
  9677  001ABE                     __ptext59:
  9678                           	opt stack 0
  9679  001ABE                     _force_nec_state0:
  9680                           	opt stack 20
  9681                           
  9682                           ;Interrupt.c: 44: Nec_state=0;
  9683                           
  9684                           ;incstack = 0
  9685  001ABE  0E00               	movlw	0
  9686  001AC0  6E53               	movwf	_Nec_state,c
  9687                           
  9688                           ;Interrupt.c: 45: T1CONbits.TMR1ON = 0;
  9689  001AC2  90CD               	bcf	4045,0,c	;volatile
  9690  001AC4  0012               	return		;funcret
  9691  001AC6                     __end_of_force_nec_state0:
  9692                           	opt stack 0
  9693                           pclatu	equ	0xFFB
  9694                           pclath	equ	0xFFA
  9695                           tblptru	equ	0xFF8
  9696                           tblptrh	equ	0xFF7
  9697                           tblptrl	equ	0xFF6
  9698                           tablat	equ	0xFF5
  9699                           prodh	equ	0xFF4
  9700                           prodl	equ	0xFF3
  9701                           intcon	equ	0xFF2
  9702                           intcon2	equ	0xFF1
  9703                           postinc0	equ	0xFEE
  9704                           fsr0h	equ	0xFEA
  9705                           fsr0l	equ	0xFE9
  9706                           wreg	equ	0xFE8
  9707                           postdec1	equ	0xFE5
  9708                           fsr1h	equ	0xFE2
  9709                           fsr1l	equ	0xFE1
  9710                           indf2	equ	0xFDF
  9711                           postinc2	equ	0xFDE
  9712                           postdec2	equ	0xFDD
  9713                           fsr2h	equ	0xFDA
  9714                           fsr2l	equ	0xFD9
  9715                           status	equ	0xFD8
  9716                           pclatu	equ	0xFFB
  9717                           pclath	equ	0xFFA
  9718                           tblptru	equ	0xFF8
  9719                           tblptrh	equ	0xFF7
  9720                           tblptrl	equ	0xFF6
  9721                           tablat	equ	0xFF5
  9722                           prodh	equ	0xFF4
  9723                           prodl	equ	0xFF3
  9724                           intcon	equ	0xFF2
  9725                           intcon2	equ	0xFF1
  9726                           postinc0	equ	0xFEE
  9727                           fsr0h	equ	0xFEA
  9728                           fsr0l	equ	0xFE9
  9729                           wreg	equ	0xFE8
  9730                           postdec1	equ	0xFE5
  9731                           fsr1h	equ	0xFE2
  9732                           fsr1l	equ	0xFE1
  9733                           indf2	equ	0xFDF
  9734                           postinc2	equ	0xFDE
  9735                           postdec2	equ	0xFDD
  9736                           fsr2h	equ	0xFDA
  9737                           fsr2l	equ	0xFD9
  9738                           status	equ	0xFD8
  9739                           
  9740                           	psect	rparam
  9741  0000                     pclatu	equ	0xFFB
  9742                           pclath	equ	0xFFA
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           prodh	equ	0xFF4
  9748                           prodl	equ	0xFF3
  9749                           intcon	equ	0xFF2
  9750                           intcon2	equ	0xFF1
  9751                           postinc0	equ	0xFEE
  9752                           fsr0h	equ	0xFEA
  9753                           fsr0l	equ	0xFE9
  9754                           wreg	equ	0xFE8
  9755                           postdec1	equ	0xFE5
  9756                           fsr1h	equ	0xFE2
  9757                           fsr1l	equ	0xFE1
  9758                           indf2	equ	0xFDF
  9759                           postinc2	equ	0xFDE
  9760                           postdec2	equ	0xFDD
  9761                           fsr2h	equ	0xFDA
  9762                           fsr2l	equ	0xFD9
  9763                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    547
    Data        149
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     111
    BANK0           128     14     108
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[8]), STR_5(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_3(CODE[22]), STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    ___llmod->___lldiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   56747
                                              7 BANK0      7     7      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                            _Do_Init
                  _Initialize_Screen
                            ___awdiv
                             ___wmul
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
                     _waitHalfSecond
 ---------------------------------------------------------------------------------
 (1) _waitHalfSecond                                       2     2      0      68
                                             16 COMRAM     2     2      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              40    26     14    3660
                                             38 COMRAM    31    17     14
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     362
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     501
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     575
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   21503
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12656
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    3     3      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     3     3      0     464
                                             19 COMRAM     3     3      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
   _waitHalfSecond
     _Activate_Buzzer
     _Deactivate_Buzzer

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      6C       5       84.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12F      34        0.0%
DATA                 0      0     12F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 28 15:24:32 2021

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                       ___awdiv@sign 001C  
              ___wmul@multiplicand 0013                                l203 1690  
                              l206 175C                                l137 1A66  
                              l402 19CE                                l600 0126  
                              l505 0FE0                                l506 0F4C  
                              l603 0188                                l452 1218  
                              l508 0FBC                                l516 072C  
                              l509 0FDE                                l286 17FE  
                              l446 1890                                l470 0846  
                              l534 0B30                                l392 15AA  
                              l641 045C                                l468 096C  
                              l477 08C2                                l670 13C8  
                              l671 13D2                                l672 13D4  
                              l665 13AC                                l674 13EE  
                              l669 13C6                                l677 1912  
                              l870 1076                                _PR2 000FCB  
                              _day 005C                  _Deactivate_Buzzer 1AA6  
             __size_of_I2C_ReStart 0016                                _dow 005D  
                              _nbr 004C                                _txt 0050  
                              prod 000FF3                                wreg 000FE8  
               ?_Deactivate_Buzzer 0001                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 18C2  
                     __CFG_WDT$OFF 000000                               l1108 1934  
                   drawFastVLine@h 0019                               l1137 1180  
                             l1147 136E                               l1239 170E  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l4221 1872                               l4143 11DA  
                             l5111 106C                               l5103 1050  
                             l4241 1392                               l4153 1200  
                             l4233 1626                               l5017 0712  
                             l5121 046C                               l4171 1766  
                             l4155 120E                               l4139 11A2  
                             l5107 105C                               l4173 176C  
                             l4165 1754                               l4261 13BE  
                             l4253 13B0                               l4245 139C  
                             l4229 160A                               l4413 0834  
                             l5045 0802                               l4183 177E  
                             l4431 08BA                               l4423 0852  
                             l4249 13A4                               l4441 090C  
                             l4417 0842                               l4409 0828  
                             l4505 0FDA                               l5161 0592  
                             l5153 055A                               l5137 0512  
                             l4427 0882                               l4419 084A  
                             l5091 1020                               l4429 08B6  
                             l4461 16DC                               l5093 102A  
                             l5085 100A                               l4701 1128  
                             l5165 059C                               l5157 0574  
                             l4615 1654                               l4447 0938  
                             l4439 08E4                               l4455 0968  
                             l4463 16E2                               l4607 180A  
                             l5095 1032                               l5079 0FF8  
                             l4703 1136                               l5175 0630  
                             l4625 166A                               l4633 167A  
                             l4449 0960                               l4473 0F16  
                             l4609 1814                               l4713 1170  
                             l4705 113E                               l4721 1322  
                             l4627 1672                               l4619 165C  
                             l4571 0DF6                               l4563 0DA4  
                             l4547 0D36                               l4491 0FB2  
                             l4723 1330                               l4637 1686  
                             l4573 0DFE                               l4661 0B16  
                             l4725 1338                               l4901 01DE  
   I2C_Write_Cmd_Write_Data@Device 0015                               l4639 168C  
                             l4559 0D86                               l4495 0FC0  
                             l4479 0F84                               l4911 0218  
                             l4681 0BE4                               l4729 135E  
                             l4905 020E                               l4499 0FCA  
                             l4691 192C                               l4915 0224  
                             l4851 0064                               l4843 0036  
                             l4677 0B92                               l4933 0288  
                             l4909 0214                               l4925 025A  
                             l4845 0044                               l4951 02EE  
                             l4919 0254                               l4927 026C  
                             l4863 00E4                               l4855 0082  
                             l4839 0026                               l4953 02F6  
                             l4961 0322                               l4945 02CE  
                             l4937 02AC                               l4881 016E  
                             l4865 00EA                               l4849 004E  
                             l4963 0330                               l4971 0412  
                             l4947 02D6                               l4939 02B6  
                             l4891 01A8                               l4965 03A8  
                             l4973 0424                               l4957 030E  
                             l4877 014A                               l4869 00F2  
                             l4975 042C                               l4895 01CE  
                             l4897 01D2                               l4977 0440  
                             l4993 185A                               l4985 1840  
                             l4989 1854                               STR_1 FF99  
                             STR_2 FF6E                               STR_3 FFB7  
                             STR_4 FFFA                               STR_5 FFCD  
                             STR_6 FFF2                               STR_7 FFE1  
                             u3020 091A                               u3100 0F7A  
                             u3170 0D60                               u3090 0F44  
                             u2730 11D0                               u3841 065E  
                             u3987 1A74                               _RBPU 007F8F  
                             _TRMT 007D61                ??_Deactivate_Buzzer 0011  
                             _main 045E                               _font FD4B  
                             _hour 005F                   __end_of_I2C_Init 1A92  
                 __end_of_I2C_Read 1692                               _year 006D  
                             fsr0h 000FEA                               _txt1 0100  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006F                   __end_of_I2C_Stop 1A1E  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 17C8                    ??_drawFastVLine 001C  
                  __end_of_i2cNack 1A9C                       ___param_bank 000010  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0AC2  
        __end_of_Deactivate_Buzzer 1AAE                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 1078                    drawCircle@ddF_x 0026  
                  drawCircle@ddF_y 0028                    __end_of___lldiv 1192  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                  __end_of___llmod 1380                              _T2CON 000FCA  
                            _T3CON 000FB1                              i2l330 125C  
                            i2l342 0AC0                    ___awdiv@counter 001B  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _SPBRG 000FAF                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 0BFA  
                            _Rcmd3 0E14                         _i2cHighSda 1AB6  
                       _i2cHighScl 1A70                    __end_of_dpowers FF4E  
                            _color 0080                              _font2 FE4A  
            fillCircleHelper@ddF_x 0031              fillCircleHelper@ddF_y 0033  
                            _found 005E                    __end_of_isdigit 1936  
                            _month 0061              fillCircleHelper@delta 002B  
                            _putch 1A62              fillCircleHelper@color 002D  
                            main@i 00E9                  __end_of_I2C_Start 1A30  
                __end_of_I2C_Write 178C                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0001                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0014                    __initialization 1296  
                     __end_of_main 066A                       __end_of_font FE4A  
                 __end_of_Rcmd2red 174E                             ??_main 00E5  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 1A0C          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0030  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0014  
                 ___llmod@dividend 001E                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0017                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                           i2l2301 0A38                             i2l2309 0A7C  
                           i2l2317 0A94                             i2l2325 0A9E  
                           i2l2319 0A9A                             i2l2271 09E0  
                           i2l2255 0996                             i2l2265 09C2  
                           i2l2283 0A08                             i2l2277 09EA  
                           i2l2295 0A2E                             i2l2297 0A34  
                           i2l2289 0A12                             i2l2497 1252  
                        ??_Do_Init 0017                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 0011  
          __size_of_waitHalfSecond 0030                   _force_nec_state0 1ABE  
                 __end_of_delay_ms 15B2                             _i2cAck 1A30  
                       _TempSecond 0054                   __end_of_fillRect 164A  
                 __end_of_drawChar 096E                 __size_of_OpenUSART 0070  
         __size_of_Activate_Buzzer 0012                             ___wmul 18EC  
                        ??___awdiv 001B          __size_of_fillCircleHelper 0138  
                 __end_of_drawtext 0E14                          ??___lldiv 0019  
                        ??___llmod 0026                             _chkisr 0008  
                           _array1 00AA                             _buffer 00BF  
                           _nec_ok 004E                             clear_0 129C  
                           clear_1 12A8                   ___awdiv@quotient 001D  
                           _minute 0060                             _second 0063  
          DS3231_Setup_Time@Device 0013         __size_of_Deactivate_Buzzer 0008  
                           _printf 001C                       drawtext@size 0040  
                           _strcpy 1800                             _strlen 16D2  
                     __pdataCOMRAM 006E                          ??_isdigit 0011  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD4A  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 1956  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 19D4  
                       __accesstop 0080            __end_of__initialization 1306  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0065  
               _setup_alarm_second 0066                      ___rparam_used 000001  
                    __end_of_Rcmd1 0D0A                      __end_of_Rcmd3 0F06  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1692  
                     __pidataBANK1 14BA                      __end_of_font2 FF26  
                __end_of_i2cLowSda 1AA6                  __end_of_i2cLowScl 1AB6  
                    __end_of_putch 1A70                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                       ??_I2C_Read 0011                       _alarm_minute 0058  
                     _alarm_second 0059                         ??_I2C_Stop 0011  
       fillCircleHelper@cornername 0029                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 13F0                            ??_putch 0011  
                       __pbssBANK0 00BF                   _setup_alarm_hour 0064  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014                    spiwrite@spidata 0012  
                       _alarm_date 0056                         ??_INT0_isr 0001  
                       _alarm_hour 0057                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                         _fillCircle 150E  
                       I2C_Write@n 0012                            ?_printf 0027  
                          ?_strcpy 0011                            ?_strlen 0011  
                ??_Activate_Buzzer 0011                         _fillScreen 1974  
                       _drawCircle 066A                     _init_INTERRUPT 1892  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 0FE2  
                        ?_drawtext 0039                  _DS3231_Setup_Time 13F0  
                          _Do_Init 178C           _I2C_Write_Cmd_Write_Data 1936  
       __end_of_I2C_Write_Cmd_Only 19AA                         ??_Rcmd2red 0014  
                   _waitHalfSecond 1832             DS1621_Read_Temp@Device 0016  
                          _i2cNack 1A92                 __end_of_TIMER1_isr 1A88  
               ?_DS3231_Setup_Time 0001                      _write_command 1A52  
                        _I2C_Start 1A1E                          _I2C_Write 174E  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 1974  
                __end_of_drawPixel 1892                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 121A                   _fillCircleHelper 0AC2  
                          ___awdiv 0FE2                            ___lldiv 1106  
                  __size_of___wmul 0028                            ___llmod 1310  
                  __size_of_chkisr 128E                          ?_spiwrite 0001  
                          __pcinit 1296                            __ramtop 1000  
                          __ptext0 045E                            __ptext1 1832  
                          __ptext2 1AA6                            __ptext3 19E8  
                          __ptext4 001C                            __ptext5 1A62  
        __size_of_DS1621_Read_Temp 0038                            __ptext6 1914  
                          __ptext7 1310                            __ptext8 1106  
                          __ptext9 150E                    __size_of_printf 0442  
                __end_of_init_UART 19E8             __end_of_init_INTERRUPT 18C2  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF6E           __end_of_force_nec_state0 1AC6  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF26                            _isdigit 1914  
                        _T3CONbits 000FB1                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 19C0                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 1456                         ??_drawChar 0035  
                        _LCD_Reset 19FA                      _setAddrWindow 15B2  
                   __pintcode_body 121A                         delay_ms@ms 0017  
             end_of_initialization 1306             __end_of_waitHalfSecond 1862  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD4A          __size_of_DS3231_Read_Time 0064  
                          int_func 121A            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                  ___lldiv@divisor 0015                    ___lldiv@counter 001D  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0045                            printf@f 0027  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                   drawtext@cursor_x 00E4  
                 drawtext@cursor_y 00E3                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                        _PORTEbits 000F84                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                        ?_fillScreen 0024  
                       _setup_hour 0068                         _setup_year 006C  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISCbits 000F94                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00DF                    ?_waitHalfSecond 0001  
                       drawPixel@x 001B                         drawPixel@y 0018  
                      _DS1621_Init 1956                        printf@width 0042  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0154  
                   __end_of_i2cAck 1A42           DS1621_Read_Temp@Data_Ret 0015  
               __end_of_i2cHighSda 1ABE                 __end_of_i2cHighScl 1A7C  
                   __end_of___wmul 1914                      delay_ms@count 001B  
                       _write_data 1A42                      __pidataCOMRAM 1AC6  
                   __end_of_chkisr 1296           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 19AA                         drawtext@bg 003E  
                        _Nec_code1 0052                          _i2cLowSda 1A9C  
                        _i2cLowScl 1AAE                     __end_of_printf 045E  
                   __end_of_strcpy 1832                     __end_of_strlen 1710  
                        _Nec_state 0053                start_initialization 1296  
       __size_of_DS3231_Setup_Time 0066                    ??_write_command 0013  
                        _OpenUSART 1380                __size_of_fillCircle 0052  
                  ___llmod@divisor 0022                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                    ___llmod@counter 0026  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 19E8  
                         ??___wmul 0015                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 0035                   _DS1621_Read_Temp 17C8  
                         ??_strcpy 0015                           ??_strlen 0013  
                  waitHalfSecond@i 0011                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0046  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00DE                        ??_LCD_Reset 001D  
                     _isdigit$2148 0012           __end_of_fillCircleHelper 0BFA  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1456  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                      I2C_Read@ack 0011                          _bit_count 005A  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 18EC  
                    __pmediumconst FD4A                           ?___awdiv 0017  
                         ?___lldiv 0011                           ?___llmod 001E  
                        __tft_type 0055                 _I2C_Write_Cmd_Only 1990  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 1862                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 1A88  
                         _I2C_Read 164A                           _I2C_Stop 1A0C  
                _Initialize_Screen 1078                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 19D4  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF4E                 ?_Initialize_Screen 0001  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 19FA  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 096E               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                 ??_init_INTERRUPT 0011                          _setup_day 0067  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                       ??_fillCircle 0043  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 1106  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0044                         printf@prec 003A  
                        main@found 00EB                          main@tempC 00E8  
                        main@tempF 00E7                   ??_waitHalfSecond 0011  
                       ?_init_UART 0001                        _INTCON2bits 000FF1  
                        copy_data0 12C2                          copy_data1 12E2  
                        drawtext@i 00E1             __size_of_drawFastVLine 0088  
                        drawtext@x 00DE                          drawtext@y 0039  
                         _Nec_code 0046                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                       ?_DS1621_Init 0001  
                         _Rcmd2red 1710                   __size_of_Do_Init 003C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 004A                 __end_of_fillCircle 1560  
                 __size_of_i2cNack 000A                           __Hrparam 0000  
               __end_of_fillScreen 1990                           __Lrparam 0000  
               __end_of_drawCircle 0818                   __size_of___awdiv 0096  
                 __size_of___lldiv 008C                   __size_of___llmod 0070  
                     ?_I2C_ReStart 0001                   __size_of_isdigit 0022  
                         _delay_ms 1560                           __ptext10 0AC2  
                         __ptext11 066A                           __ptext20 1600  
                         __ptext12 0FE2                           __ptext21 1192  
                         __ptext13 1078                           __ptext30 19C0  
                         __ptext22 1862                           __ptext14 1800  
                         __ptext31 19FA                           __ptext23 15B2  
                         __ptext15 1974                           __ptext40 1936  
                         __ptext32 1560                           __ptext24 18C2  
                         __ptext16 0F06                           __ptext41 1990  
                         __ptext33 18EC                           __ptext25 0E14  
                         __ptext17 0D0A                           __ptext50 1A30  
                         __ptext42 13F0                           __ptext34 178C  
                         __ptext26 1710                           __ptext18 16D2  
                         __ptext51 19AA                           __ptext43 1456  
                         __ptext35 19D4                           __ptext27 0BFA  
                         __ptext19 0818                           __ptext52 1A9C  
                         __ptext44 17C8                           __ptext36 1380  
                         __ptext28 1A42                           __ptext53 1AAE  
                         __ptext45 174E                           __ptext37 1892  
                         __ptext29 1A52                           __ptext54 1AB6  
                         __ptext46 1A0C                           __ptext38 1A88  
                         __ptext55 1A70                           __ptext47 1A1E  
                         __ptext39 1956                           __ptext48 164A  
                         __ptext57 1A7C                           __ptext49 1A92  
                         __ptext58 096E                           __ptext59 1ABE  
                         _fillRect 1600                           _drawChar 0818  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 005B  
                         _drawtext 0D0A                         strcpy@from 0013  
                    _fillRectangle 0F06           __end_of_DS1621_Read_Temp 1800  
                 ?_Activate_Buzzer 0001                      __size_of_main 020C  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 1192                          printf@idx 0039  
                         _spiwrite 19C0                          printf@val 003E  
                      ??_drawPixel 001B                           _rowstart 0062  
         __end_of_DS3231_Read_Time 14BA                 fillCircleHelper@x0 0023  
               fillCircleHelper@y0 0025         __size_of_Initialize_Screen 008E  
                       _INTCONbits 000FF2                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                           isdigit@c 0013  
                ?_fillCircleHelper 0023                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
               ??_fillCircleHelper 002F              __end_of_write_command 1A62  
                 ___lldiv@dividend 0011                    fillScreen@color 0024  
                     fillCircle@x0 003B                       fillCircle@y0 003D  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 003C  
                fillCircleHelper@f 0035                  fillCircleHelper@r 0027  
                fillCircleHelper@x 0037                  fillCircleHelper@y 0039  
                     ??_write_data 0013                         _TIMER1_isr 1A7C  
                    fillRect@color 0026                   ___lldiv@quotient 0019  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                     _setup_minute 0069                       _setup_second 006B  
                      fillCircle@r 003F              __end_of_setAddrWindow 1600  
               fillRectangle@color 001B                      drawChar@color 0030  
                      _setup_month 006A                 __end_of_write_data 1A52  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
