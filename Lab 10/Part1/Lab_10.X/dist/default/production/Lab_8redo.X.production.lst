

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 14 20:31:23 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  002634                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _wrap
    85  002634  01                 	db	1
    86                           
    87                           ;initializer for _NSLT_Count
    88  002635  30                 	db	48
    89  002636  30                 	db	48
    90  002637  00                 	db	0
    91                           
    92                           ;initializer for _NS_Count
    93  002638  30                 	db	48
    94  002639  30                 	db	48
    95  00263A  00                 	db	0
    96                           
    97                           ;initializer for _Act_Mode_Txt
    98  00263B  44                 	db	68
    99  00263C  00                 	db	0
   100                           
   101                           ;initializer for _FlashingR_Txt
   102  00263D  30                 	db	48
   103  00263E  00                 	db	0
   104                           
   105                           ;initializer for _FlashingS_Txt
   106  00263F  30                 	db	48
   107  002640  00                 	db	0
   108                           
   109                           ;initializer for _SW_EWLT_Txt
   110  002641  30                 	db	48
   111  002642  00                 	db	0
   112                           
   113                           ;initializer for _SW_EWPED_Txt
   114  002643  30                 	db	48
   115  002644  00                 	db	0
   116                           
   117                           ;initializer for _SW_MODE_Txt
   118  002645  44                 	db	68
   119  002646  00                 	db	0
   120                           
   121                           ;initializer for _SW_NSLT_Txt
   122  002647  30                 	db	48
   123  002648  00                 	db	0
   124                           
   125                           ;initializer for _SW_NSPED_Txt
   126  002649  30                 	db	48
   127  00264A  00                 	db	0
   128                           
   129                           	psect	idataBANK0
   130  0026DA                     __pidataBANK0:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _EWLT_Count
   134  0026DA  30                 	db	48
   135  0026DB  30                 	db	48
   136  0026DC  00                 	db	0
   137                           
   138                           ;initializer for _EW_Count
   139  0026DD  30                 	db	48
   140  0026DE  30                 	db	48
   141  0026DF  00                 	db	0
   142                           
   143                           ;initializer for _PED_EW_Count
   144  0026E0  30                 	db	48
   145  0026E1  30                 	db	48
   146  0026E2  00                 	db	0
   147                           
   148                           ;initializer for _PED_NS_Count
   149  0026E3  30                 	db	48
   150  0026E4  30                 	db	48
   151  0026E5  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  00FDBC                     __pmediumconst:
   155                           	opt stack 0
   156  00FDBC  00                 	db	0
   157  00FDBD                     _font:
   158                           	opt stack 0
   159  00FDBD  00                 	db	0
   160  00FDBE  00                 	db	0
   161  00FDBF  00                 	db	0
   162  00FDC0  00                 	db	0
   163  00FDC1  00                 	db	0
   164  00FDC2  00                 	db	0
   165  00FDC3  00                 	db	0
   166  00FDC4  5F                 	db	95
   167  00FDC5  00                 	db	0
   168  00FDC6  00                 	db	0
   169  00FDC7  00                 	db	0
   170  00FDC8  07                 	db	7
   171  00FDC9  00                 	db	0
   172  00FDCA  07                 	db	7
   173  00FDCB  00                 	db	0
   174  00FDCC  14                 	db	20
   175  00FDCD  7F                 	db	127
   176  00FDCE  14                 	db	20
   177  00FDCF  7F                 	db	127
   178  00FDD0  14                 	db	20
   179  00FDD1  24                 	db	36
   180  00FDD2  2A                 	db	42
   181  00FDD3  7F                 	db	127
   182  00FDD4  2A                 	db	42
   183  00FDD5  12                 	db	18
   184  00FDD6  23                 	db	35
   185  00FDD7  13                 	db	19
   186  00FDD8  08                 	db	8
   187  00FDD9  64                 	db	100
   188  00FDDA  62                 	db	98
   189  00FDDB  36                 	db	54
   190  00FDDC  49                 	db	73
   191  00FDDD  56                 	db	86
   192  00FDDE  20                 	db	32
   193  00FDDF  50                 	db	80
   194  00FDE0  00                 	db	0
   195  00FDE1  08                 	db	8
   196  00FDE2  07                 	db	7
   197  00FDE3  03                 	db	3
   198  00FDE4  00                 	db	0
   199  00FDE5  00                 	db	0
   200  00FDE6  1C                 	db	28
   201  00FDE7  22                 	db	34
   202  00FDE8  41                 	db	65
   203  00FDE9  00                 	db	0
   204  00FDEA  00                 	db	0
   205  00FDEB  41                 	db	65
   206  00FDEC  22                 	db	34
   207  00FDED  1C                 	db	28
   208  00FDEE  00                 	db	0
   209  00FDEF  2A                 	db	42
   210  00FDF0  1C                 	db	28
   211  00FDF1  7F                 	db	127
   212  00FDF2  1C                 	db	28
   213  00FDF3  2A                 	db	42
   214  00FDF4  08                 	db	8
   215  00FDF5  08                 	db	8
   216  00FDF6  3E                 	db	62
   217  00FDF7  08                 	db	8
   218  00FDF8  08                 	db	8
   219  00FDF9  00                 	db	0
   220  00FDFA  80                 	db	128
   221  00FDFB  70                 	db	112
   222  00FDFC  30                 	db	48
   223  00FDFD  00                 	db	0
   224  00FDFE  08                 	db	8
   225  00FDFF  08                 	db	8
   226  00FE00  08                 	db	8
   227  00FE01  08                 	db	8
   228  00FE02  08                 	db	8
   229  00FE03  00                 	db	0
   230  00FE04  00                 	db	0
   231  00FE05  60                 	db	96
   232  00FE06  60                 	db	96
   233  00FE07  00                 	db	0
   234  00FE08  20                 	db	32
   235  00FE09  10                 	db	16
   236  00FE0A  08                 	db	8
   237  00FE0B  04                 	db	4
   238  00FE0C  02                 	db	2
   239  00FE0D  3E                 	db	62
   240  00FE0E  51                 	db	81
   241  00FE0F  49                 	db	73
   242  00FE10  45                 	db	69
   243  00FE11  3E                 	db	62
   244  00FE12  00                 	db	0
   245  00FE13  42                 	db	66
   246  00FE14  7F                 	db	127
   247  00FE15  40                 	db	64
   248  00FE16  00                 	db	0
   249  00FE17  72                 	db	114
   250  00FE18  49                 	db	73
   251  00FE19  49                 	db	73
   252  00FE1A  49                 	db	73
   253  00FE1B  46                 	db	70
   254  00FE1C  21                 	db	33
   255  00FE1D  41                 	db	65
   256  00FE1E  49                 	db	73
   257  00FE1F  4D                 	db	77
   258  00FE20  33                 	db	51
   259  00FE21  18                 	db	24
   260  00FE22  14                 	db	20
   261  00FE23  12                 	db	18
   262  00FE24  7F                 	db	127
   263  00FE25  10                 	db	16
   264  00FE26  27                 	db	39
   265  00FE27  45                 	db	69
   266  00FE28  45                 	db	69
   267  00FE29  45                 	db	69
   268  00FE2A  39                 	db	57
   269  00FE2B  3C                 	db	60
   270  00FE2C  4A                 	db	74
   271  00FE2D  49                 	db	73
   272  00FE2E  49                 	db	73
   273  00FE2F  31                 	db	49
   274  00FE30  41                 	db	65
   275  00FE31  21                 	db	33
   276  00FE32  11                 	db	17
   277  00FE33  09                 	db	9
   278  00FE34  07                 	db	7
   279  00FE35  36                 	db	54
   280  00FE36  49                 	db	73
   281  00FE37  49                 	db	73
   282  00FE38  49                 	db	73
   283  00FE39  36                 	db	54
   284  00FE3A  46                 	db	70
   285  00FE3B  49                 	db	73
   286  00FE3C  49                 	db	73
   287  00FE3D  29                 	db	41
   288  00FE3E  1E                 	db	30
   289  00FE3F  00                 	db	0
   290  00FE40  00                 	db	0
   291  00FE41  14                 	db	20
   292  00FE42  00                 	db	0
   293  00FE43  00                 	db	0
   294  00FE44  00                 	db	0
   295  00FE45  40                 	db	64
   296  00FE46  34                 	db	52
   297  00FE47  00                 	db	0
   298  00FE48  00                 	db	0
   299  00FE49  00                 	db	0
   300  00FE4A  08                 	db	8
   301  00FE4B  14                 	db	20
   302  00FE4C  22                 	db	34
   303  00FE4D  41                 	db	65
   304  00FE4E  14                 	db	20
   305  00FE4F  14                 	db	20
   306  00FE50  14                 	db	20
   307  00FE51  14                 	db	20
   308  00FE52  14                 	db	20
   309  00FE53  00                 	db	0
   310  00FE54  41                 	db	65
   311  00FE55  22                 	db	34
   312  00FE56  14                 	db	20
   313  00FE57  08                 	db	8
   314  00FE58  02                 	db	2
   315  00FE59  01                 	db	1
   316  00FE5A  59                 	db	89
   317  00FE5B  09                 	db	9
   318  00FE5C  06                 	db	6
   319  00FE5D  3E                 	db	62
   320  00FE5E  41                 	db	65
   321  00FE5F  5D                 	db	93
   322  00FE60  59                 	db	89
   323  00FE61  4E                 	db	78
   324  00FE62  7C                 	db	124
   325  00FE63  12                 	db	18
   326  00FE64  11                 	db	17
   327  00FE65  12                 	db	18
   328  00FE66  7C                 	db	124
   329  00FE67  7F                 	db	127
   330  00FE68  49                 	db	73
   331  00FE69  49                 	db	73
   332  00FE6A  49                 	db	73
   333  00FE6B  36                 	db	54
   334  00FE6C  3E                 	db	62
   335  00FE6D  41                 	db	65
   336  00FE6E  41                 	db	65
   337  00FE6F  41                 	db	65
   338  00FE70  22                 	db	34
   339  00FE71  7F                 	db	127
   340  00FE72  41                 	db	65
   341  00FE73  41                 	db	65
   342  00FE74  41                 	db	65
   343  00FE75  3E                 	db	62
   344  00FE76  7F                 	db	127
   345  00FE77  49                 	db	73
   346  00FE78  49                 	db	73
   347  00FE79  49                 	db	73
   348  00FE7A  41                 	db	65
   349  00FE7B  7F                 	db	127
   350  00FE7C  09                 	db	9
   351  00FE7D  09                 	db	9
   352  00FE7E  09                 	db	9
   353  00FE7F  01                 	db	1
   354  00FE80  3E                 	db	62
   355  00FE81  41                 	db	65
   356  00FE82  41                 	db	65
   357  00FE83  51                 	db	81
   358  00FE84  73                 	db	115
   359  00FE85  7F                 	db	127
   360  00FE86  08                 	db	8
   361  00FE87  08                 	db	8
   362  00FE88  08                 	db	8
   363  00FE89  7F                 	db	127
   364  00FE8A  00                 	db	0
   365  00FE8B  41                 	db	65
   366  00FE8C  7F                 	db	127
   367  00FE8D  41                 	db	65
   368  00FE8E  00                 	db	0
   369  00FE8F  20                 	db	32
   370  00FE90  40                 	db	64
   371  00FE91  41                 	db	65
   372  00FE92  3F                 	db	63
   373  00FE93  01                 	db	1
   374  00FE94  7F                 	db	127
   375  00FE95  08                 	db	8
   376  00FE96  14                 	db	20
   377  00FE97  22                 	db	34
   378  00FE98  41                 	db	65
   379  00FE99  7F                 	db	127
   380  00FE9A  40                 	db	64
   381  00FE9B  40                 	db	64
   382  00FE9C  40                 	db	64
   383  00FE9D  40                 	db	64
   384  00FE9E  7F                 	db	127
   385  00FE9F  02                 	db	2
   386  00FEA0  1C                 	db	28
   387  00FEA1  02                 	db	2
   388  00FEA2  7F                 	db	127
   389  00FEA3  7F                 	db	127
   390  00FEA4  04                 	db	4
   391  00FEA5  08                 	db	8
   392  00FEA6  10                 	db	16
   393  00FEA7  7F                 	db	127
   394  00FEA8  3E                 	db	62
   395  00FEA9  41                 	db	65
   396  00FEAA  41                 	db	65
   397  00FEAB  41                 	db	65
   398  00FEAC  3E                 	db	62
   399  00FEAD  7F                 	db	127
   400  00FEAE  09                 	db	9
   401  00FEAF  09                 	db	9
   402  00FEB0  09                 	db	9
   403  00FEB1  06                 	db	6
   404  00FEB2  3E                 	db	62
   405  00FEB3  41                 	db	65
   406  00FEB4  51                 	db	81
   407  00FEB5  21                 	db	33
   408  00FEB6  5E                 	db	94
   409  00FEB7  7F                 	db	127
   410  00FEB8  09                 	db	9
   411  00FEB9  19                 	db	25
   412  00FEBA  29                 	db	41
   413  00FEBB  46                 	db	70
   414  00FEBC                     __end_of_font:
   415                           	opt stack 0
   416  00FEBC                     _font2:
   417                           	opt stack 0
   418  00FEBC  26                 	db	38
   419  00FEBD  49                 	db	73
   420  00FEBE  49                 	db	73
   421  00FEBF  49                 	db	73
   422  00FEC0  32                 	db	50
   423  00FEC1  03                 	db	3
   424  00FEC2  01                 	db	1
   425  00FEC3  7F                 	db	127
   426  00FEC4  01                 	db	1
   427  00FEC5  03                 	db	3
   428  00FEC6  3F                 	db	63
   429  00FEC7  40                 	db	64
   430  00FEC8  40                 	db	64
   431  00FEC9  40                 	db	64
   432  00FECA  3F                 	db	63
   433  00FECB  1F                 	db	31
   434  00FECC  20                 	db	32
   435  00FECD  40                 	db	64
   436  00FECE  20                 	db	32
   437  00FECF  1F                 	db	31
   438  00FED0  3F                 	db	63
   439  00FED1  40                 	db	64
   440  00FED2  38                 	db	56
   441  00FED3  40                 	db	64
   442  00FED4  3F                 	db	63
   443  00FED5  63                 	db	99
   444  00FED6  14                 	db	20
   445  00FED7  08                 	db	8
   446  00FED8  14                 	db	20
   447  00FED9  63                 	db	99
   448  00FEDA  03                 	db	3
   449  00FEDB  04                 	db	4
   450  00FEDC  78                 	db	120
   451  00FEDD  04                 	db	4
   452  00FEDE  03                 	db	3
   453  00FEDF  61                 	db	97
   454  00FEE0  59                 	db	89
   455  00FEE1  49                 	db	73
   456  00FEE2  4D                 	db	77
   457  00FEE3  43                 	db	67
   458  00FEE4  00                 	db	0
   459  00FEE5  7F                 	db	127
   460  00FEE6  41                 	db	65
   461  00FEE7  41                 	db	65
   462  00FEE8  41                 	db	65
   463  00FEE9  02                 	db	2
   464  00FEEA  04                 	db	4
   465  00FEEB  08                 	db	8
   466  00FEEC  10                 	db	16
   467  00FEED  20                 	db	32
   468  00FEEE  00                 	db	0
   469  00FEEF  41                 	db	65
   470  00FEF0  41                 	db	65
   471  00FEF1  41                 	db	65
   472  00FEF2  7F                 	db	127
   473  00FEF3  04                 	db	4
   474  00FEF4  02                 	db	2
   475  00FEF5  01                 	db	1
   476  00FEF6  02                 	db	2
   477  00FEF7  04                 	db	4
   478  00FEF8  40                 	db	64
   479  00FEF9  40                 	db	64
   480  00FEFA  40                 	db	64
   481  00FEFB  40                 	db	64
   482  00FEFC  40                 	db	64
   483  00FEFD  00                 	db	0
   484  00FEFE  03                 	db	3
   485  00FEFF  07                 	db	7
   486  00FF00  08                 	db	8
   487  00FF01  00                 	db	0
   488  00FF02  20                 	db	32
   489  00FF03  54                 	db	84
   490  00FF04  54                 	db	84
   491  00FF05  78                 	db	120
   492  00FF06  40                 	db	64
   493  00FF07  7F                 	db	127
   494  00FF08  28                 	db	40
   495  00FF09  44                 	db	68
   496  00FF0A  44                 	db	68
   497  00FF0B  38                 	db	56
   498  00FF0C  38                 	db	56
   499  00FF0D  44                 	db	68
   500  00FF0E  44                 	db	68
   501  00FF0F  44                 	db	68
   502  00FF10  28                 	db	40
   503  00FF11  38                 	db	56
   504  00FF12  44                 	db	68
   505  00FF13  44                 	db	68
   506  00FF14  28                 	db	40
   507  00FF15  7F                 	db	127
   508  00FF16  38                 	db	56
   509  00FF17  54                 	db	84
   510  00FF18  54                 	db	84
   511  00FF19  54                 	db	84
   512  00FF1A  18                 	db	24
   513  00FF1B  00                 	db	0
   514  00FF1C  08                 	db	8
   515  00FF1D  7E                 	db	126
   516  00FF1E  09                 	db	9
   517  00FF1F  02                 	db	2
   518  00FF20  18                 	db	24
   519  00FF21  A4                 	db	164
   520  00FF22  A4                 	db	164
   521  00FF23  9C                 	db	156
   522  00FF24  78                 	db	120
   523  00FF25  7F                 	db	127
   524  00FF26  08                 	db	8
   525  00FF27  04                 	db	4
   526  00FF28  04                 	db	4
   527  00FF29  78                 	db	120
   528  00FF2A  00                 	db	0
   529  00FF2B  44                 	db	68
   530  00FF2C  7D                 	db	125
   531  00FF2D  40                 	db	64
   532  00FF2E  00                 	db	0
   533  00FF2F  20                 	db	32
   534  00FF30  40                 	db	64
   535  00FF31  40                 	db	64
   536  00FF32  3D                 	db	61
   537  00FF33  00                 	db	0
   538  00FF34  7F                 	db	127
   539  00FF35  10                 	db	16
   540  00FF36  28                 	db	40
   541  00FF37  44                 	db	68
   542  00FF38  00                 	db	0
   543  00FF39  00                 	db	0
   544  00FF3A  41                 	db	65
   545  00FF3B  7F                 	db	127
   546  00FF3C  40                 	db	64
   547  00FF3D  00                 	db	0
   548  00FF3E  7C                 	db	124
   549  00FF3F  04                 	db	4
   550  00FF40  78                 	db	120
   551  00FF41  04                 	db	4
   552  00FF42  78                 	db	120
   553  00FF43  7C                 	db	124
   554  00FF44  08                 	db	8
   555  00FF45  04                 	db	4
   556  00FF46  04                 	db	4
   557  00FF47  78                 	db	120
   558  00FF48  38                 	db	56
   559  00FF49  44                 	db	68
   560  00FF4A  44                 	db	68
   561  00FF4B  44                 	db	68
   562  00FF4C  38                 	db	56
   563  00FF4D  FC                 	db	252
   564  00FF4E  18                 	db	24
   565  00FF4F  24                 	db	36
   566  00FF50  24                 	db	36
   567  00FF51  18                 	db	24
   568  00FF52  18                 	db	24
   569  00FF53  24                 	db	36
   570  00FF54  24                 	db	36
   571  00FF55  18                 	db	24
   572  00FF56  FC                 	db	252
   573  00FF57  7C                 	db	124
   574  00FF58  08                 	db	8
   575  00FF59  04                 	db	4
   576  00FF5A  04                 	db	4
   577  00FF5B  08                 	db	8
   578  00FF5C  48                 	db	72
   579  00FF5D  54                 	db	84
   580  00FF5E  54                 	db	84
   581  00FF5F  54                 	db	84
   582  00FF60  24                 	db	36
   583  00FF61  04                 	db	4
   584  00FF62  04                 	db	4
   585  00FF63  3F                 	db	63
   586  00FF64  44                 	db	68
   587  00FF65  24                 	db	36
   588  00FF66  3C                 	db	60
   589  00FF67  40                 	db	64
   590  00FF68  40                 	db	64
   591  00FF69  20                 	db	32
   592  00FF6A  7C                 	db	124
   593  00FF6B  1C                 	db	28
   594  00FF6C  20                 	db	32
   595  00FF6D  40                 	db	64
   596  00FF6E  20                 	db	32
   597  00FF6F  1C                 	db	28
   598  00FF70  3C                 	db	60
   599  00FF71  40                 	db	64
   600  00FF72  30                 	db	48
   601  00FF73  40                 	db	64
   602  00FF74  3C                 	db	60
   603  00FF75  44                 	db	68
   604  00FF76  28                 	db	40
   605  00FF77  10                 	db	16
   606  00FF78  28                 	db	40
   607  00FF79  44                 	db	68
   608  00FF7A  4C                 	db	76
   609  00FF7B  90                 	db	144
   610  00FF7C  90                 	db	144
   611  00FF7D  90                 	db	144
   612  00FF7E  7C                 	db	124
   613  00FF7F  44                 	db	68
   614  00FF80  64                 	db	100
   615  00FF81  54                 	db	84
   616  00FF82  4C                 	db	76
   617  00FF83  44                 	db	68
   618  00FF84  00                 	db	0
   619  00FF85  08                 	db	8
   620  00FF86  36                 	db	54
   621  00FF87  41                 	db	65
   622  00FF88  00                 	db	0
   623  00FF89  00                 	db	0
   624  00FF8A  00                 	db	0
   625  00FF8B  77                 	db	119
   626  00FF8C  00                 	db	0
   627  00FF8D  00                 	db	0
   628  00FF8E  00                 	db	0
   629  00FF8F  41                 	db	65
   630  00FF90  36                 	db	54
   631  00FF91  08                 	db	8
   632  00FF92  00                 	db	0
   633  00FF93  02                 	db	2
   634  00FF94  01                 	db	1
   635  00FF95  02                 	db	2
   636  00FF96  04                 	db	4
   637  00FF97  02                 	db	2
   638  00FF98                     __end_of_font2:
   639                           	opt stack 0
   640  0000                     _ADCON0	set	4034
   641  0000                     _ADCON0bits	set	4034
   642  0000                     _ADCON1	set	4033
   643  0000                     _ADCON2	set	4032
   644  0000                     _ADRESH	set	4036
   645  0000                     _ADRESL	set	4035
   646  0000                     _CCP2CON	set	4026
   647  0000                     _CCPR2L	set	4027
   648  0000                     _INTCON2bits	set	4081
   649  0000                     _INTCON3bits	set	4080
   650  0000                     _INTCONbits	set	4082
   651  0000                     _OSCCON	set	4051
   652  0000                     _PIE1bits	set	3997
   653  0000                     _PIR1bits	set	3998
   654  0000                     _PIR2bits	set	4001
   655  0000                     _PORTAbits	set	3968
   656  0000                     _PORTBbits	set	3969
   657  0000                     _PORTCbits	set	3970
   658  0000                     _PORTDbits	set	3971
   659  0000                     _PORTEbits	set	3972
   660  0000                     _PR2	set	4043
   661  0000                     _RCSTA	set	4011
   662  0000                     _RCSTAbits	set	4011
   663  0000                     _SPBRG	set	4015
   664  0000                     _SPBRGH	set	4016
   665  0000                     _SSPBUF	set	4041
   666  0000                     _SSPCON1	set	4038
   667  0000                     _SSPSTAT	set	4039
   668  0000                     _SSPSTATbits	set	4039
   669  0000                     _T0CON	set	4053
   670  0000                     _T0CONbits	set	4053
   671  0000                     _T2CON	set	4042
   672  0000                     _T3CON	set	4017
   673  0000                     _T3CONbits	set	4017
   674  0000                     _TMR0H	set	4055
   675  0000                     _TMR0L	set	4054
   676  0000                     _TRISA	set	3986
   677  0000                     _TRISB	set	3987
   678  0000                     _TRISC	set	3988
   679  0000                     _TRISCbits	set	3988
   680  0000                     _TRISD	set	3989
   681  0000                     _TRISE	set	3990
   682  0000                     _TXREG	set	4013
   683  0000                     _TXSTA	set	4012
   684  0000                     _TXSTAbits	set	4012
   685  0000                     _TRMT	set	32097
   686  00FF98                     STR_12:
   687  00FF98  4E                 	db	78	;'N'
   688  00FF99  53                 	db	83	;'S'
   689  00FF9A  50                 	db	80	;'P'
   690  00FF9B  20                 	db	32
   691  00FF9C  4E                 	db	78	;'N'
   692  00FF9D  53                 	db	83	;'S'
   693  00FF9E  4C                 	db	76	;'L'
   694  00FF9F  54                 	db	84	;'T'
   695  00FFA0  20                 	db	32
   696  00FFA1  45                 	db	69	;'E'
   697  00FFA2  57                 	db	87	;'W'
   698  00FFA3  50                 	db	80	;'P'
   699  00FFA4  20                 	db	32
   700  00FFA5  45                 	db	69	;'E'
   701  00FFA6  57                 	db	87	;'W'
   702  00FFA7  4C                 	db	76	;'L'
   703  00FFA8  54                 	db	84	;'T'
   704  00FFA9  20                 	db	32
   705  00FFAA  4D                 	db	77	;'M'
   706  00FFAB  52                 	db	82	;'R'
   707  00FFAC  00                 	db	0
   708  00FFAD                     STR_1:
   709  00FFAD  45                 	db	69	;'E'
   710  00FFAE  43                 	db	67	;'C'
   711  00FFAF  45                 	db	69	;'E'
   712  00FFB0  33                 	db	51	;'3'
   713  00FFB1  33                 	db	51	;'3'
   714  00FFB2  30                 	db	48	;'0'
   715  00FFB3  31                 	db	49	;'1'
   716  00FFB4  4C                 	db	76	;'L'
   717  00FFB5  20                 	db	32
   718  00FFB6  46                 	db	70	;'F'
   719  00FFB7  61                 	db	97	;'a'
   720  00FFB8  6C                 	db	108	;'l'
   721  00FFB9  6C                 	db	108	;'l'
   722  00FFBA  20                 	db	32
   723  00FFBB  32                 	db	50	;'2'
   724  00FFBC  31                 	db	49	;'1'
   725  00FFBD  2D                 	db	45
   726  00FFBE  53                 	db	83	;'S'
   727  00FFBF  33                 	db	51	;'3'
   728  00FFC0  00                 	db	0
   729  00FFC1                     STR_6:
   730  00FFC1  4E                 	db	78	;'N'
   731  00FFC2  4F                 	db	79	;'O'
   732  00FFC3  52                 	db	82	;'R'
   733  00FFC4  54                 	db	84	;'T'
   734  00FFC5  48                 	db	72	;'H'
   735  00FFC6  2F                 	db	47
   736  00FFC7  53                 	db	83	;'S'
   737  00FFC8  4F                 	db	79	;'O'
   738  00FFC9  55                 	db	85	;'U'
   739  00FFCA  54                 	db	84	;'T'
   740  00FFCB  48                 	db	72	;'H'
   741  00FFCC  00                 	db	0
   742  00FFCD                     STR_8:
   743  00FFCD  45                 	db	69	;'E'
   744  00FFCE  41                 	db	65	;'A'
   745  00FFCF  53                 	db	83	;'S'
   746  00FFD0  54                 	db	84	;'T'
   747  00FFD1  2F                 	db	47
   748  00FFD2  57                 	db	87	;'W'
   749  00FFD3  45                 	db	69	;'E'
   750  00FFD4  53                 	db	83	;'S'
   751  00FFD5  54                 	db	84	;'T'
   752  00FFD6  00                 	db	0
   753  00FFD7                     STR_7:
   754  00FFD7  4E                 	db	78	;'N'
   755  00FFD8  2F                 	db	47
   756  00FFD9  53                 	db	83	;'S'
   757  00FFDA  20                 	db	32
   758  00FFDB  4C                 	db	76	;'L'
   759  00FFDC  54                 	db	84	;'T'
   760  00FFDD  00                 	db	0
   761  00FFDE                     STR_9:
   762  00FFDE  45                 	db	69	;'E'
   763  00FFDF  2F                 	db	47
   764  00FFE0  57                 	db	87	;'W'
   765  00FFE1  20                 	db	32
   766  00FFE2  4C                 	db	76	;'L'
   767  00FFE3  54                 	db	84	;'T'
   768  00FFE4  00                 	db	0
   769  00FFE5                     STR_2:
   770  00FFE5  4D                 	db	77	;'M'
   771  00FFE6  6F                 	db	111	;'o'
   772  00FFE7  64                 	db	100	;'d'
   773  00FFE8  65                 	db	101	;'e'
   774  00FFE9  3A                 	db	58	;':'
   775  00FFEA  00                 	db	0
   776  00FFEB                     STR_3:
   777  00FFEB  46                 	db	70	;'F'
   778  00FFEC  52                 	db	82	;'R'
   779  00FFED  3A                 	db	58	;':'
   780  00FFEE  00                 	db	0
   781  00FFEF                     STR_4:
   782  00FFEF  46                 	db	70	;'F'
   783  00FFF0  53                 	db	83	;'S'
   784  00FFF1  3A                 	db	58	;':'
   785  00FFF2  00                 	db	0
   786  00FFF3                     STR_10:
   787  00FFF3  50                 	db	80	;'P'
   788  00FFF4  4E                 	db	78	;'N'
   789  00FFF5  53                 	db	83	;'S'
   790  00FFF6  00                 	db	0
   791  00FFF7                     STR_11:
   792  00FFF7  50                 	db	80	;'P'
   793  00FFF8  45                 	db	69	;'E'
   794  00FFF9  57                 	db	87	;'W'
   795  00FFFA  00                 	db	0
   796  00FFFB                     STR_14:
   797  00FFFB  20                 	db	32
   798  00FFFC  00                 	db	0
   799  00FFFD                     STR_5:
   800  00FFFD  2A                 	db	42
   801  00FFFE  00                 	db	0
   802  0000                     
   803                           ; #config settings
   804  00FFFF  00                 	db	0	; dummy byte at the end
   805  0000                     
   806                           	psect	cinit
   807  0020CC                     __pcinit:
   808                           	opt stack 0
   809  0020CC                     start_initialization:
   810                           	opt stack 0
   811  0020CC                     __initialization:
   812                           	opt stack 0
   813                           
   814                           ; Clear objects allocated to BANK0 (37 bytes)
   815  0020CC  EE00  F080         	lfsr	0,__pbssBANK0
   816  0020D0  0E25               	movlw	37
   817  0020D2                     clear_0:
   818  0020D2  6AEE               	clrf	postinc0,c
   819  0020D4  06E8               	decf	wreg,f,c
   820  0020D6  E1FD               	bnz	clear_0
   821                           
   822                           ; Clear objects allocated to COMRAM (25 bytes)
   823  0020D8  EE00  F042         	lfsr	0,__pbssCOMRAM
   824  0020DC  0E19               	movlw	25
   825  0020DE                     clear_1:
   826  0020DE  6AEE               	clrf	postinc0,c
   827  0020E0  06E8               	decf	wreg,f,c
   828  0020E2  E1FD               	bnz	clear_1
   829                           
   830                           ; Initialize objects allocated to BANK0 (12 bytes)
   831                           ; load TBLPTR registers with __pidataBANK0
   832  0020E4  0EDA               	movlw	low __pidataBANK0
   833  0020E6  6EF6               	movwf	tblptrl,c
   834  0020E8  0E26               	movlw	high __pidataBANK0
   835  0020EA  6EF7               	movwf	tblptrh,c
   836  0020EC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   837  0020EE  6EF8               	movwf	tblptru,c
   838  0020F0  EE00  F0B3         	lfsr	0,__pdataBANK0
   839  0020F4  EE10 F00C          	lfsr	1,12
   840  0020F8                     copy_data0:
   841  0020F8  0009               	tblrd		*+
   842  0020FA  CFF5 FFEE          	movff	tablat,postinc0
   843  0020FE  50E5               	movf	postdec1,w,c
   844  002100  50E1               	movf	fsr1l,w,c
   845  002102  E1FA               	bnz	copy_data0
   846                           
   847                           ; Initialize objects allocated to COMRAM (23 bytes)
   848                           ; load TBLPTR registers with __pidataCOMRAM
   849  002104  0E34               	movlw	low __pidataCOMRAM
   850  002106  6EF6               	movwf	tblptrl,c
   851  002108  0E26               	movlw	high __pidataCOMRAM
   852  00210A  6EF7               	movwf	tblptrh,c
   853  00210C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   854  00210E  6EF8               	movwf	tblptru,c
   855  002110  EE00  F05B         	lfsr	0,__pdataCOMRAM
   856  002114  EE10 F017          	lfsr	1,23
   857  002118                     copy_data1:
   858  002118  0009               	tblrd		*+
   859  00211A  CFF5 FFEE          	movff	tablat,postinc0
   860  00211E  50E5               	movf	postdec1,w,c
   861  002120  50E1               	movf	fsr1l,w,c
   862  002122  E1FA               	bnz	copy_data1
   863  002124                     end_of_initialization:
   864                           	opt stack 0
   865  002124                     __end_of__initialization:
   866                           	opt stack 0
   867  002124  0E00               	movlw	low (__Lmediumconst shr (0+16))
   868  002126  6EF8               	movwf	tblptru,c
   869  002128  0100               	movlb	0
   870  00212A  EFD9  F00C         	goto	_main	;jump to C main() function
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postdec1	equ	0xFE5
   878                           fsr1l	equ	0xFE1
   879                           
   880                           	psect	bssCOMRAM
   881  000042                     __pbssCOMRAM:
   882                           	opt stack 0
   883  000042                     _volt:
   884                           	opt stack 0
   885  000042                     	ds	3
   886  000045                     _MODE:
   887                           	opt stack 0
   888  000045                     	ds	2
   889  000047                     _nbr:
   890                           	opt stack 0
   891  000047                     	ds	2
   892  000049                     _txt:
   893                           	opt stack 0
   894  000049                     	ds	2
   895  00004B                     _Count:
   896                           	opt stack 0
   897  00004B                     	ds	1
   898  00004C                     _EW_PED_SW:
   899                           	opt stack 0
   900  00004C                     	ds	1
   901  00004D                     _FLASHING:
   902                           	opt stack 0
   903  00004D                     	ds	1
   904  00004E                     _FLASHING_REQUEST:
   905                           	opt stack 0
   906  00004E                     	ds	1
   907  00004F                     _NS_PED_SW:
   908                           	opt stack 0
   909  00004F                     	ds	1
   910  000050                     _PED_Count:
   911                           	opt stack 0
   912  000050                     	ds	1
   913  000051                     _SW_EWLT:
   914                           	opt stack 0
   915  000051                     	ds	1
   916  000052                     _SW_EWPED:
   917                           	opt stack 0
   918  000052                     	ds	1
   919  000053                     _SW_MODE:
   920                           	opt stack 0
   921  000053                     	ds	1
   922  000054                     _SW_NSLT:
   923                           	opt stack 0
   924  000054                     	ds	1
   925  000055                     _SW_NSPED:
   926                           	opt stack 0
   927  000055                     	ds	1
   928  000056                     __tft_type:
   929                           	opt stack 0
   930  000056                     	ds	1
   931  000057                     _colstart:
   932                           	opt stack 0
   933  000057                     	ds	1
   934  000058                     _dir:
   935                           	opt stack 0
   936  000058                     	ds	1
   937  000059                     _direction:
   938                           	opt stack 0
   939  000059                     	ds	1
   940  00005A                     _rowstart:
   941                           	opt stack 0
   942  00005A                     	ds	1
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952                           	psect	dataCOMRAM
   953  00005B                     __pdataCOMRAM:
   954                           	opt stack 0
   955  00005B                     _wrap:
   956                           	opt stack 0
   957  00005B                     	ds	1
   958  00005C                     _NSLT_Count:
   959                           	opt stack 0
   960  00005C                     	ds	3
   961  00005F                     _NS_Count:
   962                           	opt stack 0
   963  00005F                     	ds	3
   964  000062                     _Act_Mode_Txt:
   965                           	opt stack 0
   966  000062                     	ds	2
   967  000064                     _FlashingR_Txt:
   968                           	opt stack 0
   969  000064                     	ds	2
   970  000066                     _FlashingS_Txt:
   971                           	opt stack 0
   972  000066                     	ds	2
   973  000068                     _SW_EWLT_Txt:
   974                           	opt stack 0
   975  000068                     	ds	2
   976  00006A                     _SW_EWPED_Txt:
   977                           	opt stack 0
   978  00006A                     	ds	2
   979  00006C                     _SW_MODE_Txt:
   980                           	opt stack 0
   981  00006C                     	ds	2
   982  00006E                     _SW_NSLT_Txt:
   983                           	opt stack 0
   984  00006E                     	ds	2
   985  000070                     _SW_NSPED_Txt:
   986                           	opt stack 0
   987  000070                     	ds	2
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           postinc0	equ	0xFEE
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1l	equ	0xFE1
   996                           
   997                           	psect	bssBANK0
   998  000080                     __pbssBANK0:
   999                           	opt stack 0
  1000  000080                     _INT0_flag:
  1001                           	opt stack 0
  1002  000080                     	ds	2
  1003  000082                     _INT1_flag:
  1004                           	opt stack 0
  1005  000082                     	ds	2
  1006  000084                     _INT2_flag:
  1007                           	opt stack 0
  1008  000084                     	ds	2
  1009  000086                     _buffer:
  1010                           	opt stack 0
  1011  000086                     	ds	31
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           postdec1	equ	0xFE5
  1019                           fsr1l	equ	0xFE1
  1020                           
  1021                           	psect	dataBANK0
  1022  0000B3                     __pdataBANK0:
  1023                           	opt stack 0
  1024  0000B3                     _EWLT_Count:
  1025                           	opt stack 0
  1026  0000B3                     	ds	3
  1027  0000B6                     _EW_Count:
  1028                           	opt stack 0
  1029  0000B6                     	ds	3
  1030  0000B9                     _PED_EW_Count:
  1031                           	opt stack 0
  1032  0000B9                     	ds	3
  1033  0000BC                     _PED_NS_Count:
  1034                           	opt stack 0
  1035  0000BC                     	ds	3
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           postdec1	equ	0xFE5
  1043                           fsr1l	equ	0xFE1
  1044                           
  1045                           	psect	cstackBANK0
  1046  0000A5                     __pcstackBANK0:
  1047                           	opt stack 0
  1048  0000A5                     drawtext@x:
  1049                           	opt stack 0
  1050  0000A5                     update_LCD_color@direction:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x0
  1054  0000A5                     	ds	1
  1055  0000A6                     update_LCD_color@Circle_Y:
  1056                           	opt stack 0
  1057  0000A6                     drawtext@textsize:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x1
  1061  0000A6                     	ds	1
  1062  0000A7                     Set_NS@color:
  1063                           	opt stack 0
  1064  0000A7                     Set_NS_LT@color:
  1065                           	opt stack 0
  1066  0000A7                     Set_EW@color:
  1067                           	opt stack 0
  1068  0000A7                     Set_EW_LT@color:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x2
  1072  0000A7                     	ds	1
  1073  0000A8                     drawtext@i:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x3
  1077  0000A8                     	ds	2
  1078  0000AA                     drawtext@cursor_y:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x5
  1082  0000AA                     	ds	1
  1083  0000AB                     drawtext@cursor_x:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x6
  1087  0000AB                     	ds	1
  1088  0000AC                     update_LCD_count@direction:
  1089                           	opt stack 0
  1090  0000AC                     update_LCD_PED_Count@direction:
  1091                           	opt stack 0
  1092  0000AC                     update_LCD_misc@ch:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x7
  1096  0000AC                     	ds	1
  1097  0000AD                     PED_Control@Num_Sec:
  1098                           	opt stack 0
  1099  0000AD                     update_LCD_misc@nStep:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x8
  1103  0000AD                     	ds	1
  1104  0000AE                     PED_Control@direction:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x9
  1108  0000AE                     	ds	1
  1109  0000AF                     PED_Control@i:
  1110                           	opt stack 0
  1111  0000AF                     Wait_N_Seconds@seconds:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0xA
  1115  0000AF                     	ds	1
  1116  0000B0                     PED_Control@i_1511:
  1117                           	opt stack 0
  1118  0000B0                     Wait_N_Seconds@I:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0xB
  1122  0000B0                     	ds	1
  1123  0000B1                     main@nStep:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0xC
  1127  0000B1                     	ds	2
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           
  1137                           	psect	cstackCOMRAM
  1138  000001                     __pcstackCOMRAM:
  1139                           	opt stack 0
  1140  000001                     ??_chkisr:
  1141  000001                     
  1142                           ; 0 bytes @ 0x0
  1143  000001                     	ds	14
  1144  00000F                     ?_strlen:
  1145                           	opt stack 0
  1146  00000F                     ?_get_full_ADC:
  1147                           	opt stack 0
  1148  00000F                     ?___wmul:
  1149                           	opt stack 0
  1150  00000F                     ?___awdiv:
  1151                           	opt stack 0
  1152  00000F                     ?___awmod:
  1153                           	opt stack 0
  1154  00000F                     ?___ftpack:
  1155                           	opt stack 0
  1156  00000F                     spiwrite@x:
  1157                           	opt stack 0
  1158  00000F                     OpenUSART@spbrg:
  1159                           	opt stack 0
  1160  00000F                     ___wmul@multiplier:
  1161                           	opt stack 0
  1162  00000F                     ___awdiv@dividend:
  1163                           	opt stack 0
  1164  00000F                     ___awmod@dividend:
  1165                           	opt stack 0
  1166  00000F                     strcpy@to:
  1167                           	opt stack 0
  1168  00000F                     strlen@s:
  1169                           	opt stack 0
  1170  00000F                     ___ftpack@arg:
  1171                           	opt stack 0
  1172  00000F                     ___ftge@ff1:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0xE
  1176  00000F                     	ds	1
  1177  000010                     spiwrite@spidata:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0xF
  1181  000010                     	ds	1
  1182  000011                     ??_strlen:
  1183  000011                     ??_get_full_ADC:
  1184  000011                     write_command@cmd_:
  1185                           	opt stack 0
  1186  000011                     write_data@data_:
  1187                           	opt stack 0
  1188  000011                     OpenUSART@config:
  1189                           	opt stack 0
  1190  000011                     ___wmul@multiplicand:
  1191                           	opt stack 0
  1192  000011                     ___awdiv@divisor:
  1193                           	opt stack 0
  1194  000011                     ___awmod@divisor:
  1195                           	opt stack 0
  1196  000011                     strcpy@from:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x10
  1200  000011                     	ds	1
  1201  000012                     setAddrWindow@y0:
  1202                           	opt stack 0
  1203  000012                     ___ftpack@exp:
  1204                           	opt stack 0
  1205  000012                     ___ftge@ff2:
  1206                           	opt stack 0
  1207                           
  1208                           ; 3 bytes @ 0x11
  1209  000012                     	ds	1
  1210  000013                     setAddrWindow@x1:
  1211                           	opt stack 0
  1212  000013                     ___awdiv@counter:
  1213                           	opt stack 0
  1214  000013                     ___awmod@counter:
  1215                           	opt stack 0
  1216  000013                     ___ftpack@sign:
  1217                           	opt stack 0
  1218  000013                     get_full_ADC@result:
  1219                           	opt stack 0
  1220  000013                     ___wmul@product:
  1221                           	opt stack 0
  1222  000013                     strcpy@cp:
  1223                           	opt stack 0
  1224  000013                     strlen@cp:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x12
  1228  000013                     	ds	1
  1229  000014                     ??___ftpack:
  1230  000014                     setAddrWindow@y1:
  1231                           	opt stack 0
  1232  000014                     ___awdiv@sign:
  1233                           	opt stack 0
  1234  000014                     ___awmod@sign:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x13
  1238  000014                     	ds	1
  1239  000015                     ??___ftge:
  1240  000015                     setAddrWindow@x0:
  1241                           	opt stack 0
  1242  000015                     delay_ms@ms:
  1243                           	opt stack 0
  1244  000015                     ___awdiv@quotient:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x14
  1248  000015                     	ds	1
  1249  000016                     drawPixel@y:
  1250                           	opt stack 0
  1251  000016                     drawFastVLine@y:
  1252                           	opt stack 0
  1253  000016                     fillRectangle@y:
  1254                           	opt stack 0
  1255  000016                     drawFastHLine@y:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x15
  1259  000016                     	ds	1
  1260  000017                     ??_delay_ms:
  1261  000017                     ?___awtoft:
  1262                           	opt stack 0
  1263  000017                     drawFastVLine@h:
  1264                           	opt stack 0
  1265  000017                     fillRectangle@w:
  1266                           	opt stack 0
  1267  000017                     drawFastHLine@w:
  1268                           	opt stack 0
  1269  000017                     drawPixel@color:
  1270                           	opt stack 0
  1271  000017                     ___awtoft@c:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x16
  1275  000017                     	ds	1
  1276  000018                     fillRectangle@h:
  1277                           	opt stack 0
  1278  000018                     drawFastVLine@color:
  1279                           	opt stack 0
  1280  000018                     drawFastHLine@color:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x17
  1284  000018                     	ds	1
  1285  000019                     drawPixel@x:
  1286                           	opt stack 0
  1287  000019                     delay_ms@count:
  1288                           	opt stack 0
  1289  000019                     fillRectangle@color:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x18
  1293  000019                     	ds	1
  1294  00001A                     ??_drawFastVLine:
  1295  00001A                     ??_drawFastHLine:
  1296  00001A                     ___awtoft@sign:
  1297                           	opt stack 0
  1298  00001A                     drawCircle@x0:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x19
  1302  00001A                     	ds	1
  1303  00001B                     ??_fillRectangle:
  1304  00001B                     ?___ftdiv:
  1305                           	opt stack 0
  1306  00001B                     ___ftdiv@f1:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x1A
  1310  00001B                     	ds	1
  1311  00001C                     drawCircle@y0:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x1B
  1315  00001C                     	ds	2
  1316  00001E                     drawFastVLine@hi:
  1317                           	opt stack 0
  1318  00001E                     drawFastHLine@hi:
  1319                           	opt stack 0
  1320  00001E                     drawCircle@r:
  1321                           	opt stack 0
  1322  00001E                     ___ftdiv@f2:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x1D
  1326  00001E                     	ds	1
  1327  00001F                     drawFastVLine@lo:
  1328                           	opt stack 0
  1329  00001F                     fillRectangle@hi:
  1330                           	opt stack 0
  1331  00001F                     drawFastHLine@lo:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x1E
  1335  00001F                     	ds	1
  1336  000020                     drawFastVLine@x:
  1337                           	opt stack 0
  1338  000020                     fillRectangle@lo:
  1339                           	opt stack 0
  1340  000020                     drawFastHLine@x:
  1341                           	opt stack 0
  1342  000020                     drawCircle@color:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x1F
  1346  000020                     	ds	1
  1347  000021                     ??___ftdiv:
  1348  000021                     fillRect@y:
  1349                           	opt stack 0
  1350  000021                     fillRectangle@x:
  1351                           	opt stack 0
  1352  000021                     fillCircleHelper@x0:
  1353                           	opt stack 0
  1354  000021                     drawRect@x:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x20
  1358  000021                     	ds	1
  1359  000022                     ??_drawCircle:
  1360  000022                     fillRect@w:
  1361                           	opt stack 0
  1362  000022                     fillScreen@color:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x21
  1366  000022                     	ds	1
  1367  000023                     fillRect@h:
  1368                           	opt stack 0
  1369  000023                     fillCircleHelper@y0:
  1370                           	opt stack 0
  1371  000023                     drawRect@y:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x22
  1375  000023                     	ds	1
  1376  000024                     ___ftdiv@cntr:
  1377                           	opt stack 0
  1378  000024                     fillRect@color:
  1379                           	opt stack 0
  1380  000024                     drawCircle@ddF_x:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x23
  1384  000024                     	ds	1
  1385  000025                     fillCircleHelper@r:
  1386                           	opt stack 0
  1387  000025                     drawRect@w:
  1388                           	opt stack 0
  1389  000025                     ___ftdiv@f3:
  1390                           	opt stack 0
  1391                           
  1392                           ; 3 bytes @ 0x24
  1393  000025                     	ds	1
  1394  000026                     ??_fillRect:
  1395  000026                     drawCircle@ddF_y:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x25
  1399  000026                     	ds	1
  1400  000027                     fillCircleHelper@cornername:
  1401                           	opt stack 0
  1402  000027                     drawRect@h:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x26
  1406  000027                     	ds	1
  1407  000028                     ___ftdiv@exp:
  1408                           	opt stack 0
  1409  000028                     drawCircle@f:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x27
  1413  000028                     	ds	1
  1414  000029                     fillRect@x:
  1415                           	opt stack 0
  1416  000029                     ___ftdiv@sign:
  1417                           	opt stack 0
  1418  000029                     fillCircleHelper@delta:
  1419                           	opt stack 0
  1420  000029                     drawRect@color:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x28
  1424  000029                     	ds	1
  1425  00002A                     fillRect@i:
  1426                           	opt stack 0
  1427  00002A                     drawCircle@x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x29
  1431  00002A                     	ds	1
  1432  00002B                     ??_drawRect:
  1433  00002B                     fillCircleHelper@color:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x2A
  1437  00002B                     	ds	1
  1438  00002C                     drawChar@y:
  1439                           	opt stack 0
  1440  00002C                     drawCircle@y:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x2B
  1444  00002C                     	ds	1
  1445  00002D                     ??_fillCircleHelper:
  1446  00002D                     drawChar@c:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x2C
  1450  00002D                     	ds	1
  1451  00002E                     drawChar@color:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x2D
  1455  00002E                     	ds	1
  1456  00002F                     fillCircleHelper@ddF_x:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x2E
  1460  00002F                     	ds	1
  1461  000030                     drawChar@bg:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x2F
  1465  000030                     	ds	1
  1466  000031                     fillCircleHelper@ddF_y:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x30
  1470  000031                     	ds	1
  1471  000032                     drawChar@size:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x31
  1475  000032                     	ds	1
  1476  000033                     drawChar@line:
  1477                           	opt stack 0
  1478  000033                     fillCircleHelper@f:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x32
  1482  000033                     	ds	1
  1483  000034                     drawChar@x:
  1484                           	opt stack 0
  1485                           
  1486                           ; 1 bytes @ 0x33
  1487  000034                     	ds	1
  1488  000035                     drawChar@j:
  1489                           	opt stack 0
  1490  000035                     fillCircleHelper@x:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x34
  1494  000035                     	ds	1
  1495  000036                     drawChar@i:
  1496                           	opt stack 0
  1497                           
  1498                           ; 1 bytes @ 0x35
  1499  000036                     	ds	1
  1500  000037                     drawtext@y:
  1501                           	opt stack 0
  1502  000037                     fillCircleHelper@y:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x36
  1506  000037                     	ds	1
  1507  000038                     drawtext@_text:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x37
  1511  000038                     	ds	1
  1512  000039                     fillCircle@x0:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x38
  1516  000039                     	ds	1
  1517  00003A                     drawtext@color:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x39
  1521  00003A                     	ds	1
  1522  00003B                     fillCircle@y0:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x3A
  1526  00003B                     	ds	1
  1527  00003C                     drawtext@bg:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x3B
  1531  00003C                     	ds	1
  1532  00003D                     fillCircle@r:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x3C
  1536  00003D                     	ds	1
  1537  00003E                     drawtext@size:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x3D
  1541  00003E                     	ds	1
  1542  00003F                     ??_drawtext:
  1543  00003F                     fillCircle@color:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x3E
  1547  00003F                     	ds	2
  1548  000041                     update_LCD_color@color:
  1549                           	opt stack 0
  1550  000041                     update_LCD_count@count:
  1551                           	opt stack 0
  1552  000041                     update_LCD_PED_Count@count:
  1553                           	opt stack 0
  1554                           
  1555                           ; 1 bytes @ 0x40
  1556  000041                     	ds	1
  1557  000042                     tblptru	equ	0xFF8
  1558                           tblptrh	equ	0xFF7
  1559                           tblptrl	equ	0xFF6
  1560                           tablat	equ	0xFF5
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           postdec1	equ	0xFE5
  1564                           fsr1l	equ	0xFE1
  1565                           
  1566                           ; 0 bytes @ 0x41
  1567 ;;
  1568 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1569 ;;
  1570 ;; *************** function _main *****************
  1571 ;; Defined at:
  1572 ;;		line 344 in file "Lab8_redo.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  nStep           2   12[BANK0 ] int 
  1577 ;; Return value:  Size  Location     Type
  1578 ;;		None               void
  1579 ;; Registers used:
  1580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;Total ram usage:        2 bytes
  1591 ;; Hardware stack levels required when called:   13
  1592 ;; This function calls:
  1593 ;;		_Day_Mode
  1594 ;;		_Do_Flashing
  1595 ;;		_Do_Init
  1596 ;;		_Init_ADC
  1597 ;;		_Initialize_Screen
  1598 ;;		_Night_Mode
  1599 ;;		___awtoft
  1600 ;;		___ftdiv
  1601 ;;		___ftge
  1602 ;;		___wmul
  1603 ;;		_get_full_ADC
  1604 ;;		_init_IO
  1605 ;;		_init_UART
  1606 ;; This function is called by:
  1607 ;;		Startup code after reset
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text0
  1612  0019B2                     __ptext0:
  1613                           	opt stack 0
  1614  0019B2                     _main:
  1615                           	opt stack 18
  1616                           
  1617                           ;Lab8_redo.c: 346: init_IO();
  1618                           
  1619                           ;incstack = 0
  1620  0019B2  EC26  F013         	call	_init_IO	;wreg free
  1621                           
  1622                           ;Lab8_redo.c: 347: Init_ADC();
  1623  0019B6  EC66  F013         	call	_Init_ADC	;wreg free
  1624                           
  1625                           ;Lab8_redo.c: 348: init_UART();
  1626  0019BA  EC30  F013         	call	_init_UART	;wreg free
  1627                           
  1628                           ;Lab8_redo.c: 349: OSCCON = 0x70;
  1629  0019BE  0E70               	movlw	112
  1630  0019C0  6ED3               	movwf	4051,c	;volatile
  1631                           
  1632                           ;Lab8_redo.c: 350: Initialize_Screen();
  1633  0019C2  EC0E  F000         	call	_Initialize_Screen	;wreg free
  1634                           
  1635                           ;Lab8_redo.c: 352: Do_Init();
  1636  0019C6  ECC1  F012         	call	_Do_Init	;wreg free
  1637  0019CA  D000               	goto	l5668
  1638  0019CC                     l5668:
  1639                           
  1640                           ;Lab8_redo.c: 360: {
  1641                           ;Lab8_redo.c: 361: int nStep = get_full_ADC();
  1642  0019CC  ECD4  F012         	call	_get_full_ADC	;wreg free
  1643  0019D0  C00F  F0B1         	movff	?_get_full_ADC,main@nStep
  1644  0019D4  C010  F0B2         	movff	?_get_full_ADC+1,main@nStep+1
  1645                           
  1646                           ;Lab8_redo.c: 362: volt = nStep * 5 /1024.0;
  1647  0019D8  C0B1  F00F         	movff	main@nStep,___wmul@multiplier
  1648  0019DC  C0B2  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1649  0019E0  0E00               	movlw	0
  1650  0019E2  6E12               	movwf	___wmul@multiplicand+1,c
  1651  0019E4  0E05               	movlw	5
  1652  0019E6  6E11               	movwf	___wmul@multiplicand,c
  1653  0019E8  ECAD  F012         	call	___wmul	;wreg free
  1654  0019EC  C00F  F017         	movff	?___wmul,___awtoft@c
  1655  0019F0  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1656  0019F4  EC2E  F012         	call	___awtoft	;wreg free
  1657  0019F8  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  1658  0019FC  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  1659  001A00  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  1660  001A04  0E00               	movlw	0
  1661  001A06  6E1E               	movwf	___ftdiv@f2,c
  1662  001A08  0E80               	movlw	128
  1663  001A0A  6E1F               	movwf	___ftdiv@f2+1,c
  1664  001A0C  0E44               	movlw	68
  1665  001A0E  6E20               	movwf	___ftdiv@f2+2,c
  1666  001A10  ECCA  F00A         	call	___ftdiv	;wreg free
  1667  001A14  C01B  F042         	movff	?___ftdiv,_volt
  1668  001A18  C01C  F043         	movff	?___ftdiv+1,_volt+1
  1669  001A1C  C01D  F044         	movff	?___ftdiv+2,_volt+2
  1670                           
  1671                           ;Lab8_redo.c: 363: SW_MODE = volt < 2.5 ? 1:0;
  1672  001A20  C042  F00F         	movff	_volt,___ftge@ff1
  1673  001A24  C043  F010         	movff	_volt+1,___ftge@ff1+1
  1674  001A28  C044  F011         	movff	_volt+2,___ftge@ff1+2
  1675  001A2C  0E00               	movlw	0
  1676  001A2E  6E12               	movwf	___ftge@ff2,c
  1677  001A30  0E20               	movlw	32
  1678  001A32  6E13               	movwf	___ftge@ff2+1,c
  1679  001A34  0E40               	movlw	64
  1680  001A36  6E14               	movwf	___ftge@ff2+2,c
  1681  001A38  EC8A  F00D         	call	___ftge	;wreg free
  1682  001A3C  B0D8               	btfsc	status,0,c
  1683  001A3E  D002               	goto	u4100
  1684  001A40  0E01               	movlw	1
  1685  001A42  D001               	goto	u4110
  1686  001A44                     u4100:
  1687  001A44  0E00               	movlw	0
  1688  001A46                     u4110:
  1689  001A46  6E53               	movwf	_SW_MODE,c
  1690                           
  1691                           ;Lab8_redo.c: 387: if (SW_MODE)
  1692  001A48  5053               	movf	_SW_MODE,w,c
  1693  001A4A  B4D8               	btfsc	status,2,c
  1694  001A4C  D003               	goto	l5678
  1695                           
  1696                           ;Lab8_redo.c: 388: {
  1697                           ;Lab8_redo.c: 389: Day_Mode();
  1698  001A4E  EC11  F00C         	call	_Day_Mode	;wreg free
  1699                           
  1700                           ;Lab8_redo.c: 390: }
  1701  001A52  D003               	goto	l5680
  1702  001A54                     l5678:
  1703                           
  1704                           ;Lab8_redo.c: 391: else
  1705                           ;Lab8_redo.c: 392: {
  1706                           ;Lab8_redo.c: 393: Night_Mode();
  1707  001A54  EC37  F00D         	call	_Night_Mode	;wreg free
  1708  001A58  D000               	goto	l5680
  1709  001A5A                     l5680:
  1710                           
  1711                           ;Lab8_redo.c: 394: }
  1712                           ;Lab8_redo.c: 396: if(FLASHING_REQUEST == 1)
  1713  001A5A  044E               	decf	_FLASHING_REQUEST,w,c
  1714  001A5C  A4D8               	btfss	status,2,c
  1715  001A5E  D7B6               	goto	l5668
  1716                           
  1717                           ;Lab8_redo.c: 397: {
  1718                           ;Lab8_redo.c: 398: FLASHING_REQUEST = 0;
  1719  001A60  0E00               	movlw	0
  1720  001A62  6E4E               	movwf	_FLASHING_REQUEST,c
  1721                           
  1722                           ;Lab8_redo.c: 399: Do_Flashing();
  1723  001A64  EC97  F010         	call	_Do_Flashing	;wreg free
  1724  001A68  D7B1               	goto	l5668
  1725  001A6A  EF0C  F000         	goto	start
  1726  001A6E                     __end_of_main:
  1727                           	opt stack 0
  1728                           tblptru	equ	0xFF8
  1729                           tblptrh	equ	0xFF7
  1730                           tblptrl	equ	0xFF6
  1731                           tablat	equ	0xFF5
  1732                           postinc0	equ	0xFEE
  1733                           wreg	equ	0xFE8
  1734                           postdec1	equ	0xFE5
  1735                           fsr1l	equ	0xFE1
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _init_IO *****************
  1739 ;; Defined at:
  1740 ;;		line 405 in file "Lab8_redo.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;		None               void
  1747 ;; Registers used:
  1748 ;;		wreg, status,2
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;Total ram usage:        0 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    2
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_main
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text1
  1769  00264C                     __ptext1:
  1770                           	opt stack 0
  1771  00264C                     _init_IO:
  1772                           	opt stack 28
  1773                           
  1774                           ;Lab8_redo.c: 407: TRISA = 0xFF;
  1775                           
  1776                           ;incstack = 0
  1777  00264C  6892               	setf	3986,c	;volatile
  1778                           
  1779                           ;Lab8_redo.c: 408: TRISB = 0x47;
  1780  00264E  0E47               	movlw	71
  1781  002650  6E93               	movwf	3987,c	;volatile
  1782                           
  1783                           ;Lab8_redo.c: 409: TRISC = 0x00;
  1784  002652  0E00               	movlw	0
  1785  002654  6E94               	movwf	3988,c	;volatile
  1786                           
  1787                           ;Lab8_redo.c: 410: TRISD = 0x00;
  1788  002656  0E00               	movlw	0
  1789  002658  6E95               	movwf	3989,c	;volatile
  1790                           
  1791                           ;Lab8_redo.c: 411: TRISE = 0x00;
  1792  00265A  0E00               	movlw	0
  1793  00265C  6E96               	movwf	3990,c	;volatile
  1794  00265E  0012               	return		;funcret
  1795  002660                     __end_of_init_IO:
  1796                           	opt stack 0
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1l	equ	0xFE1
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function _Night_Mode *****************
  1808 ;; Defined at:
  1809 ;;		line 607 in file "Lab8_redo.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;		None               void
  1816 ;; Registers used:
  1817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;Total ram usage:        0 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:   12
  1830 ;; This function calls:
  1831 ;;		_Set_EW
  1832 ;;		_Set_EW_LT
  1833 ;;		_Set_NS
  1834 ;;		_Set_NS_LT
  1835 ;;		_Wait_N_Seconds
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text2
  1842  001A6E                     __ptext2:
  1843                           	opt stack 0
  1844  001A6E                     _Night_Mode:
  1845                           	opt stack 18
  1846                           
  1847                           ;Lab8_redo.c: 609: MODE = 0;
  1848                           
  1849                           ;incstack = 0
  1850  001A6E  0E00               	movlw	0
  1851  001A70  6E46               	movwf	_MODE+1,c
  1852  001A72  0E00               	movlw	0
  1853  001A74  6E45               	movwf	_MODE,c
  1854                           
  1855                           ;Lab8_redo.c: 610: PORTBbits.RB7 = 0;
  1856  001A76  9E81               	bcf	3969,7,c	;volatile
  1857                           
  1858                           ;Lab8_redo.c: 611: Act_Mode_Txt[0] = 'N';
  1859  001A78  0E4E               	movlw	78
  1860  001A7A  6E62               	movwf	_Act_Mode_Txt,c
  1861                           
  1862                           ;Lab8_redo.c: 613: Set_NS(2);
  1863  001A7C  0E02               	movlw	2
  1864  001A7E  EC84  F011         	call	_Set_NS
  1865                           
  1866                           ;Lab8_redo.c: 615: Set_EW(1);
  1867  001A82  0E01               	movlw	1
  1868  001A84  ECCC  F011         	call	_Set_EW
  1869                           
  1870                           ;Lab8_redo.c: 616: Set_NS_LT(1);
  1871  001A88  0E01               	movlw	1
  1872  001A8A  EC60  F011         	call	_Set_NS_LT
  1873                           
  1874                           ;Lab8_redo.c: 617: Set_EW_LT(1);
  1875  001A8E  0E01               	movlw	1
  1876  001A90  ECA8  F011         	call	_Set_EW_LT
  1877                           
  1878                           ;Lab8_redo.c: 619: Wait_N_Seconds(6);
  1879  001A94  0E06               	movlw	6
  1880  001A96  EC4C  F012         	call	_Wait_N_Seconds
  1881                           
  1882                           ;Lab8_redo.c: 621: Set_NS(3);
  1883  001A9A  0E03               	movlw	3
  1884  001A9C  EC84  F011         	call	_Set_NS
  1885                           
  1886                           ;Lab8_redo.c: 622: Wait_N_Seconds(3);
  1887  001AA0  0E03               	movlw	3
  1888  001AA2  EC4C  F012         	call	_Wait_N_Seconds
  1889                           
  1890                           ;Lab8_redo.c: 624: Set_NS(1);
  1891  001AA6  0E01               	movlw	1
  1892  001AA8  EC84  F011         	call	_Set_NS
  1893                           
  1894                           ;Lab8_redo.c: 627: if (PORTAbits.RA5 == 1)
  1895  001AAC  AA80               	btfss	3968,5,c	;volatile
  1896  001AAE  D010               	goto	l5386
  1897                           
  1898                           ;Lab8_redo.c: 628: {
  1899                           ;Lab8_redo.c: 629: Set_EW_LT(2);
  1900  001AB0  0E02               	movlw	2
  1901  001AB2  ECA8  F011         	call	_Set_EW_LT
  1902                           
  1903                           ;Lab8_redo.c: 630: Wait_N_Seconds(6);
  1904  001AB6  0E06               	movlw	6
  1905  001AB8  EC4C  F012         	call	_Wait_N_Seconds
  1906                           
  1907                           ;Lab8_redo.c: 632: Set_EW_LT(3);
  1908  001ABC  0E03               	movlw	3
  1909  001ABE  ECA8  F011         	call	_Set_EW_LT
  1910                           
  1911                           ;Lab8_redo.c: 633: Wait_N_Seconds(3);
  1912  001AC2  0E03               	movlw	3
  1913  001AC4  EC4C  F012         	call	_Wait_N_Seconds
  1914                           
  1915                           ;Lab8_redo.c: 635: Set_EW_LT(1);
  1916  001AC8  0E01               	movlw	1
  1917  001ACA  ECA8  F011         	call	_Set_EW_LT
  1918  001ACE  D000               	goto	l5386
  1919  001AD0                     l5386:
  1920                           
  1921                           ;Lab8_redo.c: 637: }
  1922                           ;Lab8_redo.c: 639: Set_EW(2);
  1923  001AD0  0E02               	movlw	2
  1924  001AD2  ECCC  F011         	call	_Set_EW
  1925                           
  1926                           ;Lab8_redo.c: 640: Wait_N_Seconds(6);
  1927  001AD6  0E06               	movlw	6
  1928  001AD8  EC4C  F012         	call	_Wait_N_Seconds
  1929                           
  1930                           ;Lab8_redo.c: 642: Set_EW(3);
  1931  001ADC  0E03               	movlw	3
  1932  001ADE  ECCC  F011         	call	_Set_EW
  1933                           
  1934                           ;Lab8_redo.c: 643: Wait_N_Seconds(3);
  1935  001AE2  0E03               	movlw	3
  1936  001AE4  EC4C  F012         	call	_Wait_N_Seconds
  1937                           
  1938                           ;Lab8_redo.c: 645: Set_EW(1);
  1939  001AE8  0E01               	movlw	1
  1940  001AEA  ECCC  F011         	call	_Set_EW
  1941                           
  1942                           ;Lab8_redo.c: 649: if ( PORTAbits.RA4 == 1 )
  1943  001AEE  A880               	btfss	3968,4,c	;volatile
  1944  001AF0  D010               	goto	l487
  1945                           
  1946                           ;Lab8_redo.c: 650: {
  1947                           ;Lab8_redo.c: 651: Set_NS_LT(2);
  1948  001AF2  0E02               	movlw	2
  1949  001AF4  EC60  F011         	call	_Set_NS_LT
  1950                           
  1951                           ;Lab8_redo.c: 652: Wait_N_Seconds(8);
  1952  001AF8  0E08               	movlw	8
  1953  001AFA  EC4C  F012         	call	_Wait_N_Seconds
  1954                           
  1955                           ;Lab8_redo.c: 654: Set_NS_LT(3);
  1956  001AFE  0E03               	movlw	3
  1957  001B00  EC60  F011         	call	_Set_NS_LT
  1958                           
  1959                           ;Lab8_redo.c: 655: Wait_N_Seconds(3);
  1960  001B04  0E03               	movlw	3
  1961  001B06  EC4C  F012         	call	_Wait_N_Seconds
  1962                           
  1963                           ;Lab8_redo.c: 657: Set_NS_LT(1);
  1964  001B0A  0E01               	movlw	1
  1965  001B0C  EC60  F011         	call	_Set_NS_LT
  1966  001B10  D000               	goto	l487
  1967  001B12                     l487:
  1968  001B12  0012               	return		;funcret
  1969  001B14                     __end_of_Night_Mode:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           postinc0	equ	0xFEE
  1976                           wreg	equ	0xFE8
  1977                           postdec1	equ	0xFE5
  1978                           fsr1l	equ	0xFE1
  1979                           status	equ	0xFD8
  1980                           
  1981 ;; *************** function _Initialize_Screen *****************
  1982 ;; Defined at:
  1983 ;;		line 174 in file "Lab8_redo.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;		None
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;		None
  1988 ;; Return value:  Size  Location     Type
  1989 ;;		None               void
  1990 ;; Registers used:
  1991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;Total ram usage:        0 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    9
  2004 ;; This function calls:
  2005 ;;		_LCD_Reset
  2006 ;;		_TFT_GreenTab_Initialize
  2007 ;;		_drawCircle
  2008 ;;		_drawRect
  2009 ;;		_drawtext
  2010 ;;		_fillCircle
  2011 ;;		_fillScreen
  2012 ;;		_strcpy
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text3
  2019  00001C                     __ptext3:
  2020                           	opt stack 0
  2021  00001C                     _Initialize_Screen:
  2022                           	opt stack 21
  2023                           
  2024                           ;Lab8_redo.c: 176: LCD_Reset();
  2025                           
  2026                           ;incstack = 0
  2027  00001C  EC44  F013         	call	_LCD_Reset	;wreg free
  2028                           
  2029                           ;Lab8_redo.c: 177: TFT_GreenTab_Initialize();
  2030  000020  EC98  F012         	call	_TFT_GreenTab_Initialize	;wreg free
  2031                           
  2032                           ;Lab8_redo.c: 178: fillScreen(0x0000);
  2033  000024  0E00               	movlw	0
  2034  000026  6E23               	movwf	fillScreen@color+1,c
  2035  000028  0E00               	movlw	0
  2036  00002A  6E22               	movwf	fillScreen@color,c
  2037  00002C  ECE7  F012         	call	_fillScreen	;wreg free
  2038                           
  2039                           ;Lab8_redo.c: 181: txt = buffer;
  2040  000030  0E86               	movlw	low _buffer
  2041  000032  6E49               	movwf	_txt,c
  2042  000034  0E00               	movlw	high _buffer
  2043  000036  6E4A               	movwf	_txt+1,c
  2044                           
  2045                           ;Lab8_redo.c: 182: strcpy(txt, "ECE3301L Fall 21-S3");
  2046  000038  C049  F00F         	movff	_txt,strcpy@to
  2047  00003C  C04A  F010         	movff	_txt+1,strcpy@to+1
  2048  000040  0EAD               	movlw	low STR_1
  2049  000042  6E11               	movwf	strcpy@from,c
  2050  000044  0EFF               	movlw	high STR_1
  2051  000046  6E12               	movwf	strcpy@from+1,c
  2052  000048  EC67  F012         	call	_strcpy	;wreg free
  2053                           
  2054                           ;Lab8_redo.c: 183: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2055  00004C  0E02               	movlw	2
  2056  00004E  6E37               	movwf	drawtext@y,c
  2057  000050  C049  F038         	movff	_txt,drawtext@_text
  2058  000054  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2059  000058  0EFF               	movlw	255
  2060  00005A  6E3B               	movwf	drawtext@color+1,c
  2061  00005C  683A               	setf	drawtext@color,c
  2062  00005E  0E00               	movlw	0
  2063  000060  6E3D               	movwf	drawtext@bg+1,c
  2064  000062  0E00               	movlw	0
  2065  000064  6E3C               	movwf	drawtext@bg,c
  2066  000066  0E01               	movlw	1
  2067  000068  6E3E               	movwf	drawtext@size,c
  2068  00006A  0E02               	movlw	2
  2069  00006C  ECCC  F009         	call	_drawtext
  2070                           
  2071                           ;Lab8_redo.c: 186: strcpy(txt, "Mode:");
  2072  000070  C049  F00F         	movff	_txt,strcpy@to
  2073  000074  C04A  F010         	movff	_txt+1,strcpy@to+1
  2074  000078  0EE5               	movlw	low STR_2
  2075  00007A  6E11               	movwf	strcpy@from,c
  2076  00007C  0EFF               	movlw	high STR_2
  2077  00007E  6E12               	movwf	strcpy@from+1,c
  2078  000080  EC67  F012         	call	_strcpy	;wreg free
  2079                           
  2080                           ;Lab8_redo.c: 187: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2081  000084  0E0A               	movlw	10
  2082  000086  6E37               	movwf	drawtext@y,c
  2083  000088  C049  F038         	movff	_txt,drawtext@_text
  2084  00008C  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2085  000090  0EFF               	movlw	255
  2086  000092  6E3B               	movwf	drawtext@color+1,c
  2087  000094  683A               	setf	drawtext@color,c
  2088  000096  0E00               	movlw	0
  2089  000098  6E3D               	movwf	drawtext@bg+1,c
  2090  00009A  0E00               	movlw	0
  2091  00009C  6E3C               	movwf	drawtext@bg,c
  2092  00009E  0E01               	movlw	1
  2093  0000A0  6E3E               	movwf	drawtext@size,c
  2094  0000A2  0E02               	movlw	2
  2095  0000A4  ECCC  F009         	call	_drawtext
  2096                           
  2097                           ;Lab8_redo.c: 188: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2098  0000A8  0E0A               	movlw	10
  2099  0000AA  6E37               	movwf	drawtext@y,c
  2100  0000AC  0E62               	movlw	low _Act_Mode_Txt
  2101  0000AE  6E38               	movwf	drawtext@_text,c
  2102  0000B0  0E00               	movlw	high _Act_Mode_Txt
  2103  0000B2  6E39               	movwf	drawtext@_text+1,c
  2104  0000B4  0EFF               	movlw	255
  2105  0000B6  6E3B               	movwf	drawtext@color+1,c
  2106  0000B8  683A               	setf	drawtext@color,c
  2107  0000BA  0E00               	movlw	0
  2108  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2109  0000BE  0E00               	movlw	0
  2110  0000C0  6E3C               	movwf	drawtext@bg,c
  2111  0000C2  0E01               	movlw	1
  2112  0000C4  6E3E               	movwf	drawtext@size,c
  2113  0000C6  0E23               	movlw	35
  2114  0000C8  ECCC  F009         	call	_drawtext
  2115                           
  2116                           ;Lab8_redo.c: 191: strcpy(txt, "FR:");
  2117  0000CC  C049  F00F         	movff	_txt,strcpy@to
  2118  0000D0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2119  0000D4  0EEB               	movlw	low STR_3
  2120  0000D6  6E11               	movwf	strcpy@from,c
  2121  0000D8  0EFF               	movlw	high STR_3
  2122  0000DA  6E12               	movwf	strcpy@from+1,c
  2123  0000DC  EC67  F012         	call	_strcpy	;wreg free
  2124                           
  2125                           ;Lab8_redo.c: 192: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2126  0000E0  0E0A               	movlw	10
  2127  0000E2  6E37               	movwf	drawtext@y,c
  2128  0000E4  C049  F038         	movff	_txt,drawtext@_text
  2129  0000E8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2130  0000EC  0EFF               	movlw	255
  2131  0000EE  6E3B               	movwf	drawtext@color+1,c
  2132  0000F0  683A               	setf	drawtext@color,c
  2133  0000F2  0E00               	movlw	0
  2134  0000F4  6E3D               	movwf	drawtext@bg+1,c
  2135  0000F6  0E00               	movlw	0
  2136  0000F8  6E3C               	movwf	drawtext@bg,c
  2137  0000FA  0E01               	movlw	1
  2138  0000FC  6E3E               	movwf	drawtext@size,c
  2139  0000FE  0E32               	movlw	50
  2140  000100  ECCC  F009         	call	_drawtext
  2141                           
  2142                           ;Lab8_redo.c: 193: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2143  000104  0E0A               	movlw	10
  2144  000106  6E37               	movwf	drawtext@y,c
  2145  000108  0E64               	movlw	low _FlashingR_Txt
  2146  00010A  6E38               	movwf	drawtext@_text,c
  2147  00010C  0E00               	movlw	high _FlashingR_Txt
  2148  00010E  6E39               	movwf	drawtext@_text+1,c
  2149  000110  0EFF               	movlw	255
  2150  000112  6E3B               	movwf	drawtext@color+1,c
  2151  000114  683A               	setf	drawtext@color,c
  2152  000116  0E00               	movlw	0
  2153  000118  6E3D               	movwf	drawtext@bg+1,c
  2154  00011A  0E00               	movlw	0
  2155  00011C  6E3C               	movwf	drawtext@bg,c
  2156  00011E  0E01               	movlw	1
  2157  000120  6E3E               	movwf	drawtext@size,c
  2158  000122  0E46               	movlw	70
  2159  000124  ECCC  F009         	call	_drawtext
  2160                           
  2161                           ;Lab8_redo.c: 196: strcpy(txt, "FS:");
  2162  000128  C049  F00F         	movff	_txt,strcpy@to
  2163  00012C  C04A  F010         	movff	_txt+1,strcpy@to+1
  2164  000130  0EEF               	movlw	low STR_4
  2165  000132  6E11               	movwf	strcpy@from,c
  2166  000134  0EFF               	movlw	high STR_4
  2167  000136  6E12               	movwf	strcpy@from+1,c
  2168  000138  EC67  F012         	call	_strcpy	;wreg free
  2169                           
  2170                           ;Lab8_redo.c: 197: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2171  00013C  0E0A               	movlw	10
  2172  00013E  6E37               	movwf	drawtext@y,c
  2173  000140  C049  F038         	movff	_txt,drawtext@_text
  2174  000144  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2175  000148  0EFF               	movlw	255
  2176  00014A  6E3B               	movwf	drawtext@color+1,c
  2177  00014C  683A               	setf	drawtext@color,c
  2178  00014E  0E00               	movlw	0
  2179  000150  6E3D               	movwf	drawtext@bg+1,c
  2180  000152  0E00               	movlw	0
  2181  000154  6E3C               	movwf	drawtext@bg,c
  2182  000156  0E01               	movlw	1
  2183  000158  6E3E               	movwf	drawtext@size,c
  2184  00015A  0E50               	movlw	80
  2185  00015C  ECCC  F009         	call	_drawtext
  2186                           
  2187                           ;Lab8_redo.c: 198: drawtext(100, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2188  000160  0E0A               	movlw	10
  2189  000162  6E37               	movwf	drawtext@y,c
  2190  000164  0E64               	movlw	low _FlashingR_Txt
  2191  000166  6E38               	movwf	drawtext@_text,c
  2192  000168  0E00               	movlw	high _FlashingR_Txt
  2193  00016A  6E39               	movwf	drawtext@_text+1,c
  2194  00016C  0EFF               	movlw	255
  2195  00016E  6E3B               	movwf	drawtext@color+1,c
  2196  000170  683A               	setf	drawtext@color,c
  2197  000172  0E00               	movlw	0
  2198  000174  6E3D               	movwf	drawtext@bg+1,c
  2199  000176  0E00               	movlw	0
  2200  000178  6E3C               	movwf	drawtext@bg,c
  2201  00017A  0E01               	movlw	1
  2202  00017C  6E3E               	movwf	drawtext@size,c
  2203  00017E  0E64               	movlw	100
  2204  000180  ECCC  F009         	call	_drawtext
  2205                           
  2206                           ;Lab8_redo.c: 201: strcpy(txt, "*");
  2207  000184  C049  F00F         	movff	_txt,strcpy@to
  2208  000188  C04A  F010         	movff	_txt+1,strcpy@to+1
  2209  00018C  0EFD               	movlw	low STR_5
  2210  00018E  6E11               	movwf	strcpy@from,c
  2211  000190  0EFF               	movlw	high STR_5
  2212  000192  6E12               	movwf	strcpy@from+1,c
  2213  000194  EC67  F012         	call	_strcpy	;wreg free
  2214                           
  2215                           ;Lab8_redo.c: 202: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2216  000198  0E0A               	movlw	10
  2217  00019A  6E37               	movwf	drawtext@y,c
  2218  00019C  C049  F038         	movff	_txt,drawtext@_text
  2219  0001A0  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2220  0001A4  0EFF               	movlw	255
  2221  0001A6  6E3B               	movwf	drawtext@color+1,c
  2222  0001A8  683A               	setf	drawtext@color,c
  2223  0001AA  0E00               	movlw	0
  2224  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2225  0001AE  0E00               	movlw	0
  2226  0001B0  6E3C               	movwf	drawtext@bg,c
  2227  0001B2  0E01               	movlw	1
  2228  0001B4  6E3E               	movwf	drawtext@size,c
  2229  0001B6  0E78               	movlw	120
  2230  0001B8  ECCC  F009         	call	_drawtext
  2231                           
  2232                           ;Lab8_redo.c: 205: strcpy(txt, "NORTH/SOUTH");
  2233  0001BC  C049  F00F         	movff	_txt,strcpy@to
  2234  0001C0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2235  0001C4  0EC1               	movlw	low STR_6
  2236  0001C6  6E11               	movwf	strcpy@from,c
  2237  0001C8  0EFF               	movlw	high STR_6
  2238  0001CA  6E12               	movwf	strcpy@from+1,c
  2239  0001CC  EC67  F012         	call	_strcpy	;wreg free
  2240                           
  2241                           ;Lab8_redo.c: 206: drawtext (30, 20 , txt, 0x001F, 0x0000, 1);
  2242  0001D0  0E14               	movlw	20
  2243  0001D2  6E37               	movwf	drawtext@y,c
  2244  0001D4  C049  F038         	movff	_txt,drawtext@_text
  2245  0001D8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2246  0001DC  0E00               	movlw	0
  2247  0001DE  6E3B               	movwf	drawtext@color+1,c
  2248  0001E0  0E1F               	movlw	31
  2249  0001E2  6E3A               	movwf	drawtext@color,c
  2250  0001E4  0E00               	movlw	0
  2251  0001E6  6E3D               	movwf	drawtext@bg+1,c
  2252  0001E8  0E00               	movlw	0
  2253  0001EA  6E3C               	movwf	drawtext@bg,c
  2254  0001EC  0E01               	movlw	1
  2255  0001EE  6E3E               	movwf	drawtext@size,c
  2256  0001F0  0E1E               	movlw	30
  2257  0001F2  ECCC  F009         	call	_drawtext
  2258                           
  2259                           ;Lab8_redo.c: 207: drawRect (30, 20 + 15-8, 60, 18, 0x001F);
  2260  0001F6  0E00               	movlw	0
  2261  0001F8  6E22               	movwf	drawRect@x+1,c
  2262  0001FA  0E1E               	movlw	30
  2263  0001FC  6E21               	movwf	drawRect@x,c
  2264  0001FE  0E00               	movlw	0
  2265  000200  6E24               	movwf	drawRect@y+1,c
  2266  000202  0E1B               	movlw	27
  2267  000204  6E23               	movwf	drawRect@y,c
  2268  000206  0E00               	movlw	0
  2269  000208  6E26               	movwf	drawRect@w+1,c
  2270  00020A  0E3C               	movlw	60
  2271  00020C  6E25               	movwf	drawRect@w,c
  2272  00020E  0E00               	movlw	0
  2273  000210  6E28               	movwf	drawRect@h+1,c
  2274  000212  0E12               	movlw	18
  2275  000214  6E27               	movwf	drawRect@h,c
  2276  000216  0E00               	movlw	0
  2277  000218  6E2A               	movwf	drawRect@color+1,c
  2278  00021A  0E1F               	movlw	31
  2279  00021C  6E29               	movwf	drawRect@color,c
  2280  00021E  EC33  F010         	call	_drawRect	;wreg free
  2281                           
  2282                           ;Lab8_redo.c: 208: drawCircle(40, 20 + 15 , 7, 0xF800);
  2283  000222  0E00               	movlw	0
  2284  000224  6E1B               	movwf	drawCircle@x0+1,c
  2285  000226  0E28               	movlw	40
  2286  000228  6E1A               	movwf	drawCircle@x0,c
  2287  00022A  0E00               	movlw	0
  2288  00022C  6E1D               	movwf	drawCircle@y0+1,c
  2289  00022E  0E23               	movlw	35
  2290  000230  6E1C               	movwf	drawCircle@y0,c
  2291  000232  0E00               	movlw	0
  2292  000234  6E1F               	movwf	drawCircle@r+1,c
  2293  000236  0E07               	movlw	7
  2294  000238  6E1E               	movwf	drawCircle@r,c
  2295  00023A  0EF8               	movlw	248
  2296  00023C  6E21               	movwf	drawCircle@color+1,c
  2297  00023E  0E00               	movlw	0
  2298  000240  6E20               	movwf	drawCircle@color,c
  2299  000242  EC61  F006         	call	_drawCircle	;wreg free
  2300                           
  2301                           ;Lab8_redo.c: 209: drawCircle(60, 20 + 15 , 7, 0xFFE0);
  2302  000246  0E00               	movlw	0
  2303  000248  6E1B               	movwf	drawCircle@x0+1,c
  2304  00024A  0E3C               	movlw	60
  2305  00024C  6E1A               	movwf	drawCircle@x0,c
  2306  00024E  0E00               	movlw	0
  2307  000250  6E1D               	movwf	drawCircle@y0+1,c
  2308  000252  0E23               	movlw	35
  2309  000254  6E1C               	movwf	drawCircle@y0,c
  2310  000256  0E00               	movlw	0
  2311  000258  6E1F               	movwf	drawCircle@r+1,c
  2312  00025A  0E07               	movlw	7
  2313  00025C  6E1E               	movwf	drawCircle@r,c
  2314  00025E  0EFF               	movlw	255
  2315  000260  6E21               	movwf	drawCircle@color+1,c
  2316  000262  0EE0               	movlw	224
  2317  000264  6E20               	movwf	drawCircle@color,c
  2318  000266  EC61  F006         	call	_drawCircle	;wreg free
  2319                           
  2320                           ;Lab8_redo.c: 210: fillCircle(80, 20 + 15 , 7, 0x07E0);
  2321  00026A  0E00               	movlw	0
  2322  00026C  6E3A               	movwf	fillCircle@x0+1,c
  2323  00026E  0E50               	movlw	80
  2324  000270  6E39               	movwf	fillCircle@x0,c
  2325  000272  0E00               	movlw	0
  2326  000274  6E3C               	movwf	fillCircle@y0+1,c
  2327  000276  0E23               	movlw	35
  2328  000278  6E3B               	movwf	fillCircle@y0,c
  2329  00027A  0E00               	movlw	0
  2330  00027C  6E3E               	movwf	fillCircle@r+1,c
  2331  00027E  0E07               	movlw	7
  2332  000280  6E3D               	movwf	fillCircle@r,c
  2333  000282  0E07               	movlw	7
  2334  000284  6E40               	movwf	fillCircle@color+1,c
  2335  000286  0EE0               	movlw	224
  2336  000288  6E3F               	movwf	fillCircle@color,c
  2337  00028A  ECEB  F010         	call	_fillCircle	;wreg free
  2338                           
  2339                           ;Lab8_redo.c: 211: drawtext (100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  2340  00028E  0E1E               	movlw	30
  2341  000290  6E37               	movwf	drawtext@y,c
  2342  000292  0E5F               	movlw	low _NS_Count
  2343  000294  6E38               	movwf	drawtext@_text,c
  2344  000296  0E00               	movlw	high _NS_Count
  2345  000298  6E39               	movwf	drawtext@_text+1,c
  2346  00029A  0E00               	movlw	0
  2347  00029C  6E3B               	movwf	drawtext@color+1,c
  2348  00029E  0E1F               	movlw	31
  2349  0002A0  6E3A               	movwf	drawtext@color,c
  2350  0002A2  0E00               	movlw	0
  2351  0002A4  6E3D               	movwf	drawtext@bg+1,c
  2352  0002A6  0E00               	movlw	0
  2353  0002A8  6E3C               	movwf	drawtext@bg,c
  2354  0002AA  0E02               	movlw	2
  2355  0002AC  6E3E               	movwf	drawtext@size,c
  2356  0002AE  0E64               	movlw	100
  2357  0002B0  ECCC  F009         	call	_drawtext
  2358                           
  2359                           ;Lab8_redo.c: 214: strcpy(txt, "N/S LT");
  2360  0002B4  C049  F00F         	movff	_txt,strcpy@to
  2361  0002B8  C04A  F010         	movff	_txt+1,strcpy@to+1
  2362  0002BC  0ED7               	movlw	low STR_7
  2363  0002BE  6E11               	movwf	strcpy@from,c
  2364  0002C0  0EFF               	movlw	high STR_7
  2365  0002C2  6E12               	movwf	strcpy@from+1,c
  2366  0002C4  EC67  F012         	call	_strcpy	;wreg free
  2367                           
  2368                           ;Lab8_redo.c: 215: drawtext (30, 50, txt, 0xF81F, 0x0000, 1);
  2369  0002C8  0E32               	movlw	50
  2370  0002CA  6E37               	movwf	drawtext@y,c
  2371  0002CC  C049  F038         	movff	_txt,drawtext@_text
  2372  0002D0  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2373  0002D4  0EF8               	movlw	248
  2374  0002D6  6E3B               	movwf	drawtext@color+1,c
  2375  0002D8  0E1F               	movlw	31
  2376  0002DA  6E3A               	movwf	drawtext@color,c
  2377  0002DC  0E00               	movlw	0
  2378  0002DE  6E3D               	movwf	drawtext@bg+1,c
  2379  0002E0  0E00               	movlw	0
  2380  0002E2  6E3C               	movwf	drawtext@bg,c
  2381  0002E4  0E01               	movlw	1
  2382  0002E6  6E3E               	movwf	drawtext@size,c
  2383  0002E8  0E1E               	movlw	30
  2384  0002EA  ECCC  F009         	call	_drawtext
  2385                           
  2386                           ;Lab8_redo.c: 216: drawRect (30, 50 + 15-8, 60, 18, 0xF81F);
  2387  0002EE  0E00               	movlw	0
  2388  0002F0  6E22               	movwf	drawRect@x+1,c
  2389  0002F2  0E1E               	movlw	30
  2390  0002F4  6E21               	movwf	drawRect@x,c
  2391  0002F6  0E00               	movlw	0
  2392  0002F8  6E24               	movwf	drawRect@y+1,c
  2393  0002FA  0E39               	movlw	57
  2394  0002FC  6E23               	movwf	drawRect@y,c
  2395  0002FE  0E00               	movlw	0
  2396  000300  6E26               	movwf	drawRect@w+1,c
  2397  000302  0E3C               	movlw	60
  2398  000304  6E25               	movwf	drawRect@w,c
  2399  000306  0E00               	movlw	0
  2400  000308  6E28               	movwf	drawRect@h+1,c
  2401  00030A  0E12               	movlw	18
  2402  00030C  6E27               	movwf	drawRect@h,c
  2403  00030E  0EF8               	movlw	248
  2404  000310  6E2A               	movwf	drawRect@color+1,c
  2405  000312  0E1F               	movlw	31
  2406  000314  6E29               	movwf	drawRect@color,c
  2407  000316  EC33  F010         	call	_drawRect	;wreg free
  2408                           
  2409                           ;Lab8_redo.c: 217: fillCircle(40, 50 + 15, 7, 0xF800);
  2410  00031A  0E00               	movlw	0
  2411  00031C  6E3A               	movwf	fillCircle@x0+1,c
  2412  00031E  0E28               	movlw	40
  2413  000320  6E39               	movwf	fillCircle@x0,c
  2414  000322  0E00               	movlw	0
  2415  000324  6E3C               	movwf	fillCircle@y0+1,c
  2416  000326  0E41               	movlw	65
  2417  000328  6E3B               	movwf	fillCircle@y0,c
  2418  00032A  0E00               	movlw	0
  2419  00032C  6E3E               	movwf	fillCircle@r+1,c
  2420  00032E  0E07               	movlw	7
  2421  000330  6E3D               	movwf	fillCircle@r,c
  2422  000332  0EF8               	movlw	248
  2423  000334  6E40               	movwf	fillCircle@color+1,c
  2424  000336  0E00               	movlw	0
  2425  000338  6E3F               	movwf	fillCircle@color,c
  2426  00033A  ECEB  F010         	call	_fillCircle	;wreg free
  2427                           
  2428                           ;Lab8_redo.c: 218: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2429  00033E  0E00               	movlw	0
  2430  000340  6E1B               	movwf	drawCircle@x0+1,c
  2431  000342  0E3C               	movlw	60
  2432  000344  6E1A               	movwf	drawCircle@x0,c
  2433  000346  0E00               	movlw	0
  2434  000348  6E1D               	movwf	drawCircle@y0+1,c
  2435  00034A  0E41               	movlw	65
  2436  00034C  6E1C               	movwf	drawCircle@y0,c
  2437  00034E  0E00               	movlw	0
  2438  000350  6E1F               	movwf	drawCircle@r+1,c
  2439  000352  0E07               	movlw	7
  2440  000354  6E1E               	movwf	drawCircle@r,c
  2441  000356  0EFF               	movlw	255
  2442  000358  6E21               	movwf	drawCircle@color+1,c
  2443  00035A  0EE0               	movlw	224
  2444  00035C  6E20               	movwf	drawCircle@color,c
  2445  00035E  EC61  F006         	call	_drawCircle	;wreg free
  2446                           
  2447                           ;Lab8_redo.c: 219: drawCircle(80, 50 + 15, 7, 0x07E0);
  2448  000362  0E00               	movlw	0
  2449  000364  6E1B               	movwf	drawCircle@x0+1,c
  2450  000366  0E50               	movlw	80
  2451  000368  6E1A               	movwf	drawCircle@x0,c
  2452  00036A  0E00               	movlw	0
  2453  00036C  6E1D               	movwf	drawCircle@y0+1,c
  2454  00036E  0E41               	movlw	65
  2455  000370  6E1C               	movwf	drawCircle@y0,c
  2456  000372  0E00               	movlw	0
  2457  000374  6E1F               	movwf	drawCircle@r+1,c
  2458  000376  0E07               	movlw	7
  2459  000378  6E1E               	movwf	drawCircle@r,c
  2460  00037A  0E07               	movlw	7
  2461  00037C  6E21               	movwf	drawCircle@color+1,c
  2462  00037E  0EE0               	movlw	224
  2463  000380  6E20               	movwf	drawCircle@color,c
  2464  000382  EC61  F006         	call	_drawCircle	;wreg free
  2465                           
  2466                           ;Lab8_redo.c: 220: drawtext (100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2467  000386  0E3C               	movlw	60
  2468  000388  6E37               	movwf	drawtext@y,c
  2469  00038A  0E5C               	movlw	low _NSLT_Count
  2470  00038C  6E38               	movwf	drawtext@_text,c
  2471  00038E  0E00               	movlw	high _NSLT_Count
  2472  000390  6E39               	movwf	drawtext@_text+1,c
  2473  000392  0EF8               	movlw	248
  2474  000394  6E3B               	movwf	drawtext@color+1,c
  2475  000396  0E1F               	movlw	31
  2476  000398  6E3A               	movwf	drawtext@color,c
  2477  00039A  0E00               	movlw	0
  2478  00039C  6E3D               	movwf	drawtext@bg+1,c
  2479  00039E  0E00               	movlw	0
  2480  0003A0  6E3C               	movwf	drawtext@bg,c
  2481  0003A2  0E02               	movlw	2
  2482  0003A4  6E3E               	movwf	drawtext@size,c
  2483  0003A6  0E64               	movlw	100
  2484  0003A8  ECCC  F009         	call	_drawtext
  2485                           
  2486                           ;Lab8_redo.c: 223: strcpy(txt, "EAST/WEST");
  2487  0003AC  C049  F00F         	movff	_txt,strcpy@to
  2488  0003B0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2489  0003B4  0ECD               	movlw	low STR_8
  2490  0003B6  6E11               	movwf	strcpy@from,c
  2491  0003B8  0EFF               	movlw	high STR_8
  2492  0003BA  6E12               	movwf	strcpy@from+1,c
  2493  0003BC  EC67  F012         	call	_strcpy	;wreg free
  2494                           
  2495                           ;Lab8_redo.c: 224: drawtext (30, 80, txt, 0x07FF, 0x0000, 1);
  2496  0003C0  0E50               	movlw	80
  2497  0003C2  6E37               	movwf	drawtext@y,c
  2498  0003C4  C049  F038         	movff	_txt,drawtext@_text
  2499  0003C8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2500  0003CC  0E07               	movlw	7
  2501  0003CE  6E3B               	movwf	drawtext@color+1,c
  2502  0003D0  683A               	setf	drawtext@color,c
  2503  0003D2  0E00               	movlw	0
  2504  0003D4  6E3D               	movwf	drawtext@bg+1,c
  2505  0003D6  0E00               	movlw	0
  2506  0003D8  6E3C               	movwf	drawtext@bg,c
  2507  0003DA  0E01               	movlw	1
  2508  0003DC  6E3E               	movwf	drawtext@size,c
  2509  0003DE  0E1E               	movlw	30
  2510  0003E0  ECCC  F009         	call	_drawtext
  2511                           
  2512                           ;Lab8_redo.c: 225: drawRect (30, 80 + 15-8, 60, 18, 0x07FF);
  2513  0003E4  0E00               	movlw	0
  2514  0003E6  6E22               	movwf	drawRect@x+1,c
  2515  0003E8  0E1E               	movlw	30
  2516  0003EA  6E21               	movwf	drawRect@x,c
  2517  0003EC  0E00               	movlw	0
  2518  0003EE  6E24               	movwf	drawRect@y+1,c
  2519  0003F0  0E57               	movlw	87
  2520  0003F2  6E23               	movwf	drawRect@y,c
  2521  0003F4  0E00               	movlw	0
  2522  0003F6  6E26               	movwf	drawRect@w+1,c
  2523  0003F8  0E3C               	movlw	60
  2524  0003FA  6E25               	movwf	drawRect@w,c
  2525  0003FC  0E00               	movlw	0
  2526  0003FE  6E28               	movwf	drawRect@h+1,c
  2527  000400  0E12               	movlw	18
  2528  000402  6E27               	movwf	drawRect@h,c
  2529  000404  0E07               	movlw	7
  2530  000406  6E2A               	movwf	drawRect@color+1,c
  2531  000408  6829               	setf	drawRect@color,c
  2532  00040A  EC33  F010         	call	_drawRect	;wreg free
  2533                           
  2534                           ;Lab8_redo.c: 226: fillCircle(40, 80 + 15, 7, 0xF800);
  2535  00040E  0E00               	movlw	0
  2536  000410  6E3A               	movwf	fillCircle@x0+1,c
  2537  000412  0E28               	movlw	40
  2538  000414  6E39               	movwf	fillCircle@x0,c
  2539  000416  0E00               	movlw	0
  2540  000418  6E3C               	movwf	fillCircle@y0+1,c
  2541  00041A  0E5F               	movlw	95
  2542  00041C  6E3B               	movwf	fillCircle@y0,c
  2543  00041E  0E00               	movlw	0
  2544  000420  6E3E               	movwf	fillCircle@r+1,c
  2545  000422  0E07               	movlw	7
  2546  000424  6E3D               	movwf	fillCircle@r,c
  2547  000426  0EF8               	movlw	248
  2548  000428  6E40               	movwf	fillCircle@color+1,c
  2549  00042A  0E00               	movlw	0
  2550  00042C  6E3F               	movwf	fillCircle@color,c
  2551  00042E  ECEB  F010         	call	_fillCircle	;wreg free
  2552                           
  2553                           ;Lab8_redo.c: 227: drawCircle(60, 80 + 15, 7, 0xFFE0);
  2554  000432  0E00               	movlw	0
  2555  000434  6E1B               	movwf	drawCircle@x0+1,c
  2556  000436  0E3C               	movlw	60
  2557  000438  6E1A               	movwf	drawCircle@x0,c
  2558  00043A  0E00               	movlw	0
  2559  00043C  6E1D               	movwf	drawCircle@y0+1,c
  2560  00043E  0E5F               	movlw	95
  2561  000440  6E1C               	movwf	drawCircle@y0,c
  2562  000442  0E00               	movlw	0
  2563  000444  6E1F               	movwf	drawCircle@r+1,c
  2564  000446  0E07               	movlw	7
  2565  000448  6E1E               	movwf	drawCircle@r,c
  2566  00044A  0EFF               	movlw	255
  2567  00044C  6E21               	movwf	drawCircle@color+1,c
  2568  00044E  0EE0               	movlw	224
  2569  000450  6E20               	movwf	drawCircle@color,c
  2570  000452  EC61  F006         	call	_drawCircle	;wreg free
  2571                           
  2572                           ;Lab8_redo.c: 228: drawCircle(80, 80 + 15, 7, 0x07E0);
  2573  000456  0E00               	movlw	0
  2574  000458  6E1B               	movwf	drawCircle@x0+1,c
  2575  00045A  0E50               	movlw	80
  2576  00045C  6E1A               	movwf	drawCircle@x0,c
  2577  00045E  0E00               	movlw	0
  2578  000460  6E1D               	movwf	drawCircle@y0+1,c
  2579  000462  0E5F               	movlw	95
  2580  000464  6E1C               	movwf	drawCircle@y0,c
  2581  000466  0E00               	movlw	0
  2582  000468  6E1F               	movwf	drawCircle@r+1,c
  2583  00046A  0E07               	movlw	7
  2584  00046C  6E1E               	movwf	drawCircle@r,c
  2585  00046E  0E07               	movlw	7
  2586  000470  6E21               	movwf	drawCircle@color+1,c
  2587  000472  0EE0               	movlw	224
  2588  000474  6E20               	movwf	drawCircle@color,c
  2589  000476  EC61  F006         	call	_drawCircle	;wreg free
  2590                           
  2591                           ;Lab8_redo.c: 229: drawtext (100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2592  00047A  0E5A               	movlw	90
  2593  00047C  6E37               	movwf	drawtext@y,c
  2594  00047E  0EB6               	movlw	low _EW_Count
  2595  000480  6E38               	movwf	drawtext@_text,c
  2596  000482  0E00               	movlw	high _EW_Count
  2597  000484  6E39               	movwf	drawtext@_text+1,c
  2598  000486  0E07               	movlw	7
  2599  000488  6E3B               	movwf	drawtext@color+1,c
  2600  00048A  683A               	setf	drawtext@color,c
  2601  00048C  0E00               	movlw	0
  2602  00048E  6E3D               	movwf	drawtext@bg+1,c
  2603  000490  0E00               	movlw	0
  2604  000492  6E3C               	movwf	drawtext@bg,c
  2605  000494  0E02               	movlw	2
  2606  000496  6E3E               	movwf	drawtext@size,c
  2607  000498  0E64               	movlw	100
  2608  00049A  ECCC  F009         	call	_drawtext
  2609                           
  2610                           ;Lab8_redo.c: 232: strcpy(txt, "E/W LT");
  2611  00049E  C049  F00F         	movff	_txt,strcpy@to
  2612  0004A2  C04A  F010         	movff	_txt+1,strcpy@to+1
  2613  0004A6  0EDE               	movlw	low STR_9
  2614  0004A8  6E11               	movwf	strcpy@from,c
  2615  0004AA  0EFF               	movlw	high STR_9
  2616  0004AC  6E12               	movwf	strcpy@from+1,c
  2617  0004AE  EC67  F012         	call	_strcpy	;wreg free
  2618                           
  2619                           ;Lab8_redo.c: 233: drawtext (30, 110, txt, 0xFFFF, 0x0000, 1);
  2620  0004B2  0E6E               	movlw	110
  2621  0004B4  6E37               	movwf	drawtext@y,c
  2622  0004B6  C049  F038         	movff	_txt,drawtext@_text
  2623  0004BA  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2624  0004BE  0EFF               	movlw	255
  2625  0004C0  6E3B               	movwf	drawtext@color+1,c
  2626  0004C2  683A               	setf	drawtext@color,c
  2627  0004C4  0E00               	movlw	0
  2628  0004C6  6E3D               	movwf	drawtext@bg+1,c
  2629  0004C8  0E00               	movlw	0
  2630  0004CA  6E3C               	movwf	drawtext@bg,c
  2631  0004CC  0E01               	movlw	1
  2632  0004CE  6E3E               	movwf	drawtext@size,c
  2633  0004D0  0E1E               	movlw	30
  2634  0004D2  ECCC  F009         	call	_drawtext
  2635                           
  2636                           ;Lab8_redo.c: 234: drawRect (30, 110 + 15-8, 60, 18, 0xFFFF);
  2637  0004D6  0E00               	movlw	0
  2638  0004D8  6E22               	movwf	drawRect@x+1,c
  2639  0004DA  0E1E               	movlw	30
  2640  0004DC  6E21               	movwf	drawRect@x,c
  2641  0004DE  0E00               	movlw	0
  2642  0004E0  6E24               	movwf	drawRect@y+1,c
  2643  0004E2  0E75               	movlw	117
  2644  0004E4  6E23               	movwf	drawRect@y,c
  2645  0004E6  0E00               	movlw	0
  2646  0004E8  6E26               	movwf	drawRect@w+1,c
  2647  0004EA  0E3C               	movlw	60
  2648  0004EC  6E25               	movwf	drawRect@w,c
  2649  0004EE  0E00               	movlw	0
  2650  0004F0  6E28               	movwf	drawRect@h+1,c
  2651  0004F2  0E12               	movlw	18
  2652  0004F4  6E27               	movwf	drawRect@h,c
  2653  0004F6  0EFF               	movlw	255
  2654  0004F8  6E2A               	movwf	drawRect@color+1,c
  2655  0004FA  6829               	setf	drawRect@color,c
  2656  0004FC  EC33  F010         	call	_drawRect	;wreg free
  2657                           
  2658                           ;Lab8_redo.c: 235: fillCircle(40, 110 + 15, 7, 0xF800);
  2659  000500  0E00               	movlw	0
  2660  000502  6E3A               	movwf	fillCircle@x0+1,c
  2661  000504  0E28               	movlw	40
  2662  000506  6E39               	movwf	fillCircle@x0,c
  2663  000508  0E00               	movlw	0
  2664  00050A  6E3C               	movwf	fillCircle@y0+1,c
  2665  00050C  0E7D               	movlw	125
  2666  00050E  6E3B               	movwf	fillCircle@y0,c
  2667  000510  0E00               	movlw	0
  2668  000512  6E3E               	movwf	fillCircle@r+1,c
  2669  000514  0E07               	movlw	7
  2670  000516  6E3D               	movwf	fillCircle@r,c
  2671  000518  0EF8               	movlw	248
  2672  00051A  6E40               	movwf	fillCircle@color+1,c
  2673  00051C  0E00               	movlw	0
  2674  00051E  6E3F               	movwf	fillCircle@color,c
  2675  000520  ECEB  F010         	call	_fillCircle	;wreg free
  2676                           
  2677                           ;Lab8_redo.c: 236: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2678  000524  0E00               	movlw	0
  2679  000526  6E1B               	movwf	drawCircle@x0+1,c
  2680  000528  0E3C               	movlw	60
  2681  00052A  6E1A               	movwf	drawCircle@x0,c
  2682  00052C  0E00               	movlw	0
  2683  00052E  6E1D               	movwf	drawCircle@y0+1,c
  2684  000530  0E7D               	movlw	125
  2685  000532  6E1C               	movwf	drawCircle@y0,c
  2686  000534  0E00               	movlw	0
  2687  000536  6E1F               	movwf	drawCircle@r+1,c
  2688  000538  0E07               	movlw	7
  2689  00053A  6E1E               	movwf	drawCircle@r,c
  2690  00053C  0EFF               	movlw	255
  2691  00053E  6E21               	movwf	drawCircle@color+1,c
  2692  000540  0EE0               	movlw	224
  2693  000542  6E20               	movwf	drawCircle@color,c
  2694  000544  EC61  F006         	call	_drawCircle	;wreg free
  2695                           
  2696                           ;Lab8_redo.c: 237: drawCircle(80, 110 + 15, 7, 0x07E0);
  2697  000548  0E00               	movlw	0
  2698  00054A  6E1B               	movwf	drawCircle@x0+1,c
  2699  00054C  0E50               	movlw	80
  2700  00054E  6E1A               	movwf	drawCircle@x0,c
  2701  000550  0E00               	movlw	0
  2702  000552  6E1D               	movwf	drawCircle@y0+1,c
  2703  000554  0E7D               	movlw	125
  2704  000556  6E1C               	movwf	drawCircle@y0,c
  2705  000558  0E00               	movlw	0
  2706  00055A  6E1F               	movwf	drawCircle@r+1,c
  2707  00055C  0E07               	movlw	7
  2708  00055E  6E1E               	movwf	drawCircle@r,c
  2709  000560  0E07               	movlw	7
  2710  000562  6E21               	movwf	drawCircle@color+1,c
  2711  000564  0EE0               	movlw	224
  2712  000566  6E20               	movwf	drawCircle@color,c
  2713  000568  EC61  F006         	call	_drawCircle	;wreg free
  2714                           
  2715                           ;Lab8_redo.c: 238: drawtext (100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2716  00056C  0E78               	movlw	120
  2717  00056E  6E37               	movwf	drawtext@y,c
  2718  000570  0EB3               	movlw	low _EWLT_Count
  2719  000572  6E38               	movwf	drawtext@_text,c
  2720  000574  0E00               	movlw	high _EWLT_Count
  2721  000576  6E39               	movwf	drawtext@_text+1,c
  2722  000578  0EFF               	movlw	255
  2723  00057A  6E3B               	movwf	drawtext@color+1,c
  2724  00057C  683A               	setf	drawtext@color,c
  2725  00057E  0E00               	movlw	0
  2726  000580  6E3D               	movwf	drawtext@bg+1,c
  2727  000582  0E00               	movlw	0
  2728  000584  6E3C               	movwf	drawtext@bg,c
  2729  000586  0E02               	movlw	2
  2730  000588  6E3E               	movwf	drawtext@size,c
  2731  00058A  0E64               	movlw	100
  2732  00058C  ECCC  F009         	call	_drawtext
  2733                           
  2734                           ;Lab8_redo.c: 241: strcpy(txt, "PNS");
  2735  000590  C049  F00F         	movff	_txt,strcpy@to
  2736  000594  C04A  F010         	movff	_txt+1,strcpy@to+1
  2737  000598  0EF3               	movlw	low STR_10
  2738  00059A  6E11               	movwf	strcpy@from,c
  2739  00059C  0EFF               	movlw	high STR_10
  2740  00059E  6E12               	movwf	strcpy@from+1,c
  2741  0005A0  EC67  F012         	call	_strcpy	;wreg free
  2742                           
  2743                           ;Lab8_redo.c: 242: drawtext(3, 20, txt, 0x001F, 0x0000, 1);
  2744  0005A4  0E14               	movlw	20
  2745  0005A6  6E37               	movwf	drawtext@y,c
  2746  0005A8  C049  F038         	movff	_txt,drawtext@_text
  2747  0005AC  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2748  0005B0  0E00               	movlw	0
  2749  0005B2  6E3B               	movwf	drawtext@color+1,c
  2750  0005B4  0E1F               	movlw	31
  2751  0005B6  6E3A               	movwf	drawtext@color,c
  2752  0005B8  0E00               	movlw	0
  2753  0005BA  6E3D               	movwf	drawtext@bg+1,c
  2754  0005BC  0E00               	movlw	0
  2755  0005BE  6E3C               	movwf	drawtext@bg,c
  2756  0005C0  0E01               	movlw	1
  2757  0005C2  6E3E               	movwf	drawtext@size,c
  2758  0005C4  0E03               	movlw	3
  2759  0005C6  ECCC  F009         	call	_drawtext
  2760                           
  2761                           ;Lab8_redo.c: 243: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  2762  0005CA  0E1E               	movlw	30
  2763  0005CC  6E37               	movwf	drawtext@y,c
  2764  0005CE  0EBC               	movlw	low _PED_NS_Count
  2765  0005D0  6E38               	movwf	drawtext@_text,c
  2766  0005D2  0E00               	movlw	high _PED_NS_Count
  2767  0005D4  6E39               	movwf	drawtext@_text+1,c
  2768  0005D6  0E00               	movlw	0
  2769  0005D8  6E3B               	movwf	drawtext@color+1,c
  2770  0005DA  0E1F               	movlw	31
  2771  0005DC  6E3A               	movwf	drawtext@color,c
  2772  0005DE  0E00               	movlw	0
  2773  0005E0  6E3D               	movwf	drawtext@bg+1,c
  2774  0005E2  0E00               	movlw	0
  2775  0005E4  6E3C               	movwf	drawtext@bg,c
  2776  0005E6  0E02               	movlw	2
  2777  0005E8  6E3E               	movwf	drawtext@size,c
  2778  0005EA  0E02               	movlw	2
  2779  0005EC  ECCC  F009         	call	_drawtext
  2780                           
  2781                           ;Lab8_redo.c: 246: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  2782  0005F0  0E5A               	movlw	90
  2783  0005F2  6E37               	movwf	drawtext@y,c
  2784  0005F4  0EB9               	movlw	low _PED_EW_Count
  2785  0005F6  6E38               	movwf	drawtext@_text,c
  2786  0005F8  0E00               	movlw	high _PED_EW_Count
  2787  0005FA  6E39               	movwf	drawtext@_text+1,c
  2788  0005FC  0E07               	movlw	7
  2789  0005FE  6E3B               	movwf	drawtext@color+1,c
  2790  000600  683A               	setf	drawtext@color,c
  2791  000602  0E00               	movlw	0
  2792  000604  6E3D               	movwf	drawtext@bg+1,c
  2793  000606  0E00               	movlw	0
  2794  000608  6E3C               	movwf	drawtext@bg,c
  2795  00060A  0E02               	movlw	2
  2796  00060C  6E3E               	movwf	drawtext@size,c
  2797  00060E  0E02               	movlw	2
  2798  000610  ECCC  F009         	call	_drawtext
  2799                           
  2800                           ;Lab8_redo.c: 247: strcpy(txt, "PEW");
  2801  000614  C049  F00F         	movff	_txt,strcpy@to
  2802  000618  C04A  F010         	movff	_txt+1,strcpy@to+1
  2803  00061C  0EF7               	movlw	low STR_11
  2804  00061E  6E11               	movwf	strcpy@from,c
  2805  000620  0EFF               	movlw	high STR_11
  2806  000622  6E12               	movwf	strcpy@from+1,c
  2807  000624  EC67  F012         	call	_strcpy	;wreg free
  2808                           
  2809                           ;Lab8_redo.c: 248: drawtext(3, 80, txt, 0x07FF, 0x0000, 1);
  2810  000628  0E50               	movlw	80
  2811  00062A  6E37               	movwf	drawtext@y,c
  2812  00062C  C049  F038         	movff	_txt,drawtext@_text
  2813  000630  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2814  000634  0E07               	movlw	7
  2815  000636  6E3B               	movwf	drawtext@color+1,c
  2816  000638  683A               	setf	drawtext@color,c
  2817  00063A  0E00               	movlw	0
  2818  00063C  6E3D               	movwf	drawtext@bg+1,c
  2819  00063E  0E00               	movlw	0
  2820  000640  6E3C               	movwf	drawtext@bg,c
  2821  000642  0E01               	movlw	1
  2822  000644  6E3E               	movwf	drawtext@size,c
  2823  000646  0E03               	movlw	3
  2824  000648  ECCC  F009         	call	_drawtext
  2825                           
  2826                           ;Lab8_redo.c: 251: strcpy(txt, "NSP NSLT EWP EWLT MR");
  2827  00064C  C049  F00F         	movff	_txt,strcpy@to
  2828  000650  C04A  F010         	movff	_txt+1,strcpy@to+1
  2829  000654  0E98               	movlw	low STR_12
  2830  000656  6E11               	movwf	strcpy@from,c
  2831  000658  0EFF               	movlw	high STR_12
  2832  00065A  6E12               	movwf	strcpy@from+1,c
  2833  00065C  EC67  F012         	call	_strcpy	;wreg free
  2834                           
  2835                           ;Lab8_redo.c: 252: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2836  000660  0E8C               	movlw	140
  2837  000662  6E37               	movwf	drawtext@y,c
  2838  000664  C049  F038         	movff	_txt,drawtext@_text
  2839  000668  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2840  00066C  0EFF               	movlw	255
  2841  00066E  6E3B               	movwf	drawtext@color+1,c
  2842  000670  683A               	setf	drawtext@color,c
  2843  000672  0E00               	movlw	0
  2844  000674  6E3D               	movwf	drawtext@bg+1,c
  2845  000676  0E00               	movlw	0
  2846  000678  6E3C               	movwf	drawtext@bg,c
  2847  00067A  0E01               	movlw	1
  2848  00067C  6E3E               	movwf	drawtext@size,c
  2849  00067E  0E01               	movlw	1
  2850  000680  ECCC  F009         	call	_drawtext
  2851                           
  2852                           ;Lab8_redo.c: 253: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2853  000684  0E95               	movlw	149
  2854  000686  6E37               	movwf	drawtext@y,c
  2855  000688  0E70               	movlw	low _SW_NSPED_Txt
  2856  00068A  6E38               	movwf	drawtext@_text,c
  2857  00068C  0E00               	movlw	high _SW_NSPED_Txt
  2858  00068E  6E39               	movwf	drawtext@_text+1,c
  2859  000690  0EFF               	movlw	255
  2860  000692  6E3B               	movwf	drawtext@color+1,c
  2861  000694  683A               	setf	drawtext@color,c
  2862  000696  0E00               	movlw	0
  2863  000698  6E3D               	movwf	drawtext@bg+1,c
  2864  00069A  0E00               	movlw	0
  2865  00069C  6E3C               	movwf	drawtext@bg,c
  2866  00069E  0E01               	movlw	1
  2867  0006A0  6E3E               	movwf	drawtext@size,c
  2868  0006A2  0E06               	movlw	6
  2869  0006A4  ECCC  F009         	call	_drawtext
  2870                           
  2871                           ;Lab8_redo.c: 254: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2872  0006A8  0E95               	movlw	149
  2873  0006AA  6E37               	movwf	drawtext@y,c
  2874  0006AC  0E6E               	movlw	low _SW_NSLT_Txt
  2875  0006AE  6E38               	movwf	drawtext@_text,c
  2876  0006B0  0E00               	movlw	high _SW_NSLT_Txt
  2877  0006B2  6E39               	movwf	drawtext@_text+1,c
  2878  0006B4  0EFF               	movlw	255
  2879  0006B6  6E3B               	movwf	drawtext@color+1,c
  2880  0006B8  683A               	setf	drawtext@color,c
  2881  0006BA  0E00               	movlw	0
  2882  0006BC  6E3D               	movwf	drawtext@bg+1,c
  2883  0006BE  0E00               	movlw	0
  2884  0006C0  6E3C               	movwf	drawtext@bg,c
  2885  0006C2  0E01               	movlw	1
  2886  0006C4  6E3E               	movwf	drawtext@size,c
  2887  0006C6  0E20               	movlw	32
  2888  0006C8  ECCC  F009         	call	_drawtext
  2889                           
  2890                           ;Lab8_redo.c: 255: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2891  0006CC  0E95               	movlw	149
  2892  0006CE  6E37               	movwf	drawtext@y,c
  2893  0006D0  0E6A               	movlw	low _SW_EWPED_Txt
  2894  0006D2  6E38               	movwf	drawtext@_text,c
  2895  0006D4  0E00               	movlw	high _SW_EWPED_Txt
  2896  0006D6  6E39               	movwf	drawtext@_text+1,c
  2897  0006D8  0EFF               	movlw	255
  2898  0006DA  6E3B               	movwf	drawtext@color+1,c
  2899  0006DC  683A               	setf	drawtext@color,c
  2900  0006DE  0E00               	movlw	0
  2901  0006E0  6E3D               	movwf	drawtext@bg+1,c
  2902  0006E2  0E00               	movlw	0
  2903  0006E4  6E3C               	movwf	drawtext@bg,c
  2904  0006E6  0E01               	movlw	1
  2905  0006E8  6E3E               	movwf	drawtext@size,c
  2906  0006EA  0E3A               	movlw	58
  2907  0006EC  ECCC  F009         	call	_drawtext
  2908                           
  2909                           ;Lab8_redo.c: 256: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2910  0006F0  0E95               	movlw	149
  2911  0006F2  6E37               	movwf	drawtext@y,c
  2912  0006F4  0E68               	movlw	low _SW_EWLT_Txt
  2913  0006F6  6E38               	movwf	drawtext@_text,c
  2914  0006F8  0E00               	movlw	high _SW_EWLT_Txt
  2915  0006FA  6E39               	movwf	drawtext@_text+1,c
  2916  0006FC  0EFF               	movlw	255
  2917  0006FE  6E3B               	movwf	drawtext@color+1,c
  2918  000700  683A               	setf	drawtext@color,c
  2919  000702  0E00               	movlw	0
  2920  000704  6E3D               	movwf	drawtext@bg+1,c
  2921  000706  0E00               	movlw	0
  2922  000708  6E3C               	movwf	drawtext@bg,c
  2923  00070A  0E01               	movlw	1
  2924  00070C  6E3E               	movwf	drawtext@size,c
  2925  00070E  0E57               	movlw	87
  2926  000710  ECCC  F009         	call	_drawtext
  2927                           
  2928                           ;Lab8_redo.c: 257: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  2929  000714  0E95               	movlw	149
  2930  000716  6E37               	movwf	drawtext@y,c
  2931  000718  0E6C               	movlw	low _SW_MODE_Txt
  2932  00071A  6E38               	movwf	drawtext@_text,c
  2933  00071C  0E00               	movlw	high _SW_MODE_Txt
  2934  00071E  6E39               	movwf	drawtext@_text+1,c
  2935  000720  0EFF               	movlw	255
  2936  000722  6E3B               	movwf	drawtext@color+1,c
  2937  000724  683A               	setf	drawtext@color,c
  2938  000726  0E00               	movlw	0
  2939  000728  6E3D               	movwf	drawtext@bg+1,c
  2940  00072A  0E00               	movlw	0
  2941  00072C  6E3C               	movwf	drawtext@bg,c
  2942  00072E  0E01               	movlw	1
  2943  000730  6E3E               	movwf	drawtext@size,c
  2944  000732  0E70               	movlw	112
  2945  000734  ECCC  F009         	call	_drawtext
  2946  000738  0012               	return		;funcret
  2947  00073A                     __end_of_Initialize_Screen:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           postdec1	equ	0xFE5
  2956                           fsr1l	equ	0xFE1
  2957                           status	equ	0xFD8
  2958                           
  2959 ;; *************** function _fillScreen *****************
  2960 ;; Defined at:
  2961 ;;		line 652 in file "ST7735_TFT.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  color           2   33[COMRAM] unsigned int 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;		None               void
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;Total ram usage:        2 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    6
  2982 ;; This function calls:
  2983 ;;		_fillRectangle
  2984 ;; This function is called by:
  2985 ;;		_Initialize_Screen
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text4
  2990  0025CE                     __ptext4:
  2991                           	opt stack 0
  2992  0025CE                     _fillScreen:
  2993                           	opt stack 23
  2994                           
  2995                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  2996                           
  2997                           ;incstack = 0
  2998  0025CE  0E00               	movlw	0
  2999  0025D0  6E16               	movwf	fillRectangle@y,c
  3000  0025D2  0E80               	movlw	128
  3001  0025D4  6E17               	movwf	fillRectangle@w,c
  3002  0025D6  0EA0               	movlw	160
  3003  0025D8  6E18               	movwf	fillRectangle@h,c
  3004  0025DA  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3005  0025DE  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3006  0025E2  0E00               	movlw	0
  3007  0025E4  EC3B  F00B         	call	_fillRectangle
  3008  0025E8  0012               	return		;funcret
  3009  0025EA                     __end_of_fillScreen:
  3010                           	opt stack 0
  3011                           tblptru	equ	0xFF8
  3012                           tblptrh	equ	0xFF7
  3013                           tblptrl	equ	0xFF6
  3014                           tablat	equ	0xFF5
  3015                           postinc0	equ	0xFEE
  3016                           wreg	equ	0xFE8
  3017                           postdec1	equ	0xFE5
  3018                           fsr1l	equ	0xFE1
  3019                           status	equ	0xFD8
  3020                           
  3021 ;; *************** function _fillRectangle *****************
  3022 ;; Defined at:
  3023 ;;		line 536 in file "ST7735_TFT.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  x               1    wreg     unsigned char 
  3026 ;;  y               1   21[COMRAM] unsigned char 
  3027 ;;  w               1   22[COMRAM] unsigned char 
  3028 ;;  h               1   23[COMRAM] unsigned char 
  3029 ;;  color           2   24[COMRAM] unsigned int 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  x               1   32[COMRAM] unsigned char 
  3032 ;;  lo              1   31[COMRAM] unsigned char 
  3033 ;;  hi              1   30[COMRAM] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;		None               void
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3043 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;Total ram usage:       12 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    5
  3050 ;; This function calls:
  3051 ;;		_setAddrWindow
  3052 ;;		_spiwrite
  3053 ;; This function is called by:
  3054 ;;		_fillScreen
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text5
  3059  001676                     __ptext5:
  3060                           	opt stack 0
  3061  001676                     _fillRectangle:
  3062                           	opt stack 23
  3063                           
  3064                           ;incstack = 0
  3065                           ;fillRectangle@x stored from wreg
  3066  001676  6E21               	movwf	fillRectangle@x,c
  3067                           
  3068                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3069                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3070  001678  0E80               	movlw	128
  3071  00167A  6021               	cpfslt	fillRectangle@x,c
  3072  00167C  D069               	goto	l238
  3073  00167E  0E9F               	movlw	159
  3074  001680  6416               	cpfsgt	fillRectangle@y,c
  3075  001682  D001               	goto	l4850
  3076                           
  3077                           ;ST7735_TFT.c: 540: return;
  3078  001684  D065               	goto	l238
  3079  001686                     l4850:
  3080                           
  3081                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3082  001686  0EFF               	movlw	255
  3083  001688  6E1B               	movwf	??_fillRectangle& (0+255),c
  3084  00168A  0EFF               	movlw	255
  3085  00168C  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3086  00168E  5017               	movf	fillRectangle@w,w,c
  3087  001690  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3088  001694  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3089  001696  261D               	addwf	??_fillRectangle+2,f,c
  3090  001698  0E00               	movlw	0
  3091  00169A  221E               	addwfc	??_fillRectangle+3,f,c
  3092  00169C  501B               	movf	??_fillRectangle,w,c
  3093  00169E  261D               	addwf	??_fillRectangle+2,f,c
  3094  0016A0  501C               	movf	??_fillRectangle+1,w,c
  3095  0016A2  221E               	addwfc	??_fillRectangle+3,f,c
  3096  0016A4  BE1E               	btfsc	??_fillRectangle+3,7,c
  3097  0016A6  D00A               	goto	l239
  3098  0016A8  501E               	movf	??_fillRectangle+3,w,c
  3099  0016AA  E104               	bnz	u3570
  3100  0016AC  0E80               	movlw	128
  3101  0016AE  5C1D               	subwf	??_fillRectangle+2,w,c
  3102  0016B0  A0D8               	btfss	status,0,c
  3103  0016B2  D004               	goto	l239
  3104  0016B4                     u3570:
  3105                           
  3106                           ;ST7735_TFT.c: 542: w = 128 - x;
  3107  0016B4  5021               	movf	fillRectangle@x,w,c
  3108  0016B6  0800               	sublw	0
  3109  0016B8  0F80               	addlw	128
  3110  0016BA  6E17               	movwf	fillRectangle@w,c
  3111  0016BC                     l239:
  3112                           
  3113                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3114  0016BC  0EFF               	movlw	255
  3115  0016BE  6E1B               	movwf	??_fillRectangle& (0+255),c
  3116  0016C0  0EFF               	movlw	255
  3117  0016C2  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3118  0016C4  5018               	movf	fillRectangle@h,w,c
  3119  0016C6  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3120  0016CA  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3121  0016CC  261D               	addwf	??_fillRectangle+2,f,c
  3122  0016CE  0E00               	movlw	0
  3123  0016D0  221E               	addwfc	??_fillRectangle+3,f,c
  3124  0016D2  501B               	movf	??_fillRectangle,w,c
  3125  0016D4  261D               	addwf	??_fillRectangle+2,f,c
  3126  0016D6  501C               	movf	??_fillRectangle+1,w,c
  3127  0016D8  221E               	addwfc	??_fillRectangle+3,f,c
  3128  0016DA  BE1E               	btfsc	??_fillRectangle+3,7,c
  3129  0016DC  D00B               	goto	l4856
  3130  0016DE  501E               	movf	??_fillRectangle+3,w,c
  3131  0016E0  E104               	bnz	u3580
  3132  0016E2  0EA0               	movlw	160
  3133  0016E4  5C1D               	subwf	??_fillRectangle+2,w,c
  3134  0016E6  A0D8               	btfss	status,0,c
  3135  0016E8  D005               	goto	l4856
  3136  0016EA                     u3580:
  3137                           
  3138                           ;ST7735_TFT.c: 544: h = 160 - y;
  3139  0016EA  5016               	movf	fillRectangle@y,w,c
  3140  0016EC  0800               	sublw	0
  3141  0016EE  0FA0               	addlw	160
  3142  0016F0  6E18               	movwf	fillRectangle@h,c
  3143  0016F2  D000               	goto	l4856
  3144  0016F4                     l4856:
  3145                           
  3146                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3147  0016F4  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3148  0016F8  5021               	movf	fillRectangle@x,w,c
  3149  0016FA  2417               	addwf	fillRectangle@w,w,c
  3150  0016FC  6E1B               	movwf	??_fillRectangle& (0+255),c
  3151  0016FE  041B               	decf	??_fillRectangle,w,c
  3152  001700  6E13               	movwf	setAddrWindow@x1,c
  3153  001702  5016               	movf	fillRectangle@y,w,c
  3154  001704  2418               	addwf	fillRectangle@h,w,c
  3155  001706  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3156  001708  041C               	decf	??_fillRectangle+1,w,c
  3157  00170A  6E14               	movwf	setAddrWindow@y1,c
  3158  00170C  5021               	movf	fillRectangle@x,w,c
  3159  00170E  EC14  F011         	call	_setAddrWindow
  3160                           
  3161                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3162  001712  501A               	movf	fillRectangle@color+1,w,c
  3163  001714  6E1F               	movwf	fillRectangle@hi,c
  3164  001716  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3165                           
  3166                           ;ST7735_TFT.c: 547: PORTDbits.RD3 = 1;
  3167  00171A  8683               	bsf	3971,3,c	;volatile
  3168                           
  3169                           ;ST7735_TFT.c: 548: PORTDbits.RD4 = 0;
  3170  00171C  9883               	bcf	3971,4,c	;volatile
  3171                           
  3172                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3173  00171E  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3174  001722                     l4868:
  3175  001722  5016               	movf	fillRectangle@y,w,c
  3176  001724  B4D8               	btfsc	status,2,c
  3177  001726  D013               	goto	l242
  3178  001728  D001               	goto	l241
  3179  00172A  D011               	goto	l242
  3180  00172C                     l241:
  3181                           
  3182                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3183  00172C  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3184  001730                     l4872:
  3185  001730  5021               	movf	fillRectangle@x,w,c
  3186  001732  B4D8               	btfsc	status,2,c
  3187  001734  D00A               	goto	l4882
  3188  001736  D001               	goto	l4876
  3189  001738  D008               	goto	l4882
  3190  00173A                     l4876:
  3191                           
  3192                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3193  00173A  501F               	movf	fillRectangle@hi,w,c
  3194  00173C  EC3A  F013         	call	_spiwrite
  3195                           
  3196                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3197  001740  5020               	movf	fillRectangle@lo,w,c
  3198  001742  EC3A  F013         	call	_spiwrite
  3199  001746  0621               	decf	fillRectangle@x,f,c
  3200  001748  D7F3               	goto	l4872
  3201  00174A                     l4882:
  3202  00174A  0616               	decf	fillRectangle@y,f,c
  3203  00174C  D7EA               	goto	l4868
  3204  00174E                     l242:
  3205                           
  3206                           ;ST7735_TFT.c: 554: }
  3207                           ;ST7735_TFT.c: 555: }
  3208                           ;ST7735_TFT.c: 556: PORTDbits.RD4 = 1;
  3209  00174E  8883               	bsf	3971,4,c	;volatile
  3210  001750                     l238:
  3211  001750  0012               	return		;funcret
  3212  001752                     __end_of_fillRectangle:
  3213                           	opt stack 0
  3214                           tblptru	equ	0xFF8
  3215                           tblptrh	equ	0xFF7
  3216                           tblptrl	equ	0xFF6
  3217                           tablat	equ	0xFF5
  3218                           postinc0	equ	0xFEE
  3219                           wreg	equ	0xFE8
  3220                           postdec1	equ	0xFE5
  3221                           fsr1l	equ	0xFE1
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _drawRect *****************
  3225 ;; Defined at:
  3226 ;;		line 718 in file "ST7735_TFT.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;  x               2   32[COMRAM] unsigned int 
  3229 ;;  y               2   34[COMRAM] unsigned int 
  3230 ;;  w               2   36[COMRAM] unsigned int 
  3231 ;;  h               2   38[COMRAM] unsigned int 
  3232 ;;  color           2   40[COMRAM] unsigned int 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;		None
  3235 ;; Return value:  Size  Location     Type
  3236 ;;		None               void
  3237 ;; Registers used:
  3238 ;;		wreg, status,2, status,0, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3244 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;Total ram usage:       11 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    6
  3251 ;; This function calls:
  3252 ;;		_drawFastHLine
  3253 ;;		_drawFastVLine
  3254 ;; This function is called by:
  3255 ;;		_Initialize_Screen
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text6
  3260  002066                     __ptext6:
  3261                           	opt stack 0
  3262  002066                     _drawRect:
  3263                           	opt stack 23
  3264                           
  3265                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3266                           
  3267                           ;incstack = 0
  3268  002066  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3269  00206A  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3270  00206E  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3271  002072  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3272  002076  5021               	movf	drawRect@x,w,c
  3273  002078  EC6B  F00E         	call	_drawFastHLine
  3274                           
  3275                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3276  00207C  5023               	movf	drawRect@y,w,c
  3277  00207E  2427               	addwf	drawRect@h,w,c
  3278  002080  6E2B               	movwf	??_drawRect& (0+255),c
  3279  002082  042B               	decf	??_drawRect,w,c
  3280  002084  6E16               	movwf	drawFastHLine@y,c
  3281  002086  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3282  00208A  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3283  00208E  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3284  002092  5021               	movf	drawRect@x,w,c
  3285  002094  EC6B  F00E         	call	_drawFastHLine
  3286                           
  3287                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3288  002098  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3289  00209C  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3290  0020A0  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3291  0020A4  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3292  0020A8  5021               	movf	drawRect@x,w,c
  3293  0020AA  ECAF  F00E         	call	_drawFastVLine
  3294                           
  3295                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3296  0020AE  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3297  0020B2  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3298  0020B6  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3299  0020BA  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3300  0020BE  5021               	movf	drawRect@x,w,c
  3301  0020C0  2425               	addwf	drawRect@w,w,c
  3302  0020C2  6E2B               	movwf	??_drawRect& (0+255),c
  3303  0020C4  042B               	decf	??_drawRect,w,c
  3304  0020C6  ECAF  F00E         	call	_drawFastVLine
  3305  0020CA  0012               	return		;funcret
  3306  0020CC                     __end_of_drawRect:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           postinc0	equ	0xFEE
  3313                           wreg	equ	0xFE8
  3314                           postdec1	equ	0xFE5
  3315                           fsr1l	equ	0xFE1
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function _drawFastHLine *****************
  3319 ;; Defined at:
  3320 ;;		line 657 in file "ST7735_TFT.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  x               1    wreg     unsigned char 
  3323 ;;  y               1   21[COMRAM] unsigned char 
  3324 ;;  w               1   22[COMRAM] unsigned char 
  3325 ;;  color           2   23[COMRAM] unsigned int 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  x               1   31[COMRAM] unsigned char 
  3328 ;;  lo              1   30[COMRAM] unsigned char 
  3329 ;;  hi              1   29[COMRAM] unsigned char 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;		None               void
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;Total ram usage:       11 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    5
  3346 ;; This function calls:
  3347 ;;		_setAddrWindow
  3348 ;;		_spiwrite
  3349 ;; This function is called by:
  3350 ;;		_drawRect
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text7
  3355  001CD6                     __ptext7:
  3356                           	opt stack 0
  3357  001CD6                     _drawFastHLine:
  3358                           	opt stack 23
  3359                           
  3360                           ;incstack = 0
  3361                           ;drawFastHLine@x stored from wreg
  3362  001CD6  6E20               	movwf	drawFastHLine@x,c
  3363                           
  3364                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3365                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3366  001CD8  0E80               	movlw	128
  3367  001CDA  6020               	cpfslt	drawFastHLine@x,c
  3368  001CDC  D03F               	goto	l283
  3369  001CDE  0E9F               	movlw	159
  3370  001CE0  6416               	cpfsgt	drawFastHLine@y,c
  3371  001CE2  D001               	goto	l4890
  3372                           
  3373                           ;ST7735_TFT.c: 661: return;
  3374  001CE4  D03B               	goto	l283
  3375  001CE6                     l4890:
  3376                           
  3377                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3378  001CE6  0EFF               	movlw	255
  3379  001CE8  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3380  001CEA  0EFF               	movlw	255
  3381  001CEC  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3382  001CEE  5017               	movf	drawFastHLine@w,w,c
  3383  001CF0  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3384  001CF4  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3385  001CF6  261C               	addwf	??_drawFastHLine+2,f,c
  3386  001CF8  0E00               	movlw	0
  3387  001CFA  221D               	addwfc	??_drawFastHLine+3,f,c
  3388  001CFC  501A               	movf	??_drawFastHLine,w,c
  3389  001CFE  261C               	addwf	??_drawFastHLine+2,f,c
  3390  001D00  501B               	movf	??_drawFastHLine+1,w,c
  3391  001D02  221D               	addwfc	??_drawFastHLine+3,f,c
  3392  001D04  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3393  001D06  D00B               	goto	l4894
  3394  001D08  501D               	movf	??_drawFastHLine+3,w,c
  3395  001D0A  E104               	bnz	u3650
  3396  001D0C  0E80               	movlw	128
  3397  001D0E  5C1C               	subwf	??_drawFastHLine+2,w,c
  3398  001D10  A0D8               	btfss	status,0,c
  3399  001D12  D005               	goto	l4894
  3400  001D14                     u3650:
  3401                           
  3402                           ;ST7735_TFT.c: 663: w = 128 - x;
  3403  001D14  5020               	movf	drawFastHLine@x,w,c
  3404  001D16  0800               	sublw	0
  3405  001D18  0F80               	addlw	128
  3406  001D1A  6E17               	movwf	drawFastHLine@w,c
  3407  001D1C  D000               	goto	l4894
  3408  001D1E                     l4894:
  3409                           
  3410                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3411  001D1E  5019               	movf	drawFastHLine@color+1,w,c
  3412  001D20  6E1E               	movwf	drawFastHLine@hi,c
  3413  001D22  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3414                           
  3415                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3416  001D26  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3417  001D2A  5020               	movf	drawFastHLine@x,w,c
  3418  001D2C  2417               	addwf	drawFastHLine@w,w,c
  3419  001D2E  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3420  001D30  041A               	decf	??_drawFastHLine,w,c
  3421  001D32  6E13               	movwf	setAddrWindow@x1,c
  3422  001D34  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3423  001D38  5020               	movf	drawFastHLine@x,w,c
  3424  001D3A  EC14  F011         	call	_setAddrWindow
  3425                           
  3426                           ;ST7735_TFT.c: 666: PORTDbits.RD3 = 1;
  3427  001D3E  8683               	bsf	3971,3,c	;volatile
  3428                           
  3429                           ;ST7735_TFT.c: 667: PORTDbits.RD4 = 0;
  3430  001D40  9883               	bcf	3971,4,c	;volatile
  3431                           
  3432                           ;ST7735_TFT.c: 669: while (w--) {
  3433  001D42  D007               	goto	l4906
  3434  001D44                     l4904:
  3435                           
  3436                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3437  001D44  501E               	movf	drawFastHLine@hi,w,c
  3438  001D46  EC3A  F013         	call	_spiwrite
  3439                           
  3440                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3441  001D4A  501F               	movf	drawFastHLine@lo,w,c
  3442  001D4C  EC3A  F013         	call	_spiwrite
  3443  001D50  D000               	goto	l4906
  3444  001D52                     l4906:
  3445  001D52  0617               	decf	drawFastHLine@w,f,c
  3446  001D54  2817               	incf	drawFastHLine@w,w,c
  3447  001D56  A4D8               	btfss	status,2,c
  3448  001D58  D7F5               	goto	l4904
  3449                           
  3450                           ;ST7735_TFT.c: 672: }
  3451                           ;ST7735_TFT.c: 673: PORTDbits.RD4 = 1;
  3452  001D5A  8883               	bsf	3971,4,c	;volatile
  3453  001D5C                     l283:
  3454  001D5C  0012               	return		;funcret
  3455  001D5E                     __end_of_drawFastHLine:
  3456                           	opt stack 0
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           postdec1	equ	0xFE5
  3464                           fsr1l	equ	0xFE1
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _TFT_GreenTab_Initialize *****************
  3468 ;; Defined at:
  3469 ;;		line 677 in file "ST7735_TFT.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;		None               void
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;Total ram usage:        0 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    5
  3490 ;; This function calls:
  3491 ;;		_Rcmd1
  3492 ;;		_Rcmd2red
  3493 ;;		_Rcmd3
  3494 ;;		_write_command
  3495 ;;		_write_data
  3496 ;; This function is called by:
  3497 ;;		_Initialize_Screen
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text8
  3502  002530                     __ptext8:
  3503                           	opt stack 0
  3504  002530                     _TFT_GreenTab_Initialize:
  3505                           	opt stack 24
  3506                           
  3507                           ;ST7735_TFT.c: 679: PORTDbits.RD4 = 1;
  3508                           
  3509                           ;incstack = 0
  3510  002530  8883               	bsf	3971,4,c	;volatile
  3511                           
  3512                           ;ST7735_TFT.c: 680: PORTDbits.RD3 = 0;
  3513  002532  9683               	bcf	3971,3,c	;volatile
  3514                           
  3515                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3516  002534  0E80               	movlw	128
  3517  002536  6EC7               	movwf	4039,c	;volatile
  3518                           
  3519                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3520  002538  0E30               	movlw	48
  3521  00253A  6EC6               	movwf	4038,c	;volatile
  3522                           
  3523                           ;ST7735_TFT.c: 686: Rcmd1();
  3524  00253C  EC44  F009         	call	_Rcmd1	;wreg free
  3525                           
  3526                           ;ST7735_TFT.c: 687: Rcmd2red();
  3527  002540  ECF0  F011         	call	_Rcmd2red	;wreg free
  3528                           
  3529                           ;ST7735_TFT.c: 688: Rcmd3();
  3530  002544  EC51  F00A         	call	_Rcmd3	;wreg free
  3531                           
  3532                           ;ST7735_TFT.c: 689: write_command(0x36);
  3533  002548  0E36               	movlw	54
  3534  00254A  EC5E  F013         	call	_write_command
  3535                           
  3536                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3537  00254E  0EC0               	movlw	192
  3538  002550  EC56  F013         	call	_write_data
  3539                           
  3540                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3541  002554  0E01               	movlw	1
  3542  002556  6E56               	movwf	__tft_type,c
  3543  002558  0012               	return		;funcret
  3544  00255A                     __end_of_TFT_GreenTab_Initialize:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postdec1	equ	0xFE5
  3553                           fsr1l	equ	0xFE1
  3554                           status	equ	0xFD8
  3555                           
  3556 ;; *************** function _Rcmd3 *****************
  3557 ;; Defined at:
  3558 ;;		line 371 in file "ST7735_TFT.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;		None
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;Total ram usage:        0 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    4
  3579 ;; This function calls:
  3580 ;;		_delay_ms
  3581 ;;		_write_command
  3582 ;;		_write_data
  3583 ;; This function is called by:
  3584 ;;		_TFT_GreenTab_Initialize
  3585 ;;		_TFT_BlackTab_Initialize
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text9
  3590  0014A2                     __ptext9:
  3591                           	opt stack 0
  3592  0014A2                     _Rcmd3:
  3593                           	opt stack 24
  3594                           
  3595                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3596                           
  3597                           ;incstack = 0
  3598  0014A2  0EE0               	movlw	224
  3599  0014A4  EC5E  F013         	call	_write_command
  3600                           
  3601                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3602  0014A8  0E02               	movlw	2
  3603  0014AA  EC56  F013         	call	_write_data
  3604  0014AE  0E1C               	movlw	28
  3605  0014B0  EC56  F013         	call	_write_data
  3606  0014B4  0E07               	movlw	7
  3607  0014B6  EC56  F013         	call	_write_data
  3608  0014BA  0E12               	movlw	18
  3609  0014BC  EC56  F013         	call	_write_data
  3610                           
  3611                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3612  0014C0  0E37               	movlw	55
  3613  0014C2  EC56  F013         	call	_write_data
  3614  0014C6  0E32               	movlw	50
  3615  0014C8  EC56  F013         	call	_write_data
  3616  0014CC  0E29               	movlw	41
  3617  0014CE  EC56  F013         	call	_write_data
  3618  0014D2  0E2D               	movlw	45
  3619  0014D4  EC56  F013         	call	_write_data
  3620                           
  3621                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3622  0014D8  0E29               	movlw	41
  3623  0014DA  EC56  F013         	call	_write_data
  3624  0014DE  0E25               	movlw	37
  3625  0014E0  EC56  F013         	call	_write_data
  3626  0014E4  0E2B               	movlw	43
  3627  0014E6  EC56  F013         	call	_write_data
  3628  0014EA  0E39               	movlw	57
  3629  0014EC  EC56  F013         	call	_write_data
  3630                           
  3631                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3632  0014F0  0E00               	movlw	0
  3633  0014F2  EC56  F013         	call	_write_data
  3634  0014F6  0E01               	movlw	1
  3635  0014F8  EC56  F013         	call	_write_data
  3636  0014FC  0E03               	movlw	3
  3637  0014FE  EC56  F013         	call	_write_data
  3638  001502  0E10               	movlw	16
  3639  001504  EC56  F013         	call	_write_data
  3640                           
  3641                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3642  001508  0EE1               	movlw	225
  3643  00150A  EC5E  F013         	call	_write_command
  3644                           
  3645                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3646  00150E  0E03               	movlw	3
  3647  001510  EC56  F013         	call	_write_data
  3648  001514  0E1D               	movlw	29
  3649  001516  EC56  F013         	call	_write_data
  3650  00151A  0E07               	movlw	7
  3651  00151C  EC56  F013         	call	_write_data
  3652  001520  0E06               	movlw	6
  3653  001522  EC56  F013         	call	_write_data
  3654                           
  3655                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3656  001526  0E2E               	movlw	46
  3657  001528  EC56  F013         	call	_write_data
  3658  00152C  0E2C               	movlw	44
  3659  00152E  EC56  F013         	call	_write_data
  3660  001532  0E29               	movlw	41
  3661  001534  EC56  F013         	call	_write_data
  3662  001538  0E2D               	movlw	45
  3663  00153A  EC56  F013         	call	_write_data
  3664                           
  3665                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3666  00153E  0E2E               	movlw	46
  3667  001540  EC56  F013         	call	_write_data
  3668  001544  0E2E               	movlw	46
  3669  001546  EC56  F013         	call	_write_data
  3670  00154A  0E37               	movlw	55
  3671  00154C  EC56  F013         	call	_write_data
  3672  001550  0E3F               	movlw	63
  3673  001552  EC56  F013         	call	_write_data
  3674                           
  3675                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3676  001556  0E00               	movlw	0
  3677  001558  EC56  F013         	call	_write_data
  3678  00155C  0E00               	movlw	0
  3679  00155E  EC56  F013         	call	_write_data
  3680  001562  0E02               	movlw	2
  3681  001564  EC56  F013         	call	_write_data
  3682  001568  0E10               	movlw	16
  3683  00156A  EC56  F013         	call	_write_data
  3684                           
  3685                           ;ST7735_TFT.c: 383: write_command(0x13);
  3686  00156E  0E13               	movlw	19
  3687  001570  EC5E  F013         	call	_write_command
  3688                           
  3689                           ;ST7735_TFT.c: 384: delay_ms(10);
  3690  001574  0E00               	movlw	0
  3691  001576  6E16               	movwf	delay_ms@ms+1,c
  3692  001578  0E0A               	movlw	10
  3693  00157A  6E15               	movwf	delay_ms@ms,c
  3694  00157C  ECC2  F010         	call	_delay_ms	;wreg free
  3695                           
  3696                           ;ST7735_TFT.c: 385: write_command(0x29);
  3697  001580  0E29               	movlw	41
  3698  001582  EC5E  F013         	call	_write_command
  3699                           
  3700                           ;ST7735_TFT.c: 386: delay_ms(100);
  3701  001586  0E00               	movlw	0
  3702  001588  6E16               	movwf	delay_ms@ms+1,c
  3703  00158A  0E64               	movlw	100
  3704  00158C  6E15               	movwf	delay_ms@ms,c
  3705  00158E  ECC2  F010         	call	_delay_ms	;wreg free
  3706  001592  0012               	return		;funcret
  3707  001594                     __end_of_Rcmd3:
  3708                           	opt stack 0
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           postinc0	equ	0xFEE
  3714                           wreg	equ	0xFE8
  3715                           postdec1	equ	0xFE5
  3716                           fsr1l	equ	0xFE1
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _Rcmd2red *****************
  3720 ;; Defined at:
  3721 ;;		line 361 in file "ST7735_TFT.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;		None               void
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;Total ram usage:        0 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    4
  3742 ;; This function calls:
  3743 ;;		_write_command
  3744 ;;		_write_data
  3745 ;; This function is called by:
  3746 ;;		_TFT_GreenTab_Initialize
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text10
  3751  0023E0                     __ptext10:
  3752                           	opt stack 0
  3753  0023E0                     _Rcmd2red:
  3754                           	opt stack 24
  3755                           
  3756                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3757                           
  3758                           ;incstack = 0
  3759  0023E0  0E2A               	movlw	42
  3760  0023E2  EC5E  F013         	call	_write_command
  3761                           
  3762                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3763  0023E6  0E00               	movlw	0
  3764  0023E8  EC56  F013         	call	_write_data
  3765  0023EC  0E00               	movlw	0
  3766  0023EE  EC56  F013         	call	_write_data
  3767                           
  3768                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3769  0023F2  0E00               	movlw	0
  3770  0023F4  EC56  F013         	call	_write_data
  3771  0023F8  0E7F               	movlw	127
  3772  0023FA  EC56  F013         	call	_write_data
  3773                           
  3774                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3775  0023FE  0E2B               	movlw	43
  3776  002400  EC5E  F013         	call	_write_command
  3777                           
  3778                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3779  002404  0E00               	movlw	0
  3780  002406  EC56  F013         	call	_write_data
  3781  00240A  0E00               	movlw	0
  3782  00240C  EC56  F013         	call	_write_data
  3783                           
  3784                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3785  002410  0E00               	movlw	0
  3786  002412  EC56  F013         	call	_write_data
  3787  002416  0E9F               	movlw	159
  3788  002418  EC56  F013         	call	_write_data
  3789  00241C  0012               	return		;funcret
  3790  00241E                     __end_of_Rcmd2red:
  3791                           	opt stack 0
  3792                           tblptru	equ	0xFF8
  3793                           tblptrh	equ	0xFF7
  3794                           tblptrl	equ	0xFF6
  3795                           tablat	equ	0xFF5
  3796                           postinc0	equ	0xFEE
  3797                           wreg	equ	0xFE8
  3798                           postdec1	equ	0xFE5
  3799                           fsr1l	equ	0xFE1
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _Rcmd1 *****************
  3803 ;; Defined at:
  3804 ;;		line 314 in file "ST7735_TFT.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;		None
  3809 ;; Return value:  Size  Location     Type
  3810 ;;		None               void
  3811 ;; Registers used:
  3812 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;Total ram usage:        0 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    4
  3825 ;; This function calls:
  3826 ;;		_delay_ms
  3827 ;;		_write_command
  3828 ;;		_write_data
  3829 ;; This function is called by:
  3830 ;;		_TFT_GreenTab_Initialize
  3831 ;;		_TFT_BlackTab_Initialize
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text11
  3836  001288                     __ptext11:
  3837                           	opt stack 0
  3838  001288                     _Rcmd1:
  3839                           	opt stack 24
  3840                           
  3841                           ;ST7735_TFT.c: 316: write_command(0x01);
  3842                           
  3843                           ;incstack = 0
  3844  001288  0E01               	movlw	1
  3845  00128A  EC5E  F013         	call	_write_command
  3846                           
  3847                           ;ST7735_TFT.c: 317: delay_ms(150);
  3848  00128E  0E00               	movlw	0
  3849  001290  6E16               	movwf	delay_ms@ms+1,c
  3850  001292  0E96               	movlw	150
  3851  001294  6E15               	movwf	delay_ms@ms,c
  3852  001296  ECC2  F010         	call	_delay_ms	;wreg free
  3853                           
  3854                           ;ST7735_TFT.c: 318: write_command(0x11);
  3855  00129A  0E11               	movlw	17
  3856  00129C  EC5E  F013         	call	_write_command
  3857                           
  3858                           ;ST7735_TFT.c: 319: delay_ms(500);
  3859  0012A0  0E01               	movlw	1
  3860  0012A2  6E16               	movwf	delay_ms@ms+1,c
  3861  0012A4  0EF4               	movlw	244
  3862  0012A6  6E15               	movwf	delay_ms@ms,c
  3863  0012A8  ECC2  F010         	call	_delay_ms	;wreg free
  3864                           
  3865                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3866  0012AC  0EB1               	movlw	177
  3867  0012AE  EC5E  F013         	call	_write_command
  3868                           
  3869                           ;ST7735_TFT.c: 321: write_data(0x01);
  3870  0012B2  0E01               	movlw	1
  3871  0012B4  EC56  F013         	call	_write_data
  3872                           
  3873                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3874  0012B8  0E2C               	movlw	44
  3875  0012BA  EC56  F013         	call	_write_data
  3876                           
  3877                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3878  0012BE  0E2D               	movlw	45
  3879  0012C0  EC56  F013         	call	_write_data
  3880                           
  3881                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3882  0012C4  0EB2               	movlw	178
  3883  0012C6  EC5E  F013         	call	_write_command
  3884                           
  3885                           ;ST7735_TFT.c: 325: write_data(0x01);
  3886  0012CA  0E01               	movlw	1
  3887  0012CC  EC56  F013         	call	_write_data
  3888                           
  3889                           ;ST7735_TFT.c: 326: write_data(0x2C);
  3890  0012D0  0E2C               	movlw	44
  3891  0012D2  EC56  F013         	call	_write_data
  3892                           
  3893                           ;ST7735_TFT.c: 327: write_data(0x2D);
  3894  0012D6  0E2D               	movlw	45
  3895  0012D8  EC56  F013         	call	_write_data
  3896                           
  3897                           ;ST7735_TFT.c: 328: write_command(0xB3);
  3898  0012DC  0EB3               	movlw	179
  3899  0012DE  EC5E  F013         	call	_write_command
  3900                           
  3901                           ;ST7735_TFT.c: 329: write_data(0x01);
  3902  0012E2  0E01               	movlw	1
  3903  0012E4  EC56  F013         	call	_write_data
  3904                           
  3905                           ;ST7735_TFT.c: 330: write_data(0x2C);
  3906  0012E8  0E2C               	movlw	44
  3907  0012EA  EC56  F013         	call	_write_data
  3908                           
  3909                           ;ST7735_TFT.c: 331: write_data(0x2D);
  3910  0012EE  0E2D               	movlw	45
  3911  0012F0  EC56  F013         	call	_write_data
  3912                           
  3913                           ;ST7735_TFT.c: 332: write_data(0x01);
  3914  0012F4  0E01               	movlw	1
  3915  0012F6  EC56  F013         	call	_write_data
  3916                           
  3917                           ;ST7735_TFT.c: 333: write_data(0x2C);
  3918  0012FA  0E2C               	movlw	44
  3919  0012FC  EC56  F013         	call	_write_data
  3920                           
  3921                           ;ST7735_TFT.c: 334: write_data(0x2D);
  3922  001300  0E2D               	movlw	45
  3923  001302  EC56  F013         	call	_write_data
  3924                           
  3925                           ;ST7735_TFT.c: 335: write_command(0xB4);
  3926  001306  0EB4               	movlw	180
  3927  001308  EC5E  F013         	call	_write_command
  3928                           
  3929                           ;ST7735_TFT.c: 336: write_data(0x07);
  3930  00130C  0E07               	movlw	7
  3931  00130E  EC56  F013         	call	_write_data
  3932                           
  3933                           ;ST7735_TFT.c: 337: write_command(0xC0);
  3934  001312  0EC0               	movlw	192
  3935  001314  EC5E  F013         	call	_write_command
  3936                           
  3937                           ;ST7735_TFT.c: 338: write_data(0xA2);
  3938  001318  0EA2               	movlw	162
  3939  00131A  EC56  F013         	call	_write_data
  3940                           
  3941                           ;ST7735_TFT.c: 339: write_data(0x02);
  3942  00131E  0E02               	movlw	2
  3943  001320  EC56  F013         	call	_write_data
  3944                           
  3945                           ;ST7735_TFT.c: 340: write_data(0x84);
  3946  001324  0E84               	movlw	132
  3947  001326  EC56  F013         	call	_write_data
  3948                           
  3949                           ;ST7735_TFT.c: 341: write_command(0xC1);
  3950  00132A  0EC1               	movlw	193
  3951  00132C  EC5E  F013         	call	_write_command
  3952                           
  3953                           ;ST7735_TFT.c: 342: write_data(0xC5);
  3954  001330  0EC5               	movlw	197
  3955  001332  EC56  F013         	call	_write_data
  3956                           
  3957                           ;ST7735_TFT.c: 343: write_command(0xC2);
  3958  001336  0EC2               	movlw	194
  3959  001338  EC5E  F013         	call	_write_command
  3960                           
  3961                           ;ST7735_TFT.c: 344: write_data(0x0A);
  3962  00133C  0E0A               	movlw	10
  3963  00133E  EC56  F013         	call	_write_data
  3964                           
  3965                           ;ST7735_TFT.c: 345: write_data(0x00);
  3966  001342  0E00               	movlw	0
  3967  001344  EC56  F013         	call	_write_data
  3968                           
  3969                           ;ST7735_TFT.c: 346: write_command(0xC3);
  3970  001348  0EC3               	movlw	195
  3971  00134A  EC5E  F013         	call	_write_command
  3972                           
  3973                           ;ST7735_TFT.c: 347: write_data(0x8A);
  3974  00134E  0E8A               	movlw	138
  3975  001350  EC56  F013         	call	_write_data
  3976                           
  3977                           ;ST7735_TFT.c: 348: write_data(0x2A);
  3978  001354  0E2A               	movlw	42
  3979  001356  EC56  F013         	call	_write_data
  3980                           
  3981                           ;ST7735_TFT.c: 349: write_command(0xC4);
  3982  00135A  0EC4               	movlw	196
  3983  00135C  EC5E  F013         	call	_write_command
  3984                           
  3985                           ;ST7735_TFT.c: 350: write_data(0x8A);
  3986  001360  0E8A               	movlw	138
  3987  001362  EC56  F013         	call	_write_data
  3988                           
  3989                           ;ST7735_TFT.c: 351: write_data(0xEE);
  3990  001366  0EEE               	movlw	238
  3991  001368  EC56  F013         	call	_write_data
  3992                           
  3993                           ;ST7735_TFT.c: 352: write_command(0xC5);
  3994  00136C  0EC5               	movlw	197
  3995  00136E  EC5E  F013         	call	_write_command
  3996                           
  3997                           ;ST7735_TFT.c: 353: write_data(0x0E);
  3998  001372  0E0E               	movlw	14
  3999  001374  EC56  F013         	call	_write_data
  4000                           
  4001                           ;ST7735_TFT.c: 354: write_command(0x20);
  4002  001378  0E20               	movlw	32
  4003  00137A  EC5E  F013         	call	_write_command
  4004                           
  4005                           ;ST7735_TFT.c: 355: write_command(0x36);
  4006  00137E  0E36               	movlw	54
  4007  001380  EC5E  F013         	call	_write_command
  4008                           
  4009                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4010  001384  0EC8               	movlw	200
  4011  001386  EC56  F013         	call	_write_data
  4012                           
  4013                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4014  00138A  0E3A               	movlw	58
  4015  00138C  EC5E  F013         	call	_write_command
  4016                           
  4017                           ;ST7735_TFT.c: 358: write_data(0x05);
  4018  001390  0E05               	movlw	5
  4019  001392  EC56  F013         	call	_write_data
  4020  001396  0012               	return		;funcret
  4021  001398                     __end_of_Rcmd1:
  4022                           	opt stack 0
  4023                           tblptru	equ	0xFF8
  4024                           tblptrh	equ	0xFF7
  4025                           tblptrl	equ	0xFF6
  4026                           tablat	equ	0xFF5
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           postdec1	equ	0xFE5
  4030                           fsr1l	equ	0xFE1
  4031                           status	equ	0xFD8
  4032                           
  4033 ;; *************** function _LCD_Reset *****************
  4034 ;; Defined at:
  4035 ;;		line 250 in file "ST7735_TFT.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;		None
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;		None
  4040 ;; Return value:  Size  Location     Type
  4041 ;;		None               void
  4042 ;; Registers used:
  4043 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;Total ram usage:        0 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    4
  4056 ;; This function calls:
  4057 ;;		_delay_ms
  4058 ;; This function is called by:
  4059 ;;		_Initialize_Screen
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063                           	psect	text12
  4064  002688                     __ptext12:
  4065                           	opt stack 0
  4066  002688                     _LCD_Reset:
  4067                           	opt stack 25
  4068                           
  4069                           ;ST7735_TFT.c: 252: PORTDbits.RD2 = 0;
  4070                           
  4071                           ;incstack = 0
  4072  002688  9483               	bcf	3971,2,c	;volatile
  4073                           
  4074                           ;ST7735_TFT.c: 253: delay_ms(100);
  4075  00268A  0E00               	movlw	0
  4076  00268C  6E16               	movwf	delay_ms@ms+1,c
  4077  00268E  0E64               	movlw	100
  4078  002690  6E15               	movwf	delay_ms@ms,c
  4079  002692  ECC2  F010         	call	_delay_ms	;wreg free
  4080                           
  4081                           ;ST7735_TFT.c: 254: PORTDbits.RD2 = 1;
  4082  002696  8483               	bsf	3971,2,c	;volatile
  4083  002698  0012               	return		;funcret
  4084  00269A                     __end_of_LCD_Reset:
  4085                           	opt stack 0
  4086                           tblptru	equ	0xFF8
  4087                           tblptrh	equ	0xFF7
  4088                           tblptrl	equ	0xFF6
  4089                           tablat	equ	0xFF5
  4090                           postinc0	equ	0xFEE
  4091                           wreg	equ	0xFE8
  4092                           postdec1	equ	0xFE5
  4093                           fsr1l	equ	0xFE1
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _delay_ms *****************
  4097 ;; Defined at:
  4098 ;;		line 97 in file "ST7735_TFT.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  ms              2   20[COMRAM] int 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  count           2   24[COMRAM] int 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;		None               void
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;Total ram usage:        6 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    3
  4119 ;; This function calls:
  4120 ;;		___wmul
  4121 ;; This function is called by:
  4122 ;;		_LCD_Reset
  4123 ;;		_Rcmd1
  4124 ;;		_Rcmd3
  4125 ;;		_Bcmd
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text13
  4130  002184                     __ptext13:
  4131                           	opt stack 0
  4132  002184                     _delay_ms:
  4133                           	opt stack 24
  4134                           
  4135                           ;ST7735_TFT.c: 103: int count;
  4136                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4137                           
  4138                           ;incstack = 0
  4139  002184  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4140  002188  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4141  00218C  0E00               	movlw	0
  4142  00218E  6E12               	movwf	___wmul@multiplicand+1,c
  4143  002190  0EFA               	movlw	250
  4144  002192  6E11               	movwf	___wmul@multiplicand,c
  4145  002194  ECAD  F012         	call	___wmul	;wreg free
  4146  002198  C00F  F019         	movff	?___wmul,delay_ms@count
  4147  00219C  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4148                           
  4149                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4150  0021A0  C019  F017         	movff	delay_ms@count,??_delay_ms
  4151  0021A4  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4152  0021A8  1E17               	comf	??_delay_ms,f,c
  4153  0021AA  1E18               	comf	??_delay_ms+1,f,c
  4154  0021AC  4A17               	infsnz	??_delay_ms,f,c
  4155  0021AE  2A18               	incf	??_delay_ms+1,f,c
  4156  0021B0  0EFF               	movlw	255
  4157  0021B2  2417               	addwf	??_delay_ms,w,c
  4158  0021B4  6E19               	movwf	delay_ms@count,c
  4159  0021B6  0EFF               	movlw	255
  4160  0021B8  2018               	addwfc	??_delay_ms+1,w,c
  4161  0021BA  6E1A               	movwf	delay_ms@count+1,c
  4162                           
  4163                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4164  0021BC  0EB8               	movlw	184
  4165  0021BE  6EB1               	movwf	4017,c	;volatile
  4166                           
  4167                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4168  0021C0  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4169                           
  4170                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4171  0021C4  501A               	movf	delay_ms@count+1,w,c
  4172  0021C6  6ED7               	movwf	4055,c	;volatile
  4173                           
  4174                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4175  0021C8  92A1               	bcf	4001,1,c	;volatile
  4176                           
  4177                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4178  0021CA  80B1               	bsf	4017,0,c	;volatile
  4179                           
  4180                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4181  0021CC  D000               	goto	l125
  4182  0021CE                     l125:
  4183  0021CE  A2A1               	btfss	4001,1,c	;volatile
  4184  0021D0  D7FE               	goto	l125
  4185                           
  4186                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4187  0021D2  90B1               	bcf	4017,0,c	;volatile
  4188  0021D4  0012               	return		;funcret
  4189  0021D6                     __end_of_delay_ms:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           postdec1	equ	0xFE5
  4198                           fsr1l	equ	0xFE1
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _Do_Init *****************
  4202 ;; Defined at:
  4203 ;;		line 275 in file "Lab8_redo.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		wreg, status,2, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    4
  4224 ;; This function calls:
  4225 ;;		_Init_ADC
  4226 ;;		_init_UART
  4227 ;; This function is called by:
  4228 ;;		_main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text14
  4233  002582                     __ptext14:
  4234                           	opt stack 0
  4235  002582                     _Do_Init:
  4236                           	opt stack 26
  4237                           
  4238                           ;Lab8_redo.c: 277: init_UART();
  4239                           
  4240                           ;incstack = 0
  4241  002582  EC30  F013         	call	_init_UART	;wreg free
  4242                           
  4243                           ;Lab8_redo.c: 278: Init_ADC();
  4244  002586  EC66  F013         	call	_Init_ADC	;wreg free
  4245                           
  4246                           ;Lab8_redo.c: 280: OSCCON=0x70;
  4247  00258A  0E70               	movlw	112
  4248  00258C  6ED3               	movwf	4051,c	;volatile
  4249                           
  4250                           ;Lab8_redo.c: 281: TRISB = 0x47;
  4251  00258E  0E47               	movlw	71
  4252  002590  6E93               	movwf	3987,c	;volatile
  4253                           
  4254                           ;Lab8_redo.c: 284: INTCONbits.INT0IF = 0;
  4255  002592  92F2               	bcf	intcon,1,c	;volatile
  4256                           
  4257                           ;Lab8_redo.c: 285: INTCON3bits.INT1IF = 0;
  4258  002594  90F0               	bcf	intcon3,0,c	;volatile
  4259                           
  4260                           ;Lab8_redo.c: 286: INTCON3bits.INT2IF =0;
  4261  002596  92F0               	bcf	intcon3,1,c	;volatile
  4262                           
  4263                           ;Lab8_redo.c: 287: INTCON2bits.INTEDG0=0 ;
  4264  002598  9CF1               	bcf	intcon2,6,c	;volatile
  4265                           
  4266                           ;Lab8_redo.c: 288: INTCON2bits.INTEDG1=0;
  4267  00259A  9AF1               	bcf	intcon2,5,c	;volatile
  4268                           
  4269                           ;Lab8_redo.c: 289: INTCON2bits.INTEDG2=1;
  4270  00259C  88F1               	bsf	intcon2,4,c	;volatile
  4271                           
  4272                           ;Lab8_redo.c: 290: INTCONbits.INT0IE =1;
  4273  00259E  88F2               	bsf	intcon,4,c	;volatile
  4274                           
  4275                           ;Lab8_redo.c: 291: INTCON3bits.INT1IE=1;
  4276  0025A0  86F0               	bsf	intcon3,3,c	;volatile
  4277                           
  4278                           ;Lab8_redo.c: 292: INTCON3bits.INT2IE=1;
  4279  0025A2  88F0               	bsf	intcon3,4,c	;volatile
  4280                           
  4281                           ;Lab8_redo.c: 293: INTCONbits.GIE=1;
  4282  0025A4  8EF2               	bsf	intcon,7,c	;volatile
  4283  0025A6  0012               	return		;funcret
  4284  0025A8                     __end_of_Do_Init:
  4285                           	opt stack 0
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           intcon	equ	0xFF2
  4291                           intcon2	equ	0xFF1
  4292                           intcon3	equ	0xFF0
  4293                           postinc0	equ	0xFEE
  4294                           wreg	equ	0xFE8
  4295                           postdec1	equ	0xFE5
  4296                           fsr1l	equ	0xFE1
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function _init_UART *****************
  4300 ;; Defined at:
  4301 ;;		line 260 in file "Lab8_redo.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;		None               void
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    3
  4322 ;; This function calls:
  4323 ;;		_OpenUSART
  4324 ;; This function is called by:
  4325 ;;		_Do_Init
  4326 ;;		_main
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text15
  4331  002660                     __ptext15:
  4332                           	opt stack 0
  4333  002660                     _init_UART:
  4334                           	opt stack 27
  4335                           
  4336                           ;Lab8_redo.c: 262: OpenUSART (0b01111111 & 0b10111111 &
  4337                           ;Lab8_redo.c: 263: 0b11111110 & 0b11111101 & 0b11111111 &
  4338                           ;Lab8_redo.c: 264: 0b11111111, 25);
  4339                           
  4340                           ;incstack = 0
  4341  002660  0E00               	movlw	0
  4342  002662  6E10               	movwf	OpenUSART@spbrg+1,c
  4343  002664  0E19               	movlw	25
  4344  002666  6E0F               	movwf	OpenUSART@spbrg,c
  4345  002668  0E3C               	movlw	60
  4346  00266A  ECFB  F00F         	call	_OpenUSART
  4347                           
  4348                           ;Lab8_redo.c: 265: OSCCON = 0x60;
  4349  00266E  0E60               	movlw	96
  4350  002670  6ED3               	movwf	4051,c	;volatile
  4351  002672  0012               	return		;funcret
  4352  002674                     __end_of_init_UART:
  4353                           	opt stack 0
  4354                           tblptru	equ	0xFF8
  4355                           tblptrh	equ	0xFF7
  4356                           tblptrl	equ	0xFF6
  4357                           tablat	equ	0xFF5
  4358                           intcon	equ	0xFF2
  4359                           intcon2	equ	0xFF1
  4360                           intcon3	equ	0xFF0
  4361                           postinc0	equ	0xFEE
  4362                           wreg	equ	0xFE8
  4363                           postdec1	equ	0xFE5
  4364                           fsr1l	equ	0xFE1
  4365                           status	equ	0xFD8
  4366                           
  4367 ;; *************** function _OpenUSART *****************
  4368 ;; Defined at:
  4369 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  config          1    wreg     unsigned char 
  4372 ;;  spbrg           2   14[COMRAM] unsigned int 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  config          1   16[COMRAM] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;		None               void
  4377 ;; Registers used:
  4378 ;;		wreg, status,2
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4384 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;Total ram usage:        3 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    2
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_init_UART
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text16
  4399  001FF6                     __ptext16:
  4400                           	opt stack 0
  4401  001FF6                     _OpenUSART:
  4402                           	opt stack 27
  4403                           
  4404                           ;incstack = 0
  4405                           ;OpenUSART@config stored from wreg
  4406  001FF6  6E11               	movwf	OpenUSART@config,c
  4407  001FF8  0E00               	movlw	0
  4408  001FFA  6EAC               	movwf	4012,c	;volatile
  4409  001FFC  0E00               	movlw	0
  4410  001FFE  6EAB               	movwf	4011,c	;volatile
  4411  002000  A011               	btfss	OpenUSART@config,0,c
  4412  002002  D002               	goto	l4914
  4413  002004  88AC               	bsf	4012,4,c	;volatile
  4414  002006  D000               	goto	l4914
  4415  002008                     l4914:
  4416  002008  A211               	btfss	OpenUSART@config,1,c
  4417  00200A  D003               	goto	l4918
  4418  00200C  8CAC               	bsf	4012,6,c	;volatile
  4419  00200E  8CAB               	bsf	4011,6,c	;volatile
  4420  002010  D000               	goto	l4918
  4421  002012                     l4918:
  4422  002012  A411               	btfss	OpenUSART@config,2,c
  4423  002014  D002               	goto	l4922
  4424  002016  8EAC               	bsf	4012,7,c	;volatile
  4425  002018  D000               	goto	l4922
  4426  00201A                     l4922:
  4427  00201A  A611               	btfss	OpenUSART@config,3,c
  4428  00201C  D002               	goto	l579
  4429  00201E  88AB               	bsf	4011,4,c	;volatile
  4430  002020  D002               	goto	l4926
  4431  002022                     l579:
  4432  002022  8AAB               	bsf	4011,5,c	;volatile
  4433  002024  D000               	goto	l4926
  4434  002026                     l4926:
  4435  002026  B811               	btfsc	OpenUSART@config,4,c
  4436  002028  84AC               	bsf	4012,2,c	;volatile
  4437  00202A  989E               	bcf	3998,4,c	;volatile
  4438  00202C  AA11               	btfss	OpenUSART@config,5,c
  4439  00202E  D002               	goto	l4934
  4440  002030  86AB               	bsf	4011,3,c	;volatile
  4441  002032  D000               	goto	l4934
  4442  002034                     l4934:
  4443  002034  AC11               	btfss	OpenUSART@config,6,c
  4444  002036  D002               	goto	l583
  4445  002038  8A9D               	bsf	3997,5,c	;volatile
  4446  00203A  D001               	goto	l584
  4447  00203C                     l583:
  4448  00203C  9A9D               	bcf	3997,5,c	;volatile
  4449  00203E                     l584:
  4450  00203E  9A9E               	bcf	3998,5,c	;volatile
  4451  002040  AE11               	btfss	OpenUSART@config,7,c
  4452  002042  D002               	goto	l585
  4453  002044  889D               	bsf	3997,4,c	;volatile
  4454  002046  D001               	goto	l586
  4455  002048                     l585:
  4456  002048  989D               	bcf	3997,4,c	;volatile
  4457  00204A                     l586:
  4458  00204A  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4459  00204E  5010               	movf	OpenUSART@spbrg+1,w,c
  4460  002050  6EB0               	movwf	4016,c	;volatile
  4461  002052  8AAC               	bsf	4012,5,c	;volatile
  4462  002054  8EAB               	bsf	4011,7,c	;volatile
  4463  002056  9C94               	bcf	3988,6,c	;volatile
  4464  002058  8E94               	bsf	3988,7,c	;volatile
  4465  00205A  B8AC               	btfsc	4012,4,c	;volatile
  4466  00205C  BEAC               	btfsc	4012,7,c	;volatile
  4467  00205E  D002               	goto	l588
  4468  002060  8C94               	bsf	3988,6,c	;volatile
  4469  002062  D000               	goto	l588
  4470  002064                     l588:
  4471  002064  0012               	return		;funcret
  4472  002066                     __end_of_OpenUSART:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           intcon	equ	0xFF2
  4479                           intcon2	equ	0xFF1
  4480                           intcon3	equ	0xFF0
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           postdec1	equ	0xFE5
  4484                           fsr1l	equ	0xFE1
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _Init_ADC *****************
  4488 ;; Defined at:
  4489 ;;		line 414 in file "Lab8_redo.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;		None               void
  4496 ;; Registers used:
  4497 ;;		wreg, status,2
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;Total ram usage:        0 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    2
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_Do_Init
  4514 ;;		_main
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text17
  4519  0026CC                     __ptext17:
  4520                           	opt stack 0
  4521  0026CC                     _Init_ADC:
  4522                           	opt stack 28
  4523                           
  4524                           ;Lab8_redo.c: 416: ADCON0 = 0x01;
  4525                           
  4526                           ;incstack = 0
  4527  0026CC  0E01               	movlw	1
  4528  0026CE  6EC2               	movwf	4034,c	;volatile
  4529                           
  4530                           ;Lab8_redo.c: 417: ADCON1= 0x0E;
  4531  0026D0  0E0E               	movlw	14
  4532  0026D2  6EC1               	movwf	4033,c	;volatile
  4533                           
  4534                           ;Lab8_redo.c: 418: ADCON2= 0xA9;
  4535  0026D4  0EA9               	movlw	169
  4536  0026D6  6EC0               	movwf	4032,c	;volatile
  4537  0026D8  0012               	return		;funcret
  4538  0026DA                     __end_of_Init_ADC:
  4539                           	opt stack 0
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           intcon	equ	0xFF2
  4545                           intcon2	equ	0xFF1
  4546                           intcon3	equ	0xFF0
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           postdec1	equ	0xFE5
  4550                           fsr1l	equ	0xFE1
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function _Do_Flashing *****************
  4554 ;; Defined at:
  4555 ;;		line 864 in file "Lab8_redo.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;		None
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;		None               void
  4562 ;; Registers used:
  4563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;Total ram usage:        0 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:   11
  4576 ;; This function calls:
  4577 ;;		_Set_EW
  4578 ;;		_Set_EW_LT
  4579 ;;		_Set_NS
  4580 ;;		_Set_NS_LT
  4581 ;;		_Wait_One_Second
  4582 ;; This function is called by:
  4583 ;;		_main
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text18
  4588  00212E                     __ptext18:
  4589                           	opt stack 0
  4590  00212E                     _Do_Flashing:
  4591                           	opt stack 19
  4592                           
  4593                           ;Lab8_redo.c: 866: FLASHING = 1;
  4594                           
  4595                           ;incstack = 0
  4596  00212E  0E01               	movlw	1
  4597  002130  D006               	goto	L1
  4598  002132                     l5404:
  4599                           
  4600                           ;Lab8_redo.c: 869: {
  4601                           ;Lab8_redo.c: 870: if( FLASHING_REQUEST == 1)
  4602  002132  044E               	decf	_FLASHING_REQUEST,w,c
  4603  002134  A4D8               	btfss	status,2,c
  4604  002136  D005               	goto	l5408
  4605                           
  4606                           ;Lab8_redo.c: 871: {
  4607                           ;Lab8_redo.c: 872: FLASHING_REQUEST = 0;
  4608  002138  0E00               	movlw	0
  4609  00213A  6E4E               	movwf	_FLASHING_REQUEST,c
  4610                           
  4611                           ;Lab8_redo.c: 873: FLASHING = 0;
  4612  00213C  0E00               	movlw	0
  4613  00213E                     L1:
  4614  00213E  6E4D               	movwf	_FLASHING,c
  4615                           
  4616                           ;Lab8_redo.c: 874: }
  4617  002140  D01D               	goto	l5422
  4618  002142                     l5408:
  4619                           
  4620                           ;Lab8_redo.c: 876: else
  4621                           ;Lab8_redo.c: 877: {
  4622                           ;Lab8_redo.c: 878: Set_NS(1);
  4623  002142  0E01               	movlw	1
  4624  002144  EC84  F011         	call	_Set_NS
  4625                           
  4626                           ;Lab8_redo.c: 879: Set_EW(1);
  4627  002148  0E01               	movlw	1
  4628  00214A  ECCC  F011         	call	_Set_EW
  4629                           
  4630                           ;Lab8_redo.c: 880: Set_EW_LT(1);
  4631  00214E  0E01               	movlw	1
  4632  002150  ECA8  F011         	call	_Set_EW_LT
  4633                           
  4634                           ;Lab8_redo.c: 881: Set_NS_LT(1);
  4635  002154  0E01               	movlw	1
  4636  002156  EC60  F011         	call	_Set_NS_LT
  4637                           
  4638                           ;Lab8_redo.c: 883: Wait_One_Second();
  4639  00215A  EC79  F00F         	call	_Wait_One_Second	;wreg free
  4640                           
  4641                           ;Lab8_redo.c: 885: Set_NS(0);
  4642  00215E  0E00               	movlw	0
  4643  002160  EC84  F011         	call	_Set_NS
  4644                           
  4645                           ;Lab8_redo.c: 886: Set_EW(0);
  4646  002164  0E00               	movlw	0
  4647  002166  ECCC  F011         	call	_Set_EW
  4648                           
  4649                           ;Lab8_redo.c: 887: Set_EW_LT(0);
  4650  00216A  0E00               	movlw	0
  4651  00216C  ECA8  F011         	call	_Set_EW_LT
  4652                           
  4653                           ;Lab8_redo.c: 888: Set_NS_LT(0);
  4654  002170  0E00               	movlw	0
  4655  002172  EC60  F011         	call	_Set_NS_LT
  4656                           
  4657                           ;Lab8_redo.c: 890: Wait_One_Second();
  4658  002176  EC79  F00F         	call	_Wait_One_Second	;wreg free
  4659  00217A  D000               	goto	l5422
  4660  00217C                     l5422:
  4661  00217C  044D               	decf	_FLASHING,w,c
  4662  00217E  B4D8               	btfsc	status,2,c
  4663  002180  D7D8               	goto	l5404
  4664  002182  0012               	return		;funcret
  4665  002184                     __end_of_Do_Flashing:
  4666                           	opt stack 0
  4667                           tblptru	equ	0xFF8
  4668                           tblptrh	equ	0xFF7
  4669                           tblptrl	equ	0xFF6
  4670                           tablat	equ	0xFF5
  4671                           intcon	equ	0xFF2
  4672                           intcon2	equ	0xFF1
  4673                           intcon3	equ	0xFF0
  4674                           postinc0	equ	0xFEE
  4675                           wreg	equ	0xFE8
  4676                           postdec1	equ	0xFE5
  4677                           fsr1l	equ	0xFE1
  4678                           status	equ	0xFD8
  4679                           
  4680 ;; *************** function _Day_Mode *****************
  4681 ;; Defined at:
  4682 ;;		line 533 in file "Lab8_redo.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;		None
  4687 ;; Return value:  Size  Location     Type
  4688 ;;		None               void
  4689 ;; Registers used:
  4690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;Total ram usage:        0 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:   12
  4703 ;; This function calls:
  4704 ;;		_PED_Control
  4705 ;;		_Set_EW
  4706 ;;		_Set_EW_LT
  4707 ;;		_Set_NS
  4708 ;;		_Set_NS_LT
  4709 ;;		_Wait_N_Seconds
  4710 ;; This function is called by:
  4711 ;;		_main
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text19
  4716  001822                     __ptext19:
  4717                           	opt stack 0
  4718  001822                     _Day_Mode:
  4719                           	opt stack 18
  4720                           
  4721                           ;Lab8_redo.c: 535: MODE = 1;
  4722                           
  4723                           ;incstack = 0
  4724  001822  0E00               	movlw	0
  4725  001824  6E46               	movwf	_MODE+1,c
  4726  001826  0E01               	movlw	1
  4727  001828  6E45               	movwf	_MODE,c
  4728                           
  4729                           ;Lab8_redo.c: 536: PORTBbits.RB7 = 1;
  4730  00182A  8E81               	bsf	3969,7,c	;volatile
  4731                           
  4732                           ;Lab8_redo.c: 537: Act_Mode_Txt[0] = 'D';
  4733  00182C  0E44               	movlw	68
  4734  00182E  6E62               	movwf	_Act_Mode_Txt,c
  4735                           
  4736                           ;Lab8_redo.c: 540: Set_EW(1);
  4737  001830  0E01               	movlw	1
  4738  001832  ECCC  F011         	call	_Set_EW
  4739                           
  4740                           ;Lab8_redo.c: 541: Set_NS_LT(1);
  4741  001836  0E01               	movlw	1
  4742  001838  EC60  F011         	call	_Set_NS_LT
  4743                           
  4744                           ;Lab8_redo.c: 542: Set_EW_LT(1);
  4745  00183C  0E01               	movlw	1
  4746  00183E  ECA8  F011         	call	_Set_EW_LT
  4747                           
  4748                           ;Lab8_redo.c: 544: Set_NS(2);
  4749  001842  0E02               	movlw	2
  4750  001844  EC84  F011         	call	_Set_NS
  4751                           
  4752                           ;Lab8_redo.c: 546: if(NS_PED_SW == 1)
  4753  001848  044F               	decf	_NS_PED_SW,w,c
  4754  00184A  A4D8               	btfss	status,2,c
  4755  00184C  D006               	goto	l478
  4756                           
  4757                           ;Lab8_redo.c: 547: {
  4758                           ;Lab8_redo.c: 548: PED_Control(0,8);
  4759  00184E  0E08               	movlw	8
  4760  001850  0100               	movlb	0	; () banked
  4761  001852  6FAD               	movwf	PED_Control@Num_Sec& (0+255),b
  4762  001854  0E00               	movlw	0
  4763  001856  ECD5  F00D         	call	_PED_Control
  4764  00185A                     l478:
  4765                           
  4766                           ;Lab8_redo.c: 550: }
  4767                           ;Lab8_redo.c: 556: Wait_N_Seconds(7);
  4768  00185A  0E07               	movlw	7
  4769  00185C  EC4C  F012         	call	_Wait_N_Seconds
  4770                           
  4771                           ;Lab8_redo.c: 558: Set_NS(3);
  4772  001860  0E03               	movlw	3
  4773  001862  EC84  F011         	call	_Set_NS
  4774                           
  4775                           ;Lab8_redo.c: 559: Wait_N_Seconds(3);
  4776  001866  0E03               	movlw	3
  4777  001868  EC4C  F012         	call	_Wait_N_Seconds
  4778                           
  4779                           ;Lab8_redo.c: 561: Set_NS(1);
  4780  00186C  0E01               	movlw	1
  4781  00186E  EC84  F011         	call	_Set_NS
  4782                           
  4783                           ;Lab8_redo.c: 565: if(PORTAbits.RA5 == 1)
  4784  001872  AA80               	btfss	3968,5,c	;volatile
  4785  001874  D010               	goto	l5336
  4786                           
  4787                           ;Lab8_redo.c: 566: {
  4788                           ;Lab8_redo.c: 567: Set_EW_LT(2);
  4789  001876  0E02               	movlw	2
  4790  001878  ECA8  F011         	call	_Set_EW_LT
  4791                           
  4792                           ;Lab8_redo.c: 568: Wait_N_Seconds(8);
  4793  00187C  0E08               	movlw	8
  4794  00187E  EC4C  F012         	call	_Wait_N_Seconds
  4795                           
  4796                           ;Lab8_redo.c: 570: Set_EW_LT(3);
  4797  001882  0E03               	movlw	3
  4798  001884  ECA8  F011         	call	_Set_EW_LT
  4799                           
  4800                           ;Lab8_redo.c: 571: Wait_N_Seconds(3);
  4801  001888  0E03               	movlw	3
  4802  00188A  EC4C  F012         	call	_Wait_N_Seconds
  4803                           
  4804                           ;Lab8_redo.c: 573: Set_EW_LT(1);
  4805  00188E  0E01               	movlw	1
  4806  001890  ECA8  F011         	call	_Set_EW_LT
  4807  001894  D000               	goto	l5336
  4808  001896                     l5336:
  4809                           
  4810                           ;Lab8_redo.c: 575: }
  4811                           ;Lab8_redo.c: 577: Set_EW(2);
  4812  001896  0E02               	movlw	2
  4813  001898  ECCC  F011         	call	_Set_EW
  4814                           
  4815                           ;Lab8_redo.c: 579: if( EW_PED_SW == 1 )
  4816  00189C  044C               	decf	_EW_PED_SW,w,c
  4817  00189E  A4D8               	btfss	status,2,c
  4818  0018A0  D006               	goto	l480
  4819                           
  4820                           ;Lab8_redo.c: 580: {
  4821                           ;Lab8_redo.c: 581: PED_Control(2,9);
  4822  0018A2  0E09               	movlw	9
  4823  0018A4  0100               	movlb	0	; () banked
  4824  0018A6  6FAD               	movwf	PED_Control@Num_Sec& (0+255),b
  4825  0018A8  0E02               	movlw	2
  4826  0018AA  ECD5  F00D         	call	_PED_Control
  4827  0018AE                     l480:
  4828                           
  4829                           ;Lab8_redo.c: 582: }
  4830                           ;Lab8_redo.c: 586: Wait_N_Seconds(9);
  4831  0018AE  0E09               	movlw	9
  4832  0018B0  EC4C  F012         	call	_Wait_N_Seconds
  4833                           
  4834                           ;Lab8_redo.c: 588: Set_EW(3);
  4835  0018B4  0E03               	movlw	3
  4836  0018B6  ECCC  F011         	call	_Set_EW
  4837                           
  4838                           ;Lab8_redo.c: 589: Wait_N_Seconds(3);
  4839  0018BA  0E03               	movlw	3
  4840  0018BC  EC4C  F012         	call	_Wait_N_Seconds
  4841                           
  4842                           ;Lab8_redo.c: 591: Set_EW(1);
  4843  0018C0  0E01               	movlw	1
  4844  0018C2  ECCC  F011         	call	_Set_EW
  4845                           
  4846                           ;Lab8_redo.c: 595: if(PORTAbits.RA4 == 1)
  4847  0018C6  A880               	btfss	3968,4,c	;volatile
  4848  0018C8  D010               	goto	l482
  4849                           
  4850                           ;Lab8_redo.c: 596: {
  4851                           ;Lab8_redo.c: 597: Set_NS_LT(2);
  4852  0018CA  0E02               	movlw	2
  4853  0018CC  EC60  F011         	call	_Set_NS_LT
  4854                           
  4855                           ;Lab8_redo.c: 598: Wait_N_Seconds(8);
  4856  0018D0  0E08               	movlw	8
  4857  0018D2  EC4C  F012         	call	_Wait_N_Seconds
  4858                           
  4859                           ;Lab8_redo.c: 600: Set_NS_LT(3);
  4860  0018D6  0E03               	movlw	3
  4861  0018D8  EC60  F011         	call	_Set_NS_LT
  4862                           
  4863                           ;Lab8_redo.c: 601: Wait_N_Seconds(3);
  4864  0018DC  0E03               	movlw	3
  4865  0018DE  EC4C  F012         	call	_Wait_N_Seconds
  4866                           
  4867                           ;Lab8_redo.c: 603: Set_NS_LT(1);
  4868  0018E2  0E01               	movlw	1
  4869  0018E4  EC60  F011         	call	_Set_NS_LT
  4870  0018E8  D000               	goto	l482
  4871  0018EA                     l482:
  4872  0018EA  0012               	return		;funcret
  4873  0018EC                     __end_of_Day_Mode:
  4874                           	opt stack 0
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           intcon	equ	0xFF2
  4880                           intcon2	equ	0xFF1
  4881                           intcon3	equ	0xFF0
  4882                           postinc0	equ	0xFEE
  4883                           wreg	equ	0xFE8
  4884                           postdec1	equ	0xFE5
  4885                           fsr1l	equ	0xFE1
  4886                           status	equ	0xFD8
  4887                           
  4888 ;; *************** function _Wait_N_Seconds *****************
  4889 ;; Defined at:
  4890 ;;		line 713 in file "Lab8_redo.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  seconds         1    wreg     unsigned char 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  seconds         1   10[BANK0 ] unsigned char 
  4895 ;;  I               1   11[BANK0 ] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;Total ram usage:        2 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:   11
  4912 ;; This function calls:
  4913 ;;		_Wait_One_Second
  4914 ;;		_update_LCD_count
  4915 ;; This function is called by:
  4916 ;;		_Day_Mode
  4917 ;;		_Night_Mode
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text20
  4922  002498                     __ptext20:
  4923                           	opt stack 0
  4924  002498                     _Wait_N_Seconds:
  4925                           	opt stack 18
  4926                           
  4927                           ;incstack = 0
  4928                           ;Wait_N_Seconds@seconds stored from wreg
  4929  002498  0100               	movlb	0	; () banked
  4930  00249A  6FAF               	movwf	Wait_N_Seconds@seconds& (0+255),b
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;Lab8_redo.c: 715: char I;
  4934                           ;Lab8_redo.c: 716: for (I = seconds; I> 0; I--)
  4935  00249C  C0AF  F0B0         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4936  0024A0                     l5148:
  4937                           
  4938                           ; BSR set to: 0
  4939  0024A0  0100               	movlb	0	; () banked
  4940  0024A2  51B0               	movf	Wait_N_Seconds@I& (0+255),w,b
  4941  0024A4  0100               	movlb	0	; () banked
  4942  0024A6  B4D8               	btfsc	status,2,c
  4943  0024A8  D00C               	goto	l5158
  4944  0024AA  D001               	goto	l5152
  4945                           
  4946                           ; BSR set to: 0
  4947  0024AC  D00A               	goto	l5158
  4948  0024AE                     l5152:
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;Lab8_redo.c: 717: {
  4952                           ;Lab8_redo.c: 718: update_LCD_count(direction, I);
  4953  0024AE  C0B0  F041         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4954  0024B2  5059               	movf	_direction,w,c
  4955  0024B4  EC38  F007         	call	_update_LCD_count
  4956                           
  4957                           ;Lab8_redo.c: 719: Wait_One_Second();
  4958  0024B8  EC79  F00F         	call	_Wait_One_Second	;wreg free
  4959  0024BC  0100               	movlb	0	; () banked
  4960  0024BE  07B0               	decf	Wait_N_Seconds@I& (0+255),f,b
  4961  0024C0  D7EF               	goto	l5148
  4962  0024C2                     l5158:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;Lab8_redo.c: 720: }
  4966                           ;Lab8_redo.c: 721: update_LCD_count(direction, 0);
  4967  0024C2  0E00               	movlw	0
  4968  0024C4  6E41               	movwf	update_LCD_count@count,c
  4969  0024C6  5059               	movf	_direction,w,c
  4970  0024C8  EC38  F007         	call	_update_LCD_count
  4971  0024CC  0012               	return		;funcret
  4972  0024CE                     __end_of_Wait_N_Seconds:
  4973                           	opt stack 0
  4974                           tblptru	equ	0xFF8
  4975                           tblptrh	equ	0xFF7
  4976                           tblptrl	equ	0xFF6
  4977                           tablat	equ	0xFF5
  4978                           intcon	equ	0xFF2
  4979                           intcon2	equ	0xFF1
  4980                           intcon3	equ	0xFF0
  4981                           postinc0	equ	0xFEE
  4982                           wreg	equ	0xFE8
  4983                           postdec1	equ	0xFE5
  4984                           fsr1l	equ	0xFE1
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function _update_LCD_count *****************
  4988 ;; Defined at:
  4989 ;;		line 770 in file "Lab8_redo.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  direction       1    wreg     unsigned char 
  4992 ;;  count           1   64[COMRAM] unsigned char 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  direction       1    7[BANK0 ] unsigned char 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;		None               void
  4997 ;; Registers used:
  4998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5004 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;Total ram usage:        2 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    9
  5011 ;; This function calls:
  5012 ;;		___awdiv
  5013 ;;		___awmod
  5014 ;;		_drawtext
  5015 ;; This function is called by:
  5016 ;;		_Wait_N_Seconds
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text21
  5021  000E70                     __ptext21:
  5022                           	opt stack 0
  5023  000E70                     _update_LCD_count:
  5024                           	opt stack 19
  5025                           
  5026                           ;incstack = 0
  5027                           ;update_LCD_count@direction stored from wreg
  5028  000E70  0100               	movlb	0	; () banked
  5029  000E72  6FAC               	movwf	update_LCD_count@direction& (0+255),b
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;Lab8_redo.c: 772: switch (direction)
  5033  000E74  D0B2               	goto	l5044
  5034  000E76                     l5026:
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;Lab8_redo.c: 775: NS_Count[0] = count/10 + '0';
  5038  000E76  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5039  000E7A  6A10               	clrf	___awdiv@dividend+1,c
  5040  000E7C  0E00               	movlw	0
  5041  000E7E  6E12               	movwf	___awdiv@divisor+1,c
  5042  000E80  0E0A               	movlw	10
  5043  000E82  6E11               	movwf	___awdiv@divisor,c
  5044  000E84  EC20  F00E         	call	___awdiv	;wreg free
  5045  000E88  500F               	movf	?___awdiv,w,c
  5046  000E8A  0F30               	addlw	48
  5047  000E8C  6E5F               	movwf	_NS_Count,c
  5048                           
  5049                           ;Lab8_redo.c: 776: NS_Count[1] = count%10 + '0';
  5050  000E8E  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5051  000E92  6A10               	clrf	___awmod@dividend+1,c
  5052  000E94  0E00               	movlw	0
  5053  000E96  6E12               	movwf	___awmod@divisor+1,c
  5054  000E98  0E0A               	movlw	10
  5055  000E9A  6E11               	movwf	___awmod@divisor,c
  5056  000E9C  ECBA  F00F         	call	___awmod	;wreg free
  5057  000EA0  500F               	movf	?___awmod,w,c
  5058  000EA2  0F30               	addlw	48
  5059  000EA4  6E60               	movwf	_NS_Count+1,c
  5060                           
  5061                           ;Lab8_redo.c: 777: drawtext(100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  5062  000EA6  0E1E               	movlw	30
  5063  000EA8  6E37               	movwf	drawtext@y,c
  5064  000EAA  0E5F               	movlw	low _NS_Count
  5065  000EAC  6E38               	movwf	drawtext@_text,c
  5066  000EAE  0E00               	movlw	high _NS_Count
  5067  000EB0  6E39               	movwf	drawtext@_text+1,c
  5068  000EB2  0E00               	movlw	0
  5069  000EB4  6E3B               	movwf	drawtext@color+1,c
  5070  000EB6  0E1F               	movlw	31
  5071  000EB8  6E3A               	movwf	drawtext@color,c
  5072  000EBA  0E00               	movlw	0
  5073  000EBC  6E3D               	movwf	drawtext@bg+1,c
  5074  000EBE  0E00               	movlw	0
  5075  000EC0  6E3C               	movwf	drawtext@bg,c
  5076  000EC2  0E02               	movlw	2
  5077  000EC4  6E3E               	movwf	drawtext@size,c
  5078  000EC6  0E64               	movlw	100
  5079  000EC8  ECCC  F009         	call	_drawtext
  5080                           
  5081                           ;Lab8_redo.c: 778: break;
  5082  000ECC  D095               	goto	l523
  5083  000ECE                     l5030:
  5084                           
  5085                           ;Lab8_redo.c: 781: NSLT_Count[0] = count/10 + '0';
  5086  000ECE  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5087  000ED2  6A10               	clrf	___awdiv@dividend+1,c
  5088  000ED4  0E00               	movlw	0
  5089  000ED6  6E12               	movwf	___awdiv@divisor+1,c
  5090  000ED8  0E0A               	movlw	10
  5091  000EDA  6E11               	movwf	___awdiv@divisor,c
  5092  000EDC  EC20  F00E         	call	___awdiv	;wreg free
  5093  000EE0  500F               	movf	?___awdiv,w,c
  5094  000EE2  0F30               	addlw	48
  5095  000EE4  6E5C               	movwf	_NSLT_Count,c
  5096                           
  5097                           ;Lab8_redo.c: 782: NSLT_Count[1] = count%10 + '0';
  5098  000EE6  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5099  000EEA  6A10               	clrf	___awmod@dividend+1,c
  5100  000EEC  0E00               	movlw	0
  5101  000EEE  6E12               	movwf	___awmod@divisor+1,c
  5102  000EF0  0E0A               	movlw	10
  5103  000EF2  6E11               	movwf	___awmod@divisor,c
  5104  000EF4  ECBA  F00F         	call	___awmod	;wreg free
  5105  000EF8  500F               	movf	?___awmod,w,c
  5106  000EFA  0F30               	addlw	48
  5107  000EFC  6E5D               	movwf	_NSLT_Count+1,c
  5108                           
  5109                           ;Lab8_redo.c: 783: drawtext(100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5110  000EFE  0E3C               	movlw	60
  5111  000F00  6E37               	movwf	drawtext@y,c
  5112  000F02  0E5C               	movlw	low _NSLT_Count
  5113  000F04  6E38               	movwf	drawtext@_text,c
  5114  000F06  0E00               	movlw	high _NSLT_Count
  5115  000F08  6E39               	movwf	drawtext@_text+1,c
  5116  000F0A  0EF8               	movlw	248
  5117  000F0C  6E3B               	movwf	drawtext@color+1,c
  5118  000F0E  0E1F               	movlw	31
  5119  000F10  6E3A               	movwf	drawtext@color,c
  5120  000F12  0E00               	movlw	0
  5121  000F14  6E3D               	movwf	drawtext@bg+1,c
  5122  000F16  0E00               	movlw	0
  5123  000F18  6E3C               	movwf	drawtext@bg,c
  5124  000F1A  0E02               	movlw	2
  5125  000F1C  6E3E               	movwf	drawtext@size,c
  5126  000F1E  0E64               	movlw	100
  5127  000F20  ECCC  F009         	call	_drawtext
  5128                           
  5129                           ;Lab8_redo.c: 784: break;
  5130  000F24  D069               	goto	l523
  5131  000F26                     l5034:
  5132                           
  5133                           ;Lab8_redo.c: 787: EW_Count[0] = count/10 + '0';
  5134  000F26  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5135  000F2A  6A10               	clrf	___awdiv@dividend+1,c
  5136  000F2C  0E00               	movlw	0
  5137  000F2E  6E12               	movwf	___awdiv@divisor+1,c
  5138  000F30  0E0A               	movlw	10
  5139  000F32  6E11               	movwf	___awdiv@divisor,c
  5140  000F34  EC20  F00E         	call	___awdiv	;wreg free
  5141  000F38  500F               	movf	?___awdiv,w,c
  5142  000F3A  0F30               	addlw	48
  5143  000F3C  0100               	movlb	0	; () banked
  5144  000F3E  6FB6               	movwf	_EW_Count& (0+255),b
  5145                           
  5146                           ;Lab8_redo.c: 788: EW_Count[1] = count%10 + '0';
  5147  000F40  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5148  000F44  6A10               	clrf	___awmod@dividend+1,c
  5149  000F46  0E00               	movlw	0
  5150  000F48  6E12               	movwf	___awmod@divisor+1,c
  5151  000F4A  0E0A               	movlw	10
  5152  000F4C  6E11               	movwf	___awmod@divisor,c
  5153  000F4E  ECBA  F00F         	call	___awmod	;wreg free
  5154  000F52  500F               	movf	?___awmod,w,c
  5155  000F54  0F30               	addlw	48
  5156  000F56  0100               	movlb	0	; () banked
  5157  000F58  6FB7               	movwf	(_EW_Count+1)& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;Lab8_redo.c: 789: drawtext(100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5161  000F5A  0E5A               	movlw	90
  5162  000F5C  6E37               	movwf	drawtext@y,c
  5163  000F5E  0EB6               	movlw	low _EW_Count
  5164  000F60  6E38               	movwf	drawtext@_text,c
  5165  000F62  0E00               	movlw	high _EW_Count
  5166  000F64  6E39               	movwf	drawtext@_text+1,c
  5167  000F66  0E07               	movlw	7
  5168  000F68  6E3B               	movwf	drawtext@color+1,c
  5169  000F6A  683A               	setf	drawtext@color,c
  5170  000F6C  0E00               	movlw	0
  5171  000F6E  6E3D               	movwf	drawtext@bg+1,c
  5172  000F70  0E00               	movlw	0
  5173  000F72  6E3C               	movwf	drawtext@bg,c
  5174  000F74  0E02               	movlw	2
  5175  000F76  6E3E               	movwf	drawtext@size,c
  5176  000F78  0E64               	movlw	100
  5177  000F7A  ECCC  F009         	call	_drawtext
  5178                           
  5179                           ;Lab8_redo.c: 790: break;
  5180  000F7E  D03C               	goto	l523
  5181  000F80                     l5038:
  5182                           
  5183                           ;Lab8_redo.c: 793: EWLT_Count[0] = count/10 + '0';
  5184  000F80  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5185  000F84  6A10               	clrf	___awdiv@dividend+1,c
  5186  000F86  0E00               	movlw	0
  5187  000F88  6E12               	movwf	___awdiv@divisor+1,c
  5188  000F8A  0E0A               	movlw	10
  5189  000F8C  6E11               	movwf	___awdiv@divisor,c
  5190  000F8E  EC20  F00E         	call	___awdiv	;wreg free
  5191  000F92  500F               	movf	?___awdiv,w,c
  5192  000F94  0F30               	addlw	48
  5193  000F96  0100               	movlb	0	; () banked
  5194  000F98  6FB3               	movwf	_EWLT_Count& (0+255),b
  5195                           
  5196                           ;Lab8_redo.c: 794: EWLT_Count[1] = count%10 + '0';
  5197  000F9A  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5198  000F9E  6A10               	clrf	___awmod@dividend+1,c
  5199  000FA0  0E00               	movlw	0
  5200  000FA2  6E12               	movwf	___awmod@divisor+1,c
  5201  000FA4  0E0A               	movlw	10
  5202  000FA6  6E11               	movwf	___awmod@divisor,c
  5203  000FA8  ECBA  F00F         	call	___awmod	;wreg free
  5204  000FAC  500F               	movf	?___awmod,w,c
  5205  000FAE  0F30               	addlw	48
  5206  000FB0  0100               	movlb	0	; () banked
  5207  000FB2  6FB4               	movwf	(_EWLT_Count+1)& (0+255),b
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;Lab8_redo.c: 795: drawtext(100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5211  000FB4  0E78               	movlw	120
  5212  000FB6  6E37               	movwf	drawtext@y,c
  5213  000FB8  0EB3               	movlw	low _EWLT_Count
  5214  000FBA  6E38               	movwf	drawtext@_text,c
  5215  000FBC  0E00               	movlw	high _EWLT_Count
  5216  000FBE  6E39               	movwf	drawtext@_text+1,c
  5217  000FC0  0EFF               	movlw	255
  5218  000FC2  6E3B               	movwf	drawtext@color+1,c
  5219  000FC4  683A               	setf	drawtext@color,c
  5220  000FC6  0E00               	movlw	0
  5221  000FC8  6E3D               	movwf	drawtext@bg+1,c
  5222  000FCA  0E00               	movlw	0
  5223  000FCC  6E3C               	movwf	drawtext@bg,c
  5224  000FCE  0E02               	movlw	2
  5225  000FD0  6E3E               	movwf	drawtext@size,c
  5226  000FD2  0E64               	movlw	100
  5227  000FD4  ECCC  F009         	call	_drawtext
  5228                           
  5229                           ;Lab8_redo.c: 801: }
  5230                           
  5231                           ;Lab8_redo.c: 796: break;
  5232  000FD8  D00F               	goto	l523
  5233  000FDA                     l5044:
  5234  000FDA  0100               	movlb	0	; () banked
  5235  000FDC  51AC               	movf	update_LCD_count@direction& (0+255),w,b
  5236                           
  5237                           ; Switch size 1, requested type "space"
  5238                           ; Number of cases is 4, Range of values is 0 to 3
  5239                           ; switch strategies available:
  5240                           ; Name         Instructions Cycles
  5241                           ; simple_byte           13     7 (average)
  5242                           ;	Chosen strategy is simple_byte
  5243  000FDE  0A00               	xorlw	0	; case 0
  5244  000FE0  B4D8               	btfsc	status,2,c
  5245  000FE2  D749               	goto	l5026
  5246  000FE4  0A01               	xorlw	1	; case 1
  5247  000FE6  B4D8               	btfsc	status,2,c
  5248  000FE8  D772               	goto	l5030
  5249  000FEA  0A03               	xorlw	3	; case 2
  5250  000FEC  B4D8               	btfsc	status,2,c
  5251  000FEE  D79B               	goto	l5034
  5252  000FF0  0A01               	xorlw	1	; case 3
  5253  000FF2  B4D8               	btfsc	status,2,c
  5254  000FF4  D7C5               	goto	l5038
  5255  000FF6  D000               	goto	l523
  5256  000FF8                     l523:
  5257  000FF8  0012               	return		;funcret
  5258  000FFA                     __end_of_update_LCD_count:
  5259                           	opt stack 0
  5260                           tblptru	equ	0xFF8
  5261                           tblptrh	equ	0xFF7
  5262                           tblptrl	equ	0xFF6
  5263                           tablat	equ	0xFF5
  5264                           intcon	equ	0xFF2
  5265                           intcon2	equ	0xFF1
  5266                           intcon3	equ	0xFF0
  5267                           postinc0	equ	0xFEE
  5268                           wreg	equ	0xFE8
  5269                           postdec1	equ	0xFE5
  5270                           fsr1l	equ	0xFE1
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function _Wait_One_Second *****************
  5274 ;; Defined at:
  5275 ;;		line 673 in file "Lab8_redo.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;		None               void
  5282 ;; Registers used:
  5283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;Total ram usage:        0 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:   10
  5296 ;; This function calls:
  5297 ;;		_Wait_Half_Second
  5298 ;;		_drawtext
  5299 ;;		_strcpy
  5300 ;;		_update_LCD_misc
  5301 ;; This function is called by:
  5302 ;;		_Wait_N_Seconds
  5303 ;;		_Do_Flashing
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text22
  5308  001EF2                     __ptext22:
  5309                           	opt stack 0
  5310  001EF2                     _Wait_One_Second:
  5311                           	opt stack 18
  5312                           
  5313                           ;Lab8_redo.c: 675: PORTDbits.RD7 = 1;
  5314                           
  5315                           ;incstack = 0
  5316  001EF2  8E83               	bsf	3971,7,c	;volatile
  5317                           
  5318                           ;Lab8_redo.c: 676: strcpy(txt,"*");
  5319  001EF4  C049  F00F         	movff	_txt,strcpy@to
  5320  001EF8  C04A  F010         	movff	_txt+1,strcpy@to+1
  5321  001EFC  0EFD               	movlw	low STR_5
  5322  001EFE  6E11               	movwf	strcpy@from,c
  5323  001F00  0EFF               	movlw	high STR_5
  5324  001F02  6E12               	movwf	strcpy@from+1,c
  5325  001F04  EC67  F012         	call	_strcpy	;wreg free
  5326                           
  5327                           ;Lab8_redo.c: 677: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5328  001F08  0E0A               	movlw	10
  5329  001F0A  6E37               	movwf	drawtext@y,c
  5330  001F0C  C049  F038         	movff	_txt,drawtext@_text
  5331  001F10  C04A  F039         	movff	_txt+1,drawtext@_text+1
  5332  001F14  0EFF               	movlw	255
  5333  001F16  6E3B               	movwf	drawtext@color+1,c
  5334  001F18  683A               	setf	drawtext@color,c
  5335  001F1A  0E00               	movlw	0
  5336  001F1C  6E3D               	movwf	drawtext@bg+1,c
  5337  001F1E  0E00               	movlw	0
  5338  001F20  6E3C               	movwf	drawtext@bg,c
  5339  001F22  0E01               	movlw	1
  5340  001F24  6E3E               	movwf	drawtext@size,c
  5341  001F26  0E78               	movlw	120
  5342  001F28  ECCC  F009         	call	_drawtext
  5343                           
  5344                           ;Lab8_redo.c: 678: Wait_Half_Second();
  5345  001F2C  ECF5  F012         	call	_Wait_Half_Second	;wreg free
  5346                           
  5347                           ;Lab8_redo.c: 680: PORTDbits.RD7 = 0;
  5348  001F30  9E83               	bcf	3971,7,c	;volatile
  5349                           
  5350                           ;Lab8_redo.c: 681: strcpy(txt," ");
  5351  001F32  C049  F00F         	movff	_txt,strcpy@to
  5352  001F36  C04A  F010         	movff	_txt+1,strcpy@to+1
  5353  001F3A  0EFB               	movlw	low STR_14
  5354  001F3C  6E11               	movwf	strcpy@from,c
  5355  001F3E  0EFF               	movlw	high STR_14
  5356  001F40  6E12               	movwf	strcpy@from+1,c
  5357  001F42  EC67  F012         	call	_strcpy	;wreg free
  5358                           
  5359                           ;Lab8_redo.c: 682: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5360  001F46  0E0A               	movlw	10
  5361  001F48  6E37               	movwf	drawtext@y,c
  5362  001F4A  C049  F038         	movff	_txt,drawtext@_text
  5363  001F4E  C04A  F039         	movff	_txt+1,drawtext@_text+1
  5364  001F52  0EFF               	movlw	255
  5365  001F54  6E3B               	movwf	drawtext@color+1,c
  5366  001F56  683A               	setf	drawtext@color,c
  5367  001F58  0E00               	movlw	0
  5368  001F5A  6E3D               	movwf	drawtext@bg+1,c
  5369  001F5C  0E00               	movlw	0
  5370  001F5E  6E3C               	movwf	drawtext@bg,c
  5371  001F60  0E01               	movlw	1
  5372  001F62  6E3E               	movwf	drawtext@size,c
  5373  001F64  0E78               	movlw	120
  5374  001F66  ECCC  F009         	call	_drawtext
  5375                           
  5376                           ;Lab8_redo.c: 683: Wait_Half_Second();
  5377  001F6A  ECF5  F012         	call	_Wait_Half_Second	;wreg free
  5378                           
  5379                           ;Lab8_redo.c: 684: update_LCD_misc();
  5380  001F6E  EC51  F005         	call	_update_LCD_misc	;wreg free
  5381  001F72  0012               	return		;funcret
  5382  001F74                     __end_of_Wait_One_Second:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           intcon	equ	0xFF2
  5389                           intcon2	equ	0xFF1
  5390                           intcon3	equ	0xFF0
  5391                           postinc0	equ	0xFEE
  5392                           wreg	equ	0xFE8
  5393                           postdec1	equ	0xFE5
  5394                           fsr1l	equ	0xFE1
  5395                           status	equ	0xFD8
  5396                           
  5397 ;; *************** function _update_LCD_misc *****************
  5398 ;; Defined at:
  5399 ;;		line 826 in file "Lab8_redo.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;		None
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;  nStep           2    8[BANK0 ] int 
  5404 ;;  ch              1    7[BANK0 ] unsigned char 
  5405 ;; Return value:  Size  Location     Type
  5406 ;;		None               void
  5407 ;; Registers used:
  5408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;Total ram usage:        3 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    9
  5421 ;; This function calls:
  5422 ;;		___awtoft
  5423 ;;		___ftdiv
  5424 ;;		___ftge
  5425 ;;		___wmul
  5426 ;;		_drawtext
  5427 ;;		_get_full_ADC
  5428 ;; This function is called by:
  5429 ;;		_Wait_One_Second
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text23
  5434  000AA2                     __ptext23:
  5435                           	opt stack 0
  5436  000AA2                     _update_LCD_misc:
  5437                           	opt stack 18
  5438                           
  5439                           ;incstack = 0
  5440  000AA2  0E00               	movlw	0
  5441  000AA4  0100               	movlb	0	; () banked
  5442  000AA6  6FAC               	movwf	update_LCD_misc@ch& (0+255),b
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;Lab8_redo.c: 828: int nStep = get_full_ADC();
  5446  000AA8  ECD4  F012         	call	_get_full_ADC	;wreg free
  5447  000AAC  C00F  F0AD         	movff	?_get_full_ADC,update_LCD_misc@nStep
  5448  000AB0  C010  F0AE         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  5449                           
  5450                           ;Lab8_redo.c: 829: volt = nStep * 5 /1024.0;
  5451  000AB4  C0AD  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  5452  000AB8  C0AE  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  5453  000ABC  0E00               	movlw	0
  5454  000ABE  6E12               	movwf	___wmul@multiplicand+1,c
  5455  000AC0  0E05               	movlw	5
  5456  000AC2  6E11               	movwf	___wmul@multiplicand,c
  5457  000AC4  ECAD  F012         	call	___wmul	;wreg free
  5458  000AC8  C00F  F017         	movff	?___wmul,___awtoft@c
  5459  000ACC  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  5460  000AD0  EC2E  F012         	call	___awtoft	;wreg free
  5461  000AD4  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  5462  000AD8  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  5463  000ADC  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  5464  000AE0  0E00               	movlw	0
  5465  000AE2  6E1E               	movwf	___ftdiv@f2,c
  5466  000AE4  0E80               	movlw	128
  5467  000AE6  6E1F               	movwf	___ftdiv@f2+1,c
  5468  000AE8  0E44               	movlw	68
  5469  000AEA  6E20               	movwf	___ftdiv@f2+2,c
  5470  000AEC  ECCA  F00A         	call	___ftdiv	;wreg free
  5471  000AF0  C01B  F042         	movff	?___ftdiv,_volt
  5472  000AF4  C01C  F043         	movff	?___ftdiv+1,_volt+1
  5473  000AF8  C01D  F044         	movff	?___ftdiv+2,_volt+2
  5474                           
  5475                           ;Lab8_redo.c: 830: SW_MODE = volt < 3.5 ? 1:0;
  5476  000AFC  C042  F00F         	movff	_volt,___ftge@ff1
  5477  000B00  C043  F010         	movff	_volt+1,___ftge@ff1+1
  5478  000B04  C044  F011         	movff	_volt+2,___ftge@ff1+2
  5479  000B08  0E00               	movlw	0
  5480  000B0A  6E12               	movwf	___ftge@ff2,c
  5481  000B0C  0E60               	movlw	96
  5482  000B0E  6E13               	movwf	___ftge@ff2+1,c
  5483  000B10  0E40               	movlw	64
  5484  000B12  6E14               	movwf	___ftge@ff2+2,c
  5485  000B14  EC8A  F00D         	call	___ftge	;wreg free
  5486  000B18  B0D8               	btfsc	status,0,c
  5487  000B1A  D002               	goto	u3340
  5488  000B1C  0E01               	movlw	1
  5489  000B1E  D001               	goto	u3350
  5490  000B20                     u3340:
  5491  000B20  0E00               	movlw	0
  5492  000B22                     u3350:
  5493  000B22  6E53               	movwf	_SW_MODE,c
  5494                           
  5495                           ;Lab8_redo.c: 832: SW_NSPED = NS_PED_SW;
  5496  000B24  C04F  F055         	movff	_NS_PED_SW,_SW_NSPED
  5497                           
  5498                           ;Lab8_redo.c: 833: SW_NSLT = PORTAbits.RA4;
  5499  000B28  0E00               	movlw	0
  5500  000B2A  B880               	btfsc	3968,4,c	;volatile
  5501  000B2C  0E01               	movlw	1
  5502  000B2E  6E54               	movwf	_SW_NSLT,c
  5503                           
  5504                           ;Lab8_redo.c: 834: SW_EWPED = EW_PED_SW;
  5505  000B30  C04C  F052         	movff	_EW_PED_SW,_SW_EWPED
  5506                           
  5507                           ;Lab8_redo.c: 835: SW_EWLT = PORTAbits.RA5;
  5508  000B34  0E00               	movlw	0
  5509  000B36  BA80               	btfsc	3968,5,c	;volatile
  5510  000B38  0E01               	movlw	1
  5511  000B3A  6E51               	movwf	_SW_EWLT,c
  5512                           
  5513                           ;Lab8_redo.c: 837: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  5514  000B3C  5053               	movf	_SW_MODE,w,c
  5515  000B3E  A4D8               	btfss	status,2,c
  5516  000B40  D002               	goto	l4632
  5517  000B42  0E4E               	movlw	78
  5518  000B44  D001               	goto	L2
  5519  000B46                     l4632:
  5520  000B46  0E44               	movlw	68
  5521  000B48                     L2:
  5522  000B48  6E6C               	movwf	_SW_MODE_Txt,c
  5523                           
  5524                           ;Lab8_redo.c: 838: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  5525  000B4A  5055               	movf	_SW_NSPED,w,c
  5526  000B4C  A4D8               	btfss	status,2,c
  5527  000B4E  D002               	goto	l4636
  5528  000B50  0E30               	movlw	48
  5529  000B52  D001               	goto	L3
  5530  000B54                     l4636:
  5531  000B54  0E31               	movlw	49
  5532  000B56                     L3:
  5533  000B56  6E70               	movwf	_SW_NSPED_Txt,c
  5534                           
  5535                           ;Lab8_redo.c: 839: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  5536  000B58  5052               	movf	_SW_EWPED,w,c
  5537  000B5A  A4D8               	btfss	status,2,c
  5538  000B5C  D002               	goto	l4640
  5539  000B5E  0E30               	movlw	48
  5540  000B60  D001               	goto	L4
  5541  000B62                     l4640:
  5542  000B62  0E31               	movlw	49
  5543  000B64                     L4:
  5544  000B64  6E6A               	movwf	_SW_EWPED_Txt,c
  5545                           
  5546                           ;Lab8_redo.c: 841: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  5547  000B66  5054               	movf	_SW_NSLT,w,c
  5548  000B68  A4D8               	btfss	status,2,c
  5549  000B6A  D002               	goto	l4644
  5550  000B6C  0E30               	movlw	48
  5551  000B6E  D001               	goto	L5
  5552  000B70                     l4644:
  5553  000B70  0E31               	movlw	49
  5554  000B72                     L5:
  5555  000B72  6E6E               	movwf	_SW_NSLT_Txt,c
  5556                           
  5557                           ;Lab8_redo.c: 842: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  5558  000B74  5051               	movf	_SW_EWLT,w,c
  5559  000B76  A4D8               	btfss	status,2,c
  5560  000B78  D002               	goto	l4648
  5561  000B7A  0E30               	movlw	48
  5562  000B7C  D001               	goto	L6
  5563  000B7E                     l4648:
  5564  000B7E  0E31               	movlw	49
  5565  000B80                     L6:
  5566  000B80  6E68               	movwf	_SW_EWLT_Txt,c
  5567                           
  5568                           ;Lab8_redo.c: 844: if (FLASHING_REQUEST == 0) FlashingR_Txt[0] = '0'; else FlashingR_Txt
      +                          [0] = '1';
  5569  000B82  504E               	movf	_FLASHING_REQUEST,w,c
  5570  000B84  A4D8               	btfss	status,2,c
  5571  000B86  D002               	goto	l4652
  5572  000B88  0E30               	movlw	48
  5573  000B8A  D001               	goto	L7
  5574  000B8C                     l4652:
  5575  000B8C  0E31               	movlw	49
  5576  000B8E                     L7:
  5577  000B8E  6E64               	movwf	_FlashingR_Txt,c
  5578                           
  5579                           ;Lab8_redo.c: 845: if (FLASHING == 0) FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1
      +                          ';
  5580  000B90  504D               	movf	_FLASHING,w,c
  5581  000B92  A4D8               	btfss	status,2,c
  5582  000B94  D002               	goto	l4656
  5583  000B96  0E30               	movlw	48
  5584  000B98  D001               	goto	L8
  5585  000B9A                     l4656:
  5586  000B9A  0E31               	movlw	49
  5587  000B9C                     L8:
  5588  000B9C  6E66               	movwf	_FlashingS_Txt,c
  5589  000B9E  D000               	goto	l4658
  5590  000BA0                     l4658:
  5591                           
  5592                           ;Lab8_redo.c: 850: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  5593  000BA0  0E0A               	movlw	10
  5594  000BA2  6E37               	movwf	drawtext@y,c
  5595  000BA4  0E62               	movlw	low _Act_Mode_Txt
  5596  000BA6  6E38               	movwf	drawtext@_text,c
  5597  000BA8  0E00               	movlw	high _Act_Mode_Txt
  5598  000BAA  6E39               	movwf	drawtext@_text+1,c
  5599  000BAC  0EFF               	movlw	255
  5600  000BAE  6E3B               	movwf	drawtext@color+1,c
  5601  000BB0  683A               	setf	drawtext@color,c
  5602  000BB2  0E00               	movlw	0
  5603  000BB4  6E3D               	movwf	drawtext@bg+1,c
  5604  000BB6  0E00               	movlw	0
  5605  000BB8  6E3C               	movwf	drawtext@bg,c
  5606  000BBA  0E01               	movlw	1
  5607  000BBC  6E3E               	movwf	drawtext@size,c
  5608  000BBE  0E23               	movlw	35
  5609  000BC0  ECCC  F009         	call	_drawtext
  5610                           
  5611                           ;Lab8_redo.c: 851: drawtext(70,10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  5612  000BC4  0E0A               	movlw	10
  5613  000BC6  6E37               	movwf	drawtext@y,c
  5614  000BC8  0E64               	movlw	low _FlashingR_Txt
  5615  000BCA  6E38               	movwf	drawtext@_text,c
  5616  000BCC  0E00               	movlw	high _FlashingR_Txt
  5617  000BCE  6E39               	movwf	drawtext@_text+1,c
  5618  000BD0  0EFF               	movlw	255
  5619  000BD2  6E3B               	movwf	drawtext@color+1,c
  5620  000BD4  683A               	setf	drawtext@color,c
  5621  000BD6  0E00               	movlw	0
  5622  000BD8  6E3D               	movwf	drawtext@bg+1,c
  5623  000BDA  0E00               	movlw	0
  5624  000BDC  6E3C               	movwf	drawtext@bg,c
  5625  000BDE  0E01               	movlw	1
  5626  000BE0  6E3E               	movwf	drawtext@size,c
  5627  000BE2  0E46               	movlw	70
  5628  000BE4  ECCC  F009         	call	_drawtext
  5629                           
  5630                           ;Lab8_redo.c: 852: drawtext(100,10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  5631  000BE8  0E0A               	movlw	10
  5632  000BEA  6E37               	movwf	drawtext@y,c
  5633  000BEC  0E66               	movlw	low _FlashingS_Txt
  5634  000BEE  6E38               	movwf	drawtext@_text,c
  5635  000BF0  0E00               	movlw	high _FlashingS_Txt
  5636  000BF2  6E39               	movwf	drawtext@_text+1,c
  5637  000BF4  0EFF               	movlw	255
  5638  000BF6  6E3B               	movwf	drawtext@color+1,c
  5639  000BF8  683A               	setf	drawtext@color,c
  5640  000BFA  0E00               	movlw	0
  5641  000BFC  6E3D               	movwf	drawtext@bg+1,c
  5642  000BFE  0E00               	movlw	0
  5643  000C00  6E3C               	movwf	drawtext@bg,c
  5644  000C02  0E01               	movlw	1
  5645  000C04  6E3E               	movwf	drawtext@size,c
  5646  000C06  0E64               	movlw	100
  5647  000C08  ECCC  F009         	call	_drawtext
  5648                           
  5649                           ;Lab8_redo.c: 853: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  5650  000C0C  0E95               	movlw	149
  5651  000C0E  6E37               	movwf	drawtext@y,c
  5652  000C10  0E70               	movlw	low _SW_NSPED_Txt
  5653  000C12  6E38               	movwf	drawtext@_text,c
  5654  000C14  0E00               	movlw	high _SW_NSPED_Txt
  5655  000C16  6E39               	movwf	drawtext@_text+1,c
  5656  000C18  0EFF               	movlw	255
  5657  000C1A  6E3B               	movwf	drawtext@color+1,c
  5658  000C1C  683A               	setf	drawtext@color,c
  5659  000C1E  0E00               	movlw	0
  5660  000C20  6E3D               	movwf	drawtext@bg+1,c
  5661  000C22  0E00               	movlw	0
  5662  000C24  6E3C               	movwf	drawtext@bg,c
  5663  000C26  0E01               	movlw	1
  5664  000C28  6E3E               	movwf	drawtext@size,c
  5665  000C2A  0E06               	movlw	6
  5666  000C2C  ECCC  F009         	call	_drawtext
  5667                           
  5668                           ;Lab8_redo.c: 854: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  5669  000C30  0E95               	movlw	149
  5670  000C32  6E37               	movwf	drawtext@y,c
  5671  000C34  0E6E               	movlw	low _SW_NSLT_Txt
  5672  000C36  6E38               	movwf	drawtext@_text,c
  5673  000C38  0E00               	movlw	high _SW_NSLT_Txt
  5674  000C3A  6E39               	movwf	drawtext@_text+1,c
  5675  000C3C  0EFF               	movlw	255
  5676  000C3E  6E3B               	movwf	drawtext@color+1,c
  5677  000C40  683A               	setf	drawtext@color,c
  5678  000C42  0E00               	movlw	0
  5679  000C44  6E3D               	movwf	drawtext@bg+1,c
  5680  000C46  0E00               	movlw	0
  5681  000C48  6E3C               	movwf	drawtext@bg,c
  5682  000C4A  0E01               	movlw	1
  5683  000C4C  6E3E               	movwf	drawtext@size,c
  5684  000C4E  0E20               	movlw	32
  5685  000C50  ECCC  F009         	call	_drawtext
  5686                           
  5687                           ;Lab8_redo.c: 855: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  5688  000C54  0E95               	movlw	149
  5689  000C56  6E37               	movwf	drawtext@y,c
  5690  000C58  0E6A               	movlw	low _SW_EWPED_Txt
  5691  000C5A  6E38               	movwf	drawtext@_text,c
  5692  000C5C  0E00               	movlw	high _SW_EWPED_Txt
  5693  000C5E  6E39               	movwf	drawtext@_text+1,c
  5694  000C60  0EFF               	movlw	255
  5695  000C62  6E3B               	movwf	drawtext@color+1,c
  5696  000C64  683A               	setf	drawtext@color,c
  5697  000C66  0E00               	movlw	0
  5698  000C68  6E3D               	movwf	drawtext@bg+1,c
  5699  000C6A  0E00               	movlw	0
  5700  000C6C  6E3C               	movwf	drawtext@bg,c
  5701  000C6E  0E01               	movlw	1
  5702  000C70  6E3E               	movwf	drawtext@size,c
  5703  000C72  0E3A               	movlw	58
  5704  000C74  ECCC  F009         	call	_drawtext
  5705                           
  5706                           ;Lab8_redo.c: 856: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  5707  000C78  0E95               	movlw	149
  5708  000C7A  6E37               	movwf	drawtext@y,c
  5709  000C7C  0E68               	movlw	low _SW_EWLT_Txt
  5710  000C7E  6E38               	movwf	drawtext@_text,c
  5711  000C80  0E00               	movlw	high _SW_EWLT_Txt
  5712  000C82  6E39               	movwf	drawtext@_text+1,c
  5713  000C84  0EFF               	movlw	255
  5714  000C86  6E3B               	movwf	drawtext@color+1,c
  5715  000C88  683A               	setf	drawtext@color,c
  5716  000C8A  0E00               	movlw	0
  5717  000C8C  6E3D               	movwf	drawtext@bg+1,c
  5718  000C8E  0E00               	movlw	0
  5719  000C90  6E3C               	movwf	drawtext@bg,c
  5720  000C92  0E01               	movlw	1
  5721  000C94  6E3E               	movwf	drawtext@size,c
  5722  000C96  0E57               	movlw	87
  5723  000C98  ECCC  F009         	call	_drawtext
  5724                           
  5725                           ;Lab8_redo.c: 857: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  5726  000C9C  0E95               	movlw	149
  5727  000C9E  6E37               	movwf	drawtext@y,c
  5728  000CA0  0E6C               	movlw	low _SW_MODE_Txt
  5729  000CA2  6E38               	movwf	drawtext@_text,c
  5730  000CA4  0E00               	movlw	high _SW_MODE_Txt
  5731  000CA6  6E39               	movwf	drawtext@_text+1,c
  5732  000CA8  0EFF               	movlw	255
  5733  000CAA  6E3B               	movwf	drawtext@color+1,c
  5734  000CAC  683A               	setf	drawtext@color,c
  5735  000CAE  0E00               	movlw	0
  5736  000CB0  6E3D               	movwf	drawtext@bg+1,c
  5737  000CB2  0E00               	movlw	0
  5738  000CB4  6E3C               	movwf	drawtext@bg,c
  5739  000CB6  0E01               	movlw	1
  5740  000CB8  6E3E               	movwf	drawtext@size,c
  5741  000CBA  0E70               	movlw	112
  5742  000CBC  ECCC  F009         	call	_drawtext
  5743  000CC0  0012               	return		;funcret
  5744  000CC2                     __end_of_update_LCD_misc:
  5745                           	opt stack 0
  5746                           tblptru	equ	0xFF8
  5747                           tblptrh	equ	0xFF7
  5748                           tblptrl	equ	0xFF6
  5749                           tablat	equ	0xFF5
  5750                           intcon	equ	0xFF2
  5751                           intcon2	equ	0xFF1
  5752                           intcon3	equ	0xFF0
  5753                           postinc0	equ	0xFEE
  5754                           wreg	equ	0xFE8
  5755                           postdec1	equ	0xFE5
  5756                           fsr1l	equ	0xFE1
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _get_full_ADC *****************
  5760 ;; Defined at:
  5761 ;;		line 421 in file "Lab8_redo.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  result          2   18[COMRAM] unsigned int 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  2   14[COMRAM] unsigned int 
  5768 ;; Registers used:
  5769 ;;		wreg, status,2, status,0
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5775 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;Total ram usage:        6 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    2
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_main
  5786 ;;		_update_LCD_misc
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text24
  5791  0025A8                     __ptext24:
  5792                           	opt stack 0
  5793  0025A8                     _get_full_ADC:
  5794                           	opt stack 28
  5795                           
  5796                           ;Lab8_redo.c: 423: unsigned int result;
  5797                           ;Lab8_redo.c: 424: ADCON0bits.GO=1;
  5798                           
  5799                           ;incstack = 0
  5800  0025A8  82C2               	bsf	4034,1,c	;volatile
  5801                           
  5802                           ;Lab8_redo.c: 425: while(ADCON0bits.DONE==1);
  5803  0025AA  D000               	goto	l421
  5804  0025AC                     l421:
  5805  0025AC  B2C2               	btfsc	4034,1,c	;volatile
  5806  0025AE  D7FE               	goto	l421
  5807                           
  5808                           ;Lab8_redo.c: 426: result = (ADRESH * 0x100) + ADRESL;
  5809  0025B0  50C4               	movf	4036,w,c	;volatile
  5810  0025B2  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  5811  0025B4  6A11               	clrf	??_get_full_ADC& (0+255),c
  5812  0025B6  50C3               	movf	4035,w,c	;volatile
  5813  0025B8  2411               	addwf	??_get_full_ADC,w,c
  5814  0025BA  6E13               	movwf	get_full_ADC@result,c
  5815  0025BC  0E00               	movlw	0
  5816  0025BE  2012               	addwfc	??_get_full_ADC+1,w,c
  5817  0025C0  6E14               	movwf	get_full_ADC@result+1,c
  5818                           
  5819                           ;Lab8_redo.c: 428: return result;
  5820  0025C2  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  5821  0025C6  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5822  0025CA  D000               	goto	l424
  5823  0025CC                     l424:
  5824  0025CC  0012               	return		;funcret
  5825  0025CE                     __end_of_get_full_ADC:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           intcon	equ	0xFF2
  5832                           intcon2	equ	0xFF1
  5833                           intcon3	equ	0xFF0
  5834                           postinc0	equ	0xFEE
  5835                           wreg	equ	0xFE8
  5836                           postdec1	equ	0xFE5
  5837                           fsr1l	equ	0xFE1
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function ___ftge *****************
  5841 ;; Defined at:
  5842 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  ff1             3   14[COMRAM] float 
  5845 ;;  ff2             3   17[COMRAM] float 
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;		None
  5848 ;; Return value:  Size  Location     Type
  5849 ;;		None               void
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, status,0
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5857 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;Total ram usage:        9 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    2
  5864 ;; This function calls:
  5865 ;;		Nothing
  5866 ;; This function is called by:
  5867 ;;		_main
  5868 ;;		_update_LCD_misc
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text25
  5873  001B14                     __ptext25:
  5874                           	opt stack 0
  5875  001B14                     ___ftge:
  5876                           	opt stack 28
  5877                           
  5878                           ;incstack = 0
  5879  001B14  AE11               	btfss	___ftge@ff1+2,7,c
  5880  001B16  D017               	goto	l4516
  5881  001B18  C00F  F015         	movff	___ftge@ff1,??___ftge
  5882  001B1C  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  5883  001B20  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  5884  001B24  1E15               	comf	??___ftge,f,c
  5885  001B26  1E16               	comf	??___ftge+1,f,c
  5886  001B28  1E17               	comf	??___ftge+2,f,c
  5887  001B2A  2A15               	incf	??___ftge,f,c
  5888  001B2C  0E00               	movlw	0
  5889  001B2E  2216               	addwfc	??___ftge+1,f,c
  5890  001B30  2217               	addwfc	??___ftge+2,f,c
  5891  001B32  0E00               	movlw	0
  5892  001B34  2415               	addwf	??___ftge,w,c
  5893  001B36  6E0F               	movwf	___ftge@ff1,c
  5894  001B38  0E00               	movlw	0
  5895  001B3A  2016               	addwfc	??___ftge+1,w,c
  5896  001B3C  6E10               	movwf	___ftge@ff1+1,c
  5897  001B3E  0E80               	movlw	128
  5898  001B40  2017               	addwfc	??___ftge+2,w,c
  5899  001B42  6E11               	movwf	___ftge@ff1+2,c
  5900  001B44  D000               	goto	l4516
  5901  001B46                     l4516:
  5902  001B46  AE14               	btfss	___ftge@ff2+2,7,c
  5903  001B48  D017               	goto	l4520
  5904  001B4A  C012  F015         	movff	___ftge@ff2,??___ftge
  5905  001B4E  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  5906  001B52  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  5907  001B56  1E15               	comf	??___ftge,f,c
  5908  001B58  1E16               	comf	??___ftge+1,f,c
  5909  001B5A  1E17               	comf	??___ftge+2,f,c
  5910  001B5C  2A15               	incf	??___ftge,f,c
  5911  001B5E  0E00               	movlw	0
  5912  001B60  2216               	addwfc	??___ftge+1,f,c
  5913  001B62  2217               	addwfc	??___ftge+2,f,c
  5914  001B64  0E00               	movlw	0
  5915  001B66  2415               	addwf	??___ftge,w,c
  5916  001B68  6E12               	movwf	___ftge@ff2,c
  5917  001B6A  0E00               	movlw	0
  5918  001B6C  2016               	addwfc	??___ftge+1,w,c
  5919  001B6E  6E13               	movwf	___ftge@ff2+1,c
  5920  001B70  0E80               	movlw	128
  5921  001B72  2017               	addwfc	??___ftge+2,w,c
  5922  001B74  6E14               	movwf	___ftge@ff2+2,c
  5923  001B76  D000               	goto	l4520
  5924  001B78                     l4520:
  5925  001B78  0E00               	movlw	0
  5926  001B7A  1A0F               	xorwf	___ftge@ff1,f,c
  5927  001B7C  0E00               	movlw	0
  5928  001B7E  1A10               	xorwf	___ftge@ff1+1,f,c
  5929  001B80  0E80               	movlw	128
  5930  001B82  1A11               	xorwf	___ftge@ff1+2,f,c
  5931  001B84  0E00               	movlw	0
  5932  001B86  1A12               	xorwf	___ftge@ff2,f,c
  5933  001B88  0E00               	movlw	0
  5934  001B8A  1A13               	xorwf	___ftge@ff2+1,f,c
  5935  001B8C  0E80               	movlw	128
  5936  001B8E  1A14               	xorwf	___ftge@ff2+2,f,c
  5937  001B90  5012               	movf	___ftge@ff2,w,c
  5938  001B92  5C0F               	subwf	___ftge@ff1,w,c
  5939  001B94  5013               	movf	___ftge@ff2+1,w,c
  5940  001B96  5810               	subwfb	___ftge@ff1+1,w,c
  5941  001B98  5014               	movf	___ftge@ff2+2,w,c
  5942  001B9A  5811               	subwfb	___ftge@ff1+2,w,c
  5943  001B9C  B0D8               	btfsc	status,0,c
  5944  001B9E  D002               	goto	l4526
  5945  001BA0  90D8               	bcf	status,0,c
  5946  001BA2  D002               	goto	l980
  5947  001BA4                     l4526:
  5948  001BA4  80D8               	bsf	status,0,c
  5949  001BA6  D000               	goto	l980
  5950  001BA8                     l980:
  5951  001BA8  0012               	return		;funcret
  5952  001BAA                     __end_of___ftge:
  5953                           	opt stack 0
  5954                           tblptru	equ	0xFF8
  5955                           tblptrh	equ	0xFF7
  5956                           tblptrl	equ	0xFF6
  5957                           tablat	equ	0xFF5
  5958                           intcon	equ	0xFF2
  5959                           intcon2	equ	0xFF1
  5960                           intcon3	equ	0xFF0
  5961                           postinc0	equ	0xFEE
  5962                           wreg	equ	0xFE8
  5963                           postdec1	equ	0xFE5
  5964                           fsr1l	equ	0xFE1
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function ___ftdiv *****************
  5968 ;; Defined at:
  5969 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  f1              3   26[COMRAM] float 
  5972 ;;  f2              3   29[COMRAM] float 
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;  f3              3   36[COMRAM] float 
  5975 ;;  sign            1   40[COMRAM] unsigned char 
  5976 ;;  exp             1   39[COMRAM] unsigned char 
  5977 ;;  cntr            1   35[COMRAM] unsigned char 
  5978 ;; Return value:  Size  Location     Type
  5979 ;;                  3   26[COMRAM] float 
  5980 ;; Registers used:
  5981 ;;		wreg, status,2, status,0, cstack
  5982 ;; Tracked objects:
  5983 ;;		On entry : 0/0
  5984 ;;		On exit  : 0/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5987 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;Total ram usage:       15 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; Hardware stack levels required when called:    3
  5994 ;; This function calls:
  5995 ;;		___ftpack
  5996 ;; This function is called by:
  5997 ;;		_main
  5998 ;;		_update_LCD_misc
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text26
  6003  001594                     __ptext26:
  6004                           	opt stack 0
  6005  001594                     ___ftdiv:
  6006                           	opt stack 27
  6007                           
  6008                           ;incstack = 0
  6009  001594  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  6010  001598  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  6011  00159A  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  6012  00159C  341C               	rlcf	___ftdiv@f1+1,w,c
  6013  00159E  3621               	rlcf	??___ftdiv& (0+255),f,c
  6014  0015A0  E301               	bnc	u3201
  6015  0015A2  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  6016  0015A4                     u3201:
  6017  0015A4  5021               	movf	??___ftdiv,w,c
  6018  0015A6  6E28               	movwf	___ftdiv@exp,c
  6019  0015A8  5028               	movf	___ftdiv@exp,w,c
  6020  0015AA  A4D8               	btfss	status,2,c
  6021  0015AC  D002               	goto	l4460
  6022  0015AE  D00E               	goto	l4462
  6023  0015B0  D061               	goto	l971
  6024  0015B2                     l4460:
  6025  0015B2  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  6026  0015B6  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  6027  0015B8  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  6028  0015BA  341F               	rlcf	___ftdiv@f2+1,w,c
  6029  0015BC  3621               	rlcf	??___ftdiv& (0+255),f,c
  6030  0015BE  E301               	bnc	u3221
  6031  0015C0  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  6032  0015C2                     u3221:
  6033  0015C2  5021               	movf	??___ftdiv,w,c
  6034  0015C4  6E29               	movwf	___ftdiv@sign,c
  6035  0015C6  5029               	movf	___ftdiv@sign,w,c
  6036  0015C8  A4D8               	btfss	status,2,c
  6037  0015CA  D007               	goto	l4466
  6038  0015CC                     l4462:
  6039  0015CC  0E00               	movlw	0
  6040  0015CE  6E1B               	movwf	?___ftdiv,c
  6041  0015D0  0E00               	movlw	0
  6042  0015D2  6E1C               	movwf	?___ftdiv+1,c
  6043  0015D4  0E00               	movlw	0
  6044  0015D6  6E1D               	movwf	?___ftdiv+2,c
  6045  0015D8  D04D               	goto	l971
  6046  0015DA                     l4466:
  6047  0015DA  0E00               	movlw	0
  6048  0015DC  6E25               	movwf	___ftdiv@f3,c
  6049  0015DE  0E00               	movlw	0
  6050  0015E0  6E26               	movwf	___ftdiv@f3+1,c
  6051  0015E2  0E00               	movlw	0
  6052  0015E4  6E27               	movwf	___ftdiv@f3+2,c
  6053  0015E6  5029               	movf	___ftdiv@sign,w,c
  6054  0015E8  0F89               	addlw	137
  6055  0015EA  5E28               	subwf	___ftdiv@exp,f,c
  6056  0015EC  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  6057  0015F0  5020               	movf	___ftdiv@f2+2,w,c
  6058  0015F2  1A29               	xorwf	___ftdiv@sign,f,c
  6059  0015F4  0E80               	movlw	128
  6060  0015F6  1629               	andwf	___ftdiv@sign,f,c
  6061  0015F8  8E1C               	bsf	___ftdiv@f1+1,7,c
  6062  0015FA  0EFF               	movlw	255
  6063  0015FC  161B               	andwf	___ftdiv@f1,f,c
  6064  0015FE  0EFF               	movlw	255
  6065  001600  161C               	andwf	___ftdiv@f1+1,f,c
  6066  001602  0E00               	movlw	0
  6067  001604  161D               	andwf	___ftdiv@f1+2,f,c
  6068  001606  8E1F               	bsf	___ftdiv@f2+1,7,c
  6069  001608  0EFF               	movlw	255
  6070  00160A  161E               	andwf	___ftdiv@f2,f,c
  6071  00160C  0EFF               	movlw	255
  6072  00160E  161F               	andwf	___ftdiv@f2+1,f,c
  6073  001610  0E00               	movlw	0
  6074  001612  1620               	andwf	___ftdiv@f2+2,f,c
  6075  001614  0E18               	movlw	24
  6076  001616  6E24               	movwf	___ftdiv@cntr,c
  6077  001618  D000               	goto	l4486
  6078  00161A                     l4486:
  6079  00161A  90D8               	bcf	status,0,c
  6080  00161C  3625               	rlcf	___ftdiv@f3,f,c
  6081  00161E  3626               	rlcf	___ftdiv@f3+1,f,c
  6082  001620  3627               	rlcf	___ftdiv@f3+2,f,c
  6083  001622  501E               	movf	___ftdiv@f2,w,c
  6084  001624  5C1B               	subwf	___ftdiv@f1,w,c
  6085  001626  501F               	movf	___ftdiv@f2+1,w,c
  6086  001628  581C               	subwfb	___ftdiv@f1+1,w,c
  6087  00162A  5020               	movf	___ftdiv@f2+2,w,c
  6088  00162C  581D               	subwfb	___ftdiv@f1+2,w,c
  6089  00162E  A0D8               	btfss	status,0,c
  6090  001630  D007               	goto	l974
  6091  001632  501E               	movf	___ftdiv@f2,w,c
  6092  001634  5E1B               	subwf	___ftdiv@f1,f,c
  6093  001636  501F               	movf	___ftdiv@f2+1,w,c
  6094  001638  5A1C               	subwfb	___ftdiv@f1+1,f,c
  6095  00163A  5020               	movf	___ftdiv@f2+2,w,c
  6096  00163C  5A1D               	subwfb	___ftdiv@f1+2,f,c
  6097  00163E  8025               	bsf	___ftdiv@f3,0,c
  6098  001640                     l974:
  6099  001640  90D8               	bcf	status,0,c
  6100  001642  361B               	rlcf	___ftdiv@f1,f,c
  6101  001644  361C               	rlcf	___ftdiv@f1+1,f,c
  6102  001646  361D               	rlcf	___ftdiv@f1+2,f,c
  6103  001648  2E24               	decfsz	___ftdiv@cntr,f,c
  6104  00164A  D7E7               	goto	l4486
  6105  00164C  D000               	goto	l4496
  6106  00164E                     l4496:
  6107  00164E  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  6108  001652  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6109  001656  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6110  00165A  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  6111  00165E  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  6112  001662  EC76  F00C         	call	___ftpack	;wreg free
  6113  001666  C00F  F01B         	movff	?___ftpack,?___ftdiv
  6114  00166A  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  6115  00166E  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  6116  001672  D000               	goto	l971
  6117  001674                     l971:
  6118  001674  0012               	return		;funcret
  6119  001676                     __end_of___ftdiv:
  6120                           	opt stack 0
  6121                           tblptru	equ	0xFF8
  6122                           tblptrh	equ	0xFF7
  6123                           tblptrl	equ	0xFF6
  6124                           tablat	equ	0xFF5
  6125                           intcon	equ	0xFF2
  6126                           intcon2	equ	0xFF1
  6127                           intcon3	equ	0xFF0
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           postdec1	equ	0xFE5
  6131                           fsr1l	equ	0xFE1
  6132                           status	equ	0xFD8
  6133                           
  6134 ;; *************** function ___awtoft *****************
  6135 ;; Defined at:
  6136 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  c               2   22[COMRAM] int 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  sign            1   25[COMRAM] unsigned char 
  6141 ;; Return value:  Size  Location     Type
  6142 ;;                  3   22[COMRAM] float 
  6143 ;; Registers used:
  6144 ;;		wreg, status,2, status,0, cstack
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6150 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;Total ram usage:        4 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:    3
  6157 ;; This function calls:
  6158 ;;		___ftpack
  6159 ;; This function is called by:
  6160 ;;		_main
  6161 ;;		_update_LCD_misc
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           	psect	text27
  6166  00245C                     __ptext27:
  6167                           	opt stack 0
  6168  00245C                     ___awtoft:
  6169                           	opt stack 27
  6170                           
  6171                           ;incstack = 0
  6172  00245C  0E00               	movlw	0
  6173  00245E  6E1A               	movwf	___awtoft@sign,c
  6174  002460  AE18               	btfss	___awtoft@c+1,7,c
  6175  002462  D007               	goto	l4508
  6176  002464  6C17               	negf	___awtoft@c,c
  6177  002466  1E18               	comf	___awtoft@c+1,f,c
  6178  002468  B0D8               	btfsc	status,0,c
  6179  00246A  2A18               	incf	___awtoft@c+1,f,c
  6180  00246C  0E01               	movlw	1
  6181  00246E  6E1A               	movwf	___awtoft@sign,c
  6182  002470  D000               	goto	l4508
  6183  002472                     l4508:
  6184  002472  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  6185  002476  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  6186  00247A  6A11               	clrf	___ftpack@arg+2,c
  6187  00247C  0E8E               	movlw	142
  6188  00247E  6E12               	movwf	___ftpack@exp,c
  6189  002480  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  6190  002484  EC76  F00C         	call	___ftpack	;wreg free
  6191  002488  C00F  F017         	movff	?___ftpack,?___awtoft
  6192  00248C  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  6193  002490  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  6194  002494  D000               	goto	l809
  6195  002496                     l809:
  6196  002496  0012               	return		;funcret
  6197  002498                     __end_of___awtoft:
  6198                           	opt stack 0
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           intcon	equ	0xFF2
  6204                           intcon2	equ	0xFF1
  6205                           intcon3	equ	0xFF0
  6206                           postinc0	equ	0xFEE
  6207                           wreg	equ	0xFE8
  6208                           postdec1	equ	0xFE5
  6209                           fsr1l	equ	0xFE1
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function ___ftpack *****************
  6213 ;; Defined at:
  6214 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  arg             3   14[COMRAM] unsigned um
  6217 ;;  exp             1   17[COMRAM] unsigned char 
  6218 ;;  sign            1   18[COMRAM] unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;		None
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  3   14[COMRAM] float 
  6223 ;; Registers used:
  6224 ;;		wreg, status,2, status,0
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6230 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6234 ;;Total ram usage:        8 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    2
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		___awtoft
  6241 ;;		___ftdiv
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           	psect	text28
  6246  0018EC                     __ptext28:
  6247                           	opt stack 0
  6248  0018EC                     ___ftpack:
  6249                           	opt stack 27
  6250                           
  6251                           ;incstack = 0
  6252  0018EC  5012               	movf	___ftpack@exp,w,c
  6253  0018EE  B4D8               	btfsc	status,2,c
  6254  0018F0  D005               	goto	l4346
  6255  0018F2  500F               	movf	___ftpack@arg,w,c
  6256  0018F4  1010               	iorwf	___ftpack@arg+1,w,c
  6257  0018F6  1011               	iorwf	___ftpack@arg+2,w,c
  6258  0018F8  A4D8               	btfss	status,2,c
  6259  0018FA  D00E               	goto	l4352
  6260  0018FC                     l4346:
  6261  0018FC  0E00               	movlw	0
  6262  0018FE  6E0F               	movwf	?___ftpack,c
  6263  001900  0E00               	movlw	0
  6264  001902  6E10               	movwf	?___ftpack+1,c
  6265  001904  0E00               	movlw	0
  6266  001906  6E11               	movwf	?___ftpack+2,c
  6267  001908  D053               	goto	l899
  6268  00190A  D006               	goto	l4352
  6269  00190C                     l4350:
  6270  00190C  2A12               	incf	___ftpack@exp,f,c
  6271  00190E  90D8               	bcf	status,0,c
  6272  001910  3211               	rrcf	___ftpack@arg+2,f,c
  6273  001912  3210               	rrcf	___ftpack@arg+1,f,c
  6274  001914  320F               	rrcf	___ftpack@arg,f,c
  6275  001916  D000               	goto	l4352
  6276  001918                     l4352:
  6277  001918  0E00               	movlw	0
  6278  00191A  140F               	andwf	___ftpack@arg,w,c
  6279  00191C  6E14               	movwf	??___ftpack& (0+255),c
  6280  00191E  0E00               	movlw	0
  6281  001920  1410               	andwf	___ftpack@arg+1,w,c
  6282  001922  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6283  001924  0EFE               	movlw	254
  6284  001926  1411               	andwf	___ftpack@arg+2,w,c
  6285  001928  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6286  00192A  5014               	movf	??___ftpack,w,c
  6287  00192C  1015               	iorwf	??___ftpack+1,w,c
  6288  00192E  1016               	iorwf	??___ftpack+2,w,c
  6289  001930  B4D8               	btfsc	status,2,c
  6290  001932  D00E               	goto	l4358
  6291  001934  D7EB               	goto	l4350
  6292  001936  D00C               	goto	l4358
  6293  001938                     l4354:
  6294  001938  2A12               	incf	___ftpack@exp,f,c
  6295  00193A  0E01               	movlw	1
  6296  00193C  260F               	addwf	___ftpack@arg,f,c
  6297  00193E  0E00               	movlw	0
  6298  001940  2210               	addwfc	___ftpack@arg+1,f,c
  6299  001942  0E00               	movlw	0
  6300  001944  2211               	addwfc	___ftpack@arg+2,f,c
  6301  001946  90D8               	bcf	status,0,c
  6302  001948  3211               	rrcf	___ftpack@arg+2,f,c
  6303  00194A  3210               	rrcf	___ftpack@arg+1,f,c
  6304  00194C  320F               	rrcf	___ftpack@arg,f,c
  6305  00194E  D000               	goto	l4358
  6306  001950                     l4358:
  6307  001950  0E00               	movlw	0
  6308  001952  140F               	andwf	___ftpack@arg,w,c
  6309  001954  6E14               	movwf	??___ftpack& (0+255),c
  6310  001956  0E00               	movlw	0
  6311  001958  1410               	andwf	___ftpack@arg+1,w,c
  6312  00195A  6E15               	movwf	(??___ftpack+1)& (0+255),c
  6313  00195C  0EFF               	movlw	255
  6314  00195E  1411               	andwf	___ftpack@arg+2,w,c
  6315  001960  6E16               	movwf	(??___ftpack+2)& (0+255),c
  6316  001962  5014               	movf	??___ftpack,w,c
  6317  001964  1015               	iorwf	??___ftpack+1,w,c
  6318  001966  1016               	iorwf	??___ftpack+2,w,c
  6319  001968  B4D8               	btfsc	status,2,c
  6320  00196A  D008               	goto	l4362
  6321  00196C  D7E5               	goto	l4354
  6322  00196E  D006               	goto	l4362
  6323  001970                     l4360:
  6324  001970  0612               	decf	___ftpack@exp,f,c
  6325  001972  90D8               	bcf	status,0,c
  6326  001974  360F               	rlcf	___ftpack@arg,f,c
  6327  001976  3610               	rlcf	___ftpack@arg+1,f,c
  6328  001978  3611               	rlcf	___ftpack@arg+2,f,c
  6329  00197A  D000               	goto	l4362
  6330  00197C                     l4362:
  6331  00197C  BE10               	btfsc	___ftpack@arg+1,7,c
  6332  00197E  D004               	goto	l910
  6333  001980  0E02               	movlw	2
  6334  001982  6012               	cpfslt	___ftpack@exp,c
  6335  001984  D7F5               	goto	l4360
  6336  001986  D000               	goto	l910
  6337  001988                     l910:
  6338  001988  B012               	btfsc	___ftpack@exp,0,c
  6339  00198A  D002               	goto	l4368
  6340  00198C  9E10               	bcf	___ftpack@arg+1,7,c
  6341  00198E  D000               	goto	l4368
  6342  001990                     l4368:
  6343  001990  90D8               	bcf	status,0,c
  6344  001992  3212               	rrcf	___ftpack@exp,f,c
  6345  001994  5012               	movf	___ftpack@exp,w,c
  6346  001996  1211               	iorwf	___ftpack@arg+2,f,c
  6347  001998  5013               	movf	___ftpack@sign,w,c
  6348  00199A  B4D8               	btfsc	status,2,c
  6349  00199C  D002               	goto	l4374
  6350  00199E  8E11               	bsf	___ftpack@arg+2,7,c
  6351  0019A0  D000               	goto	l4374
  6352  0019A2                     l4374:
  6353  0019A2  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  6354  0019A6  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  6355  0019AA  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  6356  0019AE  D000               	goto	l899
  6357  0019B0                     l899:
  6358  0019B0  0012               	return		;funcret
  6359  0019B2                     __end_of___ftpack:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           intcon	equ	0xFF2
  6366                           intcon2	equ	0xFF1
  6367                           intcon3	equ	0xFF0
  6368                           postinc0	equ	0xFEE
  6369                           wreg	equ	0xFE8
  6370                           postdec1	equ	0xFE5
  6371                           fsr1l	equ	0xFE1
  6372                           status	equ	0xFD8
  6373                           
  6374 ;; *************** function _Set_NS_LT *****************
  6375 ;; Defined at:
  6376 ;;		line 445 in file "Lab8_redo.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  color           1    wreg     unsigned char 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;  color           1    2[BANK0 ] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;		None               void
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;Total ram usage:        1 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    9
  6397 ;; This function calls:
  6398 ;;		_update_LCD_color
  6399 ;; This function is called by:
  6400 ;;		_Day_Mode
  6401 ;;		_Night_Mode
  6402 ;;		_Do_Flashing
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text29
  6407  0022C0                     __ptext29:
  6408                           	opt stack 0
  6409  0022C0                     _Set_NS_LT:
  6410                           	opt stack 20
  6411                           
  6412                           ;incstack = 0
  6413                           ;Set_NS_LT@color stored from wreg
  6414  0022C0  0100               	movlb	0	; () banked
  6415  0022C2  6FA7               	movwf	Set_NS_LT@color& (0+255),b
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;Lab8_redo.c: 447: direction = 1;
  6419  0022C4  0E01               	movlw	1
  6420  0022C6  6E59               	movwf	_direction,c
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;Lab8_redo.c: 448: update_LCD_color(direction, color);
  6424  0022C8  C0A7  F041         	movff	Set_NS_LT@color,update_LCD_color@color
  6425  0022CC  5059               	movf	_direction,w,c
  6426  0022CE  EC9D  F003         	call	_update_LCD_color
  6427                           
  6428                           ;Lab8_redo.c: 450: switch (color)
  6429  0022D2  D00A               	goto	l5092
  6430  0022D4                     l437:
  6431                           
  6432                           ; BSR set to: 0
  6433  0022D4  9082               	bcf	3970,0,c	;volatile
  6434  0022D6  D001               	goto	L9
  6435  0022D8                     l439:
  6436                           
  6437                           ; BSR set to: 0
  6438  0022D8  8082               	bsf	3970,0,c	;volatile
  6439  0022DA                     L9:
  6440  0022DA  9282               	bcf	3970,1,c	;volatile
  6441  0022DC  D014               	goto	l442
  6442  0022DE                     l440:
  6443                           
  6444                           ; BSR set to: 0
  6445  0022DE  9082               	bcf	3970,0,c	;volatile
  6446  0022E0  D001               	goto	L10
  6447  0022E2                     l441:
  6448                           
  6449                           ; BSR set to: 0
  6450  0022E2  8082               	bsf	3970,0,c	;volatile
  6451  0022E4                     L10:
  6452  0022E4  8282               	bsf	3970,1,c	;volatile
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;Lab8_redo.c: 456: }
  6456  0022E6  D00F               	goto	l442
  6457  0022E8                     l5092:
  6458  0022E8  0100               	movlb	0	; () banked
  6459  0022EA  51A7               	movf	Set_NS_LT@color& (0+255),w,b
  6460                           
  6461                           ; Switch size 1, requested type "space"
  6462                           ; Number of cases is 4, Range of values is 0 to 3
  6463                           ; switch strategies available:
  6464                           ; Name         Instructions Cycles
  6465                           ; simple_byte           13     7 (average)
  6466                           ;	Chosen strategy is simple_byte
  6467  0022EC  0A00               	xorlw	0	; case 0
  6468  0022EE  B4D8               	btfsc	status,2,c
  6469  0022F0  D7F1               	goto	l437
  6470  0022F2  0A01               	xorlw	1	; case 1
  6471  0022F4  B4D8               	btfsc	status,2,c
  6472  0022F6  D7F0               	goto	l439
  6473  0022F8  0A03               	xorlw	3	; case 2
  6474  0022FA  B4D8               	btfsc	status,2,c
  6475  0022FC  D7F0               	goto	l440
  6476  0022FE  0A01               	xorlw	1	; case 3
  6477  002300  B4D8               	btfsc	status,2,c
  6478  002302  D7EF               	goto	l441
  6479  002304  D000               	goto	l442
  6480  002306                     l442:
  6481                           
  6482                           ; BSR set to: 0
  6483  002306  0012               	return		;funcret
  6484  002308                     __end_of_Set_NS_LT:
  6485                           	opt stack 0
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           intcon	equ	0xFF2
  6491                           intcon2	equ	0xFF1
  6492                           intcon3	equ	0xFF0
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           postdec1	equ	0xFE5
  6496                           fsr1l	equ	0xFE1
  6497                           status	equ	0xFD8
  6498                           
  6499 ;; *************** function _Set_NS *****************
  6500 ;; Defined at:
  6501 ;;		line 431 in file "Lab8_redo.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  color           1    wreg     unsigned char 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  color           1    2[BANK0 ] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;		None               void
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;Total ram usage:        1 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    9
  6522 ;; This function calls:
  6523 ;;		_update_LCD_color
  6524 ;; This function is called by:
  6525 ;;		_Day_Mode
  6526 ;;		_Night_Mode
  6527 ;;		_Do_Flashing
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text30
  6532  002308                     __ptext30:
  6533                           	opt stack 0
  6534  002308                     _Set_NS:
  6535                           	opt stack 20
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;incstack = 0
  6539                           ;Set_NS@color stored from wreg
  6540  002308  0100               	movlb	0	; () banked
  6541  00230A  6FA7               	movwf	Set_NS@color& (0+255),b
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;Lab8_redo.c: 433: direction = 0;
  6545  00230C  0E00               	movlw	0
  6546  00230E  6E59               	movwf	_direction,c
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;Lab8_redo.c: 434: update_LCD_color(direction, color);
  6550  002310  C0A7  F041         	movff	Set_NS@color,update_LCD_color@color
  6551  002314  5059               	movf	_direction,w,c
  6552  002316  EC9D  F003         	call	_update_LCD_color
  6553                           
  6554                           ;Lab8_redo.c: 436: switch (color)
  6555  00231A  D00A               	goto	l5084
  6556  00231C                     l428:
  6557                           
  6558                           ; BSR set to: 0
  6559  00231C  9881               	bcf	3969,4,c	;volatile
  6560  00231E  D001               	goto	L11
  6561  002320                     l430:
  6562                           
  6563                           ; BSR set to: 0
  6564  002320  8881               	bsf	3969,4,c	;volatile
  6565  002322                     L11:
  6566  002322  9A81               	bcf	3969,5,c	;volatile
  6567  002324  D014               	goto	l433
  6568  002326                     l431:
  6569                           
  6570                           ; BSR set to: 0
  6571  002326  9881               	bcf	3969,4,c	;volatile
  6572  002328  D001               	goto	L12
  6573  00232A                     l432:
  6574                           
  6575                           ; BSR set to: 0
  6576  00232A  8881               	bsf	3969,4,c	;volatile
  6577  00232C                     L12:
  6578  00232C  8A81               	bsf	3969,5,c	;volatile
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;Lab8_redo.c: 442: }
  6582  00232E  D00F               	goto	l433
  6583  002330                     l5084:
  6584  002330  0100               	movlb	0	; () banked
  6585  002332  51A7               	movf	Set_NS@color& (0+255),w,b
  6586                           
  6587                           ; Switch size 1, requested type "space"
  6588                           ; Number of cases is 4, Range of values is 0 to 3
  6589                           ; switch strategies available:
  6590                           ; Name         Instructions Cycles
  6591                           ; simple_byte           13     7 (average)
  6592                           ;	Chosen strategy is simple_byte
  6593  002334  0A00               	xorlw	0	; case 0
  6594  002336  B4D8               	btfsc	status,2,c
  6595  002338  D7F1               	goto	l428
  6596  00233A  0A01               	xorlw	1	; case 1
  6597  00233C  B4D8               	btfsc	status,2,c
  6598  00233E  D7F0               	goto	l430
  6599  002340  0A03               	xorlw	3	; case 2
  6600  002342  B4D8               	btfsc	status,2,c
  6601  002344  D7F0               	goto	l431
  6602  002346  0A01               	xorlw	1	; case 3
  6603  002348  B4D8               	btfsc	status,2,c
  6604  00234A  D7EF               	goto	l432
  6605  00234C  D000               	goto	l433
  6606  00234E                     l433:
  6607                           
  6608                           ; BSR set to: 0
  6609  00234E  0012               	return		;funcret
  6610  002350                     __end_of_Set_NS:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           intcon	equ	0xFF2
  6617                           intcon2	equ	0xFF1
  6618                           intcon3	equ	0xFF0
  6619                           postinc0	equ	0xFEE
  6620                           wreg	equ	0xFE8
  6621                           postdec1	equ	0xFE5
  6622                           fsr1l	equ	0xFE1
  6623                           status	equ	0xFD8
  6624                           
  6625 ;; *************** function _Set_EW_LT *****************
  6626 ;; Defined at:
  6627 ;;		line 473 in file "Lab8_redo.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;  color           1    wreg     unsigned char 
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;  color           1    2[BANK0 ] unsigned char 
  6632 ;; Return value:  Size  Location     Type
  6633 ;;		None               void
  6634 ;; Registers used:
  6635 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;Total ram usage:        1 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:    9
  6648 ;; This function calls:
  6649 ;;		_update_LCD_color
  6650 ;; This function is called by:
  6651 ;;		_Day_Mode
  6652 ;;		_Night_Mode
  6653 ;;		_Do_Flashing
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text31
  6658  002350                     __ptext31:
  6659                           	opt stack 0
  6660  002350                     _Set_EW_LT:
  6661                           	opt stack 20
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;incstack = 0
  6665                           ;Set_EW_LT@color stored from wreg
  6666  002350  0100               	movlb	0	; () banked
  6667  002352  6FA7               	movwf	Set_EW_LT@color& (0+255),b
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;Lab8_redo.c: 475: direction = 3;
  6671  002354  0E03               	movlw	3
  6672  002356  6E59               	movwf	_direction,c
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;Lab8_redo.c: 476: update_LCD_color(direction, color);
  6676  002358  C0A7  F041         	movff	Set_EW_LT@color,update_LCD_color@color
  6677  00235C  5059               	movf	_direction,w,c
  6678  00235E  EC9D  F003         	call	_update_LCD_color
  6679                           
  6680                           ;Lab8_redo.c: 478: switch (color)
  6681  002362  D00A               	goto	l5108
  6682  002364                     l455:
  6683                           
  6684                           ; BSR set to: 0
  6685  002364  9284               	bcf	3972,1,c	;volatile
  6686  002366  D001               	goto	L13
  6687  002368                     l457:
  6688                           
  6689                           ; BSR set to: 0
  6690  002368  8284               	bsf	3972,1,c	;volatile
  6691  00236A                     L13:
  6692  00236A  9484               	bcf	3972,2,c	;volatile
  6693  00236C  D014               	goto	l460
  6694  00236E                     l458:
  6695                           
  6696                           ; BSR set to: 0
  6697  00236E  9284               	bcf	3972,1,c	;volatile
  6698  002370  D001               	goto	L14
  6699  002372                     l459:
  6700                           
  6701                           ; BSR set to: 0
  6702  002372  8284               	bsf	3972,1,c	;volatile
  6703  002374                     L14:
  6704  002374  8484               	bsf	3972,2,c	;volatile
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;Lab8_redo.c: 484: }
  6708  002376  D00F               	goto	l460
  6709  002378                     l5108:
  6710  002378  0100               	movlb	0	; () banked
  6711  00237A  51A7               	movf	Set_EW_LT@color& (0+255),w,b
  6712                           
  6713                           ; Switch size 1, requested type "space"
  6714                           ; Number of cases is 4, Range of values is 0 to 3
  6715                           ; switch strategies available:
  6716                           ; Name         Instructions Cycles
  6717                           ; simple_byte           13     7 (average)
  6718                           ;	Chosen strategy is simple_byte
  6719  00237C  0A00               	xorlw	0	; case 0
  6720  00237E  B4D8               	btfsc	status,2,c
  6721  002380  D7F1               	goto	l455
  6722  002382  0A01               	xorlw	1	; case 1
  6723  002384  B4D8               	btfsc	status,2,c
  6724  002386  D7F0               	goto	l457
  6725  002388  0A03               	xorlw	3	; case 2
  6726  00238A  B4D8               	btfsc	status,2,c
  6727  00238C  D7F0               	goto	l458
  6728  00238E  0A01               	xorlw	1	; case 3
  6729  002390  B4D8               	btfsc	status,2,c
  6730  002392  D7EF               	goto	l459
  6731  002394  D000               	goto	l460
  6732  002396                     l460:
  6733                           
  6734                           ; BSR set to: 0
  6735  002396  0012               	return		;funcret
  6736  002398                     __end_of_Set_EW_LT:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           intcon	equ	0xFF2
  6743                           intcon2	equ	0xFF1
  6744                           intcon3	equ	0xFF0
  6745                           postinc0	equ	0xFEE
  6746                           wreg	equ	0xFE8
  6747                           postdec1	equ	0xFE5
  6748                           fsr1l	equ	0xFE1
  6749                           status	equ	0xFD8
  6750                           
  6751 ;; *************** function _Set_EW *****************
  6752 ;; Defined at:
  6753 ;;		line 459 in file "Lab8_redo.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;  color           1    wreg     unsigned char 
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  color           1    2[BANK0 ] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;Total ram usage:        1 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    9
  6774 ;; This function calls:
  6775 ;;		_update_LCD_color
  6776 ;; This function is called by:
  6777 ;;		_Day_Mode
  6778 ;;		_Night_Mode
  6779 ;;		_Do_Flashing
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           	psect	text32
  6784  002398                     __ptext32:
  6785                           	opt stack 0
  6786  002398                     _Set_EW:
  6787                           	opt stack 20
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;incstack = 0
  6791                           ;Set_EW@color stored from wreg
  6792  002398  0100               	movlb	0	; () banked
  6793  00239A  6FA7               	movwf	Set_EW@color& (0+255),b
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;Lab8_redo.c: 461: direction = 2;
  6797  00239C  0E02               	movlw	2
  6798  00239E  6E59               	movwf	_direction,c
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;Lab8_redo.c: 462: update_LCD_color(direction, color);
  6802  0023A0  C0A7  F041         	movff	Set_EW@color,update_LCD_color@color
  6803  0023A4  5059               	movf	_direction,w,c
  6804  0023A6  EC9D  F003         	call	_update_LCD_color
  6805                           
  6806                           ;Lab8_redo.c: 464: switch (color)
  6807  0023AA  D00A               	goto	l5100
  6808  0023AC                     l446:
  6809                           
  6810                           ; BSR set to: 0
  6811  0023AC  9083               	bcf	3971,0,c	;volatile
  6812  0023AE  D001               	goto	L15
  6813  0023B0                     l448:
  6814                           
  6815                           ; BSR set to: 0
  6816  0023B0  8083               	bsf	3971,0,c	;volatile
  6817  0023B2                     L15:
  6818  0023B2  9283               	bcf	3971,1,c	;volatile
  6819  0023B4  D014               	goto	l451
  6820  0023B6                     l449:
  6821                           
  6822                           ; BSR set to: 0
  6823  0023B6  9083               	bcf	3971,0,c	;volatile
  6824  0023B8  D001               	goto	L16
  6825  0023BA                     l450:
  6826                           
  6827                           ; BSR set to: 0
  6828  0023BA  8083               	bsf	3971,0,c	;volatile
  6829  0023BC                     L16:
  6830  0023BC  8283               	bsf	3971,1,c	;volatile
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;Lab8_redo.c: 470: }
  6834  0023BE  D00F               	goto	l451
  6835  0023C0                     l5100:
  6836  0023C0  0100               	movlb	0	; () banked
  6837  0023C2  51A7               	movf	Set_EW@color& (0+255),w,b
  6838                           
  6839                           ; Switch size 1, requested type "space"
  6840                           ; Number of cases is 4, Range of values is 0 to 3
  6841                           ; switch strategies available:
  6842                           ; Name         Instructions Cycles
  6843                           ; simple_byte           13     7 (average)
  6844                           ;	Chosen strategy is simple_byte
  6845  0023C4  0A00               	xorlw	0	; case 0
  6846  0023C6  B4D8               	btfsc	status,2,c
  6847  0023C8  D7F1               	goto	l446
  6848  0023CA  0A01               	xorlw	1	; case 1
  6849  0023CC  B4D8               	btfsc	status,2,c
  6850  0023CE  D7F0               	goto	l448
  6851  0023D0  0A03               	xorlw	3	; case 2
  6852  0023D2  B4D8               	btfsc	status,2,c
  6853  0023D4  D7F0               	goto	l449
  6854  0023D6  0A01               	xorlw	1	; case 3
  6855  0023D8  B4D8               	btfsc	status,2,c
  6856  0023DA  D7EF               	goto	l450
  6857  0023DC  D000               	goto	l451
  6858  0023DE                     l451:
  6859                           
  6860                           ; BSR set to: 0
  6861  0023DE  0012               	return		;funcret
  6862  0023E0                     __end_of_Set_EW:
  6863                           	opt stack 0
  6864                           tblptru	equ	0xFF8
  6865                           tblptrh	equ	0xFF7
  6866                           tblptrl	equ	0xFF6
  6867                           tablat	equ	0xFF5
  6868                           intcon	equ	0xFF2
  6869                           intcon2	equ	0xFF1
  6870                           intcon3	equ	0xFF0
  6871                           postinc0	equ	0xFEE
  6872                           wreg	equ	0xFE8
  6873                           postdec1	equ	0xFE5
  6874                           fsr1l	equ	0xFE1
  6875                           status	equ	0xFD8
  6876                           
  6877 ;; *************** function _update_LCD_color *****************
  6878 ;; Defined at:
  6879 ;;		line 724 in file "Lab8_redo.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;  direction       1    wreg     unsigned char 
  6882 ;;  color           1   64[COMRAM] unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  direction       1    0[BANK0 ] unsigned char 
  6885 ;;  Circle_Y        1    1[BANK0 ] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;		None               void
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6895 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;Total ram usage:        3 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    8
  6902 ;; This function calls:
  6903 ;;		_drawCircle
  6904 ;;		_fillCircle
  6905 ;; This function is called by:
  6906 ;;		_Set_NS
  6907 ;;		_Set_NS_LT
  6908 ;;		_Set_EW
  6909 ;;		_Set_EW_LT
  6910 ;; This function uses a non-reentrant model
  6911 ;;
  6912                           
  6913                           	psect	text33
  6914  00073A                     __ptext33:
  6915                           	opt stack 0
  6916  00073A                     _update_LCD_color:
  6917                           	opt stack 20
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;incstack = 0
  6921                           ;update_LCD_color@direction stored from wreg
  6922  00073A  0100               	movlb	0	; () banked
  6923  00073C  6FA5               	movwf	update_LCD_color@direction& (0+255),b
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;Lab8_redo.c: 726: char Circle_Y;
  6927                           ;Lab8_redo.c: 727: Circle_Y = 20 + 15 + direction * 30;
  6928  00073E  0100               	movlb	0	; () banked
  6929  000740  51A5               	movf	update_LCD_color@direction& (0+255),w,b
  6930  000742  0D1E               	mullw	30
  6931  000744  50F3               	movf	prodl,w,c
  6932  000746  0F23               	addlw	35
  6933  000748  0100               	movlb	0	; () banked
  6934  00074A  6FA6               	movwf	update_LCD_color@Circle_Y& (0+255),b
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;Lab8_redo.c: 729: if (color == 0)
  6938  00074C  5041               	movf	update_LCD_color@color,w,c
  6939  00074E  A4D8               	btfss	status,2,c
  6940  000750  D067               	goto	l4964
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;Lab8_redo.c: 730: {
  6944                           ;Lab8_redo.c: 731: fillCircle(40, Circle_Y, 7, 0x0000);
  6945  000752  0E00               	movlw	0
  6946  000754  6E3A               	movwf	fillCircle@x0+1,c
  6947  000756  0E28               	movlw	40
  6948  000758  6E39               	movwf	fillCircle@x0,c
  6949  00075A  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6950  00075E  6A3C               	clrf	fillCircle@y0+1,c
  6951  000760  0E00               	movlw	0
  6952  000762  6E3E               	movwf	fillCircle@r+1,c
  6953  000764  0E07               	movlw	7
  6954  000766  6E3D               	movwf	fillCircle@r,c
  6955  000768  0E00               	movlw	0
  6956  00076A  6E40               	movwf	fillCircle@color+1,c
  6957  00076C  0E00               	movlw	0
  6958  00076E  6E3F               	movwf	fillCircle@color,c
  6959  000770  ECEB  F010         	call	_fillCircle	;wreg free
  6960                           
  6961                           ;Lab8_redo.c: 732: fillCircle(60, Circle_Y, 7, 0x0000);
  6962  000774  0E00               	movlw	0
  6963  000776  6E3A               	movwf	fillCircle@x0+1,c
  6964  000778  0E3C               	movlw	60
  6965  00077A  6E39               	movwf	fillCircle@x0,c
  6966  00077C  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6967  000780  6A3C               	clrf	fillCircle@y0+1,c
  6968  000782  0E00               	movlw	0
  6969  000784  6E3E               	movwf	fillCircle@r+1,c
  6970  000786  0E07               	movlw	7
  6971  000788  6E3D               	movwf	fillCircle@r,c
  6972  00078A  0E00               	movlw	0
  6973  00078C  6E40               	movwf	fillCircle@color+1,c
  6974  00078E  0E00               	movlw	0
  6975  000790  6E3F               	movwf	fillCircle@color,c
  6976  000792  ECEB  F010         	call	_fillCircle	;wreg free
  6977                           
  6978                           ;Lab8_redo.c: 733: fillCircle(80, Circle_Y, 7, 0x0000);
  6979  000796  0E00               	movlw	0
  6980  000798  6E3A               	movwf	fillCircle@x0+1,c
  6981  00079A  0E50               	movlw	80
  6982  00079C  6E39               	movwf	fillCircle@x0,c
  6983  00079E  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6984  0007A2  6A3C               	clrf	fillCircle@y0+1,c
  6985  0007A4  0E00               	movlw	0
  6986  0007A6  6E3E               	movwf	fillCircle@r+1,c
  6987  0007A8  0E07               	movlw	7
  6988  0007AA  6E3D               	movwf	fillCircle@r,c
  6989  0007AC  0E00               	movlw	0
  6990  0007AE  6E40               	movwf	fillCircle@color+1,c
  6991  0007B0  0E00               	movlw	0
  6992  0007B2  6E3F               	movwf	fillCircle@color,c
  6993  0007B4  ECEB  F010         	call	_fillCircle	;wreg free
  6994                           
  6995                           ;Lab8_redo.c: 734: drawCircle(40, Circle_Y, 7, 0xF800);
  6996  0007B8  0E00               	movlw	0
  6997  0007BA  6E1B               	movwf	drawCircle@x0+1,c
  6998  0007BC  0E28               	movlw	40
  6999  0007BE  6E1A               	movwf	drawCircle@x0,c
  7000  0007C0  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7001  0007C4  6A1D               	clrf	drawCircle@y0+1,c
  7002  0007C6  0E00               	movlw	0
  7003  0007C8  6E1F               	movwf	drawCircle@r+1,c
  7004  0007CA  0E07               	movlw	7
  7005  0007CC  6E1E               	movwf	drawCircle@r,c
  7006  0007CE  0EF8               	movlw	248
  7007  0007D0  6E21               	movwf	drawCircle@color+1,c
  7008  0007D2  0E00               	movlw	0
  7009  0007D4  6E20               	movwf	drawCircle@color,c
  7010  0007D6  EC61  F006         	call	_drawCircle	;wreg free
  7011                           
  7012                           ;Lab8_redo.c: 735: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7013  0007DA  0E00               	movlw	0
  7014  0007DC  6E1B               	movwf	drawCircle@x0+1,c
  7015  0007DE  0E3C               	movlw	60
  7016  0007E0  6E1A               	movwf	drawCircle@x0,c
  7017  0007E2  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7018  0007E6  6A1D               	clrf	drawCircle@y0+1,c
  7019  0007E8  0E00               	movlw	0
  7020  0007EA  6E1F               	movwf	drawCircle@r+1,c
  7021  0007EC  0E07               	movlw	7
  7022  0007EE  6E1E               	movwf	drawCircle@r,c
  7023  0007F0  0EFF               	movlw	255
  7024  0007F2  6E21               	movwf	drawCircle@color+1,c
  7025  0007F4  0EE0               	movlw	224
  7026  0007F6  6E20               	movwf	drawCircle@color,c
  7027  0007F8  EC61  F006         	call	_drawCircle	;wreg free
  7028                           
  7029                           ;Lab8_redo.c: 736: drawCircle(80, Circle_Y, 7, 0x07E0);
  7030  0007FC  0E00               	movlw	0
  7031  0007FE  6E1B               	movwf	drawCircle@x0+1,c
  7032  000800  0E50               	movlw	80
  7033  000802  6E1A               	movwf	drawCircle@x0,c
  7034  000804  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7035  000808  6A1D               	clrf	drawCircle@y0+1,c
  7036  00080A  0E00               	movlw	0
  7037  00080C  6E1F               	movwf	drawCircle@r+1,c
  7038  00080E  0E07               	movlw	7
  7039  000810  6E1E               	movwf	drawCircle@r,c
  7040  000812  0E07               	movlw	7
  7041  000814  6E21               	movwf	drawCircle@color+1,c
  7042  000816  0EE0               	movlw	224
  7043  000818  6E20               	movwf	drawCircle@color,c
  7044  00081A  EC61  F006         	call	_drawCircle	;wreg free
  7045  00081E  D000               	goto	l4964
  7046  000820                     l4964:
  7047                           
  7048                           ;Lab8_redo.c: 737: }
  7049                           ;Lab8_redo.c: 739: if (color == 1)
  7050  000820  0441               	decf	update_LCD_color@color,w,c
  7051  000822  A4D8               	btfss	status,2,c
  7052  000824  D067               	goto	l4968
  7053                           
  7054                           ;Lab8_redo.c: 740: {
  7055                           ;Lab8_redo.c: 741: fillCircle(40, Circle_Y, 7, 0xF800);
  7056  000826  0E00               	movlw	0
  7057  000828  6E3A               	movwf	fillCircle@x0+1,c
  7058  00082A  0E28               	movlw	40
  7059  00082C  6E39               	movwf	fillCircle@x0,c
  7060  00082E  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7061  000832  6A3C               	clrf	fillCircle@y0+1,c
  7062  000834  0E00               	movlw	0
  7063  000836  6E3E               	movwf	fillCircle@r+1,c
  7064  000838  0E07               	movlw	7
  7065  00083A  6E3D               	movwf	fillCircle@r,c
  7066  00083C  0EF8               	movlw	248
  7067  00083E  6E40               	movwf	fillCircle@color+1,c
  7068  000840  0E00               	movlw	0
  7069  000842  6E3F               	movwf	fillCircle@color,c
  7070  000844  ECEB  F010         	call	_fillCircle	;wreg free
  7071                           
  7072                           ;Lab8_redo.c: 742: fillCircle(60, Circle_Y, 7, 0x0000);
  7073  000848  0E00               	movlw	0
  7074  00084A  6E3A               	movwf	fillCircle@x0+1,c
  7075  00084C  0E3C               	movlw	60
  7076  00084E  6E39               	movwf	fillCircle@x0,c
  7077  000850  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7078  000854  6A3C               	clrf	fillCircle@y0+1,c
  7079  000856  0E00               	movlw	0
  7080  000858  6E3E               	movwf	fillCircle@r+1,c
  7081  00085A  0E07               	movlw	7
  7082  00085C  6E3D               	movwf	fillCircle@r,c
  7083  00085E  0E00               	movlw	0
  7084  000860  6E40               	movwf	fillCircle@color+1,c
  7085  000862  0E00               	movlw	0
  7086  000864  6E3F               	movwf	fillCircle@color,c
  7087  000866  ECEB  F010         	call	_fillCircle	;wreg free
  7088                           
  7089                           ;Lab8_redo.c: 743: fillCircle(80, Circle_Y, 7, 0x0000);
  7090  00086A  0E00               	movlw	0
  7091  00086C  6E3A               	movwf	fillCircle@x0+1,c
  7092  00086E  0E50               	movlw	80
  7093  000870  6E39               	movwf	fillCircle@x0,c
  7094  000872  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7095  000876  6A3C               	clrf	fillCircle@y0+1,c
  7096  000878  0E00               	movlw	0
  7097  00087A  6E3E               	movwf	fillCircle@r+1,c
  7098  00087C  0E07               	movlw	7
  7099  00087E  6E3D               	movwf	fillCircle@r,c
  7100  000880  0E00               	movlw	0
  7101  000882  6E40               	movwf	fillCircle@color+1,c
  7102  000884  0E00               	movlw	0
  7103  000886  6E3F               	movwf	fillCircle@color,c
  7104  000888  ECEB  F010         	call	_fillCircle	;wreg free
  7105                           
  7106                           ;Lab8_redo.c: 744: drawCircle(40, Circle_Y, 7, 0xF800);
  7107  00088C  0E00               	movlw	0
  7108  00088E  6E1B               	movwf	drawCircle@x0+1,c
  7109  000890  0E28               	movlw	40
  7110  000892  6E1A               	movwf	drawCircle@x0,c
  7111  000894  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7112  000898  6A1D               	clrf	drawCircle@y0+1,c
  7113  00089A  0E00               	movlw	0
  7114  00089C  6E1F               	movwf	drawCircle@r+1,c
  7115  00089E  0E07               	movlw	7
  7116  0008A0  6E1E               	movwf	drawCircle@r,c
  7117  0008A2  0EF8               	movlw	248
  7118  0008A4  6E21               	movwf	drawCircle@color+1,c
  7119  0008A6  0E00               	movlw	0
  7120  0008A8  6E20               	movwf	drawCircle@color,c
  7121  0008AA  EC61  F006         	call	_drawCircle	;wreg free
  7122                           
  7123                           ;Lab8_redo.c: 745: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7124  0008AE  0E00               	movlw	0
  7125  0008B0  6E1B               	movwf	drawCircle@x0+1,c
  7126  0008B2  0E3C               	movlw	60
  7127  0008B4  6E1A               	movwf	drawCircle@x0,c
  7128  0008B6  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7129  0008BA  6A1D               	clrf	drawCircle@y0+1,c
  7130  0008BC  0E00               	movlw	0
  7131  0008BE  6E1F               	movwf	drawCircle@r+1,c
  7132  0008C0  0E07               	movlw	7
  7133  0008C2  6E1E               	movwf	drawCircle@r,c
  7134  0008C4  0EFF               	movlw	255
  7135  0008C6  6E21               	movwf	drawCircle@color+1,c
  7136  0008C8  0EE0               	movlw	224
  7137  0008CA  6E20               	movwf	drawCircle@color,c
  7138  0008CC  EC61  F006         	call	_drawCircle	;wreg free
  7139                           
  7140                           ;Lab8_redo.c: 746: drawCircle(80, Circle_Y, 7, 0x07E0);
  7141  0008D0  0E00               	movlw	0
  7142  0008D2  6E1B               	movwf	drawCircle@x0+1,c
  7143  0008D4  0E50               	movlw	80
  7144  0008D6  6E1A               	movwf	drawCircle@x0,c
  7145  0008D8  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7146  0008DC  6A1D               	clrf	drawCircle@y0+1,c
  7147  0008DE  0E00               	movlw	0
  7148  0008E0  6E1F               	movwf	drawCircle@r+1,c
  7149  0008E2  0E07               	movlw	7
  7150  0008E4  6E1E               	movwf	drawCircle@r,c
  7151  0008E6  0E07               	movlw	7
  7152  0008E8  6E21               	movwf	drawCircle@color+1,c
  7153  0008EA  0EE0               	movlw	224
  7154  0008EC  6E20               	movwf	drawCircle@color,c
  7155  0008EE  EC61  F006         	call	_drawCircle	;wreg free
  7156  0008F2  D000               	goto	l4968
  7157  0008F4                     l4968:
  7158                           
  7159                           ;Lab8_redo.c: 747: }
  7160                           ;Lab8_redo.c: 748: if (color == 3)
  7161  0008F4  0E03               	movlw	3
  7162  0008F6  1841               	xorwf	update_LCD_color@color,w,c
  7163  0008F8  A4D8               	btfss	status,2,c
  7164  0008FA  D067               	goto	l4972
  7165                           
  7166                           ;Lab8_redo.c: 749: {
  7167                           ;Lab8_redo.c: 750: fillCircle(40, Circle_Y, 7, 0x0000);
  7168  0008FC  0E00               	movlw	0
  7169  0008FE  6E3A               	movwf	fillCircle@x0+1,c
  7170  000900  0E28               	movlw	40
  7171  000902  6E39               	movwf	fillCircle@x0,c
  7172  000904  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7173  000908  6A3C               	clrf	fillCircle@y0+1,c
  7174  00090A  0E00               	movlw	0
  7175  00090C  6E3E               	movwf	fillCircle@r+1,c
  7176  00090E  0E07               	movlw	7
  7177  000910  6E3D               	movwf	fillCircle@r,c
  7178  000912  0E00               	movlw	0
  7179  000914  6E40               	movwf	fillCircle@color+1,c
  7180  000916  0E00               	movlw	0
  7181  000918  6E3F               	movwf	fillCircle@color,c
  7182  00091A  ECEB  F010         	call	_fillCircle	;wreg free
  7183                           
  7184                           ;Lab8_redo.c: 751: fillCircle(60, Circle_Y, 7, 0xFFE0);
  7185  00091E  0E00               	movlw	0
  7186  000920  6E3A               	movwf	fillCircle@x0+1,c
  7187  000922  0E3C               	movlw	60
  7188  000924  6E39               	movwf	fillCircle@x0,c
  7189  000926  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7190  00092A  6A3C               	clrf	fillCircle@y0+1,c
  7191  00092C  0E00               	movlw	0
  7192  00092E  6E3E               	movwf	fillCircle@r+1,c
  7193  000930  0E07               	movlw	7
  7194  000932  6E3D               	movwf	fillCircle@r,c
  7195  000934  0EFF               	movlw	255
  7196  000936  6E40               	movwf	fillCircle@color+1,c
  7197  000938  0EE0               	movlw	224
  7198  00093A  6E3F               	movwf	fillCircle@color,c
  7199  00093C  ECEB  F010         	call	_fillCircle	;wreg free
  7200                           
  7201                           ;Lab8_redo.c: 752: fillCircle(80, Circle_Y, 7, 0x0000);
  7202  000940  0E00               	movlw	0
  7203  000942  6E3A               	movwf	fillCircle@x0+1,c
  7204  000944  0E50               	movlw	80
  7205  000946  6E39               	movwf	fillCircle@x0,c
  7206  000948  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7207  00094C  6A3C               	clrf	fillCircle@y0+1,c
  7208  00094E  0E00               	movlw	0
  7209  000950  6E3E               	movwf	fillCircle@r+1,c
  7210  000952  0E07               	movlw	7
  7211  000954  6E3D               	movwf	fillCircle@r,c
  7212  000956  0E00               	movlw	0
  7213  000958  6E40               	movwf	fillCircle@color+1,c
  7214  00095A  0E00               	movlw	0
  7215  00095C  6E3F               	movwf	fillCircle@color,c
  7216  00095E  ECEB  F010         	call	_fillCircle	;wreg free
  7217                           
  7218                           ;Lab8_redo.c: 753: drawCircle(40, Circle_Y, 7, 0xF800);
  7219  000962  0E00               	movlw	0
  7220  000964  6E1B               	movwf	drawCircle@x0+1,c
  7221  000966  0E28               	movlw	40
  7222  000968  6E1A               	movwf	drawCircle@x0,c
  7223  00096A  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7224  00096E  6A1D               	clrf	drawCircle@y0+1,c
  7225  000970  0E00               	movlw	0
  7226  000972  6E1F               	movwf	drawCircle@r+1,c
  7227  000974  0E07               	movlw	7
  7228  000976  6E1E               	movwf	drawCircle@r,c
  7229  000978  0EF8               	movlw	248
  7230  00097A  6E21               	movwf	drawCircle@color+1,c
  7231  00097C  0E00               	movlw	0
  7232  00097E  6E20               	movwf	drawCircle@color,c
  7233  000980  EC61  F006         	call	_drawCircle	;wreg free
  7234                           
  7235                           ;Lab8_redo.c: 754: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7236  000984  0E00               	movlw	0
  7237  000986  6E1B               	movwf	drawCircle@x0+1,c
  7238  000988  0E3C               	movlw	60
  7239  00098A  6E1A               	movwf	drawCircle@x0,c
  7240  00098C  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7241  000990  6A1D               	clrf	drawCircle@y0+1,c
  7242  000992  0E00               	movlw	0
  7243  000994  6E1F               	movwf	drawCircle@r+1,c
  7244  000996  0E07               	movlw	7
  7245  000998  6E1E               	movwf	drawCircle@r,c
  7246  00099A  0EFF               	movlw	255
  7247  00099C  6E21               	movwf	drawCircle@color+1,c
  7248  00099E  0EE0               	movlw	224
  7249  0009A0  6E20               	movwf	drawCircle@color,c
  7250  0009A2  EC61  F006         	call	_drawCircle	;wreg free
  7251                           
  7252                           ;Lab8_redo.c: 755: drawCircle(80, Circle_Y, 7, 0x07E0);
  7253  0009A6  0E00               	movlw	0
  7254  0009A8  6E1B               	movwf	drawCircle@x0+1,c
  7255  0009AA  0E50               	movlw	80
  7256  0009AC  6E1A               	movwf	drawCircle@x0,c
  7257  0009AE  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7258  0009B2  6A1D               	clrf	drawCircle@y0+1,c
  7259  0009B4  0E00               	movlw	0
  7260  0009B6  6E1F               	movwf	drawCircle@r+1,c
  7261  0009B8  0E07               	movlw	7
  7262  0009BA  6E1E               	movwf	drawCircle@r,c
  7263  0009BC  0E07               	movlw	7
  7264  0009BE  6E21               	movwf	drawCircle@color+1,c
  7265  0009C0  0EE0               	movlw	224
  7266  0009C2  6E20               	movwf	drawCircle@color,c
  7267  0009C4  EC61  F006         	call	_drawCircle	;wreg free
  7268  0009C8  D000               	goto	l4972
  7269  0009CA                     l4972:
  7270                           
  7271                           ;Lab8_redo.c: 756: }
  7272                           ;Lab8_redo.c: 759: if (color == 2)
  7273  0009CA  0E02               	movlw	2
  7274  0009CC  1841               	xorwf	update_LCD_color@color,w,c
  7275  0009CE  A4D8               	btfss	status,2,c
  7276  0009D0  D067               	goto	l514
  7277                           
  7278                           ;Lab8_redo.c: 760: {
  7279                           ;Lab8_redo.c: 761: fillCircle(40, Circle_Y, 7, 0x0000);
  7280  0009D2  0E00               	movlw	0
  7281  0009D4  6E3A               	movwf	fillCircle@x0+1,c
  7282  0009D6  0E28               	movlw	40
  7283  0009D8  6E39               	movwf	fillCircle@x0,c
  7284  0009DA  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7285  0009DE  6A3C               	clrf	fillCircle@y0+1,c
  7286  0009E0  0E00               	movlw	0
  7287  0009E2  6E3E               	movwf	fillCircle@r+1,c
  7288  0009E4  0E07               	movlw	7
  7289  0009E6  6E3D               	movwf	fillCircle@r,c
  7290  0009E8  0E00               	movlw	0
  7291  0009EA  6E40               	movwf	fillCircle@color+1,c
  7292  0009EC  0E00               	movlw	0
  7293  0009EE  6E3F               	movwf	fillCircle@color,c
  7294  0009F0  ECEB  F010         	call	_fillCircle	;wreg free
  7295                           
  7296                           ;Lab8_redo.c: 762: fillCircle(60, Circle_Y, 7, 0x0000);
  7297  0009F4  0E00               	movlw	0
  7298  0009F6  6E3A               	movwf	fillCircle@x0+1,c
  7299  0009F8  0E3C               	movlw	60
  7300  0009FA  6E39               	movwf	fillCircle@x0,c
  7301  0009FC  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7302  000A00  6A3C               	clrf	fillCircle@y0+1,c
  7303  000A02  0E00               	movlw	0
  7304  000A04  6E3E               	movwf	fillCircle@r+1,c
  7305  000A06  0E07               	movlw	7
  7306  000A08  6E3D               	movwf	fillCircle@r,c
  7307  000A0A  0E00               	movlw	0
  7308  000A0C  6E40               	movwf	fillCircle@color+1,c
  7309  000A0E  0E00               	movlw	0
  7310  000A10  6E3F               	movwf	fillCircle@color,c
  7311  000A12  ECEB  F010         	call	_fillCircle	;wreg free
  7312                           
  7313                           ;Lab8_redo.c: 763: fillCircle(80, Circle_Y, 7, 0x07E0);
  7314  000A16  0E00               	movlw	0
  7315  000A18  6E3A               	movwf	fillCircle@x0+1,c
  7316  000A1A  0E50               	movlw	80
  7317  000A1C  6E39               	movwf	fillCircle@x0,c
  7318  000A1E  C0A6  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  7319  000A22  6A3C               	clrf	fillCircle@y0+1,c
  7320  000A24  0E00               	movlw	0
  7321  000A26  6E3E               	movwf	fillCircle@r+1,c
  7322  000A28  0E07               	movlw	7
  7323  000A2A  6E3D               	movwf	fillCircle@r,c
  7324  000A2C  0E07               	movlw	7
  7325  000A2E  6E40               	movwf	fillCircle@color+1,c
  7326  000A30  0EE0               	movlw	224
  7327  000A32  6E3F               	movwf	fillCircle@color,c
  7328  000A34  ECEB  F010         	call	_fillCircle	;wreg free
  7329                           
  7330                           ;Lab8_redo.c: 764: drawCircle(40, Circle_Y, 7, 0xF800);
  7331  000A38  0E00               	movlw	0
  7332  000A3A  6E1B               	movwf	drawCircle@x0+1,c
  7333  000A3C  0E28               	movlw	40
  7334  000A3E  6E1A               	movwf	drawCircle@x0,c
  7335  000A40  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7336  000A44  6A1D               	clrf	drawCircle@y0+1,c
  7337  000A46  0E00               	movlw	0
  7338  000A48  6E1F               	movwf	drawCircle@r+1,c
  7339  000A4A  0E07               	movlw	7
  7340  000A4C  6E1E               	movwf	drawCircle@r,c
  7341  000A4E  0EF8               	movlw	248
  7342  000A50  6E21               	movwf	drawCircle@color+1,c
  7343  000A52  0E00               	movlw	0
  7344  000A54  6E20               	movwf	drawCircle@color,c
  7345  000A56  EC61  F006         	call	_drawCircle	;wreg free
  7346                           
  7347                           ;Lab8_redo.c: 765: drawCircle(60, Circle_Y, 7, 0xFFE0);
  7348  000A5A  0E00               	movlw	0
  7349  000A5C  6E1B               	movwf	drawCircle@x0+1,c
  7350  000A5E  0E3C               	movlw	60
  7351  000A60  6E1A               	movwf	drawCircle@x0,c
  7352  000A62  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7353  000A66  6A1D               	clrf	drawCircle@y0+1,c
  7354  000A68  0E00               	movlw	0
  7355  000A6A  6E1F               	movwf	drawCircle@r+1,c
  7356  000A6C  0E07               	movlw	7
  7357  000A6E  6E1E               	movwf	drawCircle@r,c
  7358  000A70  0EFF               	movlw	255
  7359  000A72  6E21               	movwf	drawCircle@color+1,c
  7360  000A74  0EE0               	movlw	224
  7361  000A76  6E20               	movwf	drawCircle@color,c
  7362  000A78  EC61  F006         	call	_drawCircle	;wreg free
  7363                           
  7364                           ;Lab8_redo.c: 766: drawCircle(80, Circle_Y, 7, 0x07E0);
  7365  000A7C  0E00               	movlw	0
  7366  000A7E  6E1B               	movwf	drawCircle@x0+1,c
  7367  000A80  0E50               	movlw	80
  7368  000A82  6E1A               	movwf	drawCircle@x0,c
  7369  000A84  C0A6  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  7370  000A88  6A1D               	clrf	drawCircle@y0+1,c
  7371  000A8A  0E00               	movlw	0
  7372  000A8C  6E1F               	movwf	drawCircle@r+1,c
  7373  000A8E  0E07               	movlw	7
  7374  000A90  6E1E               	movwf	drawCircle@r,c
  7375  000A92  0E07               	movlw	7
  7376  000A94  6E21               	movwf	drawCircle@color+1,c
  7377  000A96  0EE0               	movlw	224
  7378  000A98  6E20               	movwf	drawCircle@color,c
  7379  000A9A  EC61  F006         	call	_drawCircle	;wreg free
  7380  000A9E  D000               	goto	l514
  7381  000AA0                     l514:
  7382  000AA0  0012               	return		;funcret
  7383  000AA2                     __end_of_update_LCD_color:
  7384                           	opt stack 0
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodl	equ	0xFF3
  7390                           intcon	equ	0xFF2
  7391                           intcon2	equ	0xFF1
  7392                           intcon3	equ	0xFF0
  7393                           postinc0	equ	0xFEE
  7394                           wreg	equ	0xFE8
  7395                           postdec1	equ	0xFE5
  7396                           fsr1l	equ	0xFE1
  7397                           status	equ	0xFD8
  7398                           
  7399 ;; *************** function _fillCircle *****************
  7400 ;; Defined at:
  7401 ;;		line 647 in file "ST7735_TFT.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;  x0              2   56[COMRAM] int 
  7404 ;;  y0              2   58[COMRAM] int 
  7405 ;;  r               2   60[COMRAM] int 
  7406 ;;  color           2   62[COMRAM] unsigned int 
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;		None
  7409 ;; Return value:  Size  Location     Type
  7410 ;;		None               void
  7411 ;; Registers used:
  7412 ;;		wreg, status,2, status,0, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7418 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;Total ram usage:        8 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    7
  7425 ;; This function calls:
  7426 ;;		_drawFastVLine
  7427 ;;		_fillCircleHelper
  7428 ;; This function is called by:
  7429 ;;		_Initialize_Screen
  7430 ;;		_update_LCD_color
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text34
  7435  0021D6                     __ptext34:
  7436                           	opt stack 0
  7437  0021D6                     _fillCircle:
  7438                           	opt stack 20
  7439                           
  7440                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  7441                           
  7442                           ;incstack = 0
  7443  0021D6  503D               	movf	fillCircle@r,w,c
  7444  0021D8  0800               	sublw	0
  7445  0021DA  243B               	addwf	fillCircle@y0,w,c
  7446  0021DC  6E16               	movwf	drawFastVLine@y,c
  7447  0021DE  80D8               	bsf	status,0,c
  7448  0021E0  343D               	rlcf	fillCircle@r,w,c
  7449  0021E2  6E17               	movwf	drawFastVLine@h,c
  7450  0021E4  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  7451  0021E8  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  7452  0021EC  5039               	movf	fillCircle@x0,w,c
  7453  0021EE  ECAF  F00E         	call	_drawFastVLine
  7454                           
  7455                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  7456  0021F2  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  7457  0021F6  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  7458  0021FA  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  7459  0021FE  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  7460  002202  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  7461  002206  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  7462  00220A  0E00               	movlw	0
  7463  00220C  6E28               	movwf	fillCircleHelper@cornername+1,c
  7464  00220E  0E03               	movlw	3
  7465  002210  6E27               	movwf	fillCircleHelper@cornername,c
  7466  002212  0E00               	movlw	0
  7467  002214  6E2A               	movwf	fillCircleHelper@delta+1,c
  7468  002216  0E00               	movlw	0
  7469  002218  6E29               	movwf	fillCircleHelper@delta,c
  7470  00221A  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  7471  00221E  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  7472  002222  ECA8  F008         	call	_fillCircleHelper	;wreg free
  7473  002226  0012               	return		;funcret
  7474  002228                     __end_of_fillCircle:
  7475                           	opt stack 0
  7476                           tblptru	equ	0xFF8
  7477                           tblptrh	equ	0xFF7
  7478                           tblptrl	equ	0xFF6
  7479                           tablat	equ	0xFF5
  7480                           prodl	equ	0xFF3
  7481                           intcon	equ	0xFF2
  7482                           intcon2	equ	0xFF1
  7483                           intcon3	equ	0xFF0
  7484                           postinc0	equ	0xFEE
  7485                           wreg	equ	0xFE8
  7486                           postdec1	equ	0xFE5
  7487                           fsr1l	equ	0xFE1
  7488                           status	equ	0xFD8
  7489                           
  7490 ;; *************** function _fillCircleHelper *****************
  7491 ;; Defined at:
  7492 ;;		line 622 in file "ST7735_TFT.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  x0              2   32[COMRAM] int 
  7495 ;;  y0              2   34[COMRAM] int 
  7496 ;;  r               2   36[COMRAM] int 
  7497 ;;  cornername      2   38[COMRAM] unsigned int 
  7498 ;;  delta           2   40[COMRAM] int 
  7499 ;;  color           2   42[COMRAM] unsigned int 
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  y               2   54[COMRAM] int 
  7502 ;;  x               2   52[COMRAM] int 
  7503 ;;  f               2   50[COMRAM] int 
  7504 ;;  ddF_y           2   48[COMRAM] int 
  7505 ;;  ddF_x           2   46[COMRAM] int 
  7506 ;; Return value:  Size  Location     Type
  7507 ;;		None               void
  7508 ;; Registers used:
  7509 ;;		wreg, status,2, status,0, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7515 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;Total ram usage:       24 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; Hardware stack levels required when called:    6
  7522 ;; This function calls:
  7523 ;;		_drawFastVLine
  7524 ;; This function is called by:
  7525 ;;		_fillCircle
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text35
  7530  001150                     __ptext35:
  7531                           	opt stack 0
  7532  001150                     _fillCircleHelper:
  7533                           	opt stack 20
  7534                           
  7535                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  7536                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7537                           
  7538                           ;incstack = 0
  7539  001150  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7540  001154  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7541  001158  1E2D               	comf	??_fillCircleHelper,f,c
  7542  00115A  1E2E               	comf	??_fillCircleHelper+1,f,c
  7543  00115C  4A2D               	infsnz	??_fillCircleHelper,f,c
  7544  00115E  2A2E               	incf	??_fillCircleHelper+1,f,c
  7545  001160  0E01               	movlw	1
  7546  001162  242D               	addwf	??_fillCircleHelper,w,c
  7547  001164  6E33               	movwf	fillCircleHelper@f,c
  7548  001166  0E00               	movlw	0
  7549  001168  202E               	addwfc	??_fillCircleHelper+1,w,c
  7550  00116A  6E34               	movwf	fillCircleHelper@f+1,c
  7551  00116C  0E00               	movlw	0
  7552  00116E  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  7553  001170  0E01               	movlw	1
  7554  001172  6E2F               	movwf	fillCircleHelper@ddF_x,c
  7555  001174  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7556  001178  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7557  00117C  90D8               	bcf	status,0,c
  7558  00117E  362D               	rlcf	??_fillCircleHelper,f,c
  7559  001180  362E               	rlcf	??_fillCircleHelper+1,f,c
  7560  001182  1E2D               	comf	??_fillCircleHelper,f,c
  7561  001184  1E2E               	comf	??_fillCircleHelper+1,f,c
  7562  001186  4A2D               	infsnz	??_fillCircleHelper,f,c
  7563  001188  2A2E               	incf	??_fillCircleHelper+1,f,c
  7564  00118A  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7565  00118E  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7566  001192  0E00               	movlw	0
  7567  001194  6E36               	movwf	fillCircleHelper@x+1,c
  7568  001196  0E00               	movlw	0
  7569  001198  6E35               	movwf	fillCircleHelper@x,c
  7570  00119A  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  7571  00119E  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7572                           
  7573                           ;ST7735_TFT.c: 626: while (x<y) {
  7574  0011A2  D067               	goto	l4444
  7575  0011A4                     l4424:
  7576                           
  7577                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7578  0011A4  BE34               	btfsc	fillCircleHelper@f+1,7,c
  7579  0011A6  D00B               	goto	l267
  7580                           
  7581                           ;ST7735_TFT.c: 628: y--;
  7582  0011A8  0637               	decf	fillCircleHelper@y,f,c
  7583  0011AA  A0D8               	btfss	status,0,c
  7584  0011AC  0638               	decf	fillCircleHelper@y+1,f,c
  7585                           
  7586                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7587  0011AE  0E02               	movlw	2
  7588  0011B0  2631               	addwf	fillCircleHelper@ddF_y,f,c
  7589  0011B2  0E00               	movlw	0
  7590  0011B4  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7591                           
  7592                           ;ST7735_TFT.c: 630: f += ddF_y;
  7593  0011B6  5031               	movf	fillCircleHelper@ddF_y,w,c
  7594  0011B8  2633               	addwf	fillCircleHelper@f,f,c
  7595  0011BA  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  7596  0011BC  2234               	addwfc	fillCircleHelper@f+1,f,c
  7597  0011BE                     l267:
  7598                           
  7599                           ;ST7735_TFT.c: 631: }
  7600                           ;ST7735_TFT.c: 632: x++;
  7601  0011BE  4A35               	infsnz	fillCircleHelper@x,f,c
  7602  0011C0  2A36               	incf	fillCircleHelper@x+1,f,c
  7603                           
  7604                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7605  0011C2  0E02               	movlw	2
  7606  0011C4  262F               	addwf	fillCircleHelper@ddF_x,f,c
  7607  0011C6  0E00               	movlw	0
  7608  0011C8  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7609                           
  7610                           ;ST7735_TFT.c: 634: f += ddF_x;
  7611  0011CA  502F               	movf	fillCircleHelper@ddF_x,w,c
  7612  0011CC  2633               	addwf	fillCircleHelper@f,f,c
  7613  0011CE  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  7614  0011D0  2234               	addwfc	fillCircleHelper@f+1,f,c
  7615                           
  7616                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7617  0011D2  A027               	btfss	fillCircleHelper@cornername,0,c
  7618  0011D4  D025               	goto	l4440
  7619                           
  7620                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7621  0011D6  5037               	movf	fillCircleHelper@y,w,c
  7622  0011D8  0800               	sublw	0
  7623  0011DA  2423               	addwf	fillCircleHelper@y0,w,c
  7624  0011DC  6E16               	movwf	drawFastVLine@y,c
  7625  0011DE  5037               	movf	fillCircleHelper@y,w,c
  7626  0011E0  2437               	addwf	fillCircleHelper@y,w,c
  7627  0011E2  2429               	addwf	fillCircleHelper@delta,w,c
  7628  0011E4  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7629  0011E6  282D               	incf	??_fillCircleHelper,w,c
  7630  0011E8  6E17               	movwf	drawFastVLine@h,c
  7631  0011EA  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7632  0011EE  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7633  0011F2  5021               	movf	fillCircleHelper@x0,w,c
  7634  0011F4  2435               	addwf	fillCircleHelper@x,w,c
  7635  0011F6  ECAF  F00E         	call	_drawFastVLine
  7636                           
  7637                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7638  0011FA  5035               	movf	fillCircleHelper@x,w,c
  7639  0011FC  0800               	sublw	0
  7640  0011FE  2423               	addwf	fillCircleHelper@y0,w,c
  7641  001200  6E16               	movwf	drawFastVLine@y,c
  7642  001202  5035               	movf	fillCircleHelper@x,w,c
  7643  001204  2435               	addwf	fillCircleHelper@x,w,c
  7644  001206  2429               	addwf	fillCircleHelper@delta,w,c
  7645  001208  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7646  00120A  282D               	incf	??_fillCircleHelper,w,c
  7647  00120C  6E17               	movwf	drawFastVLine@h,c
  7648  00120E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7649  001212  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7650  001216  5021               	movf	fillCircleHelper@x0,w,c
  7651  001218  2437               	addwf	fillCircleHelper@y,w,c
  7652  00121A  ECAF  F00E         	call	_drawFastVLine
  7653  00121E  D000               	goto	l4440
  7654  001220                     l4440:
  7655                           
  7656                           ;ST7735_TFT.c: 639: }
  7657                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7658  001220  A227               	btfss	fillCircleHelper@cornername,1,c
  7659  001222  D027               	goto	l4444
  7660                           
  7661                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7662  001224  5037               	movf	fillCircleHelper@y,w,c
  7663  001226  0800               	sublw	0
  7664  001228  2423               	addwf	fillCircleHelper@y0,w,c
  7665  00122A  6E16               	movwf	drawFastVLine@y,c
  7666  00122C  5037               	movf	fillCircleHelper@y,w,c
  7667  00122E  2437               	addwf	fillCircleHelper@y,w,c
  7668  001230  2429               	addwf	fillCircleHelper@delta,w,c
  7669  001232  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7670  001234  282D               	incf	??_fillCircleHelper,w,c
  7671  001236  6E17               	movwf	drawFastVLine@h,c
  7672  001238  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7673  00123C  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7674  001240  5035               	movf	fillCircleHelper@x,w,c
  7675  001242  0800               	sublw	0
  7676  001244  2421               	addwf	fillCircleHelper@x0,w,c
  7677  001246  ECAF  F00E         	call	_drawFastVLine
  7678                           
  7679                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7680  00124A  5035               	movf	fillCircleHelper@x,w,c
  7681  00124C  0800               	sublw	0
  7682  00124E  2423               	addwf	fillCircleHelper@y0,w,c
  7683  001250  6E16               	movwf	drawFastVLine@y,c
  7684  001252  5035               	movf	fillCircleHelper@x,w,c
  7685  001254  2435               	addwf	fillCircleHelper@x,w,c
  7686  001256  2429               	addwf	fillCircleHelper@delta,w,c
  7687  001258  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7688  00125A  282D               	incf	??_fillCircleHelper,w,c
  7689  00125C  6E17               	movwf	drawFastVLine@h,c
  7690  00125E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7691  001262  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7692  001266  5037               	movf	fillCircleHelper@y,w,c
  7693  001268  0800               	sublw	0
  7694  00126A  2421               	addwf	fillCircleHelper@x0,w,c
  7695  00126C  ECAF  F00E         	call	_drawFastVLine
  7696  001270  D000               	goto	l4444
  7697  001272                     l4444:
  7698  001272  5037               	movf	fillCircleHelper@y,w,c
  7699  001274  5C35               	subwf	fillCircleHelper@x,w,c
  7700  001276  5036               	movf	fillCircleHelper@x+1,w,c
  7701  001278  0A80               	xorlw	128
  7702  00127A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7703  00127C  5038               	movf	fillCircleHelper@y+1,w,c
  7704  00127E  0A80               	xorlw	128
  7705  001280  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  7706  001282  A0D8               	btfss	status,0,c
  7707  001284  D78F               	goto	l4424
  7708  001286  0012               	return		;funcret
  7709  001288                     __end_of_fillCircleHelper:
  7710                           	opt stack 0
  7711                           tblptru	equ	0xFF8
  7712                           tblptrh	equ	0xFF7
  7713                           tblptrl	equ	0xFF6
  7714                           tablat	equ	0xFF5
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           intcon2	equ	0xFF1
  7718                           intcon3	equ	0xFF0
  7719                           postinc0	equ	0xFEE
  7720                           wreg	equ	0xFE8
  7721                           postdec1	equ	0xFE5
  7722                           fsr1l	equ	0xFE1
  7723                           status	equ	0xFD8
  7724                           
  7725 ;; *************** function _drawCircle *****************
  7726 ;; Defined at:
  7727 ;;		line 561 in file "ST7735_TFT.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;  x0              2   25[COMRAM] int 
  7730 ;;  y0              2   27[COMRAM] int 
  7731 ;;  r               2   29[COMRAM] int 
  7732 ;;  color           2   31[COMRAM] unsigned int 
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  y               2   43[COMRAM] int 
  7735 ;;  x               2   41[COMRAM] int 
  7736 ;;  f               2   39[COMRAM] int 
  7737 ;;  ddF_y           2   37[COMRAM] int 
  7738 ;;  ddF_x           2   35[COMRAM] int 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;		None               void
  7741 ;; Registers used:
  7742 ;;		wreg, status,2, status,0, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7748 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;Total ram usage:       20 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    6
  7755 ;; This function calls:
  7756 ;;		_drawPixel
  7757 ;; This function is called by:
  7758 ;;		_Initialize_Screen
  7759 ;;		_update_LCD_color
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           	psect	text36
  7764  000CC2                     __ptext36:
  7765                           	opt stack 0
  7766  000CC2                     _drawCircle:
  7767                           	opt stack 21
  7768                           
  7769                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7770                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7771                           
  7772                           ;incstack = 0
  7773  000CC2  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7774  000CC6  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7775  000CCA  1E22               	comf	??_drawCircle,f,c
  7776  000CCC  1E23               	comf	??_drawCircle+1,f,c
  7777  000CCE  4A22               	infsnz	??_drawCircle,f,c
  7778  000CD0  2A23               	incf	??_drawCircle+1,f,c
  7779  000CD2  0E01               	movlw	1
  7780  000CD4  2422               	addwf	??_drawCircle,w,c
  7781  000CD6  6E28               	movwf	drawCircle@f,c
  7782  000CD8  0E00               	movlw	0
  7783  000CDA  2023               	addwfc	??_drawCircle+1,w,c
  7784  000CDC  6E29               	movwf	drawCircle@f+1,c
  7785  000CDE  0E00               	movlw	0
  7786  000CE0  6E25               	movwf	drawCircle@ddF_x+1,c
  7787  000CE2  0E01               	movlw	1
  7788  000CE4  6E24               	movwf	drawCircle@ddF_x,c
  7789  000CE6  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7790  000CEA  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7791  000CEE  90D8               	bcf	status,0,c
  7792  000CF0  3622               	rlcf	??_drawCircle,f,c
  7793  000CF2  3623               	rlcf	??_drawCircle+1,f,c
  7794  000CF4  1E22               	comf	??_drawCircle,f,c
  7795  000CF6  1E23               	comf	??_drawCircle+1,f,c
  7796  000CF8  4A22               	infsnz	??_drawCircle,f,c
  7797  000CFA  2A23               	incf	??_drawCircle+1,f,c
  7798  000CFC  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  7799  000D00  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7800  000D04  0E00               	movlw	0
  7801  000D06  6E2B               	movwf	drawCircle@x+1,c
  7802  000D08  0E00               	movlw	0
  7803  000D0A  6E2A               	movwf	drawCircle@x,c
  7804  000D0C  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  7805  000D10  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  7806                           
  7807                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7808  000D14  501C               	movf	drawCircle@y0,w,c
  7809  000D16  241E               	addwf	drawCircle@r,w,c
  7810  000D18  6E16               	movwf	drawPixel@y,c
  7811  000D1A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7812  000D1E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7813  000D22  501A               	movf	drawCircle@x0,w,c
  7814  000D24  EC80  F012         	call	_drawPixel
  7815                           
  7816                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7817  000D28  501E               	movf	drawCircle@r,w,c
  7818  000D2A  0800               	sublw	0
  7819  000D2C  241C               	addwf	drawCircle@y0,w,c
  7820  000D2E  6E16               	movwf	drawPixel@y,c
  7821  000D30  C020  F017         	movff	drawCircle@color,drawPixel@color
  7822  000D34  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7823  000D38  501A               	movf	drawCircle@x0,w,c
  7824  000D3A  EC80  F012         	call	_drawPixel
  7825                           
  7826                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7827  000D3E  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7828  000D42  C020  F017         	movff	drawCircle@color,drawPixel@color
  7829  000D46  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7830  000D4A  501A               	movf	drawCircle@x0,w,c
  7831  000D4C  241E               	addwf	drawCircle@r,w,c
  7832  000D4E  EC80  F012         	call	_drawPixel
  7833                           
  7834                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7835  000D52  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7836  000D56  C020  F017         	movff	drawCircle@color,drawPixel@color
  7837  000D5A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7838  000D5E  501E               	movf	drawCircle@r,w,c
  7839  000D60  0800               	sublw	0
  7840  000D62  241A               	addwf	drawCircle@x0,w,c
  7841  000D64  EC80  F012         	call	_drawPixel
  7842                           
  7843                           ;ST7735_TFT.c: 569: while (x < y) {
  7844  000D68  D078               	goto	l4590
  7845  000D6A                     l4562:
  7846                           
  7847                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7848  000D6A  BE29               	btfsc	drawCircle@f+1,7,c
  7849  000D6C  D00B               	goto	l249
  7850                           
  7851                           ;ST7735_TFT.c: 571: y--;
  7852  000D6E  062C               	decf	drawCircle@y,f,c
  7853  000D70  A0D8               	btfss	status,0,c
  7854  000D72  062D               	decf	drawCircle@y+1,f,c
  7855                           
  7856                           ;ST7735_TFT.c: 572: ddF_y += 2;
  7857  000D74  0E02               	movlw	2
  7858  000D76  2626               	addwf	drawCircle@ddF_y,f,c
  7859  000D78  0E00               	movlw	0
  7860  000D7A  2227               	addwfc	drawCircle@ddF_y+1,f,c
  7861                           
  7862                           ;ST7735_TFT.c: 573: f += ddF_y;
  7863  000D7C  5026               	movf	drawCircle@ddF_y,w,c
  7864  000D7E  2628               	addwf	drawCircle@f,f,c
  7865  000D80  5027               	movf	drawCircle@ddF_y+1,w,c
  7866  000D82  2229               	addwfc	drawCircle@f+1,f,c
  7867  000D84                     l249:
  7868                           
  7869                           ;ST7735_TFT.c: 574: }
  7870                           ;ST7735_TFT.c: 575: x++;
  7871  000D84  4A2A               	infsnz	drawCircle@x,f,c
  7872  000D86  2A2B               	incf	drawCircle@x+1,f,c
  7873                           
  7874                           ;ST7735_TFT.c: 576: ddF_x += 2;
  7875  000D88  0E02               	movlw	2
  7876  000D8A  2624               	addwf	drawCircle@ddF_x,f,c
  7877  000D8C  0E00               	movlw	0
  7878  000D8E  2225               	addwfc	drawCircle@ddF_x+1,f,c
  7879                           
  7880                           ;ST7735_TFT.c: 577: f += ddF_x;
  7881  000D90  5024               	movf	drawCircle@ddF_x,w,c
  7882  000D92  2628               	addwf	drawCircle@f,f,c
  7883  000D94  5025               	movf	drawCircle@ddF_x+1,w,c
  7884  000D96  2229               	addwfc	drawCircle@f+1,f,c
  7885                           
  7886                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  7887  000D98  501C               	movf	drawCircle@y0,w,c
  7888  000D9A  242C               	addwf	drawCircle@y,w,c
  7889  000D9C  6E16               	movwf	drawPixel@y,c
  7890  000D9E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7891  000DA2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7892  000DA6  501A               	movf	drawCircle@x0,w,c
  7893  000DA8  242A               	addwf	drawCircle@x,w,c
  7894  000DAA  EC80  F012         	call	_drawPixel
  7895                           
  7896                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  7897  000DAE  501C               	movf	drawCircle@y0,w,c
  7898  000DB0  242C               	addwf	drawCircle@y,w,c
  7899  000DB2  6E16               	movwf	drawPixel@y,c
  7900  000DB4  C020  F017         	movff	drawCircle@color,drawPixel@color
  7901  000DB8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7902  000DBC  502A               	movf	drawCircle@x,w,c
  7903  000DBE  0800               	sublw	0
  7904  000DC0  241A               	addwf	drawCircle@x0,w,c
  7905  000DC2  EC80  F012         	call	_drawPixel
  7906                           
  7907                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  7908  000DC6  502C               	movf	drawCircle@y,w,c
  7909  000DC8  0800               	sublw	0
  7910  000DCA  241C               	addwf	drawCircle@y0,w,c
  7911  000DCC  6E16               	movwf	drawPixel@y,c
  7912  000DCE  C020  F017         	movff	drawCircle@color,drawPixel@color
  7913  000DD2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7914  000DD6  501A               	movf	drawCircle@x0,w,c
  7915  000DD8  242A               	addwf	drawCircle@x,w,c
  7916  000DDA  EC80  F012         	call	_drawPixel
  7917                           
  7918                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  7919  000DDE  502C               	movf	drawCircle@y,w,c
  7920  000DE0  0800               	sublw	0
  7921  000DE2  241C               	addwf	drawCircle@y0,w,c
  7922  000DE4  6E16               	movwf	drawPixel@y,c
  7923  000DE6  C020  F017         	movff	drawCircle@color,drawPixel@color
  7924  000DEA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7925  000DEE  502A               	movf	drawCircle@x,w,c
  7926  000DF0  0800               	sublw	0
  7927  000DF2  241A               	addwf	drawCircle@x0,w,c
  7928  000DF4  EC80  F012         	call	_drawPixel
  7929                           
  7930                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  7931  000DF8  501C               	movf	drawCircle@y0,w,c
  7932  000DFA  242A               	addwf	drawCircle@x,w,c
  7933  000DFC  6E16               	movwf	drawPixel@y,c
  7934  000DFE  C020  F017         	movff	drawCircle@color,drawPixel@color
  7935  000E02  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7936  000E06  501A               	movf	drawCircle@x0,w,c
  7937  000E08  242C               	addwf	drawCircle@y,w,c
  7938  000E0A  EC80  F012         	call	_drawPixel
  7939                           
  7940                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  7941  000E0E  501C               	movf	drawCircle@y0,w,c
  7942  000E10  242A               	addwf	drawCircle@x,w,c
  7943  000E12  6E16               	movwf	drawPixel@y,c
  7944  000E14  C020  F017         	movff	drawCircle@color,drawPixel@color
  7945  000E18  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7946  000E1C  502C               	movf	drawCircle@y,w,c
  7947  000E1E  0800               	sublw	0
  7948  000E20  241A               	addwf	drawCircle@x0,w,c
  7949  000E22  EC80  F012         	call	_drawPixel
  7950                           
  7951                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  7952  000E26  502A               	movf	drawCircle@x,w,c
  7953  000E28  0800               	sublw	0
  7954  000E2A  241C               	addwf	drawCircle@y0,w,c
  7955  000E2C  6E16               	movwf	drawPixel@y,c
  7956  000E2E  C020  F017         	movff	drawCircle@color,drawPixel@color
  7957  000E32  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7958  000E36  501A               	movf	drawCircle@x0,w,c
  7959  000E38  242C               	addwf	drawCircle@y,w,c
  7960  000E3A  EC80  F012         	call	_drawPixel
  7961                           
  7962                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  7963  000E3E  502A               	movf	drawCircle@x,w,c
  7964  000E40  0800               	sublw	0
  7965  000E42  241C               	addwf	drawCircle@y0,w,c
  7966  000E44  6E16               	movwf	drawPixel@y,c
  7967  000E46  C020  F017         	movff	drawCircle@color,drawPixel@color
  7968  000E4A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7969  000E4E  502C               	movf	drawCircle@y,w,c
  7970  000E50  0800               	sublw	0
  7971  000E52  241A               	addwf	drawCircle@x0,w,c
  7972  000E54  EC80  F012         	call	_drawPixel
  7973  000E58  D000               	goto	l4590
  7974  000E5A                     l4590:
  7975  000E5A  502C               	movf	drawCircle@y,w,c
  7976  000E5C  5C2A               	subwf	drawCircle@x,w,c
  7977  000E5E  502B               	movf	drawCircle@x+1,w,c
  7978  000E60  0A80               	xorlw	128
  7979  000E62  6E22               	movwf	??_drawCircle& (0+255),c
  7980  000E64  502D               	movf	drawCircle@y+1,w,c
  7981  000E66  0A80               	xorlw	128
  7982  000E68  5822               	subwfb	??_drawCircle& (0+255),w,c
  7983  000E6A  A0D8               	btfss	status,0,c
  7984  000E6C  D77E               	goto	l4562
  7985  000E6E  0012               	return		;funcret
  7986  000E70                     __end_of_drawCircle:
  7987                           	opt stack 0
  7988                           tblptru	equ	0xFF8
  7989                           tblptrh	equ	0xFF7
  7990                           tblptrl	equ	0xFF6
  7991                           tablat	equ	0xFF5
  7992                           prodl	equ	0xFF3
  7993                           intcon	equ	0xFF2
  7994                           intcon2	equ	0xFF1
  7995                           intcon3	equ	0xFF0
  7996                           postinc0	equ	0xFEE
  7997                           wreg	equ	0xFE8
  7998                           postdec1	equ	0xFE5
  7999                           fsr1l	equ	0xFE1
  8000                           status	equ	0xFD8
  8001                           
  8002 ;; *************** function _PED_Control *****************
  8003 ;; Defined at:
  8004 ;;		line 501 in file "Lab8_redo.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  direction       1    wreg     unsigned char 
  8007 ;;  Num_Sec         1    8[BANK0 ] unsigned char 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  direction       1    9[BANK0 ] unsigned char 
  8010 ;;  i               1   11[BANK0 ] unsigned char 
  8011 ;;  i               1   10[BANK0 ] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;		None               void
  8014 ;; Registers used:
  8015 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8021 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;Total ram usage:        4 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:   10
  8028 ;; This function calls:
  8029 ;;		_Wait_One_Second_With_Beep
  8030 ;;		_update_LCD_PED_Count
  8031 ;; This function is called by:
  8032 ;;		_Day_Mode
  8033 ;; This function uses a non-reentrant model
  8034 ;;
  8035                           
  8036                           	psect	text37
  8037  001BAA                     __ptext37:
  8038                           	opt stack 0
  8039  001BAA                     _PED_Control:
  8040                           	opt stack 19
  8041                           
  8042                           ;incstack = 0
  8043                           ;PED_Control@direction stored from wreg
  8044  001BAA  0100               	movlb	0	; () banked
  8045  001BAC  6FAE               	movwf	PED_Control@direction& (0+255),b
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;Lab8_redo.c: 503: if (direction == 0)
  8049  001BAE  0100               	movlb	0	; () banked
  8050  001BB0  51AE               	movf	PED_Control@direction& (0+255),w,b
  8051  001BB2  0100               	movlb	0	; () banked
  8052  001BB4  A4D8               	btfss	status,2,c
  8053  001BB6  D01F               	goto	l5128
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;Lab8_redo.c: 504: {
  8057                           ;Lab8_redo.c: 505: for(char i = Num_Sec-1;i>0; i--)
  8058  001BB8  0100               	movlb	0	; () banked
  8059  001BBA  05AD               	decf	PED_Control@Num_Sec& (0+255),w,b
  8060  001BBC  0100               	movlb	0	; () banked
  8061  001BBE  6FAF               	movwf	PED_Control@i& (0+255),b
  8062  001BC0                     l5114:
  8063                           
  8064                           ; BSR set to: 0
  8065  001BC0  0100               	movlb	0	; () banked
  8066  001BC2  51AF               	movf	PED_Control@i& (0+255),w,b
  8067  001BC4  0100               	movlb	0	; () banked
  8068  001BC6  B4D8               	btfsc	status,2,c
  8069  001BC8  D00C               	goto	l5124
  8070  001BCA  D001               	goto	l5118
  8071                           
  8072                           ; BSR set to: 0
  8073  001BCC  D00A               	goto	l5124
  8074  001BCE                     l5118:
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;Lab8_redo.c: 506: {
  8078                           ;Lab8_redo.c: 507: update_LCD_PED_Count(0, i);
  8079  001BCE  C0AF  F041         	movff	PED_Control@i,update_LCD_PED_Count@count
  8080  001BD2  0E00               	movlw	0
  8081  001BD4  ECA9  F00B         	call	_update_LCD_PED_Count
  8082                           
  8083                           ;Lab8_redo.c: 508: Wait_One_Second_With_Beep();
  8084  001BD8  ECF3  F00E         	call	_Wait_One_Second_With_Beep	;wreg free
  8085  001BDC  0100               	movlb	0	; () banked
  8086  001BDE  07AF               	decf	PED_Control@i& (0+255),f,b
  8087  001BE0  D7EF               	goto	l5114
  8088  001BE2                     l5124:
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;Lab8_redo.c: 509: }
  8092                           ;Lab8_redo.c: 511: update_LCD_PED_Count(0, 0);
  8093  001BE2  0E00               	movlw	0
  8094  001BE4  6E41               	movwf	update_LCD_PED_Count@count,c
  8095  001BE6  0E00               	movlw	0
  8096  001BE8  ECA9  F00B         	call	_update_LCD_PED_Count
  8097                           
  8098                           ;Lab8_redo.c: 512: Wait_One_Second_With_Beep();
  8099  001BEC  ECF3  F00E         	call	_Wait_One_Second_With_Beep	;wreg free
  8100                           
  8101                           ;Lab8_redo.c: 513: NS_PED_SW = 0;
  8102  001BF0  0E00               	movlw	0
  8103  001BF2  6E4F               	movwf	_NS_PED_SW,c
  8104  001BF4  D000               	goto	l5128
  8105  001BF6                     l5128:
  8106                           
  8107                           ;Lab8_redo.c: 514: }
  8108                           ;Lab8_redo.c: 516: if (direction == 2)
  8109  001BF6  0E02               	movlw	2
  8110  001BF8  0100               	movlb	0	; () banked
  8111  001BFA  19AE               	xorwf	PED_Control@direction& (0+255),w,b
  8112  001BFC  A4D8               	btfss	status,2,c
  8113  001BFE  D01F               	goto	l475
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;Lab8_redo.c: 517: {
  8117                           ;Lab8_redo.c: 518: for(char i = Num_Sec-1;i>0; i--)
  8118  001C00  0100               	movlb	0	; () banked
  8119  001C02  05AD               	decf	PED_Control@Num_Sec& (0+255),w,b
  8120  001C04  0100               	movlb	0	; () banked
  8121  001C06  6FB0               	movwf	PED_Control@i_1511& (0+255),b
  8122  001C08                     l5132:
  8123                           
  8124                           ; BSR set to: 0
  8125  001C08  0100               	movlb	0	; () banked
  8126  001C0A  51B0               	movf	PED_Control@i_1511& (0+255),w,b
  8127  001C0C  0100               	movlb	0	; () banked
  8128  001C0E  B4D8               	btfsc	status,2,c
  8129  001C10  D00C               	goto	l5142
  8130  001C12  D001               	goto	l5136
  8131                           
  8132                           ; BSR set to: 0
  8133  001C14  D00A               	goto	l5142
  8134  001C16                     l5136:
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;Lab8_redo.c: 519: {
  8138                           ;Lab8_redo.c: 520: update_LCD_PED_Count(2, i);
  8139  001C16  C0B0  F041         	movff	PED_Control@i_1511,update_LCD_PED_Count@count
  8140  001C1A  0E02               	movlw	2
  8141  001C1C  ECA9  F00B         	call	_update_LCD_PED_Count
  8142                           
  8143                           ;Lab8_redo.c: 521: Wait_One_Second_With_Beep();
  8144  001C20  ECF3  F00E         	call	_Wait_One_Second_With_Beep	;wreg free
  8145  001C24  0100               	movlb	0	; () banked
  8146  001C26  07B0               	decf	PED_Control@i_1511& (0+255),f,b
  8147  001C28  D7EF               	goto	l5132
  8148  001C2A                     l5142:
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;Lab8_redo.c: 522: }
  8152                           ;Lab8_redo.c: 523: update_LCD_PED_Count(2, 0);
  8153  001C2A  0E00               	movlw	0
  8154  001C2C  6E41               	movwf	update_LCD_PED_Count@count,c
  8155  001C2E  0E02               	movlw	2
  8156  001C30  ECA9  F00B         	call	_update_LCD_PED_Count
  8157                           
  8158                           ;Lab8_redo.c: 524: Wait_One_Second_With_Beep();
  8159  001C34  ECF3  F00E         	call	_Wait_One_Second_With_Beep	;wreg free
  8160                           
  8161                           ;Lab8_redo.c: 525: EW_PED_SW = 0;
  8162  001C38  0E00               	movlw	0
  8163  001C3A  6E4C               	movwf	_EW_PED_SW,c
  8164  001C3C  D000               	goto	l475
  8165  001C3E                     l475:
  8166  001C3E  0012               	return		;funcret
  8167  001C40                     __end_of_PED_Control:
  8168                           	opt stack 0
  8169                           tblptru	equ	0xFF8
  8170                           tblptrh	equ	0xFF7
  8171                           tblptrl	equ	0xFF6
  8172                           tablat	equ	0xFF5
  8173                           prodl	equ	0xFF3
  8174                           intcon	equ	0xFF2
  8175                           intcon2	equ	0xFF1
  8176                           intcon3	equ	0xFF0
  8177                           postinc0	equ	0xFEE
  8178                           wreg	equ	0xFE8
  8179                           postdec1	equ	0xFE5
  8180                           fsr1l	equ	0xFE1
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _update_LCD_PED_Count *****************
  8184 ;; Defined at:
  8185 ;;		line 806 in file "Lab8_redo.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;  direction       1    wreg     unsigned char 
  8188 ;;  count           1   64[COMRAM] unsigned char 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  direction       1    7[BANK0 ] unsigned char 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;		None               void
  8193 ;; Registers used:
  8194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8200 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;Total ram usage:        2 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    9
  8207 ;; This function calls:
  8208 ;;		___awdiv
  8209 ;;		___awmod
  8210 ;;		_drawtext
  8211 ;; This function is called by:
  8212 ;;		_PED_Control
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           	psect	text38
  8217  001752                     __ptext38:
  8218                           	opt stack 0
  8219  001752                     _update_LCD_PED_Count:
  8220                           	opt stack 19
  8221                           
  8222                           ;incstack = 0
  8223                           ;update_LCD_PED_Count@direction stored from wreg
  8224  001752  0100               	movlb	0	; () banked
  8225  001754  6FAC               	movwf	update_LCD_PED_Count@direction& (0+255),b
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;Lab8_redo.c: 808: switch (direction)
  8229  001756  D05B               	goto	l4988
  8230  001758                     l4978:
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;Lab8_redo.c: 811: PED_NS_Count[0] = count/10 + '0';
  8234  001758  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8235  00175C  6A10               	clrf	___awdiv@dividend+1,c
  8236  00175E  0E00               	movlw	0
  8237  001760  6E12               	movwf	___awdiv@divisor+1,c
  8238  001762  0E0A               	movlw	10
  8239  001764  6E11               	movwf	___awdiv@divisor,c
  8240  001766  EC20  F00E         	call	___awdiv	;wreg free
  8241  00176A  500F               	movf	?___awdiv,w,c
  8242  00176C  0F30               	addlw	48
  8243  00176E  0100               	movlb	0	; () banked
  8244  001770  6FBC               	movwf	_PED_NS_Count& (0+255),b
  8245                           
  8246                           ;Lab8_redo.c: 812: PED_NS_Count[1] = count%10 + '0';
  8247  001772  C041  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8248  001776  6A10               	clrf	___awmod@dividend+1,c
  8249  001778  0E00               	movlw	0
  8250  00177A  6E12               	movwf	___awmod@divisor+1,c
  8251  00177C  0E0A               	movlw	10
  8252  00177E  6E11               	movwf	___awmod@divisor,c
  8253  001780  ECBA  F00F         	call	___awmod	;wreg free
  8254  001784  500F               	movf	?___awmod,w,c
  8255  001786  0F30               	addlw	48
  8256  001788  0100               	movlb	0	; () banked
  8257  00178A  6FBD               	movwf	(_PED_NS_Count+1)& (0+255),b
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;Lab8_redo.c: 813: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  8261  00178C  0E1E               	movlw	30
  8262  00178E  6E37               	movwf	drawtext@y,c
  8263  001790  0EBC               	movlw	low _PED_NS_Count
  8264  001792  6E38               	movwf	drawtext@_text,c
  8265  001794  0E00               	movlw	high _PED_NS_Count
  8266  001796  6E39               	movwf	drawtext@_text+1,c
  8267  001798  0E00               	movlw	0
  8268  00179A  6E3B               	movwf	drawtext@color+1,c
  8269  00179C  0E1F               	movlw	31
  8270  00179E  6E3A               	movwf	drawtext@color,c
  8271  0017A0  0E00               	movlw	0
  8272  0017A2  6E3D               	movwf	drawtext@bg+1,c
  8273  0017A4  0E00               	movlw	0
  8274  0017A6  6E3C               	movwf	drawtext@bg,c
  8275  0017A8  0E02               	movlw	2
  8276  0017AA  6E3E               	movwf	drawtext@size,c
  8277  0017AC  0E02               	movlw	2
  8278  0017AE  ECCC  F009         	call	_drawtext
  8279                           
  8280                           ;Lab8_redo.c: 814: break;
  8281  0017B2  D036               	goto	l530
  8282  0017B4                     l4982:
  8283                           
  8284                           ;Lab8_redo.c: 817: PED_EW_Count[0] = count/10 + '0';
  8285  0017B4  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  8286  0017B8  6A10               	clrf	___awdiv@dividend+1,c
  8287  0017BA  0E00               	movlw	0
  8288  0017BC  6E12               	movwf	___awdiv@divisor+1,c
  8289  0017BE  0E0A               	movlw	10
  8290  0017C0  6E11               	movwf	___awdiv@divisor,c
  8291  0017C2  EC20  F00E         	call	___awdiv	;wreg free
  8292  0017C6  500F               	movf	?___awdiv,w,c
  8293  0017C8  0F30               	addlw	48
  8294  0017CA  0100               	movlb	0	; () banked
  8295  0017CC  6FB9               	movwf	_PED_EW_Count& (0+255),b
  8296                           
  8297                           ;Lab8_redo.c: 818: PED_EW_Count[1] = count%10 + '0';
  8298  0017CE  C041  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  8299  0017D2  6A10               	clrf	___awmod@dividend+1,c
  8300  0017D4  0E00               	movlw	0
  8301  0017D6  6E12               	movwf	___awmod@divisor+1,c
  8302  0017D8  0E0A               	movlw	10
  8303  0017DA  6E11               	movwf	___awmod@divisor,c
  8304  0017DC  ECBA  F00F         	call	___awmod	;wreg free
  8305  0017E0  500F               	movf	?___awmod,w,c
  8306  0017E2  0F30               	addlw	48
  8307  0017E4  0100               	movlb	0	; () banked
  8308  0017E6  6FBA               	movwf	(_PED_EW_Count+1)& (0+255),b
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;Lab8_redo.c: 819: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  8312  0017E8  0E5A               	movlw	90
  8313  0017EA  6E37               	movwf	drawtext@y,c
  8314  0017EC  0EB9               	movlw	low _PED_EW_Count
  8315  0017EE  6E38               	movwf	drawtext@_text,c
  8316  0017F0  0E00               	movlw	high _PED_EW_Count
  8317  0017F2  6E39               	movwf	drawtext@_text+1,c
  8318  0017F4  0E07               	movlw	7
  8319  0017F6  6E3B               	movwf	drawtext@color+1,c
  8320  0017F8  683A               	setf	drawtext@color,c
  8321  0017FA  0E00               	movlw	0
  8322  0017FC  6E3D               	movwf	drawtext@bg+1,c
  8323  0017FE  0E00               	movlw	0
  8324  001800  6E3C               	movwf	drawtext@bg,c
  8325  001802  0E02               	movlw	2
  8326  001804  6E3E               	movwf	drawtext@size,c
  8327  001806  0E02               	movlw	2
  8328  001808  ECCC  F009         	call	_drawtext
  8329                           
  8330                           ;Lab8_redo.c: 822: }
  8331                           
  8332                           ;Lab8_redo.c: 820: break;
  8333  00180C  D009               	goto	l530
  8334  00180E                     l4988:
  8335  00180E  0100               	movlb	0	; () banked
  8336  001810  51AC               	movf	update_LCD_PED_Count@direction& (0+255),w,b
  8337                           
  8338                           ; Switch size 1, requested type "space"
  8339                           ; Number of cases is 2, Range of values is 0 to 2
  8340                           ; switch strategies available:
  8341                           ; Name         Instructions Cycles
  8342                           ; simple_byte            7     4 (average)
  8343                           ;	Chosen strategy is simple_byte
  8344  001812  0A00               	xorlw	0	; case 0
  8345  001814  B4D8               	btfsc	status,2,c
  8346  001816  D7A0               	goto	l4978
  8347  001818  0A02               	xorlw	2	; case 2
  8348  00181A  B4D8               	btfsc	status,2,c
  8349  00181C  D7CB               	goto	l4982
  8350  00181E  D000               	goto	l530
  8351  001820                     l530:
  8352  001820  0012               	return		;funcret
  8353  001822                     __end_of_update_LCD_PED_Count:
  8354                           	opt stack 0
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodl	equ	0xFF3
  8360                           intcon	equ	0xFF2
  8361                           intcon2	equ	0xFF1
  8362                           intcon3	equ	0xFF0
  8363                           postinc0	equ	0xFEE
  8364                           wreg	equ	0xFE8
  8365                           postdec1	equ	0xFE5
  8366                           fsr1l	equ	0xFE1
  8367                           status	equ	0xFD8
  8368                           
  8369 ;; *************** function ___awmod *****************
  8370 ;; Defined at:
  8371 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;  dividend        2   14[COMRAM] int 
  8374 ;;  divisor         2   16[COMRAM] int 
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  sign            1   19[COMRAM] unsigned char 
  8377 ;;  counter         1   18[COMRAM] unsigned char 
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  2   14[COMRAM] int 
  8380 ;; Registers used:
  8381 ;;		wreg, status,2, status,0
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;Total ram usage:        6 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    2
  8394 ;; This function calls:
  8395 ;;		Nothing
  8396 ;; This function is called by:
  8397 ;;		_update_LCD_count
  8398 ;;		_update_LCD_PED_Count
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           	psect	text39
  8403  001F74                     __ptext39:
  8404                           	opt stack 0
  8405  001F74                     ___awmod:
  8406                           	opt stack 25
  8407                           
  8408                           ;incstack = 0
  8409  001F74  0E00               	movlw	0
  8410  001F76  6E14               	movwf	___awmod@sign,c
  8411  001F78  AE10               	btfss	___awmod@dividend+1,7,c
  8412  001F7A  D007               	goto	l4726
  8413  001F7C  6C0F               	negf	___awmod@dividend,c
  8414  001F7E  1E10               	comf	___awmod@dividend+1,f,c
  8415  001F80  B0D8               	btfsc	status,0,c
  8416  001F82  2A10               	incf	___awmod@dividend+1,f,c
  8417  001F84  0E01               	movlw	1
  8418  001F86  6E14               	movwf	___awmod@sign,c
  8419  001F88  D000               	goto	l4726
  8420  001F8A                     l4726:
  8421  001F8A  AE12               	btfss	___awmod@divisor+1,7,c
  8422  001F8C  D005               	goto	l4730
  8423  001F8E  6C11               	negf	___awmod@divisor,c
  8424  001F90  1E12               	comf	___awmod@divisor+1,f,c
  8425  001F92  B0D8               	btfsc	status,0,c
  8426  001F94  2A12               	incf	___awmod@divisor+1,f,c
  8427  001F96  D000               	goto	l4730
  8428  001F98                     l4730:
  8429  001F98  5011               	movf	___awmod@divisor,w,c
  8430  001F9A  1012               	iorwf	___awmod@divisor+1,w,c
  8431  001F9C  B4D8               	btfsc	status,2,c
  8432  001F9E  D01D               	goto	l4746
  8433  001FA0  0E01               	movlw	1
  8434  001FA2  6E13               	movwf	___awmod@counter,c
  8435  001FA4  D005               	goto	l4736
  8436  001FA6                     l4734:
  8437  001FA6  90D8               	bcf	status,0,c
  8438  001FA8  3611               	rlcf	___awmod@divisor,f,c
  8439  001FAA  3612               	rlcf	___awmod@divisor+1,f,c
  8440  001FAC  2A13               	incf	___awmod@counter,f,c
  8441  001FAE  D000               	goto	l4736
  8442  001FB0                     l4736:
  8443  001FB0  BE12               	btfsc	___awmod@divisor+1,7,c
  8444  001FB2  D002               	goto	l4738
  8445  001FB4  D7F8               	goto	l4734
  8446  001FB6  D000               	goto	l4738
  8447  001FB8                     l4738:
  8448  001FB8  5011               	movf	___awmod@divisor,w,c
  8449  001FBA  5C0F               	subwf	___awmod@dividend,w,c
  8450  001FBC  5012               	movf	___awmod@divisor+1,w,c
  8451  001FBE  5810               	subwfb	___awmod@dividend+1,w,c
  8452  001FC0  A0D8               	btfss	status,0,c
  8453  001FC2  D005               	goto	l4742
  8454  001FC4  5011               	movf	___awmod@divisor,w,c
  8455  001FC6  5E0F               	subwf	___awmod@dividend,f,c
  8456  001FC8  5012               	movf	___awmod@divisor+1,w,c
  8457  001FCA  5A10               	subwfb	___awmod@dividend+1,f,c
  8458  001FCC  D000               	goto	l4742
  8459  001FCE                     l4742:
  8460  001FCE  90D8               	bcf	status,0,c
  8461  001FD0  3212               	rrcf	___awmod@divisor+1,f,c
  8462  001FD2  3211               	rrcf	___awmod@divisor,f,c
  8463  001FD4  2E13               	decfsz	___awmod@counter,f,c
  8464  001FD6  D7F0               	goto	l4738
  8465  001FD8  D000               	goto	l4746
  8466  001FDA                     l4746:
  8467  001FDA  5014               	movf	___awmod@sign,w,c
  8468  001FDC  B4D8               	btfsc	status,2,c
  8469  001FDE  D005               	goto	l4750
  8470  001FE0  6C0F               	negf	___awmod@dividend,c
  8471  001FE2  1E10               	comf	___awmod@dividend+1,f,c
  8472  001FE4  B0D8               	btfsc	status,0,c
  8473  001FE6  2A10               	incf	___awmod@dividend+1,f,c
  8474  001FE8  D000               	goto	l4750
  8475  001FEA                     l4750:
  8476  001FEA  C00F  F00F         	movff	___awmod@dividend,?___awmod
  8477  001FEE  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  8478  001FF2  D000               	goto	l797
  8479  001FF4                     l797:
  8480  001FF4  0012               	return		;funcret
  8481  001FF6                     __end_of___awmod:
  8482                           	opt stack 0
  8483                           tblptru	equ	0xFF8
  8484                           tblptrh	equ	0xFF7
  8485                           tblptrl	equ	0xFF6
  8486                           tablat	equ	0xFF5
  8487                           prodl	equ	0xFF3
  8488                           intcon	equ	0xFF2
  8489                           intcon2	equ	0xFF1
  8490                           intcon3	equ	0xFF0
  8491                           postinc0	equ	0xFEE
  8492                           wreg	equ	0xFE8
  8493                           postdec1	equ	0xFE5
  8494                           fsr1l	equ	0xFE1
  8495                           status	equ	0xFD8
  8496                           
  8497 ;; *************** function ___awdiv *****************
  8498 ;; Defined at:
  8499 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;  dividend        2   14[COMRAM] int 
  8502 ;;  divisor         2   16[COMRAM] int 
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;  quotient        2   20[COMRAM] int 
  8505 ;;  sign            1   19[COMRAM] unsigned char 
  8506 ;;  counter         1   18[COMRAM] unsigned char 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  2   14[COMRAM] int 
  8509 ;; Registers used:
  8510 ;;		wreg, status,2, status,0
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8516 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;Total ram usage:        8 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    2
  8523 ;; This function calls:
  8524 ;;		Nothing
  8525 ;; This function is called by:
  8526 ;;		_update_LCD_count
  8527 ;;		_update_LCD_PED_Count
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           	psect	text40
  8532  001C40                     __ptext40:
  8533                           	opt stack 0
  8534  001C40                     ___awdiv:
  8535                           	opt stack 25
  8536                           
  8537                           ;incstack = 0
  8538  001C40  0E00               	movlw	0
  8539  001C42  6E14               	movwf	___awdiv@sign,c
  8540  001C44  AE12               	btfss	___awdiv@divisor+1,7,c
  8541  001C46  D007               	goto	l4682
  8542  001C48  6C11               	negf	___awdiv@divisor,c
  8543  001C4A  1E12               	comf	___awdiv@divisor+1,f,c
  8544  001C4C  B0D8               	btfsc	status,0,c
  8545  001C4E  2A12               	incf	___awdiv@divisor+1,f,c
  8546  001C50  0E01               	movlw	1
  8547  001C52  6E14               	movwf	___awdiv@sign,c
  8548  001C54  D000               	goto	l4682
  8549  001C56                     l4682:
  8550  001C56  AE10               	btfss	___awdiv@dividend+1,7,c
  8551  001C58  D007               	goto	l4688
  8552  001C5A  6C0F               	negf	___awdiv@dividend,c
  8553  001C5C  1E10               	comf	___awdiv@dividend+1,f,c
  8554  001C5E  B0D8               	btfsc	status,0,c
  8555  001C60  2A10               	incf	___awdiv@dividend+1,f,c
  8556  001C62  0E01               	movlw	1
  8557  001C64  1A14               	xorwf	___awdiv@sign,f,c
  8558  001C66  D000               	goto	l4688
  8559  001C68                     l4688:
  8560  001C68  0E00               	movlw	0
  8561  001C6A  6E16               	movwf	___awdiv@quotient+1,c
  8562  001C6C  0E00               	movlw	0
  8563  001C6E  6E15               	movwf	___awdiv@quotient,c
  8564  001C70  5011               	movf	___awdiv@divisor,w,c
  8565  001C72  1012               	iorwf	___awdiv@divisor+1,w,c
  8566  001C74  B4D8               	btfsc	status,2,c
  8567  001C76  D021               	goto	l4710
  8568  001C78  0E01               	movlw	1
  8569  001C7A  6E13               	movwf	___awdiv@counter,c
  8570  001C7C  D005               	goto	l4696
  8571  001C7E                     l4694:
  8572  001C7E  90D8               	bcf	status,0,c
  8573  001C80  3611               	rlcf	___awdiv@divisor,f,c
  8574  001C82  3612               	rlcf	___awdiv@divisor+1,f,c
  8575  001C84  2A13               	incf	___awdiv@counter,f,c
  8576  001C86  D000               	goto	l4696
  8577  001C88                     l4696:
  8578  001C88  BE12               	btfsc	___awdiv@divisor+1,7,c
  8579  001C8A  D002               	goto	l4698
  8580  001C8C  D7F8               	goto	l4694
  8581  001C8E  D000               	goto	l4698
  8582  001C90                     l4698:
  8583  001C90  90D8               	bcf	status,0,c
  8584  001C92  3615               	rlcf	___awdiv@quotient,f,c
  8585  001C94  3616               	rlcf	___awdiv@quotient+1,f,c
  8586  001C96  5011               	movf	___awdiv@divisor,w,c
  8587  001C98  5C0F               	subwf	___awdiv@dividend,w,c
  8588  001C9A  5012               	movf	___awdiv@divisor+1,w,c
  8589  001C9C  5810               	subwfb	___awdiv@dividend+1,w,c
  8590  001C9E  A0D8               	btfss	status,0,c
  8591  001CA0  D006               	goto	l4706
  8592  001CA2  5011               	movf	___awdiv@divisor,w,c
  8593  001CA4  5E0F               	subwf	___awdiv@dividend,f,c
  8594  001CA6  5012               	movf	___awdiv@divisor+1,w,c
  8595  001CA8  5A10               	subwfb	___awdiv@dividend+1,f,c
  8596  001CAA  8015               	bsf	___awdiv@quotient,0,c
  8597  001CAC  D000               	goto	l4706
  8598  001CAE                     l4706:
  8599  001CAE  90D8               	bcf	status,0,c
  8600  001CB0  3212               	rrcf	___awdiv@divisor+1,f,c
  8601  001CB2  3211               	rrcf	___awdiv@divisor,f,c
  8602  001CB4  2E13               	decfsz	___awdiv@counter,f,c
  8603  001CB6  D7EC               	goto	l4698
  8604  001CB8  D000               	goto	l4710
  8605  001CBA                     l4710:
  8606  001CBA  5014               	movf	___awdiv@sign,w,c
  8607  001CBC  B4D8               	btfsc	status,2,c
  8608  001CBE  D005               	goto	l4714
  8609  001CC0  6C15               	negf	___awdiv@quotient,c
  8610  001CC2  1E16               	comf	___awdiv@quotient+1,f,c
  8611  001CC4  B0D8               	btfsc	status,0,c
  8612  001CC6  2A16               	incf	___awdiv@quotient+1,f,c
  8613  001CC8  D000               	goto	l4714
  8614  001CCA                     l4714:
  8615  001CCA  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  8616  001CCE  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  8617  001CD2  D000               	goto	l784
  8618  001CD4                     l784:
  8619  001CD4  0012               	return		;funcret
  8620  001CD6                     __end_of___awdiv:
  8621                           	opt stack 0
  8622                           tblptru	equ	0xFF8
  8623                           tblptrh	equ	0xFF7
  8624                           tblptrl	equ	0xFF6
  8625                           tablat	equ	0xFF5
  8626                           prodl	equ	0xFF3
  8627                           intcon	equ	0xFF2
  8628                           intcon2	equ	0xFF1
  8629                           intcon3	equ	0xFF0
  8630                           postinc0	equ	0xFEE
  8631                           wreg	equ	0xFE8
  8632                           postdec1	equ	0xFE5
  8633                           fsr1l	equ	0xFE1
  8634                           status	equ	0xFD8
  8635                           
  8636 ;; *************** function _Wait_One_Second_With_Beep *****************
  8637 ;; Defined at:
  8638 ;;		line 687 in file "Lab8_redo.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;		None
  8643 ;; Return value:  Size  Location     Type
  8644 ;;		None               void
  8645 ;; Registers used:
  8646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;Total ram usage:        0 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    9
  8659 ;; This function calls:
  8660 ;;		_Activate_Buzzer
  8661 ;;		_Deactivate_Buzzer
  8662 ;;		_Wait_Half_Second
  8663 ;;		_drawtext
  8664 ;;		_strcpy
  8665 ;; This function is called by:
  8666 ;;		_PED_Control
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	text41
  8671  001DE6                     __ptext41:
  8672                           	opt stack 0
  8673  001DE6                     _Wait_One_Second_With_Beep:
  8674                           	opt stack 19
  8675                           
  8676                           ;Lab8_redo.c: 689: PORTDbits.RD7 = 1;
  8677                           
  8678                           ;incstack = 0
  8679  001DE6  8E83               	bsf	3971,7,c	;volatile
  8680                           
  8681                           ;Lab8_redo.c: 690: Activate_Buzzer();
  8682  001DE8  EC4D  F013         	call	_Activate_Buzzer	;wreg free
  8683                           
  8684                           ;Lab8_redo.c: 691: strcpy(txt,"*");
  8685  001DEC  C049  F00F         	movff	_txt,strcpy@to
  8686  001DF0  C04A  F010         	movff	_txt+1,strcpy@to+1
  8687  001DF4  0EFD               	movlw	low STR_5
  8688  001DF6  6E11               	movwf	strcpy@from,c
  8689  001DF8  0EFF               	movlw	high STR_5
  8690  001DFA  6E12               	movwf	strcpy@from+1,c
  8691  001DFC  EC67  F012         	call	_strcpy	;wreg free
  8692                           
  8693                           ;Lab8_redo.c: 692: drawtext(120,10,txt,0xFFFF,0x0000,1);
  8694  001E00  0E0A               	movlw	10
  8695  001E02  6E37               	movwf	drawtext@y,c
  8696  001E04  C049  F038         	movff	_txt,drawtext@_text
  8697  001E08  C04A  F039         	movff	_txt+1,drawtext@_text+1
  8698  001E0C  0EFF               	movlw	255
  8699  001E0E  6E3B               	movwf	drawtext@color+1,c
  8700  001E10  683A               	setf	drawtext@color,c
  8701  001E12  0E00               	movlw	0
  8702  001E14  6E3D               	movwf	drawtext@bg+1,c
  8703  001E16  0E00               	movlw	0
  8704  001E18  6E3C               	movwf	drawtext@bg,c
  8705  001E1A  0E01               	movlw	1
  8706  001E1C  6E3E               	movwf	drawtext@size,c
  8707  001E1E  0E78               	movlw	120
  8708  001E20  ECCC  F009         	call	_drawtext
  8709                           
  8710                           ;Lab8_redo.c: 693: Wait_Half_Second();
  8711  001E24  ECF5  F012         	call	_Wait_Half_Second	;wreg free
  8712                           
  8713                           ;Lab8_redo.c: 695: PORTDbits.RD7 = 0;
  8714  001E28  9E83               	bcf	3971,7,c	;volatile
  8715                           
  8716                           ;Lab8_redo.c: 696: strcpy(txt," ");
  8717  001E2A  C049  F00F         	movff	_txt,strcpy@to
  8718  001E2E  C04A  F010         	movff	_txt+1,strcpy@to+1
  8719  001E32  0EFB               	movlw	low STR_14
  8720  001E34  6E11               	movwf	strcpy@from,c
  8721  001E36  0EFF               	movlw	high STR_14
  8722  001E38  6E12               	movwf	strcpy@from+1,c
  8723  001E3A  EC67  F012         	call	_strcpy	;wreg free
  8724                           
  8725                           ;Lab8_redo.c: 697: drawtext(120,10,txt,0xFFFF,0x0000,1);
  8726  001E3E  0E0A               	movlw	10
  8727  001E40  6E37               	movwf	drawtext@y,c
  8728  001E42  C049  F038         	movff	_txt,drawtext@_text
  8729  001E46  C04A  F039         	movff	_txt+1,drawtext@_text+1
  8730  001E4A  0EFF               	movlw	255
  8731  001E4C  6E3B               	movwf	drawtext@color+1,c
  8732  001E4E  683A               	setf	drawtext@color,c
  8733  001E50  0E00               	movlw	0
  8734  001E52  6E3D               	movwf	drawtext@bg+1,c
  8735  001E54  0E00               	movlw	0
  8736  001E56  6E3C               	movwf	drawtext@bg,c
  8737  001E58  0E01               	movlw	1
  8738  001E5A  6E3E               	movwf	drawtext@size,c
  8739  001E5C  0E78               	movlw	120
  8740  001E5E  ECCC  F009         	call	_drawtext
  8741                           
  8742                           ;Lab8_redo.c: 698: Deactivate_Buzzer();
  8743  001E62  EC73  F013         	call	_Deactivate_Buzzer	;wreg free
  8744                           
  8745                           ;Lab8_redo.c: 699: Wait_Half_Second();
  8746  001E66  ECF5  F012         	call	_Wait_Half_Second	;wreg free
  8747  001E6A  0012               	return		;funcret
  8748  001E6C                     __end_of_Wait_One_Second_With_Beep:
  8749                           	opt stack 0
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodl	equ	0xFF3
  8755                           intcon	equ	0xFF2
  8756                           intcon2	equ	0xFF1
  8757                           intcon3	equ	0xFF0
  8758                           postinc0	equ	0xFEE
  8759                           wreg	equ	0xFE8
  8760                           postdec1	equ	0xFE5
  8761                           fsr1l	equ	0xFE1
  8762                           status	equ	0xFD8
  8763                           
  8764 ;; *************** function _strcpy *****************
  8765 ;; Defined at:
  8766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  to              2   14[COMRAM] PTR unsigned char 
  8769 ;;		 -> NULL(0), buffer(31), 
  8770 ;;  from            2   16[COMRAM] PTR const unsigned char 
  8771 ;;		 -> STR_16(2), STR_15(2), STR_14(2), STR_13(2), 
  8772 ;;		 -> STR_12(21), STR_11(4), STR_10(4), STR_9(7), 
  8773 ;;		 -> STR_8(10), STR_7(7), STR_6(12), STR_5(2), 
  8774 ;;		 -> STR_4(4), STR_3(4), STR_2(6), STR_1(20), 
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;  cp              2   18[COMRAM] PTR unsigned char 
  8777 ;;		 -> NULL(0), buffer(31), 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  2   14[COMRAM] PTR unsigned char 
  8780 ;; Registers used:
  8781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8787 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8791 ;;Total ram usage:        6 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    2
  8794 ;; This function calls:
  8795 ;;		Nothing
  8796 ;; This function is called by:
  8797 ;;		_Initialize_Screen
  8798 ;;		_Wait_One_Second
  8799 ;;		_Wait_One_Second_With_Beep
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text42
  8804  0024CE                     __ptext42:
  8805                           	opt stack 0
  8806  0024CE                     _strcpy:
  8807                           	opt stack 25
  8808                           
  8809                           ;incstack = 0
  8810  0024CE  C00F  F013         	movff	strcpy@to,strcpy@cp
  8811  0024D2  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  8812  0024D6  D005               	goto	l4598
  8813  0024D8                     l4596:
  8814  0024D8  4A13               	infsnz	strcpy@cp,f,c
  8815  0024DA  2A14               	incf	strcpy@cp+1,f,c
  8816  0024DC  4A11               	infsnz	strcpy@from,f,c
  8817  0024DE  2A12               	incf	strcpy@from+1,f,c
  8818  0024E0  D000               	goto	l4598
  8819  0024E2                     l4598:
  8820  0024E2  C011  FFF6         	movff	strcpy@from,tblptrl
  8821  0024E6  C012  FFF7         	movff	strcpy@from+1,tblptrh
  8822  0024EA                     	if	0	;tblptru may be non-zero
  8823  0024EA                     	endif
  8824  0024EA                     	if	0	;tblptru may be non-zero
  8825  0024EA                     	endif
  8826  0024EA  C013  FFD9         	movff	strcpy@cp,fsr2l
  8827  0024EE  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  8828  0024F2  0008               	tblrd		*
  8829  0024F4  CFF5 FFDF          	movff	tablat,indf2
  8830  0024F8  50DF               	movf	indf2,w,c
  8831  0024FA  A4D8               	btfss	status,2,c
  8832  0024FC  D7ED               	goto	l4596
  8833                           
  8834                           ;	Return value of _strcpy is never used
  8835  0024FE  0012               	return		;funcret
  8836  002500                     __end_of_strcpy:
  8837                           	opt stack 0
  8838                           tblptru	equ	0xFF8
  8839                           tblptrh	equ	0xFF7
  8840                           tblptrl	equ	0xFF6
  8841                           tablat	equ	0xFF5
  8842                           prodl	equ	0xFF3
  8843                           intcon	equ	0xFF2
  8844                           intcon2	equ	0xFF1
  8845                           intcon3	equ	0xFF0
  8846                           postinc0	equ	0xFEE
  8847                           wreg	equ	0xFE8
  8848                           postdec1	equ	0xFE5
  8849                           fsr1l	equ	0xFE1
  8850                           indf2	equ	0xFDF
  8851                           fsr2h	equ	0xFDA
  8852                           fsr2l	equ	0xFD9
  8853                           status	equ	0xFD8
  8854                           
  8855 ;; *************** function _drawtext *****************
  8856 ;; Defined at:
  8857 ;;		line 507 in file "ST7735_TFT.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;  x               1    wreg     unsigned char 
  8860 ;;  y               1   54[COMRAM] unsigned char 
  8861 ;;  _text           2   55[COMRAM] PTR unsigned char 
  8862 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8863 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8864 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8865 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8866 ;;  color           2   57[COMRAM] unsigned int 
  8867 ;;  bg              2   59[COMRAM] unsigned int 
  8868 ;;  size            1   61[COMRAM] unsigned char 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  x               1    0[BANK0 ] unsigned char 
  8871 ;;  i               2    3[BANK0 ] unsigned int 
  8872 ;;  textsize        2    1[BANK0 ] unsigned int 
  8873 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  8874 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;		None               void
  8877 ;; Registers used:
  8878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:       17 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    8
  8891 ;; This function calls:
  8892 ;;		_drawChar
  8893 ;;		_strlen
  8894 ;; This function is called by:
  8895 ;;		_Initialize_Screen
  8896 ;;		_Wait_One_Second
  8897 ;;		_Wait_One_Second_With_Beep
  8898 ;;		_update_LCD_count
  8899 ;;		_update_LCD_PED_Count
  8900 ;;		_update_LCD_misc
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text43
  8905  001398                     __ptext43:
  8906                           	opt stack 0
  8907  001398                     _drawtext:
  8908                           	opt stack 19
  8909                           
  8910                           ;incstack = 0
  8911                           ;drawtext@x stored from wreg
  8912  001398  0100               	movlb	0	; () banked
  8913  00139A  6FA5               	movwf	drawtext@x& (0+255),b
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  8917                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  8918                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  8919  00139C  C0A5  F0AB         	movff	drawtext@x,drawtext@cursor_x
  8920                           
  8921                           ; BSR set to: 0
  8922  0013A0  C037  F0AA         	movff	drawtext@y,drawtext@cursor_y
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  8926  0013A4  C038  F00F         	movff	drawtext@_text,strlen@s
  8927  0013A8  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  8928  0013AC  EC0F  F012         	call	_strlen	;wreg free
  8929  0013B0  C00F  F0A6         	movff	?_strlen,drawtext@textsize
  8930  0013B4  C010  F0A7         	movff	?_strlen+1,drawtext@textsize+1
  8931                           
  8932                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  8933  0013B8  0E00               	movlw	0
  8934  0013BA  0100               	movlb	0	; () banked
  8935  0013BC  6FA9               	movwf	(drawtext@i+1)& (0+255),b
  8936  0013BE  0E00               	movlw	0
  8937  0013C0  6FA8               	movwf	drawtext@i& (0+255),b
  8938  0013C2  D064               	goto	l4412
  8939  0013C4                     l4386:
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  8943  0013C4  505B               	movf	_wrap,w,c
  8944  0013C6  B4D8               	btfsc	status,2,c
  8945  0013C8  D034               	goto	l4402
  8946                           
  8947                           ; BSR set to: 0
  8948  0013CA  503E               	movf	drawtext@size,w,c
  8949  0013CC  0D05               	mullw	5
  8950  0013CE  0100               	movlb	0	; () banked
  8951  0013D0  51AB               	movf	drawtext@cursor_x& (0+255),w,b
  8952  0013D2  6E3F               	movwf	??_drawtext& (0+255),c
  8953  0013D4  6A40               	clrf	(??_drawtext+1)& (0+255),c
  8954  0013D6  50F3               	movf	prodl,w,c
  8955  0013D8  263F               	addwf	??_drawtext,f,c
  8956  0013DA  50F4               	movf	prodh,w,c
  8957  0013DC  2240               	addwfc	??_drawtext+1,f,c
  8958  0013DE  BE40               	btfsc	??_drawtext+1,7,c
  8959  0013E0  D028               	goto	l4402
  8960  0013E2  5040               	movf	??_drawtext+1,w,c
  8961  0013E4  E104               	bnz	u3100
  8962  0013E6  0E81               	movlw	129
  8963  0013E8  5C3F               	subwf	??_drawtext,w,c
  8964  0013EA  A0D8               	btfss	status,0,c
  8965  0013EC  D022               	goto	l4402
  8966  0013EE                     u3100:
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;ST7735_TFT.c: 515: cursor_x = 0;
  8970  0013EE  0E00               	movlw	0
  8971  0013F0  0100               	movlb	0	; () banked
  8972  0013F2  6FAB               	movwf	drawtext@cursor_x& (0+255),b
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  8976  0013F4  503E               	movf	drawtext@size,w,c
  8977  0013F6  0D07               	mullw	7
  8978  0013F8  50F3               	movf	prodl,w,c
  8979  0013FA  0100               	movlb	0	; () banked
  8980  0013FC  25AA               	addwf	drawtext@cursor_y& (0+255),w,b
  8981  0013FE  0F03               	addlw	3
  8982  001400  0100               	movlb	0	; () banked
  8983  001402  6FAA               	movwf	drawtext@cursor_y& (0+255),b
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  8987  001404  0EA0               	movlw	160
  8988  001406  0100               	movlb	0	; () banked
  8989  001408  65AA               	cpfsgt	drawtext@cursor_y& (0+255),b
  8990  00140A  D004               	goto	l4398
  8991                           
  8992                           ; BSR set to: 0
  8993  00140C  0EA0               	movlw	160
  8994  00140E  0100               	movlb	0	; () banked
  8995  001410  6FAA               	movwf	drawtext@cursor_y& (0+255),b
  8996  001412  D000               	goto	l4398
  8997  001414                     l4398:
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  9001  001414  0100               	movlb	0	; () banked
  9002  001416  51A8               	movf	drawtext@i& (0+255),w,b
  9003  001418  2438               	addwf	drawtext@_text,w,c
  9004  00141A  6ED9               	movwf	fsr2l,c
  9005  00141C  0100               	movlb	0	; () banked
  9006  00141E  51A9               	movf	(drawtext@i+1)& (0+255),w,b
  9007  001420  2039               	addwfc	drawtext@_text+1,w,c
  9008  001422  6EDA               	movwf	fsr2h,c
  9009  001424  0E20               	movlw	32
  9010  001426  18DE               	xorwf	postinc2,w,c
  9011  001428  B4D8               	btfsc	status,2,c
  9012  00142A  D02C               	goto	l4410
  9013  00142C  D002               	goto	l4402
  9014                           
  9015                           ; BSR set to: 0
  9016  00142E  D02A               	goto	l4410
  9017                           
  9018                           ; BSR set to: 0
  9019  001430  D000               	goto	l4402
  9020  001432                     l4402:
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  9024  001432  C0AA  F02C         	movff	drawtext@cursor_y,drawChar@y
  9025  001436  0100               	movlb	0	; () banked
  9026  001438  51A8               	movf	drawtext@i& (0+255),w,b
  9027  00143A  2438               	addwf	drawtext@_text,w,c
  9028  00143C  6ED9               	movwf	fsr2l,c
  9029  00143E  0100               	movlb	0	; () banked
  9030  001440  51A9               	movf	(drawtext@i+1)& (0+255),w,b
  9031  001442  2039               	addwfc	drawtext@_text+1,w,c
  9032  001444  6EDA               	movwf	fsr2h,c
  9033  001446  50DF               	movf	indf2,w,c
  9034  001448  6E2D               	movwf	drawChar@c,c
  9035  00144A  C03A  F02E         	movff	drawtext@color,drawChar@color
  9036  00144E  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  9037  001452  C03C  F030         	movff	drawtext@bg,drawChar@bg
  9038  001456  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  9039  00145A  C03E  F032         	movff	drawtext@size,drawChar@size
  9040  00145E  0100               	movlb	0	; () banked
  9041  001460  51AB               	movf	drawtext@cursor_x& (0+255),w,b
  9042  001462  ECFD  F007         	call	_drawChar
  9043                           
  9044                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  9045  001466  503E               	movf	drawtext@size,w,c
  9046  001468  0D06               	mullw	6
  9047  00146A  50F3               	movf	prodl,w,c
  9048  00146C  0100               	movlb	0	; () banked
  9049  00146E  25AB               	addwf	drawtext@cursor_x& (0+255),w,b
  9050  001470  0100               	movlb	0	; () banked
  9051  001472  6FAB               	movwf	drawtext@cursor_x& (0+255),b
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  9055  001474  0E80               	movlw	128
  9056  001476  0100               	movlb	0	; () banked
  9057  001478  65AB               	cpfsgt	drawtext@cursor_x& (0+255),b
  9058  00147A  D004               	goto	l4410
  9059                           
  9060                           ; BSR set to: 0
  9061  00147C  0E80               	movlw	128
  9062  00147E  0100               	movlb	0	; () banked
  9063  001480  6FAB               	movwf	drawtext@cursor_x& (0+255),b
  9064                           
  9065                           ; BSR set to: 0
  9066  001482  D000               	goto	l4410
  9067  001484                     l4410:
  9068                           
  9069                           ; BSR set to: 0
  9070  001484  0100               	movlb	0	; () banked
  9071  001486  4BA8               	infsnz	drawtext@i& (0+255),f,b
  9072  001488  2BA9               	incf	(drawtext@i+1)& (0+255),f,b
  9073  00148A  D000               	goto	l4412
  9074  00148C                     l4412:
  9075                           
  9076                           ; BSR set to: 0
  9077  00148C  0100               	movlb	0	; () banked
  9078  00148E  51A6               	movf	drawtext@textsize& (0+255),w,b
  9079  001490  0100               	movlb	0	; () banked
  9080  001492  5DA8               	subwf	drawtext@i& (0+255),w,b
  9081  001494  0100               	movlb	0	; () banked
  9082  001496  51A7               	movf	(drawtext@textsize+1)& (0+255),w,b
  9083  001498  0100               	movlb	0	; () banked
  9084  00149A  59A9               	subwfb	(drawtext@i+1)& (0+255),w,b
  9085  00149C  A0D8               	btfss	status,0,c
  9086  00149E  D792               	goto	l4386
  9087                           
  9088                           ; BSR set to: 0
  9089                           
  9090                           ; BSR set to: 0
  9091  0014A0  0012               	return		;funcret
  9092  0014A2                     __end_of_drawtext:
  9093                           	opt stack 0
  9094                           tblptru	equ	0xFF8
  9095                           tblptrh	equ	0xFF7
  9096                           tblptrl	equ	0xFF6
  9097                           tablat	equ	0xFF5
  9098                           prodh	equ	0xFF4
  9099                           prodl	equ	0xFF3
  9100                           intcon	equ	0xFF2
  9101                           intcon2	equ	0xFF1
  9102                           intcon3	equ	0xFF0
  9103                           postinc0	equ	0xFEE
  9104                           wreg	equ	0xFE8
  9105                           postdec1	equ	0xFE5
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           fsr2h	equ	0xFDA
  9110                           fsr2l	equ	0xFD9
  9111                           status	equ	0xFD8
  9112                           
  9113 ;; *************** function _strlen *****************
  9114 ;; Defined at:
  9115 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;  s               2   14[COMRAM] PTR const unsigned char 
  9118 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  9119 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  9120 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  9121 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  9124 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  9125 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  9126 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  9127 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  9128 ;; Return value:  Size  Location     Type
  9129 ;;                  2   14[COMRAM] unsigned int 
  9130 ;; Registers used:
  9131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9137 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9138 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9139 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9140 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;Total ram usage:        6 bytes
  9142 ;; Hardware stack levels used:    1
  9143 ;; Hardware stack levels required when called:    2
  9144 ;; This function calls:
  9145 ;;		Nothing
  9146 ;; This function is called by:
  9147 ;;		_drawtext
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           	psect	text44
  9152  00241E                     __ptext44:
  9153                           	opt stack 0
  9154  00241E                     _strlen:
  9155                           	opt stack 24
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;incstack = 0
  9159  00241E  C00F  F013         	movff	strlen@s,strlen@cp
  9160  002422  C010  F014         	movff	strlen@s+1,strlen@cp+1
  9161  002426  D003               	goto	l4336
  9162  002428                     l4334:
  9163  002428  4A13               	infsnz	strlen@cp,f,c
  9164  00242A  2A14               	incf	strlen@cp+1,f,c
  9165  00242C  D000               	goto	l4336
  9166  00242E                     l4336:
  9167  00242E  C013  FFD9         	movff	strlen@cp,fsr2l
  9168  002432  C014  FFDA         	movff	strlen@cp+1,fsr2h
  9169  002436  50DF               	movf	indf2,w,c
  9170  002438  A4D8               	btfss	status,2,c
  9171  00243A  D7F6               	goto	l4334
  9172  00243C  C00F  F011         	movff	strlen@s,??_strlen
  9173  002440  C010  F012         	movff	strlen@s+1,??_strlen+1
  9174  002444  1E11               	comf	??_strlen,f,c
  9175  002446  1E12               	comf	??_strlen+1,f,c
  9176  002448  4A11               	infsnz	??_strlen,f,c
  9177  00244A  2A12               	incf	??_strlen+1,f,c
  9178  00244C  5013               	movf	strlen@cp,w,c
  9179  00244E  2411               	addwf	??_strlen,w,c
  9180  002450  6E0F               	movwf	?_strlen,c
  9181  002452  5014               	movf	strlen@cp+1,w,c
  9182  002454  2012               	addwfc	??_strlen+1,w,c
  9183  002456  6E10               	movwf	?_strlen+1,c
  9184  002458  D000               	goto	l1148
  9185  00245A                     l1148:
  9186  00245A  0012               	return		;funcret
  9187  00245C                     __end_of_strlen:
  9188                           	opt stack 0
  9189                           tblptru	equ	0xFF8
  9190                           tblptrh	equ	0xFF7
  9191                           tblptrl	equ	0xFF6
  9192                           tablat	equ	0xFF5
  9193                           prodh	equ	0xFF4
  9194                           prodl	equ	0xFF3
  9195                           intcon	equ	0xFF2
  9196                           intcon2	equ	0xFF1
  9197                           intcon3	equ	0xFF0
  9198                           postinc0	equ	0xFEE
  9199                           wreg	equ	0xFE8
  9200                           postdec1	equ	0xFE5
  9201                           fsr1l	equ	0xFE1
  9202                           indf2	equ	0xFDF
  9203                           postinc2	equ	0xFDE
  9204                           fsr2h	equ	0xFDA
  9205                           fsr2l	equ	0xFD9
  9206                           status	equ	0xFD8
  9207                           
  9208 ;; *************** function _drawChar *****************
  9209 ;; Defined at:
  9210 ;;		line 480 in file "ST7735_TFT.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  x               1    wreg     unsigned char 
  9213 ;;  y               1   43[COMRAM] unsigned char 
  9214 ;;  c               1   44[COMRAM] unsigned char 
  9215 ;;  color           2   45[COMRAM] unsigned int 
  9216 ;;  bg              2   47[COMRAM] unsigned int 
  9217 ;;  size            1   49[COMRAM] unsigned char 
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;  x               1   51[COMRAM] unsigned char 
  9220 ;;  line            1   50[COMRAM] unsigned char 
  9221 ;;  i               1   53[COMRAM] unsigned char 
  9222 ;;  j               1   52[COMRAM] unsigned char 
  9223 ;; Return value:  Size  Location     Type
  9224 ;;		None               void
  9225 ;; Registers used:
  9226 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9232 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;Total ram usage:       11 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    7
  9239 ;; This function calls:
  9240 ;;		___wmul
  9241 ;;		_drawPixel
  9242 ;;		_fillRect
  9243 ;; This function is called by:
  9244 ;;		_drawtext
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           	psect	text45
  9249  000FFA                     __ptext45:
  9250                           	opt stack 0
  9251  000FFA                     _drawChar:
  9252                           	opt stack 19
  9253                           
  9254                           ;incstack = 0
  9255                           ;drawChar@x stored from wreg
  9256  000FFA  6E34               	movwf	drawChar@x,c
  9257                           
  9258                           ;ST7735_TFT.c: 482: char i, j;
  9259                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  9260  000FFC  0E80               	movlw	128
  9261  000FFE  6034               	cpfslt	drawChar@x,c
  9262  001000  D0A6               	goto	l201
  9263  001002  0E9F               	movlw	159
  9264  001004  642C               	cpfsgt	drawChar@y,c
  9265  001006  D001               	goto	l4282
  9266                           
  9267                           ;ST7735_TFT.c: 484: return;
  9268  001008  D0A2               	goto	l201
  9269  00100A                     l4282:
  9270                           
  9271                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  9272  00100A  5032               	movf	drawChar@size,w,c
  9273  00100C  A4D8               	btfss	status,2,c
  9274  00100E  D003               	goto	l4286
  9275  001010  0E01               	movlw	1
  9276  001012  6E32               	movwf	drawChar@size,c
  9277  001014  D000               	goto	l4286
  9278  001016                     l4286:
  9279                           
  9280                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  9281  001016  0E1F               	movlw	31
  9282  001018  642D               	cpfsgt	drawChar@c,c
  9283  00101A  D004               	goto	l4290
  9284  00101C  0E7E               	movlw	126
  9285  00101E  642D               	cpfsgt	drawChar@c,c
  9286  001020  D003               	goto	l203
  9287  001022  D000               	goto	l4290
  9288  001024                     l4290:
  9289                           
  9290                           ;ST7735_TFT.c: 487: c = '?';
  9291  001024  0E3F               	movlw	63
  9292  001026  6E2D               	movwf	drawChar@c,c
  9293  001028                     l203:
  9294                           
  9295                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  9296  001028  0E00               	movlw	0
  9297  00102A  6E36               	movwf	drawChar@i,c
  9298  00102C                     l4292:
  9299  00102C  0E04               	movlw	4
  9300  00102E  6436               	cpfsgt	drawChar@i,c
  9301  001030  D001               	goto	l4296
  9302  001032  D08D               	goto	l201
  9303  001034                     l4296:
  9304                           
  9305                           ;ST7735_TFT.c: 489: unsigned char line;
  9306                           ;ST7735_TFT.c: 490: if(c < 'S')
  9307  001034  0E53               	movlw	83
  9308  001036  602D               	cpfslt	drawChar@c,c
  9309  001038  D015               	goto	l4300
  9310                           
  9311                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  9312  00103A  0EE0               	movlw	224
  9313  00103C  242D               	addwf	drawChar@c,w,c
  9314  00103E  6E0F               	movwf	___wmul@multiplier,c
  9315  001040  6A10               	clrf	___wmul@multiplier+1,c
  9316  001042  0EFF               	movlw	255
  9317  001044  2210               	addwfc	___wmul@multiplier+1,f,c
  9318  001046  0E00               	movlw	0
  9319  001048  6E12               	movwf	___wmul@multiplicand+1,c
  9320  00104A  0E05               	movlw	5
  9321  00104C  6E11               	movwf	___wmul@multiplicand,c
  9322  00104E  ECAD  F012         	call	___wmul	;wreg free
  9323  001052  5036               	movf	drawChar@i,w,c
  9324  001054  260F               	addwf	?___wmul,f,c
  9325  001056  0E00               	movlw	0
  9326  001058  2210               	addwfc	?___wmul+1,f,c
  9327  00105A  0EBD               	movlw	low _font
  9328  00105C  240F               	addwf	?___wmul,w,c
  9329  00105E  6EF6               	movwf	tblptrl,c
  9330  001060  0EFD               	movlw	high _font
  9331  001062  D014               	goto	L17
  9332  001064                     l4300:
  9333                           
  9334                           ;ST7735_TFT.c: 492: else
  9335                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  9336  001064  0EAD               	movlw	173
  9337  001066  242D               	addwf	drawChar@c,w,c
  9338  001068  6E0F               	movwf	___wmul@multiplier,c
  9339  00106A  6A10               	clrf	___wmul@multiplier+1,c
  9340  00106C  0EFF               	movlw	255
  9341  00106E  2210               	addwfc	___wmul@multiplier+1,f,c
  9342  001070  0E00               	movlw	0
  9343  001072  6E12               	movwf	___wmul@multiplicand+1,c
  9344  001074  0E05               	movlw	5
  9345  001076  6E11               	movwf	___wmul@multiplicand,c
  9346  001078  ECAD  F012         	call	___wmul	;wreg free
  9347  00107C  5036               	movf	drawChar@i,w,c
  9348  00107E  260F               	addwf	?___wmul,f,c
  9349  001080  0E00               	movlw	0
  9350  001082  2210               	addwfc	?___wmul+1,f,c
  9351  001084  0EBC               	movlw	low _font2
  9352  001086  240F               	addwf	?___wmul,w,c
  9353  001088  6EF6               	movwf	tblptrl,c
  9354  00108A  0EFE               	movlw	high _font2
  9355  00108C                     L17:
  9356  00108C  2010               	addwfc	?___wmul+1,w,c
  9357  00108E  6EF7               	movwf	tblptrh,c
  9358  001090                     	if	0	;There are less than 3 active tblptr bytes
  9359  001090                     	endif
  9360  001090  0008               	tblrd		*
  9361  001092  CFF5 F033          	movff	tablat,drawChar@line
  9362  001096  D000               	goto	l4302
  9363  001098                     l4302:
  9364                           
  9365                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  9366  001098  0E00               	movlw	0
  9367  00109A  6E35               	movwf	drawChar@j,c
  9368  00109C                     l4304:
  9369  00109C  0E06               	movlw	6
  9370  00109E  6435               	cpfsgt	drawChar@j,c
  9371  0010A0  D001               	goto	l210
  9372  0010A2  D053               	goto	l4328
  9373  0010A4                     l210:
  9374                           
  9375                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  9376  0010A4  A033               	btfss	drawChar@line,0,c
  9377  0010A6  D023               	goto	l4314
  9378                           
  9379                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  9380  0010A8  0432               	decf	drawChar@size,w,c
  9381  0010AA  A4D8               	btfss	status,2,c
  9382  0010AC  D00C               	goto	l4312
  9383  0010AE  502C               	movf	drawChar@y,w,c
  9384  0010B0  2435               	addwf	drawChar@j,w,c
  9385  0010B2  6E16               	movwf	drawPixel@y,c
  9386  0010B4  C02E  F017         	movff	drawChar@color,drawPixel@color
  9387  0010B8  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  9388  0010BC  5034               	movf	drawChar@x,w,c
  9389  0010BE  2436               	addwf	drawChar@i,w,c
  9390  0010C0  EC80  F012         	call	_drawPixel
  9391  0010C4  D03E               	goto	l4322
  9392  0010C6                     l4312:
  9393                           
  9394                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  9395  0010C6  5035               	movf	drawChar@j,w,c
  9396  0010C8  0232               	mulwf	drawChar@size,c
  9397  0010CA  50F3               	movf	prodl,w,c
  9398  0010CC  242C               	addwf	drawChar@y,w,c
  9399  0010CE  6E21               	movwf	fillRect@y,c
  9400  0010D0  C032  F022         	movff	drawChar@size,fillRect@w
  9401  0010D4  C032  F023         	movff	drawChar@size,fillRect@h
  9402  0010D8  C02E  F024         	movff	drawChar@color,fillRect@color
  9403  0010DC  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  9404  0010E0  5036               	movf	drawChar@i,w,c
  9405  0010E2  0232               	mulwf	drawChar@size,c
  9406  0010E4  50F3               	movf	prodl,w,c
  9407  0010E6  2434               	addwf	drawChar@x,w,c
  9408  0010E8  EC3B  F011         	call	_fillRect
  9409                           
  9410                           ;ST7735_TFT.c: 498: }
  9411  0010EC  D02A               	goto	l4322
  9412  0010EE                     l4314:
  9413                           
  9414                           ;ST7735_TFT.c: 499: else if(bg != color) {
  9415  0010EE  502E               	movf	drawChar@color,w,c
  9416  0010F0  1830               	xorwf	drawChar@bg,w,c
  9417  0010F2  E104               	bnz	u2960
  9418  0010F4  502F               	movf	drawChar@color+1,w,c
  9419  0010F6  1831               	xorwf	drawChar@bg+1,w,c
  9420  0010F8  B4D8               	btfsc	status,2,c
  9421  0010FA  D023               	goto	l4322
  9422  0010FC                     u2960:
  9423                           
  9424                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  9425  0010FC  0432               	decf	drawChar@size,w,c
  9426  0010FE  A4D8               	btfss	status,2,c
  9427  001100  D00C               	goto	l4320
  9428  001102  502C               	movf	drawChar@y,w,c
  9429  001104  2435               	addwf	drawChar@j,w,c
  9430  001106  6E16               	movwf	drawPixel@y,c
  9431  001108  C030  F017         	movff	drawChar@bg,drawPixel@color
  9432  00110C  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  9433  001110  5034               	movf	drawChar@x,w,c
  9434  001112  2436               	addwf	drawChar@i,w,c
  9435  001114  EC80  F012         	call	_drawPixel
  9436  001118  D014               	goto	l4322
  9437  00111A                     l4320:
  9438                           
  9439                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  9440  00111A  5035               	movf	drawChar@j,w,c
  9441  00111C  0232               	mulwf	drawChar@size,c
  9442  00111E  50F3               	movf	prodl,w,c
  9443  001120  242C               	addwf	drawChar@y,w,c
  9444  001122  6E21               	movwf	fillRect@y,c
  9445  001124  C032  F022         	movff	drawChar@size,fillRect@w
  9446  001128  C032  F023         	movff	drawChar@size,fillRect@h
  9447  00112C  C030  F024         	movff	drawChar@bg,fillRect@color
  9448  001130  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  9449  001134  5036               	movf	drawChar@i,w,c
  9450  001136  0232               	mulwf	drawChar@size,c
  9451  001138  50F3               	movf	prodl,w,c
  9452  00113A  2434               	addwf	drawChar@x,w,c
  9453  00113C  EC3B  F011         	call	_fillRect
  9454  001140  D000               	goto	l4322
  9455  001142                     l4322:
  9456  001142  2A35               	incf	drawChar@j,f,c
  9457  001144  90D8               	bcf	status,0,c
  9458  001146  3233               	rrcf	drawChar@line,f,c
  9459  001148  D7A9               	goto	l4304
  9460  00114A                     l4328:
  9461  00114A  2A36               	incf	drawChar@i,f,c
  9462  00114C  D76F               	goto	l4292
  9463  00114E                     l201:
  9464  00114E  0012               	return		;funcret
  9465  001150                     __end_of_drawChar:
  9466                           	opt stack 0
  9467                           tblptru	equ	0xFF8
  9468                           tblptrh	equ	0xFF7
  9469                           tblptrl	equ	0xFF6
  9470                           tablat	equ	0xFF5
  9471                           prodh	equ	0xFF4
  9472                           prodl	equ	0xFF3
  9473                           intcon	equ	0xFF2
  9474                           intcon2	equ	0xFF1
  9475                           intcon3	equ	0xFF0
  9476                           postinc0	equ	0xFEE
  9477                           wreg	equ	0xFE8
  9478                           postdec1	equ	0xFE5
  9479                           fsr1l	equ	0xFE1
  9480                           indf2	equ	0xFDF
  9481                           postinc2	equ	0xFDE
  9482                           fsr2h	equ	0xFDA
  9483                           fsr2l	equ	0xFD9
  9484                           status	equ	0xFD8
  9485                           
  9486 ;; *************** function _fillRect *****************
  9487 ;; Defined at:
  9488 ;;		line 470 in file "ST7735_TFT.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;  x               1    wreg     unsigned char 
  9491 ;;  y               1   32[COMRAM] unsigned char 
  9492 ;;  w               1   33[COMRAM] unsigned char 
  9493 ;;  h               1   34[COMRAM] unsigned char 
  9494 ;;  color           2   35[COMRAM] unsigned int 
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;  x               1   40[COMRAM] unsigned char 
  9497 ;;  i               2   41[COMRAM] int 
  9498 ;; Return value:  Size  Location     Type
  9499 ;;		None               void
  9500 ;; Registers used:
  9501 ;;		wreg, status,2, status,0, cstack
  9502 ;; Tracked objects:
  9503 ;;		On entry : 0/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9507 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9510 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;Total ram usage:       11 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    6
  9514 ;; This function calls:
  9515 ;;		_drawFastVLine
  9516 ;; This function is called by:
  9517 ;;		_drawChar
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           	psect	text46
  9522  002276                     __ptext46:
  9523                           	opt stack 0
  9524  002276                     _fillRect:
  9525                           	opt stack 19
  9526                           
  9527                           ;incstack = 0
  9528                           ;fillRect@x stored from wreg
  9529  002276  6E29               	movwf	fillRect@x,c
  9530                           
  9531                           ;ST7735_TFT.c: 472: signed int i;
  9532                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  9533  002278  C029  F02A         	movff	fillRect@x,fillRect@i
  9534  00227C  6A2B               	clrf	fillRect@i+1,c
  9535  00227E  D00E               	goto	l4270
  9536  002280                     l4266:
  9537                           
  9538                           ;ST7735_TFT.c: 475: {
  9539                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  9540  002280  C021  F016         	movff	fillRect@y,drawFastVLine@y
  9541  002284  C023  F017         	movff	fillRect@h,drawFastVLine@h
  9542  002288  C024  F018         	movff	fillRect@color,drawFastVLine@color
  9543  00228C  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  9544  002290  502A               	movf	fillRect@i,w,c
  9545  002292  ECAF  F00E         	call	_drawFastVLine
  9546  002296  4A2A               	infsnz	fillRect@i,f,c
  9547  002298  2A2B               	incf	fillRect@i+1,f,c
  9548  00229A  D000               	goto	l4270
  9549  00229C                     l4270:
  9550  00229C  5022               	movf	fillRect@w,w,c
  9551  00229E  C029  F026         	movff	fillRect@x,??_fillRect
  9552  0022A2  6A27               	clrf	(??_fillRect+1)& (0+255),c
  9553  0022A4  2626               	addwf	??_fillRect,f,c
  9554  0022A6  0E00               	movlw	0
  9555  0022A8  2227               	addwfc	??_fillRect+1,f,c
  9556  0022AA  5026               	movf	??_fillRect,w,c
  9557  0022AC  5C2A               	subwf	fillRect@i,w,c
  9558  0022AE  502B               	movf	fillRect@i+1,w,c
  9559  0022B0  0A80               	xorlw	128
  9560  0022B2  6E28               	movwf	(??_fillRect+2)& (0+255),c
  9561  0022B4  5027               	movf	??_fillRect+1,w,c
  9562  0022B6  0A80               	xorlw	128
  9563  0022B8  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  9564  0022BA  A0D8               	btfss	status,0,c
  9565  0022BC  D7E1               	goto	l4266
  9566  0022BE  0012               	return		;funcret
  9567  0022C0                     __end_of_fillRect:
  9568                           	opt stack 0
  9569                           tblptru	equ	0xFF8
  9570                           tblptrh	equ	0xFF7
  9571                           tblptrl	equ	0xFF6
  9572                           tablat	equ	0xFF5
  9573                           prodh	equ	0xFF4
  9574                           prodl	equ	0xFF3
  9575                           intcon	equ	0xFF2
  9576                           intcon2	equ	0xFF1
  9577                           intcon3	equ	0xFF0
  9578                           postinc0	equ	0xFEE
  9579                           wreg	equ	0xFE8
  9580                           postdec1	equ	0xFE5
  9581                           fsr1l	equ	0xFE1
  9582                           indf2	equ	0xFDF
  9583                           postinc2	equ	0xFDE
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function _drawFastVLine *****************
  9589 ;; Defined at:
  9590 ;;		line 449 in file "ST7735_TFT.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  x               1    wreg     unsigned char 
  9593 ;;  y               1   21[COMRAM] unsigned char 
  9594 ;;  h               1   22[COMRAM] unsigned char 
  9595 ;;  color           2   23[COMRAM] unsigned int 
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;  x               1   31[COMRAM] unsigned char 
  9598 ;;  lo              1   30[COMRAM] unsigned char 
  9599 ;;  hi              1   29[COMRAM] unsigned char 
  9600 ;; Return value:  Size  Location     Type
  9601 ;;		None               void
  9602 ;; Registers used:
  9603 ;;		wreg, status,2, status,0, cstack
  9604 ;; Tracked objects:
  9605 ;;		On entry : 0/0
  9606 ;;		On exit  : 0/0
  9607 ;;		Unchanged: 0/0
  9608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;Total ram usage:       11 bytes
  9614 ;; Hardware stack levels used:    1
  9615 ;; Hardware stack levels required when called:    5
  9616 ;; This function calls:
  9617 ;;		_setAddrWindow
  9618 ;;		_spiwrite
  9619 ;; This function is called by:
  9620 ;;		_fillRect
  9621 ;;		_fillCircleHelper
  9622 ;;		_fillCircle
  9623 ;;		_drawRect
  9624 ;; This function uses a non-reentrant model
  9625 ;;
  9626                           
  9627                           	psect	text47
  9628  001D5E                     __ptext47:
  9629                           	opt stack 0
  9630  001D5E                     _drawFastVLine:
  9631                           	opt stack 19
  9632                           
  9633                           ;incstack = 0
  9634                           ;drawFastVLine@x stored from wreg
  9635  001D5E  6E20               	movwf	drawFastVLine@x,c
  9636                           
  9637                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  9638                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  9639  001D60  0E80               	movlw	128
  9640  001D62  6020               	cpfslt	drawFastVLine@x,c
  9641  001D64  D03F               	goto	l185
  9642  001D66  0E9F               	movlw	159
  9643  001D68  6416               	cpfsgt	drawFastVLine@y,c
  9644  001D6A  D001               	goto	l4236
  9645                           
  9646                           ;ST7735_TFT.c: 453: return;
  9647  001D6C  D03B               	goto	l185
  9648  001D6E                     l4236:
  9649                           
  9650                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  9651  001D6E  0EFF               	movlw	255
  9652  001D70  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9653  001D72  0EFF               	movlw	255
  9654  001D74  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  9655  001D76  5017               	movf	drawFastVLine@h,w,c
  9656  001D78  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  9657  001D7C  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  9658  001D7E  261C               	addwf	??_drawFastVLine+2,f,c
  9659  001D80  0E00               	movlw	0
  9660  001D82  221D               	addwfc	??_drawFastVLine+3,f,c
  9661  001D84  501A               	movf	??_drawFastVLine,w,c
  9662  001D86  261C               	addwf	??_drawFastVLine+2,f,c
  9663  001D88  501B               	movf	??_drawFastVLine+1,w,c
  9664  001D8A  221D               	addwfc	??_drawFastVLine+3,f,c
  9665  001D8C  BE1D               	btfsc	??_drawFastVLine+3,7,c
  9666  001D8E  D00B               	goto	l4240
  9667  001D90  501D               	movf	??_drawFastVLine+3,w,c
  9668  001D92  E104               	bnz	u2810
  9669  001D94  0EA0               	movlw	160
  9670  001D96  5C1C               	subwf	??_drawFastVLine+2,w,c
  9671  001D98  A0D8               	btfss	status,0,c
  9672  001D9A  D005               	goto	l4240
  9673  001D9C                     u2810:
  9674                           
  9675                           ;ST7735_TFT.c: 455: h = 160 - y;
  9676  001D9C  5016               	movf	drawFastVLine@y,w,c
  9677  001D9E  0800               	sublw	0
  9678  001DA0  0FA0               	addlw	160
  9679  001DA2  6E17               	movwf	drawFastVLine@h,c
  9680  001DA4  D000               	goto	l4240
  9681  001DA6                     l4240:
  9682                           
  9683                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  9684  001DA6  5019               	movf	drawFastVLine@color+1,w,c
  9685  001DA8  6E1E               	movwf	drawFastVLine@hi,c
  9686  001DAA  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  9687                           
  9688                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  9689  001DAE  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  9690  001DB2  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  9691  001DB6  5016               	movf	drawFastVLine@y,w,c
  9692  001DB8  2417               	addwf	drawFastVLine@h,w,c
  9693  001DBA  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9694  001DBC  041A               	decf	??_drawFastVLine,w,c
  9695  001DBE  6E14               	movwf	setAddrWindow@y1,c
  9696  001DC0  5020               	movf	drawFastVLine@x,w,c
  9697  001DC2  EC14  F011         	call	_setAddrWindow
  9698                           
  9699                           ;ST7735_TFT.c: 458: PORTDbits.RD3 = 1;
  9700  001DC6  8683               	bsf	3971,3,c	;volatile
  9701                           
  9702                           ;ST7735_TFT.c: 459: PORTDbits.RD4 = 0;
  9703  001DC8  9883               	bcf	3971,4,c	;volatile
  9704                           
  9705                           ;ST7735_TFT.c: 461: while (h--) {
  9706  001DCA  D007               	goto	l4252
  9707  001DCC                     l4250:
  9708                           
  9709                           ;ST7735_TFT.c: 462: spiwrite(hi);
  9710  001DCC  501E               	movf	drawFastVLine@hi,w,c
  9711  001DCE  EC3A  F013         	call	_spiwrite
  9712                           
  9713                           ;ST7735_TFT.c: 463: spiwrite(lo);
  9714  001DD2  501F               	movf	drawFastVLine@lo,w,c
  9715  001DD4  EC3A  F013         	call	_spiwrite
  9716  001DD8  D000               	goto	l4252
  9717  001DDA                     l4252:
  9718  001DDA  0617               	decf	drawFastVLine@h,f,c
  9719  001DDC  2817               	incf	drawFastVLine@h,w,c
  9720  001DDE  A4D8               	btfss	status,2,c
  9721  001DE0  D7F5               	goto	l4250
  9722                           
  9723                           ;ST7735_TFT.c: 464: }
  9724                           ;ST7735_TFT.c: 465: PORTDbits.RD4 = 1;
  9725  001DE2  8883               	bsf	3971,4,c	;volatile
  9726  001DE4                     l185:
  9727  001DE4  0012               	return		;funcret
  9728  001DE6                     __end_of_drawFastVLine:
  9729                           	opt stack 0
  9730                           tblptru	equ	0xFF8
  9731                           tblptrh	equ	0xFF7
  9732                           tblptrl	equ	0xFF6
  9733                           tablat	equ	0xFF5
  9734                           prodh	equ	0xFF4
  9735                           prodl	equ	0xFF3
  9736                           intcon	equ	0xFF2
  9737                           intcon2	equ	0xFF1
  9738                           intcon3	equ	0xFF0
  9739                           postinc0	equ	0xFEE
  9740                           wreg	equ	0xFE8
  9741                           postdec1	equ	0xFE5
  9742                           fsr1l	equ	0xFE1
  9743                           indf2	equ	0xFDF
  9744                           postinc2	equ	0xFDE
  9745                           fsr2h	equ	0xFDA
  9746                           fsr2l	equ	0xFD9
  9747                           status	equ	0xFD8
  9748                           
  9749 ;; *************** function _drawPixel *****************
  9750 ;; Defined at:
  9751 ;;		line 440 in file "ST7735_TFT.c"
  9752 ;; Parameters:    Size  Location     Type
  9753 ;;  x               1    wreg     unsigned char 
  9754 ;;  y               1   21[COMRAM] unsigned char 
  9755 ;;  color           2   22[COMRAM] unsigned int 
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;  x               1   24[COMRAM] unsigned char 
  9758 ;; Return value:  Size  Location     Type
  9759 ;;		None               void
  9760 ;; Registers used:
  9761 ;;		wreg, status,2, status,0, cstack
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9767 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;Total ram usage:        4 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    5
  9774 ;; This function calls:
  9775 ;;		_setAddrWindow
  9776 ;;		_write_data
  9777 ;; This function is called by:
  9778 ;;		_drawChar
  9779 ;;		_drawCircle
  9780 ;;		_drawCircleHelper
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           	psect	text48
  9785  002500                     __ptext48:
  9786                           	opt stack 0
  9787  002500                     _drawPixel:
  9788                           	opt stack 20
  9789                           
  9790                           ;incstack = 0
  9791                           ;drawPixel@x stored from wreg
  9792  002500  6E19               	movwf	drawPixel@x,c
  9793                           
  9794                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  9795  002502  0E80               	movlw	128
  9796  002504  6019               	cpfslt	drawPixel@x,c
  9797  002506  D013               	goto	l179
  9798  002508  0E9F               	movlw	159
  9799  00250A  6416               	cpfsgt	drawPixel@y,c
  9800  00250C  D001               	goto	l4258
  9801                           
  9802                           ;ST7735_TFT.c: 443: return;
  9803  00250E  D00F               	goto	l179
  9804  002510                     l4258:
  9805                           
  9806                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  9807  002510  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  9808  002514  2819               	incf	drawPixel@x,w,c
  9809  002516  6E13               	movwf	setAddrWindow@x1,c
  9810  002518  2816               	incf	drawPixel@y,w,c
  9811  00251A  6E14               	movwf	setAddrWindow@y1,c
  9812  00251C  5019               	movf	drawPixel@x,w,c
  9813  00251E  EC14  F011         	call	_setAddrWindow
  9814                           
  9815                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  9816  002522  5018               	movf	drawPixel@color+1,w,c
  9817  002524  EC56  F013         	call	_write_data
  9818                           
  9819                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  9820  002528  5017               	movf	drawPixel@color,w,c
  9821  00252A  EC56  F013         	call	_write_data
  9822  00252E                     l179:
  9823  00252E  0012               	return		;funcret
  9824  002530                     __end_of_drawPixel:
  9825                           	opt stack 0
  9826                           tblptru	equ	0xFF8
  9827                           tblptrh	equ	0xFF7
  9828                           tblptrl	equ	0xFF6
  9829                           tablat	equ	0xFF5
  9830                           prodh	equ	0xFF4
  9831                           prodl	equ	0xFF3
  9832                           intcon	equ	0xFF2
  9833                           intcon2	equ	0xFF1
  9834                           intcon3	equ	0xFF0
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           postdec1	equ	0xFE5
  9838                           fsr1l	equ	0xFE1
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           fsr2h	equ	0xFDA
  9842                           fsr2l	equ	0xFD9
  9843                           status	equ	0xFD8
  9844                           
  9845 ;; *************** function _setAddrWindow *****************
  9846 ;; Defined at:
  9847 ;;		line 425 in file "ST7735_TFT.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;  x0              1    wreg     unsigned char 
  9850 ;;  y0              1   17[COMRAM] unsigned char 
  9851 ;;  x1              1   18[COMRAM] unsigned char 
  9852 ;;  y1              1   19[COMRAM] unsigned char 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  x0              1   20[COMRAM] unsigned char 
  9855 ;; Return value:  Size  Location     Type
  9856 ;;		None               void
  9857 ;; Registers used:
  9858 ;;		wreg, status,2, status,0, cstack
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9864 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;Total ram usage:        4 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; Hardware stack levels required when called:    4
  9871 ;; This function calls:
  9872 ;;		_write_command
  9873 ;;		_write_data
  9874 ;; This function is called by:
  9875 ;;		_drawPixel
  9876 ;;		_drawFastVLine
  9877 ;;		_fillRectangle
  9878 ;;		_drawFastHLine
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text49
  9883  002228                     __ptext49:
  9884                           	opt stack 0
  9885  002228                     _setAddrWindow:
  9886                           	opt stack 19
  9887                           
  9888                           ;incstack = 0
  9889                           ;setAddrWindow@x0 stored from wreg
  9890  002228  6E15               	movwf	setAddrWindow@x0,c
  9891                           
  9892                           ;ST7735_TFT.c: 427: write_command(0x2A);
  9893  00222A  0E2A               	movlw	42
  9894  00222C  EC5E  F013         	call	_write_command
  9895                           
  9896                           ;ST7735_TFT.c: 428: write_data(0);
  9897  002230  0E00               	movlw	0
  9898  002232  EC56  F013         	call	_write_data
  9899                           
  9900                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  9901  002236  5015               	movf	setAddrWindow@x0,w,c
  9902  002238  2457               	addwf	_colstart,w,c
  9903  00223A  EC56  F013         	call	_write_data
  9904                           
  9905                           ;ST7735_TFT.c: 430: write_data(0);
  9906  00223E  0E00               	movlw	0
  9907  002240  EC56  F013         	call	_write_data
  9908                           
  9909                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  9910  002244  5013               	movf	setAddrWindow@x1,w,c
  9911  002246  2457               	addwf	_colstart,w,c
  9912  002248  EC56  F013         	call	_write_data
  9913                           
  9914                           ;ST7735_TFT.c: 432: write_command(0x2B);
  9915  00224C  0E2B               	movlw	43
  9916  00224E  EC5E  F013         	call	_write_command
  9917                           
  9918                           ;ST7735_TFT.c: 433: write_data(0);
  9919  002252  0E00               	movlw	0
  9920  002254  EC56  F013         	call	_write_data
  9921                           
  9922                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  9923  002258  5012               	movf	setAddrWindow@y0,w,c
  9924  00225A  245A               	addwf	_rowstart,w,c
  9925  00225C  EC56  F013         	call	_write_data
  9926                           
  9927                           ;ST7735_TFT.c: 435: write_data(0);
  9928  002260  0E00               	movlw	0
  9929  002262  EC56  F013         	call	_write_data
  9930                           
  9931                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  9932  002266  5014               	movf	setAddrWindow@y1,w,c
  9933  002268  245A               	addwf	_rowstart,w,c
  9934  00226A  EC56  F013         	call	_write_data
  9935                           
  9936                           ;ST7735_TFT.c: 437: write_command(0x2C);
  9937  00226E  0E2C               	movlw	44
  9938  002270  EC5E  F013         	call	_write_command
  9939  002274  0012               	return		;funcret
  9940  002276                     __end_of_setAddrWindow:
  9941                           	opt stack 0
  9942                           tblptru	equ	0xFF8
  9943                           tblptrh	equ	0xFF7
  9944                           tblptrl	equ	0xFF6
  9945                           tablat	equ	0xFF5
  9946                           prodh	equ	0xFF4
  9947                           prodl	equ	0xFF3
  9948                           intcon	equ	0xFF2
  9949                           intcon2	equ	0xFF1
  9950                           intcon3	equ	0xFF0
  9951                           postinc0	equ	0xFEE
  9952                           wreg	equ	0xFE8
  9953                           postdec1	equ	0xFE5
  9954                           fsr1l	equ	0xFE1
  9955                           indf2	equ	0xFDF
  9956                           postinc2	equ	0xFDE
  9957                           fsr2h	equ	0xFDA
  9958                           fsr2l	equ	0xFD9
  9959                           status	equ	0xFD8
  9960                           
  9961 ;; *************** function _write_data *****************
  9962 ;; Defined at:
  9963 ;;		line 242 in file "ST7735_TFT.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;  data_           1    wreg     unsigned char 
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;  data_           1   16[COMRAM] unsigned char 
  9968 ;; Return value:  Size  Location     Type
  9969 ;;		None               void
  9970 ;; Registers used:
  9971 ;;		wreg, status,2, cstack
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;Total ram usage:        1 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:    3
  9984 ;; This function calls:
  9985 ;;		_spiwrite
  9986 ;; This function is called by:
  9987 ;;		_Rcmd1
  9988 ;;		_Rcmd2red
  9989 ;;		_Rcmd3
  9990 ;;		_setAddrWindow
  9991 ;;		_drawPixel
  9992 ;;		_TFT_GreenTab_Initialize
  9993 ;;		_Bcmd
  9994 ;;		_setScrollDefinition
  9995 ;;		_Rcmd2green
  9996 ;;		_VerticalScroll
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text50
 10001  0026AC                     __ptext50:
 10002                           	opt stack 0
 10003  0026AC                     _write_data:
 10004                           	opt stack 19
 10005                           
 10006                           ;incstack = 0
 10007                           ;write_data@data_ stored from wreg
 10008  0026AC  6E11               	movwf	write_data@data_,c
 10009                           
 10010                           ;ST7735_TFT.c: 244: PORTDbits.RD4 = 0;
 10011  0026AE  9883               	bcf	3971,4,c	;volatile
 10012                           
 10013                           ;ST7735_TFT.c: 245: PORTDbits.RD3 = 1;
 10014  0026B0  8683               	bsf	3971,3,c	;volatile
 10015                           
 10016                           ;ST7735_TFT.c: 246: spiwrite(data_);
 10017  0026B2  5011               	movf	write_data@data_,w,c
 10018  0026B4  EC3A  F013         	call	_spiwrite
 10019                           
 10020                           ;ST7735_TFT.c: 247: PORTDbits.RD4 = 1;
 10021  0026B8  8883               	bsf	3971,4,c	;volatile
 10022  0026BA  0012               	return		;funcret
 10023  0026BC                     __end_of_write_data:
 10024                           	opt stack 0
 10025                           tblptru	equ	0xFF8
 10026                           tblptrh	equ	0xFF7
 10027                           tblptrl	equ	0xFF6
 10028                           tablat	equ	0xFF5
 10029                           prodh	equ	0xFF4
 10030                           prodl	equ	0xFF3
 10031                           intcon	equ	0xFF2
 10032                           intcon2	equ	0xFF1
 10033                           intcon3	equ	0xFF0
 10034                           postinc0	equ	0xFEE
 10035                           wreg	equ	0xFE8
 10036                           postdec1	equ	0xFE5
 10037                           fsr1l	equ	0xFE1
 10038                           indf2	equ	0xFDF
 10039                           postinc2	equ	0xFDE
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _write_command *****************
 10045 ;; Defined at:
 10046 ;;		line 231 in file "ST7735_TFT.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  cmd_            1    wreg     unsigned char 
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;  cmd_            1   16[COMRAM] unsigned char 
 10051 ;; Return value:  Size  Location     Type
 10052 ;;		None               void
 10053 ;; Registers used:
 10054 ;;		wreg, status,2, cstack
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 0/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10064 ;;Total ram usage:        1 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    3
 10067 ;; This function calls:
 10068 ;;		_spiwrite
 10069 ;; This function is called by:
 10070 ;;		_Rcmd1
 10071 ;;		_Rcmd2red
 10072 ;;		_Rcmd3
 10073 ;;		_setAddrWindow
 10074 ;;		_TFT_GreenTab_Initialize
 10075 ;;		_Bcmd
 10076 ;;		_setScrollDefinition
 10077 ;;		_Rcmd2green
 10078 ;;		_VerticalScroll
 10079 ;; This function uses a non-reentrant model
 10080 ;;
 10081                           
 10082                           	psect	text51
 10083  0026BC                     __ptext51:
 10084                           	opt stack 0
 10085  0026BC                     _write_command:
 10086                           	opt stack 19
 10087                           
 10088                           ;incstack = 0
 10089                           ;write_command@cmd_ stored from wreg
 10090  0026BC  6E11               	movwf	write_command@cmd_,c
 10091                           
 10092                           ;ST7735_TFT.c: 233: PORTDbits.RD4 = 0;
 10093  0026BE  9883               	bcf	3971,4,c	;volatile
 10094                           
 10095                           ;ST7735_TFT.c: 235: PORTDbits.RD3 = 0;
 10096  0026C0  9683               	bcf	3971,3,c	;volatile
 10097                           
 10098                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 10099  0026C2  5011               	movf	write_command@cmd_,w,c
 10100  0026C4  EC3A  F013         	call	_spiwrite
 10101                           
 10102                           ;ST7735_TFT.c: 238: PORTDbits.RD4 = 1;
 10103  0026C8  8883               	bsf	3971,4,c	;volatile
 10104  0026CA  0012               	return		;funcret
 10105  0026CC                     __end_of_write_command:
 10106                           	opt stack 0
 10107                           tblptru	equ	0xFF8
 10108                           tblptrh	equ	0xFF7
 10109                           tblptrl	equ	0xFF6
 10110                           tablat	equ	0xFF5
 10111                           prodh	equ	0xFF4
 10112                           prodl	equ	0xFF3
 10113                           intcon	equ	0xFF2
 10114                           intcon2	equ	0xFF1
 10115                           intcon3	equ	0xFF0
 10116                           postinc0	equ	0xFEE
 10117                           wreg	equ	0xFE8
 10118                           postdec1	equ	0xFE5
 10119                           fsr1l	equ	0xFE1
 10120                           indf2	equ	0xFDF
 10121                           postinc2	equ	0xFDE
 10122                           fsr2h	equ	0xFDA
 10123                           fsr2l	equ	0xFD9
 10124                           status	equ	0xFD8
 10125                           
 10126 ;; *************** function _spiwrite *****************
 10127 ;; Defined at:
 10128 ;;		line 222 in file "ST7735_TFT.c"
 10129 ;; Parameters:    Size  Location     Type
 10130 ;;  spidata         1    wreg     unsigned char 
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;  spidata         1   15[COMRAM] unsigned char 
 10133 ;;  x               1   14[COMRAM] unsigned char 
 10134 ;; Return value:  Size  Location     Type
 10135 ;;		None               void
 10136 ;; Registers used:
 10137 ;;		wreg
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10147 ;;Total ram usage:        2 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    2
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		_write_command
 10154 ;;		_write_data
 10155 ;;		_drawFastVLine
 10156 ;;		_fillRectangle
 10157 ;;		_drawFastHLine
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           	psect	text52
 10162  002674                     __ptext52:
 10163                           	opt stack 0
 10164  002674                     _spiwrite:
 10165                           	opt stack 21
 10166                           
 10167                           ;incstack = 0
 10168                           ;spiwrite@spidata stored from wreg
 10169  002674  6E10               	movwf	spiwrite@spidata,c
 10170                           
 10171                           ;ST7735_TFT.c: 224: char x;
 10172                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 10173  002676  969E               	bcf	3998,3,c	;volatile
 10174                           
 10175                           ;ST7735_TFT.c: 226: x = SSPBUF;
 10176  002678  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 10177                           
 10178                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 10179  00267C  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 10180                           
 10181                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 10182  002680  D000               	goto	l135
 10183  002682                     l135:
 10184  002682  A0C7               	btfss	4039,0,c	;volatile
 10185  002684  D7FE               	goto	l135
 10186  002686  0012               	return		;funcret
 10187  002688                     __end_of_spiwrite:
 10188                           	opt stack 0
 10189                           tblptru	equ	0xFF8
 10190                           tblptrh	equ	0xFF7
 10191                           tblptrl	equ	0xFF6
 10192                           tablat	equ	0xFF5
 10193                           prodh	equ	0xFF4
 10194                           prodl	equ	0xFF3
 10195                           intcon	equ	0xFF2
 10196                           intcon2	equ	0xFF1
 10197                           intcon3	equ	0xFF0
 10198                           postinc0	equ	0xFEE
 10199                           wreg	equ	0xFE8
 10200                           postdec1	equ	0xFE5
 10201                           fsr1l	equ	0xFE1
 10202                           indf2	equ	0xFDF
 10203                           postinc2	equ	0xFDE
 10204                           fsr2h	equ	0xFDA
 10205                           fsr2l	equ	0xFD9
 10206                           status	equ	0xFD8
 10207                           
 10208 ;; *************** function ___wmul *****************
 10209 ;; Defined at:
 10210 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;  multiplier      2   14[COMRAM] unsigned int 
 10213 ;;  multiplicand    2   16[COMRAM] unsigned int 
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;  product         2   18[COMRAM] unsigned int 
 10216 ;; Return value:  Size  Location     Type
 10217 ;;                  2   14[COMRAM] unsigned int 
 10218 ;; Registers used:
 10219 ;;		wreg, status,2, status,0, prodl, prodh
 10220 ;; Tracked objects:
 10221 ;;		On entry : 0/0
 10222 ;;		On exit  : 0/0
 10223 ;;		Unchanged: 0/0
 10224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10225 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;Total ram usage:        6 bytes
 10230 ;; Hardware stack levels used:    1
 10231 ;; Hardware stack levels required when called:    2
 10232 ;; This function calls:
 10233 ;;		Nothing
 10234 ;; This function is called by:
 10235 ;;		_delay_ms
 10236 ;;		_drawChar
 10237 ;;		_main
 10238 ;;		_update_LCD_misc
 10239 ;; This function uses a non-reentrant model
 10240 ;;
 10241                           
 10242                           	psect	text53
 10243  00255A                     __ptext53:
 10244                           	opt stack 0
 10245  00255A                     ___wmul:
 10246                           	opt stack 28
 10247                           
 10248                           ;incstack = 0
 10249  00255A  500F               	movf	___wmul@multiplier,w,c
 10250  00255C  0211               	mulwf	___wmul@multiplicand,c
 10251  00255E  CFF3 F013          	movff	prodl,___wmul@product
 10252  002562  CFF4 F014          	movff	prodh,___wmul@product+1
 10253  002566  500F               	movf	___wmul@multiplier,w,c
 10254  002568  0212               	mulwf	___wmul@multiplicand+1,c
 10255  00256A  50F3               	movf	prodl,w,c
 10256  00256C  2614               	addwf	___wmul@product+1,f,c
 10257  00256E  5010               	movf	___wmul@multiplier+1,w,c
 10258  002570  0211               	mulwf	___wmul@multiplicand,c
 10259  002572  50F3               	movf	prodl,w,c
 10260  002574  2614               	addwf	___wmul@product+1,f,c
 10261  002576  C013  F00F         	movff	___wmul@product,?___wmul
 10262  00257A  C014  F010         	movff	___wmul@product+1,?___wmul+1
 10263  00257E  D000               	goto	l591
 10264  002580                     l591:
 10265  002580  0012               	return		;funcret
 10266  002582                     __end_of___wmul:
 10267                           	opt stack 0
 10268                           tblptru	equ	0xFF8
 10269                           tblptrh	equ	0xFF7
 10270                           tblptrl	equ	0xFF6
 10271                           tablat	equ	0xFF5
 10272                           prodh	equ	0xFF4
 10273                           prodl	equ	0xFF3
 10274                           intcon	equ	0xFF2
 10275                           intcon2	equ	0xFF1
 10276                           intcon3	equ	0xFF0
 10277                           postinc0	equ	0xFEE
 10278                           wreg	equ	0xFE8
 10279                           postdec1	equ	0xFE5
 10280                           fsr1l	equ	0xFE1
 10281                           indf2	equ	0xFDF
 10282                           postinc2	equ	0xFDE
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function _Wait_Half_Second *****************
 10288 ;; Defined at:
 10289 ;;		line 702 in file "Lab8_redo.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;		None
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;		None
 10294 ;; Return value:  Size  Location     Type
 10295 ;;		None               void
 10296 ;; Registers used:
 10297 ;;		wreg, status,2
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;Total ram usage:        0 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    2
 10310 ;; This function calls:
 10311 ;;		Nothing
 10312 ;; This function is called by:
 10313 ;;		_Wait_One_Second
 10314 ;;		_Wait_One_Second_With_Beep
 10315 ;;		_Old_Wait_One_Second
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text54
 10320  0025EA                     __ptext54:
 10321                           	opt stack 0
 10322  0025EA                     _Wait_Half_Second:
 10323                           	opt stack 25
 10324                           
 10325                           ;Lab8_redo.c: 704: T0CON = 0x03;
 10326                           
 10327                           ;incstack = 0
 10328  0025EA  0E03               	movlw	3
 10329  0025EC  6ED5               	movwf	4053,c	;volatile
 10330                           
 10331                           ;Lab8_redo.c: 705: TMR0L = 0xDB;
 10332  0025EE  0EDB               	movlw	219
 10333  0025F0  6ED6               	movwf	4054,c	;volatile
 10334                           
 10335                           ;Lab8_redo.c: 706: TMR0H = 0x0B;
 10336  0025F2  0E0B               	movlw	11
 10337  0025F4  6ED7               	movwf	4055,c	;volatile
 10338                           
 10339                           ;Lab8_redo.c: 707: INTCONbits.TMR0IF = 0;
 10340  0025F6  94F2               	bcf	intcon,2,c	;volatile
 10341                           
 10342                           ;Lab8_redo.c: 708: T0CONbits.TMR0ON = 1;
 10343  0025F8  8ED5               	bsf	4053,7,c	;volatile
 10344                           
 10345                           ;Lab8_redo.c: 709: while (INTCONbits.TMR0IF == 0);
 10346  0025FA  D000               	goto	l499
 10347  0025FC                     l499:
 10348  0025FC  A4F2               	btfss	intcon,2,c	;volatile
 10349  0025FE  D7FE               	goto	l499
 10350                           
 10351                           ;Lab8_redo.c: 710: T0CONbits.TMR0ON = 0;
 10352  002600  9ED5               	bcf	4053,7,c	;volatile
 10353  002602  0012               	return		;funcret
 10354  002604                     __end_of_Wait_Half_Second:
 10355                           	opt stack 0
 10356                           tblptru	equ	0xFF8
 10357                           tblptrh	equ	0xFF7
 10358                           tblptrl	equ	0xFF6
 10359                           tablat	equ	0xFF5
 10360                           prodh	equ	0xFF4
 10361                           prodl	equ	0xFF3
 10362                           intcon	equ	0xFF2
 10363                           intcon2	equ	0xFF1
 10364                           intcon3	equ	0xFF0
 10365                           postinc0	equ	0xFEE
 10366                           wreg	equ	0xFE8
 10367                           postdec1	equ	0xFE5
 10368                           fsr1l	equ	0xFE1
 10369                           indf2	equ	0xFDF
 10370                           postinc2	equ	0xFDE
 10371                           fsr2h	equ	0xFDA
 10372                           fsr2l	equ	0xFD9
 10373                           status	equ	0xFD8
 10374                           
 10375 ;; *************** function _Deactivate_Buzzer *****************
 10376 ;; Defined at:
 10377 ;;		line 495 in file "Lab8_redo.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;		None
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;		None
 10382 ;; Return value:  Size  Location     Type
 10383 ;;		None               void
 10384 ;; Registers used:
 10385 ;;		wreg, status,2
 10386 ;; Tracked objects:
 10387 ;;		On entry : 0/0
 10388 ;;		On exit  : 0/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;Total ram usage:        0 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:    2
 10398 ;; This function calls:
 10399 ;;		Nothing
 10400 ;; This function is called by:
 10401 ;;		_Wait_One_Second_With_Beep
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           	psect	text55
 10406  0026E6                     __ptext55:
 10407                           	opt stack 0
 10408  0026E6                     _Deactivate_Buzzer:
 10409                           	opt stack 25
 10410                           
 10411                           ;Lab8_redo.c: 497: CCP2CON = 0x0;
 10412                           
 10413                           ;incstack = 0
 10414  0026E6  0E00               	movlw	0
 10415  0026E8  6EBA               	movwf	4026,c	;volatile
 10416                           
 10417                           ;Lab8_redo.c: 498: PORTBbits.RB3 = 0;
 10418  0026EA  9681               	bcf	3969,3,c	;volatile
 10419  0026EC  0012               	return		;funcret
 10420  0026EE                     __end_of_Deactivate_Buzzer:
 10421                           	opt stack 0
 10422                           tblptru	equ	0xFF8
 10423                           tblptrh	equ	0xFF7
 10424                           tblptrl	equ	0xFF6
 10425                           tablat	equ	0xFF5
 10426                           prodh	equ	0xFF4
 10427                           prodl	equ	0xFF3
 10428                           intcon	equ	0xFF2
 10429                           intcon2	equ	0xFF1
 10430                           intcon3	equ	0xFF0
 10431                           postinc0	equ	0xFEE
 10432                           wreg	equ	0xFE8
 10433                           postdec1	equ	0xFE5
 10434                           fsr1l	equ	0xFE1
 10435                           indf2	equ	0xFDF
 10436                           postinc2	equ	0xFDE
 10437                           fsr2h	equ	0xFDA
 10438                           fsr2l	equ	0xFD9
 10439                           status	equ	0xFD8
 10440                           
 10441 ;; *************** function _Activate_Buzzer *****************
 10442 ;; Defined at:
 10443 ;;		line 487 in file "Lab8_redo.c"
 10444 ;; Parameters:    Size  Location     Type
 10445 ;;		None
 10446 ;; Auto vars:     Size  Location     Type
 10447 ;;		None
 10448 ;; Return value:  Size  Location     Type
 10449 ;;		None               void
 10450 ;; Registers used:
 10451 ;;		wreg, status,2
 10452 ;; Tracked objects:
 10453 ;;		On entry : 0/0
 10454 ;;		On exit  : 0/0
 10455 ;;		Unchanged: 0/0
 10456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10461 ;;Total ram usage:        0 bytes
 10462 ;; Hardware stack levels used:    1
 10463 ;; Hardware stack levels required when called:    2
 10464 ;; This function calls:
 10465 ;;		Nothing
 10466 ;; This function is called by:
 10467 ;;		_Wait_One_Second_With_Beep
 10468 ;; This function uses a non-reentrant model
 10469 ;;
 10470                           
 10471                           	psect	text56
 10472  00269A                     __ptext56:
 10473                           	opt stack 0
 10474  00269A                     _Activate_Buzzer:
 10475                           	opt stack 25
 10476                           
 10477                           ;Lab8_redo.c: 489: PR2 = 0b11111001;
 10478                           
 10479                           ;incstack = 0
 10480  00269A  0EF9               	movlw	249
 10481  00269C  6ECB               	movwf	4043,c	;volatile
 10482                           
 10483                           ;Lab8_redo.c: 490: T2CON = 0b00000101;
 10484  00269E  0E05               	movlw	5
 10485  0026A0  6ECA               	movwf	4042,c	;volatile
 10486                           
 10487                           ;Lab8_redo.c: 491: CCPR2L = 0b01001010;
 10488  0026A2  0E4A               	movlw	74
 10489  0026A4  6EBB               	movwf	4027,c	;volatile
 10490                           
 10491                           ;Lab8_redo.c: 492: CCP2CON = 0b00111100;
 10492  0026A6  0E3C               	movlw	60
 10493  0026A8  6EBA               	movwf	4026,c	;volatile
 10494  0026AA  0012               	return		;funcret
 10495  0026AC                     __end_of_Activate_Buzzer:
 10496                           	opt stack 0
 10497                           tblptru	equ	0xFF8
 10498                           tblptrh	equ	0xFF7
 10499                           tblptrl	equ	0xFF6
 10500                           tablat	equ	0xFF5
 10501                           prodh	equ	0xFF4
 10502                           prodl	equ	0xFF3
 10503                           intcon	equ	0xFF2
 10504                           intcon2	equ	0xFF1
 10505                           intcon3	equ	0xFF0
 10506                           postinc0	equ	0xFEE
 10507                           wreg	equ	0xFE8
 10508                           postdec1	equ	0xFE5
 10509                           fsr1l	equ	0xFE1
 10510                           indf2	equ	0xFDF
 10511                           postinc2	equ	0xFDE
 10512                           fsr2h	equ	0xFDA
 10513                           fsr2l	equ	0xFD9
 10514                           status	equ	0xFD8
 10515                           
 10516 ;; *************** function _chkisr *****************
 10517 ;; Defined at:
 10518 ;;		line 296 in file "Lab8_redo.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;		None
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;		None
 10523 ;; Return value:  Size  Location     Type
 10524 ;;		None               void
 10525 ;; Registers used:
 10526 ;;		wreg, status,2, status,0, cstack
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10534 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10535 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;Total ram usage:       14 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    1
 10539 ;; This function calls:
 10540 ;;		_INT0_ISR
 10541 ;;		_INT1_ISR
 10542 ;;		_INT2_ISR
 10543 ;; This function is called by:
 10544 ;;		Interrupt level 2
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           	psect	intcode
 10549  000008                     __pintcode:
 10550                           	opt stack 0
 10551  000008                     _chkisr:
 10552                           	opt stack 18
 10553                           
 10554                           ;incstack = 0
 10555  000008  CFFA F001          	movff	pclath,??_chkisr
 10556  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 10557  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 10558  000014  ED36  F00F         	call	int_func,f	;refresh shadow registers
 10559                           pclatu	equ	0xFFB
 10560                           pclath	equ	0xFFA
 10561                           tblptru	equ	0xFF8
 10562                           tblptrh	equ	0xFF7
 10563                           tblptrl	equ	0xFF6
 10564                           tablat	equ	0xFF5
 10565                           prodh	equ	0xFF4
 10566                           prodl	equ	0xFF3
 10567                           intcon	equ	0xFF2
 10568                           intcon2	equ	0xFF1
 10569                           intcon3	equ	0xFF0
 10570                           postinc0	equ	0xFEE
 10571                           fsr0l	equ	0xFE9
 10572                           wreg	equ	0xFE8
 10573                           postdec1	equ	0xFE5
 10574                           fsr1l	equ	0xFE1
 10575                           indf2	equ	0xFDF
 10576                           postinc2	equ	0xFDE
 10577                           fsr2h	equ	0xFDA
 10578                           fsr2l	equ	0xFD9
 10579                           status	equ	0xFD8
 10580                           
 10581                           	psect	intcode_body
 10582  001E6C                     __pintcode_body:
 10583                           	opt stack 18
 10584  001E6C                     int_func:
 10585                           	opt stack 18
 10586  001E6C  0006               	pop		; remove dummy address from shadow register refresh
 10587  001E6E  CFEA F004          	movff	fsr0h,??_chkisr+3
 10588  001E72  CFE1 F005          	movff	fsr1l,??_chkisr+4
 10589  001E76  CFE2 F006          	movff	fsr1h,??_chkisr+5
 10590  001E7A  CFD9 F007          	movff	fsr2l,??_chkisr+6
 10591  001E7E  CFDA F008          	movff	fsr2h,??_chkisr+7
 10592  001E82  CFF3 F009          	movff	prodl,??_chkisr+8
 10593  001E86  CFF4 F00A          	movff	prodh,??_chkisr+9
 10594  001E8A  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 10595  001E8E  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 10596  001E92  CFF8 F00D          	movff	tblptru,??_chkisr+12
 10597  001E96  CFF5 F00E          	movff	tablat,??_chkisr+13
 10598                           
 10599                           ;Lab8_redo.c: 298: if (INTCONbits.INT0IF == 1) INT0_ISR();
 10600  001E9A  A2F2               	btfss	intcon,1,c	;volatile
 10601  001E9C  D003               	goto	i2l2688
 10602  001E9E  EC0E  F013         	call	_INT0_ISR	;wreg free
 10603  001EA2  D000               	goto	i2l2688
 10604  001EA4                     i2l2688:
 10605                           
 10606                           ;Lab8_redo.c: 300: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 10607  001EA4  A0F0               	btfss	intcon3,0,c	;volatile
 10608  001EA6  D003               	goto	i2l2692
 10609  001EA8  EC02  F013         	call	_INT1_ISR	;wreg free
 10610  001EAC  D000               	goto	i2l2692
 10611  001EAE                     i2l2692:
 10612                           
 10613                           ;Lab8_redo.c: 301: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 10614  001EAE  A2F0               	btfss	intcon3,1,c	;volatile
 10615  001EB0  D003               	goto	i2l386
 10616  001EB2  EC77  F013         	call	_INT2_ISR	;wreg free
 10617  001EB6  D000               	goto	i2l386
 10618  001EB8                     i2l386:
 10619  001EB8  C00E  FFF5         	movff	??_chkisr+13,tablat
 10620  001EBC  C00D  FFF8         	movff	??_chkisr+12,tblptru
 10621  001EC0  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 10622  001EC4  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 10623  001EC8  C00A  FFF4         	movff	??_chkisr+9,prodh
 10624  001ECC  C009  FFF3         	movff	??_chkisr+8,prodl
 10625  001ED0  C008  FFDA         	movff	??_chkisr+7,fsr2h
 10626  001ED4  C007  FFD9         	movff	??_chkisr+6,fsr2l
 10627  001ED8  C006  FFE2         	movff	??_chkisr+5,fsr1h
 10628  001EDC  C005  FFE1         	movff	??_chkisr+4,fsr1l
 10629  001EE0  C004  FFEA         	movff	??_chkisr+3,fsr0h
 10630  001EE4  C003  FFE9         	movff	??_chkisr+2,fsr0l
 10631  001EE8  C002  FFFB         	movff	??_chkisr+1,pclatu
 10632  001EEC  C001  FFFA         	movff	??_chkisr,pclath
 10633  001EF0  0011               	retfie		f
 10634  001EF2                     __end_of_chkisr:
 10635                           	opt stack 0
 10636                           pclatu	equ	0xFFB
 10637                           pclath	equ	0xFFA
 10638                           tblptru	equ	0xFF8
 10639                           tblptrh	equ	0xFF7
 10640                           tblptrl	equ	0xFF6
 10641                           tablat	equ	0xFF5
 10642                           prodh	equ	0xFF4
 10643                           prodl	equ	0xFF3
 10644                           intcon	equ	0xFF2
 10645                           intcon2	equ	0xFF1
 10646                           intcon3	equ	0xFF0
 10647                           postinc0	equ	0xFEE
 10648                           fsr0h	equ	0xFEA
 10649                           fsr0l	equ	0xFE9
 10650                           wreg	equ	0xFE8
 10651                           postdec1	equ	0xFE5
 10652                           fsr1h	equ	0xFE2
 10653                           fsr1l	equ	0xFE1
 10654                           indf2	equ	0xFDF
 10655                           postinc2	equ	0xFDE
 10656                           fsr2h	equ	0xFDA
 10657                           fsr2l	equ	0xFD9
 10658                           status	equ	0xFD8
 10659                           
 10660 ;; *************** function _INT2_ISR *****************
 10661 ;; Defined at:
 10662 ;;		line 336 in file "Lab8_redo.c"
 10663 ;; Parameters:    Size  Location     Type
 10664 ;;		None
 10665 ;; Auto vars:     Size  Location     Type
 10666 ;;		None
 10667 ;; Return value:  Size  Location     Type
 10668 ;;		None               void
 10669 ;; Registers used:
 10670 ;;		wreg, status,2
 10671 ;; Tracked objects:
 10672 ;;		On entry : 0/0
 10673 ;;		On exit  : 0/0
 10674 ;;		Unchanged: 0/0
 10675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10680 ;;Total ram usage:        0 bytes
 10681 ;; Hardware stack levels used:    1
 10682 ;; This function calls:
 10683 ;;		Nothing
 10684 ;; This function is called by:
 10685 ;;		_chkisr
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text58
 10690  0026EE                     __ptext58:
 10691                           	opt stack 0
 10692  0026EE                     _INT2_ISR:
 10693                           	opt stack 18
 10694                           
 10695                           ;Lab8_redo.c: 338: INTCON3bits.INT2IF=0;
 10696                           
 10697                           ;incstack = 0
 10698  0026EE  92F0               	bcf	intcon3,1,c	;volatile
 10699                           
 10700                           ;Lab8_redo.c: 339: FLASHING_REQUEST = 1;
 10701  0026F0  0E01               	movlw	1
 10702  0026F2  6E4E               	movwf	_FLASHING_REQUEST,c
 10703  0026F4  0012               	return		;funcret
 10704  0026F6                     __end_of_INT2_ISR:
 10705                           	opt stack 0
 10706                           pclatu	equ	0xFFB
 10707                           pclath	equ	0xFFA
 10708                           tblptru	equ	0xFF8
 10709                           tblptrh	equ	0xFF7
 10710                           tblptrl	equ	0xFF6
 10711                           tablat	equ	0xFF5
 10712                           prodh	equ	0xFF4
 10713                           prodl	equ	0xFF3
 10714                           intcon	equ	0xFF2
 10715                           intcon2	equ	0xFF1
 10716                           intcon3	equ	0xFF0
 10717                           postinc0	equ	0xFEE
 10718                           fsr0h	equ	0xFEA
 10719                           fsr0l	equ	0xFE9
 10720                           wreg	equ	0xFE8
 10721                           postdec1	equ	0xFE5
 10722                           fsr1h	equ	0xFE2
 10723                           fsr1l	equ	0xFE1
 10724                           indf2	equ	0xFDF
 10725                           postinc2	equ	0xFDE
 10726                           fsr2h	equ	0xFDA
 10727                           fsr2l	equ	0xFD9
 10728                           status	equ	0xFD8
 10729                           
 10730 ;; *************** function _INT1_ISR *****************
 10731 ;; Defined at:
 10732 ;;		line 323 in file "Lab8_redo.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;		None
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;		None
 10737 ;; Return value:  Size  Location     Type
 10738 ;;		None               void
 10739 ;; Registers used:
 10740 ;;		wreg, status,2, status,0
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10750 ;;Total ram usage:        0 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; This function calls:
 10753 ;;		Nothing
 10754 ;; This function is called by:
 10755 ;;		_chkisr
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           	psect	text59
 10760  002604                     __ptext59:
 10761                           	opt stack 0
 10762  002604                     _INT1_ISR:
 10763                           	opt stack 18
 10764                           
 10765                           ;Lab8_redo.c: 325: if(MODE)
 10766                           
 10767                           ;incstack = 0
 10768  002604  5045               	movf	_MODE,w,c
 10769  002606  1046               	iorwf	_MODE+1,w,c
 10770  002608  B4D8               	btfsc	status,2,c
 10771  00260A  D003               	goto	i2l398
 10772                           
 10773                           ;Lab8_redo.c: 326: {
 10774                           ;Lab8_redo.c: 327: INTCON3bits.INT1IF=0;
 10775  00260C  90F0               	bcf	intcon3,0,c	;volatile
 10776                           
 10777                           ;Lab8_redo.c: 328: EW_PED_SW = 1;
 10778  00260E  0E01               	movlw	1
 10779  002610  D002               	goto	L18
 10780  002612                     i2l398:
 10781                           
 10782                           ;Lab8_redo.c: 330: else
 10783                           ;Lab8_redo.c: 331: {
 10784                           ;Lab8_redo.c: 332: INTCON3bits.INT1IF=0;
 10785  002612  90F0               	bcf	intcon3,0,c	;volatile
 10786                           
 10787                           ;Lab8_redo.c: 333: EW_PED_SW = 0;
 10788  002614  0E00               	movlw	0
 10789  002616                     L18:
 10790  002616  6E4C               	movwf	_EW_PED_SW,c
 10791  002618  D000               	goto	i2l400
 10792  00261A                     i2l400:
 10793  00261A  0012               	return		;funcret
 10794  00261C                     __end_of_INT1_ISR:
 10795                           	opt stack 0
 10796                           pclatu	equ	0xFFB
 10797                           pclath	equ	0xFFA
 10798                           tblptru	equ	0xFF8
 10799                           tblptrh	equ	0xFF7
 10800                           tblptrl	equ	0xFF6
 10801                           tablat	equ	0xFF5
 10802                           prodh	equ	0xFF4
 10803                           prodl	equ	0xFF3
 10804                           intcon	equ	0xFF2
 10805                           intcon2	equ	0xFF1
 10806                           intcon3	equ	0xFF0
 10807                           postinc0	equ	0xFEE
 10808                           fsr0h	equ	0xFEA
 10809                           fsr0l	equ	0xFE9
 10810                           wreg	equ	0xFE8
 10811                           postdec1	equ	0xFE5
 10812                           fsr1h	equ	0xFE2
 10813                           fsr1l	equ	0xFE1
 10814                           indf2	equ	0xFDF
 10815                           postinc2	equ	0xFDE
 10816                           fsr2h	equ	0xFDA
 10817                           fsr2l	equ	0xFD9
 10818                           status	equ	0xFD8
 10819                           
 10820 ;; *************** function _INT0_ISR *****************
 10821 ;; Defined at:
 10822 ;;		line 307 in file "Lab8_redo.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;		None
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;		None
 10827 ;; Return value:  Size  Location     Type
 10828 ;;		None               void
 10829 ;; Registers used:
 10830 ;;		wreg, status,2, status,0
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10840 ;;Total ram usage:        0 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; This function calls:
 10843 ;;		Nothing
 10844 ;; This function is called by:
 10845 ;;		_chkisr
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           	psect	text60
 10850  00261C                     __ptext60:
 10851                           	opt stack 0
 10852  00261C                     _INT0_ISR:
 10853                           	opt stack 18
 10854                           
 10855                           ;incstack = 0
 10856  00261C  5045               	movf	_MODE,w,c
 10857  00261E  1046               	iorwf	_MODE+1,w,c
 10858  002620  B4D8               	btfsc	status,2,c
 10859  002622  D003               	goto	i2l393
 10860                           
 10861                           ;Lab8_redo.c: 309: {
 10862                           ;Lab8_redo.c: 311: INTCONbits.INT0IF=0;
 10863  002624  92F2               	bcf	intcon,1,c	;volatile
 10864                           
 10865                           ;Lab8_redo.c: 312: NS_PED_SW = 1;
 10866  002626  0E01               	movlw	1
 10867  002628  D002               	goto	L19
 10868  00262A                     i2l393:
 10869                           
 10870                           ;Lab8_redo.c: 315: else
 10871                           ;Lab8_redo.c: 316: {
 10872                           ;Lab8_redo.c: 317: INTCONbits.INT0IF=0;
 10873  00262A  92F2               	bcf	intcon,1,c	;volatile
 10874                           
 10875                           ;Lab8_redo.c: 318: NS_PED_SW = 0;
 10876  00262C  0E00               	movlw	0
 10877  00262E                     L19:
 10878  00262E  6E4F               	movwf	_NS_PED_SW,c
 10879  002630  D000               	goto	i2l395
 10880  002632                     i2l395:
 10881  002632  0012               	return		;funcret
 10882  002634                     __end_of_INT0_ISR:
 10883                           	opt stack 0
 10884                           pclatu	equ	0xFFB
 10885                           pclath	equ	0xFFA
 10886                           tblptru	equ	0xFF8
 10887                           tblptrh	equ	0xFF7
 10888                           tblptrl	equ	0xFF6
 10889                           tablat	equ	0xFF5
 10890                           prodh	equ	0xFF4
 10891                           prodl	equ	0xFF3
 10892                           intcon	equ	0xFF2
 10893                           intcon2	equ	0xFF1
 10894                           intcon3	equ	0xFF0
 10895                           postinc0	equ	0xFEE
 10896                           fsr0h	equ	0xFEA
 10897                           fsr0l	equ	0xFE9
 10898                           wreg	equ	0xFE8
 10899                           postdec1	equ	0xFE5
 10900                           fsr1h	equ	0xFE2
 10901                           fsr1l	equ	0xFE1
 10902                           indf2	equ	0xFDF
 10903                           postinc2	equ	0xFDE
 10904                           fsr2h	equ	0xFDA
 10905                           fsr2l	equ	0xFD9
 10906                           status	equ	0xFD8
 10907                           pclatu	equ	0xFFB
 10908                           pclath	equ	0xFFA
 10909                           tblptru	equ	0xFF8
 10910                           tblptrh	equ	0xFF7
 10911                           tblptrl	equ	0xFF6
 10912                           tablat	equ	0xFF5
 10913                           prodh	equ	0xFF4
 10914                           prodl	equ	0xFF3
 10915                           intcon	equ	0xFF2
 10916                           intcon2	equ	0xFF1
 10917                           intcon3	equ	0xFF0
 10918                           postinc0	equ	0xFEE
 10919                           fsr0h	equ	0xFEA
 10920                           fsr0l	equ	0xFE9
 10921                           wreg	equ	0xFE8
 10922                           postdec1	equ	0xFE5
 10923                           fsr1h	equ	0xFE2
 10924                           fsr1l	equ	0xFE1
 10925                           indf2	equ	0xFDF
 10926                           postinc2	equ	0xFDE
 10927                           fsr2h	equ	0xFDA
 10928                           fsr2l	equ	0xFD9
 10929                           status	equ	0xFD8
 10930                           
 10931                           	psect	rparam
 10932  0000                     pclatu	equ	0xFFB
 10933                           pclath	equ	0xFFA
 10934                           tblptru	equ	0xFF8
 10935                           tblptrh	equ	0xFF7
 10936                           tblptrl	equ	0xFF6
 10937                           tablat	equ	0xFF5
 10938                           prodh	equ	0xFF4
 10939                           prodl	equ	0xFF3
 10940                           intcon	equ	0xFF2
 10941                           intcon2	equ	0xFF1
 10942                           intcon3	equ	0xFF0
 10943                           postinc0	equ	0xFEE
 10944                           fsr0h	equ	0xFEA
 10945                           fsr0l	equ	0xFE9
 10946                           wreg	equ	0xFE8
 10947                           postdec1	equ	0xFE5
 10948                           fsr1h	equ	0xFE2
 10949                           fsr1l	equ	0xFE1
 10950                           indf2	equ	0xFDF
 10951                           postinc2	equ	0xFDE
 10952                           fsr2h	equ	0xFDA
 10953                           fsr2l	equ	0xFD9
 10954                           status	equ	0xFD8


Data Sizes:
    Strings     103
    Constant    475
    Data        35
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     113
    BANK0           128     14      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[21]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[7]), 
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[12]), STR_5(CODE[2]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Initialize_Screen->_drawtext
    _Initialize_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _init_UART->_OpenUSART
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Wait_One_Second->_drawtext
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _Day_Mode->_PED_Control
    _Day_Mode->_Wait_N_Seconds
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  669844
                                             12 BANK0      2     2      0
                           _Day_Mode
                        _Do_Flashing
                            _Do_Init
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  189017
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   67208
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     375
                           _Init_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  160059
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  246473
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   89449
                                             10 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28828
                                             64 COMRAM     1     0      1
                                              7 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   60491
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   32321
                                              7 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2718
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     1     0      1
                                              0 BANK0      2     2      0
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          4     3      1   57456
                                              8 BANK0      4     3      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28834
                                             64 COMRAM     1     0      1
                                              7 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1213
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1225
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   28170
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2189
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25981
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10774
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     882
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Wait_Half_Second
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___wmul
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Do_Init
     _Init_ADC
     _init_UART
       _OpenUSART
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      3F       5       49.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B0      34        0.0%
DATA                 0      0      B0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 14 20:31:23 2021

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 1DE6                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 00A6                                 l201 114E  
                               l210 10A4                                 l203 1028  
                               l125 21CE                                 l135 2682  
                               l241 172C                                 l242 174E  
                               l421 25AC                                 l430 2320  
                               l238 1750                                 l431 2326  
                               l239 16BC                                 l432 232A  
                               l440 22DE                                 l424 25CC  
                               l185 1DE4                                 l249 0D84  
                               l433 234E                                 l441 22E2  
                               l530 1820                                 l514 0AA0  
                               l450 23BA                                 l442 2306  
                               l179 252E                                 l267 11BE  
                               l451 23DE                                 l523 0FF8  
                               l283 1D5C                                 l460 2396  
                               l428 231C                                 l437 22D4  
                               l446 23AC                                 l455 2364  
                               l439 22D8                                 l448 23B0  
                               l480 18AE                                 l449 23B6  
                               l457 2368                                 l458 236E  
                               l482 18EA                                 l475 1C3E  
                               l459 2372                                 l910 1988  
                               l478 185A                                 l591 2580  
                               l583 203C                                 l487 1B12  
                               l584 203E                                 l809 2496  
                               l585 2048                                 l586 204A  
                               l499 25FC                                 l579 2022  
                               l588 2064                                 l784 1CD4  
                               l971 1674                                 l980 1BA8  
                               l797 1FF4                                 l974 1640  
                               l899 19B0                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 00AC                                 _PR2 000FCB  
                 _Deactivate_Buzzer 26E6                                 _dir 0058  
                               _nbr 0047                                 _txt 0049  
                    drawFastHLine@w 0017                      drawFastHLine@x 0020  
                    drawFastHLine@y 0016                        ___awmod@sign 0014  
           __end_of_update_LCD_misc 0CC2                                 wreg 000FE8  
                ??_Wait_Half_Second 000F                  ?_Deactivate_Buzzer 0001  
                   ??_fillRectangle 001B                        __CFG_LVP$OFF 000000  
           _TFT_GreenTab_Initialize 2530                        ___ftdiv@cntr 0024  
                      ___ftdiv@sign 0029                        __CFG_WDT$OFF 000000  
                    drawFastVLine@h 0017                                l1148 245A  
                    drawFastVLine@x 0020                      drawFastVLine@y 0016  
                              l4300 1064                                l5100 23C0  
                              l4302 1098                                l5030 0ECE  
                              l4240 1DA6                                l4320 111A  
                              l4312 10C6                                l4304 109C  
                              l4250 1DCC                                l4322 1142  
                              l4314 10EE                                l4410 1484  
                              l4402 1432                                l5114 1BC0  
                              l5034 0F26                                l5026 0E76  
                              l4252 1DDA                                l4236 1D6E  
                              l4412 148C                                l5132 1C08  
                              l5124 1BE2                                l5108 2378  
                              l5044 0FDA                                l4270 229C  
                              l4334 2428                                l5142 1C2A  
                              l5118 1BCE                                l4350 190C  
                              l5038 0F80                                l4328 114A  
                              l4336 242E                                l5136 1C16  
                              l5128 1BF6                                l4440 1220  
                              l4424 11A4                                l4360 1970  
                              l4352 1918                                l4520 1B78  
                              l5152 24AE                                l4258 2510  
                              l4266 2280                                l4290 1024  
                              l4282 100A                                l4362 197C  
                              l4354 1938                                l4346 18FC  
                              l4292 102C                                l4444 1272  
                              l5084 2330                                l5092 22E8  
                              l4508 2472                                l4460 15B2  
                              l4516 1B46                                l5148 24A0  
                              l5404 2132                                l4286 1016  
                              l4710 1CBA                                l4374 19A2  
                              l4358 1950                                l4462 15CC  
                              l4526 1BA4                                l5158 24C2  
                              l5422 217C                                l4296 1034  
                              l4368 1990                                l4640 0B62  
                              l4632 0B46                                l5336 1896  
                              l5408 2142                                l4386 13C4  
                              l4714 1CCA                                l4706 1CAE  
                              l4730 1F98                                l4562 0D6A  
                              l4466 15DA                                l4652 0B8C  
                              l4644 0B70                                l4636 0B54  
                              l4398 1414                                l4750 1FEA  
                              l4742 1FCE                                l4734 1FA6  
                              l4726 1F8A                                l4590 0E5A  
                              l4486 161A                                l4736 1FB0  
                              l4496 164E                                l4656 0B9A  
                              l4648 0B7E                                l4904 1D44  
                              l4682 1C56                                l4738 1FB8  
                              l4746 1FDA                                l4658 0BA0  
                              l4922 201A                                l4914 2008  
                              l4906 1D52                                l4850 1686  
                              l5386 1AD0                                l4596 24D8  
                              l4598 24E2                                l4694 1C7E  
                              l4934 2034                                l4926 2026  
                              l4918 2012                                l4696 1C88  
                              l4688 1C68                                l4872 1730  
                              l4856 16F4                                l5680 1A5A  
                              l4698 1C90                                l4890 1CE6  
                              l4882 174A                                l4972 09CA  
                              l4964 0820                                l4876 173A  
                              l4868 1722                                l5668 19CC  
                              l4982 17B4                                l4894 1D1E  
                              l5678 1A54                                l4968 08F4  
                              l4978 1758                                l4988 180E  
                              STR_1 FFAD                                STR_2 FFE5  
                              STR_3 FFEB                                STR_4 FFEF  
                              STR_5 FFFD                                STR_6 FFC1  
                              STR_7 FFD7                                STR_8 FFCD  
                              STR_9 FFDE                                u3100 13EE  
                              u3201 15A4                                u4100 1A44  
                              u3221 15C2                                u4110 1A46  
                              u3340 0B20                                u3350 0B22  
                              u2810 1D9C                                u3650 1D14  
                              u3570 16B4                                u3580 16EA  
                              u2960 10FC                                _MODE 0045  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 19B2                                _font FDBD  
                      ___ftpack@arg 000F                        ___ftpack@exp 0012  
                              fsr0h 000FEA                                fsr1h 000FE2  
                    ??_get_full_ADC 0011                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 005B                                _volt 0042  
                   drawFastHLine@hi 001E                     drawFastHLine@lo 001F  
          __end_of_update_LCD_color 0AA2                                pclat 000FFA  
          __end_of_update_LCD_count 0FFA                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0018                     __end_of_Do_Init 25A8  
                   ??_drawFastHLine 001A                     ??_drawFastVLine 001A  
                      ___param_bank 000010                        _Act_Mode_Txt 0062  
                  __end_of_INT0_ISR 2634                    __end_of_INT1_ISR 261C  
                  __end_of_INT2_ISR 26F6                         _Do_Flashing 212E  
         __end_of_Deactivate_Buzzer 26EE                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                         _SW_EWLT_Txt 0068  
                       _SW_MODE_Txt 006C                               ?_main 0001  
                   __end_of___awdiv 1CD6                     drawCircle@ddF_x 0024  
                             STR_10 FFF3                     drawCircle@ddF_y 0026  
                             STR_11 FFF7                               STR_12 FF98  
                             STR_13 FFFD                               STR_14 FFFB  
                             STR_15 FFFD                               STR_16 FFFB  
                   __end_of___awmod 1FF6                     __end_of___ftdiv 1676  
                             _T0CON 000FD5                     ___awdiv@divisor 0011  
                             _T2CON 000FCA                               _T3CON 000FB1  
                             i2l400 261A                               i2l393 262A  
                             i2l386 1EB8                               i2l395 2632  
                             i2l398 2612                     ___awdiv@counter 0013  
                   drawCircle@color 0020                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _SPBRG 000FAF                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 004B                        ?_PED_Control 00AD  
                             _Rcmd1 1288                               _Rcmd3 14A2  
                       _SW_NSLT_Txt 006E                       drawRect@color 0029  
                     ___awtoft@sign 001A                     __end_of_init_IO 2660  
                             _font2 FEBC               fillCircleHelper@ddF_x 002F  
             fillCircleHelper@ddF_y 0031                   ??_Wait_One_Second 0041  
                     ___ftpack@sign 0013               fillCircleHelper@delta 0029  
             fillCircleHelper@color 002B                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 0042                    __end_of_Day_Mode 18EC  
                    _Wait_N_Seconds 2498                     write_data@data_ 0011  
                   __initialization 20CC                        __end_of_main 1A6E  
                      __end_of_font FEBC                    __end_of_Init_ADC 26DA  
                  __end_of_Rcmd2red 241E                          _Night_Mode 1A6E  
                            ??_main 0042                       __activetblptr 000002  
             Wait_N_Seconds@seconds 00AF                   __end_of_LCD_Reset 269A  
                      _SW_EWPED_Txt 006A           ??_TFT_GreenTab_Initialize 001B  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 00AE  
                  ___awdiv@dividend 000F                    __end_of___awtoft 2498  
                  __end_of___ftpack 19B2                           ??_Do_Init 0012  
                            i2l2692 1EAE                              i2l2688 1EA4  
                            _OSCCON 000FD3                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds 24CE  
                      _SW_NSPED_Txt 0070                    __end_of_delay_ms 21D6  
                            _Set_EW 2398                              _Set_NS 2308  
                  __end_of_fillRect 22C0                    __end_of_drawChar 1150  
                  __end_of_drawRect 20CC                  __size_of_Set_EW_LT 0048  
                __size_of_OpenUSART 0070                              ___ftge 1B14  
                __size_of_Set_NS_LT 0048            __size_of_Activate_Buzzer 0012  
                            ___wmul 255A                           ??___awdiv 0013  
         __size_of_fillCircleHelper 0138                    __end_of_drawtext 14A2  
                         ??___awmod 0013                           ??___ftdiv 0021  
                            _chkisr 0008                              _buffer 0086  
                            clear_0 20D2                              clear_1 20DE  
                  ___awdiv@quotient 0015                     ___awmod@divisor 0011  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0013  
                      drawtext@size 003E                              _strcpy 24CE  
                            _strlen 241E                __end_of_get_full_ADC 25CE  
                         ??_init_IO 000F                        __pdataCOMRAM 005B  
__size_of_Wait_One_Second_With_Beep 0086                         Set_EW@color 00A7  
                      __mediumconst FDBC                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                  __end_of_spiwrite 2688                         Set_NS@color 00A7  
                        __accesstop 0080             __end_of__initialization 2124  
                         ?_INT0_ISR 0001                           ?_INT1_ISR 0001  
                         ?_INT2_ISR 0001                          ___ftge@ff1 000F  
                        ___ftge@ff2 0012                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 001B  
                        ___ftdiv@f2 001E                          ___ftdiv@f3 0025  
                        ___awtoft@c 0017                       __end_of_Rcmd1 1398  
                     __end_of_Rcmd3 1594                      __pcstackCOMRAM 0001  
                      __pidataBANK0 26DA                       __end_of_font2 FF98  
                       ?_Night_Mode 0001                      drawPixel@color 0017  
            __size_of_write_command 0010                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT 2398                   __end_of_OpenUSART 2066  
                 __end_of_Set_NS_LT 2308                __size_of_PED_Control 0096  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
                        ??_INT0_ISR 0001                          ??_INT1_ISR 0001  
         __size_of_Wait_Half_Second 001A                          ??_INT2_ISR 0001  
                   spiwrite@spidata 0010                   ?_update_LCD_color 0041  
                 ?_update_LCD_count 0041                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0042                  ??_update_LCD_count 0042  
                           ?___ftge 000F                             ?___wmul 000F  
                           ?_chkisr 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA                        ?_Do_Flashing 0001  
         update_LCD_PED_Count@count 0041                           ?___awtoft 0017  
                         ?___ftpack 000F                     _Wait_One_Second 1EF2  
                        _fillCircle 21D6                             ?_strcpy 000F  
                           ?_strlen 000F                   ??_Activate_Buzzer 000F  
                        _fillScreen 25CE                          _drawCircle 0CC2  
                        ??_Day_Mode 0042                           ?_delay_ms 0015  
                         ?_fillRect 0021           update_LCD_count@direction 00AC  
                         ?_drawChar 002C                             _SSPCON1 000FC6  
                         ?_drawRect 0021                             _SSPSTAT 000FC7  
             __end_of_fillRectangle 1752                           ?_drawtext 0037  
                           _SW_EWLT 0051                             _SW_MODE 0053  
                        ??_Init_ADC 000F                             _Do_Init 2582  
                           _SW_NSLT 0054                          ??_Rcmd2red 0012  
               __size_of_Night_Mode 00A6                       _write_command 26BC  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0048                     __size_of_Set_NS 0048  
             __end_of_drawFastHLine 1D5E                   __end_of_drawPixel 2530  
             __end_of_drawFastVLine 1DE6                    _fillCircleHelper 1150  
                   __size_of___ftge 0096                             ___awdiv 1C40  
                           ___awmod 1F74                             ___ftdiv 1594  
                   __size_of___wmul 0028               __size_of_get_full_ADC 0026  
                   __size_of_chkisr 1EEA                           ?_spiwrite 0001  
                           __pcinit 20CC                          ??___awtoft 001A  
                        ??___ftpack 0014                             __ramtop 1000  
                           __ptext0 19B2                             __ptext1 264C  
                           __ptext2 1A6E                             __ptext3 001C  
                           __ptext4 25CE                             __ptext5 1676  
                           __ptext6 2066                             __ptext7 1CD6  
                           __ptext8 2530                             __ptext9 14A2  
                 __end_of_init_UART 2674                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO 264C                           _T3CONbits 000FB1  
                  ___awmod@dividend 000F                          ??_delay_ms 0017  
                     drawtext@_text 0038                       drawtext@color 003A  
                        ??_fillRect 0026                          ??_drawChar 0033  
                         _LCD_Reset 2688                          ??_drawRect 002B  
                     _setAddrWindow 2228                      __pintcode_body 1E6C  
                drawFastHLine@color 0018                          delay_ms@ms 0015  
              end_of_initialization 2124                           _INT0_flag 0080  
                         _INT1_flag 0082                           _INT2_flag 0084  
                        ??_drawtext 003F                      ?_write_command 0001  
                     __Lmediumconst FDBC                             int_func 1E6C  
                         _PED_Count 0050                        _get_full_ADC 25A8  
                      PED_Control@i 00AF                           _EW_PED_SW 004C  
     __size_of_update_LCD_PED_Count 00D0             __end_of_Wait_One_Second 1F74  
                         _RCSTAbits 000FAB                             postdec1 000FE5  
                           postinc0 000FEE                             postinc2 000FDE  
                        ??_spiwrite 000F                             strlen@s 000F  
                   fillCircle@color 003F                         ?_fillCircle 0039  
                         _PORTAbits 000F80                    drawtext@cursor_x 00AB  
                  drawtext@cursor_y 00AA                           _PORTBbits 000F81  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                         ?_fillScreen 0022  
                         _NS_PED_SW 004F                         ?_drawCircle 001A  
                        drawChar@bg 0030                           _TRISCbits 000F94  
                    ?_setAddrWindow 0012                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 0042                    drawtext@textsize 00A6  
          __size_of_update_LCD_misc 0220                          drawPixel@x 0019  
                        drawPixel@y 0016                    _Wait_Half_Second 25EA  
                       ___ftdiv@exp 0028                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 00AD                  get_full_ADC@result 0013  
                 __size_of_INT0_ISR 0018                   __size_of_INT1_ISR 0018  
                 __size_of_INT2_ISR 0008                      __end_of_Set_EW 23E0  
                    __end_of_Set_NS 2350                      __end_of___ftge 1BAA  
                    __end_of___wmul 2582                       delay_ms@count 0019  
                        _write_data 26AC                       __pidataCOMRAM 2634  
                    __end_of_chkisr 1EF2                        ??_Night_Mode 0042  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 003C  
              __size_of_Do_Flashing 0056                      __end_of_strcpy 2500  
                    __end_of_strlen 245C                 start_initialization 20CC  
                 __size_of_Day_Mode 00CA                     ??_write_command 0011  
                         _Set_EW_LT 2350                           _OpenUSART 1FF6  
                         _Set_NS_LT 22C0                 __size_of_fillCircle 0052  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000E  
                __end_of_Night_Mode 1B14                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 00B0  
               __size_of_drawCircle 01AE                            ??_Set_EW 0042  
                          ??_Set_NS 0042                     _Activate_Buzzer 269A  
                  ?_Wait_One_Second 0001                            ??___ftge 0015  
                          ??___wmul 0013                            ??_chkisr 0001  
                       __pdataBANK0 00B3                   update_LCD_misc@ch 00AC  
                   setAddrWindow@x0 0015                     setAddrWindow@x1 0013  
                   setAddrWindow@y0 0012                     setAddrWindow@y1 0014  
                          ??_strcpy 0013                            ??_strlen 0011  
                      _PED_EW_Count 00B9           __size_of_update_LCD_color 0368  
         __size_of_update_LCD_count 018A                   __size_of___awtoft 003C  
                 __size_of___ftpack 00C6                         __pbssCOMRAM 0042  
                     ??_PED_Control 0042                     ??_setAddrWindow 0015  
                     __pcstackBANK0 00A5                        _PED_NS_Count 00BC  
                       ??_LCD_Reset 001B            __end_of_fillCircleHelper 1288  
                 __size_of_delay_ms 0052          ?_Wait_One_Second_With_Beep 0001  
                          ?_Do_Init 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 000F                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 010A  
                 ??_update_LCD_misc 0041                           __pintcode 0008  
   __end_of_TFT_GreenTab_Initialize 255A                       __pmediumconst FDBC  
                          ?___awdiv 000F                            ?___awmod 000F  
                          ?___ftdiv 001B                           __tft_type 0056  
                         _direction 0059                  drawFastVLine@color 0018  
                       ?_write_data 0001                           _drawPixel 2500  
                 __size_of_spiwrite 0014                            ?_init_IO 0001  
                 _Initialize_Screen 001C                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART 2660  
                ?_Initialize_Screen 0001                            _FLASHING 004D  
 __end_of_Wait_One_Second_With_Beep 1E6C                 __end_of_PED_Control 1C40  
           __end_of_Activate_Buzzer 26AC                            _INT0_ISR 261C  
                          _INT1_ISR 2604                            _INT2_ISR 26EE  
                    ___wmul@product 0013                 ??_Initialize_Screen 0041  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 00B6  
                         fillRect@h 0023                           fillRect@i 002A  
                         fillRect@w 0022                           fillRect@x 0029  
                         fillRect@y 0021                           drawChar@c 002D  
                         drawChar@i 0036                           drawChar@j 0035  
                      ??_fillCircle 0041                           drawChar@x 0034  
                         drawChar@y 002C                          ?_drawPixel 0016  
            __size_of_fillRectangle 00DC                            _NS_Count 005F  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second 2604  
                 ___wmul@multiplier 000F           __end_of_Initialize_Screen 073A  
                      ??_fillScreen 0024                           drawRect@h 0027  
                         drawRect@w 0025                           drawRect@x 0021  
                         drawRect@y 0023                       _FlashingR_Txt 0064  
                     _FlashingS_Txt 0066                   PED_Control@i_1511 00B0  
                      ??_drawCircle 0022        __end_of_update_LCD_PED_Count 1822  
                         main@nStep 00B1                            _SW_EWPED 0052  
             update_LCD_color@color 0041                            _Day_Mode 1822  
                          _SW_NSPED 0055           update_LCD_color@direction 00A5  
                        ?_init_UART 0001              __size_of_drawFastHLine 0088  
                       _INTCON2bits 000FF1                         _INTCON3bits 000FF0  
                         copy_data0 20F8                           copy_data1 2118  
                         drawtext@i 00A8              __size_of_drawFastVLine 0088  
                         drawtext@x 00A5                           drawtext@y 0037  
                          _Init_ADC 26CC                   write_command@cmd_ 0011  
                       ??_Set_EW_LT 0042                         ??_OpenUSART 0011  
                       ??_Set_NS_LT 0042                            _Rcmd2red 23E0  
                  __size_of_Do_Init 0026                 __size_of_write_data 0010  
                   OpenUSART@config 0011                  __end_of_fillCircle 2228  
                          __Hrparam 0000                  __end_of_fillScreen 25EA  
             update_LCD_count@count 0041                            __Lrparam 0000  
                __end_of_drawCircle 0E70                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                          ___awtoft 245C                            ___ftpack 18EC  
                  _update_LCD_color 073A                    _update_LCD_count 0E70  
                  __size_of_init_IO 0014                         _PED_Control 1BAA  
                          _delay_ms 2184                            __ptext10 23E0  
                          __ptext11 1288                            __ptext20 2498  
                          __ptext12 2688                            __ptext21 0E70  
                          __ptext13 2184                            __ptext30 2308  
                          __ptext22 1EF2                            __ptext14 2582  
                          __ptext31 2350                            __ptext23 0AA2  
                          __ptext15 2660                            __ptext40 1C40  
                          __ptext32 2398                            __ptext24 25A8  
                          __ptext16 1FF6                            __ptext41 1DE6  
                          __ptext33 073A                            __ptext25 1B14  
                          __ptext17 26CC                            __ptext50 26AC  
                          __ptext42 24CE                            __ptext34 21D6  
                          __ptext26 1594                            __ptext18 212E  
                          __ptext51 26BC                            __ptext43 1398  
                          __ptext35 1150                            __ptext27 245C  
                          __ptext19 1822                            __ptext60 261C  
                          __ptext52 2674                            __ptext44 241E  
                          __ptext36 0CC2                            __ptext28 18EC  
                          __ptext53 255A                            __ptext45 0FFA  
                          __ptext37 1BAA                            __ptext29 22C0  
                          __ptext54 25EA                            __ptext46 2276  
                          __ptext38 1752                            __ptext55 26E6  
                          __ptext47 1D5E                            __ptext39 1F74  
                          __ptext56 269A                            __ptext48 2500  
                          __ptext49 2228                            __ptext58 26EE  
                          __ptext59 2604                            _fillRect 2276  
                          _drawChar 0FFA                            _drawRect 2066  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 004E  
                          _colstart 0057                            _drawtext 1398  
                        strcpy@from 0011                       _fillRectangle 1676  
                  ?_Activate_Buzzer 0001                       __size_of_main 00BC  
                   fillRectangle@hi 001F                     fillRectangle@lo 0020  
                     _drawFastHLine 1CD6                      Set_EW_LT@color 00A7  
                     _drawFastVLine 1D5E                       ??_Do_Flashing 0042  
                          _spiwrite 2674                         ??_drawPixel 0019  
                          _rowstart 005A                  fillCircleHelper@x0 0021  
                fillCircleHelper@y0 0023          __size_of_Initialize_Screen 071E  
                        _INTCONbits 000FF2                      OpenUSART@spbrg 000F  
                       ??_init_UART 0012                          _EWLT_Count 00B3  
                 ?_fillCircleHelper 0021                           spiwrite@x 000F  
       ??_Wait_One_Second_With_Beep 0041                            intlevel2 0000  
                   _update_LCD_misc 0AA2                      ?_fillRectangle 0016  
                ??_fillCircleHelper 002D               __end_of_write_command 26CC  
                   fillScreen@color 0022                update_LCD_misc@nStep 00AD  
              _update_LCD_PED_Count 1752             __size_of_Wait_N_Seconds 0036  
                      fillCircle@x0 0039                        fillCircle@y0 003B  
                    ?_drawFastHLine 0016                      fillRectangle@h 0018  
                    fillRectangle@w 0017                      fillRectangle@x 0021  
                    fillRectangle@y 0016                      ?_drawFastVLine 0016  
                 fillCircleHelper@f 0033                   fillCircleHelper@r 0025  
                 fillCircleHelper@x 0035                   fillCircleHelper@y 0037  
                      ??_write_data 0011                       fillRect@color 0024  
          __size_of_Wait_One_Second 0082                            strcpy@cp 0013  
                          strlen@cp 0013                            strcpy@to 000F  
               __end_of_Do_Flashing 2184                          _NSLT_Count 005C  
                       fillCircle@r 003D               __end_of_setAddrWindow 2276  
                fillRectangle@color 0019                       drawChar@color 002E  
                __end_of_write_data 26BC                        drawChar@line 0033  
                    Set_NS_LT@color 00A7                       ?_get_full_ADC 000F  
                      drawChar@size 0032               ?_update_LCD_PED_Count 0041  
