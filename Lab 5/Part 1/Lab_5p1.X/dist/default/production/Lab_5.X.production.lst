

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Sep 23 20:59:18 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	idataBANK0
    45  002A6E                     __pidataBANK0:
    46                           	opt stack 0
    47                           
    48                           ;initializer for _segDisplay
    49  002A6E  0001               	dw	1
    50  002A70  004F               	dw	79
    51  002A72  0012               	dw	18
    52  002A74  0006               	dw	6
    53  002A76  004C               	dw	76
    54  002A78  0024               	dw	36
    55  002A7A  0020               	dw	32
    56  002A7C  000F               	dw	15
    57  002A7E  0000               	dw	0
    58  002A80  0004               	dw	4
    59                           
    60                           	psect	smallconst
    61  001000                     __psmallconst:
    62                           	opt stack 0
    63  001000  00                 	db	0
    64  001001                     _dpowers:
    65                           	opt stack 0
    66  001001  0001               	dw	1
    67  001003  0000               	dw	0
    68  001005  000A               	dw	10
    69  001007  0000               	dw	0
    70  001009  0064               	dw	100
    71  00100B  0000               	dw	0
    72  00100D  03E8               	dw	1000
    73  00100F  0000               	dw	0
    74  001011  2710               	dw	10000
    75  001013  0000               	dw	0
    76  001015  86A0               	dw	34464
    77  001017  0001               	dw	1
    78  001019  4240               	dw	16960
    79  00101B  000F               	dw	15
    80  00101D  9680               	dw	38528
    81  00101F  0098               	dw	152
    82  001021  E100               	dw	57600
    83  001023  05F5               	dw	1525
    84  001025  CA00               	dw	51712
    85  001027  3B9A               	dw	15258
    86  001029                     __end_of_dpowers:
    87                           	opt stack 0
    88  001029                     __npowers_:
    89                           	opt stack 0
    90  001029  00                 	db	0
    91  00102A  80                 	db	128
    92  00102B  3F                 	db	63
    93  00102C  CD                 	db	205
    94  00102D  CC                 	db	204
    95  00102E  3D                 	db	61
    96  00102F  D7                 	db	215
    97  001030  23                 	db	35
    98  001031  3C                 	db	60
    99  001032  12                 	db	18
   100  001033  83                 	db	131
   101  001034  3A                 	db	58
   102  001035  B7                 	db	183
   103  001036  D1                 	db	209
   104  001037  38                 	db	56
   105  001038  C6                 	db	198
   106  001039  27                 	db	39
   107  00103A  37                 	db	55
   108  00103B  38                 	db	56
   109  00103C  86                 	db	134
   110  00103D  35                 	db	53
   111  00103E  C0                 	db	192
   112  00103F  D6                 	db	214
   113  001040  33                 	db	51
   114  001041  CC                 	db	204
   115  001042  2B                 	db	43
   116  001043  32                 	db	50
   117  001044  70                 	db	112
   118  001045  89                 	db	137
   119  001046  30                 	db	48
   120  001047  E7                 	db	231
   121  001048  DB                 	db	219
   122  001049  2E                 	db	46
   123  00104A  E5                 	db	229
   124  00104B  3C                 	db	60
   125  00104C  1E                 	db	30
   126  00104D  42                 	db	66
   127  00104E  A2                 	db	162
   128  00104F  0D                 	db	13
   129  001050                     __end_of__npowers_:
   130                           	opt stack 0
   131  001050                     __powers_:
   132                           	opt stack 0
   133  001050  00                 	db	0
   134  001051  80                 	db	128
   135  001052  3F                 	db	63
   136  001053  00                 	db	0
   137  001054  20                 	db	32
   138  001055  41                 	db	65
   139  001056  00                 	db	0
   140  001057  C8                 	db	200
   141  001058  42                 	db	66
   142  001059  00                 	db	0
   143  00105A  7A                 	db	122
   144  00105B  44                 	db	68
   145  00105C  40                 	db	64
   146  00105D  1C                 	db	28
   147  00105E  46                 	db	70
   148  00105F  50                 	db	80
   149  001060  C3                 	db	195
   150  001061  47                 	db	71
   151  001062  24                 	db	36
   152  001063  74                 	db	116
   153  001064  49                 	db	73
   154  001065  97                 	db	151
   155  001066  18                 	db	24
   156  001067  4B                 	db	75
   157  001068  BC                 	db	188
   158  001069  BE                 	db	190
   159  00106A  4C                 	db	76
   160  00106B  6B                 	db	107
   161  00106C  6E                 	db	110
   162  00106D  4E                 	db	78
   163  00106E  03                 	db	3
   164  00106F  15                 	db	21
   165  001070  50                 	db	80
   166  001071  79                 	db	121
   167  001072  AD                 	db	173
   168  001073  60                 	db	96
   169  001074  F3                 	db	243
   170  001075  49                 	db	73
   171  001076  71                 	db	113
   172  001077                     __end_of__powers_:
   173                           	opt stack 0
   174  0000                     _ADCON0	set	4034
   175  0000                     _ADCON0bits	set	4034
   176  0000                     _ADCON1	set	4033
   177  0000                     _ADCON2	set	4032
   178  0000                     _ADRESH	set	4036
   179  0000                     _ADRESL	set	4035
   180  0000                     _OSCCON	set	4051
   181  0000                     _PIE1bits	set	3997
   182  0000                     _PIR1bits	set	3998
   183  0000                     _PORTB	set	3969
   184  0000                     _PORTC	set	3970
   185  0000                     _PORTD	set	3971
   186  0000                     _PORTDbits	set	3971
   187  0000                     _PORTE	set	3972
   188  0000                     _PORTEbits	set	3972
   189  0000                     _RCSTA	set	4011
   190  0000                     _RCSTAbits	set	4011
   191  0000                     _SPBRG	set	4015
   192  0000                     _SPBRGH	set	4016
   193  0000                     _TRISA	set	3986
   194  0000                     _TRISB	set	3987
   195  0000                     _TRISC	set	3988
   196  0000                     _TRISCbits	set	3988
   197  0000                     _TRISD	set	3989
   198  0000                     _TRISE	set	3990
   199  0000                     _TXREG	set	4013
   200  0000                     _TXSTA	set	4012
   201  0000                     _TXSTAbits	set	4012
   202  0000                     _TRMT	set	32097
   203  001077                     STR_1:
   204  001077  56                 	db	86	;'V'
   205  001078  4F                 	db	79	;'O'
   206  001079  4C                 	db	76	;'L'
   207  00107A  54                 	db	84	;'T'
   208  00107B  20                 	db	32
   209  00107C  3D                 	db	61	;'='
   210  00107D  20                 	db	32
   211  00107E  25                 	db	37
   212  00107F  66                 	db	102	;'f'
   213  001080  0D                 	db	13
   214  001081  0A                 	db	10
   215  001082  0A                 	db	10
   216  001083  0A                 	db	10
   217  001084  00                 	db	0
   218                           
   219                           ; #config settings
   220  001085  00                 	db	0	; dummy byte at the end
   221  0000                     
   222                           	psect	cinit
   223  002992                     __pcinit:
   224                           	opt stack 0
   225  002992                     start_initialization:
   226                           	opt stack 0
   227  002992                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Initialize objects allocated to BANK0 (20 bytes)
   231                           ; load TBLPTR registers with __pidataBANK0
   232  002992  0E6E               	movlw	low __pidataBANK0
   233  002994  6EF6               	movwf	tblptrl,c
   234  002996  0E2A               	movlw	high __pidataBANK0
   235  002998  6EF7               	movwf	tblptrh,c
   236  00299A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   237  00299C  6EF8               	movwf	tblptru,c
   238  00299E  EE00  F080         	lfsr	0,__pdataBANK0
   239  0029A2  EE10 F014          	lfsr	1,20
   240  0029A6                     copy_data0:
   241  0029A6  0009               	tblrd		*+
   242  0029A8  CFF5 FFEE          	movff	tablat,postinc0
   243  0029AC  50E5               	movf	postdec1,w,c
   244  0029AE  50E1               	movf	fsr1l,w,c
   245  0029B0  E1FA               	bnz	copy_data0
   246  0029B2                     end_of_initialization:
   247                           	opt stack 0
   248  0029B2                     __end_of__initialization:
   249                           	opt stack 0
   250  0029B2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   251  0029B4  6EF8               	movwf	tblptru,c
   252  0029B6  0100               	movlb	0
   253  0029B8  EF4A  F00F         	goto	_main	;jump to C main() function
   254                           tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           postdec1	equ	0xFE5
   260                           fsr1l	equ	0xFE1
   261                           
   262                           	psect	dataBANK0
   263  000080                     __pdataBANK0:
   264                           	opt stack 0
   265  000080                     _segDisplay:
   266                           	opt stack 0
   267  000080                     	ds	20
   268                           tblptru	equ	0xFF8
   269                           tblptrh	equ	0xFF7
   270                           tblptrl	equ	0xFF6
   271                           tablat	equ	0xFF5
   272                           postinc0	equ	0xFEE
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	cstackBANK0
   277  000094                     __pcstackBANK0:
   278                           	opt stack 0
   279  000094                     main@STEP:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x0
   283  000094                     	ds	2
   284  000096                     main@U:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0x2
   288  000096                     	ds	1
   289  000097                     main@L:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x3
   293  000097                     	ds	1
   294  000098                     main@VOLT:
   295                           	opt stack 0
   296                           
   297                           ; 3 bytes @ 0x4
   298  000098                     	ds	3
   299                           tblptru	equ	0xFF8
   300                           tblptrh	equ	0xFF7
   301                           tblptrl	equ	0xFF6
   302                           tablat	equ	0xFF5
   303                           postinc0	equ	0xFEE
   304                           postdec1	equ	0xFE5
   305                           fsr1l	equ	0xFE1
   306                           
   307                           	psect	cstackCOMRAM
   308  000001                     __pcstackCOMRAM:
   309                           	opt stack 0
   310  000001                     ??_DISPLAY_UPPER_7SEG:
   311  000001                     ?_get_full_ADC:
   312                           	opt stack 0
   313  000001                     ?___ftpack:
   314                           	opt stack 0
   315  000001                     ?___ftneg:
   316                           	opt stack 0
   317  000001                     ?__tdiv_to_l_:
   318                           	opt stack 0
   319  000001                     ?__div_to_l_:
   320                           	opt stack 0
   321  000001                     ?___lldiv:
   322                           	opt stack 0
   323  000001                     ?___llmod:
   324                           	opt stack 0
   325  000001                     putch@c:
   326                           	opt stack 0
   327  000001                     Select_ADC_Channel@channel:
   328                           	opt stack 0
   329  000001                     DISPLAY_LOWER_7SEG@LED2:
   330                           	opt stack 0
   331  000001                     WAIT_ONE_SEC@i:
   332                           	opt stack 0
   333  000001                     OpenUSART@spbrg:
   334                           	opt stack 0
   335  000001                     __div_to_l_@f1:
   336                           	opt stack 0
   337  000001                     ___ftpack@arg:
   338                           	opt stack 0
   339  000001                     __tdiv_to_l_@f1:
   340                           	opt stack 0
   341  000001                     ___ftge@ff1:
   342                           	opt stack 0
   343  000001                     ___ftneg@f1:
   344                           	opt stack 0
   345  000001                     ___lldiv@dividend:
   346                           	opt stack 0
   347  000001                     ___llmod@dividend:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x0
   351  000001                     	ds	2
   352  000003                     ??_get_full_ADC:
   353  000003                     DISPLAY_LOWER_7SEG@Lower:
   354                           	opt stack 0
   355  000003                     OpenUSART@config:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x2
   359  000003                     	ds	1
   360  000004                     ___ftpack@exp:
   361                           	opt stack 0
   362  000004                     DISPLAY_UPPER_7SEG@testbit:
   363                           	opt stack 0
   364  000004                     __div_to_l_@f2:
   365                           	opt stack 0
   366  000004                     __tdiv_to_l_@f2:
   367                           	opt stack 0
   368  000004                     ___ftge@ff2:
   369                           	opt stack 0
   370                           
   371                           ; 3 bytes @ 0x3
   372  000004                     	ds	1
   373  000005                     ___ftpack@sign:
   374                           	opt stack 0
   375  000005                     get_full_ADC@result:
   376                           	opt stack 0
   377  000005                     ___lldiv@divisor:
   378                           	opt stack 0
   379  000005                     ___llmod@divisor:
   380                           	opt stack 0
   381                           
   382                           ; 4 bytes @ 0x4
   383  000005                     	ds	1
   384  000006                     ??___ftpack:
   385  000006                     DISPLAY_UPPER_7SEG@Upper:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x5
   389  000006                     	ds	1
   390  000007                     ??__tdiv_to_l_:
   391  000007                     ??___ftge:
   392  000007                     DISPLAY_UPPER_7SEG@LED1:
   393                           	opt stack 0
   394  000007                     __div_to_l_@quot:
   395                           	opt stack 0
   396                           
   397                           ; 4 bytes @ 0x6
   398  000007                     	ds	2
   399  000009                     ?___awtoft:
   400                           	opt stack 0
   401  000009                     ?___lltoft:
   402                           	opt stack 0
   403  000009                     ___llmod@counter:
   404                           	opt stack 0
   405  000009                     ___awtoft@c:
   406                           	opt stack 0
   407  000009                     ___lldiv@quotient:
   408                           	opt stack 0
   409  000009                     ___lltoft@c:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x8
   413  000009                     	ds	1
   414  00000A                     __tdiv_to_l_@quot:
   415                           	opt stack 0
   416                           
   417                           ; 4 bytes @ 0x9
   418  00000A                     	ds	1
   419  00000B                     __div_to_l_@cntr:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0xA
   423  00000B                     	ds	1
   424  00000C                     ___awtoft@sign:
   425                           	opt stack 0
   426  00000C                     __div_to_l_@exp1:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0xB
   430  00000C                     	ds	1
   431  00000D                     ??___lltoft:
   432  00000D                     ?___ftmul:
   433                           	opt stack 0
   434  00000D                     ___lldiv@counter:
   435                           	opt stack 0
   436  00000D                     ___ftmul@f1:
   437                           	opt stack 0
   438                           
   439                           ; 3 bytes @ 0xC
   440  00000D                     	ds	1
   441  00000E                     __tdiv_to_l_@cntr:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0xD
   445  00000E                     	ds	1
   446  00000F                     __tdiv_to_l_@exp1:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0xE
   450  00000F                     	ds	1
   451  000010                     ___ftmul@f2:
   452                           	opt stack 0
   453                           
   454                           ; 3 bytes @ 0xF
   455  000010                     	ds	1
   456  000011                     ___lltoft@exp:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x10
   460  000011                     	ds	2
   461  000013                     ??___ftmul:
   462                           
   463                           ; 0 bytes @ 0x12
   464  000013                     	ds	3
   465  000016                     ___ftmul@exp:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x15
   469  000016                     	ds	1
   470  000017                     ___ftmul@f3_as_product:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x16
   474  000017                     	ds	3
   475  00001A                     ___ftmul@cntr:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x19
   479  00001A                     	ds	1
   480  00001B                     ___ftmul@sign:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x1A
   484  00001B                     	ds	1
   485  00001C                     ?___ftdiv:
   486                           	opt stack 0
   487  00001C                     ?___fttol:
   488                           	opt stack 0
   489  00001C                     ___ftdiv@f1:
   490                           	opt stack 0
   491  00001C                     ___fttol@f1:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0x1B
   495  00001C                     	ds	3
   496  00001F                     ___ftdiv@f2:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0x1E
   500  00001F                     	ds	1
   501  000020                     ??___fttol:
   502                           
   503                           ; 0 bytes @ 0x1F
   504  000020                     	ds	2
   505  000022                     ??___ftdiv:
   506                           
   507                           ; 0 bytes @ 0x21
   508  000022                     	ds	3
   509  000025                     ___ftdiv@cntr:
   510                           	opt stack 0
   511  000025                     ___fttol@sign1:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x24
   515  000025                     	ds	1
   516  000026                     ___ftdiv@f3:
   517                           	opt stack 0
   518  000026                     ___fttol@lval:
   519                           	opt stack 0
   520                           
   521                           ; 4 bytes @ 0x25
   522  000026                     	ds	3
   523  000029                     ___ftdiv@exp:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x28
   527  000029                     	ds	1
   528  00002A                     ___ftdiv@sign:
   529                           	opt stack 0
   530  00002A                     ___fttol@exp1:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x29
   534  00002A                     	ds	1
   535  00002B                     ?___awmod:
   536                           	opt stack 0
   537  00002B                     ___awmod@dividend:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x2A
   541  00002B                     	ds	2
   542  00002D                     ___awmod@divisor:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x2C
   546  00002D                     	ds	2
   547  00002F                     ___awmod@counter:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x2E
   551  00002F                     	ds	1
   552  000030                     ___awmod@sign:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x2F
   556  000030                     	ds	1
   557  000031                     ?___awdiv:
   558                           	opt stack 0
   559  000031                     ___awdiv@dividend:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x30
   563  000031                     	ds	2
   564  000033                     ___awdiv@divisor:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x32
   568  000033                     	ds	2
   569  000035                     ___awdiv@counter:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x34
   573  000035                     	ds	1
   574  000036                     ___awdiv@sign:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x35
   578  000036                     	ds	1
   579  000037                     ___awdiv@quotient:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x36
   583  000037                     	ds	2
   584  000039                     ?___wmul:
   585                           	opt stack 0
   586  000039                     ___wmul@multiplier:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x38
   590  000039                     	ds	2
   591  00003B                     ___wmul@multiplicand:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x3A
   595  00003B                     	ds	2
   596  00003D                     ___wmul@product:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x3C
   600  00003D                     	ds	2
   601  00003F                     ?_fround:
   602                           	opt stack 0
   603  00003F                     ?_scale:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x3E
   607  00003F                     	ds	3
   608  000042                     _fround$1317:
   609                           	opt stack 0
   610  000042                     _scale$1318:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x41
   614  000042                     	ds	3
   615  000045                     scale@scl:
   616                           	opt stack 0
   617  000045                     _fround$1316:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x44
   621  000045                     	ds	3
   622  000048                     fround@prec:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x47
   626  000048                     	ds	1
   627  000049                     ?___ftadd:
   628                           	opt stack 0
   629  000049                     ___ftadd@f1:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x48
   633  000049                     	ds	3
   634  00004C                     ___ftadd@f2:
   635                           	opt stack 0
   636                           
   637                           ; 3 bytes @ 0x4B
   638  00004C                     	ds	3
   639  00004F                     ??___ftadd:
   640                           
   641                           ; 0 bytes @ 0x4E
   642  00004F                     	ds	3
   643  000052                     ___ftadd@sign:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x51
   647  000052                     	ds	1
   648  000053                     ___ftadd@exp2:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x52
   652  000053                     	ds	1
   653  000054                     ___ftadd@exp1:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x53
   657  000054                     	ds	1
   658  000055                     ?___ftsub:
   659                           	opt stack 0
   660  000055                     ___ftsub@f1:
   661                           	opt stack 0
   662                           
   663                           ; 3 bytes @ 0x54
   664  000055                     	ds	3
   665  000058                     ___ftsub@f2:
   666                           	opt stack 0
   667                           
   668                           ; 3 bytes @ 0x57
   669  000058                     	ds	3
   670  00005B                     ?_printf:
   671                           	opt stack 0
   672  00005B                     printf@f:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x5A
   676  00005B                     	ds	5
   677  000060                     ??_printf:
   678                           
   679                           ; 0 bytes @ 0x5F
   680  000060                     	ds	6
   681  000066                     _printf$1319:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x65
   685  000066                     	ds	3
   686  000069                     printf@ap:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x68
   690  000069                     	ds	2
   691  00006B                     printf@flag:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x6A
   695  00006B                     	ds	2
   696  00006D                     printf@prec:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x6C
   700  00006D                     	ds	2
   701  00006F                     printf@val:
   702                           	opt stack 0
   703                           
   704                           ; 4 bytes @ 0x6E
   705  00006F                     	ds	4
   706  000073                     printf@exp:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x72
   710  000073                     	ds	2
   711  000075                     printf@tmpval:
   712                           	opt stack 0
   713                           
   714                           ; 4 bytes @ 0x74
   715  000075                     	ds	4
   716  000079                     printf@fval:
   717                           	opt stack 0
   718                           
   719                           ; 3 bytes @ 0x78
   720  000079                     	ds	3
   721  00007C                     printf@c:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x7B
   725  00007C                     	ds	1
   726  00007D                     tblptru	equ	0xFF8
   727                           tblptrh	equ	0xFF7
   728                           tblptrl	equ	0xFF6
   729                           tablat	equ	0xFF5
   730                           postinc0	equ	0xFEE
   731                           postdec1	equ	0xFE5
   732                           fsr1l	equ	0xFE1
   733                           
   734                           ; 0 bytes @ 0x7C
   735 ;;
   736 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   737 ;;
   738 ;; *************** function _main *****************
   739 ;; Defined at:
   740 ;;		line 60 in file "Lab5.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;  VOLT            3    4[BANK0 ] float 
   745 ;;  STEP            2    0[BANK0 ] int 
   746 ;;  L               1    3[BANK0 ] unsigned char 
   747 ;;  U               1    2[BANK0 ] unsigned char 
   748 ;; Return value:  Size  Location     Type
   749 ;;		None               void
   750 ;; Registers used:
   751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   758 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;Total ram usage:        7 bytes
   762 ;; Hardware stack levels required when called:    4
   763 ;; This function calls:
   764 ;;		_DISPLAY_LOWER_7SEG
   765 ;;		_DISPLAY_UPPER_7SEG
   766 ;;		_Select_ADC_Channel
   767 ;;		_WAIT_ONE_SEC
   768 ;;		___awmod
   769 ;;		___awtoft
   770 ;;		___ftdiv
   771 ;;		___ftmul
   772 ;;		___fttol
   773 ;;		_get_full_ADC
   774 ;;		_init_ADC
   775 ;;		_init_UART
   776 ;;		_printf
   777 ;; This function is called by:
   778 ;;		Startup code after reset
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text0
   783  001E94                     __ptext0:
   784                           	opt stack 0
   785  001E94                     _main:
   786                           	opt stack 27
   787                           
   788                           ;Lab5.c: 62: init_ADC();
   789                           
   790                           ;incstack = 0
   791  001E94  EC58  F015         	call	_init_ADC	;wreg free
   792                           
   793                           ;Lab5.c: 63: init_UART();
   794  001E98  EC41  F015         	call	_init_UART	;wreg free
   795                           
   796                           ;Lab5.c: 65: TRISA = 0x0F;
   797  001E9C  0E0F               	movlw	15
   798  001E9E  6E92               	movwf	3986,c	;volatile
   799                           
   800                           ;Lab5.c: 66: TRISB = 0x00;
   801  001EA0  0E00               	movlw	0
   802  001EA2  6E93               	movwf	3987,c	;volatile
   803                           
   804                           ;Lab5.c: 67: TRISC = 0x00;
   805  001EA4  0E00               	movlw	0
   806  001EA6  6E94               	movwf	3988,c	;volatile
   807                           
   808                           ;Lab5.c: 68: TRISD = 0x00;
   809  001EA8  0E00               	movlw	0
   810  001EAA  6E95               	movwf	3989,c	;volatile
   811                           
   812                           ;Lab5.c: 69: TRISE = 0x00;
   813  001EAC  0E00               	movlw	0
   814  001EAE  6E96               	movwf	3990,c	;volatile
   815                           
   816                           ;Lab5.c: 71: PORTB = 0x00;
   817  001EB0  0E00               	movlw	0
   818  001EB2  6E81               	movwf	3969,c	;volatile
   819                           
   820                           ;Lab5.c: 73: PORTC = 0xFF;
   821  001EB4  6882               	setf	3970,c	;volatile
   822                           
   823                           ;Lab5.c: 74: PORTD = 0xFF;
   824  001EB6  6883               	setf	3971,c	;volatile
   825                           
   826                           ;Lab5.c: 75: PORTE = 0xFF;
   827  001EB8  6884               	setf	3972,c	;volatile
   828  001EBA  D000               	goto	l2604
   829  001EBC                     l2604:
   830                           
   831                           ;Lab5.c: 85: {
   832                           ;Lab5.c: 86: Select_ADC_Channel(0);
   833  001EBC  0E00               	movlw	0
   834  001EBE  EC52  F015         	call	_Select_ADC_Channel
   835                           
   836                           ;Lab5.c: 87: int STEP = get_full_ADC();
   837  001EC2  ECF2  F014         	call	_get_full_ADC	;wreg free
   838  001EC6  C001  F094         	movff	?_get_full_ADC,main@STEP
   839  001ECA  C002  F095         	movff	?_get_full_ADC+1,main@STEP+1
   840                           
   841                           ;Lab5.c: 88: float VOLT = (STEP * 4.0)/1000;
   842  001ECE  0E00               	movlw	0
   843  001ED0  6E10               	movwf	___ftmul@f2,c
   844  001ED2  0E80               	movlw	128
   845  001ED4  6E11               	movwf	___ftmul@f2+1,c
   846  001ED6  0E40               	movlw	64
   847  001ED8  6E12               	movwf	___ftmul@f2+2,c
   848  001EDA  C094  F009         	movff	main@STEP,___awtoft@c
   849  001EDE  C095  F00A         	movff	main@STEP+1,___awtoft@c+1
   850  001EE2  ECAB  F014         	call	___awtoft	;wreg free
   851  001EE6  C009  F00D         	movff	?___awtoft,___ftmul@f1
   852  001EEA  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
   853  001EEE  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
   854  001EF2  ECE4  F010         	call	___ftmul	;wreg free
   855  001EF6  C00D  F01C         	movff	?___ftmul,___ftdiv@f1
   856  001EFA  C00E  F01D         	movff	?___ftmul+1,___ftdiv@f1+1
   857  001EFE  C00F  F01E         	movff	?___ftmul+2,___ftdiv@f1+2
   858  001F02  0E00               	movlw	0
   859  001F04  6E1F               	movwf	___ftdiv@f2,c
   860  001F06  0E7A               	movlw	122
   861  001F08  6E20               	movwf	___ftdiv@f2+1,c
   862  001F0A  0E44               	movlw	68
   863  001F0C  6E21               	movwf	___ftdiv@f2+2,c
   864  001F0E  ECD3  F011         	call	___ftdiv	;wreg free
   865  001F12  C01C  F098         	movff	?___ftdiv,main@VOLT
   866  001F16  C01D  F099         	movff	?___ftdiv+1,main@VOLT+1
   867  001F1A  C01E  F09A         	movff	?___ftdiv+2,main@VOLT+2
   868                           
   869                           ;Lab5.c: 89: U = (int) VOLT;
   870  001F1E  C098  F01C         	movff	main@VOLT,___fttol@f1
   871  001F22  C099  F01D         	movff	main@VOLT+1,___fttol@f1+1
   872  001F26  C09A  F01E         	movff	main@VOLT+2,___fttol@f1+2
   873  001F2A  EC60  F011         	call	___fttol	;wreg free
   874  001F2E  501C               	movf	?___fttol,w,c
   875  001F30  0100               	movlb	0	; () banked
   876  001F32  6F96               	movwf	main@U& (0+255),b
   877                           
   878                           ; BSR set to: 0
   879                           ;Lab5.c: 90: L = ((int)((VOLT) * 10) % 10);
   880  001F34  0E00               	movlw	0
   881  001F36  6E10               	movwf	___ftmul@f2,c
   882  001F38  0E20               	movlw	32
   883  001F3A  6E11               	movwf	___ftmul@f2+1,c
   884  001F3C  0E41               	movlw	65
   885  001F3E  6E12               	movwf	___ftmul@f2+2,c
   886  001F40  C098  F00D         	movff	main@VOLT,___ftmul@f1
   887  001F44  C099  F00E         	movff	main@VOLT+1,___ftmul@f1+1
   888  001F48  C09A  F00F         	movff	main@VOLT+2,___ftmul@f1+2
   889  001F4C  ECE4  F010         	call	___ftmul	;wreg free
   890  001F50  C00D  F01C         	movff	?___ftmul,___fttol@f1
   891  001F54  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
   892  001F58  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
   893  001F5C  EC60  F011         	call	___fttol	;wreg free
   894  001F60  C01C  F02B         	movff	?___fttol,___awmod@dividend
   895  001F64  C01D  F02C         	movff	?___fttol+1,___awmod@dividend+1
   896  001F68  0E00               	movlw	0
   897  001F6A  6E2E               	movwf	___awmod@divisor+1,c
   898  001F6C  0E0A               	movlw	10
   899  001F6E  6E2D               	movwf	___awmod@divisor,c
   900  001F70  EC83  F013         	call	___awmod	;wreg free
   901  001F74  502B               	movf	?___awmod,w,c
   902  001F76  0100               	movlb	0	; () banked
   903  001F78  6F97               	movwf	main@L& (0+255),b
   904                           
   905                           ; BSR set to: 0
   906                           ;Lab5.c: 93: printf("VOLT = %f\r\n\n\n", VOLT );
   907  001F7A  0E77               	movlw	low STR_1
   908  001F7C  6E5B               	movwf	printf@f,c
   909  001F7E  0E10               	movlw	high STR_1
   910  001F80  6E5C               	movwf	printf@f+1,c
   911  001F82  C098  F05D         	movff	main@VOLT,?_printf+2
   912  001F86  C099  F05E         	movff	main@VOLT+1,?_printf+3
   913  001F8A  C09A  F05F         	movff	main@VOLT+2,?_printf+4
   914  001F8E  EC43  F008         	call	_printf	;wreg free
   915                           
   916                           ;Lab5.c: 95: DISPLAY_UPPER_7SEG(U);
   917  001F92  0100               	movlb	0	; () banked
   918  001F94  5196               	movf	main@U& (0+255),w,b
   919  001F96  EC64  F014         	call	_DISPLAY_UPPER_7SEG
   920                           
   921                           ;Lab5.c: 97: DISPLAY_LOWER_7SEG(L);
   922  001F9A  0100               	movlb	0	; () banked
   923  001F9C  5197               	movf	main@L& (0+255),w,b
   924  001F9E  EC27  F015         	call	_DISPLAY_LOWER_7SEG
   925                           
   926                           ;Lab5.c: 99: PORTDbits.RD7 = 0;
   927  001FA2  9E83               	bcf	3971,7,c	;volatile
   928                           
   929                           ;Lab5.c: 100: WAIT_ONE_SEC();
   930  001FA4  EC17  F015         	call	_WAIT_ONE_SEC	;wreg free
   931  001FA8  D789               	goto	l2604
   932  001FAA  EF00  F000         	goto	start
   933  001FAE                     __end_of_main:
   934                           	opt stack 0
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           postdec1	equ	0xFE5
   941                           fsr1l	equ	0xFE1
   942                           
   943 ;; *************** function _printf *****************
   944 ;; Defined at:
   945 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  f               2   90[COMRAM] PTR const unsigned char 
   948 ;;		 -> STR_1(14), 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  tmpval          4  116[COMRAM] struct .
   951 ;;  val             4  110[COMRAM] unsigned long 
   952 ;;  fval            3  120[COMRAM] unsigned long 
   953 ;;  cp              3    0        PTR const unsigned char 
   954 ;;  exp             2  114[COMRAM] int 
   955 ;;  prec            2  108[COMRAM] int 
   956 ;;  flag            2  106[COMRAM] unsigned short 
   957 ;;  ap              2  104[COMRAM] PTR void [1]
   958 ;;		 -> ?_printf(2), 
   959 ;;  len             2    0        unsigned int 
   960 ;;  width           2    0        int 
   961 ;;  c               1  123[COMRAM] char 
   962 ;;  d               1    0        unsigned char 
   963 ;; Return value:  Size  Location     Type
   964 ;;                  2   90[COMRAM] int 
   965 ;; Registers used:
   966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   972 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   973 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   974 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   975 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   976 ;;Total ram usage:       34 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    3
   979 ;; This function calls:
   980 ;;		___awdiv
   981 ;;		___ftadd
   982 ;;		___ftge
   983 ;;		___ftmul
   984 ;;		___ftneg
   985 ;;		___ftsub
   986 ;;		___fttol
   987 ;;		___lldiv
   988 ;;		___llmod
   989 ;;		___lltoft
   990 ;;		___wmul
   991 ;;		__div_to_l_
   992 ;;		__tdiv_to_l_
   993 ;;		_fround
   994 ;;		_putch
   995 ;;		_scale
   996 ;; This function is called by:
   997 ;;		_main
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text1
  1002  001086                     __ptext1:
  1003                           	opt stack 0
  1004  001086                     _printf:
  1005                           	opt stack 27
  1006                           
  1007                           ;doprnt.c: 466: va_list ap;
  1008                           ;doprnt.c: 499: signed char c;
  1009                           ;doprnt.c: 501: int width;
  1010                           ;doprnt.c: 504: int prec;
  1011                           ;doprnt.c: 508: unsigned short flag;
  1012                           ;doprnt.c: 515: char d;
  1013                           ;doprnt.c: 516: double fval;
  1014                           ;doprnt.c: 517: int exp;
  1015                           ;doprnt.c: 523: union {
  1016                           ;doprnt.c: 524: unsigned long vd;
  1017                           ;doprnt.c: 525: double integ;
  1018                           ;doprnt.c: 526: } tmpval;
  1019                           ;doprnt.c: 528: unsigned long val;
  1020                           ;doprnt.c: 529: unsigned len;
  1021                           ;doprnt.c: 530: const char * cp;
  1022                           ;doprnt.c: 533: *ap = __va_start();
  1023                           
  1024                           ;incstack = 0
  1025  001086  0E5D               	movlw	low (?_printf+2)
  1026  001088  6E69               	movwf	printf@ap,c
  1027  00108A  0E00               	movlw	high (?_printf+2)
  1028  00108C  6E6A               	movwf	printf@ap+1,c
  1029                           
  1030                           ;doprnt.c: 536: while(c = *f++) {
  1031  00108E  D2FF               	goto	l2502
  1032  001090                     l2354:
  1033                           
  1034                           ;doprnt.c: 538: if(c != '%')
  1035  001090  0E25               	movlw	37
  1036  001092  187C               	xorwf	printf@c,w,c
  1037  001094  B4D8               	btfsc	status,2,c
  1038  001096  D004               	goto	l2358
  1039                           
  1040                           ;doprnt.c: 540: {
  1041                           ;doprnt.c: 541: (putch(c) );
  1042  001098  507C               	movf	printf@c,w,c
  1043  00109A  EC4B  F015         	call	_putch
  1044                           
  1045                           ;doprnt.c: 542: continue;
  1046  00109E  D2F7               	goto	l2502
  1047  0010A0                     l2358:
  1048                           
  1049                           ;doprnt.c: 543: }
  1050                           ;doprnt.c: 548: flag = 0;
  1051  0010A0  0E00               	movlw	0
  1052  0010A2  6E6C               	movwf	printf@flag+1,c
  1053  0010A4  0E00               	movlw	0
  1054  0010A6  6E6B               	movwf	printf@flag,c
  1055                           
  1056                           ;doprnt.c: 635: switch(c = *f++) {
  1057  0010A8  D005               	goto	l2364
  1058                           
  1059                           ;doprnt.c: 638: goto alldone;
  1060                           
  1061                           ;doprnt.c: 637: case 0:
  1062  0010AA  D2FF               	goto	l175
  1063  0010AC                     l2360:
  1064                           
  1065                           ;doprnt.c: 663: flag |= 0x400;
  1066  0010AC  846C               	bsf	printf@flag+1,2,c
  1067                           
  1068                           ;doprnt.c: 664: break;
  1069  0010AE  D013               	goto	l2366
  1070                           
  1071                           ;doprnt.c: 813: continue;
  1072                           
  1073                           ;doprnt.c: 802: default:
  1074  0010B0  D2EE               	goto	l2502
  1075                           
  1076                           ;doprnt.c: 822: }
  1077  0010B2  D011               	goto	l2366
  1078  0010B4                     l2364:
  1079  0010B4  C05B  FFF6         	movff	printf@f,tblptrl
  1080  0010B8  C05C  FFF7         	movff	printf@f+1,tblptrh
  1081  0010BC  4A5B               	infsnz	printf@f,f,c
  1082  0010BE  2A5C               	incf	printf@f+1,f,c
  1083  0010C0                     	if	0	;tblptru may be non-zero
  1084  0010C0                     	endif
  1085  0010C0                     	if	0	;tblptru may be non-zero
  1086  0010C0                     	endif
  1087  0010C0  0008               	tblrd		*
  1088  0010C2  CFF5 F07C          	movff	tablat,printf@c
  1089  0010C6  507C               	movf	printf@c,w,c
  1090                           
  1091                           ; Switch size 1, requested type "space"
  1092                           ; Number of cases is 2, Range of values is 0 to 102
  1093                           ; switch strategies available:
  1094                           ; Name         Instructions Cycles
  1095                           ; simple_byte            7     4 (average)
  1096                           ;	Chosen strategy is simple_byte
  1097  0010C8  0A00               	xorlw	0	; case 0
  1098  0010CA  B4D8               	btfsc	status,2,c
  1099  0010CC  D2EE               	goto	l175
  1100  0010CE  0A66               	xorlw	102	; case 102
  1101  0010D0  B4D8               	btfsc	status,2,c
  1102  0010D2  D7EC               	goto	l2360
  1103  0010D4  D2DC               	goto	l2502
  1104  0010D6                     l2366:
  1105                           
  1106                           ;doprnt.c: 825: if(flag & (0x700)) {
  1107  0010D6  0E07               	movlw	7
  1108  0010D8  146C               	andwf	printf@flag+1,w,c
  1109  0010DA  B4D8               	btfsc	status,2,c
  1110  0010DC  D2CA               	goto	l2498
  1111                           
  1112                           ;doprnt.c: 829: prec = 6;
  1113  0010DE  0E00               	movlw	0
  1114  0010E0  6E6E               	movwf	printf@prec+1,c
  1115  0010E2  0E06               	movlw	6
  1116  0010E4  6E6D               	movwf	printf@prec,c
  1117                           
  1118                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1119  0010E6  C069  FFD9         	movff	printf@ap,fsr2l
  1120  0010EA  C06A  FFDA         	movff	printf@ap+1,fsr2h
  1121  0010EE  CFDE F079          	movff	postinc2,printf@fval
  1122  0010F2  CFDE F07A          	movff	postinc2,printf@fval+1
  1123  0010F6  CFDD F07B          	movff	postdec2,printf@fval+2
  1124  0010FA  0E03               	movlw	3
  1125  0010FC  2669               	addwf	printf@ap,f,c
  1126  0010FE  0E00               	movlw	0
  1127  001100  226A               	addwfc	printf@ap+1,f,c
  1128                           
  1129                           ;doprnt.c: 831: if(fval < 0.0) {
  1130  001102  AE7B               	btfss	printf@fval+2,7,c
  1131  001104  D011               	goto	l2380
  1132                           
  1133                           ;doprnt.c: 832: fval = -fval;
  1134  001106  C079  F001         	movff	printf@fval,___ftneg@f1
  1135  00110A  C07A  F002         	movff	printf@fval+1,___ftneg@f1+1
  1136  00110E  C07B  F003         	movff	printf@fval+2,___ftneg@f1+2
  1137  001112  EC05  F015         	call	___ftneg	;wreg free
  1138  001116  C001  F079         	movff	?___ftneg,printf@fval
  1139  00111A  C002  F07A         	movff	?___ftneg+1,printf@fval+1
  1140  00111E  C003  F07B         	movff	?___ftneg+2,printf@fval+2
  1141                           
  1142                           ;doprnt.c: 833: flag |= 0x03;
  1143  001122  0E03               	movlw	3
  1144  001124  126B               	iorwf	printf@flag,f,c
  1145  001126  D000               	goto	l2380
  1146  001128                     l2380:
  1147                           
  1148                           ;doprnt.c: 834: }
  1149                           ;doprnt.c: 835: exp = 0;
  1150  001128  0E00               	movlw	0
  1151  00112A  6E74               	movwf	printf@exp+1,c
  1152  00112C  0E00               	movlw	0
  1153  00112E  6E73               	movwf	printf@exp,c
  1154                           
  1155                           ;doprnt.c: 836: if( fval!=0) {
  1156  001130  5079               	movf	printf@fval,w,c
  1157  001132  107A               	iorwf	printf@fval+1,w,c
  1158  001134  107B               	iorwf	printf@fval+2,w,c
  1159  001136  B4D8               	btfsc	status,2,c
  1160  001138  D085               	goto	l2408
  1161                           
  1162                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1163  00113A  0E82               	movlw	130
  1164  00113C  6E60               	movwf	??_printf& (0+255),c
  1165  00113E  0EFF               	movlw	255
  1166  001140  6E61               	movwf	(??_printf+1)& (0+255),c
  1167  001142  C079  F062         	movff	printf@fval,??_printf+2
  1168  001146  C07A  F063         	movff	printf@fval+1,??_printf+3
  1169  00114A  C07B  F064         	movff	printf@fval+2,??_printf+4
  1170  00114E  C07C  F065         	movff	printf@fval+3,??_printf+5
  1171  001152  0E10               	movlw	16
  1172  001154  D005               	goto	u2450
  1173  001156                     u2455:
  1174  001156  90D8               	bcf	status,0,c
  1175  001158  3265               	rrcf	??_printf+5,f,c
  1176  00115A  3264               	rrcf	??_printf+4,f,c
  1177  00115C  3263               	rrcf	??_printf+3,f,c
  1178  00115E  3262               	rrcf	??_printf+2,f,c
  1179  001160                     u2450:
  1180  001160  2EE8               	decfsz	wreg,f,c
  1181  001162  D7F9               	goto	u2455
  1182  001164  5062               	movf	??_printf+2,w,c
  1183  001166  2460               	addwf	??_printf,w,c
  1184  001168  6E73               	movwf	printf@exp,c
  1185  00116A  0E00               	movlw	0
  1186  00116C  2061               	addwfc	??_printf+1,w,c
  1187  00116E  6E74               	movwf	printf@exp+1,c
  1188                           
  1189                           ;doprnt.c: 838: exp--;
  1190  001170  0673               	decf	printf@exp,f,c
  1191  001172  A0D8               	btfss	status,0,c
  1192  001174  0674               	decf	printf@exp+1,f,c
  1193                           
  1194                           ;doprnt.c: 839: exp *= 3;
  1195  001176  C073  F039         	movff	printf@exp,___wmul@multiplier
  1196  00117A  C074  F03A         	movff	printf@exp+1,___wmul@multiplier+1
  1197  00117E  0E00               	movlw	0
  1198  001180  6E3C               	movwf	___wmul@multiplicand+1,c
  1199  001182  0E03               	movlw	3
  1200  001184  6E3B               	movwf	___wmul@multiplicand,c
  1201  001186  ECDE  F014         	call	___wmul	;wreg free
  1202  00118A  C039  F073         	movff	?___wmul,printf@exp
  1203  00118E  C03A  F074         	movff	?___wmul+1,printf@exp+1
  1204                           
  1205                           ;doprnt.c: 840: exp /= 10;
  1206  001192  C073  F031         	movff	printf@exp,___awdiv@dividend
  1207  001196  C074  F032         	movff	printf@exp+1,___awdiv@dividend+1
  1208  00119A  0E00               	movlw	0
  1209  00119C  6E34               	movwf	___awdiv@divisor+1,c
  1210  00119E  0E0A               	movlw	10
  1211  0011A0  6E33               	movwf	___awdiv@divisor,c
  1212  0011A2  ECA7  F012         	call	___awdiv	;wreg free
  1213  0011A6  C031  F073         	movff	?___awdiv,printf@exp
  1214  0011AA  C032  F074         	movff	?___awdiv+1,printf@exp+1
  1215                           
  1216                           ;doprnt.c: 841: if(exp < 0)
  1217  0011AE  AE74               	btfss	printf@exp+1,7,c
  1218  0011B0  D004               	goto	l2396
  1219                           
  1220                           ;doprnt.c: 842: exp--;
  1221  0011B2  0673               	decf	printf@exp,f,c
  1222  0011B4  A0D8               	btfss	status,0,c
  1223  0011B6  0674               	decf	printf@exp+1,f,c
  1224  0011B8  D000               	goto	l2396
  1225  0011BA                     l2396:
  1226                           
  1227                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1228  0011BA  5073               	movf	printf@exp,w,c
  1229  0011BC  0800               	sublw	0
  1230  0011BE  EC56  F00B         	call	_scale
  1231  0011C2  C03F  F075         	movff	?_scale,printf@tmpval
  1232  0011C6  C040  F076         	movff	?_scale+1,printf@tmpval+1
  1233  0011CA  C041  F077         	movff	?_scale+2,printf@tmpval+2
  1234                           
  1235                           ;doprnt.c: 847: tmpval.integ *= fval;
  1236  0011CE  C075  F00D         	movff	printf@tmpval,___ftmul@f1
  1237  0011D2  C076  F00E         	movff	printf@tmpval+1,___ftmul@f1+1
  1238  0011D6  C077  F00F         	movff	printf@tmpval+2,___ftmul@f1+2
  1239  0011DA  C079  F010         	movff	printf@fval,___ftmul@f2
  1240  0011DE  C07A  F011         	movff	printf@fval+1,___ftmul@f2+1
  1241  0011E2  C07B  F012         	movff	printf@fval+2,___ftmul@f2+2
  1242  0011E6  ECE4  F010         	call	___ftmul	;wreg free
  1243  0011EA  C00D  F075         	movff	?___ftmul,printf@tmpval
  1244  0011EE  C00E  F076         	movff	?___ftmul+1,printf@tmpval+1
  1245  0011F2  C00F  F077         	movff	?___ftmul+2,printf@tmpval+2
  1246                           
  1247                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1248  0011F6  C075  F001         	movff	printf@tmpval,___ftge@ff1
  1249  0011FA  C076  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1250  0011FE  C077  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1251  001202  0E00               	movlw	0
  1252  001204  6E04               	movwf	___ftge@ff2,c
  1253  001206  0E80               	movlw	128
  1254  001208  6E05               	movwf	___ftge@ff2+1,c
  1255  00120A  0E3F               	movlw	63
  1256  00120C  6E06               	movwf	___ftge@ff2+2,c
  1257  00120E  ECF2  F012         	call	___ftge	;wreg free
  1258  001212  B0D8               	btfsc	status,0,c
  1259  001214  D004               	goto	l2404
  1260                           
  1261                           ;doprnt.c: 849: exp--;
  1262  001216  0673               	decf	printf@exp,f,c
  1263  001218  A0D8               	btfss	status,0,c
  1264  00121A  0674               	decf	printf@exp+1,f,c
  1265  00121C  D013               	goto	l2408
  1266  00121E                     l2404:
  1267                           
  1268                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1269  00121E  C075  F001         	movff	printf@tmpval,___ftge@ff1
  1270  001222  C076  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1271  001226  C077  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1272  00122A  0E00               	movlw	0
  1273  00122C  6E04               	movwf	___ftge@ff2,c
  1274  00122E  0E20               	movlw	32
  1275  001230  6E05               	movwf	___ftge@ff2+1,c
  1276  001232  0E41               	movlw	65
  1277  001234  6E06               	movwf	___ftge@ff2+2,c
  1278  001236  ECF2  F012         	call	___ftge	;wreg free
  1279  00123A  A0D8               	btfss	status,0,c
  1280  00123C  D003               	goto	l2408
  1281                           
  1282                           ;doprnt.c: 851: exp++;
  1283  00123E  4A73               	infsnz	printf@exp,f,c
  1284  001240  2A74               	incf	printf@exp+1,f,c
  1285  001242  D000               	goto	l2408
  1286  001244                     l2408:
  1287                           
  1288                           ;doprnt.c: 852: }
  1289                           ;doprnt.c: 1112: if(prec <= 12)
  1290  001244  BE6E               	btfsc	printf@prec+1,7,c
  1291  001246  D006               	goto	l2410
  1292  001248  506E               	movf	printf@prec+1,w,c
  1293  00124A  E11C               	bnz	l2412
  1294  00124C  0E0D               	movlw	13
  1295  00124E  5C6D               	subwf	printf@prec,w,c
  1296  001250  B0D8               	btfsc	status,0,c
  1297  001252  D018               	goto	l2412
  1298  001254                     l2410:
  1299                           
  1300                           ;doprnt.c: 1113: fval += fround(prec);
  1301  001254  C079  F049         	movff	printf@fval,___ftadd@f1
  1302  001258  C07A  F04A         	movff	printf@fval+1,___ftadd@f1+1
  1303  00125C  C07B  F04B         	movff	printf@fval+2,___ftadd@f1+2
  1304  001260  506D               	movf	printf@prec,w,c
  1305  001262  EC46  F00D         	call	_fround
  1306  001266  C03F  F04C         	movff	?_fround,___ftadd@f2
  1307  00126A  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  1308  00126E  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  1309  001272  EC68  F00E         	call	___ftadd	;wreg free
  1310  001276  C049  F079         	movff	?___ftadd,printf@fval
  1311  00127A  C04A  F07A         	movff	?___ftadd+1,printf@fval+1
  1312  00127E  C04B  F07B         	movff	?___ftadd+2,printf@fval+2
  1313  001282  D000               	goto	l2412
  1314  001284                     l2412:
  1315                           
  1316                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1317  001284  BE74               	btfsc	printf@exp+1,7,c
  1318  001286  D006               	goto	l2414
  1319  001288  5074               	movf	printf@exp+1,w,c
  1320  00128A  E120               	bnz	l2420
  1321  00128C  0E0A               	movlw	10
  1322  00128E  5C73               	subwf	printf@exp,w,c
  1323  001290  B0D8               	btfsc	status,0,c
  1324  001292  D01C               	goto	l2420
  1325  001294                     l2414:
  1326  001294  5079               	movf	printf@fval,w,c
  1327  001296  107A               	iorwf	printf@fval+1,w,c
  1328  001298  107B               	iorwf	printf@fval+2,w,c
  1329  00129A  B4D8               	btfsc	status,2,c
  1330  00129C  D06D               	goto	l2434
  1331  00129E  C079  F01C         	movff	printf@fval,___fttol@f1
  1332  0012A2  C07A  F01D         	movff	printf@fval+1,___fttol@f1+1
  1333  0012A6  C07B  F01E         	movff	printf@fval+2,___fttol@f1+2
  1334  0012AA  EC60  F011         	call	___fttol	;wreg free
  1335  0012AE  501C               	movf	?___fttol,w,c
  1336  0012B0  101D               	iorwf	?___fttol+1,w,c
  1337  0012B2  101E               	iorwf	?___fttol+2,w,c
  1338  0012B4  101F               	iorwf	?___fttol+3,w,c
  1339  0012B6  B4D8               	btfsc	status,2,c
  1340  0012B8  BE74               	btfsc	printf@exp+1,7,c
  1341  0012BA  D05E               	goto	l2434
  1342  0012BC  5074               	movf	printf@exp+1,w,c
  1343  0012BE  E106               	bnz	l2420
  1344  0012C0  0E02               	movlw	2
  1345  0012C2  5C73               	subwf	printf@exp,w,c
  1346  0012C4  B0D8               	btfsc	status,0,c
  1347  0012C6  D002               	goto	l2420
  1348  0012C8  D057               	goto	l2434
  1349  0012CA  D000               	goto	l2420
  1350  0012CC                     l2420:
  1351                           
  1352                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1353  0012CC  C075  F001         	movff	printf@tmpval,___ftge@ff1
  1354  0012D0  C076  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1355  0012D4  C077  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1356  0012D8  0E70               	movlw	112
  1357  0012DA  6E04               	movwf	___ftge@ff2,c
  1358  0012DC  0E89               	movlw	137
  1359  0012DE  6E05               	movwf	___ftge@ff2+1,c
  1360  0012E0  0E40               	movlw	64
  1361  0012E2  6E06               	movwf	___ftge@ff2+2,c
  1362  0012E4  ECF2  F012         	call	___ftge	;wreg free
  1363  0012E8  B0D8               	btfsc	status,0,c
  1364  0012EA  D002               	goto	l2424
  1365                           
  1366                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1367  0012EC  0EF7               	movlw	247
  1368  0012EE  D001               	goto	L1
  1369  0012F0                     l2424:
  1370                           
  1371                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1372  0012F0  0EF8               	movlw	248
  1373  0012F2                     L1:
  1374  0012F2  2673               	addwf	printf@exp,f,c
  1375  0012F4  0EFF               	movlw	255
  1376  0012F6  2274               	addwfc	printf@exp+1,f,c
  1377  0012F8  D000               	goto	l2426
  1378  0012FA                     l2426:
  1379                           
  1380                           ;doprnt.c: 1124: }
  1381                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1382  0012FA  5073               	movf	printf@exp,w,c
  1383  0012FC  EC56  F00B         	call	_scale
  1384  001300  C03F  F075         	movff	?_scale,printf@tmpval
  1385  001304  C040  F076         	movff	?_scale+1,printf@tmpval+1
  1386  001308  C041  F077         	movff	?_scale+2,printf@tmpval+2
  1387                           
  1388                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1389  00130C  D017               	goto	l2430
  1390  00130E  C079  F001         	movff	printf@fval,__div_to_l_@f1
  1391  001312  C07A  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1392  001316  C07B  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1393  00131A  C075  F004         	movff	printf@tmpval,__div_to_l_@f2
  1394  00131E  C076  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1395  001322  C077  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1396  001326  EC5F  F010         	call	__div_to_l_	;wreg free
  1397  00132A  C001  F06F         	movff	?__div_to_l_,printf@val
  1398  00132E  C002  F070         	movff	?__div_to_l_+1,printf@val+1
  1399  001332  C003  F071         	movff	?__div_to_l_+2,printf@val+2
  1400  001336  C004  F072         	movff	?__div_to_l_+3,printf@val+3
  1401  00133A  D017               	goto	l2432
  1402  00133C                     l2430:
  1403  00133C  C079  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1404  001340  C07A  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1405  001344  C07B  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1406  001348  C075  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1407  00134C  C076  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1408  001350  C077  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1409  001354  ECD7  F00F         	call	__tdiv_to_l_	;wreg free
  1410  001358  C001  F06F         	movff	?__tdiv_to_l_,printf@val
  1411  00135C  C002  F070         	movff	?__tdiv_to_l_+1,printf@val+1
  1412  001360  C003  F071         	movff	?__tdiv_to_l_+2,printf@val+2
  1413  001364  C004  F072         	movff	?__tdiv_to_l_+3,printf@val+3
  1414  001368  D000               	goto	l2432
  1415  00136A                     l2432:
  1416                           
  1417                           ;doprnt.c: 1129: fval = 0.0;
  1418  00136A  0E00               	movlw	0
  1419  00136C  6E79               	movwf	printf@fval,c
  1420  00136E  0E00               	movlw	0
  1421  001370  6E7A               	movwf	printf@fval+1,c
  1422  001372  0E00               	movlw	0
  1423  001374  6E7B               	movwf	printf@fval+2,c
  1424                           
  1425                           ;doprnt.c: 1130: } else {
  1426  001376  D033               	goto	l2438
  1427  001378                     l2434:
  1428                           
  1429                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1430  001378  C079  F01C         	movff	printf@fval,___fttol@f1
  1431  00137C  C07A  F01D         	movff	printf@fval+1,___fttol@f1+1
  1432  001380  C07B  F01E         	movff	printf@fval+2,___fttol@f1+2
  1433  001384  EC60  F011         	call	___fttol	;wreg free
  1434  001388  C01C  F06F         	movff	?___fttol,printf@val
  1435  00138C  C01D  F070         	movff	?___fttol+1,printf@val+1
  1436  001390  C01E  F071         	movff	?___fttol+2,printf@val+2
  1437  001394  C01F  F072         	movff	?___fttol+3,printf@val+3
  1438                           
  1439                           ;doprnt.c: 1132: fval -= (double)val;
  1440  001398  C079  F055         	movff	printf@fval,___ftsub@f1
  1441  00139C  C07A  F056         	movff	printf@fval+1,___ftsub@f1+1
  1442  0013A0  C07B  F057         	movff	printf@fval+2,___ftsub@f1+2
  1443  0013A4  C06F  F009         	movff	printf@val,___lltoft@c
  1444  0013A8  C070  F00A         	movff	printf@val+1,___lltoft@c+1
  1445  0013AC  C071  F00B         	movff	printf@val+2,___lltoft@c+2
  1446  0013B0  C072  F00C         	movff	printf@val+3,___lltoft@c+3
  1447  0013B4  EC34  F014         	call	___lltoft	;wreg free
  1448  0013B8  C009  F058         	movff	?___lltoft,___ftsub@f2
  1449  0013BC  C00A  F059         	movff	?___lltoft+1,___ftsub@f2+1
  1450  0013C0  C00B  F05A         	movff	?___lltoft+2,___ftsub@f2+2
  1451  0013C4  EC89  F014         	call	___ftsub	;wreg free
  1452  0013C8  C055  F079         	movff	?___ftsub,printf@fval
  1453  0013CC  C056  F07A         	movff	?___ftsub+1,printf@fval+1
  1454  0013D0  C057  F07B         	movff	?___ftsub+2,printf@fval+2
  1455                           
  1456                           ;doprnt.c: 1133: exp = 0;
  1457  0013D4  0E00               	movlw	0
  1458  0013D6  6E74               	movwf	printf@exp+1,c
  1459  0013D8  0E00               	movlw	0
  1460  0013DA  6E73               	movwf	printf@exp,c
  1461  0013DC  D000               	goto	l2438
  1462  0013DE                     l2438:
  1463                           
  1464                           ;doprnt.c: 1134: }
  1465                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1466  0013DE  0E01               	movlw	1
  1467  0013E0  6E7C               	movwf	printf@c,c
  1468  0013E2                     l2440:
  1469  0013E2  0E0A               	movlw	10
  1470  0013E4  187C               	xorwf	printf@c,w,c
  1471  0013E6  B4D8               	btfsc	status,2,c
  1472  0013E8  D01C               	goto	l2452
  1473  0013EA  D001               	goto	l2444
  1474  0013EC  D01A               	goto	l2452
  1475  0013EE                     l2444:
  1476                           
  1477                           ;doprnt.c: 1137: if(val < dpowers[c])
  1478  0013EE  507C               	movf	printf@c,w,c
  1479  0013F0  0D04               	mullw	4
  1480  0013F2  0E01               	movlw	low _dpowers
  1481  0013F4  24F3               	addwf	prodl,w,c
  1482  0013F6  6EF6               	movwf	tblptrl,c
  1483  0013F8  0E10               	movlw	high _dpowers
  1484  0013FA  20F4               	addwfc	prodh,w,c
  1485  0013FC  6EF7               	movwf	tblptrh,c
  1486  0013FE                     	if	0	;There are less than 3 active tblptr bytes
  1487  0013FE                     	endif
  1488  0013FE  0009               	tblrd		*+
  1489  001400  50F5               	movf	tablat,w,c
  1490  001402  5C6F               	subwf	printf@val,w,c
  1491  001404  0009               	tblrd		*+
  1492  001406  50F5               	movf	tablat,w,c
  1493  001408  5870               	subwfb	printf@val+1,w,c
  1494  00140A  0009               	tblrd		*+
  1495  00140C  50F5               	movf	tablat,w,c
  1496  00140E  5871               	subwfb	printf@val+2,w,c
  1497  001410  0009               	tblrd		*+
  1498  001412  50F5               	movf	tablat,w,c
  1499  001414  5872               	subwfb	printf@val+3,w,c
  1500  001416  A0D8               	btfss	status,0,c
  1501  001418  D004               	goto	l2452
  1502  00141A  D001               	goto	l2448
  1503                           
  1504                           ;doprnt.c: 1138: break;
  1505  00141C  D002               	goto	l2452
  1506  00141E                     l2448:
  1507  00141E  2A7C               	incf	printf@c,f,c
  1508  001420  D7E0               	goto	l2440
  1509  001422                     l2452:
  1510                           
  1511                           ;doprnt.c: 1175: {
  1512                           ;doprnt.c: 1188: if(flag & 0x03)
  1513  001422  0E03               	movlw	3
  1514  001424  146B               	andwf	printf@flag,w,c
  1515  001426  6E60               	movwf	??_printf& (0+255),c
  1516  001428  0E00               	movlw	0
  1517  00142A  146C               	andwf	printf@flag+1,w,c
  1518  00142C  6E61               	movwf	(??_printf+1)& (0+255),c
  1519  00142E  5060               	movf	??_printf,w,c
  1520  001430  1061               	iorwf	??_printf+1,w,c
  1521  001432  B4D8               	btfsc	status,2,c
  1522  001434  D049               	goto	l2462
  1523                           
  1524                           ;doprnt.c: 1190: (putch('-') );
  1525  001436  0E2D               	movlw	45
  1526  001438  EC4B  F015         	call	_putch
  1527                           
  1528                           ;doprnt.c: 1195: }
  1529                           ;doprnt.c: 1196: while(c--) {
  1530  00143C  D045               	goto	l2462
  1531  00143E                     l2456:
  1532                           
  1533                           ;doprnt.c: 1200: {
  1534                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1535  00143E  C06F  F001         	movff	printf@val,___lldiv@dividend
  1536  001442  C070  F002         	movff	printf@val+1,___lldiv@dividend+1
  1537  001446  C071  F003         	movff	printf@val+2,___lldiv@dividend+2
  1538  00144A  C072  F004         	movff	printf@val+3,___lldiv@dividend+3
  1539  00144E  507C               	movf	printf@c,w,c
  1540  001450  0D04               	mullw	4
  1541  001452  0E01               	movlw	low _dpowers
  1542  001454  24F3               	addwf	prodl,w,c
  1543  001456  6EF6               	movwf	tblptrl,c
  1544  001458  0E10               	movlw	high _dpowers
  1545  00145A  20F4               	addwfc	prodh,w,c
  1546  00145C  6EF7               	movwf	tblptrh,c
  1547  00145E                     	if	0	;There are less than 3 active tblptr bytes
  1548  00145E                     	endif
  1549  00145E  0009               	tblrd		*+
  1550  001460  CFF5 F005          	movff	tablat,___lldiv@divisor
  1551  001464  0009               	tblrd		*+
  1552  001466  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1553  00146A  0009               	tblrd		*+
  1554  00146C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1555  001470  000A               	tblrd		*-
  1556  001472  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1557  001476  EC3D  F013         	call	___lldiv	;wreg free
  1558  00147A  C001  F075         	movff	?___lldiv,printf@tmpval
  1559  00147E  C002  F076         	movff	?___lldiv+1,printf@tmpval+1
  1560  001482  C003  F077         	movff	?___lldiv+2,printf@tmpval+2
  1561  001486  C004  F078         	movff	?___lldiv+3,printf@tmpval+3
  1562                           
  1563                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1564  00148A  C075  F001         	movff	printf@tmpval,___llmod@dividend
  1565  00148E  C076  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1566  001492  C077  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1567  001496  C078  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1568  00149A  0E0A               	movlw	10
  1569  00149C  6E05               	movwf	___llmod@divisor,c
  1570  00149E  0E00               	movlw	0
  1571  0014A0  6E06               	movwf	___llmod@divisor+1,c
  1572  0014A2  0E00               	movlw	0
  1573  0014A4  6E07               	movwf	___llmod@divisor+2,c
  1574  0014A6  0E00               	movlw	0
  1575  0014A8  6E08               	movwf	___llmod@divisor+3,c
  1576  0014AA  ECC4  F013         	call	___llmod	;wreg free
  1577  0014AE  C001  F075         	movff	?___llmod,printf@tmpval
  1578  0014B2  C002  F076         	movff	?___llmod+1,printf@tmpval+1
  1579  0014B6  C003  F077         	movff	?___llmod+2,printf@tmpval+2
  1580  0014BA  C004  F078         	movff	?___llmod+3,printf@tmpval+3
  1581                           
  1582                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1583  0014BE  5075               	movf	printf@tmpval,w,c
  1584  0014C0  0F30               	addlw	48
  1585  0014C2  EC4B  F015         	call	_putch
  1586  0014C6  D000               	goto	l2462
  1587  0014C8                     l2462:
  1588  0014C8  067C               	decf	printf@c,f,c
  1589  0014CA  287C               	incf	printf@c,w,c
  1590  0014CC  B4D8               	btfsc	status,2,c
  1591  0014CE  D009               	goto	l2468
  1592  0014D0  D7B6               	goto	l2456
  1593                           
  1594                           ;doprnt.c: 1204: }
  1595                           ;doprnt.c: 1206: }
  1596                           ;doprnt.c: 1207: while(exp > 0) {
  1597  0014D2  D007               	goto	l2468
  1598  0014D4                     l2464:
  1599                           
  1600                           ;doprnt.c: 1208: (putch('0') );
  1601  0014D4  0E30               	movlw	48
  1602  0014D6  EC4B  F015         	call	_putch
  1603                           
  1604                           ;doprnt.c: 1209: exp--;
  1605  0014DA  0673               	decf	printf@exp,f,c
  1606  0014DC  A0D8               	btfss	status,0,c
  1607  0014DE  0674               	decf	printf@exp+1,f,c
  1608  0014E0  D000               	goto	l2468
  1609  0014E2                     l2468:
  1610  0014E2  BE74               	btfsc	printf@exp+1,7,c
  1611  0014E4  D005               	goto	l2470
  1612  0014E6  5074               	movf	printf@exp+1,w,c
  1613  0014E8  E1F5               	bnz	l2464
  1614  0014EA  0473               	decf	printf@exp,w,c
  1615  0014EC  B0D8               	btfsc	status,0,c
  1616  0014EE  D7F2               	goto	l2464
  1617  0014F0                     l2470:
  1618                           
  1619                           ;doprnt.c: 1210: }
  1620                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1621  0014F0  BE6E               	btfsc	printf@prec+1,7,c
  1622  0014F2  D009               	goto	l164
  1623  0014F4  506E               	movf	printf@prec+1,w,c
  1624  0014F6  E104               	bnz	u2610
  1625  0014F8  0E09               	movlw	9
  1626  0014FA  5C6D               	subwf	printf@prec,w,c
  1627  0014FC  A0D8               	btfss	status,0,c
  1628  0014FE  D003               	goto	l164
  1629  001500                     u2610:
  1630                           
  1631                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1632  001500  0E08               	movlw	8
  1633  001502  6E7C               	movwf	printf@c,c
  1634  001504  D003               	goto	l2474
  1635  001506                     l164:
  1636                           
  1637                           ;doprnt.c: 1213: else
  1638                           ;doprnt.c: 1214: c = prec;
  1639  001506  C06D  F07C         	movff	printf@prec,printf@c
  1640  00150A  D000               	goto	l2474
  1641  00150C                     l2474:
  1642                           
  1643                           ;doprnt.c: 1215: prec -= c;
  1644  00150C  507C               	movf	printf@c,w,c
  1645  00150E  5E6D               	subwf	printf@prec,f,c
  1646  001510  0E00               	movlw	0
  1647  001512  BE7C               	btfsc	printf@c,7,c
  1648  001514  0EFF               	movlw	255
  1649  001516  5A6E               	subwfb	printf@prec+1,f,c
  1650                           
  1651                           ;doprnt.c: 1219: if(c)
  1652  001518  507C               	movf	printf@c,w,c
  1653  00151A  B4D8               	btfsc	status,2,c
  1654  00151C  D004               	goto	l2480
  1655                           
  1656                           ;doprnt.c: 1221: (putch('.') );
  1657  00151E  0E2E               	movlw	46
  1658  001520  EC4B  F015         	call	_putch
  1659  001524  D000               	goto	l2480
  1660  001526                     l2480:
  1661                           
  1662                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1663  001526  507C               	movf	printf@c,w,c
  1664  001528  EC56  F00B         	call	_scale
  1665  00152C  C03F  F066         	movff	?_scale,_printf$1319
  1666  001530  C040  F067         	movff	?_scale+1,_printf$1319+1
  1667  001534  C041  F068         	movff	?_scale+2,_printf$1319+2
  1668                           
  1669                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1670  001538  C079  F010         	movff	printf@fval,___ftmul@f2
  1671  00153C  C07A  F011         	movff	printf@fval+1,___ftmul@f2+1
  1672  001540  C07B  F012         	movff	printf@fval+2,___ftmul@f2+2
  1673  001544  C066  F00D         	movff	_printf$1319,___ftmul@f1
  1674  001548  C067  F00E         	movff	_printf$1319+1,___ftmul@f1+1
  1675  00154C  C068  F00F         	movff	_printf$1319+2,___ftmul@f1+2
  1676  001550  ECE4  F010         	call	___ftmul	;wreg free
  1677  001554  C00D  F01C         	movff	?___ftmul,___fttol@f1
  1678  001558  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  1679  00155C  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  1680  001560  EC60  F011         	call	___fttol	;wreg free
  1681  001564  C01C  F06F         	movff	?___fttol,printf@val
  1682  001568  C01D  F070         	movff	?___fttol+1,printf@val+1
  1683  00156C  C01E  F071         	movff	?___fttol+2,printf@val+2
  1684  001570  C01F  F072         	movff	?___fttol+3,printf@val+3
  1685                           
  1686                           ;doprnt.c: 1228: while(c--) {
  1687  001574  D06B               	goto	l2490
  1688  001576                     l2484:
  1689                           
  1690                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1691  001576  C06F  F001         	movff	printf@val,___lldiv@dividend
  1692  00157A  C070  F002         	movff	printf@val+1,___lldiv@dividend+1
  1693  00157E  C071  F003         	movff	printf@val+2,___lldiv@dividend+2
  1694  001582  C072  F004         	movff	printf@val+3,___lldiv@dividend+3
  1695  001586  507C               	movf	printf@c,w,c
  1696  001588  0D04               	mullw	4
  1697  00158A  0E01               	movlw	low _dpowers
  1698  00158C  24F3               	addwf	prodl,w,c
  1699  00158E  6EF6               	movwf	tblptrl,c
  1700  001590  0E10               	movlw	high _dpowers
  1701  001592  20F4               	addwfc	prodh,w,c
  1702  001594  6EF7               	movwf	tblptrh,c
  1703  001596                     	if	0	;There are less than 3 active tblptr bytes
  1704  001596                     	endif
  1705  001596  0009               	tblrd		*+
  1706  001598  CFF5 F005          	movff	tablat,___lldiv@divisor
  1707  00159C  0009               	tblrd		*+
  1708  00159E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1709  0015A2  0009               	tblrd		*+
  1710  0015A4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1711  0015A8  000A               	tblrd		*-
  1712  0015AA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1713  0015AE  EC3D  F013         	call	___lldiv	;wreg free
  1714  0015B2  C001  F075         	movff	?___lldiv,printf@tmpval
  1715  0015B6  C002  F076         	movff	?___lldiv+1,printf@tmpval+1
  1716  0015BA  C003  F077         	movff	?___lldiv+2,printf@tmpval+2
  1717  0015BE  C004  F078         	movff	?___lldiv+3,printf@tmpval+3
  1718                           
  1719                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1720  0015C2  C075  F001         	movff	printf@tmpval,___llmod@dividend
  1721  0015C6  C076  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1722  0015CA  C077  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1723  0015CE  C078  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1724  0015D2  0E0A               	movlw	10
  1725  0015D4  6E05               	movwf	___llmod@divisor,c
  1726  0015D6  0E00               	movlw	0
  1727  0015D8  6E06               	movwf	___llmod@divisor+1,c
  1728  0015DA  0E00               	movlw	0
  1729  0015DC  6E07               	movwf	___llmod@divisor+2,c
  1730  0015DE  0E00               	movlw	0
  1731  0015E0  6E08               	movwf	___llmod@divisor+3,c
  1732  0015E2  ECC4  F013         	call	___llmod	;wreg free
  1733  0015E6  C001  F075         	movff	?___llmod,printf@tmpval
  1734  0015EA  C002  F076         	movff	?___llmod+1,printf@tmpval+1
  1735  0015EE  C003  F077         	movff	?___llmod+2,printf@tmpval+2
  1736  0015F2  C004  F078         	movff	?___llmod+3,printf@tmpval+3
  1737                           
  1738                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1739  0015F6  5075               	movf	printf@tmpval,w,c
  1740  0015F8  0F30               	addlw	48
  1741  0015FA  EC4B  F015         	call	_putch
  1742                           
  1743                           ;doprnt.c: 1232: val %= dpowers[c];
  1744  0015FE  C06F  F001         	movff	printf@val,___llmod@dividend
  1745  001602  C070  F002         	movff	printf@val+1,___llmod@dividend+1
  1746  001606  C071  F003         	movff	printf@val+2,___llmod@dividend+2
  1747  00160A  C072  F004         	movff	printf@val+3,___llmod@dividend+3
  1748  00160E  507C               	movf	printf@c,w,c
  1749  001610  0D04               	mullw	4
  1750  001612  0E01               	movlw	low _dpowers
  1751  001614  24F3               	addwf	prodl,w,c
  1752  001616  6EF6               	movwf	tblptrl,c
  1753  001618  0E10               	movlw	high _dpowers
  1754  00161A  20F4               	addwfc	prodh,w,c
  1755  00161C  6EF7               	movwf	tblptrh,c
  1756  00161E                     	if	0	;There are less than 3 active tblptr bytes
  1757  00161E                     	endif
  1758  00161E  0009               	tblrd		*+
  1759  001620  CFF5 F005          	movff	tablat,___llmod@divisor
  1760  001624  0009               	tblrd		*+
  1761  001626  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1762  00162A  0009               	tblrd		*+
  1763  00162C  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1764  001630  000A               	tblrd		*-
  1765  001632  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1766  001636  ECC4  F013         	call	___llmod	;wreg free
  1767  00163A  C001  F06F         	movff	?___llmod,printf@val
  1768  00163E  C002  F070         	movff	?___llmod+1,printf@val+1
  1769  001642  C003  F071         	movff	?___llmod+2,printf@val+2
  1770  001646  C004  F072         	movff	?___llmod+3,printf@val+3
  1771  00164A  D000               	goto	l2490
  1772  00164C                     l2490:
  1773  00164C  067C               	decf	printf@c,f,c
  1774  00164E  287C               	incf	printf@c,w,c
  1775  001650  B4D8               	btfsc	status,2,c
  1776  001652  D009               	goto	l2496
  1777  001654  D790               	goto	l2484
  1778                           
  1779                           ;doprnt.c: 1233: }
  1780                           ;doprnt.c: 1235: while(prec) {
  1781  001656  D007               	goto	l2496
  1782  001658                     l2492:
  1783                           
  1784                           ;doprnt.c: 1236: (putch('0') );
  1785  001658  0E30               	movlw	48
  1786  00165A  EC4B  F015         	call	_putch
  1787                           
  1788                           ;doprnt.c: 1237: prec--;
  1789  00165E  066D               	decf	printf@prec,f,c
  1790  001660  A0D8               	btfss	status,0,c
  1791  001662  066E               	decf	printf@prec+1,f,c
  1792  001664  D000               	goto	l2496
  1793  001666                     l2496:
  1794  001666  506D               	movf	printf@prec,w,c
  1795  001668  106E               	iorwf	printf@prec+1,w,c
  1796  00166A  B4D8               	btfsc	status,2,c
  1797  00166C  D010               	goto	l2502
  1798  00166E  D7F4               	goto	l2492
  1799                           
  1800                           ;doprnt.c: 1238: }
  1801                           ;doprnt.c: 1245: continue;
  1802  001670  D00E               	goto	l2502
  1803  001672                     l2498:
  1804                           
  1805                           ;doprnt.c: 1246: }
  1806                           ;doprnt.c: 1422: {
  1807                           ;doprnt.c: 1438: if(flag & 0x03)
  1808  001672  0E03               	movlw	3
  1809  001674  146B               	andwf	printf@flag,w,c
  1810  001676  6E60               	movwf	??_printf& (0+255),c
  1811  001678  0E00               	movlw	0
  1812  00167A  146C               	andwf	printf@flag+1,w,c
  1813  00167C  6E61               	movwf	(??_printf+1)& (0+255),c
  1814  00167E  5060               	movf	??_printf,w,c
  1815  001680  1061               	iorwf	??_printf+1,w,c
  1816  001682  B4D8               	btfsc	status,2,c
  1817  001684  D004               	goto	l2502
  1818                           
  1819                           ;doprnt.c: 1439: (putch('-') );
  1820  001686  0E2D               	movlw	45
  1821  001688  EC4B  F015         	call	_putch
  1822  00168C  D000               	goto	l2502
  1823  00168E                     l2502:
  1824  00168E  C05B  FFF6         	movff	printf@f,tblptrl
  1825  001692  C05C  FFF7         	movff	printf@f+1,tblptrh
  1826  001696  4A5B               	infsnz	printf@f,f,c
  1827  001698  2A5C               	incf	printf@f+1,f,c
  1828  00169A                     	if	0	;tblptru may be non-zero
  1829  00169A                     	endif
  1830  00169A                     	if	0	;tblptru may be non-zero
  1831  00169A                     	endif
  1832  00169A  0008               	tblrd		*
  1833  00169C  CFF5 F07C          	movff	tablat,printf@c
  1834  0016A0  507C               	movf	printf@c,w,c
  1835  0016A2  B4D8               	btfsc	status,2,c
  1836  0016A4  D002               	goto	l175
  1837  0016A6  D4F4               	goto	l2354
  1838  0016A8  D000               	goto	l175
  1839  0016AA                     l175:
  1840  0016AA  0012               	return		;funcret
  1841  0016AC                     __end_of_printf:
  1842                           	opt stack 0
  1843                           tblptru	equ	0xFF8
  1844                           tblptrh	equ	0xFF7
  1845                           tblptrl	equ	0xFF6
  1846                           tablat	equ	0xFF5
  1847                           prodh	equ	0xFF4
  1848                           prodl	equ	0xFF3
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           postdec1	equ	0xFE5
  1852                           fsr1l	equ	0xFE1
  1853                           postinc2	equ	0xFDE
  1854                           postdec2	equ	0xFDD
  1855                           fsr2h	equ	0xFDA
  1856                           fsr2l	equ	0xFD9
  1857                           status	equ	0xFD8
  1858                           
  1859 ;; *************** function _scale *****************
  1860 ;; Defined at:
  1861 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;  scl             1    wreg     char 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  scl             1   68[COMRAM] char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  3   62[COMRAM] char 
  1868 ;; Registers used:
  1869 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1875 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;Total ram usage:        7 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:    2
  1882 ;; This function calls:
  1883 ;;		___awdiv
  1884 ;;		___awmod
  1885 ;;		___ftmul
  1886 ;;		___wmul
  1887 ;; This function is called by:
  1888 ;;		_printf
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text2
  1893  0016AC                     __ptext2:
  1894                           	opt stack 0
  1895  0016AC                     _scale:
  1896                           	opt stack 27
  1897                           
  1898                           ;incstack = 0
  1899                           ;scale@scl stored from wreg
  1900  0016AC  6E45               	movwf	scale@scl,c
  1901                           
  1902                           ;doprnt.c: 428: if(scl < 0) {
  1903  0016AE  AE45               	btfss	scale@scl,7,c
  1904  0016B0  D0EF               	goto	l2078
  1905                           
  1906                           ;doprnt.c: 429: scl = -scl;
  1907  0016B2  6C45               	negf	scale@scl,c
  1908                           
  1909                           ;doprnt.c: 430: if(scl>=110)
  1910  0016B4  5045               	movf	scale@scl,w,c
  1911  0016B6  0A80               	xorlw	128
  1912  0016B8  0F12               	addlw	-238
  1913  0016BA  A0D8               	btfss	status,0,c
  1914  0016BC  D08D               	goto	l2068
  1915                           
  1916                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1917  0016BE  0E00               	movlw	0
  1918  0016C0  6E3C               	movwf	___wmul@multiplicand+1,c
  1919  0016C2  0E03               	movlw	3
  1920  0016C4  6E3B               	movwf	___wmul@multiplicand,c
  1921  0016C6  0E00               	movlw	0
  1922  0016C8  6E34               	movwf	___awdiv@divisor+1,c
  1923  0016CA  0E0A               	movlw	10
  1924  0016CC  6E33               	movwf	___awdiv@divisor,c
  1925  0016CE  0E00               	movlw	0
  1926  0016D0  6E2E               	movwf	___awmod@divisor+1,c
  1927  0016D2  0E64               	movlw	100
  1928  0016D4  6E2D               	movwf	___awmod@divisor,c
  1929  0016D6  5045               	movf	scale@scl,w,c
  1930  0016D8  6E2B               	movwf	___awmod@dividend,c
  1931  0016DA  6A2C               	clrf	___awmod@dividend+1,c
  1932  0016DC  BE2B               	btfsc	___awmod@dividend,7,c
  1933  0016DE  062C               	decf	___awmod@dividend+1,f,c
  1934  0016E0  EC83  F013         	call	___awmod	;wreg free
  1935  0016E4  C02B  F031         	movff	?___awmod,___awdiv@dividend
  1936  0016E8  C02C  F032         	movff	?___awmod+1,___awdiv@dividend+1
  1937  0016EC  ECA7  F012         	call	___awdiv	;wreg free
  1938  0016F0  0E09               	movlw	9
  1939  0016F2  2431               	addwf	?___awdiv,w,c
  1940  0016F4  6E39               	movwf	___wmul@multiplier,c
  1941  0016F6  0E00               	movlw	0
  1942  0016F8  2032               	addwfc	?___awdiv+1,w,c
  1943  0016FA  6E3A               	movwf	___wmul@multiplier+1,c
  1944  0016FC  ECDE  F014         	call	___wmul	;wreg free
  1945  001700  0E29               	movlw	low __npowers_
  1946  001702  2439               	addwf	?___wmul,w,c
  1947  001704  6EF6               	movwf	tblptrl,c
  1948  001706  0E10               	movlw	high __npowers_
  1949  001708  203A               	addwfc	?___wmul+1,w,c
  1950  00170A  6EF7               	movwf	tblptrh,c
  1951  00170C                     	if	0	;There are less than 3 active tblptr bytes
  1952  00170C                     	endif
  1953  00170C  0009               	tblrd		*+
  1954  00170E  CFF5 F010          	movff	tablat,___ftmul@f2
  1955  001712  0009               	tblrd		*+
  1956  001714  CFF5 F011          	movff	tablat,___ftmul@f2+1
  1957  001718  000A               	tblrd		*-
  1958  00171A  CFF5 F012          	movff	tablat,___ftmul@f2+2
  1959  00171E  0E00               	movlw	0
  1960  001720  6E34               	movwf	___awdiv@divisor+1,c
  1961  001722  0E64               	movlw	100
  1962  001724  6E33               	movwf	___awdiv@divisor,c
  1963  001726  5045               	movf	scale@scl,w,c
  1964  001728  6E31               	movwf	___awdiv@dividend,c
  1965  00172A  6A32               	clrf	___awdiv@dividend+1,c
  1966  00172C  BE31               	btfsc	___awdiv@dividend,7,c
  1967  00172E  0632               	decf	___awdiv@dividend+1,f,c
  1968  001730  ECA7  F012         	call	___awdiv	;wreg free
  1969  001734  0E12               	movlw	18
  1970  001736  2431               	addwf	?___awdiv,w,c
  1971  001738  6E39               	movwf	___wmul@multiplier,c
  1972  00173A  0E00               	movlw	0
  1973  00173C  2032               	addwfc	?___awdiv+1,w,c
  1974  00173E  6E3A               	movwf	___wmul@multiplier+1,c
  1975  001740  0E00               	movlw	0
  1976  001742  6E3C               	movwf	___wmul@multiplicand+1,c
  1977  001744  0E03               	movlw	3
  1978  001746  6E3B               	movwf	___wmul@multiplicand,c
  1979  001748  ECDE  F014         	call	___wmul	;wreg free
  1980  00174C  0E29               	movlw	low __npowers_
  1981  00174E  2439               	addwf	?___wmul,w,c
  1982  001750  6EF6               	movwf	tblptrl,c
  1983  001752  0E10               	movlw	high __npowers_
  1984  001754  203A               	addwfc	?___wmul+1,w,c
  1985  001756  6EF7               	movwf	tblptrh,c
  1986  001758                     	if	0	;There are less than 3 active tblptr bytes
  1987  001758                     	endif
  1988  001758  0009               	tblrd		*+
  1989  00175A  CFF5 F00D          	movff	tablat,___ftmul@f1
  1990  00175E  0009               	tblrd		*+
  1991  001760  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  1992  001764  000A               	tblrd		*-
  1993  001766  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  1994  00176A  ECE4  F010         	call	___ftmul	;wreg free
  1995  00176E  C00D  F042         	movff	?___ftmul,_scale$1318
  1996  001772  C00E  F043         	movff	?___ftmul+1,_scale$1318+1
  1997  001776  C00F  F044         	movff	?___ftmul+2,_scale$1318+2
  1998                           
  1999                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2000  00177A  C042  F00D         	movff	_scale$1318,___ftmul@f1
  2001  00177E  C043  F00E         	movff	_scale$1318+1,___ftmul@f1+1
  2002  001782  C044  F00F         	movff	_scale$1318+2,___ftmul@f1+2
  2003  001786  0E00               	movlw	0
  2004  001788  6E3C               	movwf	___wmul@multiplicand+1,c
  2005  00178A  0E03               	movlw	3
  2006  00178C  6E3B               	movwf	___wmul@multiplicand,c
  2007  00178E  0E00               	movlw	0
  2008  001790  6E2E               	movwf	___awmod@divisor+1,c
  2009  001792  0E0A               	movlw	10
  2010  001794  6E2D               	movwf	___awmod@divisor,c
  2011  001796  5045               	movf	scale@scl,w,c
  2012  001798  6E2B               	movwf	___awmod@dividend,c
  2013  00179A  6A2C               	clrf	___awmod@dividend+1,c
  2014  00179C  BE2B               	btfsc	___awmod@dividend,7,c
  2015  00179E  062C               	decf	___awmod@dividend+1,f,c
  2016  0017A0  EC83  F013         	call	___awmod	;wreg free
  2017  0017A4  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2018  0017A8  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2019  0017AC  ECDE  F014         	call	___wmul	;wreg free
  2020  0017B0  0E29               	movlw	low __npowers_
  2021  0017B2  2439               	addwf	?___wmul,w,c
  2022  0017B4  6EF6               	movwf	tblptrl,c
  2023  0017B6  0E10               	movlw	high __npowers_
  2024  0017B8  203A               	addwfc	?___wmul+1,w,c
  2025  0017BA  6EF7               	movwf	tblptrh,c
  2026  0017BC                     	if	0	;There are less than 3 active tblptr bytes
  2027  0017BC                     	endif
  2028  0017BC  0009               	tblrd		*+
  2029  0017BE  CFF5 F010          	movff	tablat,___ftmul@f2
  2030  0017C2  0009               	tblrd		*+
  2031  0017C4  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2032  0017C8  000A               	tblrd		*-
  2033  0017CA  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2034  0017CE  ECE4  F010         	call	___ftmul	;wreg free
  2035  0017D2  D141               	goto	L5
  2036  0017D4  D15A               	goto	l119
  2037  0017D6  D054               	goto	l2074
  2038  0017D8                     l2068:
  2039                           
  2040                           ;doprnt.c: 432: else if(scl > 10)
  2041  0017D8  5045               	movf	scale@scl,w,c
  2042  0017DA  0A80               	xorlw	128
  2043  0017DC  0F75               	addlw	-139
  2044  0017DE  A0D8               	btfss	status,0,c
  2045  0017E0  D04F               	goto	l2074
  2046                           
  2047                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2048  0017E2  0E00               	movlw	0
  2049  0017E4  6E34               	movwf	___awdiv@divisor+1,c
  2050  0017E6  0E0A               	movlw	10
  2051  0017E8  6E33               	movwf	___awdiv@divisor,c
  2052  0017EA  5045               	movf	scale@scl,w,c
  2053  0017EC  6E31               	movwf	___awdiv@dividend,c
  2054  0017EE  6A32               	clrf	___awdiv@dividend+1,c
  2055  0017F0  BE31               	btfsc	___awdiv@dividend,7,c
  2056  0017F2  0632               	decf	___awdiv@dividend+1,f,c
  2057  0017F4  ECA7  F012         	call	___awdiv	;wreg free
  2058  0017F8  0E09               	movlw	9
  2059  0017FA  2431               	addwf	?___awdiv,w,c
  2060  0017FC  6E39               	movwf	___wmul@multiplier,c
  2061  0017FE  0E00               	movlw	0
  2062  001800  2032               	addwfc	?___awdiv+1,w,c
  2063  001802  6E3A               	movwf	___wmul@multiplier+1,c
  2064  001804  0E00               	movlw	0
  2065  001806  6E3C               	movwf	___wmul@multiplicand+1,c
  2066  001808  0E03               	movlw	3
  2067  00180A  6E3B               	movwf	___wmul@multiplicand,c
  2068  00180C  ECDE  F014         	call	___wmul	;wreg free
  2069  001810  0E29               	movlw	low __npowers_
  2070  001812  2439               	addwf	?___wmul,w,c
  2071  001814  6EF6               	movwf	tblptrl,c
  2072  001816  0E10               	movlw	high __npowers_
  2073  001818  203A               	addwfc	?___wmul+1,w,c
  2074  00181A  6EF7               	movwf	tblptrh,c
  2075  00181C                     	if	0	;There are less than 3 active tblptr bytes
  2076  00181C                     	endif
  2077  00181C  0009               	tblrd		*+
  2078  00181E  CFF5 F00D          	movff	tablat,___ftmul@f1
  2079  001822  0009               	tblrd		*+
  2080  001824  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2081  001828  000A               	tblrd		*-
  2082  00182A  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2083  00182E  0E00               	movlw	0
  2084  001830  6E3C               	movwf	___wmul@multiplicand+1,c
  2085  001832  0E03               	movlw	3
  2086  001834  6E3B               	movwf	___wmul@multiplicand,c
  2087  001836  0E00               	movlw	0
  2088  001838  6E2E               	movwf	___awmod@divisor+1,c
  2089  00183A  0E0A               	movlw	10
  2090  00183C  6E2D               	movwf	___awmod@divisor,c
  2091  00183E  5045               	movf	scale@scl,w,c
  2092  001840  6E2B               	movwf	___awmod@dividend,c
  2093  001842  6A2C               	clrf	___awmod@dividend+1,c
  2094  001844  BE2B               	btfsc	___awmod@dividend,7,c
  2095  001846  062C               	decf	___awmod@dividend+1,f,c
  2096  001848  EC83  F013         	call	___awmod	;wreg free
  2097  00184C  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2098  001850  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2099  001854  ECDE  F014         	call	___wmul	;wreg free
  2100  001858  0E29               	movlw	low __npowers_
  2101  00185A  2439               	addwf	?___wmul,w,c
  2102  00185C  6EF6               	movwf	tblptrl,c
  2103  00185E  0E10               	movlw	high __npowers_
  2104  001860  203A               	addwfc	?___wmul+1,w,c
  2105  001862  6EF7               	movwf	tblptrh,c
  2106  001864                     	if	0	;There are less than 3 active tblptr bytes
  2107  001864                     	endif
  2108  001864  0009               	tblrd		*+
  2109  001866  CFF5 F010          	movff	tablat,___ftmul@f2
  2110  00186A  0009               	tblrd		*+
  2111  00186C  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2112  001870  000A               	tblrd		*-
  2113  001872  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2114  001876  ECE4  F010         	call	___ftmul	;wreg free
  2115  00187A  D0ED               	goto	L5
  2116  00187C  D106               	goto	l119
  2117  00187E  D000               	goto	l2074
  2118  001880                     l2074:
  2119                           
  2120                           ;doprnt.c: 434: return _npowers_[scl];
  2121  001880  5045               	movf	scale@scl,w,c
  2122  001882  0D03               	mullw	3
  2123  001884  0E29               	movlw	low __npowers_
  2124  001886  24F3               	addwf	prodl,w,c
  2125  001888  6EF6               	movwf	tblptrl,c
  2126  00188A  0E10               	movlw	high __npowers_
  2127  00188C  D0F2               	goto	L4
  2128  00188E  D0FD               	goto	l119
  2129  001890                     l2078:
  2130                           
  2131                           ;doprnt.c: 435: }
  2132                           ;doprnt.c: 436: if(scl>=110)
  2133  001890  5045               	movf	scale@scl,w,c
  2134  001892  0A80               	xorlw	128
  2135  001894  0F12               	addlw	-238
  2136  001896  A0D8               	btfss	status,0,c
  2137  001898  D08D               	goto	l2086
  2138                           
  2139                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2140  00189A  0E00               	movlw	0
  2141  00189C  6E3C               	movwf	___wmul@multiplicand+1,c
  2142  00189E  0E03               	movlw	3
  2143  0018A0  6E3B               	movwf	___wmul@multiplicand,c
  2144  0018A2  0E00               	movlw	0
  2145  0018A4  6E34               	movwf	___awdiv@divisor+1,c
  2146  0018A6  0E0A               	movlw	10
  2147  0018A8  6E33               	movwf	___awdiv@divisor,c
  2148  0018AA  0E00               	movlw	0
  2149  0018AC  6E2E               	movwf	___awmod@divisor+1,c
  2150  0018AE  0E64               	movlw	100
  2151  0018B0  6E2D               	movwf	___awmod@divisor,c
  2152  0018B2  5045               	movf	scale@scl,w,c
  2153  0018B4  6E2B               	movwf	___awmod@dividend,c
  2154  0018B6  6A2C               	clrf	___awmod@dividend+1,c
  2155  0018B8  BE2B               	btfsc	___awmod@dividend,7,c
  2156  0018BA  062C               	decf	___awmod@dividend+1,f,c
  2157  0018BC  EC83  F013         	call	___awmod	;wreg free
  2158  0018C0  C02B  F031         	movff	?___awmod,___awdiv@dividend
  2159  0018C4  C02C  F032         	movff	?___awmod+1,___awdiv@dividend+1
  2160  0018C8  ECA7  F012         	call	___awdiv	;wreg free
  2161  0018CC  0E09               	movlw	9
  2162  0018CE  2431               	addwf	?___awdiv,w,c
  2163  0018D0  6E39               	movwf	___wmul@multiplier,c
  2164  0018D2  0E00               	movlw	0
  2165  0018D4  2032               	addwfc	?___awdiv+1,w,c
  2166  0018D6  6E3A               	movwf	___wmul@multiplier+1,c
  2167  0018D8  ECDE  F014         	call	___wmul	;wreg free
  2168  0018DC  0E50               	movlw	low __powers_
  2169  0018DE  2439               	addwf	?___wmul,w,c
  2170  0018E0  6EF6               	movwf	tblptrl,c
  2171  0018E2  0E10               	movlw	high __powers_
  2172  0018E4  203A               	addwfc	?___wmul+1,w,c
  2173  0018E6  6EF7               	movwf	tblptrh,c
  2174  0018E8                     	if	0	;There are less than 3 active tblptr bytes
  2175  0018E8                     	endif
  2176  0018E8  0009               	tblrd		*+
  2177  0018EA  CFF5 F010          	movff	tablat,___ftmul@f2
  2178  0018EE  0009               	tblrd		*+
  2179  0018F0  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2180  0018F4  000A               	tblrd		*-
  2181  0018F6  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2182  0018FA  0E00               	movlw	0
  2183  0018FC  6E34               	movwf	___awdiv@divisor+1,c
  2184  0018FE  0E64               	movlw	100
  2185  001900  6E33               	movwf	___awdiv@divisor,c
  2186  001902  5045               	movf	scale@scl,w,c
  2187  001904  6E31               	movwf	___awdiv@dividend,c
  2188  001906  6A32               	clrf	___awdiv@dividend+1,c
  2189  001908  BE31               	btfsc	___awdiv@dividend,7,c
  2190  00190A  0632               	decf	___awdiv@dividend+1,f,c
  2191  00190C  ECA7  F012         	call	___awdiv	;wreg free
  2192  001910  0E12               	movlw	18
  2193  001912  2431               	addwf	?___awdiv,w,c
  2194  001914  6E39               	movwf	___wmul@multiplier,c
  2195  001916  0E00               	movlw	0
  2196  001918  2032               	addwfc	?___awdiv+1,w,c
  2197  00191A  6E3A               	movwf	___wmul@multiplier+1,c
  2198  00191C  0E00               	movlw	0
  2199  00191E  6E3C               	movwf	___wmul@multiplicand+1,c
  2200  001920  0E03               	movlw	3
  2201  001922  6E3B               	movwf	___wmul@multiplicand,c
  2202  001924  ECDE  F014         	call	___wmul	;wreg free
  2203  001928  0E50               	movlw	low __powers_
  2204  00192A  2439               	addwf	?___wmul,w,c
  2205  00192C  6EF6               	movwf	tblptrl,c
  2206  00192E  0E10               	movlw	high __powers_
  2207  001930  203A               	addwfc	?___wmul+1,w,c
  2208  001932  6EF7               	movwf	tblptrh,c
  2209  001934                     	if	0	;There are less than 3 active tblptr bytes
  2210  001934                     	endif
  2211  001934  0009               	tblrd		*+
  2212  001936  CFF5 F00D          	movff	tablat,___ftmul@f1
  2213  00193A  0009               	tblrd		*+
  2214  00193C  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2215  001940  000A               	tblrd		*-
  2216  001942  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2217  001946  ECE4  F010         	call	___ftmul	;wreg free
  2218  00194A  C00D  F042         	movff	?___ftmul,_scale$1318
  2219  00194E  C00E  F043         	movff	?___ftmul+1,_scale$1318+1
  2220  001952  C00F  F044         	movff	?___ftmul+2,_scale$1318+2
  2221                           
  2222                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2223  001956  C042  F00D         	movff	_scale$1318,___ftmul@f1
  2224  00195A  C043  F00E         	movff	_scale$1318+1,___ftmul@f1+1
  2225  00195E  C044  F00F         	movff	_scale$1318+2,___ftmul@f1+2
  2226  001962  0E00               	movlw	0
  2227  001964  6E3C               	movwf	___wmul@multiplicand+1,c
  2228  001966  0E03               	movlw	3
  2229  001968  6E3B               	movwf	___wmul@multiplicand,c
  2230  00196A  0E00               	movlw	0
  2231  00196C  6E2E               	movwf	___awmod@divisor+1,c
  2232  00196E  0E0A               	movlw	10
  2233  001970  6E2D               	movwf	___awmod@divisor,c
  2234  001972  5045               	movf	scale@scl,w,c
  2235  001974  6E2B               	movwf	___awmod@dividend,c
  2236  001976  6A2C               	clrf	___awmod@dividend+1,c
  2237  001978  BE2B               	btfsc	___awmod@dividend,7,c
  2238  00197A  062C               	decf	___awmod@dividend+1,f,c
  2239  00197C  EC83  F013         	call	___awmod	;wreg free
  2240  001980  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2241  001984  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2242  001988  ECDE  F014         	call	___wmul	;wreg free
  2243  00198C  0E50               	movlw	low __powers_
  2244  00198E  2439               	addwf	?___wmul,w,c
  2245  001990  6EF6               	movwf	tblptrl,c
  2246  001992  0E10               	movlw	high __powers_
  2247  001994  203A               	addwfc	?___wmul+1,w,c
  2248  001996  6EF7               	movwf	tblptrh,c
  2249  001998                     	if	0	;There are less than 3 active tblptr bytes
  2250  001998                     	endif
  2251  001998  0009               	tblrd		*+
  2252  00199A  CFF5 F010          	movff	tablat,___ftmul@f2
  2253  00199E  0009               	tblrd		*+
  2254  0019A0  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2255  0019A4  000A               	tblrd		*-
  2256  0019A6  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2257  0019AA  ECE4  F010         	call	___ftmul	;wreg free
  2258  0019AE  D053               	goto	L5
  2259  0019B0  D06C               	goto	l119
  2260  0019B2  D059               	goto	l2092
  2261  0019B4                     l2086:
  2262                           
  2263                           ;doprnt.c: 438: else if(scl > 10)
  2264  0019B4  5045               	movf	scale@scl,w,c
  2265  0019B6  0A80               	xorlw	128
  2266  0019B8  0F75               	addlw	-139
  2267  0019BA  A0D8               	btfss	status,0,c
  2268  0019BC  D054               	goto	l2092
  2269                           
  2270                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2271  0019BE  0E00               	movlw	0
  2272  0019C0  6E34               	movwf	___awdiv@divisor+1,c
  2273  0019C2  0E0A               	movlw	10
  2274  0019C4  6E33               	movwf	___awdiv@divisor,c
  2275  0019C6  5045               	movf	scale@scl,w,c
  2276  0019C8  6E31               	movwf	___awdiv@dividend,c
  2277  0019CA  6A32               	clrf	___awdiv@dividend+1,c
  2278  0019CC  BE31               	btfsc	___awdiv@dividend,7,c
  2279  0019CE  0632               	decf	___awdiv@dividend+1,f,c
  2280  0019D0  ECA7  F012         	call	___awdiv	;wreg free
  2281  0019D4  0E09               	movlw	9
  2282  0019D6  2431               	addwf	?___awdiv,w,c
  2283  0019D8  6E39               	movwf	___wmul@multiplier,c
  2284  0019DA  0E00               	movlw	0
  2285  0019DC  2032               	addwfc	?___awdiv+1,w,c
  2286  0019DE  6E3A               	movwf	___wmul@multiplier+1,c
  2287  0019E0  0E00               	movlw	0
  2288  0019E2  6E3C               	movwf	___wmul@multiplicand+1,c
  2289  0019E4  0E03               	movlw	3
  2290  0019E6  6E3B               	movwf	___wmul@multiplicand,c
  2291  0019E8  ECDE  F014         	call	___wmul	;wreg free
  2292  0019EC  0E50               	movlw	low __powers_
  2293  0019EE  2439               	addwf	?___wmul,w,c
  2294  0019F0  6EF6               	movwf	tblptrl,c
  2295  0019F2  0E10               	movlw	high __powers_
  2296  0019F4  203A               	addwfc	?___wmul+1,w,c
  2297  0019F6  6EF7               	movwf	tblptrh,c
  2298  0019F8                     	if	0	;There are less than 3 active tblptr bytes
  2299  0019F8                     	endif
  2300  0019F8  0009               	tblrd		*+
  2301  0019FA  CFF5 F00D          	movff	tablat,___ftmul@f1
  2302  0019FE  0009               	tblrd		*+
  2303  001A00  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2304  001A04  000A               	tblrd		*-
  2305  001A06  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2306  001A0A  0E00               	movlw	0
  2307  001A0C  6E3C               	movwf	___wmul@multiplicand+1,c
  2308  001A0E  0E03               	movlw	3
  2309  001A10  6E3B               	movwf	___wmul@multiplicand,c
  2310  001A12  0E00               	movlw	0
  2311  001A14  6E2E               	movwf	___awmod@divisor+1,c
  2312  001A16  0E0A               	movlw	10
  2313  001A18  6E2D               	movwf	___awmod@divisor,c
  2314  001A1A  5045               	movf	scale@scl,w,c
  2315  001A1C  6E2B               	movwf	___awmod@dividend,c
  2316  001A1E  6A2C               	clrf	___awmod@dividend+1,c
  2317  001A20  BE2B               	btfsc	___awmod@dividend,7,c
  2318  001A22  062C               	decf	___awmod@dividend+1,f,c
  2319  001A24  EC83  F013         	call	___awmod	;wreg free
  2320  001A28  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2321  001A2C  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2322  001A30  ECDE  F014         	call	___wmul	;wreg free
  2323  001A34  0E50               	movlw	low __powers_
  2324  001A36  2439               	addwf	?___wmul,w,c
  2325  001A38  6EF6               	movwf	tblptrl,c
  2326  001A3A  0E10               	movlw	high __powers_
  2327  001A3C  203A               	addwfc	?___wmul+1,w,c
  2328  001A3E  6EF7               	movwf	tblptrh,c
  2329  001A40                     	if	0	;There are less than 3 active tblptr bytes
  2330  001A40                     	endif
  2331  001A40  0009               	tblrd		*+
  2332  001A42  CFF5 F010          	movff	tablat,___ftmul@f2
  2333  001A46  0009               	tblrd		*+
  2334  001A48  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2335  001A4C  000A               	tblrd		*-
  2336  001A4E  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2337  001A52  ECE4  F010         	call	___ftmul	;wreg free
  2338  001A56                     L5:
  2339  001A56  C00D  F03F         	movff	?___ftmul,?_scale
  2340  001A5A  C00E  F040         	movff	?___ftmul+1,?_scale+1
  2341  001A5E  C00F  F041         	movff	?___ftmul+2,?_scale+2
  2342  001A62  D013               	goto	l119
  2343  001A64  D000               	goto	l2092
  2344  001A66                     l2092:
  2345                           
  2346                           ;doprnt.c: 440: return _powers_[scl];
  2347  001A66  5045               	movf	scale@scl,w,c
  2348  001A68  0D03               	mullw	3
  2349  001A6A  0E50               	movlw	low __powers_
  2350  001A6C  24F3               	addwf	prodl,w,c
  2351  001A6E  6EF6               	movwf	tblptrl,c
  2352  001A70  0E10               	movlw	high __powers_
  2353  001A72                     L4:
  2354  001A72  20F4               	addwfc	prodh,w,c
  2355  001A74  6EF7               	movwf	tblptrh,c
  2356  001A76                     	if	0	;There are less than 3 active tblptr bytes
  2357  001A76                     	endif
  2358  001A76  0009               	tblrd		*+
  2359  001A78  CFF5 F03F          	movff	tablat,?_scale
  2360  001A7C  0009               	tblrd		*+
  2361  001A7E  CFF5 F040          	movff	tablat,?_scale+1
  2362  001A82  000A               	tblrd		*-
  2363  001A84  CFF5 F041          	movff	tablat,?_scale+2
  2364  001A88  D000               	goto	l119
  2365  001A8A                     l119:
  2366  001A8A  0012               	return		;funcret
  2367  001A8C                     __end_of_scale:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           postdec1	equ	0xFE5
  2378                           fsr1l	equ	0xFE1
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _putch *****************
  2386 ;; Defined at:
  2387 ;;		line 44 in file "Lab5.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;  c               1    wreg     unsigned char 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  c               1    0[COMRAM] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;		None               void
  2394 ;; Registers used:
  2395 ;;		wreg
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;Total ram usage:        1 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; This function calls:
  2408 ;;		Nothing
  2409 ;; This function is called by:
  2410 ;;		_printf
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text3
  2415  002A96                     __ptext3:
  2416                           	opt stack 0
  2417  002A96                     _putch:
  2418                           	opt stack 29
  2419                           
  2420                           ;incstack = 0
  2421                           ;putch@c stored from wreg
  2422  002A96  6E01               	movwf	putch@c,c
  2423                           
  2424                           ;Lab5.c: 46: while (!TRMT);
  2425  002A98  D000               	goto	l67
  2426  002A9A                     l67:
  2427  002A9A  A2AC               	btfss	4012,1,c	;volatile
  2428  002A9C  D7FE               	goto	l67
  2429                           
  2430                           ;Lab5.c: 47: TXREG = c;
  2431  002A9E  C001  FFAD         	movff	putch@c,4013	;volatile
  2432  002AA2  0012               	return		;funcret
  2433  002AA4                     __end_of_putch:
  2434                           	opt stack 0
  2435                           tblptru	equ	0xFF8
  2436                           tblptrh	equ	0xFF7
  2437                           tblptrl	equ	0xFF6
  2438                           tablat	equ	0xFF5
  2439                           prodh	equ	0xFF4
  2440                           prodl	equ	0xFF3
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           postdec1	equ	0xFE5
  2444                           fsr1l	equ	0xFE1
  2445                           postinc2	equ	0xFDE
  2446                           postdec2	equ	0xFDD
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function _fround *****************
  2452 ;; Defined at:
  2453 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  prec            1    wreg     unsigned char 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;  prec            1   71[COMRAM] unsigned char 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  3   62[COMRAM] unsigned char 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2467 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;Total ram usage:       10 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    2
  2474 ;; This function calls:
  2475 ;;		___awdiv
  2476 ;;		___awmod
  2477 ;;		___ftmul
  2478 ;;		___wmul
  2479 ;; This function is called by:
  2480 ;;		_printf
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text4
  2485  001A8C                     __ptext4:
  2486                           	opt stack 0
  2487  001A8C                     _fround:
  2488                           	opt stack 27
  2489                           
  2490                           ;incstack = 0
  2491                           ;fround@prec stored from wreg
  2492  001A8C  6E48               	movwf	fround@prec,c
  2493                           
  2494                           ;doprnt.c: 413: if(prec>=110)
  2495  001A8E  0E6D               	movlw	109
  2496  001A90  6448               	cpfsgt	fround@prec,c
  2497  001A92  D09B               	goto	l2046
  2498                           
  2499                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2500  001A94  0E00               	movlw	0
  2501  001A96  6E3C               	movwf	___wmul@multiplicand+1,c
  2502  001A98  0E03               	movlw	3
  2503  001A9A  6E3B               	movwf	___wmul@multiplicand,c
  2504  001A9C  0E00               	movlw	0
  2505  001A9E  6E34               	movwf	___awdiv@divisor+1,c
  2506  001AA0  0E0A               	movlw	10
  2507  001AA2  6E33               	movwf	___awdiv@divisor,c
  2508  001AA4  0E00               	movlw	0
  2509  001AA6  6E2E               	movwf	___awmod@divisor+1,c
  2510  001AA8  0E64               	movlw	100
  2511  001AAA  6E2D               	movwf	___awmod@divisor,c
  2512  001AAC  C048  F02B         	movff	fround@prec,___awmod@dividend
  2513  001AB0  6A2C               	clrf	___awmod@dividend+1,c
  2514  001AB2  EC83  F013         	call	___awmod	;wreg free
  2515  001AB6  C02B  F031         	movff	?___awmod,___awdiv@dividend
  2516  001ABA  C02C  F032         	movff	?___awmod+1,___awdiv@dividend+1
  2517  001ABE  ECA7  F012         	call	___awdiv	;wreg free
  2518  001AC2  0E09               	movlw	9
  2519  001AC4  2431               	addwf	?___awdiv,w,c
  2520  001AC6  6E39               	movwf	___wmul@multiplier,c
  2521  001AC8  0E00               	movlw	0
  2522  001ACA  2032               	addwfc	?___awdiv+1,w,c
  2523  001ACC  6E3A               	movwf	___wmul@multiplier+1,c
  2524  001ACE  ECDE  F014         	call	___wmul	;wreg free
  2525  001AD2  0E29               	movlw	low __npowers_
  2526  001AD4  2439               	addwf	?___wmul,w,c
  2527  001AD6  6EF6               	movwf	tblptrl,c
  2528  001AD8  0E10               	movlw	high __npowers_
  2529  001ADA  203A               	addwfc	?___wmul+1,w,c
  2530  001ADC  6EF7               	movwf	tblptrh,c
  2531  001ADE                     	if	0	;There are less than 3 active tblptr bytes
  2532  001ADE                     	endif
  2533  001ADE  0009               	tblrd		*+
  2534  001AE0  CFF5 F010          	movff	tablat,___ftmul@f2
  2535  001AE4  0009               	tblrd		*+
  2536  001AE6  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2537  001AEA  000A               	tblrd		*-
  2538  001AEC  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2539  001AF0  0E00               	movlw	0
  2540  001AF2  6E34               	movwf	___awdiv@divisor+1,c
  2541  001AF4  0E64               	movlw	100
  2542  001AF6  6E33               	movwf	___awdiv@divisor,c
  2543  001AF8  C048  F031         	movff	fround@prec,___awdiv@dividend
  2544  001AFC  6A32               	clrf	___awdiv@dividend+1,c
  2545  001AFE  ECA7  F012         	call	___awdiv	;wreg free
  2546  001B02  0E12               	movlw	18
  2547  001B04  2431               	addwf	?___awdiv,w,c
  2548  001B06  6E39               	movwf	___wmul@multiplier,c
  2549  001B08  0E00               	movlw	0
  2550  001B0A  2032               	addwfc	?___awdiv+1,w,c
  2551  001B0C  6E3A               	movwf	___wmul@multiplier+1,c
  2552  001B0E  0E00               	movlw	0
  2553  001B10  6E3C               	movwf	___wmul@multiplicand+1,c
  2554  001B12  0E03               	movlw	3
  2555  001B14  6E3B               	movwf	___wmul@multiplicand,c
  2556  001B16  ECDE  F014         	call	___wmul	;wreg free
  2557  001B1A  0E29               	movlw	low __npowers_
  2558  001B1C  2439               	addwf	?___wmul,w,c
  2559  001B1E  6EF6               	movwf	tblptrl,c
  2560  001B20  0E10               	movlw	high __npowers_
  2561  001B22  203A               	addwfc	?___wmul+1,w,c
  2562  001B24  6EF7               	movwf	tblptrh,c
  2563  001B26                     	if	0	;There are less than 3 active tblptr bytes
  2564  001B26                     	endif
  2565  001B26  0009               	tblrd		*+
  2566  001B28  CFF5 F00D          	movff	tablat,___ftmul@f1
  2567  001B2C  0009               	tblrd		*+
  2568  001B2E  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2569  001B32  000A               	tblrd		*-
  2570  001B34  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2571  001B38  ECE4  F010         	call	___ftmul	;wreg free
  2572  001B3C  C00D  F045         	movff	?___ftmul,_fround$1316
  2573  001B40  C00E  F046         	movff	?___ftmul+1,_fround$1316+1
  2574  001B44  C00F  F047         	movff	?___ftmul+2,_fround$1316+2
  2575                           
  2576                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2577  001B48  0E00               	movlw	0
  2578  001B4A  6E3C               	movwf	___wmul@multiplicand+1,c
  2579  001B4C  0E03               	movlw	3
  2580  001B4E  6E3B               	movwf	___wmul@multiplicand,c
  2581  001B50  0E00               	movlw	0
  2582  001B52  6E2E               	movwf	___awmod@divisor+1,c
  2583  001B54  0E0A               	movlw	10
  2584  001B56  6E2D               	movwf	___awmod@divisor,c
  2585  001B58  C048  F02B         	movff	fround@prec,___awmod@dividend
  2586  001B5C  6A2C               	clrf	___awmod@dividend+1,c
  2587  001B5E  EC83  F013         	call	___awmod	;wreg free
  2588  001B62  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2589  001B66  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2590  001B6A  ECDE  F014         	call	___wmul	;wreg free
  2591  001B6E  0E29               	movlw	low __npowers_
  2592  001B70  2439               	addwf	?___wmul,w,c
  2593  001B72  6EF6               	movwf	tblptrl,c
  2594  001B74  0E10               	movlw	high __npowers_
  2595  001B76  203A               	addwfc	?___wmul+1,w,c
  2596  001B78  6EF7               	movwf	tblptrh,c
  2597  001B7A                     	if	0	;There are less than 3 active tblptr bytes
  2598  001B7A                     	endif
  2599  001B7A  0009               	tblrd		*+
  2600  001B7C  CFF5 F010          	movff	tablat,___ftmul@f2
  2601  001B80  0009               	tblrd		*+
  2602  001B82  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2603  001B86  000A               	tblrd		*-
  2604  001B88  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2605  001B8C  C045  F00D         	movff	_fround$1316,___ftmul@f1
  2606  001B90  C046  F00E         	movff	_fround$1316+1,___ftmul@f1+1
  2607  001B94  C047  F00F         	movff	_fround$1316+2,___ftmul@f1+2
  2608  001B98  ECE4  F010         	call	___ftmul	;wreg free
  2609  001B9C  C00D  F042         	movff	?___ftmul,_fround$1317
  2610  001BA0  C00E  F043         	movff	?___ftmul+1,_fround$1317+1
  2611  001BA4  C00F  F044         	movff	?___ftmul+2,_fround$1317+2
  2612                           
  2613                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2614  001BA8  C042  F00D         	movff	_fround$1317,___ftmul@f1
  2615  001BAC  C043  F00E         	movff	_fround$1317+1,___ftmul@f1+1
  2616  001BB0  C044  F00F         	movff	_fround$1317+2,___ftmul@f1+2
  2617  001BB4  0E00               	movlw	0
  2618  001BB6  6E10               	movwf	___ftmul@f2,c
  2619  001BB8  0E00               	movlw	0
  2620  001BBA  6E11               	movwf	___ftmul@f2+1,c
  2621  001BBC  0E3F               	movlw	63
  2622  001BBE  6E12               	movwf	___ftmul@f2+2,c
  2623  001BC0  ECE4  F010         	call	___ftmul	;wreg free
  2624  001BC4  D07D               	goto	L7
  2625  001BC6  D083               	goto	l112
  2626  001BC8  D062               	goto	l2054
  2627  001BCA                     l2046:
  2628                           
  2629                           ;doprnt.c: 415: else if(prec > 10)
  2630  001BCA  0E0A               	movlw	10
  2631  001BCC  6448               	cpfsgt	fround@prec,c
  2632  001BCE  D05F               	goto	l2054
  2633                           
  2634                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2635  001BD0  0E00               	movlw	0
  2636  001BD2  6E3C               	movwf	___wmul@multiplicand+1,c
  2637  001BD4  0E03               	movlw	3
  2638  001BD6  6E3B               	movwf	___wmul@multiplicand,c
  2639  001BD8  0E00               	movlw	0
  2640  001BDA  6E2E               	movwf	___awmod@divisor+1,c
  2641  001BDC  0E0A               	movlw	10
  2642  001BDE  6E2D               	movwf	___awmod@divisor,c
  2643  001BE0  C048  F02B         	movff	fround@prec,___awmod@dividend
  2644  001BE4  6A2C               	clrf	___awmod@dividend+1,c
  2645  001BE6  EC83  F013         	call	___awmod	;wreg free
  2646  001BEA  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2647  001BEE  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2648  001BF2  ECDE  F014         	call	___wmul	;wreg free
  2649  001BF6  0E29               	movlw	low __npowers_
  2650  001BF8  2439               	addwf	?___wmul,w,c
  2651  001BFA  6EF6               	movwf	tblptrl,c
  2652  001BFC  0E10               	movlw	high __npowers_
  2653  001BFE  203A               	addwfc	?___wmul+1,w,c
  2654  001C00  6EF7               	movwf	tblptrh,c
  2655  001C02                     	if	0	;There are less than 3 active tblptr bytes
  2656  001C02                     	endif
  2657  001C02  0009               	tblrd		*+
  2658  001C04  CFF5 F010          	movff	tablat,___ftmul@f2
  2659  001C08  0009               	tblrd		*+
  2660  001C0A  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2661  001C0E  000A               	tblrd		*-
  2662  001C10  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2663  001C14  0E00               	movlw	0
  2664  001C16  6E34               	movwf	___awdiv@divisor+1,c
  2665  001C18  0E0A               	movlw	10
  2666  001C1A  6E33               	movwf	___awdiv@divisor,c
  2667  001C1C  C048  F031         	movff	fround@prec,___awdiv@dividend
  2668  001C20  6A32               	clrf	___awdiv@dividend+1,c
  2669  001C22  ECA7  F012         	call	___awdiv	;wreg free
  2670  001C26  0E09               	movlw	9
  2671  001C28  2431               	addwf	?___awdiv,w,c
  2672  001C2A  6E39               	movwf	___wmul@multiplier,c
  2673  001C2C  0E00               	movlw	0
  2674  001C2E  2032               	addwfc	?___awdiv+1,w,c
  2675  001C30  6E3A               	movwf	___wmul@multiplier+1,c
  2676  001C32  0E00               	movlw	0
  2677  001C34  6E3C               	movwf	___wmul@multiplicand+1,c
  2678  001C36  0E03               	movlw	3
  2679  001C38  6E3B               	movwf	___wmul@multiplicand,c
  2680  001C3A  ECDE  F014         	call	___wmul	;wreg free
  2681  001C3E  0E29               	movlw	low __npowers_
  2682  001C40  2439               	addwf	?___wmul,w,c
  2683  001C42  6EF6               	movwf	tblptrl,c
  2684  001C44  0E10               	movlw	high __npowers_
  2685  001C46  203A               	addwfc	?___wmul+1,w,c
  2686  001C48  6EF7               	movwf	tblptrh,c
  2687  001C4A                     	if	0	;There are less than 3 active tblptr bytes
  2688  001C4A                     	endif
  2689  001C4A  0009               	tblrd		*+
  2690  001C4C  CFF5 F00D          	movff	tablat,___ftmul@f1
  2691  001C50  0009               	tblrd		*+
  2692  001C52  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2693  001C56  000A               	tblrd		*-
  2694  001C58  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2695  001C5C  ECE4  F010         	call	___ftmul	;wreg free
  2696  001C60  C00D  F045         	movff	?___ftmul,_fround$1316
  2697  001C64  C00E  F046         	movff	?___ftmul+1,_fround$1316+1
  2698  001C68  C00F  F047         	movff	?___ftmul+2,_fround$1316+2
  2699                           
  2700                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2701  001C6C  C045  F00D         	movff	_fround$1316,___ftmul@f1
  2702  001C70  C046  F00E         	movff	_fround$1316+1,___ftmul@f1+1
  2703  001C74  C047  F00F         	movff	_fround$1316+2,___ftmul@f1+2
  2704  001C78  0E00               	movlw	0
  2705  001C7A  6E10               	movwf	___ftmul@f2,c
  2706  001C7C  0E00               	movlw	0
  2707  001C7E  6E11               	movwf	___ftmul@f2+1,c
  2708  001C80  0E3F               	movlw	63
  2709  001C82  6E12               	movwf	___ftmul@f2+2,c
  2710  001C84  ECE4  F010         	call	___ftmul	;wreg free
  2711  001C88  D01B               	goto	L7
  2712  001C8A  D021               	goto	l112
  2713  001C8C  D000               	goto	l2054
  2714  001C8E                     l2054:
  2715                           
  2716                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2717  001C8E  5048               	movf	fround@prec,w,c
  2718  001C90  0D03               	mullw	3
  2719  001C92  0E29               	movlw	low __npowers_
  2720  001C94  24F3               	addwf	prodl,w,c
  2721  001C96  6EF6               	movwf	tblptrl,c
  2722  001C98  0E10               	movlw	high __npowers_
  2723  001C9A  20F4               	addwfc	prodh,w,c
  2724  001C9C  6EF7               	movwf	tblptrh,c
  2725  001C9E                     	if	0	;There are less than 3 active tblptr bytes
  2726  001C9E                     	endif
  2727  001C9E  0009               	tblrd		*+
  2728  001CA0  CFF5 F00D          	movff	tablat,___ftmul@f1
  2729  001CA4  0009               	tblrd		*+
  2730  001CA6  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2731  001CAA  000A               	tblrd		*-
  2732  001CAC  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2733  001CB0  0E00               	movlw	0
  2734  001CB2  6E10               	movwf	___ftmul@f2,c
  2735  001CB4  0E00               	movlw	0
  2736  001CB6  6E11               	movwf	___ftmul@f2+1,c
  2737  001CB8  0E3F               	movlw	63
  2738  001CBA  6E12               	movwf	___ftmul@f2+2,c
  2739  001CBC  ECE4  F010         	call	___ftmul	;wreg free
  2740  001CC0                     L7:
  2741  001CC0  C00D  F03F         	movff	?___ftmul,?_fround
  2742  001CC4  C00E  F040         	movff	?___ftmul+1,?_fround+1
  2743  001CC8  C00F  F041         	movff	?___ftmul+2,?_fround+2
  2744  001CCC  D000               	goto	l112
  2745  001CCE                     l112:
  2746  001CCE  0012               	return		;funcret
  2747  001CD0                     __end_of_fround:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           postdec1	equ	0xFE5
  2758                           fsr1l	equ	0xFE1
  2759                           postinc2	equ	0xFDE
  2760                           postdec2	equ	0xFDD
  2761                           fsr2h	equ	0xFDA
  2762                           fsr2l	equ	0xFD9
  2763                           status	equ	0xFD8
  2764                           
  2765 ;; *************** function ___wmul *****************
  2766 ;; Defined at:
  2767 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  multiplier      2   56[COMRAM] unsigned int 
  2770 ;;  multiplicand    2   58[COMRAM] unsigned int 
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  product         2   60[COMRAM] unsigned int 
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  2   56[COMRAM] unsigned int 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0, prodl, prodh
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;Total ram usage:        6 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_fround
  2792 ;;		_scale
  2793 ;;		_printf
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text5
  2798  0029BC                     __ptext5:
  2799                           	opt stack 0
  2800  0029BC                     ___wmul:
  2801                           	opt stack 28
  2802                           
  2803                           ;incstack = 0
  2804  0029BC  5039               	movf	___wmul@multiplier,w,c
  2805  0029BE  023B               	mulwf	___wmul@multiplicand,c
  2806  0029C0  CFF3 F03D          	movff	prodl,___wmul@product
  2807  0029C4  CFF4 F03E          	movff	prodh,___wmul@product+1
  2808  0029C8  5039               	movf	___wmul@multiplier,w,c
  2809  0029CA  023C               	mulwf	___wmul@multiplicand+1,c
  2810  0029CC  50F3               	movf	prodl,w,c
  2811  0029CE  263E               	addwf	___wmul@product+1,f,c
  2812  0029D0  503A               	movf	___wmul@multiplier+1,w,c
  2813  0029D2  023B               	mulwf	___wmul@multiplicand,c
  2814  0029D4  50F3               	movf	prodl,w,c
  2815  0029D6  263E               	addwf	___wmul@product+1,f,c
  2816  0029D8  C03D  F039         	movff	___wmul@product,?___wmul
  2817  0029DC  C03E  F03A         	movff	___wmul@product+1,?___wmul+1
  2818  0029E0  D000               	goto	l211
  2819  0029E2                     l211:
  2820  0029E2  0012               	return		;funcret
  2821  0029E4                     __end_of___wmul:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           postdec1	equ	0xFE5
  2832                           fsr1l	equ	0xFE1
  2833                           postinc2	equ	0xFDE
  2834                           postdec2	equ	0xFDD
  2835                           fsr2h	equ	0xFDA
  2836                           fsr2l	equ	0xFD9
  2837                           status	equ	0xFD8
  2838                           
  2839 ;; *************** function ___ftmul *****************
  2840 ;; Defined at:
  2841 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  f1              3   12[COMRAM] float 
  2844 ;;  f2              3   15[COMRAM] float 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  2847 ;;  sign            1   26[COMRAM] unsigned char 
  2848 ;;  cntr            1   25[COMRAM] unsigned char 
  2849 ;;  exp             1   21[COMRAM] unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  3   12[COMRAM] float 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2859 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;Total ram usage:       15 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    1
  2866 ;; This function calls:
  2867 ;;		___ftpack
  2868 ;; This function is called by:
  2869 ;;		_main
  2870 ;;		_fround
  2871 ;;		_scale
  2872 ;;		_printf
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text6
  2877  0021C8                     __ptext6:
  2878                           	opt stack 0
  2879  0021C8                     ___ftmul:
  2880                           	opt stack 27
  2881                           
  2882                           ;incstack = 0
  2883  0021C8  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  2884  0021CC  6A14               	clrf	(??___ftmul+1)& (0+255),c
  2885  0021CE  6A15               	clrf	(??___ftmul+2)& (0+255),c
  2886  0021D0  340E               	rlcf	___ftmul@f1+1,w,c
  2887  0021D2  3613               	rlcf	??___ftmul& (0+255),f,c
  2888  0021D4  E301               	bnc	u1681
  2889  0021D6  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  2890  0021D8                     u1681:
  2891  0021D8  5013               	movf	??___ftmul,w,c
  2892  0021DA  6E16               	movwf	___ftmul@exp,c
  2893  0021DC  5016               	movf	___ftmul@exp,w,c
  2894  0021DE  A4D8               	btfss	status,2,c
  2895  0021E0  D002               	goto	l1860
  2896  0021E2  D00E               	goto	l1862
  2897  0021E4  D06C               	goto	l640
  2898  0021E6                     l1860:
  2899  0021E6  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  2900  0021EA  6A14               	clrf	(??___ftmul+1)& (0+255),c
  2901  0021EC  6A15               	clrf	(??___ftmul+2)& (0+255),c
  2902  0021EE  3411               	rlcf	___ftmul@f2+1,w,c
  2903  0021F0  3613               	rlcf	??___ftmul& (0+255),f,c
  2904  0021F2  E301               	bnc	u1701
  2905  0021F4  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  2906  0021F6                     u1701:
  2907  0021F6  5013               	movf	??___ftmul,w,c
  2908  0021F8  6E1B               	movwf	___ftmul@sign,c
  2909  0021FA  501B               	movf	___ftmul@sign,w,c
  2910  0021FC  A4D8               	btfss	status,2,c
  2911  0021FE  D007               	goto	l1866
  2912  002200                     l1862:
  2913  002200  0E00               	movlw	0
  2914  002202  6E0D               	movwf	?___ftmul,c
  2915  002204  0E00               	movlw	0
  2916  002206  6E0E               	movwf	?___ftmul+1,c
  2917  002208  0E00               	movlw	0
  2918  00220A  6E0F               	movwf	?___ftmul+2,c
  2919  00220C  D058               	goto	l640
  2920  00220E                     l1866:
  2921  00220E  501B               	movf	___ftmul@sign,w,c
  2922  002210  0F7B               	addlw	123
  2923  002212  2616               	addwf	___ftmul@exp,f,c
  2924  002214  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  2925  002218  5012               	movf	___ftmul@f2+2,w,c
  2926  00221A  1A1B               	xorwf	___ftmul@sign,f,c
  2927  00221C  0E80               	movlw	128
  2928  00221E  161B               	andwf	___ftmul@sign,f,c
  2929  002220  8E0E               	bsf	___ftmul@f1+1,7,c
  2930  002222  8E11               	bsf	___ftmul@f2+1,7,c
  2931  002224  0EFF               	movlw	255
  2932  002226  1610               	andwf	___ftmul@f2,f,c
  2933  002228  0EFF               	movlw	255
  2934  00222A  1611               	andwf	___ftmul@f2+1,f,c
  2935  00222C  0E00               	movlw	0
  2936  00222E  1612               	andwf	___ftmul@f2+2,f,c
  2937  002230  0E00               	movlw	0
  2938  002232  6E17               	movwf	___ftmul@f3_as_product,c
  2939  002234  0E00               	movlw	0
  2940  002236  6E18               	movwf	___ftmul@f3_as_product+1,c
  2941  002238  0E00               	movlw	0
  2942  00223A  6E19               	movwf	___ftmul@f3_as_product+2,c
  2943  00223C  0E07               	movlw	7
  2944  00223E  6E1A               	movwf	___ftmul@cntr,c
  2945  002240  D000               	goto	l1880
  2946  002242                     l1880:
  2947  002242  A00D               	btfss	___ftmul@f1,0,c
  2948  002244  D007               	goto	l1884
  2949  002246  5010               	movf	___ftmul@f2,w,c
  2950  002248  2617               	addwf	___ftmul@f3_as_product,f,c
  2951  00224A  5011               	movf	___ftmul@f2+1,w,c
  2952  00224C  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  2953  00224E  5012               	movf	___ftmul@f2+2,w,c
  2954  002250  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  2955  002252  D000               	goto	l1884
  2956  002254                     l1884:
  2957  002254  90D8               	bcf	status,0,c
  2958  002256  320F               	rrcf	___ftmul@f1+2,f,c
  2959  002258  320E               	rrcf	___ftmul@f1+1,f,c
  2960  00225A  320D               	rrcf	___ftmul@f1,f,c
  2961  00225C  90D8               	bcf	status,0,c
  2962  00225E  3610               	rlcf	___ftmul@f2,f,c
  2963  002260  3611               	rlcf	___ftmul@f2+1,f,c
  2964  002262  3612               	rlcf	___ftmul@f2+2,f,c
  2965  002264  2E1A               	decfsz	___ftmul@cntr,f,c
  2966  002266  D7ED               	goto	l1880
  2967  002268  D000               	goto	l1888
  2968  00226A                     l1888:
  2969  00226A  0E09               	movlw	9
  2970  00226C  6E1A               	movwf	___ftmul@cntr,c
  2971  00226E  D000               	goto	l1890
  2972  002270                     l1890:
  2973  002270  A00D               	btfss	___ftmul@f1,0,c
  2974  002272  D007               	goto	l1894
  2975  002274  5010               	movf	___ftmul@f2,w,c
  2976  002276  2617               	addwf	___ftmul@f3_as_product,f,c
  2977  002278  5011               	movf	___ftmul@f2+1,w,c
  2978  00227A  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  2979  00227C  5012               	movf	___ftmul@f2+2,w,c
  2980  00227E  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  2981  002280  D000               	goto	l1894
  2982  002282                     l1894:
  2983  002282  90D8               	bcf	status,0,c
  2984  002284  320F               	rrcf	___ftmul@f1+2,f,c
  2985  002286  320E               	rrcf	___ftmul@f1+1,f,c
  2986  002288  320D               	rrcf	___ftmul@f1,f,c
  2987  00228A  90D8               	bcf	status,0,c
  2988  00228C  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  2989  00228E  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  2990  002290  3217               	rrcf	___ftmul@f3_as_product,f,c
  2991  002292  2E1A               	decfsz	___ftmul@cntr,f,c
  2992  002294  D7ED               	goto	l1890
  2993  002296  D000               	goto	l1898
  2994  002298                     l1898:
  2995  002298  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2996  00229C  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2997  0022A0  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2998  0022A4  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  2999  0022A8  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  3000  0022AC  EC44  F012         	call	___ftpack	;wreg free
  3001  0022B0  C001  F00D         	movff	?___ftpack,?___ftmul
  3002  0022B4  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  3003  0022B8  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  3004  0022BC  D000               	goto	l640
  3005  0022BE                     l640:
  3006  0022BE  0012               	return		;funcret
  3007  0022C0                     __end_of___ftmul:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           postinc0	equ	0xFEE
  3016                           wreg	equ	0xFE8
  3017                           postdec1	equ	0xFE5
  3018                           fsr1l	equ	0xFE1
  3019                           postinc2	equ	0xFDE
  3020                           postdec2	equ	0xFDD
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function ___awmod *****************
  3026 ;; Defined at:
  3027 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  dividend        2   42[COMRAM] int 
  3030 ;;  divisor         2   44[COMRAM] int 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  sign            1   47[COMRAM] unsigned char 
  3033 ;;  counter         1   46[COMRAM] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  2   42[COMRAM] int 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;Total ram usage:        6 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_main
  3053 ;;		_fround
  3054 ;;		_scale
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text7
  3059  002706                     __ptext7:
  3060                           	opt stack 0
  3061  002706                     ___awmod:
  3062                           	opt stack 28
  3063                           
  3064                           ;incstack = 0
  3065  002706  0E00               	movlw	0
  3066  002708  6E30               	movwf	___awmod@sign,c
  3067  00270A  AE2C               	btfss	___awmod@dividend+1,7,c
  3068  00270C  D007               	goto	l1954
  3069  00270E  6C2B               	negf	___awmod@dividend,c
  3070  002710  1E2C               	comf	___awmod@dividend+1,f,c
  3071  002712  B0D8               	btfsc	status,0,c
  3072  002714  2A2C               	incf	___awmod@dividend+1,f,c
  3073  002716  0E01               	movlw	1
  3074  002718  6E30               	movwf	___awmod@sign,c
  3075  00271A  D000               	goto	l1954
  3076  00271C                     l1954:
  3077  00271C  AE2E               	btfss	___awmod@divisor+1,7,c
  3078  00271E  D005               	goto	l1958
  3079  002720  6C2D               	negf	___awmod@divisor,c
  3080  002722  1E2E               	comf	___awmod@divisor+1,f,c
  3081  002724  B0D8               	btfsc	status,0,c
  3082  002726  2A2E               	incf	___awmod@divisor+1,f,c
  3083  002728  D000               	goto	l1958
  3084  00272A                     l1958:
  3085  00272A  502D               	movf	___awmod@divisor,w,c
  3086  00272C  102E               	iorwf	___awmod@divisor+1,w,c
  3087  00272E  B4D8               	btfsc	status,2,c
  3088  002730  D01D               	goto	l1974
  3089  002732  0E01               	movlw	1
  3090  002734  6E2F               	movwf	___awmod@counter,c
  3091  002736  D005               	goto	l1964
  3092  002738                     l1962:
  3093  002738  90D8               	bcf	status,0,c
  3094  00273A  362D               	rlcf	___awmod@divisor,f,c
  3095  00273C  362E               	rlcf	___awmod@divisor+1,f,c
  3096  00273E  2A2F               	incf	___awmod@counter,f,c
  3097  002740  D000               	goto	l1964
  3098  002742                     l1964:
  3099  002742  BE2E               	btfsc	___awmod@divisor+1,7,c
  3100  002744  D002               	goto	l1966
  3101  002746  D7F8               	goto	l1962
  3102  002748  D000               	goto	l1966
  3103  00274A                     l1966:
  3104  00274A  502D               	movf	___awmod@divisor,w,c
  3105  00274C  5C2B               	subwf	___awmod@dividend,w,c
  3106  00274E  502E               	movf	___awmod@divisor+1,w,c
  3107  002750  582C               	subwfb	___awmod@dividend+1,w,c
  3108  002752  A0D8               	btfss	status,0,c
  3109  002754  D005               	goto	l1970
  3110  002756  502D               	movf	___awmod@divisor,w,c
  3111  002758  5E2B               	subwf	___awmod@dividend,f,c
  3112  00275A  502E               	movf	___awmod@divisor+1,w,c
  3113  00275C  5A2C               	subwfb	___awmod@dividend+1,f,c
  3114  00275E  D000               	goto	l1970
  3115  002760                     l1970:
  3116  002760  90D8               	bcf	status,0,c
  3117  002762  322E               	rrcf	___awmod@divisor+1,f,c
  3118  002764  322D               	rrcf	___awmod@divisor,f,c
  3119  002766  2E2F               	decfsz	___awmod@counter,f,c
  3120  002768  D7F0               	goto	l1966
  3121  00276A  D000               	goto	l1974
  3122  00276C                     l1974:
  3123  00276C  5030               	movf	___awmod@sign,w,c
  3124  00276E  B4D8               	btfsc	status,2,c
  3125  002770  D005               	goto	l1978
  3126  002772  6C2B               	negf	___awmod@dividend,c
  3127  002774  1E2C               	comf	___awmod@dividend+1,f,c
  3128  002776  B0D8               	btfsc	status,0,c
  3129  002778  2A2C               	incf	___awmod@dividend+1,f,c
  3130  00277A  D000               	goto	l1978
  3131  00277C                     l1978:
  3132  00277C  C02B  F02B         	movff	___awmod@dividend,?___awmod
  3133  002780  C02C  F02C         	movff	___awmod@dividend+1,?___awmod+1
  3134  002784  D000               	goto	l417
  3135  002786                     l417:
  3136  002786  0012               	return		;funcret
  3137  002788                     __end_of___awmod:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postdec1	equ	0xFE5
  3148                           fsr1l	equ	0xFE1
  3149                           postinc2	equ	0xFDE
  3150                           postdec2	equ	0xFDD
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function ___awdiv *****************
  3156 ;; Defined at:
  3157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  dividend        2   48[COMRAM] int 
  3160 ;;  divisor         2   50[COMRAM] int 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  quotient        2   54[COMRAM] int 
  3163 ;;  sign            1   53[COMRAM] unsigned char 
  3164 ;;  counter         1   52[COMRAM] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  2   48[COMRAM] int 
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3174 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3177 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;Total ram usage:        8 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; This function calls:
  3181 ;;		Nothing
  3182 ;; This function is called by:
  3183 ;;		_fround
  3184 ;;		_scale
  3185 ;;		_printf
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text8
  3190  00254E                     __ptext8:
  3191                           	opt stack 0
  3192  00254E                     ___awdiv:
  3193                           	opt stack 28
  3194                           
  3195                           ;incstack = 0
  3196  00254E  0E00               	movlw	0
  3197  002550  6E36               	movwf	___awdiv@sign,c
  3198  002552  AE34               	btfss	___awdiv@divisor+1,7,c
  3199  002554  D007               	goto	l1910
  3200  002556  6C33               	negf	___awdiv@divisor,c
  3201  002558  1E34               	comf	___awdiv@divisor+1,f,c
  3202  00255A  B0D8               	btfsc	status,0,c
  3203  00255C  2A34               	incf	___awdiv@divisor+1,f,c
  3204  00255E  0E01               	movlw	1
  3205  002560  6E36               	movwf	___awdiv@sign,c
  3206  002562  D000               	goto	l1910
  3207  002564                     l1910:
  3208  002564  AE32               	btfss	___awdiv@dividend+1,7,c
  3209  002566  D007               	goto	l1916
  3210  002568  6C31               	negf	___awdiv@dividend,c
  3211  00256A  1E32               	comf	___awdiv@dividend+1,f,c
  3212  00256C  B0D8               	btfsc	status,0,c
  3213  00256E  2A32               	incf	___awdiv@dividend+1,f,c
  3214  002570  0E01               	movlw	1
  3215  002572  1A36               	xorwf	___awdiv@sign,f,c
  3216  002574  D000               	goto	l1916
  3217  002576                     l1916:
  3218  002576  0E00               	movlw	0
  3219  002578  6E38               	movwf	___awdiv@quotient+1,c
  3220  00257A  0E00               	movlw	0
  3221  00257C  6E37               	movwf	___awdiv@quotient,c
  3222  00257E  5033               	movf	___awdiv@divisor,w,c
  3223  002580  1034               	iorwf	___awdiv@divisor+1,w,c
  3224  002582  B4D8               	btfsc	status,2,c
  3225  002584  D021               	goto	l1938
  3226  002586  0E01               	movlw	1
  3227  002588  6E35               	movwf	___awdiv@counter,c
  3228  00258A  D005               	goto	l1924
  3229  00258C                     l1922:
  3230  00258C  90D8               	bcf	status,0,c
  3231  00258E  3633               	rlcf	___awdiv@divisor,f,c
  3232  002590  3634               	rlcf	___awdiv@divisor+1,f,c
  3233  002592  2A35               	incf	___awdiv@counter,f,c
  3234  002594  D000               	goto	l1924
  3235  002596                     l1924:
  3236  002596  BE34               	btfsc	___awdiv@divisor+1,7,c
  3237  002598  D002               	goto	l1926
  3238  00259A  D7F8               	goto	l1922
  3239  00259C  D000               	goto	l1926
  3240  00259E                     l1926:
  3241  00259E  90D8               	bcf	status,0,c
  3242  0025A0  3637               	rlcf	___awdiv@quotient,f,c
  3243  0025A2  3638               	rlcf	___awdiv@quotient+1,f,c
  3244  0025A4  5033               	movf	___awdiv@divisor,w,c
  3245  0025A6  5C31               	subwf	___awdiv@dividend,w,c
  3246  0025A8  5034               	movf	___awdiv@divisor+1,w,c
  3247  0025AA  5832               	subwfb	___awdiv@dividend+1,w,c
  3248  0025AC  A0D8               	btfss	status,0,c
  3249  0025AE  D006               	goto	l1934
  3250  0025B0  5033               	movf	___awdiv@divisor,w,c
  3251  0025B2  5E31               	subwf	___awdiv@dividend,f,c
  3252  0025B4  5034               	movf	___awdiv@divisor+1,w,c
  3253  0025B6  5A32               	subwfb	___awdiv@dividend+1,f,c
  3254  0025B8  8037               	bsf	___awdiv@quotient,0,c
  3255  0025BA  D000               	goto	l1934
  3256  0025BC                     l1934:
  3257  0025BC  90D8               	bcf	status,0,c
  3258  0025BE  3234               	rrcf	___awdiv@divisor+1,f,c
  3259  0025C0  3233               	rrcf	___awdiv@divisor,f,c
  3260  0025C2  2E35               	decfsz	___awdiv@counter,f,c
  3261  0025C4  D7EC               	goto	l1926
  3262  0025C6  D000               	goto	l1938
  3263  0025C8                     l1938:
  3264  0025C8  5036               	movf	___awdiv@sign,w,c
  3265  0025CA  B4D8               	btfsc	status,2,c
  3266  0025CC  D005               	goto	l1942
  3267  0025CE  6C37               	negf	___awdiv@quotient,c
  3268  0025D0  1E38               	comf	___awdiv@quotient+1,f,c
  3269  0025D2  B0D8               	btfsc	status,0,c
  3270  0025D4  2A38               	incf	___awdiv@quotient+1,f,c
  3271  0025D6  D000               	goto	l1942
  3272  0025D8                     l1942:
  3273  0025D8  C037  F031         	movff	___awdiv@quotient,?___awdiv
  3274  0025DC  C038  F032         	movff	___awdiv@quotient+1,?___awdiv+1
  3275  0025E0  D000               	goto	l404
  3276  0025E2                     l404:
  3277  0025E2  0012               	return		;funcret
  3278  0025E4                     __end_of___awdiv:
  3279                           	opt stack 0
  3280                           tblptru	equ	0xFF8
  3281                           tblptrh	equ	0xFF7
  3282                           tblptrl	equ	0xFF6
  3283                           tablat	equ	0xFF5
  3284                           prodh	equ	0xFF4
  3285                           prodl	equ	0xFF3
  3286                           postinc0	equ	0xFEE
  3287                           wreg	equ	0xFE8
  3288                           postdec1	equ	0xFE5
  3289                           fsr1l	equ	0xFE1
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           fsr2h	equ	0xFDA
  3293                           fsr2l	equ	0xFD9
  3294                           status	equ	0xFD8
  3295                           
  3296 ;; *************** function __tdiv_to_l_ *****************
  3297 ;; Defined at:
  3298 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  f1              3    0[COMRAM] float 
  3301 ;;  f2              3    3[COMRAM] float 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  quot            4    9[COMRAM] unsigned long 
  3304 ;;  exp1            1   14[COMRAM] unsigned char 
  3305 ;;  cntr            1   13[COMRAM] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  4    0[COMRAM] unsigned long 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3315 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;Total ram usage:       15 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_printf
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text9
  3329  001FAE                     __ptext9:
  3330                           	opt stack 0
  3331  001FAE                     __tdiv_to_l_:
  3332                           	opt stack 29
  3333                           
  3334                           ;incstack = 0
  3335  001FAE  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3336  001FB2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3337  001FB4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3338  001FB6  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3339  001FB8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3340  001FBA  E301               	bnc	u2041
  3341  001FBC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3342  001FBE                     u2041:
  3343  001FBE  5007               	movf	??__tdiv_to_l_,w,c
  3344  001FC0  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3345  001FC2  500F               	movf	__tdiv_to_l_@exp1,w,c
  3346  001FC4  A4D8               	btfss	status,2,c
  3347  001FC6  D002               	goto	l2102
  3348  001FC8  D05D               	goto	l2144
  3349  001FCA  D078               	goto	l616
  3350  001FCC                     l2102:
  3351  001FCC  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3352  001FD0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3353  001FD2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3354  001FD4  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3355  001FD6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3356  001FD8  E301               	bnc	u2061
  3357  001FDA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3358  001FDC                     u2061:
  3359  001FDC  5007               	movf	??__tdiv_to_l_,w,c
  3360  001FDE  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3361  001FE0  500E               	movf	__tdiv_to_l_@cntr,w,c
  3362  001FE2  A4D8               	btfss	status,2,c
  3363  001FE4  D002               	goto	l2108
  3364  001FE6  D04E               	goto	l2144
  3365  001FE8  D069               	goto	l616
  3366  001FEA                     l2108:
  3367  001FEA  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3368  001FEC  0EFF               	movlw	255
  3369  001FEE  1601               	andwf	__tdiv_to_l_@f1,f,c
  3370  001FF0  0EFF               	movlw	255
  3371  001FF2  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3372  001FF4  0E00               	movlw	0
  3373  001FF6  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3374  001FF8  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3375  001FFA  0EFF               	movlw	255
  3376  001FFC  1604               	andwf	__tdiv_to_l_@f2,f,c
  3377  001FFE  0EFF               	movlw	255
  3378  002000  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3379  002002  0E00               	movlw	0
  3380  002004  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3381  002006  0E00               	movlw	0
  3382  002008  6E0A               	movwf	__tdiv_to_l_@quot,c
  3383  00200A  0E00               	movlw	0
  3384  00200C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3385  00200E  0E00               	movlw	0
  3386  002010  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3387  002012  0E00               	movlw	0
  3388  002014  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3389  002016  0E7F               	movlw	127
  3390  002018  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3391  00201A  500E               	movf	__tdiv_to_l_@cntr,w,c
  3392  00201C  0F98               	addlw	152
  3393  00201E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3394  002020  0E18               	movlw	24
  3395  002022  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3396  002024                     l618:
  3397  002024  90D8               	bcf	status,0,c
  3398  002026  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3399  002028  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3400  00202A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3401  00202C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3402  00202E  5004               	movf	__tdiv_to_l_@f2,w,c
  3403  002030  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3404  002032  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3405  002034  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3406  002036  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3407  002038  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3408  00203A  A0D8               	btfss	status,0,c
  3409  00203C  D007               	goto	l619
  3410  00203E  5004               	movf	__tdiv_to_l_@f2,w,c
  3411  002040  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3412  002042  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3413  002044  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3414  002046  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3415  002048  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3416  00204A  800A               	bsf	__tdiv_to_l_@quot,0,c
  3417  00204C                     l619:
  3418  00204C  90D8               	bcf	status,0,c
  3419  00204E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3420  002050  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3421  002052  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3422  002054  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3423  002056  D7E6               	goto	l618
  3424  002058  D000               	goto	l2130
  3425  00205A                     l2130:
  3426  00205A  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3427  00205C  D010               	goto	l2142
  3428  00205E  500F               	movf	__tdiv_to_l_@exp1,w,c
  3429  002060  0A80               	xorlw	128
  3430  002062  0F97               	addlw	151
  3431  002064  B0D8               	btfsc	status,0,c
  3432  002066  D003               	goto	l2138
  3433  002068  D00D               	goto	l2144
  3434  00206A  D028               	goto	l616
  3435  00206C  D000               	goto	l2138
  3436  00206E                     l2138:
  3437  00206E  90D8               	bcf	status,0,c
  3438  002070  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3439  002072  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3440  002074  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3441  002076  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3442  002078  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3443  00207A  D7F9               	goto	l2138
  3444  00207C  D017               	goto	l625
  3445  00207E                     l2142:
  3446  00207E  0E17               	movlw	23
  3447  002080  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3448  002082  D011               	goto	l2150
  3449  002084                     l2144:
  3450  002084  0E00               	movlw	0
  3451  002086  6E01               	movwf	?__tdiv_to_l_,c
  3452  002088  0E00               	movlw	0
  3453  00208A  6E02               	movwf	?__tdiv_to_l_+1,c
  3454  00208C  0E00               	movlw	0
  3455  00208E  6E03               	movwf	?__tdiv_to_l_+2,c
  3456  002090  0E00               	movlw	0
  3457  002092  6E04               	movwf	?__tdiv_to_l_+3,c
  3458  002094  D013               	goto	l616
  3459  002096  D007               	goto	l2150
  3460  002098                     l2148:
  3461  002098  90D8               	bcf	status,0,c
  3462  00209A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3463  00209C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3464  00209E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3465  0020A0  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3466  0020A2  060F               	decf	__tdiv_to_l_@exp1,f,c
  3467  0020A4  D000               	goto	l2150
  3468  0020A6                     l2150:
  3469  0020A6  500F               	movf	__tdiv_to_l_@exp1,w,c
  3470  0020A8  A4D8               	btfss	status,2,c
  3471  0020AA  D7F6               	goto	l2148
  3472  0020AC                     l625:
  3473  0020AC  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3474  0020B0  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3475  0020B4  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3476  0020B8  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3477  0020BC                     l616:
  3478  0020BC  0012               	return		;funcret
  3479  0020BE                     __end_of__tdiv_to_l_:
  3480                           	opt stack 0
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           prodh	equ	0xFF4
  3486                           prodl	equ	0xFF3
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           fsr1l	equ	0xFE1
  3491                           postinc2	equ	0xFDE
  3492                           postdec2	equ	0xFDD
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function __div_to_l_ *****************
  3498 ;; Defined at:
  3499 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;  f1              3    0[COMRAM] unsigned long 
  3502 ;;  f2              3    3[COMRAM] unsigned long 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  quot            4    6[COMRAM] unsigned long 
  3505 ;;  exp1            1   11[COMRAM] unsigned char 
  3506 ;;  cntr            1   10[COMRAM] unsigned char 
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  4    0[COMRAM] unsigned long 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3516 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;Total ram usage:       12 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_printf
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text10
  3530  0020BE                     __ptext10:
  3531                           	opt stack 0
  3532  0020BE                     __div_to_l_:
  3533                           	opt stack 29
  3534                           
  3535                           ;incstack = 0
  3536  0020BE  3403               	rlcf	__div_to_l_@f1+2,w,c
  3537  0020C0  3404               	rlcf	__div_to_l_@f1+3,w,c
  3538  0020C2  6E0C               	movwf	__div_to_l_@exp1,c
  3539  0020C4  500C               	movf	__div_to_l_@exp1,w,c
  3540  0020C6  A4D8               	btfss	status,2,c
  3541  0020C8  D002               	goto	l2158
  3542  0020CA  D061               	goto	l2204
  3543  0020CC  D07C               	goto	l495
  3544  0020CE                     l2158:
  3545  0020CE  3406               	rlcf	__div_to_l_@f2+2,w,c
  3546  0020D0  3407               	rlcf	__div_to_l_@f2+3,w,c
  3547  0020D2  6E0B               	movwf	__div_to_l_@cntr,c
  3548  0020D4  500B               	movf	__div_to_l_@cntr,w,c
  3549  0020D6  A4D8               	btfss	status,2,c
  3550  0020D8  D002               	goto	l2164
  3551  0020DA  D059               	goto	l2204
  3552  0020DC  D074               	goto	l495
  3553  0020DE                     l2164:
  3554  0020DE  8E03               	bsf	__div_to_l_@f1+2,7,c
  3555  0020E0  0EFF               	movlw	255
  3556  0020E2  1601               	andwf	__div_to_l_@f1,f,c
  3557  0020E4  0EFF               	movlw	255
  3558  0020E6  1602               	andwf	__div_to_l_@f1+1,f,c
  3559  0020E8  0EFF               	movlw	255
  3560  0020EA  1603               	andwf	__div_to_l_@f1+2,f,c
  3561  0020EC  0E00               	movlw	0
  3562  0020EE  1604               	andwf	__div_to_l_@f1+3,f,c
  3563  0020F0  8E06               	bsf	__div_to_l_@f2+2,7,c
  3564  0020F2  0EFF               	movlw	255
  3565  0020F4  1604               	andwf	__div_to_l_@f2,f,c
  3566  0020F6  0EFF               	movlw	255
  3567  0020F8  1605               	andwf	__div_to_l_@f2+1,f,c
  3568  0020FA  0EFF               	movlw	255
  3569  0020FC  1606               	andwf	__div_to_l_@f2+2,f,c
  3570  0020FE  0E00               	movlw	0
  3571  002100  1607               	andwf	__div_to_l_@f2+3,f,c
  3572  002102  0E00               	movlw	0
  3573  002104  6E07               	movwf	__div_to_l_@quot,c
  3574  002106  0E00               	movlw	0
  3575  002108  6E08               	movwf	__div_to_l_@quot+1,c
  3576  00210A  0E00               	movlw	0
  3577  00210C  6E09               	movwf	__div_to_l_@quot+2,c
  3578  00210E  0E00               	movlw	0
  3579  002110  6E0A               	movwf	__div_to_l_@quot+3,c
  3580  002112  0E7F               	movlw	127
  3581  002114  5E0C               	subwf	__div_to_l_@exp1,f,c
  3582  002116  500B               	movf	__div_to_l_@cntr,w,c
  3583  002118  0FA0               	addlw	160
  3584  00211A  5E0C               	subwf	__div_to_l_@exp1,f,c
  3585  00211C  0E20               	movlw	32
  3586  00211E  6E0B               	movwf	__div_to_l_@cntr,c
  3587  002120  D000               	goto	l2178
  3588  002122                     l2178:
  3589  002122  90D8               	bcf	status,0,c
  3590  002124  3607               	rlcf	__div_to_l_@quot,f,c
  3591  002126  3608               	rlcf	__div_to_l_@quot+1,f,c
  3592  002128  3609               	rlcf	__div_to_l_@quot+2,f,c
  3593  00212A  360A               	rlcf	__div_to_l_@quot+3,f,c
  3594  00212C  5004               	movf	__div_to_l_@f2,w,c
  3595  00212E  5C01               	subwf	__div_to_l_@f1,w,c
  3596  002130  5005               	movf	__div_to_l_@f2+1,w,c
  3597  002132  5802               	subwfb	__div_to_l_@f1+1,w,c
  3598  002134  5006               	movf	__div_to_l_@f2+2,w,c
  3599  002136  5803               	subwfb	__div_to_l_@f1+2,w,c
  3600  002138  5007               	movf	__div_to_l_@f2+3,w,c
  3601  00213A  5804               	subwfb	__div_to_l_@f1+3,w,c
  3602  00213C  A0D8               	btfss	status,0,c
  3603  00213E  D00A               	goto	l2186
  3604  002140  5004               	movf	__div_to_l_@f2,w,c
  3605  002142  5E01               	subwf	__div_to_l_@f1,f,c
  3606  002144  5005               	movf	__div_to_l_@f2+1,w,c
  3607  002146  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3608  002148  5006               	movf	__div_to_l_@f2+2,w,c
  3609  00214A  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3610  00214C  5007               	movf	__div_to_l_@f2+3,w,c
  3611  00214E  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3612  002150  8007               	bsf	__div_to_l_@quot,0,c
  3613  002152  D000               	goto	l2186
  3614  002154                     l2186:
  3615  002154  90D8               	bcf	status,0,c
  3616  002156  3601               	rlcf	__div_to_l_@f1,f,c
  3617  002158  3602               	rlcf	__div_to_l_@f1+1,f,c
  3618  00215A  3603               	rlcf	__div_to_l_@f1+2,f,c
  3619  00215C  3604               	rlcf	__div_to_l_@f1+3,f,c
  3620  00215E  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3621  002160  D7E0               	goto	l2178
  3622  002162  D000               	goto	l2190
  3623  002164                     l2190:
  3624  002164  AE0C               	btfss	__div_to_l_@exp1,7,c
  3625  002166  D010               	goto	l2202
  3626  002168  500C               	movf	__div_to_l_@exp1,w,c
  3627  00216A  0A80               	xorlw	128
  3628  00216C  0F9F               	addlw	159
  3629  00216E  B0D8               	btfsc	status,0,c
  3630  002170  D003               	goto	l2198
  3631  002172  D00D               	goto	l2204
  3632  002174  D028               	goto	l495
  3633  002176  D000               	goto	l2198
  3634  002178                     l2198:
  3635  002178  90D8               	bcf	status,0,c
  3636  00217A  320A               	rrcf	__div_to_l_@quot+3,f,c
  3637  00217C  3209               	rrcf	__div_to_l_@quot+2,f,c
  3638  00217E  3208               	rrcf	__div_to_l_@quot+1,f,c
  3639  002180  3207               	rrcf	__div_to_l_@quot,f,c
  3640  002182  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3641  002184  D7F9               	goto	l2198
  3642  002186  D017               	goto	l504
  3643  002188                     l2202:
  3644  002188  0E1F               	movlw	31
  3645  00218A  640C               	cpfsgt	__div_to_l_@exp1,c
  3646  00218C  D011               	goto	l2210
  3647  00218E                     l2204:
  3648  00218E  0E00               	movlw	0
  3649  002190  6E01               	movwf	?__div_to_l_,c
  3650  002192  0E00               	movlw	0
  3651  002194  6E02               	movwf	?__div_to_l_+1,c
  3652  002196  0E00               	movlw	0
  3653  002198  6E03               	movwf	?__div_to_l_+2,c
  3654  00219A  0E00               	movlw	0
  3655  00219C  6E04               	movwf	?__div_to_l_+3,c
  3656  00219E  D013               	goto	l495
  3657  0021A0  D007               	goto	l2210
  3658  0021A2                     l2208:
  3659  0021A2  90D8               	bcf	status,0,c
  3660  0021A4  3607               	rlcf	__div_to_l_@quot,f,c
  3661  0021A6  3608               	rlcf	__div_to_l_@quot+1,f,c
  3662  0021A8  3609               	rlcf	__div_to_l_@quot+2,f,c
  3663  0021AA  360A               	rlcf	__div_to_l_@quot+3,f,c
  3664  0021AC  060C               	decf	__div_to_l_@exp1,f,c
  3665  0021AE  D000               	goto	l2210
  3666  0021B0                     l2210:
  3667  0021B0  500C               	movf	__div_to_l_@exp1,w,c
  3668  0021B2  A4D8               	btfss	status,2,c
  3669  0021B4  D7F6               	goto	l2208
  3670  0021B6                     l504:
  3671  0021B6  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3672  0021BA  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3673  0021BE  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3674  0021C2  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3675  0021C6                     l495:
  3676  0021C6  0012               	return		;funcret
  3677  0021C8                     __end_of__div_to_l_:
  3678                           	opt stack 0
  3679                           tblptru	equ	0xFF8
  3680                           tblptrh	equ	0xFF7
  3681                           tblptrl	equ	0xFF6
  3682                           tablat	equ	0xFF5
  3683                           prodh	equ	0xFF4
  3684                           prodl	equ	0xFF3
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           postdec1	equ	0xFE5
  3688                           fsr1l	equ	0xFE1
  3689                           postinc2	equ	0xFDE
  3690                           postdec2	equ	0xFDD
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function ___lltoft *****************
  3696 ;; Defined at:
  3697 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  c               4    8[COMRAM] unsigned long 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  exp             1   16[COMRAM] unsigned char 
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  3    8[COMRAM] float 
  3704 ;; Registers used:
  3705 ;;		wreg, status,2, status,0, cstack
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3711 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;Total ram usage:        9 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; Hardware stack levels required when called:    1
  3718 ;; This function calls:
  3719 ;;		___ftpack
  3720 ;; This function is called by:
  3721 ;;		_printf
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text11
  3726  002868                     __ptext11:
  3727                           	opt stack 0
  3728  002868                     ___lltoft:
  3729                           	opt stack 28
  3730                           
  3731                           ;incstack = 0
  3732  002868  0E8E               	movlw	142
  3733  00286A  6E11               	movwf	___lltoft@exp,c
  3734  00286C  D007               	goto	l2330
  3735  00286E                     l2328:
  3736  00286E  90D8               	bcf	status,0,c
  3737  002870  320C               	rrcf	___lltoft@c+3,f,c
  3738  002872  320B               	rrcf	___lltoft@c+2,f,c
  3739  002874  320A               	rrcf	___lltoft@c+1,f,c
  3740  002876  3209               	rrcf	___lltoft@c,f,c
  3741  002878  2A11               	incf	___lltoft@exp,f,c
  3742  00287A  D000               	goto	l2330
  3743  00287C                     l2330:
  3744  00287C  0E00               	movlw	0
  3745  00287E  1409               	andwf	___lltoft@c,w,c
  3746  002880  6E0D               	movwf	??___lltoft& (0+255),c
  3747  002882  0E00               	movlw	0
  3748  002884  140A               	andwf	___lltoft@c+1,w,c
  3749  002886  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3750  002888  0E00               	movlw	0
  3751  00288A  140B               	andwf	___lltoft@c+2,w,c
  3752  00288C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3753  00288E  0EFF               	movlw	255
  3754  002890  140C               	andwf	___lltoft@c+3,w,c
  3755  002892  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3756  002894  500D               	movf	??___lltoft,w,c
  3757  002896  100E               	iorwf	??___lltoft+1,w,c
  3758  002898  100F               	iorwf	??___lltoft+2,w,c
  3759  00289A  1010               	iorwf	??___lltoft+3,w,c
  3760  00289C  A4D8               	btfss	status,2,c
  3761  00289E  D7E7               	goto	l2328
  3762  0028A0  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3763  0028A4  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3764  0028A8  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3765  0028AC  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3766  0028B0  0E00               	movlw	0
  3767  0028B2  6E05               	movwf	___ftpack@sign,c
  3768  0028B4  EC44  F012         	call	___ftpack	;wreg free
  3769  0028B8  C001  F009         	movff	?___ftpack,?___lltoft
  3770  0028BC  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3771  0028C0  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3772  0028C4  D000               	goto	l730
  3773  0028C6                     l730:
  3774  0028C6  0012               	return		;funcret
  3775  0028C8                     __end_of___lltoft:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           postinc0	equ	0xFEE
  3784                           wreg	equ	0xFE8
  3785                           postdec1	equ	0xFE5
  3786                           fsr1l	equ	0xFE1
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function ___llmod *****************
  3794 ;; Defined at:
  3795 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  dividend        4    0[COMRAM] unsigned long 
  3798 ;;  divisor         4    4[COMRAM] unsigned long 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  counter         1    8[COMRAM] unsigned char 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  4    0[COMRAM] unsigned long 
  3803 ;; Registers used:
  3804 ;;		wreg, status,2, status,0
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3810 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;Total ram usage:        9 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_printf
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text12
  3824  002788                     __ptext12:
  3825                           	opt stack 0
  3826  002788                     ___llmod:
  3827                           	opt stack 29
  3828                           
  3829                           ;incstack = 0
  3830  002788  5005               	movf	___llmod@divisor,w,c
  3831  00278A  1006               	iorwf	___llmod@divisor+1,w,c
  3832  00278C  1007               	iorwf	___llmod@divisor+2,w,c
  3833  00278E  1008               	iorwf	___llmod@divisor+3,w,c
  3834  002790  B4D8               	btfsc	status,2,c
  3835  002792  D029               	goto	l710
  3836  002794  0E01               	movlw	1
  3837  002796  6E09               	movwf	___llmod@counter,c
  3838  002798  D007               	goto	l2316
  3839  00279A                     l2314:
  3840  00279A  90D8               	bcf	status,0,c
  3841  00279C  3605               	rlcf	___llmod@divisor,f,c
  3842  00279E  3606               	rlcf	___llmod@divisor+1,f,c
  3843  0027A0  3607               	rlcf	___llmod@divisor+2,f,c
  3844  0027A2  3608               	rlcf	___llmod@divisor+3,f,c
  3845  0027A4  2A09               	incf	___llmod@counter,f,c
  3846  0027A6  D000               	goto	l2316
  3847  0027A8                     l2316:
  3848  0027A8  BE08               	btfsc	___llmod@divisor+3,7,c
  3849  0027AA  D002               	goto	l2318
  3850  0027AC  D7F6               	goto	l2314
  3851  0027AE  D000               	goto	l2318
  3852  0027B0                     l2318:
  3853  0027B0  5005               	movf	___llmod@divisor,w,c
  3854  0027B2  5C01               	subwf	___llmod@dividend,w,c
  3855  0027B4  5006               	movf	___llmod@divisor+1,w,c
  3856  0027B6  5802               	subwfb	___llmod@dividend+1,w,c
  3857  0027B8  5007               	movf	___llmod@divisor+2,w,c
  3858  0027BA  5803               	subwfb	___llmod@dividend+2,w,c
  3859  0027BC  5008               	movf	___llmod@divisor+3,w,c
  3860  0027BE  5804               	subwfb	___llmod@dividend+3,w,c
  3861  0027C0  A0D8               	btfss	status,0,c
  3862  0027C2  D009               	goto	l2322
  3863  0027C4  5005               	movf	___llmod@divisor,w,c
  3864  0027C6  5E01               	subwf	___llmod@dividend,f,c
  3865  0027C8  5006               	movf	___llmod@divisor+1,w,c
  3866  0027CA  5A02               	subwfb	___llmod@dividend+1,f,c
  3867  0027CC  5007               	movf	___llmod@divisor+2,w,c
  3868  0027CE  5A03               	subwfb	___llmod@dividend+2,f,c
  3869  0027D0  5008               	movf	___llmod@divisor+3,w,c
  3870  0027D2  5A04               	subwfb	___llmod@dividend+3,f,c
  3871  0027D4  D000               	goto	l2322
  3872  0027D6                     l2322:
  3873  0027D6  90D8               	bcf	status,0,c
  3874  0027D8  3208               	rrcf	___llmod@divisor+3,f,c
  3875  0027DA  3207               	rrcf	___llmod@divisor+2,f,c
  3876  0027DC  3206               	rrcf	___llmod@divisor+1,f,c
  3877  0027DE  3205               	rrcf	___llmod@divisor,f,c
  3878  0027E0  2E09               	decfsz	___llmod@counter,f,c
  3879  0027E2  D7E6               	goto	l2318
  3880  0027E4  D000               	goto	l710
  3881  0027E6                     l710:
  3882  0027E6  C001  F001         	movff	___llmod@dividend,?___llmod
  3883  0027EA  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3884  0027EE  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3885  0027F2  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3886  0027F6  0012               	return		;funcret
  3887  0027F8                     __end_of___llmod:
  3888                           	opt stack 0
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           prodh	equ	0xFF4
  3894                           prodl	equ	0xFF3
  3895                           postinc0	equ	0xFEE
  3896                           wreg	equ	0xFE8
  3897                           postdec1	equ	0xFE5
  3898                           fsr1l	equ	0xFE1
  3899                           postinc2	equ	0xFDE
  3900                           postdec2	equ	0xFDD
  3901                           fsr2h	equ	0xFDA
  3902                           fsr2l	equ	0xFD9
  3903                           status	equ	0xFD8
  3904                           
  3905 ;; *************** function ___lldiv *****************
  3906 ;; Defined at:
  3907 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  dividend        4    0[COMRAM] unsigned long 
  3910 ;;  divisor         4    4[COMRAM] unsigned long 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  quotient        4    8[COMRAM] unsigned long 
  3913 ;;  counter         1   12[COMRAM] unsigned char 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  4    0[COMRAM] unsigned long 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3923 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;Total ram usage:       13 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; This function calls:
  3930 ;;		Nothing
  3931 ;; This function is called by:
  3932 ;;		_printf
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text13
  3937  00267A                     __ptext13:
  3938                           	opt stack 0
  3939  00267A                     ___lldiv:
  3940                           	opt stack 29
  3941                           
  3942                           ;incstack = 0
  3943  00267A  0E00               	movlw	0
  3944  00267C  6E09               	movwf	___lldiv@quotient,c
  3945  00267E  0E00               	movlw	0
  3946  002680  6E0A               	movwf	___lldiv@quotient+1,c
  3947  002682  0E00               	movlw	0
  3948  002684  6E0B               	movwf	___lldiv@quotient+2,c
  3949  002686  0E00               	movlw	0
  3950  002688  6E0C               	movwf	___lldiv@quotient+3,c
  3951  00268A  5005               	movf	___lldiv@divisor,w,c
  3952  00268C  1006               	iorwf	___lldiv@divisor+1,w,c
  3953  00268E  1007               	iorwf	___lldiv@divisor+2,w,c
  3954  002690  1008               	iorwf	___lldiv@divisor+3,w,c
  3955  002692  B4D8               	btfsc	status,2,c
  3956  002694  D02F               	goto	l700
  3957  002696  0E01               	movlw	1
  3958  002698  6E0D               	movwf	___lldiv@counter,c
  3959  00269A  D007               	goto	l2296
  3960  00269C                     l2294:
  3961  00269C  90D8               	bcf	status,0,c
  3962  00269E  3605               	rlcf	___lldiv@divisor,f,c
  3963  0026A0  3606               	rlcf	___lldiv@divisor+1,f,c
  3964  0026A2  3607               	rlcf	___lldiv@divisor+2,f,c
  3965  0026A4  3608               	rlcf	___lldiv@divisor+3,f,c
  3966  0026A6  2A0D               	incf	___lldiv@counter,f,c
  3967  0026A8  D000               	goto	l2296
  3968  0026AA                     l2296:
  3969  0026AA  BE08               	btfsc	___lldiv@divisor+3,7,c
  3970  0026AC  D002               	goto	l2298
  3971  0026AE  D7F6               	goto	l2294
  3972  0026B0  D000               	goto	l2298
  3973  0026B2                     l2298:
  3974  0026B2  90D8               	bcf	status,0,c
  3975  0026B4  3609               	rlcf	___lldiv@quotient,f,c
  3976  0026B6  360A               	rlcf	___lldiv@quotient+1,f,c
  3977  0026B8  360B               	rlcf	___lldiv@quotient+2,f,c
  3978  0026BA  360C               	rlcf	___lldiv@quotient+3,f,c
  3979  0026BC  5005               	movf	___lldiv@divisor,w,c
  3980  0026BE  5C01               	subwf	___lldiv@dividend,w,c
  3981  0026C0  5006               	movf	___lldiv@divisor+1,w,c
  3982  0026C2  5802               	subwfb	___lldiv@dividend+1,w,c
  3983  0026C4  5007               	movf	___lldiv@divisor+2,w,c
  3984  0026C6  5803               	subwfb	___lldiv@dividend+2,w,c
  3985  0026C8  5008               	movf	___lldiv@divisor+3,w,c
  3986  0026CA  5804               	subwfb	___lldiv@dividend+3,w,c
  3987  0026CC  A0D8               	btfss	status,0,c
  3988  0026CE  D00A               	goto	l2306
  3989  0026D0  5005               	movf	___lldiv@divisor,w,c
  3990  0026D2  5E01               	subwf	___lldiv@dividend,f,c
  3991  0026D4  5006               	movf	___lldiv@divisor+1,w,c
  3992  0026D6  5A02               	subwfb	___lldiv@dividend+1,f,c
  3993  0026D8  5007               	movf	___lldiv@divisor+2,w,c
  3994  0026DA  5A03               	subwfb	___lldiv@dividend+2,f,c
  3995  0026DC  5008               	movf	___lldiv@divisor+3,w,c
  3996  0026DE  5A04               	subwfb	___lldiv@dividend+3,f,c
  3997  0026E0  8009               	bsf	___lldiv@quotient,0,c
  3998  0026E2  D000               	goto	l2306
  3999  0026E4                     l2306:
  4000  0026E4  90D8               	bcf	status,0,c
  4001  0026E6  3208               	rrcf	___lldiv@divisor+3,f,c
  4002  0026E8  3207               	rrcf	___lldiv@divisor+2,f,c
  4003  0026EA  3206               	rrcf	___lldiv@divisor+1,f,c
  4004  0026EC  3205               	rrcf	___lldiv@divisor,f,c
  4005  0026EE  2E0D               	decfsz	___lldiv@counter,f,c
  4006  0026F0  D7E0               	goto	l2298
  4007  0026F2  D000               	goto	l700
  4008  0026F4                     l700:
  4009  0026F4  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4010  0026F8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4011  0026FC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4012  002700  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4013  002704  0012               	return		;funcret
  4014  002706                     __end_of___lldiv:
  4015                           	opt stack 0
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           postinc0	equ	0xFEE
  4023                           wreg	equ	0xFE8
  4024                           postdec1	equ	0xFE5
  4025                           fsr1l	equ	0xFE1
  4026                           postinc2	equ	0xFDE
  4027                           postdec2	equ	0xFDD
  4028                           fsr2h	equ	0xFDA
  4029                           fsr2l	equ	0xFD9
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function ___fttol *****************
  4033 ;; Defined at:
  4034 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  f1              3   27[COMRAM] float 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  lval            4   37[COMRAM] unsigned long 
  4039 ;;  exp1            1   41[COMRAM] unsigned char 
  4040 ;;  sign1           1   36[COMRAM] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  4   27[COMRAM] long 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;Total ram usage:       15 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; This function calls:
  4057 ;;		Nothing
  4058 ;; This function is called by:
  4059 ;;		_main
  4060 ;;		_printf
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           	psect	text14
  4065  0022C0                     __ptext14:
  4066                           	opt stack 0
  4067  0022C0                     ___fttol:
  4068                           	opt stack 29
  4069                           
  4070                           ;incstack = 0
  4071  0022C0  C01E  F020         	movff	___fttol@f1+2,??___fttol
  4072  0022C4  6A21               	clrf	(??___fttol+1)& (0+255),c
  4073  0022C6  6A22               	clrf	(??___fttol+2)& (0+255),c
  4074  0022C8  341D               	rlcf	___fttol@f1+1,w,c
  4075  0022CA  3620               	rlcf	??___fttol& (0+255),f,c
  4076  0022CC  E301               	bnc	u2251
  4077  0022CE  8021               	bsf	(??___fttol+1)& (0+255),0,c
  4078  0022D0                     u2251:
  4079  0022D0  5020               	movf	??___fttol,w,c
  4080  0022D2  6E2A               	movwf	___fttol@exp1,c
  4081  0022D4  502A               	movf	___fttol@exp1,w,c
  4082  0022D6  A4D8               	btfss	status,2,c
  4083  0022D8  D002               	goto	l2248
  4084  0022DA  D039               	goto	l2272
  4085  0022DC  D063               	goto	l661
  4086  0022DE                     l2248:
  4087  0022DE  0E17               	movlw	23
  4088  0022E0  6E20               	movwf	??___fttol& (0+255),c
  4089  0022E2  C01C  F021         	movff	___fttol@f1,??___fttol+1
  4090  0022E6  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
  4091  0022EA  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
  4092  0022EE  2820               	incf	??___fttol,w,c
  4093  0022F0  6E24               	movwf	(??___fttol+4)& (0+255),c
  4094  0022F2  D004               	goto	u2270
  4095  0022F4                     u2275:
  4096  0022F4  90D8               	bcf	status,0,c
  4097  0022F6  3223               	rrcf	??___fttol+3,f,c
  4098  0022F8  3222               	rrcf	??___fttol+2,f,c
  4099  0022FA  3221               	rrcf	??___fttol+1,f,c
  4100  0022FC                     u2270:
  4101  0022FC  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
  4102  0022FE  D7FA               	goto	u2275
  4103  002300  5021               	movf	??___fttol+1,w,c
  4104  002302  6E25               	movwf	___fttol@sign1,c
  4105  002304  8E1D               	bsf	___fttol@f1+1,7,c
  4106  002306  0EFF               	movlw	255
  4107  002308  161C               	andwf	___fttol@f1,f,c
  4108  00230A  0EFF               	movlw	255
  4109  00230C  161D               	andwf	___fttol@f1+1,f,c
  4110  00230E  0E00               	movlw	0
  4111  002310  161E               	andwf	___fttol@f1+2,f,c
  4112  002312  501C               	movf	___fttol@f1,w,c
  4113  002314  6E26               	movwf	___fttol@lval,c
  4114  002316  501D               	movf	___fttol@f1+1,w,c
  4115  002318  6E27               	movwf	___fttol@lval+1,c
  4116  00231A  501E               	movf	___fttol@f1+2,w,c
  4117  00231C  6E28               	movwf	___fttol@lval+2,c
  4118  00231E  6A29               	clrf	___fttol@lval+3,c
  4119  002320  0E8E               	movlw	142
  4120  002322  5E2A               	subwf	___fttol@exp1,f,c
  4121  002324  AE2A               	btfss	___fttol@exp1,7,c
  4122  002326  D010               	goto	l2270
  4123  002328  502A               	movf	___fttol@exp1,w,c
  4124  00232A  0A80               	xorlw	128
  4125  00232C  0F8F               	addlw	143
  4126  00232E  B0D8               	btfsc	status,0,c
  4127  002330  D003               	goto	l2266
  4128  002332  D00D               	goto	l2272
  4129  002334  D037               	goto	l661
  4130  002336  D000               	goto	l2266
  4131  002338                     l2266:
  4132  002338  90D8               	bcf	status,0,c
  4133  00233A  3229               	rrcf	___fttol@lval+3,f,c
  4134  00233C  3228               	rrcf	___fttol@lval+2,f,c
  4135  00233E  3227               	rrcf	___fttol@lval+1,f,c
  4136  002340  3226               	rrcf	___fttol@lval,f,c
  4137  002342  3E2A               	incfsz	___fttol@exp1,f,c
  4138  002344  D7F9               	goto	l2266
  4139  002346  D019               	goto	l2280
  4140  002348                     l2270:
  4141  002348  0E17               	movlw	23
  4142  00234A  642A               	cpfsgt	___fttol@exp1,c
  4143  00234C  D011               	goto	l2278
  4144  00234E                     l2272:
  4145  00234E  0E00               	movlw	0
  4146  002350  6E1C               	movwf	?___fttol,c
  4147  002352  0E00               	movlw	0
  4148  002354  6E1D               	movwf	?___fttol+1,c
  4149  002356  0E00               	movlw	0
  4150  002358  6E1E               	movwf	?___fttol+2,c
  4151  00235A  0E00               	movlw	0
  4152  00235C  6E1F               	movwf	?___fttol+3,c
  4153  00235E  D022               	goto	l661
  4154  002360  D007               	goto	l2278
  4155  002362                     l2276:
  4156  002362  90D8               	bcf	status,0,c
  4157  002364  3626               	rlcf	___fttol@lval,f,c
  4158  002366  3627               	rlcf	___fttol@lval+1,f,c
  4159  002368  3628               	rlcf	___fttol@lval+2,f,c
  4160  00236A  3629               	rlcf	___fttol@lval+3,f,c
  4161  00236C  062A               	decf	___fttol@exp1,f,c
  4162  00236E  D000               	goto	l2278
  4163  002370                     l2278:
  4164  002370  502A               	movf	___fttol@exp1,w,c
  4165  002372  B4D8               	btfsc	status,2,c
  4166  002374  D002               	goto	l2280
  4167  002376  D7F5               	goto	l2276
  4168  002378  D000               	goto	l2280
  4169  00237A                     l2280:
  4170  00237A  5025               	movf	___fttol@sign1,w,c
  4171  00237C  B4D8               	btfsc	status,2,c
  4172  00237E  D009               	goto	l2284
  4173  002380  1E29               	comf	___fttol@lval+3,f,c
  4174  002382  1E28               	comf	___fttol@lval+2,f,c
  4175  002384  1E27               	comf	___fttol@lval+1,f,c
  4176  002386  6C26               	negf	___fttol@lval,c
  4177  002388  0E00               	movlw	0
  4178  00238A  2227               	addwfc	___fttol@lval+1,f,c
  4179  00238C  2228               	addwfc	___fttol@lval+2,f,c
  4180  00238E  2229               	addwfc	___fttol@lval+3,f,c
  4181  002390  D000               	goto	l2284
  4182  002392                     l2284:
  4183  002392  C026  F01C         	movff	___fttol@lval,?___fttol
  4184  002396  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
  4185  00239A  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
  4186  00239E  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
  4187  0023A2  D000               	goto	l661
  4188  0023A4                     l661:
  4189  0023A4  0012               	return		;funcret
  4190  0023A6                     __end_of___fttol:
  4191                           	opt stack 0
  4192                           tblptru	equ	0xFF8
  4193                           tblptrh	equ	0xFF7
  4194                           tblptrl	equ	0xFF6
  4195                           tablat	equ	0xFF5
  4196                           prodh	equ	0xFF4
  4197                           prodl	equ	0xFF3
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           postdec1	equ	0xFE5
  4201                           fsr1l	equ	0xFE1
  4202                           postinc2	equ	0xFDE
  4203                           postdec2	equ	0xFDD
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8
  4207                           
  4208 ;; *************** function ___ftsub *****************
  4209 ;; Defined at:
  4210 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;  f1              3   84[COMRAM] float 
  4213 ;;  f2              3   87[COMRAM] float 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  3   84[COMRAM] float 
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, status,0, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4225 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;Total ram usage:        6 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    2
  4232 ;; This function calls:
  4233 ;;		___ftadd
  4234 ;; This function is called by:
  4235 ;;		_printf
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text15
  4240  002912                     __ptext15:
  4241                           	opt stack 0
  4242  002912                     ___ftsub:
  4243                           	opt stack 27
  4244                           
  4245                           ;incstack = 0
  4246  002912  5058               	movf	___ftsub@f2,w,c
  4247  002914  1059               	iorwf	___ftsub@f2+1,w,c
  4248  002916  105A               	iorwf	___ftsub@f2+2,w,c
  4249  002918  B4D8               	btfsc	status,2,c
  4250  00291A  D007               	goto	l2216
  4251  00291C  0E00               	movlw	0
  4252  00291E  1A58               	xorwf	___ftsub@f2,f,c
  4253  002920  0E00               	movlw	0
  4254  002922  1A59               	xorwf	___ftsub@f2+1,f,c
  4255  002924  0E80               	movlw	128
  4256  002926  1A5A               	xorwf	___ftsub@f2+2,f,c
  4257  002928  D000               	goto	l2216
  4258  00292A                     l2216:
  4259  00292A  C055  F049         	movff	___ftsub@f1,___ftadd@f1
  4260  00292E  C056  F04A         	movff	___ftsub@f1+1,___ftadd@f1+1
  4261  002932  C057  F04B         	movff	___ftsub@f1+2,___ftadd@f1+2
  4262  002936  C058  F04C         	movff	___ftsub@f2,___ftadd@f2
  4263  00293A  C059  F04D         	movff	___ftsub@f2+1,___ftadd@f2+1
  4264  00293E  C05A  F04E         	movff	___ftsub@f2+2,___ftadd@f2+2
  4265  002942  EC68  F00E         	call	___ftadd	;wreg free
  4266  002946  C049  F055         	movff	?___ftadd,?___ftsub
  4267  00294A  C04A  F056         	movff	?___ftadd+1,?___ftsub+1
  4268  00294E  C04B  F057         	movff	?___ftadd+2,?___ftsub+2
  4269  002952  D000               	goto	l657
  4270  002954                     l657:
  4271  002954  0012               	return		;funcret
  4272  002956                     __end_of___ftsub:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           postinc0	equ	0xFEE
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           fsr1l	equ	0xFE1
  4284                           postinc2	equ	0xFDE
  4285                           postdec2	equ	0xFDD
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290 ;; *************** function ___ftadd *****************
  4291 ;; Defined at:
  4292 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  f1              3   72[COMRAM] float 
  4295 ;;  f2              3   75[COMRAM] float 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  exp1            1   83[COMRAM] unsigned char 
  4298 ;;  exp2            1   82[COMRAM] unsigned char 
  4299 ;;  sign            1   81[COMRAM] unsigned char 
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  3   72[COMRAM] float 
  4302 ;; Registers used:
  4303 ;;		wreg, status,2, status,0, cstack
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4309 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;Total ram usage:       12 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    1
  4316 ;; This function calls:
  4317 ;;		___ftpack
  4318 ;; This function is called by:
  4319 ;;		_printf
  4320 ;;		___ftsub
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text16
  4325  001CD0                     __ptext16:
  4326                           	opt stack 0
  4327  001CD0                     ___ftadd:
  4328                           	opt stack 27
  4329                           
  4330                           ;incstack = 0
  4331  001CD0  C04B  F04F         	movff	___ftadd@f1+2,??___ftadd
  4332  001CD4  6A50               	clrf	(??___ftadd+1)& (0+255),c
  4333  001CD6  6A51               	clrf	(??___ftadd+2)& (0+255),c
  4334  001CD8  344A               	rlcf	___ftadd@f1+1,w,c
  4335  001CDA  364F               	rlcf	??___ftadd& (0+255),f,c
  4336  001CDC  E301               	bnc	u1471
  4337  001CDE  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  4338  001CE0                     u1471:
  4339  001CE0  504F               	movf	??___ftadd,w,c
  4340  001CE2  6E54               	movwf	___ftadd@exp1,c
  4341  001CE4  C04E  F04F         	movff	___ftadd@f2+2,??___ftadd
  4342  001CE8  6A50               	clrf	(??___ftadd+1)& (0+255),c
  4343  001CEA  6A51               	clrf	(??___ftadd+2)& (0+255),c
  4344  001CEC  344D               	rlcf	___ftadd@f2+1,w,c
  4345  001CEE  364F               	rlcf	??___ftadd& (0+255),f,c
  4346  001CF0  E301               	bnc	u1481
  4347  001CF2  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  4348  001CF4                     u1481:
  4349  001CF4  504F               	movf	??___ftadd,w,c
  4350  001CF6  6E53               	movwf	___ftadd@exp2,c
  4351  001CF8  5054               	movf	___ftadd@exp1,w,c
  4352  001CFA  B4D8               	btfsc	status,2,c
  4353  001CFC  D00B               	goto	l576
  4354  001CFE  5053               	movf	___ftadd@exp2,w,c
  4355  001D00  5C54               	subwf	___ftadd@exp1,w,c
  4356  001D02  B0D8               	btfsc	status,0,c
  4357  001D04  D00E               	goto	l1792
  4358  001D06  5054               	movf	___ftadd@exp1,w,c
  4359  001D08  0800               	sublw	0
  4360  001D0A  2453               	addwf	___ftadd@exp2,w,c
  4361  001D0C  6E4F               	movwf	??___ftadd& (0+255),c
  4362  001D0E  0E18               	movlw	24
  4363  001D10  644F               	cpfsgt	??___ftadd,c
  4364  001D12  D007               	goto	l1792
  4365  001D14                     l576:
  4366  001D14  C04C  F049         	movff	___ftadd@f2,?___ftadd
  4367  001D18  C04D  F04A         	movff	___ftadd@f2+1,?___ftadd+1
  4368  001D1C  C04E  F04B         	movff	___ftadd@f2+2,?___ftadd+2
  4369  001D20  D0B8               	goto	l577
  4370  001D22                     l1792:
  4371  001D22  5053               	movf	___ftadd@exp2,w,c
  4372  001D24  B4D8               	btfsc	status,2,c
  4373  001D26  D00B               	goto	l580
  4374  001D28  5054               	movf	___ftadd@exp1,w,c
  4375  001D2A  5C53               	subwf	___ftadd@exp2,w,c
  4376  001D2C  B0D8               	btfsc	status,0,c
  4377  001D2E  D00E               	goto	l1798
  4378  001D30  5053               	movf	___ftadd@exp2,w,c
  4379  001D32  0800               	sublw	0
  4380  001D34  2454               	addwf	___ftadd@exp1,w,c
  4381  001D36  6E4F               	movwf	??___ftadd& (0+255),c
  4382  001D38  0E18               	movlw	24
  4383  001D3A  644F               	cpfsgt	??___ftadd,c
  4384  001D3C  D007               	goto	l1798
  4385  001D3E                     l580:
  4386  001D3E  C049  F049         	movff	___ftadd@f1,?___ftadd
  4387  001D42  C04A  F04A         	movff	___ftadd@f1+1,?___ftadd+1
  4388  001D46  C04B  F04B         	movff	___ftadd@f1+2,?___ftadd+2
  4389  001D4A  D0A3               	goto	l577
  4390  001D4C                     l1798:
  4391  001D4C  0E06               	movlw	6
  4392  001D4E  6E52               	movwf	___ftadd@sign,c
  4393  001D50  AE4B               	btfss	___ftadd@f1+2,7,c
  4394  001D52  D002               	goto	l1804
  4395  001D54  8E52               	bsf	___ftadd@sign,7,c
  4396  001D56  D000               	goto	l1804
  4397  001D58                     l1804:
  4398  001D58  BE4E               	btfsc	___ftadd@f2+2,7,c
  4399  001D5A  8C52               	bsf	___ftadd@sign,6,c
  4400  001D5C  8E4A               	bsf	___ftadd@f1+1,7,c
  4401  001D5E  0EFF               	movlw	255
  4402  001D60  1649               	andwf	___ftadd@f1,f,c
  4403  001D62  0EFF               	movlw	255
  4404  001D64  164A               	andwf	___ftadd@f1+1,f,c
  4405  001D66  0E00               	movlw	0
  4406  001D68  164B               	andwf	___ftadd@f1+2,f,c
  4407  001D6A  8E4D               	bsf	___ftadd@f2+1,7,c
  4408  001D6C  0EFF               	movlw	255
  4409  001D6E  164C               	andwf	___ftadd@f2,f,c
  4410  001D70  0EFF               	movlw	255
  4411  001D72  164D               	andwf	___ftadd@f2+1,f,c
  4412  001D74  0E00               	movlw	0
  4413  001D76  164E               	andwf	___ftadd@f2+2,f,c
  4414  001D78  5053               	movf	___ftadd@exp2,w,c
  4415  001D7A  5C54               	subwf	___ftadd@exp1,w,c
  4416  001D7C  B0D8               	btfsc	status,0,c
  4417  001D7E  D01E               	goto	l1824
  4418  001D80                     l1814:
  4419  001D80  90D8               	bcf	status,0,c
  4420  001D82  364C               	rlcf	___ftadd@f2,f,c
  4421  001D84  364D               	rlcf	___ftadd@f2+1,f,c
  4422  001D86  364E               	rlcf	___ftadd@f2+2,f,c
  4423  001D88  0653               	decf	___ftadd@exp2,f,c
  4424  001D8A  5054               	movf	___ftadd@exp1,w,c
  4425  001D8C  1853               	xorwf	___ftadd@exp2,w,c
  4426  001D8E  B4D8               	btfsc	status,2,c
  4427  001D90  D00F               	goto	l1822
  4428  001D92  0652               	decf	___ftadd@sign,f,c
  4429  001D94  C052  F04F         	movff	___ftadd@sign,??___ftadd
  4430  001D98  0E07               	movlw	7
  4431  001D9A  164F               	andwf	??___ftadd,f,c
  4432  001D9C  B4D8               	btfsc	status,2,c
  4433  001D9E  D008               	goto	l1822
  4434  001DA0  D7EF               	goto	l1814
  4435  001DA2  D006               	goto	l1822
  4436  001DA4                     l1820:
  4437  001DA4  90D8               	bcf	status,0,c
  4438  001DA6  324B               	rrcf	___ftadd@f1+2,f,c
  4439  001DA8  324A               	rrcf	___ftadd@f1+1,f,c
  4440  001DAA  3249               	rrcf	___ftadd@f1,f,c
  4441  001DAC  2A54               	incf	___ftadd@exp1,f,c
  4442  001DAE  D000               	goto	l1822
  4443  001DB0                     l1822:
  4444  001DB0  5053               	movf	___ftadd@exp2,w,c
  4445  001DB2  1854               	xorwf	___ftadd@exp1,w,c
  4446  001DB4  B4D8               	btfsc	status,2,c
  4447  001DB6  D024               	goto	l591
  4448  001DB8  D7F5               	goto	l1820
  4449  001DBA  D022               	goto	l591
  4450  001DBC                     l1824:
  4451  001DBC  5054               	movf	___ftadd@exp1,w,c
  4452  001DBE  5C53               	subwf	___ftadd@exp2,w,c
  4453  001DC0  B0D8               	btfsc	status,0,c
  4454  001DC2  D01E               	goto	l591
  4455  001DC4                     l1826:
  4456  001DC4  90D8               	bcf	status,0,c
  4457  001DC6  3649               	rlcf	___ftadd@f1,f,c
  4458  001DC8  364A               	rlcf	___ftadd@f1+1,f,c
  4459  001DCA  364B               	rlcf	___ftadd@f1+2,f,c
  4460  001DCC  0654               	decf	___ftadd@exp1,f,c
  4461  001DCE  5054               	movf	___ftadd@exp1,w,c
  4462  001DD0  1853               	xorwf	___ftadd@exp2,w,c
  4463  001DD2  B4D8               	btfsc	status,2,c
  4464  001DD4  D00F               	goto	l1834
  4465  001DD6  0652               	decf	___ftadd@sign,f,c
  4466  001DD8  C052  F04F         	movff	___ftadd@sign,??___ftadd
  4467  001DDC  0E07               	movlw	7
  4468  001DDE  164F               	andwf	??___ftadd,f,c
  4469  001DE0  B4D8               	btfsc	status,2,c
  4470  001DE2  D008               	goto	l1834
  4471  001DE4  D7EF               	goto	l1826
  4472  001DE6  D006               	goto	l1834
  4473  001DE8                     l1832:
  4474  001DE8  90D8               	bcf	status,0,c
  4475  001DEA  324E               	rrcf	___ftadd@f2+2,f,c
  4476  001DEC  324D               	rrcf	___ftadd@f2+1,f,c
  4477  001DEE  324C               	rrcf	___ftadd@f2,f,c
  4478  001DF0  2A53               	incf	___ftadd@exp2,f,c
  4479  001DF2  D000               	goto	l1834
  4480  001DF4                     l1834:
  4481  001DF4  5053               	movf	___ftadd@exp2,w,c
  4482  001DF6  1854               	xorwf	___ftadd@exp1,w,c
  4483  001DF8  B4D8               	btfsc	status,2,c
  4484  001DFA  D002               	goto	l591
  4485  001DFC  D7F5               	goto	l1832
  4486  001DFE  D000               	goto	l591
  4487  001E00                     l591:
  4488  001E00  AE52               	btfss	___ftadd@sign,7,c
  4489  001E02  D00C               	goto	l600
  4490  001E04  0EFF               	movlw	255
  4491  001E06  1A49               	xorwf	___ftadd@f1,f,c
  4492  001E08  0EFF               	movlw	255
  4493  001E0A  1A4A               	xorwf	___ftadd@f1+1,f,c
  4494  001E0C  0EFF               	movlw	255
  4495  001E0E  1A4B               	xorwf	___ftadd@f1+2,f,c
  4496  001E10  0E01               	movlw	1
  4497  001E12  2649               	addwf	___ftadd@f1,f,c
  4498  001E14  0E00               	movlw	0
  4499  001E16  224A               	addwfc	___ftadd@f1+1,f,c
  4500  001E18  0E00               	movlw	0
  4501  001E1A  224B               	addwfc	___ftadd@f1+2,f,c
  4502  001E1C                     l600:
  4503  001E1C  AC52               	btfss	___ftadd@sign,6,c
  4504  001E1E  D00D               	goto	l1840
  4505  001E20  0EFF               	movlw	255
  4506  001E22  1A4C               	xorwf	___ftadd@f2,f,c
  4507  001E24  0EFF               	movlw	255
  4508  001E26  1A4D               	xorwf	___ftadd@f2+1,f,c
  4509  001E28  0EFF               	movlw	255
  4510  001E2A  1A4E               	xorwf	___ftadd@f2+2,f,c
  4511  001E2C  0E01               	movlw	1
  4512  001E2E  264C               	addwf	___ftadd@f2,f,c
  4513  001E30  0E00               	movlw	0
  4514  001E32  224D               	addwfc	___ftadd@f2+1,f,c
  4515  001E34  0E00               	movlw	0
  4516  001E36  224E               	addwfc	___ftadd@f2+2,f,c
  4517  001E38  D000               	goto	l1840
  4518  001E3A                     l1840:
  4519  001E3A  0E00               	movlw	0
  4520  001E3C  6E52               	movwf	___ftadd@sign,c
  4521  001E3E  5049               	movf	___ftadd@f1,w,c
  4522  001E40  264C               	addwf	___ftadd@f2,f,c
  4523  001E42  504A               	movf	___ftadd@f1+1,w,c
  4524  001E44  224D               	addwfc	___ftadd@f2+1,f,c
  4525  001E46  504B               	movf	___ftadd@f1+2,w,c
  4526  001E48  224E               	addwfc	___ftadd@f2+2,f,c
  4527  001E4A  AE4E               	btfss	___ftadd@f2+2,7,c
  4528  001E4C  D00F               	goto	l1850
  4529  001E4E  0EFF               	movlw	255
  4530  001E50  1A4C               	xorwf	___ftadd@f2,f,c
  4531  001E52  0EFF               	movlw	255
  4532  001E54  1A4D               	xorwf	___ftadd@f2+1,f,c
  4533  001E56  0EFF               	movlw	255
  4534  001E58  1A4E               	xorwf	___ftadd@f2+2,f,c
  4535  001E5A  0E01               	movlw	1
  4536  001E5C  264C               	addwf	___ftadd@f2,f,c
  4537  001E5E  0E00               	movlw	0
  4538  001E60  224D               	addwfc	___ftadd@f2+1,f,c
  4539  001E62  0E00               	movlw	0
  4540  001E64  224E               	addwfc	___ftadd@f2+2,f,c
  4541  001E66  0E01               	movlw	1
  4542  001E68  6E52               	movwf	___ftadd@sign,c
  4543  001E6A  D000               	goto	l1850
  4544  001E6C                     l1850:
  4545  001E6C  C04C  F001         	movff	___ftadd@f2,___ftpack@arg
  4546  001E70  C04D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4547  001E74  C04E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4548  001E78  C054  F004         	movff	___ftadd@exp1,___ftpack@exp
  4549  001E7C  C052  F005         	movff	___ftadd@sign,___ftpack@sign
  4550  001E80  EC44  F012         	call	___ftpack	;wreg free
  4551  001E84  C001  F049         	movff	?___ftpack,?___ftadd
  4552  001E88  C002  F04A         	movff	?___ftpack+1,?___ftadd+1
  4553  001E8C  C003  F04B         	movff	?___ftpack+2,?___ftadd+2
  4554  001E90  D000               	goto	l577
  4555  001E92                     l577:
  4556  001E92  0012               	return		;funcret
  4557  001E94                     __end_of___ftadd:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           tblptrh	equ	0xFF7
  4561                           tblptrl	equ	0xFF6
  4562                           tablat	equ	0xFF5
  4563                           prodh	equ	0xFF4
  4564                           prodl	equ	0xFF3
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           postdec1	equ	0xFE5
  4568                           fsr1l	equ	0xFE1
  4569                           postinc2	equ	0xFDE
  4570                           postdec2	equ	0xFDD
  4571                           fsr2h	equ	0xFDA
  4572                           fsr2l	equ	0xFD9
  4573                           status	equ	0xFD8
  4574                           
  4575 ;; *************** function ___ftneg *****************
  4576 ;; Defined at:
  4577 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  f1              3    0[COMRAM] float 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  3    0[COMRAM] float 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, status,0
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4591 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;Total ram usage:        3 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_printf
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text17
  4605  002A0A                     __ptext17:
  4606                           	opt stack 0
  4607  002A0A                     ___ftneg:
  4608                           	opt stack 29
  4609                           
  4610                           ;incstack = 0
  4611  002A0A  5001               	movf	___ftneg@f1,w,c
  4612  002A0C  1002               	iorwf	___ftneg@f1+1,w,c
  4613  002A0E  1003               	iorwf	___ftneg@f1+2,w,c
  4614  002A10  B4D8               	btfsc	status,2,c
  4615  002A12  D006               	goto	l650
  4616  002A14  0E00               	movlw	0
  4617  002A16  1A01               	xorwf	___ftneg@f1,f,c
  4618  002A18  0E00               	movlw	0
  4619  002A1A  1A02               	xorwf	___ftneg@f1+1,f,c
  4620  002A1C  0E80               	movlw	128
  4621  002A1E  1A03               	xorwf	___ftneg@f1+2,f,c
  4622  002A20                     l650:
  4623  002A20  C001  F001         	movff	___ftneg@f1,?___ftneg
  4624  002A24  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4625  002A28  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4626  002A2C  0012               	return		;funcret
  4627  002A2E                     __end_of___ftneg:
  4628                           	opt stack 0
  4629                           tblptru	equ	0xFF8
  4630                           tblptrh	equ	0xFF7
  4631                           tblptrl	equ	0xFF6
  4632                           tablat	equ	0xFF5
  4633                           prodh	equ	0xFF4
  4634                           prodl	equ	0xFF3
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           postdec1	equ	0xFE5
  4638                           fsr1l	equ	0xFE1
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function ___ftge *****************
  4646 ;; Defined at:
  4647 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  ff1             3    0[COMRAM] float 
  4650 ;;  ff2             3    3[COMRAM] float 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;		None               void
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:        9 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; This function calls:
  4669 ;;		Nothing
  4670 ;; This function is called by:
  4671 ;;		_printf
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text18
  4676  0025E4                     __ptext18:
  4677                           	opt stack 0
  4678  0025E4                     ___ftge:
  4679                           	opt stack 29
  4680                           
  4681                           ;incstack = 0
  4682  0025E4  AE03               	btfss	___ftge@ff1+2,7,c
  4683  0025E6  D017               	goto	l2224
  4684  0025E8  C001  F007         	movff	___ftge@ff1,??___ftge
  4685  0025EC  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4686  0025F0  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4687  0025F4  1E07               	comf	??___ftge,f,c
  4688  0025F6  1E08               	comf	??___ftge+1,f,c
  4689  0025F8  1E09               	comf	??___ftge+2,f,c
  4690  0025FA  2A07               	incf	??___ftge,f,c
  4691  0025FC  0E00               	movlw	0
  4692  0025FE  2208               	addwfc	??___ftge+1,f,c
  4693  002600  2209               	addwfc	??___ftge+2,f,c
  4694  002602  0E00               	movlw	0
  4695  002604  2407               	addwf	??___ftge,w,c
  4696  002606  6E01               	movwf	___ftge@ff1,c
  4697  002608  0E00               	movlw	0
  4698  00260A  2008               	addwfc	??___ftge+1,w,c
  4699  00260C  6E02               	movwf	___ftge@ff1+1,c
  4700  00260E  0E80               	movlw	128
  4701  002610  2009               	addwfc	??___ftge+2,w,c
  4702  002612  6E03               	movwf	___ftge@ff1+2,c
  4703  002614  D000               	goto	l2224
  4704  002616                     l2224:
  4705  002616  AE06               	btfss	___ftge@ff2+2,7,c
  4706  002618  D017               	goto	l2228
  4707  00261A  C004  F007         	movff	___ftge@ff2,??___ftge
  4708  00261E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4709  002622  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4710  002626  1E07               	comf	??___ftge,f,c
  4711  002628  1E08               	comf	??___ftge+1,f,c
  4712  00262A  1E09               	comf	??___ftge+2,f,c
  4713  00262C  2A07               	incf	??___ftge,f,c
  4714  00262E  0E00               	movlw	0
  4715  002630  2208               	addwfc	??___ftge+1,f,c
  4716  002632  2209               	addwfc	??___ftge+2,f,c
  4717  002634  0E00               	movlw	0
  4718  002636  2407               	addwf	??___ftge,w,c
  4719  002638  6E04               	movwf	___ftge@ff2,c
  4720  00263A  0E00               	movlw	0
  4721  00263C  2008               	addwfc	??___ftge+1,w,c
  4722  00263E  6E05               	movwf	___ftge@ff2+1,c
  4723  002640  0E80               	movlw	128
  4724  002642  2009               	addwfc	??___ftge+2,w,c
  4725  002644  6E06               	movwf	___ftge@ff2+2,c
  4726  002646  D000               	goto	l2228
  4727  002648                     l2228:
  4728  002648  0E00               	movlw	0
  4729  00264A  1A01               	xorwf	___ftge@ff1,f,c
  4730  00264C  0E00               	movlw	0
  4731  00264E  1A02               	xorwf	___ftge@ff1+1,f,c
  4732  002650  0E80               	movlw	128
  4733  002652  1A03               	xorwf	___ftge@ff1+2,f,c
  4734  002654  0E00               	movlw	0
  4735  002656  1A04               	xorwf	___ftge@ff2,f,c
  4736  002658  0E00               	movlw	0
  4737  00265A  1A05               	xorwf	___ftge@ff2+1,f,c
  4738  00265C  0E80               	movlw	128
  4739  00265E  1A06               	xorwf	___ftge@ff2+2,f,c
  4740  002660  5004               	movf	___ftge@ff2,w,c
  4741  002662  5C01               	subwf	___ftge@ff1,w,c
  4742  002664  5005               	movf	___ftge@ff2+1,w,c
  4743  002666  5802               	subwfb	___ftge@ff1+1,w,c
  4744  002668  5006               	movf	___ftge@ff2+2,w,c
  4745  00266A  5803               	subwfb	___ftge@ff1+2,w,c
  4746  00266C  B0D8               	btfsc	status,0,c
  4747  00266E  D002               	goto	l2234
  4748  002670  90D8               	bcf	status,0,c
  4749  002672  D002               	goto	l634
  4750  002674                     l2234:
  4751  002674  80D8               	bsf	status,0,c
  4752  002676  D000               	goto	l634
  4753  002678                     l634:
  4754  002678  0012               	return		;funcret
  4755  00267A                     __end_of___ftge:
  4756                           	opt stack 0
  4757                           tblptru	equ	0xFF8
  4758                           tblptrh	equ	0xFF7
  4759                           tblptrl	equ	0xFF6
  4760                           tablat	equ	0xFF5
  4761                           prodh	equ	0xFF4
  4762                           prodl	equ	0xFF3
  4763                           postinc0	equ	0xFEE
  4764                           wreg	equ	0xFE8
  4765                           postdec1	equ	0xFE5
  4766                           fsr1l	equ	0xFE1
  4767                           postinc2	equ	0xFDE
  4768                           postdec2	equ	0xFDD
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function _init_UART *****************
  4774 ;; Defined at:
  4775 ;;		line 37 in file "Lab5.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;		None               void
  4782 ;; Registers used:
  4783 ;;		wreg, status,2, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;Total ram usage:        0 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    1
  4796 ;; This function calls:
  4797 ;;		_OpenUSART
  4798 ;; This function is called by:
  4799 ;;		_main
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text19
  4804  002A82                     __ptext19:
  4805                           	opt stack 0
  4806  002A82                     _init_UART:
  4807                           	opt stack 29
  4808                           
  4809                           ;Lab5.c: 39: OpenUSART (0b01111111 & 0b10111111 &
  4810                           ;Lab5.c: 40: 0b11111110 & 0b11111101 & 0b11111111 &
  4811                           ;Lab5.c: 41: 0b11111111, 25);
  4812                           
  4813                           ;incstack = 0
  4814  002A82  0E00               	movlw	0
  4815  002A84  6E02               	movwf	OpenUSART@spbrg+1,c
  4816  002A86  0E19               	movlw	25
  4817  002A88  6E01               	movwf	OpenUSART@spbrg,c
  4818  002A8A  0E3C               	movlw	60
  4819  002A8C  ECFC  F013         	call	_OpenUSART
  4820                           
  4821                           ;Lab5.c: 42: OSCCON = 0x60;
  4822  002A90  0E60               	movlw	96
  4823  002A92  6ED3               	movwf	4051,c	;volatile
  4824  002A94  0012               	return		;funcret
  4825  002A96                     __end_of_init_UART:
  4826                           	opt stack 0
  4827                           tblptru	equ	0xFF8
  4828                           tblptrh	equ	0xFF7
  4829                           tblptrl	equ	0xFF6
  4830                           tablat	equ	0xFF5
  4831                           prodh	equ	0xFF4
  4832                           prodl	equ	0xFF3
  4833                           postinc0	equ	0xFEE
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           fsr1l	equ	0xFE1
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           
  4843 ;; *************** function _OpenUSART *****************
  4844 ;; Defined at:
  4845 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  config          1    wreg     unsigned char 
  4848 ;;  spbrg           2    0[COMRAM] unsigned int 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  config          1    2[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		wreg, status,2
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4860 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;Total ram usage:        3 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_init_UART
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text20
  4874  0027F8                     __ptext20:
  4875                           	opt stack 0
  4876  0027F8                     _OpenUSART:
  4877                           	opt stack 29
  4878                           
  4879                           ;incstack = 0
  4880                           ;OpenUSART@config stored from wreg
  4881  0027F8  6E03               	movwf	OpenUSART@config,c
  4882  0027FA  0E00               	movlw	0
  4883  0027FC  6EAC               	movwf	4012,c	;volatile
  4884  0027FE  0E00               	movlw	0
  4885  002800  6EAB               	movwf	4011,c	;volatile
  4886  002802  A003               	btfss	OpenUSART@config,0,c
  4887  002804  D002               	goto	l1988
  4888  002806  88AC               	bsf	4012,4,c	;volatile
  4889  002808  D000               	goto	l1988
  4890  00280A                     l1988:
  4891  00280A  A203               	btfss	OpenUSART@config,1,c
  4892  00280C  D003               	goto	l1992
  4893  00280E  8CAC               	bsf	4012,6,c	;volatile
  4894  002810  8CAB               	bsf	4011,6,c	;volatile
  4895  002812  D000               	goto	l1992
  4896  002814                     l1992:
  4897  002814  A403               	btfss	OpenUSART@config,2,c
  4898  002816  D002               	goto	l1996
  4899  002818  8EAC               	bsf	4012,7,c	;volatile
  4900  00281A  D000               	goto	l1996
  4901  00281C                     l1996:
  4902  00281C  A603               	btfss	OpenUSART@config,3,c
  4903  00281E  D002               	goto	l199
  4904  002820  88AB               	bsf	4011,4,c	;volatile
  4905  002822  D002               	goto	l2000
  4906  002824                     l199:
  4907  002824  8AAB               	bsf	4011,5,c	;volatile
  4908  002826  D000               	goto	l2000
  4909  002828                     l2000:
  4910  002828  B803               	btfsc	OpenUSART@config,4,c
  4911  00282A  84AC               	bsf	4012,2,c	;volatile
  4912  00282C  989E               	bcf	3998,4,c	;volatile
  4913  00282E  AA03               	btfss	OpenUSART@config,5,c
  4914  002830  D002               	goto	l2008
  4915  002832  86AB               	bsf	4011,3,c	;volatile
  4916  002834  D000               	goto	l2008
  4917  002836                     l2008:
  4918  002836  AC03               	btfss	OpenUSART@config,6,c
  4919  002838  D002               	goto	l203
  4920  00283A  8A9D               	bsf	3997,5,c	;volatile
  4921  00283C  D001               	goto	l204
  4922  00283E                     l203:
  4923  00283E  9A9D               	bcf	3997,5,c	;volatile
  4924  002840                     l204:
  4925  002840  9A9E               	bcf	3998,5,c	;volatile
  4926  002842  AE03               	btfss	OpenUSART@config,7,c
  4927  002844  D002               	goto	l205
  4928  002846  889D               	bsf	3997,4,c	;volatile
  4929  002848  D001               	goto	l206
  4930  00284A                     l205:
  4931  00284A  989D               	bcf	3997,4,c	;volatile
  4932  00284C                     l206:
  4933  00284C  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4934  002850  5002               	movf	OpenUSART@spbrg+1,w,c
  4935  002852  6EB0               	movwf	4016,c	;volatile
  4936  002854  8AAC               	bsf	4012,5,c	;volatile
  4937  002856  8EAB               	bsf	4011,7,c	;volatile
  4938  002858  9C94               	bcf	3988,6,c	;volatile
  4939  00285A  8E94               	bsf	3988,7,c	;volatile
  4940  00285C  B8AC               	btfsc	4012,4,c	;volatile
  4941  00285E  BEAC               	btfsc	4012,7,c	;volatile
  4942  002860  D002               	goto	l208
  4943  002862  8C94               	bsf	3988,6,c	;volatile
  4944  002864  D000               	goto	l208
  4945  002866                     l208:
  4946  002866  0012               	return		;funcret
  4947  002868                     __end_of_OpenUSART:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           postinc0	equ	0xFEE
  4956                           wreg	equ	0xFE8
  4957                           postdec1	equ	0xFE5
  4958                           fsr1l	equ	0xFE1
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function _init_ADC *****************
  4966 ;; Defined at:
  4967 ;;		line 19 in file "Lab5.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;		None
  4972 ;; Return value:  Size  Location     Type
  4973 ;;		None               void
  4974 ;; Registers used:
  4975 ;;		wreg, status,2
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;Total ram usage:        0 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; This function calls:
  4988 ;;		Nothing
  4989 ;; This function is called by:
  4990 ;;		_main
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           	psect	text21
  4995  002AB0                     __ptext21:
  4996                           	opt stack 0
  4997  002AB0                     _init_ADC:
  4998                           	opt stack 30
  4999                           
  5000                           ;Lab5.c: 22: ADCON1=0x19;
  5001                           
  5002                           ;incstack = 0
  5003  002AB0  0E19               	movlw	25
  5004  002AB2  6EC1               	movwf	4033,c	;volatile
  5005                           
  5006                           ;Lab5.c: 24: ADCON2=0xA9;
  5007  002AB4  0EA9               	movlw	169
  5008  002AB6  6EC0               	movwf	4032,c	;volatile
  5009  002AB8  0012               	return		;funcret
  5010  002ABA                     __end_of_init_ADC:
  5011                           	opt stack 0
  5012                           tblptru	equ	0xFF8
  5013                           tblptrh	equ	0xFF7
  5014                           tblptrl	equ	0xFF6
  5015                           tablat	equ	0xFF5
  5016                           prodh	equ	0xFF4
  5017                           prodl	equ	0xFF3
  5018                           postinc0	equ	0xFEE
  5019                           wreg	equ	0xFE8
  5020                           postdec1	equ	0xFE5
  5021                           fsr1l	equ	0xFE1
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           fsr2h	equ	0xFDA
  5025                           fsr2l	equ	0xFD9
  5026                           status	equ	0xFD8
  5027                           
  5028 ;; *************** function _get_full_ADC *****************
  5029 ;; Defined at:
  5030 ;;		line 28 in file "Lab5.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  result          2    4[COMRAM] int 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  2    0[COMRAM] unsigned int 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;Total ram usage:        6 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; This function calls:
  5051 ;;		Nothing
  5052 ;; This function is called by:
  5053 ;;		_main
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           	psect	text22
  5058  0029E4                     __ptext22:
  5059                           	opt stack 0
  5060  0029E4                     _get_full_ADC:
  5061                           	opt stack 30
  5062                           
  5063                           ;Lab5.c: 30: int result;
  5064                           ;Lab5.c: 31: ADCON0bits.GO=1;
  5065                           
  5066                           ;incstack = 0
  5067  0029E4  82C2               	bsf	4034,1,c	;volatile
  5068                           
  5069                           ;Lab5.c: 32: while(ADCON0bits.DONE==1);
  5070  0029E6  D000               	goto	l58
  5071  0029E8                     l58:
  5072  0029E8  B2C2               	btfsc	4034,1,c	;volatile
  5073  0029EA  D7FE               	goto	l58
  5074                           
  5075                           ;Lab5.c: 33: result = (ADRESH * 0x100) + ADRESL;
  5076  0029EC  50C4               	movf	4036,w,c	;volatile
  5077  0029EE  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5078  0029F0  6A03               	clrf	??_get_full_ADC& (0+255),c
  5079  0029F2  50C3               	movf	4035,w,c	;volatile
  5080  0029F4  2403               	addwf	??_get_full_ADC,w,c
  5081  0029F6  6E05               	movwf	get_full_ADC@result,c
  5082  0029F8  0E00               	movlw	0
  5083  0029FA  2004               	addwfc	??_get_full_ADC+1,w,c
  5084  0029FC  6E06               	movwf	get_full_ADC@result+1,c
  5085                           
  5086                           ;Lab5.c: 35: return result;
  5087  0029FE  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5088  002A02  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5089  002A06  D000               	goto	l61
  5090  002A08                     l61:
  5091  002A08  0012               	return		;funcret
  5092  002A0A                     __end_of_get_full_ADC:
  5093                           	opt stack 0
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           postinc0	equ	0xFEE
  5101                           wreg	equ	0xFE8
  5102                           postdec1	equ	0xFE5
  5103                           fsr1l	equ	0xFE1
  5104                           postinc2	equ	0xFDE
  5105                           postdec2	equ	0xFDD
  5106                           fsr2h	equ	0xFDA
  5107                           fsr2l	equ	0xFD9
  5108                           status	equ	0xFD8
  5109                           
  5110 ;; *************** function ___ftdiv *****************
  5111 ;; Defined at:
  5112 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  f1              3   27[COMRAM] float 
  5115 ;;  f2              3   30[COMRAM] float 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  f3              3   37[COMRAM] float 
  5118 ;;  sign            1   41[COMRAM] unsigned char 
  5119 ;;  exp             1   40[COMRAM] unsigned char 
  5120 ;;  cntr            1   36[COMRAM] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  3   27[COMRAM] float 
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5130 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;Total ram usage:       15 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    1
  5137 ;; This function calls:
  5138 ;;		___ftpack
  5139 ;; This function is called by:
  5140 ;;		_main
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text23
  5145  0023A6                     __ptext23:
  5146                           	opt stack 0
  5147  0023A6                     ___ftdiv:
  5148                           	opt stack 29
  5149                           
  5150                           ;incstack = 0
  5151  0023A6  C01E  F022         	movff	___ftdiv@f1+2,??___ftdiv
  5152  0023AA  6A23               	clrf	(??___ftdiv+1)& (0+255),c
  5153  0023AC  6A24               	clrf	(??___ftdiv+2)& (0+255),c
  5154  0023AE  341D               	rlcf	___ftdiv@f1+1,w,c
  5155  0023B0  3622               	rlcf	??___ftdiv& (0+255),f,c
  5156  0023B2  E301               	bnc	u2711
  5157  0023B4  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
  5158  0023B6                     u2711:
  5159  0023B6  5022               	movf	??___ftdiv,w,c
  5160  0023B8  6E29               	movwf	___ftdiv@exp,c
  5161  0023BA  5029               	movf	___ftdiv@exp,w,c
  5162  0023BC  A4D8               	btfss	status,2,c
  5163  0023BE  D002               	goto	l2532
  5164  0023C0  D00E               	goto	l2534
  5165  0023C2  D061               	goto	l608
  5166  0023C4                     l2532:
  5167  0023C4  C021  F022         	movff	___ftdiv@f2+2,??___ftdiv
  5168  0023C8  6A23               	clrf	(??___ftdiv+1)& (0+255),c
  5169  0023CA  6A24               	clrf	(??___ftdiv+2)& (0+255),c
  5170  0023CC  3420               	rlcf	___ftdiv@f2+1,w,c
  5171  0023CE  3622               	rlcf	??___ftdiv& (0+255),f,c
  5172  0023D0  E301               	bnc	u2731
  5173  0023D2  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
  5174  0023D4                     u2731:
  5175  0023D4  5022               	movf	??___ftdiv,w,c
  5176  0023D6  6E2A               	movwf	___ftdiv@sign,c
  5177  0023D8  502A               	movf	___ftdiv@sign,w,c
  5178  0023DA  A4D8               	btfss	status,2,c
  5179  0023DC  D007               	goto	l2538
  5180  0023DE                     l2534:
  5181  0023DE  0E00               	movlw	0
  5182  0023E0  6E1C               	movwf	?___ftdiv,c
  5183  0023E2  0E00               	movlw	0
  5184  0023E4  6E1D               	movwf	?___ftdiv+1,c
  5185  0023E6  0E00               	movlw	0
  5186  0023E8  6E1E               	movwf	?___ftdiv+2,c
  5187  0023EA  D04D               	goto	l608
  5188  0023EC                     l2538:
  5189  0023EC  0E00               	movlw	0
  5190  0023EE  6E26               	movwf	___ftdiv@f3,c
  5191  0023F0  0E00               	movlw	0
  5192  0023F2  6E27               	movwf	___ftdiv@f3+1,c
  5193  0023F4  0E00               	movlw	0
  5194  0023F6  6E28               	movwf	___ftdiv@f3+2,c
  5195  0023F8  502A               	movf	___ftdiv@sign,w,c
  5196  0023FA  0F89               	addlw	137
  5197  0023FC  5E29               	subwf	___ftdiv@exp,f,c
  5198  0023FE  C01E  F02A         	movff	___ftdiv@f1+2,___ftdiv@sign
  5199  002402  5021               	movf	___ftdiv@f2+2,w,c
  5200  002404  1A2A               	xorwf	___ftdiv@sign,f,c
  5201  002406  0E80               	movlw	128
  5202  002408  162A               	andwf	___ftdiv@sign,f,c
  5203  00240A  8E1D               	bsf	___ftdiv@f1+1,7,c
  5204  00240C  0EFF               	movlw	255
  5205  00240E  161C               	andwf	___ftdiv@f1,f,c
  5206  002410  0EFF               	movlw	255
  5207  002412  161D               	andwf	___ftdiv@f1+1,f,c
  5208  002414  0E00               	movlw	0
  5209  002416  161E               	andwf	___ftdiv@f1+2,f,c
  5210  002418  8E20               	bsf	___ftdiv@f2+1,7,c
  5211  00241A  0EFF               	movlw	255
  5212  00241C  161F               	andwf	___ftdiv@f2,f,c
  5213  00241E  0EFF               	movlw	255
  5214  002420  1620               	andwf	___ftdiv@f2+1,f,c
  5215  002422  0E00               	movlw	0
  5216  002424  1621               	andwf	___ftdiv@f2+2,f,c
  5217  002426  0E18               	movlw	24
  5218  002428  6E25               	movwf	___ftdiv@cntr,c
  5219  00242A  D000               	goto	l2558
  5220  00242C                     l2558:
  5221  00242C  90D8               	bcf	status,0,c
  5222  00242E  3626               	rlcf	___ftdiv@f3,f,c
  5223  002430  3627               	rlcf	___ftdiv@f3+1,f,c
  5224  002432  3628               	rlcf	___ftdiv@f3+2,f,c
  5225  002434  501F               	movf	___ftdiv@f2,w,c
  5226  002436  5C1C               	subwf	___ftdiv@f1,w,c
  5227  002438  5020               	movf	___ftdiv@f2+1,w,c
  5228  00243A  581D               	subwfb	___ftdiv@f1+1,w,c
  5229  00243C  5021               	movf	___ftdiv@f2+2,w,c
  5230  00243E  581E               	subwfb	___ftdiv@f1+2,w,c
  5231  002440  A0D8               	btfss	status,0,c
  5232  002442  D007               	goto	l611
  5233  002444  501F               	movf	___ftdiv@f2,w,c
  5234  002446  5E1C               	subwf	___ftdiv@f1,f,c
  5235  002448  5020               	movf	___ftdiv@f2+1,w,c
  5236  00244A  5A1D               	subwfb	___ftdiv@f1+1,f,c
  5237  00244C  5021               	movf	___ftdiv@f2+2,w,c
  5238  00244E  5A1E               	subwfb	___ftdiv@f1+2,f,c
  5239  002450  8026               	bsf	___ftdiv@f3,0,c
  5240  002452                     l611:
  5241  002452  90D8               	bcf	status,0,c
  5242  002454  361C               	rlcf	___ftdiv@f1,f,c
  5243  002456  361D               	rlcf	___ftdiv@f1+1,f,c
  5244  002458  361E               	rlcf	___ftdiv@f1+2,f,c
  5245  00245A  2E25               	decfsz	___ftdiv@cntr,f,c
  5246  00245C  D7E7               	goto	l2558
  5247  00245E  D000               	goto	l2568
  5248  002460                     l2568:
  5249  002460  C026  F001         	movff	___ftdiv@f3,___ftpack@arg
  5250  002464  C027  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5251  002468  C028  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5252  00246C  C029  F004         	movff	___ftdiv@exp,___ftpack@exp
  5253  002470  C02A  F005         	movff	___ftdiv@sign,___ftpack@sign
  5254  002474  EC44  F012         	call	___ftpack	;wreg free
  5255  002478  C001  F01C         	movff	?___ftpack,?___ftdiv
  5256  00247C  C002  F01D         	movff	?___ftpack+1,?___ftdiv+1
  5257  002480  C003  F01E         	movff	?___ftpack+2,?___ftdiv+2
  5258  002484  D000               	goto	l608
  5259  002486                     l608:
  5260  002486  0012               	return		;funcret
  5261  002488                     __end_of___ftdiv:
  5262                           	opt stack 0
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           postinc0	equ	0xFEE
  5270                           wreg	equ	0xFE8
  5271                           postdec1	equ	0xFE5
  5272                           fsr1l	equ	0xFE1
  5273                           postinc2	equ	0xFDE
  5274                           postdec2	equ	0xFDD
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279 ;; *************** function ___awtoft *****************
  5280 ;; Defined at:
  5281 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  c               2    8[COMRAM] int 
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;  sign            1   11[COMRAM] unsigned char 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  3    8[COMRAM] float 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 0/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5295 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;Total ram usage:        4 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    1
  5302 ;; This function calls:
  5303 ;;		___ftpack
  5304 ;; This function is called by:
  5305 ;;		_main
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text24
  5310  002956                     __ptext24:
  5311                           	opt stack 0
  5312  002956                     ___awtoft:
  5313                           	opt stack 29
  5314                           
  5315                           ;incstack = 0
  5316  002956  0E00               	movlw	0
  5317  002958  6E0C               	movwf	___awtoft@sign,c
  5318  00295A  AE0A               	btfss	___awtoft@c+1,7,c
  5319  00295C  D007               	goto	l2580
  5320  00295E  6C09               	negf	___awtoft@c,c
  5321  002960  1E0A               	comf	___awtoft@c+1,f,c
  5322  002962  B0D8               	btfsc	status,0,c
  5323  002964  2A0A               	incf	___awtoft@c+1,f,c
  5324  002966  0E01               	movlw	1
  5325  002968  6E0C               	movwf	___awtoft@sign,c
  5326  00296A  D000               	goto	l2580
  5327  00296C                     l2580:
  5328  00296C  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5329  002970  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5330  002974  6A03               	clrf	___ftpack@arg+2,c
  5331  002976  0E8E               	movlw	142
  5332  002978  6E04               	movwf	___ftpack@exp,c
  5333  00297A  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5334  00297E  EC44  F012         	call	___ftpack	;wreg free
  5335  002982  C001  F009         	movff	?___ftpack,?___awtoft
  5336  002986  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5337  00298A  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5338  00298E  D000               	goto	l429
  5339  002990                     l429:
  5340  002990  0012               	return		;funcret
  5341  002992                     __end_of___awtoft:
  5342                           	opt stack 0
  5343                           tblptru	equ	0xFF8
  5344                           tblptrh	equ	0xFF7
  5345                           tblptrl	equ	0xFF6
  5346                           tablat	equ	0xFF5
  5347                           prodh	equ	0xFF4
  5348                           prodl	equ	0xFF3
  5349                           postinc0	equ	0xFEE
  5350                           wreg	equ	0xFE8
  5351                           postdec1	equ	0xFE5
  5352                           fsr1l	equ	0xFE1
  5353                           postinc2	equ	0xFDE
  5354                           postdec2	equ	0xFDD
  5355                           fsr2h	equ	0xFDA
  5356                           fsr2l	equ	0xFD9
  5357                           status	equ	0xFD8
  5358                           
  5359 ;; *************** function ___ftpack *****************
  5360 ;; Defined at:
  5361 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  arg             3    0[COMRAM] unsigned um
  5364 ;;  exp             1    3[COMRAM] unsigned char 
  5365 ;;  sign            1    4[COMRAM] unsigned char 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;		None
  5368 ;; Return value:  Size  Location     Type
  5369 ;;                  3    0[COMRAM] float 
  5370 ;; Registers used:
  5371 ;;		wreg, status,2, status,0
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5377 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;Total ram usage:        8 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; This function calls:
  5384 ;;		Nothing
  5385 ;; This function is called by:
  5386 ;;		___awtoft
  5387 ;;		___ftadd
  5388 ;;		___ftdiv
  5389 ;;		___ftmul
  5390 ;;		___lltoft
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text25
  5395  002488                     __ptext25:
  5396                           	opt stack 0
  5397  002488                     ___ftpack:
  5398                           	opt stack 27
  5399                           
  5400                           ;incstack = 0
  5401  002488  5004               	movf	___ftpack@exp,w,c
  5402  00248A  B4D8               	btfsc	status,2,c
  5403  00248C  D005               	goto	l1746
  5404  00248E  5001               	movf	___ftpack@arg,w,c
  5405  002490  1002               	iorwf	___ftpack@arg+1,w,c
  5406  002492  1003               	iorwf	___ftpack@arg+2,w,c
  5407  002494  A4D8               	btfss	status,2,c
  5408  002496  D00E               	goto	l1752
  5409  002498                     l1746:
  5410  002498  0E00               	movlw	0
  5411  00249A  6E01               	movwf	?___ftpack,c
  5412  00249C  0E00               	movlw	0
  5413  00249E  6E02               	movwf	?___ftpack+1,c
  5414  0024A0  0E00               	movlw	0
  5415  0024A2  6E03               	movwf	?___ftpack+2,c
  5416  0024A4  D053               	goto	l536
  5417  0024A6  D006               	goto	l1752
  5418  0024A8                     l1750:
  5419  0024A8  2A04               	incf	___ftpack@exp,f,c
  5420  0024AA  90D8               	bcf	status,0,c
  5421  0024AC  3203               	rrcf	___ftpack@arg+2,f,c
  5422  0024AE  3202               	rrcf	___ftpack@arg+1,f,c
  5423  0024B0  3201               	rrcf	___ftpack@arg,f,c
  5424  0024B2  D000               	goto	l1752
  5425  0024B4                     l1752:
  5426  0024B4  0E00               	movlw	0
  5427  0024B6  1401               	andwf	___ftpack@arg,w,c
  5428  0024B8  6E06               	movwf	??___ftpack& (0+255),c
  5429  0024BA  0E00               	movlw	0
  5430  0024BC  1402               	andwf	___ftpack@arg+1,w,c
  5431  0024BE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5432  0024C0  0EFE               	movlw	254
  5433  0024C2  1403               	andwf	___ftpack@arg+2,w,c
  5434  0024C4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5435  0024C6  5006               	movf	??___ftpack,w,c
  5436  0024C8  1007               	iorwf	??___ftpack+1,w,c
  5437  0024CA  1008               	iorwf	??___ftpack+2,w,c
  5438  0024CC  B4D8               	btfsc	status,2,c
  5439  0024CE  D00E               	goto	l1758
  5440  0024D0  D7EB               	goto	l1750
  5441  0024D2  D00C               	goto	l1758
  5442  0024D4                     l1754:
  5443  0024D4  2A04               	incf	___ftpack@exp,f,c
  5444  0024D6  0E01               	movlw	1
  5445  0024D8  2601               	addwf	___ftpack@arg,f,c
  5446  0024DA  0E00               	movlw	0
  5447  0024DC  2202               	addwfc	___ftpack@arg+1,f,c
  5448  0024DE  0E00               	movlw	0
  5449  0024E0  2203               	addwfc	___ftpack@arg+2,f,c
  5450  0024E2  90D8               	bcf	status,0,c
  5451  0024E4  3203               	rrcf	___ftpack@arg+2,f,c
  5452  0024E6  3202               	rrcf	___ftpack@arg+1,f,c
  5453  0024E8  3201               	rrcf	___ftpack@arg,f,c
  5454  0024EA  D000               	goto	l1758
  5455  0024EC                     l1758:
  5456  0024EC  0E00               	movlw	0
  5457  0024EE  1401               	andwf	___ftpack@arg,w,c
  5458  0024F0  6E06               	movwf	??___ftpack& (0+255),c
  5459  0024F2  0E00               	movlw	0
  5460  0024F4  1402               	andwf	___ftpack@arg+1,w,c
  5461  0024F6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5462  0024F8  0EFF               	movlw	255
  5463  0024FA  1403               	andwf	___ftpack@arg+2,w,c
  5464  0024FC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5465  0024FE  5006               	movf	??___ftpack,w,c
  5466  002500  1007               	iorwf	??___ftpack+1,w,c
  5467  002502  1008               	iorwf	??___ftpack+2,w,c
  5468  002504  B4D8               	btfsc	status,2,c
  5469  002506  D008               	goto	l1762
  5470  002508  D7E5               	goto	l1754
  5471  00250A  D006               	goto	l1762
  5472  00250C                     l1760:
  5473  00250C  0604               	decf	___ftpack@exp,f,c
  5474  00250E  90D8               	bcf	status,0,c
  5475  002510  3601               	rlcf	___ftpack@arg,f,c
  5476  002512  3602               	rlcf	___ftpack@arg+1,f,c
  5477  002514  3603               	rlcf	___ftpack@arg+2,f,c
  5478  002516  D000               	goto	l1762
  5479  002518                     l1762:
  5480  002518  BE02               	btfsc	___ftpack@arg+1,7,c
  5481  00251A  D004               	goto	l547
  5482  00251C  0E02               	movlw	2
  5483  00251E  6004               	cpfslt	___ftpack@exp,c
  5484  002520  D7F5               	goto	l1760
  5485  002522  D000               	goto	l547
  5486  002524                     l547:
  5487  002524  B004               	btfsc	___ftpack@exp,0,c
  5488  002526  D002               	goto	l1768
  5489  002528  9E02               	bcf	___ftpack@arg+1,7,c
  5490  00252A  D000               	goto	l1768
  5491  00252C                     l1768:
  5492  00252C  90D8               	bcf	status,0,c
  5493  00252E  3204               	rrcf	___ftpack@exp,f,c
  5494  002530  5004               	movf	___ftpack@exp,w,c
  5495  002532  1203               	iorwf	___ftpack@arg+2,f,c
  5496  002534  5005               	movf	___ftpack@sign,w,c
  5497  002536  B4D8               	btfsc	status,2,c
  5498  002538  D002               	goto	l1774
  5499  00253A  8E03               	bsf	___ftpack@arg+2,7,c
  5500  00253C  D000               	goto	l1774
  5501  00253E                     l1774:
  5502  00253E  C001  F001         	movff	___ftpack@arg,?___ftpack
  5503  002542  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5504  002546  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5505  00254A  D000               	goto	l536
  5506  00254C                     l536:
  5507  00254C  0012               	return		;funcret
  5508  00254E                     __end_of___ftpack:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           postdec1	equ	0xFE5
  5519                           fsr1l	equ	0xFE1
  5520                           postinc2	equ	0xFDE
  5521                           postdec2	equ	0xFDD
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8
  5525                           
  5526 ;; *************** function _WAIT_ONE_SEC *****************
  5527 ;; Defined at:
  5528 ;;		line 138 in file "Lab5.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;		None
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  i               2    0[COMRAM] int 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;		None               void
  5535 ;; Registers used:
  5536 ;;		wreg, status,2, status,0
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;Total ram usage:        2 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; This function calls:
  5549 ;;		Nothing
  5550 ;; This function is called by:
  5551 ;;		_main
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           	psect	text26
  5556  002A2E                     __ptext26:
  5557                           	opt stack 0
  5558  002A2E                     _WAIT_ONE_SEC:
  5559                           	opt stack 30
  5560                           
  5561                           ;Lab5.c: 140: for(int i = 0; i < 0xFFFF; i++);
  5562                           
  5563                           ;incstack = 0
  5564  002A2E  0E00               	movlw	0
  5565  002A30  6E02               	movwf	WAIT_ONE_SEC@i+1,c
  5566  002A32  0E00               	movlw	0
  5567  002A34  6E01               	movwf	WAIT_ONE_SEC@i,c
  5568  002A36                     l2518:
  5569  002A36  2801               	incf	WAIT_ONE_SEC@i,w,c
  5570  002A38  E105               	bnz	l2522
  5571  002A3A  2802               	incf	WAIT_ONE_SEC@i+1,w,c
  5572  002A3C  B4D8               	btfsc	status,2,c
  5573  002A3E  D006               	goto	l92
  5574  002A40  D001               	goto	l2522
  5575  002A42  D004               	goto	l92
  5576  002A44                     l2522:
  5577  002A44  4A01               	infsnz	WAIT_ONE_SEC@i,f,c
  5578  002A46  2A02               	incf	WAIT_ONE_SEC@i+1,f,c
  5579  002A48  D7F6               	goto	l2518
  5580  002A4A  D7FC               	goto	l2522
  5581  002A4C                     l92:
  5582  002A4C  0012               	return		;funcret
  5583  002A4E                     __end_of_WAIT_ONE_SEC:
  5584                           	opt stack 0
  5585                           tblptru	equ	0xFF8
  5586                           tblptrh	equ	0xFF7
  5587                           tblptrl	equ	0xFF6
  5588                           tablat	equ	0xFF5
  5589                           prodh	equ	0xFF4
  5590                           prodl	equ	0xFF3
  5591                           postinc0	equ	0xFEE
  5592                           wreg	equ	0xFE8
  5593                           postdec1	equ	0xFE5
  5594                           fsr1l	equ	0xFE1
  5595                           postinc2	equ	0xFDE
  5596                           postdec2	equ	0xFDD
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function _Select_ADC_Channel *****************
  5602 ;; Defined at:
  5603 ;;		line 130 in file "Lab5.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  channel         1    wreg     unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  channel         1    0[COMRAM] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;		None               void
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, prodl, prodh
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;Total ram usage:        1 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_main
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           	psect	text27
  5631  002AA4                     __ptext27:
  5632                           	opt stack 0
  5633  002AA4                     _Select_ADC_Channel:
  5634                           	opt stack 30
  5635                           
  5636                           ;incstack = 0
  5637                           ;Select_ADC_Channel@channel stored from wreg
  5638  002AA4  6E01               	movwf	Select_ADC_Channel@channel,c
  5639                           
  5640                           ;Lab5.c: 132: ADCON0 = channel * 4 + 1;
  5641  002AA6  5001               	movf	Select_ADC_Channel@channel,w,c
  5642  002AA8  0D04               	mullw	4
  5643  002AAA  28F3               	incf	prodl,w,c
  5644  002AAC  6EC2               	movwf	4034,c	;volatile
  5645  002AAE  0012               	return		;funcret
  5646  002AB0                     __end_of_Select_ADC_Channel:
  5647                           	opt stack 0
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodh	equ	0xFF4
  5653                           prodl	equ	0xFF3
  5654                           postinc0	equ	0xFEE
  5655                           wreg	equ	0xFE8
  5656                           postdec1	equ	0xFE5
  5657                           fsr1l	equ	0xFE1
  5658                           postinc2	equ	0xFDE
  5659                           postdec2	equ	0xFDD
  5660                           fsr2h	equ	0xFDA
  5661                           fsr2l	equ	0xFD9
  5662                           status	equ	0xFD8
  5663                           
  5664 ;; *************** function _DISPLAY_UPPER_7SEG *****************
  5665 ;; Defined at:
  5666 ;;		line 107 in file "Lab5.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;  Upper           1    wreg     unsigned char 
  5669 ;; Auto vars:     Size  Location     Type
  5670 ;;  Upper           1    5[COMRAM] unsigned char 
  5671 ;;  LED1            2    6[COMRAM] int 
  5672 ;;  testbit         2    3[COMRAM] int 
  5673 ;; Return value:  Size  Location     Type
  5674 ;;		None               void
  5675 ;; Registers used:
  5676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;Total ram usage:        8 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; This function calls:
  5689 ;;		Nothing
  5690 ;; This function is called by:
  5691 ;;		_main
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text28
  5696  0028C8                     __ptext28:
  5697                           	opt stack 0
  5698  0028C8                     _DISPLAY_UPPER_7SEG:
  5699                           	opt stack 30
  5700                           
  5701                           ;incstack = 0
  5702                           ;DISPLAY_UPPER_7SEG@Upper stored from wreg
  5703  0028C8  6E06               	movwf	DISPLAY_UPPER_7SEG@Upper,c
  5704                           
  5705                           ;Lab5.c: 110: int LED1 = segDisplay[Upper];
  5706  0028CA  5006               	movf	DISPLAY_UPPER_7SEG@Upper,w,c
  5707  0028CC  0D02               	mullw	2
  5708  0028CE  0E80               	movlw	low _segDisplay
  5709  0028D0  24F3               	addwf	prodl,w,c
  5710  0028D2  6ED9               	movwf	fsr2l,c
  5711  0028D4  0E00               	movlw	high _segDisplay
  5712  0028D6  20F4               	addwfc	prodh,w,c
  5713  0028D8  6EDA               	movwf	fsr2h,c
  5714  0028DA  CFDE F007          	movff	postinc2,DISPLAY_UPPER_7SEG@LED1
  5715  0028DE  CFDD F008          	movff	postdec2,DISPLAY_UPPER_7SEG@LED1+1
  5716                           
  5717                           ;Lab5.c: 111: PORTC = LED1 & 0x3F;
  5718  0028E2  5007               	movf	DISPLAY_UPPER_7SEG@LED1,w,c
  5719  0028E4  0B3F               	andlw	63
  5720  0028E6  6E82               	movwf	3970,c	;volatile
  5721                           
  5722                           ;Lab5.c: 113: int testbit = (LED1 & 0x40) >> 0x06;
  5723  0028E8  C007  F001         	movff	DISPLAY_UPPER_7SEG@LED1,??_DISPLAY_UPPER_7SEG
  5724  0028EC  C008  F002         	movff	DISPLAY_UPPER_7SEG@LED1+1,??_DISPLAY_UPPER_7SEG+1
  5725  0028F0  0E06               	movlw	6
  5726  0028F2  6E03               	movwf	(??_DISPLAY_UPPER_7SEG+2)& (0+255),c
  5727  0028F4                     u2675:
  5728  0028F4  3402               	rlcf	??_DISPLAY_UPPER_7SEG+1,w,c
  5729  0028F6  3202               	rrcf	??_DISPLAY_UPPER_7SEG+1,f,c
  5730  0028F8  3201               	rrcf	??_DISPLAY_UPPER_7SEG,f,c
  5731  0028FA  2E03               	decfsz	(??_DISPLAY_UPPER_7SEG+2)& (0+255),f,c
  5732  0028FC  D7FB               	goto	u2675
  5733  0028FE  0E01               	movlw	1
  5734  002900  1401               	andwf	??_DISPLAY_UPPER_7SEG,w,c
  5735  002902  6E04               	movwf	DISPLAY_UPPER_7SEG@testbit,c
  5736  002904  6A05               	clrf	DISPLAY_UPPER_7SEG@testbit+1,c
  5737                           
  5738                           ;Lab5.c: 115: PORTEbits.RE1 = testbit;
  5739  002906  B004               	btfsc	DISPLAY_UPPER_7SEG@testbit,0,c
  5740  002908  D002               	bra	u2685
  5741  00290A  9284               	bcf	3972,1,c	;volatile
  5742  00290C  D001               	bra	u2686
  5743  00290E                     u2685:
  5744  00290E  8284               	bsf	3972,1,c	;volatile
  5745  002910                     u2686:
  5746  002910  0012               	return		;funcret
  5747  002912                     __end_of_DISPLAY_UPPER_7SEG:
  5748                           	opt stack 0
  5749                           tblptru	equ	0xFF8
  5750                           tblptrh	equ	0xFF7
  5751                           tblptrl	equ	0xFF6
  5752                           tablat	equ	0xFF5
  5753                           prodh	equ	0xFF4
  5754                           prodl	equ	0xFF3
  5755                           postinc0	equ	0xFEE
  5756                           wreg	equ	0xFE8
  5757                           postdec1	equ	0xFE5
  5758                           fsr1l	equ	0xFE1
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           fsr2h	equ	0xFDA
  5762                           fsr2l	equ	0xFD9
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _DISPLAY_LOWER_7SEG *****************
  5766 ;; Defined at:
  5767 ;;		line 121 in file "Lab5.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;  Lower           1    wreg     unsigned char 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  Lower           1    2[COMRAM] unsigned char 
  5772 ;;  LED2            2    0[COMRAM] int 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;		None               void
  5775 ;; Registers used:
  5776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;Total ram usage:        3 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; This function calls:
  5789 ;;		Nothing
  5790 ;; This function is called by:
  5791 ;;		_main
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text29
  5796  002A4E                     __ptext29:
  5797                           	opt stack 0
  5798  002A4E                     _DISPLAY_LOWER_7SEG:
  5799                           	opt stack 30
  5800                           
  5801                           ;incstack = 0
  5802                           ;DISPLAY_LOWER_7SEG@Lower stored from wreg
  5803  002A4E  6E03               	movwf	DISPLAY_LOWER_7SEG@Lower,c
  5804                           
  5805                           ;Lab5.c: 124: int LED2 = segDisplay[Lower];
  5806  002A50  5003               	movf	DISPLAY_LOWER_7SEG@Lower,w,c
  5807  002A52  0D02               	mullw	2
  5808  002A54  0E80               	movlw	low _segDisplay
  5809  002A56  24F3               	addwf	prodl,w,c
  5810  002A58  6ED9               	movwf	fsr2l,c
  5811  002A5A  0E00               	movlw	high _segDisplay
  5812  002A5C  20F4               	addwfc	prodh,w,c
  5813  002A5E  6EDA               	movwf	fsr2h,c
  5814  002A60  CFDE F001          	movff	postinc2,DISPLAY_LOWER_7SEG@LED2
  5815  002A64  CFDD F002          	movff	postdec2,DISPLAY_LOWER_7SEG@LED2+1
  5816                           
  5817                           ;Lab5.c: 126: PORTD = LED2;
  5818  002A68  C001  FF83         	movff	DISPLAY_LOWER_7SEG@LED2,3971	;volatile
  5819  002A6C  0012               	return		;funcret
  5820  002A6E                     __end_of_DISPLAY_LOWER_7SEG:
  5821                           	opt stack 0
  5822                           tblptru	equ	0xFF8
  5823                           tblptrh	equ	0xFF7
  5824                           tblptrl	equ	0xFF6
  5825                           tablat	equ	0xFF5
  5826                           prodh	equ	0xFF4
  5827                           prodl	equ	0xFF3
  5828                           postinc0	equ	0xFEE
  5829                           wreg	equ	0xFE8
  5830                           postdec1	equ	0xFE5
  5831                           fsr1l	equ	0xFE1
  5832                           postinc2	equ	0xFDE
  5833                           postdec2	equ	0xFDD
  5834                           fsr2h	equ	0xFDA
  5835                           fsr2l	equ	0xFD9
  5836                           status	equ	0xFD8
  5837                           tblptru	equ	0xFF8
  5838                           tblptrh	equ	0xFF7
  5839                           tblptrl	equ	0xFF6
  5840                           tablat	equ	0xFF5
  5841                           prodh	equ	0xFF4
  5842                           prodl	equ	0xFF3
  5843                           postinc0	equ	0xFEE
  5844                           wreg	equ	0xFE8
  5845                           postdec1	equ	0xFE5
  5846                           fsr1l	equ	0xFE1
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           
  5853                           	psect	rparam
  5854  0000                     tblptru	equ	0xFF8
  5855                           tblptrh	equ	0xFF7
  5856                           tblptrl	equ	0xFF6
  5857                           tablat	equ	0xFF5
  5858                           prodh	equ	0xFF4
  5859                           prodl	equ	0xFF3
  5860                           postinc0	equ	0xFEE
  5861                           wreg	equ	0xFE8
  5862                           postdec1	equ	0xFE5
  5863                           fsr1l	equ	0xFE1
  5864                           postinc2	equ	0xFDE
  5865                           postdec2	equ	0xFDD
  5866                           fsr2h	equ	0xFDA
  5867                           fsr2l	equ	0xFD9
  5868                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    118
    Data        20
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    124     124
    BANK0           128      7      27
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___awmod->___fttol
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_UART->_OpenUSART
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   55103
                                              0 BANK0      7     7      0
                 _DISPLAY_LOWER_7SEG
                 _DISPLAY_UPPER_7SEG
                 _Select_ADC_Channel
                       _WAIT_ONE_SEC
                            ___awmod
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                       _get_full_ADC
                           _init_ADC
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   42841
                                             90 COMRAM    34    29      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10437
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10239
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2207
                                             56 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4585
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                             42 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                             48 COMRAM     8     4      4
                            ___awmod (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     572
                                             27 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3604
                                             84 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3307
                                             72 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2619
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _WAIT_ONE_SEC                                         2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DISPLAY_UPPER_7SEG                                   8     8      0      90
                                              0 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _DISPLAY_LOWER_7SEG                                   3     3      0      45
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DISPLAY_LOWER_7SEG
   _DISPLAY_UPPER_7SEG
   _Select_ADC_Channel
   _WAIT_ONE_SEC
   ___awmod
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _get_full_ADC
   _init_ADC
   _init_UART
     _OpenUSART
   _printf
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___awmod
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___awmod (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___awmod
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___awmod
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      1B       5       21.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7C      7C       1       97.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      97      34        0.0%
DATA                 0      0      97       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Sep 23 20:59:18 2021

                         l61 2A08                           l58 29E8                           l67 2A9A  
                         l92 2A4C                 ___awdiv@sign 0036          ___wmul@multiplicand 003B  
               ___ftadd@exp1 0054                 ___ftadd@exp2 0053                 ___ftadd@sign 0052  
                        l112 1CCE                          l203 283E                          l211 29E2  
                        l204 2840                          l205 284A                          l206 284C  
                        l119 1A8A                          l208 2866                          l404 25E2  
                        l164 1506                          l175 16AA                          l600 1E1C  
                        l504 21B6                          l417 2786                          l611 2452  
                        l700 26F4                          l429 2990                          l710 27E6  
                        l199 2824                          l536 254C                          l608 2486  
                        l616 20BC                          l640 22BE                          l625 20AC  
                        l634 2678                          l650 2A20                          l730 28C6  
                        l618 2024                          l547 2524                          l619 204C  
                        l580 1D3E                          l661 23A4                          l591 1E00  
                        l495 21C6                          l576 1D14                          l577 1E92  
                        l657 2954       DISPLAY_UPPER_7SEG@LED1 0007                 ___awmod@sign 0030  
                        prod 000FF3                          wreg 000FE8                 __CFG_LVP$OFF 000000  
               ___ftdiv@cntr 0025                 ___ftdiv@sign 002A                 __CFG_WDT$OFF 000000  
                       l2000 2828                         l2102 1FCC                         l2008 2836  
                       l2210 21B0                         l2202 2188                         l2130 205A  
                       l2204 218E                         l2108 1FEA                         l2150 20A6  
                       l2142 207E                         l2054 1C8E                         l2046 1BCA  
                       l2224 2616                         l2216 292A                         l2208 21A2  
                       l2144 2084                         l2234 2674                         l2306 26E4  
                       l2322 27D6                         l2314 279A                         l2330 287C  
                       l2138 206E                         l2074 1880                         l2410 1254  
                       l2228 2648                         l2316 27A8                         l2164 20DE  
                       l2148 2098                         l2092 1A66                         l2068 17D8  
                       l2420 12CC                         l2412 1284                         l2404 121E  
                       l2270 2348                         l2318 27B0                         l2190 2164  
                       l2158 20CE                         l2086 19B4                         l2078 1890  
                       l2430 133C                         l2414 1294                         l2502 168E  
                       l2272 234E                         l2280 237A                         l2248 22DE  
                       l2328 286E                         l2440 13E2                         l2432 136A  
                       l2424 12F0                         l2408 1244                         l2360 10AC  
                       l2522 2A44                         l2266 2338                         l2186 2154  
                       l2178 2122                         l2426 12FA                         l2434 1378  
                       l2354 1090                         l2532 23C4                         l1820 1DA4  
                       l1804 1D58                         l2284 2392                         l2276 2362  
                       l2452 1422                         l2444 13EE                         l2380 1128  
                       l2364 10B4                         l2604 1EBC                         l2518 2A36  
                       l1750 24A8                         l2534 23DE                         l1822 1DB0  
                       l1814 1D80                         l2278 2370                         l2294 269C  
                       l2198 2178                         l1910 2564                         l2470 14F0  
                       l2462 14C8                         l2438 13DE                         l2366 10D6  
                       l2358 10A0                         l1760 250C                         l1752 24B4  
                       l1840 1E3A                         l1832 1DE8                         l1824 1DBC  
                       l2296 26AA                         l2480 1526                         l2464 14D4  
                       l2456 143E                         l2448 141E                         l1762 2518  
                       l1754 24D4                         l1746 2498                         l2538 23EC  
                       l1850 1E6C                         l1834 1DF4                         l1826 1DC4  
                       l2298 26B2                         l1922 258C                         l2490 164C  
                       l2474 150C                         l2580 296C                         l1924 2596  
                       l1916 2576                         l1860 21E6                         l2492 1658  
                       l2484 1576                         l2468 14E2                         l2396 11BA  
                       l1774 253E                         l1758 24EC                         l2558 242C  
                       l1942 25D8                         l1934 25BC                         l1926 259E  
                       l1862 2200                         l1768 252C                         l2568 2460  
                       l1792 1D22                         l1880 2242                         l2496 1666  
                       l1938 25C8                         l1970 2760                         l1962 2738  
                       l1954 271C                         l1890 2270                         l1866 220E  
                       l2498 1672                         l1964 2742                         l1884 2254  
                       l1798 1D4C                         l1966 274A                         l1974 276C  
                       l1958 272A                         l1894 2282                         l1992 2814  
                       l1888 226A                         l1978 277C                         l1898 2298  
                       l1996 281C                         l1988 280A                         STR_1 1077  
                       u2041 1FBE                         u2061 1FDC                         u2251 22D0  
                       u1701 21F6                         u2270 22FC                         u1471 1CE0  
                       u1481 1CF4                         u2610 1500                         u2450 1160  
                       u2275 22F4                         u2711 23B6                         u2455 1156  
                       u1681 21D8                         u2731 23D4                 printf@tmpval 0075  
                       u2675 28F4                         u2685 290E                         u2686 2910  
                       _TRMT 007D61                         _main 1E94                 ___ftpack@arg 0001  
               ___ftpack@exp 0004               ??_get_full_ADC 0003                         fsr2h 000FDA  
                       fsr1l 000FE1                         fsr2l 000FD9      DISPLAY_UPPER_7SEG@Upper 0006  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
               ___ftmul@cntr 001A                 ___param_bank 000010                 ___ftmul@sign 001B  
 __end_of_DISPLAY_LOWER_7SEG 2A6E                 ___fttol@exp1 002A                 ___fttol@lval 0026  
                      ?_main 0001              __end_of___awdiv 25E4              __end_of___ftadd 1E94  
            __end_of___awmod 2788              __end_of___ftdiv 2488              __end_of___ftneg 2A2E  
            __end_of___lldiv 2706              __end_of___ftmul 22C0              ___awdiv@divisor 0033  
            __end_of___llmod 27F8              __end_of___ftsub 2956              __end_of___fttol 23A6  
            ___awdiv@counter 0035                        _RCSTA 000FAB                        _SPBRG 000FAF  
                      _PORTB 000F81                        _PORTC 000F82                        _PORTD 000F83  
                      _PORTE 000F84                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
                      _TXREG 000FAD                        _TXSTA 000FAC                 ___lltoft@exp 0011  
              ___awtoft@sign 000C              __end_of_dpowers 1029                        _scale 16AC  
              ___ftpack@sign 0005                        main@L 0097                        main@U 0096  
                      _putch 2A96               __CFG_BOREN$OFF 000000                        tablat 000FF5  
                      status 000FD8              __initialization 2992   __end_of_DISPLAY_UPPER_7SEG 2912  
               __end_of_main 1FAE                       ??_main 007D                ___fttol@sign1 0025  
              __activetblptr 000002         __size_of__tdiv_to_l_ 0110                       _ADCON0 000FC2  
                     _ADCON1 000FC1                       _ADCON2 000FC0             ___llmod@dividend 0001  
                     ?_scale 003F                       _ADRESH 000FC4                       _ADRESL 000FC3  
           ___awdiv@dividend 0031             __end_of___awtoft 2992                       ?_putch 0001  
           __end_of___ftpack 254E             __end_of___lltoft 28C8                       _OSCCON 000FD3  
                     _SPBRGH 000FB0             __end_of__powers_ 1077           __size_of_OpenUSART 0070  
                     ___ftge 25E4                       ___wmul 29BC                    ??___awdiv 0035  
                  ??___ftadd 004F                    ??___awmod 002F                    ??___ftdiv 0022  
                  ??___ftneg 0004                    ??___lldiv 0009                    ??___ftmul 0013  
                  ??___llmod 0009                    ??___ftsub 005B                    ??___fttol 0020  
           __end_of_init_ADC 2ABA                       _fround 1A8C             ___awdiv@quotient 0037  
            ___awmod@divisor 002D              ___awmod@counter 002F                       _printf 1086  
      ___ftmul@f3_as_product 0017         __end_of_get_full_ADC 2A0A                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                     putch@c 0001                   __accesstop 0080      __end_of__initialization 29B2  
                 ___ftadd@f1 0049                   ___ftadd@f2 004C                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                ___rparam_used 000001                   ___ftdiv@f1 001C  
                 ___ftdiv@f2 001F                   ___ftdiv@f3 0026                   ___ftneg@f1 0001  
                 ___awtoft@c 0009                   ___ftmul@f1 000D                   ___ftmul@f2 0010  
                 ___ftsub@f1 0055                   ___ftsub@f2 0058                   ___fttol@f1 001C  
             __pcstackCOMRAM 0001                 __pidataBANK0 2A6E                   ___lltoft@c 0009  
              __end_of_scale 1A8C                __end_of_putch 2AA4                   __div_to_l_ 20BE  
          __end_of_OpenUSART 2868              __div_to_l_@exp1 000C              __div_to_l_@cntr 000B  
                    ??_scale 0042              __div_to_l_@quot 0007                      ??_putch 0001  
         __size_of_init_UART 0014   __end_of_Select_ADC_Channel 2AB0                __div_to_l_@f1 0001  
              __div_to_l_@f2 0004           __CFG_CCP2MX$PORTBE 000000                      ?___ftge 0001  
                    ?___wmul 0039                      ?_fround 003F                    ?___awtoft 0009  
                  ?___ftpack 0001                ?_WAIT_ONE_SEC 0001                      ?_printf 005B  
  Select_ADC_Channel@channel 0001                    ?___lltoft 0009           _DISPLAY_LOWER_7SEG 2A4E  
        ?_DISPLAY_LOWER_7SEG 0001                    ?_init_ADC 0001            __end_of__npowers_ 1050  
                    __Hparam 0000                   _scale$1318 0042                      __Lparam 0000  
            __size_of___ftge 0096                      ___awdiv 254E                      ___ftadd 1CD0  
                    ___awmod 2706                      ___ftdiv 23A6                      ___ftneg 2A0A  
                    ___lldiv 267A              __size_of___wmul 0028                      ___ftmul 21C8  
                    ___llmod 2788                      ___ftsub 2912                      ___fttol 22C0  
      __size_of_get_full_ADC 0026                 __psmallconst 1000         ??_DISPLAY_LOWER_7SEG 0001  
             ??_WAIT_ONE_SEC 0001                   _segDisplay 0080                      __pcinit 2992  
                 ??___awtoft 000C                   ??___ftpack 0006              __size_of_fround 0244  
                    __ramtop 1000                   ??___lltoft 000D                      __ptext0 1E94  
                    __ptext1 1086                      __ptext2 16AC                      __ptext3 2A96  
                    __ptext4 1A8C                      __ptext5 29BC                      __ptext6 21C8  
                    __ptext7 2706                      __ptext8 254E                      __ptext9 1FAE  
            __size_of_printf 0626            __end_of_init_UART 2A96                  ?__div_to_l_ 0001  
                    _dpowers 1001             ___awmod@dividend 002B           _DISPLAY_UPPER_7SEG 28C8  
       end_of_initialization 29B2          ?_DISPLAY_UPPER_7SEG 0001                   ??_init_ADC 0001  
              __Lmediumconst 0000                 _get_full_ADC 29E4              ___lldiv@divisor 0005  
            ___lldiv@counter 000D                    _RCSTAbits 000FAB                      printf@c 007C  
                    printf@f 005B                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE               __tdiv_to_l_@f1 0001  
             __tdiv_to_l_@f2 0004         ??_DISPLAY_UPPER_7SEG 0001                ??__tdiv_to_l_ 0007  
                  _PORTDbits 000F83                    _PORTEbits 000F84                    _TRISCbits 000F94  
                ___ftdiv@exp 0029                    _TXSTAbits 000FAC           get_full_ADC@result 0005  
        __size_of__div_to_l_ 010A                  ___ftmul@exp 0016                WAIT_ONE_SEC@i 0001  
             __end_of___ftge 267A               __end_of___wmul 29E4               __end_of_fround 1CD0  
             __end_of_printf 16AC          start_initialization 2992          __end_of__tdiv_to_l_ 20BE  
       __end_of_WAIT_ONE_SEC 2A4E                    _OpenUSART 27F8              ___llmod@divisor 0005  
           __CFG_OSC$INTIO67 000000              ___llmod@counter 0009                     ??___ftge 0007  
                   ??___wmul 003D                  __pdataBANK0 0080           _Select_ADC_Channel 2AA4  
                   ??_fround 0042                     ??_printf 0060                   fround@prec 0048  
          __size_of___awtoft 003C            __size_of___ftpack 00C6          ?_Select_ADC_Channel 0001  
          __size_of___lltoft 0060                __pcstackBANK0 0094                   ?_OpenUSART 0001  
          __size_of_init_ADC 000A         ??_Select_ADC_Channel 0001                     ?___awdiv 0031  
                   ?___ftadd 0049                     ?___awmod 002B                     ?___ftdiv 001C  
                   ?___ftneg 0001                     ?___lldiv 0001                     ?___ftmul 000D  
                   ?___llmod 0001                     ?___ftsub 0055                    __npowers_ 1029  
                   ?___fttol 001C                  __tdiv_to_l_ 1FAE                 ??__div_to_l_ 0007  
                __smallconst 1000                    _init_UART 2A82               __size_of_scale 03E0  
             __size_of_putch 000E               ___wmul@product 003D                     _PIE1bits 000F9D  
                   _PIR1bits 000F9E           __end_of__div_to_l_ 21C8  __size_of_DISPLAY_LOWER_7SEG 0020  
                 _ADCON0bits 000FC2            ___wmul@multiplier 0039                   printf@flag 006B  
                 printf@fval 0079                   printf@prec 006D                   ?_init_UART 0001  
      __size_of_WAIT_ONE_SEC 0020                    copy_data0 29A6                  ??_OpenUSART 0003  
            OpenUSART@config 0003                     __Hrparam 0000                     __Lrparam 0000  
           __size_of___awdiv 0096             __size_of___ftadd 01C4             __size_of___awmod 0082  
           __size_of___ftdiv 00E2             __size_of___ftneg 0024             __size_of___lldiv 008C  
__size_of_DISPLAY_UPPER_7SEG 004A             __size_of___ftmul 00F8             __size_of___llmod 0070  
           __size_of___ftsub 0044             __size_of___fttol 00E6                     ___awtoft 2956  
                   ___ftpack 2488                  _fround$1316 0045                  _fround$1317 0042  
               _WAIT_ONE_SEC 2A2E                     ___lltoft 2868                     __ptext10 20BE  
                   __ptext11 2868                     __ptext20 27F8                     __ptext12 2788  
                   __ptext21 2AB0                     __ptext13 267A                     __ptext22 29E4  
                   __ptext14 22C0                     __ptext23 23A6                     __ptext15 2912  
                   __ptext24 2956                     __ptext16 1CD0                     __ptext25 2488  
                   __ptext17 2A0A                     __ptext26 2A2E                     __ptext18 25E4  
                   __ptext27 2AA4                     __ptext19 2A82                     __ptext28 28C8  
                   __ptext29 2A4E                     __powers_ 1050                     _init_ADC 2AB0  
  DISPLAY_UPPER_7SEG@testbit 0004                __size_of_main 011A      DISPLAY_LOWER_7SEG@Lower 0003  
                   main@STEP 0094                     main@VOLT 0098                    printf@exp 0073  
                  printf@val 006F               OpenUSART@spbrg 0001                  ??_init_UART 0004  
                   scale@scl 0045             __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E  
           __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001       DISPLAY_LOWER_7SEG@LED2 0001  
                   printf@ap 0069                 ?__tdiv_to_l_ 0001                  _printf$1319 0066  
           ___lldiv@quotient 0009                ?_get_full_ADC 0001  __size_of_Select_ADC_Channel 000C  
