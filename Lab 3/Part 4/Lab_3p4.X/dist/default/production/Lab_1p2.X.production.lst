

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Sep 05 13:05:09 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           	psect	smallconst
    35  001000                     __psmallconst:
    36                           	opt stack 0
    37  001000  00                 	db	0
    38  001001                     _dpowers:
    39                           	opt stack 0
    40  001001  0001               	dw	1
    41  001003  0000               	dw	0
    42  001005  000A               	dw	10
    43  001007  0000               	dw	0
    44  001009  0064               	dw	100
    45  00100B  0000               	dw	0
    46  00100D  03E8               	dw	1000
    47  00100F  0000               	dw	0
    48  001011  2710               	dw	10000
    49  001013  0000               	dw	0
    50  001015  86A0               	dw	34464
    51  001017  0001               	dw	1
    52  001019  4240               	dw	16960
    53  00101B  000F               	dw	15
    54  00101D  9680               	dw	38528
    55  00101F  0098               	dw	152
    56  001021  E100               	dw	57600
    57  001023  05F5               	dw	1525
    58  001025  CA00               	dw	51712
    59  001027  3B9A               	dw	15258
    60  001029                     __end_of_dpowers:
    61                           	opt stack 0
    62  001029                     __npowers_:
    63                           	opt stack 0
    64  001029  00                 	db	0
    65  00102A  80                 	db	128
    66  00102B  3F                 	db	63
    67  00102C  CD                 	db	205
    68  00102D  CC                 	db	204
    69  00102E  3D                 	db	61
    70  00102F  D7                 	db	215
    71  001030  23                 	db	35
    72  001031  3C                 	db	60
    73  001032  12                 	db	18
    74  001033  83                 	db	131
    75  001034  3A                 	db	58
    76  001035  B7                 	db	183
    77  001036  D1                 	db	209
    78  001037  38                 	db	56
    79  001038  C6                 	db	198
    80  001039  27                 	db	39
    81  00103A  37                 	db	55
    82  00103B  38                 	db	56
    83  00103C  86                 	db	134
    84  00103D  35                 	db	53
    85  00103E  C0                 	db	192
    86  00103F  D6                 	db	214
    87  001040  33                 	db	51
    88  001041  CC                 	db	204
    89  001042  2B                 	db	43
    90  001043  32                 	db	50
    91  001044  70                 	db	112
    92  001045  89                 	db	137
    93  001046  30                 	db	48
    94  001047  E7                 	db	231
    95  001048  DB                 	db	219
    96  001049  2E                 	db	46
    97  00104A  E5                 	db	229
    98  00104B  3C                 	db	60
    99  00104C  1E                 	db	30
   100  00104D  42                 	db	66
   101  00104E  A2                 	db	162
   102  00104F  0D                 	db	13
   103  001050                     __end_of__npowers_:
   104                           	opt stack 0
   105  001050                     __powers_:
   106                           	opt stack 0
   107  001050  00                 	db	0
   108  001051  80                 	db	128
   109  001052  3F                 	db	63
   110  001053  00                 	db	0
   111  001054  20                 	db	32
   112  001055  41                 	db	65
   113  001056  00                 	db	0
   114  001057  C8                 	db	200
   115  001058  42                 	db	66
   116  001059  00                 	db	0
   117  00105A  7A                 	db	122
   118  00105B  44                 	db	68
   119  00105C  40                 	db	64
   120  00105D  1C                 	db	28
   121  00105E  46                 	db	70
   122  00105F  50                 	db	80
   123  001060  C3                 	db	195
   124  001061  47                 	db	71
   125  001062  24                 	db	36
   126  001063  74                 	db	116
   127  001064  49                 	db	73
   128  001065  97                 	db	151
   129  001066  18                 	db	24
   130  001067  4B                 	db	75
   131  001068  BC                 	db	188
   132  001069  BE                 	db	190
   133  00106A  4C                 	db	76
   134  00106B  6B                 	db	107
   135  00106C  6E                 	db	110
   136  00106D  4E                 	db	78
   137  00106E  03                 	db	3
   138  00106F  15                 	db	21
   139  001070  50                 	db	80
   140  001071  79                 	db	121
   141  001072  AD                 	db	173
   142  001073  60                 	db	96
   143  001074  F3                 	db	243
   144  001075  49                 	db	73
   145  001076  71                 	db	113
   146  001077                     __end_of__powers_:
   147                           	opt stack 0
   148  0000                     _OSCCON	set	4051
   149  0000                     _PIE1bits	set	3997
   150  0000                     _PIR1bits	set	3998
   151  0000                     _RCSTA	set	4011
   152  0000                     _RCSTAbits	set	4011
   153  0000                     _SPBRG	set	4015
   154  0000                     _SPBRGH	set	4016
   155  0000                     _TRISCbits	set	3988
   156  0000                     _TXREG	set	4013
   157  0000                     _TXSTA	set	4012
   158  0000                     _TXSTAbits	set	4012
   159  0000                     _TRMT	set	32097
   160  001077                     STR_1:
   161  001077  0D                 	db	13
   162  001078  0A                 	db	10
   163  001079  0A                 	db	10
   164  00107A  48                 	db	72	;'H'
   165  00107B  65                 	db	101	;'e'
   166  00107C  6C                 	db	108	;'l'
   167  00107D  6C                 	db	108	;'l'
   168  00107E  6F                 	db	111	;'o'
   169  00107F  20                 	db	32
   170  001080  57                 	db	87	;'W'
   171  001081  6F                 	db	111	;'o'
   172  001082  72                 	db	114	;'r'
   173  001083  6C                 	db	108	;'l'
   174  001084  64                 	db	100	;'d'
   175  001085  21                 	db	33
   176  001086  20                 	db	32
   177  001087  46                 	db	70	;'F'
   178  001088  6C                 	db	108	;'l'
   179  001089  6F                 	db	111	;'o'
   180  00108A  61                 	db	97	;'a'
   181  00108B  74                 	db	116	;'t'
   182  00108C  69                 	db	105	;'i'
   183  00108D  6E                 	db	110	;'n'
   184  00108E  67                 	db	103	;'g'
   185  00108F  20                 	db	32
   186  001090  50                 	db	80	;'P'
   187  001091  6F                 	db	111	;'o'
   188  001092  69                 	db	105	;'i'
   189  001093  6E                 	db	110	;'n'
   190  001094  74                 	db	116	;'t'
   191  001095  20                 	db	32
   192  001096  50                 	db	80	;'P'
   193  001097  72                 	db	114	;'r'
   194  001098  69                 	db	105	;'i'
   195  001099  6E                 	db	110	;'n'
   196  00109A  74                 	db	116	;'t'
   197  00109B  20                 	db	32
   198  00109C  77                 	db	119	;'w'
   199  00109D  69                 	db	105	;'i'
   200  00109E  74                 	db	116	;'t'
   201  00109F  68                 	db	104	;'h'
   202  0010A0  20                 	db	32
   203  0010A1  31                 	db	49	;'1'
   204  0010A2  20                 	db	32
   205  0010A3  64                 	db	100	;'d'
   206  0010A4  65                 	db	101	;'e'
   207  0010A5  63                 	db	99	;'c'
   208  0010A6  69                 	db	105	;'i'
   209  0010A7  6D                 	db	109	;'m'
   210  0010A8  61                 	db	97	;'a'
   211  0010A9  6C                 	db	108	;'l'
   212  0010AA  20                 	db	32
   213  0010AB  70                 	db	112	;'p'
   214  0010AC  6C                 	db	108	;'l'
   215  0010AD  61                 	db	97	;'a'
   216  0010AE  63                 	db	99	;'c'
   217  0010AF  65                 	db	101	;'e'
   218  0010B0  20                 	db	32
   219  0010B1  74                 	db	116	;'t'
   220  0010B2  3D                 	db	61	;'='
   221  0010B3  20                 	db	32
   222  0010B4  25                 	db	37
   223  0010B5  36                 	db	54	;'6'
   224  0010B6  2E                 	db	46
   225  0010B7  31                 	db	49	;'1'
   226  0010B8  66                 	db	102	;'f'
   227  0010B9  00                 	db	0
   228  0010BA                     STR_2:
   229  0010BA  0D                 	db	13
   230  0010BB  0A                 	db	10
   231  0010BC  48                 	db	72	;'H'
   232  0010BD  65                 	db	101	;'e'
   233  0010BE  6C                 	db	108	;'l'
   234  0010BF  6C                 	db	108	;'l'
   235  0010C0  6F                 	db	111	;'o'
   236  0010C1  20                 	db	32
   237  0010C2  57                 	db	87	;'W'
   238  0010C3  6F                 	db	111	;'o'
   239  0010C4  72                 	db	114	;'r'
   240  0010C5  6C                 	db	108	;'l'
   241  0010C6  64                 	db	100	;'d'
   242  0010C7  21                 	db	33
   243  0010C8  20                 	db	32
   244  0010C9  46                 	db	70	;'F'
   245  0010CA  6C                 	db	108	;'l'
   246  0010CB  6F                 	db	111	;'o'
   247  0010CC  61                 	db	97	;'a'
   248  0010CD  74                 	db	116	;'t'
   249  0010CE  69                 	db	105	;'i'
   250  0010CF  6E                 	db	110	;'n'
   251  0010D0  67                 	db	103	;'g'
   252  0010D1  20                 	db	32
   253  0010D2  50                 	db	80	;'P'
   254  0010D3  6F                 	db	111	;'o'
   255  0010D4  69                 	db	105	;'i'
   256  0010D5  6E                 	db	110	;'n'
   257  0010D6  74                 	db	116	;'t'
   258  0010D7  20                 	db	32
   259  0010D8  70                 	db	112	;'p'
   260  0010D9  72                 	db	114	;'r'
   261  0010DA  69                 	db	105	;'i'
   262  0010DB  6E                 	db	110	;'n'
   263  0010DC  74                 	db	116	;'t'
   264  0010DD  20                 	db	32
   265  0010DE  77                 	db	119	;'w'
   266  0010DF  69                 	db	105	;'i'
   267  0010E0  74                 	db	116	;'t'
   268  0010E1  68                 	db	104	;'h'
   269  0010E2  20                 	db	32
   270  0010E3  32                 	db	50	;'2'
   271  0010E4  20                 	db	32
   272  0010E5  64                 	db	100	;'d'
   273  0010E6  65                 	db	101	;'e'
   274  0010E7  63                 	db	99	;'c'
   275  0010E8  69                 	db	105	;'i'
   276  0010E9  6D                 	db	109	;'m'
   277  0010EA  61                 	db	97	;'a'
   278  0010EB  6C                 	db	108	;'l'
   279  0010EC  20                 	db	32
   280  0010ED  70                 	db	112	;'p'
   281  0010EE  6C                 	db	108	;'l'
   282  0010EF  61                 	db	97	;'a'
   283  0010F0  63                 	db	99	;'c'
   284  0010F1  65                 	db	101	;'e'
   285  0010F2  73                 	db	115	;'s'
   286  0010F3  20                 	db	32
   287  0010F4  74                 	db	116	;'t'
   288  0010F5  3D                 	db	61	;'='
   289  0010F6  20                 	db	32
   290  0010F7  25                 	db	37
   291  0010F8  36                 	db	54	;'6'
   292  0010F9  2E                 	db	46
   293  0010FA  32                 	db	50	;'2'
   294  0010FB  66                 	db	102	;'f'
   295  0010FC  00                 	db	0
   296                           
   297                           ; #config settings
   298  0010FD  00                 	db	0	; dummy byte at the end
   299  0000                     
   300                           	psect	cinit
   301  002ACA                     __pcinit:
   302                           	opt stack 0
   303  002ACA                     start_initialization:
   304                           	opt stack 0
   305  002ACA                     __initialization:
   306                           	opt stack 0
   307  002ACA                     end_of_initialization:
   308                           	opt stack 0
   309  002ACA                     __end_of__initialization:
   310                           	opt stack 0
   311  002ACA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   312  002ACC  6EF8               	movwf	tblptru,c
   313  002ACE  0100               	movlb	0
   314  002AD0  EFD7  F014         	goto	_main	;jump to C main() function
   315                           tblptru	equ	0xFF8
   316                           
   317                           	psect	cstackCOMRAM
   318  000001                     __pcstackCOMRAM:
   319                           	opt stack 0
   320  000001                     ??_isdigit:
   321  000001                     ?___awmod:
   322                           	opt stack 0
   323  000001                     ?___ftpack:
   324                           	opt stack 0
   325  000001                     ?___ftneg:
   326                           	opt stack 0
   327  000001                     ?__tdiv_to_l_:
   328                           	opt stack 0
   329  000001                     ?__div_to_l_:
   330                           	opt stack 0
   331  000001                     ?___lldiv:
   332                           	opt stack 0
   333  000001                     ?___llmod:
   334                           	opt stack 0
   335  000001                     putch@c:
   336                           	opt stack 0
   337  000001                     OpenUSART@spbrg:
   338                           	opt stack 0
   339  000001                     ___awmod@dividend:
   340                           	opt stack 0
   341  000001                     __div_to_l_@f1:
   342                           	opt stack 0
   343  000001                     ___ftpack@arg:
   344                           	opt stack 0
   345  000001                     __tdiv_to_l_@f1:
   346                           	opt stack 0
   347  000001                     ___ftge@ff1:
   348                           	opt stack 0
   349  000001                     ___ftneg@f1:
   350                           	opt stack 0
   351  000001                     ___lldiv@dividend:
   352                           	opt stack 0
   353  000001                     ___llmod@dividend:
   354                           	opt stack 0
   355                           
   356                           ; 4 bytes @ 0x0
   357  000001                     	ds	1
   358  000002                     _isdigit$680:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x1
   362  000002                     	ds	1
   363  000003                     OpenUSART@config:
   364                           	opt stack 0
   365  000003                     isdigit@c:
   366                           	opt stack 0
   367  000003                     ___awmod@divisor:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x2
   371  000003                     	ds	1
   372  000004                     ___ftpack@exp:
   373                           	opt stack 0
   374  000004                     __div_to_l_@f2:
   375                           	opt stack 0
   376  000004                     __tdiv_to_l_@f2:
   377                           	opt stack 0
   378  000004                     ___ftge@ff2:
   379                           	opt stack 0
   380                           
   381                           ; 3 bytes @ 0x3
   382  000004                     	ds	1
   383  000005                     ___awmod@counter:
   384                           	opt stack 0
   385  000005                     ___ftpack@sign:
   386                           	opt stack 0
   387  000005                     ___lldiv@divisor:
   388                           	opt stack 0
   389  000005                     ___llmod@divisor:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x4
   393  000005                     	ds	1
   394  000006                     ??___ftpack:
   395  000006                     ___awmod@sign:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x5
   399  000006                     	ds	1
   400  000007                     ??__tdiv_to_l_:
   401  000007                     ??___ftge:
   402  000007                     ?___awdiv:
   403                           	opt stack 0
   404  000007                     ___awdiv@dividend:
   405                           	opt stack 0
   406  000007                     __div_to_l_@quot:
   407                           	opt stack 0
   408                           
   409                           ; 4 bytes @ 0x6
   410  000007                     	ds	2
   411  000009                     ?___lltoft:
   412                           	opt stack 0
   413  000009                     ___llmod@counter:
   414                           	opt stack 0
   415  000009                     ___awdiv@divisor:
   416                           	opt stack 0
   417  000009                     ___lldiv@quotient:
   418                           	opt stack 0
   419  000009                     ___lltoft@c:
   420                           	opt stack 0
   421                           
   422                           ; 4 bytes @ 0x8
   423  000009                     	ds	1
   424  00000A                     __tdiv_to_l_@quot:
   425                           	opt stack 0
   426                           
   427                           ; 4 bytes @ 0x9
   428  00000A                     	ds	1
   429  00000B                     ___awdiv@counter:
   430                           	opt stack 0
   431  00000B                     __div_to_l_@cntr:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0xA
   435  00000B                     	ds	1
   436  00000C                     ___awdiv@sign:
   437                           	opt stack 0
   438  00000C                     __div_to_l_@exp1:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0xB
   442  00000C                     	ds	1
   443  00000D                     ??___lltoft:
   444  00000D                     ___lldiv@counter:
   445                           	opt stack 0
   446  00000D                     ___awdiv@quotient:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0xC
   450  00000D                     	ds	1
   451  00000E                     __tdiv_to_l_@cntr:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0xD
   455  00000E                     	ds	1
   456  00000F                     ?___wmul:
   457                           	opt stack 0
   458  00000F                     __tdiv_to_l_@exp1:
   459                           	opt stack 0
   460  00000F                     ___wmul@multiplier:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0xE
   464  00000F                     	ds	2
   465  000011                     ___lltoft@exp:
   466                           	opt stack 0
   467  000011                     ___wmul@multiplicand:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x10
   471  000011                     	ds	2
   472  000013                     ___wmul@product:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x12
   476  000013                     	ds	2
   477  000015                     ?___ftmul:
   478                           	opt stack 0
   479  000015                     ___ftmul@f1:
   480                           	opt stack 0
   481                           
   482                           ; 3 bytes @ 0x14
   483  000015                     	ds	3
   484  000018                     ___ftmul@f2:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x17
   488  000018                     	ds	3
   489  00001B                     ??___ftmul:
   490                           
   491                           ; 0 bytes @ 0x1A
   492  00001B                     	ds	3
   493  00001E                     ___ftmul@exp:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x1D
   497  00001E                     	ds	1
   498  00001F                     ___ftmul@f3_as_product:
   499                           	opt stack 0
   500                           
   501                           ; 3 bytes @ 0x1E
   502  00001F                     	ds	3
   503  000022                     ___ftmul@cntr:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x21
   507  000022                     	ds	1
   508  000023                     ___ftmul@sign:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x22
   512  000023                     	ds	1
   513  000024                     ?_fround:
   514                           	opt stack 0
   515  000024                     ?_scale:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x23
   519  000024                     	ds	3
   520  000027                     _fround$909:
   521                           	opt stack 0
   522  000027                     _scale$910:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x26
   526  000027                     	ds	3
   527  00002A                     scale@scl:
   528                           	opt stack 0
   529  00002A                     _fround$908:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x29
   533  00002A                     	ds	1
   534  00002B                     ?___fttol:
   535                           	opt stack 0
   536  00002B                     ___fttol@f1:
   537                           	opt stack 0
   538                           
   539                           ; 3 bytes @ 0x2A
   540  00002B                     	ds	2
   541  00002D                     fround@prec:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x2C
   545  00002D                     	ds	1
   546  00002E                     ?___ftadd:
   547                           	opt stack 0
   548  00002E                     ___ftadd@f1:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x2D
   552  00002E                     	ds	1
   553  00002F                     ??___fttol:
   554                           
   555                           ; 0 bytes @ 0x2E
   556  00002F                     	ds	2
   557  000031                     ___ftadd@f2:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x30
   561  000031                     	ds	3
   562  000034                     ??___ftadd:
   563  000034                     ___fttol@sign1:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x33
   567  000034                     	ds	1
   568  000035                     ___fttol@lval:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x34
   572  000035                     	ds	2
   573  000037                     ___ftadd@sign:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x36
   577  000037                     	ds	1
   578  000038                     ___ftadd@exp2:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x37
   582  000038                     	ds	1
   583  000039                     ___ftadd@exp1:
   584                           	opt stack 0
   585  000039                     ___fttol@exp1:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x38
   589  000039                     	ds	1
   590  00003A                     ?___ftsub:
   591                           	opt stack 0
   592  00003A                     ___ftsub@f1:
   593                           	opt stack 0
   594                           
   595                           ; 3 bytes @ 0x39
   596  00003A                     	ds	3
   597  00003D                     ___ftsub@f2:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x3C
   601  00003D                     	ds	3
   602  000040                     ?_printf:
   603                           	opt stack 0
   604  000040                     printf@f:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x3F
   608  000040                     	ds	5
   609  000045                     ??_printf:
   610                           
   611                           ; 0 bytes @ 0x44
   612  000045                     	ds	6
   613  00004B                     _printf$911:
   614                           	opt stack 0
   615                           
   616                           ; 3 bytes @ 0x4A
   617  00004B                     	ds	3
   618  00004E                     printf@ap:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x4D
   622  00004E                     	ds	2
   623  000050                     printf@val:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x4F
   627  000050                     	ds	4
   628  000054                     printf@flag:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x53
   632  000054                     	ds	2
   633  000056                     printf@width:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x55
   637  000056                     	ds	2
   638  000058                     printf@tmpval:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0x57
   642  000058                     	ds	4
   643  00005C                     printf@exp:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x5B
   647  00005C                     	ds	2
   648  00005E                     printf@fval:
   649                           	opt stack 0
   650                           
   651                           ; 3 bytes @ 0x5D
   652  00005E                     	ds	3
   653  000061                     printf@prec:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x60
   657  000061                     	ds	2
   658  000063                     printf@c:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x62
   662  000063                     	ds	1
   663  000064                     main@t:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x63
   667  000064                     	ds	3
   668                           tblptru	equ	0xFF8
   669                           
   670 ;;
   671 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   672 ;;
   673 ;; *************** function _main *****************
   674 ;; Defined at:
   675 ;;		line 22 in file "Lab1p2.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  t               3   99[COMRAM] float 
   680 ;;  k               1    0        unsigned char 
   681 ;; Return value:  Size  Location     Type
   682 ;;		None               void
   683 ;; Registers used:
   684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   693 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   694 ;;Total ram usage:        3 bytes
   695 ;; Hardware stack levels required when called:    4
   696 ;; This function calls:
   697 ;;		_init_UART
   698 ;;		_printf
   699 ;; This function is called by:
   700 ;;		Startup code after reset
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text0
   705  0029AE                     __ptext0:
   706                           	opt stack 0
   707  0029AE                     _main:
   708                           	opt stack 27
   709                           
   710                           ;Lab1p2.c: 24: char k;
   711                           ;Lab1p2.c: 25: float t;
   712                           ;Lab1p2.c: 26: init_UART();
   713                           
   714                           ;incstack = 0
   715  0029AE  EC54  F015         	call	_init_UART	;wreg free
   716  0029B2  D000               	goto	l2521
   717  0029B4                     l2521:
   718                           
   719                           ;Lab1p2.c: 28: {
   720                           ;Lab1p2.c: 29: t= 19.909;
   721  0029B4  0E46               	movlw	70
   722  0029B6  6E64               	movwf	main@t,c
   723  0029B8  0E9F               	movlw	159
   724  0029BA  6E65               	movwf	main@t+1,c
   725  0029BC  0E41               	movlw	65
   726  0029BE  6E66               	movwf	main@t+2,c
   727                           
   728                           ;Lab1p2.c: 30: printf("\r\n\nHello World! Floating Point Print with 1 decimal place t= %
      +                          6.1f",t);
   729  0029C0  0E77               	movlw	low STR_1
   730  0029C2  6E40               	movwf	printf@f,c
   731  0029C4  0E10               	movlw	high STR_1
   732  0029C6  6E41               	movwf	printf@f+1,c
   733  0029C8  C064  F042         	movff	main@t,?_printf+2
   734  0029CC  C065  F043         	movff	main@t+1,?_printf+3
   735  0029D0  C066  F044         	movff	main@t+2,?_printf+4
   736  0029D4  EC7F  F008         	call	_printf	;wreg free
   737                           
   738                           ;Lab1p2.c: 31: printf("\r\nHello World! Floating Point print with 2 decimal places t= %6
      +                          .2f",t);
   739  0029D8  0EBA               	movlw	low STR_2
   740  0029DA  6E40               	movwf	printf@f,c
   741  0029DC  0E10               	movlw	high STR_2
   742  0029DE  6E41               	movwf	printf@f+1,c
   743  0029E0  C064  F042         	movff	main@t,?_printf+2
   744  0029E4  C065  F043         	movff	main@t+1,?_printf+3
   745  0029E8  C066  F044         	movff	main@t+2,?_printf+4
   746  0029EC  EC7F  F008         	call	_printf	;wreg free
   747  0029F0  D7E1               	goto	l2521
   748  0029F2  EF00  F000         	goto	start
   749  0029F6                     __end_of_main:
   750                           	opt stack 0
   751                           tblptru	equ	0xFF8
   752                           
   753 ;; *************** function _printf *****************
   754 ;; Defined at:
   755 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  f               2   63[COMRAM] PTR const unsigned char 
   758 ;;		 -> STR_2(67), STR_1(67), 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  tmpval          4   87[COMRAM] struct .
   761 ;;  val             4   79[COMRAM] unsigned long 
   762 ;;  fval            3   93[COMRAM] unsigned long 
   763 ;;  cp              3    0        PTR const unsigned char 
   764 ;;  prec            2   96[COMRAM] int 
   765 ;;  exp             2   91[COMRAM] int 
   766 ;;  width           2   85[COMRAM] int 
   767 ;;  flag            2   83[COMRAM] unsigned short 
   768 ;;  ap              2   77[COMRAM] PTR void [1]
   769 ;;		 -> ?_printf(2), 
   770 ;;  len             2    0        unsigned int 
   771 ;;  c               1   98[COMRAM] char 
   772 ;;  d               1    0        unsigned char 
   773 ;; Return value:  Size  Location     Type
   774 ;;                  2   63[COMRAM] int 
   775 ;; Registers used:
   776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   782 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   783 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   784 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;Total ram usage:       36 bytes
   787 ;; Hardware stack levels used:    1
   788 ;; Hardware stack levels required when called:    3
   789 ;; This function calls:
   790 ;;		___awdiv
   791 ;;		___ftadd
   792 ;;		___ftge
   793 ;;		___ftmul
   794 ;;		___ftneg
   795 ;;		___ftsub
   796 ;;		___fttol
   797 ;;		___lldiv
   798 ;;		___llmod
   799 ;;		___lltoft
   800 ;;		___wmul
   801 ;;		__div_to_l_
   802 ;;		__tdiv_to_l_
   803 ;;		_fround
   804 ;;		_isdigit
   805 ;;		_putch
   806 ;;		_scale
   807 ;; This function is called by:
   808 ;;		_main
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           	psect	text1
   813  0010FE                     __ptext1:
   814                           	opt stack 0
   815  0010FE                     _printf:
   816                           	opt stack 27
   817                           
   818                           ;doprnt.c: 466: va_list ap;
   819                           ;doprnt.c: 499: signed char c;
   820                           ;doprnt.c: 501: int width;
   821                           ;doprnt.c: 504: int prec;
   822                           ;doprnt.c: 508: unsigned short flag;
   823                           ;doprnt.c: 515: char d;
   824                           ;doprnt.c: 516: double fval;
   825                           ;doprnt.c: 517: int exp;
   826                           ;doprnt.c: 523: union {
   827                           ;doprnt.c: 524: unsigned long vd;
   828                           ;doprnt.c: 525: double integ;
   829                           ;doprnt.c: 526: } tmpval;
   830                           ;doprnt.c: 528: unsigned long val;
   831                           ;doprnt.c: 529: unsigned len;
   832                           ;doprnt.c: 530: const char * cp;
   833                           ;doprnt.c: 533: *ap = __va_start();
   834                           
   835                           ;incstack = 0
   836  0010FE  0E42               	movlw	low (?_printf+2)
   837  001100  6E4E               	movwf	printf@ap,c
   838  001102  0E00               	movlw	high (?_printf+2)
   839  001104  6E4F               	movwf	printf@ap+1,c
   840                           
   841                           ;doprnt.c: 536: while(c = *f++) {
   842  001106  EFB7  F00C         	goto	l2517
   843  00110A                     l2285:
   844                           
   845                           ;doprnt.c: 538: if(c != '%')
   846  00110A  0E25               	movlw	37
   847  00110C  1863               	xorwf	printf@c,w,c
   848  00110E  B4D8               	btfsc	status,2,c
   849  001110  D005               	goto	l2289
   850                           
   851                           ;doprnt.c: 540: {
   852                           ;doprnt.c: 541: (putch(c) );
   853  001112  5063               	movf	printf@c,w,c
   854  001114  EC5E  F015         	call	_putch
   855                           
   856                           ;doprnt.c: 542: continue;
   857  001118  EFB7  F00C         	goto	l2517
   858  00111C                     l2289:
   859                           
   860                           ;doprnt.c: 543: }
   861                           ;doprnt.c: 546: width = 0;
   862  00111C  0E00               	movlw	0
   863  00111E  6E57               	movwf	printf@width+1,c
   864  001120  0E00               	movlw	0
   865  001122  6E56               	movwf	printf@width,c
   866                           
   867                           ;doprnt.c: 548: flag = 0;
   868  001124  0E00               	movlw	0
   869  001126  6E55               	movwf	printf@flag+1,c
   870  001128  0E00               	movlw	0
   871  00112A  6E54               	movwf	printf@flag,c
   872                           
   873                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   874  00112C  C040  FFF6         	movff	printf@f,tblptrl
   875  001130  C041  FFF7         	movff	printf@f+1,tblptrh
   876  001134                     	if	0	;tblptru may be non-zero
   877  001134                     	endif
   878  001134                     	if	0	;tblptru may be non-zero
   879  001134                     	endif
   880  001134  0008               	tblrd		*
   881  001136  50F5               	movf	tablat,w,c
   882  001138  EC43  F015         	call	_isdigit
   883  00113C  A0D8               	btfss	status,0,c
   884  00113E  D035               	goto	l2303
   885                           
   886                           ;doprnt.c: 598: width = 0;
   887  001140  0E00               	movlw	0
   888  001142  6E57               	movwf	printf@width+1,c
   889  001144  0E00               	movlw	0
   890  001146  6E56               	movwf	printf@width,c
   891  001148  D000               	goto	l2295
   892  00114A                     l2295:
   893                           
   894                           ;doprnt.c: 600: width *= 10;
   895  00114A  C056  F00F         	movff	printf@width,___wmul@multiplier
   896  00114E  C057  F010         	movff	printf@width+1,___wmul@multiplier+1
   897  001152  0E00               	movlw	0
   898  001154  6E12               	movwf	___wmul@multiplicand+1,c
   899  001156  0E0A               	movlw	10
   900  001158  6E11               	movwf	___wmul@multiplicand,c
   901  00115A  EC1D  F015         	call	___wmul	;wreg free
   902  00115E  C00F  F056         	movff	?___wmul,printf@width
   903  001162  C010  F057         	movff	?___wmul+1,printf@width+1
   904                           
   905                           ;doprnt.c: 601: width += *f++ - '0';
   906  001166  0ED0               	movlw	208
   907  001168  6E45               	movwf	??_printf& (0+255),c
   908  00116A  0EFF               	movlw	255
   909  00116C  6E46               	movwf	(??_printf+1)& (0+255),c
   910  00116E  C040  FFF6         	movff	printf@f,tblptrl
   911  001172  C041  FFF7         	movff	printf@f+1,tblptrh
   912  001176                     	if	0	;tblptru may be non-zero
   913  001176                     	endif
   914  001176                     	if	0	;tblptru may be non-zero
   915  001176                     	endif
   916  001176  0008               	tblrd		*
   917  001178  50F5               	movf	tablat,w,c
   918  00117A  6E47               	movwf	(??_printf+2)& (0+255),c
   919  00117C  6A48               	clrf	(??_printf+3)& (0+255),c
   920  00117E  5045               	movf	??_printf,w,c
   921  001180  2647               	addwf	??_printf+2,f,c
   922  001182  5046               	movf	??_printf+1,w,c
   923  001184  2248               	addwfc	??_printf+3,f,c
   924  001186  5047               	movf	??_printf+2,w,c
   925  001188  2656               	addwf	printf@width,f,c
   926  00118A  5048               	movf	??_printf+3,w,c
   927  00118C  2257               	addwfc	printf@width+1,f,c
   928  00118E  4A40               	infsnz	printf@f,f,c
   929  001190  2A41               	incf	printf@f+1,f,c
   930                           
   931                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   932  001192  C040  FFF6         	movff	printf@f,tblptrl
   933  001196  C041  FFF7         	movff	printf@f+1,tblptrh
   934  00119A                     	if	0	;tblptru may be non-zero
   935  00119A                     	endif
   936  00119A                     	if	0	;tblptru may be non-zero
   937  00119A                     	endif
   938  00119A  0008               	tblrd		*
   939  00119C  50F5               	movf	tablat,w,c
   940  00119E  EC43  F015         	call	_isdigit
   941  0011A2  A0D8               	btfss	status,0,c
   942  0011A4  D002               	goto	l2303
   943  0011A6  D7D1               	goto	l2295
   944  0011A8  D000               	goto	l2303
   945  0011AA                     l2303:
   946                           
   947                           ;doprnt.c: 608: }
   948                           ;doprnt.c: 611: if(*f == '.') {
   949  0011AA  C040  FFF6         	movff	printf@f,tblptrl
   950  0011AE  C041  FFF7         	movff	printf@f+1,tblptrh
   951  0011B2                     	if	0	;tblptru may be non-zero
   952  0011B2                     	endif
   953  0011B2                     	if	0	;tblptru may be non-zero
   954  0011B2                     	endif
   955  0011B2  0008               	tblrd		*
   956  0011B4  50F5               	movf	tablat,w,c
   957  0011B6  0A2E               	xorlw	46
   958  0011B8  A4D8               	btfss	status,2,c
   959  0011BA  D030               	goto	l2315
   960                           
   961                           ;doprnt.c: 612: flag |= 0x4000;
   962  0011BC  8C55               	bsf	printf@flag+1,6,c
   963                           
   964                           ;doprnt.c: 613: f++;
   965  0011BE  4A40               	infsnz	printf@f,f,c
   966  0011C0  2A41               	incf	printf@f+1,f,c
   967                           
   968                           ;doprnt.c: 620: {
   969                           ;doprnt.c: 621: prec = 0;
   970  0011C2  0E00               	movlw	0
   971  0011C4  6E62               	movwf	printf@prec+1,c
   972  0011C6  0E00               	movlw	0
   973  0011C8  6E61               	movwf	printf@prec,c
   974                           
   975                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
   976  0011CA  D01C               	goto	l2313
   977  0011CC                     l2309:
   978                           
   979                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
   980  0011CC  C061  F00F         	movff	printf@prec,___wmul@multiplier
   981  0011D0  C062  F010         	movff	printf@prec+1,___wmul@multiplier+1
   982  0011D4  0E00               	movlw	0
   983  0011D6  6E12               	movwf	___wmul@multiplicand+1,c
   984  0011D8  0E0A               	movlw	10
   985  0011DA  6E11               	movwf	___wmul@multiplicand,c
   986  0011DC  EC1D  F015         	call	___wmul	;wreg free
   987  0011E0  C040  FFF6         	movff	printf@f,tblptrl
   988  0011E4  C041  FFF7         	movff	printf@f+1,tblptrh
   989  0011E8                     	if	0	;tblptru may be non-zero
   990  0011E8                     	endif
   991  0011E8                     	if	0	;tblptru may be non-zero
   992  0011E8                     	endif
   993  0011E8  0008               	tblrd		*
   994  0011EA  50F5               	movf	tablat,w,c
   995  0011EC  260F               	addwf	?___wmul,f,c
   996  0011EE  0E00               	movlw	0
   997  0011F0  2210               	addwfc	?___wmul+1,f,c
   998  0011F2  0ED0               	movlw	208
   999  0011F4  240F               	addwf	?___wmul,w,c
  1000  0011F6  6E61               	movwf	printf@prec,c
  1001  0011F8  0EFF               	movlw	255
  1002  0011FA  2010               	addwfc	?___wmul+1,w,c
  1003  0011FC  6E62               	movwf	printf@prec+1,c
  1004  0011FE  4A40               	infsnz	printf@f,f,c
  1005  001200  2A41               	incf	printf@f+1,f,c
  1006  001202  D000               	goto	l2313
  1007  001204                     l2313:
  1008  001204  C040  FFF6         	movff	printf@f,tblptrl
  1009  001208  C041  FFF7         	movff	printf@f+1,tblptrh
  1010  00120C                     	if	0	;tblptru may be non-zero
  1011  00120C                     	endif
  1012  00120C                     	if	0	;tblptru may be non-zero
  1013  00120C                     	endif
  1014  00120C  0008               	tblrd		*
  1015  00120E  50F5               	movf	tablat,w,c
  1016  001210  EC43  F015         	call	_isdigit
  1017  001214  A0D8               	btfss	status,0,c
  1018  001216  D00D               	goto	l2323
  1019  001218  D7D9               	goto	l2309
  1020                           
  1021                           ;doprnt.c: 624: }
  1022                           ;doprnt.c: 625: } else {
  1023  00121A  D00B               	goto	l2323
  1024  00121C                     l2315:
  1025                           
  1026                           ;doprnt.c: 626: prec = 0;
  1027  00121C  0E00               	movlw	0
  1028  00121E  6E62               	movwf	printf@prec+1,c
  1029  001220  0E00               	movlw	0
  1030  001222  6E61               	movwf	printf@prec,c
  1031                           
  1032                           ;doprnt.c: 628: flag |= 0x1000;
  1033  001224  8855               	bsf	printf@flag+1,4,c
  1034                           
  1035                           ;doprnt.c: 630: }
  1036                           ;doprnt.c: 635: switch(c = *f++) {
  1037  001226  D005               	goto	l2323
  1038                           
  1039                           ;doprnt.c: 638: goto alldone;
  1040                           
  1041                           ;doprnt.c: 637: case 0:
  1042  001228  D3B1               	goto	l137
  1043  00122A                     l2319:
  1044                           
  1045                           ;doprnt.c: 663: flag |= 0x400;
  1046  00122A  8455               	bsf	printf@flag+1,2,c
  1047                           
  1048                           ;doprnt.c: 664: break;
  1049  00122C  D013               	goto	l2325
  1050                           
  1051                           ;doprnt.c: 813: continue;
  1052                           
  1053                           ;doprnt.c: 802: default:
  1054  00122E  D39F               	goto	l2517
  1055                           
  1056                           ;doprnt.c: 822: }
  1057  001230  D011               	goto	l2325
  1058  001232                     l2323:
  1059  001232  C040  FFF6         	movff	printf@f,tblptrl
  1060  001236  C041  FFF7         	movff	printf@f+1,tblptrh
  1061  00123A  4A40               	infsnz	printf@f,f,c
  1062  00123C  2A41               	incf	printf@f+1,f,c
  1063  00123E                     	if	0	;tblptru may be non-zero
  1064  00123E                     	endif
  1065  00123E                     	if	0	;tblptru may be non-zero
  1066  00123E                     	endif
  1067  00123E  0008               	tblrd		*
  1068  001240  CFF5 F063          	movff	tablat,printf@c
  1069  001244  5063               	movf	printf@c,w,c
  1070                           
  1071                           ; Switch size 1, requested type "space"
  1072                           ; Number of cases is 2, Range of values is 0 to 102
  1073                           ; switch strategies available:
  1074                           ; Name         Instructions Cycles
  1075                           ; simple_byte            7     4 (average)
  1076                           ;	Chosen strategy is simple_byte
  1077  001246  0A00               	xorlw	0	; case 0
  1078  001248  B4D8               	btfsc	status,2,c
  1079  00124A  D3A0               	goto	l137
  1080  00124C  0A66               	xorlw	102	; case 102
  1081  00124E  B4D8               	btfsc	status,2,c
  1082  001250  D7EC               	goto	l2319
  1083  001252  D38D               	goto	l2517
  1084  001254                     l2325:
  1085                           
  1086                           ;doprnt.c: 825: if(flag & (0x700)) {
  1087  001254  0E07               	movlw	7
  1088  001256  1455               	andwf	printf@flag+1,w,c
  1089  001258  B4D8               	btfsc	status,2,c
  1090  00125A  D300               	goto	l2473
  1091                           
  1092                           ;doprnt.c: 827: if(flag & 0x1000)
  1093  00125C  A855               	btfss	printf@flag+1,4,c
  1094  00125E  D005               	goto	l2331
  1095                           
  1096                           ;doprnt.c: 829: prec = 6;
  1097  001260  0E00               	movlw	0
  1098  001262  6E62               	movwf	printf@prec+1,c
  1099  001264  0E06               	movlw	6
  1100  001266  6E61               	movwf	printf@prec,c
  1101  001268  D000               	goto	l2331
  1102  00126A                     l2331:
  1103                           
  1104                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1105  00126A  C04E  FFD9         	movff	printf@ap,fsr2l
  1106  00126E  C04F  FFDA         	movff	printf@ap+1,fsr2h
  1107  001272  CFDE F05E          	movff	postinc2,printf@fval
  1108  001276  CFDE F05F          	movff	postinc2,printf@fval+1
  1109  00127A  CFDD F060          	movff	postdec2,printf@fval+2
  1110  00127E  0E03               	movlw	3
  1111  001280  264E               	addwf	printf@ap,f,c
  1112  001282  0E00               	movlw	0
  1113  001284  224F               	addwfc	printf@ap+1,f,c
  1114                           
  1115                           ;doprnt.c: 831: if(fval < 0.0) {
  1116  001286  AE60               	btfss	printf@fval+2,7,c
  1117  001288  D011               	goto	l2341
  1118                           
  1119                           ;doprnt.c: 832: fval = -fval;
  1120  00128A  C05E  F001         	movff	printf@fval,___ftneg@f1
  1121  00128E  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
  1122  001292  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
  1123  001296  EC31  F015         	call	___ftneg	;wreg free
  1124  00129A  C001  F05E         	movff	?___ftneg,printf@fval
  1125  00129E  C002  F05F         	movff	?___ftneg+1,printf@fval+1
  1126  0012A2  C003  F060         	movff	?___ftneg+2,printf@fval+2
  1127                           
  1128                           ;doprnt.c: 833: flag |= 0x03;
  1129  0012A6  0E03               	movlw	3
  1130  0012A8  1254               	iorwf	printf@flag,f,c
  1131  0012AA  D000               	goto	l2341
  1132  0012AC                     l2341:
  1133                           
  1134                           ;doprnt.c: 834: }
  1135                           ;doprnt.c: 835: exp = 0;
  1136  0012AC  0E00               	movlw	0
  1137  0012AE  6E5D               	movwf	printf@exp+1,c
  1138  0012B0  0E00               	movlw	0
  1139  0012B2  6E5C               	movwf	printf@exp,c
  1140                           
  1141                           ;doprnt.c: 836: if( fval!=0) {
  1142  0012B4  505E               	movf	printf@fval,w,c
  1143  0012B6  105F               	iorwf	printf@fval+1,w,c
  1144  0012B8  1060               	iorwf	printf@fval+2,w,c
  1145  0012BA  B4D8               	btfsc	status,2,c
  1146  0012BC  D085               	goto	l2369
  1147                           
  1148                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1149  0012BE  0E82               	movlw	130
  1150  0012C0  6E45               	movwf	??_printf& (0+255),c
  1151  0012C2  0EFF               	movlw	255
  1152  0012C4  6E46               	movwf	(??_printf+1)& (0+255),c
  1153  0012C6  C05E  F047         	movff	printf@fval,??_printf+2
  1154  0012CA  C05F  F048         	movff	printf@fval+1,??_printf+3
  1155  0012CE  C060  F049         	movff	printf@fval+2,??_printf+4
  1156  0012D2  C061  F04A         	movff	printf@fval+3,??_printf+5
  1157  0012D6  0E10               	movlw	16
  1158  0012D8  D005               	goto	u2610
  1159  0012DA                     u2615:
  1160  0012DA  90D8               	bcf	status,0,c
  1161  0012DC  324A               	rrcf	??_printf+5,f,c
  1162  0012DE  3249               	rrcf	??_printf+4,f,c
  1163  0012E0  3248               	rrcf	??_printf+3,f,c
  1164  0012E2  3247               	rrcf	??_printf+2,f,c
  1165  0012E4                     u2610:
  1166  0012E4  2EE8               	decfsz	wreg,f,c
  1167  0012E6  D7F9               	goto	u2615
  1168  0012E8  5047               	movf	??_printf+2,w,c
  1169  0012EA  2445               	addwf	??_printf,w,c
  1170  0012EC  6E5C               	movwf	printf@exp,c
  1171  0012EE  0E00               	movlw	0
  1172  0012F0  2046               	addwfc	??_printf+1,w,c
  1173  0012F2  6E5D               	movwf	printf@exp+1,c
  1174                           
  1175                           ;doprnt.c: 838: exp--;
  1176  0012F4  065C               	decf	printf@exp,f,c
  1177  0012F6  A0D8               	btfss	status,0,c
  1178  0012F8  065D               	decf	printf@exp+1,f,c
  1179                           
  1180                           ;doprnt.c: 839: exp *= 3;
  1181  0012FA  C05C  F00F         	movff	printf@exp,___wmul@multiplier
  1182  0012FE  C05D  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1183  001302  0E00               	movlw	0
  1184  001304  6E12               	movwf	___wmul@multiplicand+1,c
  1185  001306  0E03               	movlw	3
  1186  001308  6E11               	movwf	___wmul@multiplicand,c
  1187  00130A  EC1D  F015         	call	___wmul	;wreg free
  1188  00130E  C00F  F05C         	movff	?___wmul,printf@exp
  1189  001312  C010  F05D         	movff	?___wmul+1,printf@exp+1
  1190                           
  1191                           ;doprnt.c: 840: exp /= 10;
  1192  001316  C05C  F007         	movff	printf@exp,___awdiv@dividend
  1193  00131A  C05D  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1194  00131E  0E00               	movlw	0
  1195  001320  6E0A               	movwf	___awdiv@divisor+1,c
  1196  001322  0E0A               	movlw	10
  1197  001324  6E09               	movwf	___awdiv@divisor,c
  1198  001326  EC1A  F013         	call	___awdiv	;wreg free
  1199  00132A  C007  F05C         	movff	?___awdiv,printf@exp
  1200  00132E  C008  F05D         	movff	?___awdiv+1,printf@exp+1
  1201                           
  1202                           ;doprnt.c: 841: if(exp < 0)
  1203  001332  AE5D               	btfss	printf@exp+1,7,c
  1204  001334  D004               	goto	l2357
  1205                           
  1206                           ;doprnt.c: 842: exp--;
  1207  001336  065C               	decf	printf@exp,f,c
  1208  001338  A0D8               	btfss	status,0,c
  1209  00133A  065D               	decf	printf@exp+1,f,c
  1210  00133C  D000               	goto	l2357
  1211  00133E                     l2357:
  1212                           
  1213                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1214  00133E  505C               	movf	printf@exp,w,c
  1215  001340  0800               	sublw	0
  1216  001342  ECC7  F00C         	call	_scale
  1217  001346  C024  F058         	movff	?_scale,printf@tmpval
  1218  00134A  C025  F059         	movff	?_scale+1,printf@tmpval+1
  1219  00134E  C026  F05A         	movff	?_scale+2,printf@tmpval+2
  1220                           
  1221                           ;doprnt.c: 847: tmpval.integ *= fval;
  1222  001352  C058  F015         	movff	printf@tmpval,___ftmul@f1
  1223  001356  C059  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1224  00135A  C05A  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1225  00135E  C05E  F018         	movff	printf@fval,___ftmul@f2
  1226  001362  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1227  001366  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1228  00136A  ECC8  F011         	call	___ftmul	;wreg free
  1229  00136E  C015  F058         	movff	?___ftmul,printf@tmpval
  1230  001372  C016  F059         	movff	?___ftmul+1,printf@tmpval+1
  1231  001376  C017  F05A         	movff	?___ftmul+2,printf@tmpval+2
  1232                           
  1233                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1234  00137A  C058  F001         	movff	printf@tmpval,___ftge@ff1
  1235  00137E  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1236  001382  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1237  001386  0E00               	movlw	0
  1238  001388  6E04               	movwf	___ftge@ff2,c
  1239  00138A  0E80               	movlw	128
  1240  00138C  6E05               	movwf	___ftge@ff2+1,c
  1241  00138E  0E3F               	movlw	63
  1242  001390  6E06               	movwf	___ftge@ff2+2,c
  1243  001392  EC65  F013         	call	___ftge	;wreg free
  1244  001396  B0D8               	btfsc	status,0,c
  1245  001398  D004               	goto	l2365
  1246                           
  1247                           ;doprnt.c: 849: exp--;
  1248  00139A  065C               	decf	printf@exp,f,c
  1249  00139C  A0D8               	btfss	status,0,c
  1250  00139E  065D               	decf	printf@exp+1,f,c
  1251  0013A0  D013               	goto	l2369
  1252  0013A2                     l2365:
  1253                           
  1254                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1255  0013A2  C058  F001         	movff	printf@tmpval,___ftge@ff1
  1256  0013A6  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1257  0013AA  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1258  0013AE  0E00               	movlw	0
  1259  0013B0  6E04               	movwf	___ftge@ff2,c
  1260  0013B2  0E20               	movlw	32
  1261  0013B4  6E05               	movwf	___ftge@ff2+1,c
  1262  0013B6  0E41               	movlw	65
  1263  0013B8  6E06               	movwf	___ftge@ff2+2,c
  1264  0013BA  EC65  F013         	call	___ftge	;wreg free
  1265  0013BE  A0D8               	btfss	status,0,c
  1266  0013C0  D003               	goto	l2369
  1267                           
  1268                           ;doprnt.c: 851: exp++;
  1269  0013C2  4A5C               	infsnz	printf@exp,f,c
  1270  0013C4  2A5D               	incf	printf@exp+1,f,c
  1271  0013C6  D000               	goto	l2369
  1272  0013C8                     l2369:
  1273                           
  1274                           ;doprnt.c: 852: }
  1275                           ;doprnt.c: 1112: if(prec <= 12)
  1276  0013C8  BE62               	btfsc	printf@prec+1,7,c
  1277  0013CA  D006               	goto	l2371
  1278  0013CC  5062               	movf	printf@prec+1,w,c
  1279  0013CE  E11C               	bnz	l2373
  1280  0013D0  0E0D               	movlw	13
  1281  0013D2  5C61               	subwf	printf@prec,w,c
  1282  0013D4  B0D8               	btfsc	status,0,c
  1283  0013D6  D018               	goto	l2373
  1284  0013D8                     l2371:
  1285                           
  1286                           ;doprnt.c: 1113: fval += fround(prec);
  1287  0013D8  C05E  F02E         	movff	printf@fval,___ftadd@f1
  1288  0013DC  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1289  0013E0  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  1290  0013E4  5061               	movf	printf@prec,w,c
  1291  0013E6  ECB7  F00E         	call	_fround
  1292  0013EA  C024  F031         	movff	?_fround,___ftadd@f2
  1293  0013EE  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1294  0013F2  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1295  0013F6  ECD9  F00F         	call	___ftadd	;wreg free
  1296  0013FA  C02E  F05E         	movff	?___ftadd,printf@fval
  1297  0013FE  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  1298  001402  C030  F060         	movff	?___ftadd+2,printf@fval+2
  1299  001406  D000               	goto	l2373
  1300  001408                     l2373:
  1301                           
  1302                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1303  001408  BE5D               	btfsc	printf@exp+1,7,c
  1304  00140A  D006               	goto	l2375
  1305  00140C  505D               	movf	printf@exp+1,w,c
  1306  00140E  E120               	bnz	l2381
  1307  001410  0E0A               	movlw	10
  1308  001412  5C5C               	subwf	printf@exp,w,c
  1309  001414  B0D8               	btfsc	status,0,c
  1310  001416  D01C               	goto	l2381
  1311  001418                     l2375:
  1312  001418  505E               	movf	printf@fval,w,c
  1313  00141A  105F               	iorwf	printf@fval+1,w,c
  1314  00141C  1060               	iorwf	printf@fval+2,w,c
  1315  00141E  B4D8               	btfsc	status,2,c
  1316  001420  D06D               	goto	l2395
  1317  001422  C05E  F02B         	movff	printf@fval,___fttol@f1
  1318  001426  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1319  00142A  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1320  00142E  EC44  F012         	call	___fttol	;wreg free
  1321  001432  502B               	movf	?___fttol,w,c
  1322  001434  102C               	iorwf	?___fttol+1,w,c
  1323  001436  102D               	iorwf	?___fttol+2,w,c
  1324  001438  102E               	iorwf	?___fttol+3,w,c
  1325  00143A  B4D8               	btfsc	status,2,c
  1326  00143C  BE5D               	btfsc	printf@exp+1,7,c
  1327  00143E  D05E               	goto	l2395
  1328  001440  505D               	movf	printf@exp+1,w,c
  1329  001442  E106               	bnz	l2381
  1330  001444  0E02               	movlw	2
  1331  001446  5C5C               	subwf	printf@exp,w,c
  1332  001448  B0D8               	btfsc	status,0,c
  1333  00144A  D002               	goto	l2381
  1334  00144C  D057               	goto	l2395
  1335  00144E  D000               	goto	l2381
  1336  001450                     l2381:
  1337                           
  1338                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1339  001450  C058  F001         	movff	printf@tmpval,___ftge@ff1
  1340  001454  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1341  001458  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1342  00145C  0E70               	movlw	112
  1343  00145E  6E04               	movwf	___ftge@ff2,c
  1344  001460  0E89               	movlw	137
  1345  001462  6E05               	movwf	___ftge@ff2+1,c
  1346  001464  0E40               	movlw	64
  1347  001466  6E06               	movwf	___ftge@ff2+2,c
  1348  001468  EC65  F013         	call	___ftge	;wreg free
  1349  00146C  B0D8               	btfsc	status,0,c
  1350  00146E  D002               	goto	l2385
  1351                           
  1352                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1353  001470  0EF7               	movlw	247
  1354  001472  D001               	goto	L1
  1355  001474                     l2385:
  1356                           
  1357                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1358  001474  0EF8               	movlw	248
  1359  001476                     L1:
  1360  001476  265C               	addwf	printf@exp,f,c
  1361  001478  0EFF               	movlw	255
  1362  00147A  225D               	addwfc	printf@exp+1,f,c
  1363  00147C  D000               	goto	l2387
  1364  00147E                     l2387:
  1365                           
  1366                           ;doprnt.c: 1124: }
  1367                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1368  00147E  505C               	movf	printf@exp,w,c
  1369  001480  ECC7  F00C         	call	_scale
  1370  001484  C024  F058         	movff	?_scale,printf@tmpval
  1371  001488  C025  F059         	movff	?_scale+1,printf@tmpval+1
  1372  00148C  C026  F05A         	movff	?_scale+2,printf@tmpval+2
  1373                           
  1374                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1375  001490  D017               	goto	l2391
  1376  001492  C05E  F001         	movff	printf@fval,__div_to_l_@f1
  1377  001496  C05F  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1378  00149A  C060  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1379  00149E  C058  F004         	movff	printf@tmpval,__div_to_l_@f2
  1380  0014A2  C059  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1381  0014A6  C05A  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1382  0014AA  EC43  F011         	call	__div_to_l_	;wreg free
  1383  0014AE  C001  F050         	movff	?__div_to_l_,printf@val
  1384  0014B2  C002  F051         	movff	?__div_to_l_+1,printf@val+1
  1385  0014B6  C003  F052         	movff	?__div_to_l_+2,printf@val+2
  1386  0014BA  C004  F053         	movff	?__div_to_l_+3,printf@val+3
  1387  0014BE  D017               	goto	l2393
  1388  0014C0                     l2391:
  1389  0014C0  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1390  0014C4  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1391  0014C8  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1392  0014CC  C058  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1393  0014D0  C059  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1394  0014D4  C05A  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1395  0014D8  ECBB  F010         	call	__tdiv_to_l_	;wreg free
  1396  0014DC  C001  F050         	movff	?__tdiv_to_l_,printf@val
  1397  0014E0  C002  F051         	movff	?__tdiv_to_l_+1,printf@val+1
  1398  0014E4  C003  F052         	movff	?__tdiv_to_l_+2,printf@val+2
  1399  0014E8  C004  F053         	movff	?__tdiv_to_l_+3,printf@val+3
  1400  0014EC  D000               	goto	l2393
  1401  0014EE                     l2393:
  1402                           
  1403                           ;doprnt.c: 1129: fval = 0.0;
  1404  0014EE  0E00               	movlw	0
  1405  0014F0  6E5E               	movwf	printf@fval,c
  1406  0014F2  0E00               	movlw	0
  1407  0014F4  6E5F               	movwf	printf@fval+1,c
  1408  0014F6  0E00               	movlw	0
  1409  0014F8  6E60               	movwf	printf@fval+2,c
  1410                           
  1411                           ;doprnt.c: 1130: } else {
  1412  0014FA  D033               	goto	l2399
  1413  0014FC                     l2395:
  1414                           
  1415                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1416  0014FC  C05E  F02B         	movff	printf@fval,___fttol@f1
  1417  001500  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1418  001504  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1419  001508  EC44  F012         	call	___fttol	;wreg free
  1420  00150C  C02B  F050         	movff	?___fttol,printf@val
  1421  001510  C02C  F051         	movff	?___fttol+1,printf@val+1
  1422  001514  C02D  F052         	movff	?___fttol+2,printf@val+2
  1423  001518  C02E  F053         	movff	?___fttol+3,printf@val+3
  1424                           
  1425                           ;doprnt.c: 1132: fval -= (double)val;
  1426  00151C  C05E  F03A         	movff	printf@fval,___ftsub@f1
  1427  001520  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1428  001524  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1429  001528  C050  F009         	movff	printf@val,___lltoft@c
  1430  00152C  C051  F00A         	movff	printf@val+1,___lltoft@c+1
  1431  001530  C052  F00B         	movff	printf@val+2,___lltoft@c+2
  1432  001534  C053  F00C         	movff	printf@val+3,___lltoft@c+3
  1433  001538  ECA7  F014         	call	___lltoft	;wreg free
  1434  00153C  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1435  001540  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1436  001544  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1437  001548  ECFB  F014         	call	___ftsub	;wreg free
  1438  00154C  C03A  F05E         	movff	?___ftsub,printf@fval
  1439  001550  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  1440  001554  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  1441                           
  1442                           ;doprnt.c: 1133: exp = 0;
  1443  001558  0E00               	movlw	0
  1444  00155A  6E5D               	movwf	printf@exp+1,c
  1445  00155C  0E00               	movlw	0
  1446  00155E  6E5C               	movwf	printf@exp,c
  1447  001560  D000               	goto	l2399
  1448  001562                     l2399:
  1449                           
  1450                           ;doprnt.c: 1134: }
  1451                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1452  001562  0E01               	movlw	1
  1453  001564  6E63               	movwf	printf@c,c
  1454  001566                     l2401:
  1455  001566  0E0A               	movlw	10
  1456  001568  1863               	xorwf	printf@c,w,c
  1457  00156A  B4D8               	btfsc	status,2,c
  1458  00156C  D01C               	goto	l2413
  1459  00156E  D001               	goto	l2405
  1460  001570  D01A               	goto	l2413
  1461  001572                     l2405:
  1462                           
  1463                           ;doprnt.c: 1137: if(val < dpowers[c])
  1464  001572  5063               	movf	printf@c,w,c
  1465  001574  0D04               	mullw	4
  1466  001576  0E01               	movlw	low _dpowers
  1467  001578  24F3               	addwf	prodl,w,c
  1468  00157A  6EF6               	movwf	tblptrl,c
  1469  00157C  0E10               	movlw	high _dpowers
  1470  00157E  20F4               	addwfc	prodh,w,c
  1471  001580  6EF7               	movwf	tblptrh,c
  1472  001582                     	if	0	;There are less than 3 active tblptr bytes
  1473  001582                     	endif
  1474  001582  0009               	tblrd		*+
  1475  001584  50F5               	movf	tablat,w,c
  1476  001586  5C50               	subwf	printf@val,w,c
  1477  001588  0009               	tblrd		*+
  1478  00158A  50F5               	movf	tablat,w,c
  1479  00158C  5851               	subwfb	printf@val+1,w,c
  1480  00158E  0009               	tblrd		*+
  1481  001590  50F5               	movf	tablat,w,c
  1482  001592  5852               	subwfb	printf@val+2,w,c
  1483  001594  0009               	tblrd		*+
  1484  001596  50F5               	movf	tablat,w,c
  1485  001598  5853               	subwfb	printf@val+3,w,c
  1486  00159A  A0D8               	btfss	status,0,c
  1487  00159C  D004               	goto	l2413
  1488  00159E  D001               	goto	l2409
  1489                           
  1490                           ;doprnt.c: 1138: break;
  1491  0015A0  D002               	goto	l2413
  1492  0015A2                     l2409:
  1493  0015A2  2A63               	incf	printf@c,f,c
  1494  0015A4  D7E0               	goto	l2401
  1495  0015A6                     l2413:
  1496                           
  1497                           ;doprnt.c: 1142: width -= prec + c + exp;
  1498  0015A6  C063  F045         	movff	printf@c,??_printf
  1499  0015AA  6A46               	clrf	(??_printf+1)& (0+255),c
  1500  0015AC  BE45               	btfsc	??_printf& (0+255),7,c
  1501  0015AE  0646               	decf	(??_printf+1)& (0+255),f,c
  1502  0015B0  5061               	movf	printf@prec,w,c
  1503  0015B2  2645               	addwf	??_printf,f,c
  1504  0015B4  5062               	movf	printf@prec+1,w,c
  1505  0015B6  2246               	addwfc	??_printf+1,f,c
  1506  0015B8  505C               	movf	printf@exp,w,c
  1507  0015BA  2645               	addwf	??_printf,f,c
  1508  0015BC  505D               	movf	printf@exp+1,w,c
  1509  0015BE  2246               	addwfc	??_printf+1,f,c
  1510  0015C0  5045               	movf	??_printf,w,c
  1511  0015C2  5E56               	subwf	printf@width,f,c
  1512  0015C4  5046               	movf	??_printf+1,w,c
  1513  0015C6  5A57               	subwfb	printf@width+1,f,c
  1514                           
  1515                           ;doprnt.c: 1143: if(
  1516                           ;doprnt.c: 1147: prec)
  1517  0015C8  5061               	movf	printf@prec,w,c
  1518  0015CA  1062               	iorwf	printf@prec+1,w,c
  1519  0015CC  B4D8               	btfsc	status,2,c
  1520  0015CE  D004               	goto	l2417
  1521                           
  1522                           ;doprnt.c: 1148: width--;
  1523  0015D0  0656               	decf	printf@width,f,c
  1524  0015D2  A0D8               	btfss	status,0,c
  1525  0015D4  0657               	decf	printf@width+1,f,c
  1526  0015D6  D000               	goto	l2417
  1527  0015D8                     l2417:
  1528                           
  1529                           ;doprnt.c: 1149: if(flag & 0x03)
  1530  0015D8  0E03               	movlw	3
  1531  0015DA  1454               	andwf	printf@flag,w,c
  1532  0015DC  6E45               	movwf	??_printf& (0+255),c
  1533  0015DE  0E00               	movlw	0
  1534  0015E0  1455               	andwf	printf@flag+1,w,c
  1535  0015E2  6E46               	movwf	(??_printf+1)& (0+255),c
  1536  0015E4  5045               	movf	??_printf,w,c
  1537  0015E6  1046               	iorwf	??_printf+1,w,c
  1538  0015E8  B4D8               	btfsc	status,2,c
  1539  0015EA  D009               	goto	l2425
  1540  0015EC  D004               	goto	l2423
  1541                           
  1542                           ;doprnt.c: 1175: {
  1543                           ;doprnt.c: 1180: while(width > 0) {
  1544                           
  1545                           ;doprnt.c: 1150: width--;
  1546  0015EE  D007               	goto	l2425
  1547  0015F0                     l2421:
  1548                           
  1549                           ;doprnt.c: 1181: (putch(' ') );
  1550  0015F0  0E20               	movlw	32
  1551  0015F2  EC5E  F015         	call	_putch
  1552  0015F6                     l2423:
  1553                           
  1554                           ;doprnt.c: 1182: width--;
  1555  0015F6  0656               	decf	printf@width,f,c
  1556  0015F8  A0D8               	btfss	status,0,c
  1557  0015FA  0657               	decf	printf@width+1,f,c
  1558  0015FC  D000               	goto	l2425
  1559  0015FE                     l2425:
  1560  0015FE  BE57               	btfsc	printf@width+1,7,c
  1561  001600  D005               	goto	l2427
  1562  001602  5057               	movf	printf@width+1,w,c
  1563  001604  E1F5               	bnz	l2421
  1564  001606  0456               	decf	printf@width,w,c
  1565  001608  B0D8               	btfsc	status,0,c
  1566  00160A  D7F2               	goto	l2421
  1567  00160C                     l2427:
  1568                           
  1569                           ;doprnt.c: 1183: }
  1570                           ;doprnt.c: 1188: if(flag & 0x03)
  1571  00160C  0E03               	movlw	3
  1572  00160E  1454               	andwf	printf@flag,w,c
  1573  001610  6E45               	movwf	??_printf& (0+255),c
  1574  001612  0E00               	movlw	0
  1575  001614  1455               	andwf	printf@flag+1,w,c
  1576  001616  6E46               	movwf	(??_printf+1)& (0+255),c
  1577  001618  5045               	movf	??_printf,w,c
  1578  00161A  1046               	iorwf	??_printf+1,w,c
  1579  00161C  B4D8               	btfsc	status,2,c
  1580  00161E  D049               	goto	l2437
  1581                           
  1582                           ;doprnt.c: 1190: (putch('-') );
  1583  001620  0E2D               	movlw	45
  1584  001622  EC5E  F015         	call	_putch
  1585                           
  1586                           ;doprnt.c: 1195: }
  1587                           ;doprnt.c: 1196: while(c--) {
  1588  001626  D045               	goto	l2437
  1589  001628                     l2431:
  1590                           
  1591                           ;doprnt.c: 1200: {
  1592                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1593  001628  C050  F001         	movff	printf@val,___lldiv@dividend
  1594  00162C  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  1595  001630  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  1596  001634  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  1597  001638  5063               	movf	printf@c,w,c
  1598  00163A  0D04               	mullw	4
  1599  00163C  0E01               	movlw	low _dpowers
  1600  00163E  24F3               	addwf	prodl,w,c
  1601  001640  6EF6               	movwf	tblptrl,c
  1602  001642  0E10               	movlw	high _dpowers
  1603  001644  20F4               	addwfc	prodh,w,c
  1604  001646  6EF7               	movwf	tblptrh,c
  1605  001648                     	if	0	;There are less than 3 active tblptr bytes
  1606  001648                     	endif
  1607  001648  0009               	tblrd		*+
  1608  00164A  CFF5 F005          	movff	tablat,___lldiv@divisor
  1609  00164E  0009               	tblrd		*+
  1610  001650  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1611  001654  0009               	tblrd		*+
  1612  001656  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1613  00165A  000A               	tblrd		*-
  1614  00165C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1615  001660  ECB0  F013         	call	___lldiv	;wreg free
  1616  001664  C001  F058         	movff	?___lldiv,printf@tmpval
  1617  001668  C002  F059         	movff	?___lldiv+1,printf@tmpval+1
  1618  00166C  C003  F05A         	movff	?___lldiv+2,printf@tmpval+2
  1619  001670  C004  F05B         	movff	?___lldiv+3,printf@tmpval+3
  1620                           
  1621                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1622  001674  C058  F001         	movff	printf@tmpval,___llmod@dividend
  1623  001678  C059  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1624  00167C  C05A  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1625  001680  C05B  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1626  001684  0E0A               	movlw	10
  1627  001686  6E05               	movwf	___llmod@divisor,c
  1628  001688  0E00               	movlw	0
  1629  00168A  6E06               	movwf	___llmod@divisor+1,c
  1630  00168C  0E00               	movlw	0
  1631  00168E  6E07               	movwf	___llmod@divisor+2,c
  1632  001690  0E00               	movlw	0
  1633  001692  6E08               	movwf	___llmod@divisor+3,c
  1634  001694  EC37  F014         	call	___llmod	;wreg free
  1635  001698  C001  F058         	movff	?___llmod,printf@tmpval
  1636  00169C  C002  F059         	movff	?___llmod+1,printf@tmpval+1
  1637  0016A0  C003  F05A         	movff	?___llmod+2,printf@tmpval+2
  1638  0016A4  C004  F05B         	movff	?___llmod+3,printf@tmpval+3
  1639                           
  1640                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1641  0016A8  5058               	movf	printf@tmpval,w,c
  1642  0016AA  0F30               	addlw	48
  1643  0016AC  EC5E  F015         	call	_putch
  1644  0016B0  D000               	goto	l2437
  1645  0016B2                     l2437:
  1646  0016B2  0663               	decf	printf@c,f,c
  1647  0016B4  2863               	incf	printf@c,w,c
  1648  0016B6  B4D8               	btfsc	status,2,c
  1649  0016B8  D009               	goto	l2443
  1650  0016BA  D7B6               	goto	l2431
  1651                           
  1652                           ;doprnt.c: 1204: }
  1653                           ;doprnt.c: 1206: }
  1654                           ;doprnt.c: 1207: while(exp > 0) {
  1655  0016BC  D007               	goto	l2443
  1656  0016BE                     l2439:
  1657                           
  1658                           ;doprnt.c: 1208: (putch('0') );
  1659  0016BE  0E30               	movlw	48
  1660  0016C0  EC5E  F015         	call	_putch
  1661                           
  1662                           ;doprnt.c: 1209: exp--;
  1663  0016C4  065C               	decf	printf@exp,f,c
  1664  0016C6  A0D8               	btfss	status,0,c
  1665  0016C8  065D               	decf	printf@exp+1,f,c
  1666  0016CA  D000               	goto	l2443
  1667  0016CC                     l2443:
  1668  0016CC  BE5D               	btfsc	printf@exp+1,7,c
  1669  0016CE  D005               	goto	l2445
  1670  0016D0  505D               	movf	printf@exp+1,w,c
  1671  0016D2  E1F5               	bnz	l2439
  1672  0016D4  045C               	decf	printf@exp,w,c
  1673  0016D6  B0D8               	btfsc	status,0,c
  1674  0016D8  D7F2               	goto	l2439
  1675  0016DA                     l2445:
  1676                           
  1677                           ;doprnt.c: 1210: }
  1678                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1679  0016DA  BE62               	btfsc	printf@prec+1,7,c
  1680  0016DC  D009               	goto	l113
  1681  0016DE  5062               	movf	printf@prec+1,w,c
  1682  0016E0  E104               	bnz	u2800
  1683  0016E2  0E09               	movlw	9
  1684  0016E4  5C61               	subwf	printf@prec,w,c
  1685  0016E6  A0D8               	btfss	status,0,c
  1686  0016E8  D003               	goto	l113
  1687  0016EA                     u2800:
  1688                           
  1689                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1690  0016EA  0E08               	movlw	8
  1691  0016EC  6E63               	movwf	printf@c,c
  1692  0016EE  D003               	goto	l2449
  1693  0016F0                     l113:
  1694                           
  1695                           ;doprnt.c: 1213: else
  1696                           ;doprnt.c: 1214: c = prec;
  1697  0016F0  C061  F063         	movff	printf@prec,printf@c
  1698  0016F4  D000               	goto	l2449
  1699  0016F6                     l2449:
  1700                           
  1701                           ;doprnt.c: 1215: prec -= c;
  1702  0016F6  5063               	movf	printf@c,w,c
  1703  0016F8  5E61               	subwf	printf@prec,f,c
  1704  0016FA  0E00               	movlw	0
  1705  0016FC  BE63               	btfsc	printf@c,7,c
  1706  0016FE  0EFF               	movlw	255
  1707  001700  5A62               	subwfb	printf@prec+1,f,c
  1708                           
  1709                           ;doprnt.c: 1219: if(c)
  1710  001702  5063               	movf	printf@c,w,c
  1711  001704  B4D8               	btfsc	status,2,c
  1712  001706  D004               	goto	l2455
  1713                           
  1714                           ;doprnt.c: 1221: (putch('.') );
  1715  001708  0E2E               	movlw	46
  1716  00170A  EC5E  F015         	call	_putch
  1717  00170E  D000               	goto	l2455
  1718  001710                     l2455:
  1719                           
  1720                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1721  001710  5063               	movf	printf@c,w,c
  1722  001712  ECC7  F00C         	call	_scale
  1723  001716  C024  F04B         	movff	?_scale,_printf$911
  1724  00171A  C025  F04C         	movff	?_scale+1,_printf$911+1
  1725  00171E  C026  F04D         	movff	?_scale+2,_printf$911+2
  1726                           
  1727                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1728  001722  C05E  F018         	movff	printf@fval,___ftmul@f2
  1729  001726  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1730  00172A  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1731  00172E  C04B  F015         	movff	_printf$911,___ftmul@f1
  1732  001732  C04C  F016         	movff	_printf$911+1,___ftmul@f1+1
  1733  001736  C04D  F017         	movff	_printf$911+2,___ftmul@f1+2
  1734  00173A  ECC8  F011         	call	___ftmul	;wreg free
  1735  00173E  C015  F02B         	movff	?___ftmul,___fttol@f1
  1736  001742  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1737  001746  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1738  00174A  EC44  F012         	call	___fttol	;wreg free
  1739  00174E  C02B  F050         	movff	?___fttol,printf@val
  1740  001752  C02C  F051         	movff	?___fttol+1,printf@val+1
  1741  001756  C02D  F052         	movff	?___fttol+2,printf@val+2
  1742  00175A  C02E  F053         	movff	?___fttol+3,printf@val+3
  1743                           
  1744                           ;doprnt.c: 1228: while(c--) {
  1745  00175E  D06B               	goto	l2465
  1746  001760                     l2459:
  1747                           
  1748                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1749  001760  C050  F001         	movff	printf@val,___lldiv@dividend
  1750  001764  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  1751  001768  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  1752  00176C  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  1753  001770  5063               	movf	printf@c,w,c
  1754  001772  0D04               	mullw	4
  1755  001774  0E01               	movlw	low _dpowers
  1756  001776  24F3               	addwf	prodl,w,c
  1757  001778  6EF6               	movwf	tblptrl,c
  1758  00177A  0E10               	movlw	high _dpowers
  1759  00177C  20F4               	addwfc	prodh,w,c
  1760  00177E  6EF7               	movwf	tblptrh,c
  1761  001780                     	if	0	;There are less than 3 active tblptr bytes
  1762  001780                     	endif
  1763  001780  0009               	tblrd		*+
  1764  001782  CFF5 F005          	movff	tablat,___lldiv@divisor
  1765  001786  0009               	tblrd		*+
  1766  001788  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1767  00178C  0009               	tblrd		*+
  1768  00178E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1769  001792  000A               	tblrd		*-
  1770  001794  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1771  001798  ECB0  F013         	call	___lldiv	;wreg free
  1772  00179C  C001  F058         	movff	?___lldiv,printf@tmpval
  1773  0017A0  C002  F059         	movff	?___lldiv+1,printf@tmpval+1
  1774  0017A4  C003  F05A         	movff	?___lldiv+2,printf@tmpval+2
  1775  0017A8  C004  F05B         	movff	?___lldiv+3,printf@tmpval+3
  1776                           
  1777                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1778  0017AC  C058  F001         	movff	printf@tmpval,___llmod@dividend
  1779  0017B0  C059  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1780  0017B4  C05A  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1781  0017B8  C05B  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1782  0017BC  0E0A               	movlw	10
  1783  0017BE  6E05               	movwf	___llmod@divisor,c
  1784  0017C0  0E00               	movlw	0
  1785  0017C2  6E06               	movwf	___llmod@divisor+1,c
  1786  0017C4  0E00               	movlw	0
  1787  0017C6  6E07               	movwf	___llmod@divisor+2,c
  1788  0017C8  0E00               	movlw	0
  1789  0017CA  6E08               	movwf	___llmod@divisor+3,c
  1790  0017CC  EC37  F014         	call	___llmod	;wreg free
  1791  0017D0  C001  F058         	movff	?___llmod,printf@tmpval
  1792  0017D4  C002  F059         	movff	?___llmod+1,printf@tmpval+1
  1793  0017D8  C003  F05A         	movff	?___llmod+2,printf@tmpval+2
  1794  0017DC  C004  F05B         	movff	?___llmod+3,printf@tmpval+3
  1795                           
  1796                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1797  0017E0  5058               	movf	printf@tmpval,w,c
  1798  0017E2  0F30               	addlw	48
  1799  0017E4  EC5E  F015         	call	_putch
  1800                           
  1801                           ;doprnt.c: 1232: val %= dpowers[c];
  1802  0017E8  C050  F001         	movff	printf@val,___llmod@dividend
  1803  0017EC  C051  F002         	movff	printf@val+1,___llmod@dividend+1
  1804  0017F0  C052  F003         	movff	printf@val+2,___llmod@dividend+2
  1805  0017F4  C053  F004         	movff	printf@val+3,___llmod@dividend+3
  1806  0017F8  5063               	movf	printf@c,w,c
  1807  0017FA  0D04               	mullw	4
  1808  0017FC  0E01               	movlw	low _dpowers
  1809  0017FE  24F3               	addwf	prodl,w,c
  1810  001800  6EF6               	movwf	tblptrl,c
  1811  001802  0E10               	movlw	high _dpowers
  1812  001804  20F4               	addwfc	prodh,w,c
  1813  001806  6EF7               	movwf	tblptrh,c
  1814  001808                     	if	0	;There are less than 3 active tblptr bytes
  1815  001808                     	endif
  1816  001808  0009               	tblrd		*+
  1817  00180A  CFF5 F005          	movff	tablat,___llmod@divisor
  1818  00180E  0009               	tblrd		*+
  1819  001810  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1820  001814  0009               	tblrd		*+
  1821  001816  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1822  00181A  000A               	tblrd		*-
  1823  00181C  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1824  001820  EC37  F014         	call	___llmod	;wreg free
  1825  001824  C001  F050         	movff	?___llmod,printf@val
  1826  001828  C002  F051         	movff	?___llmod+1,printf@val+1
  1827  00182C  C003  F052         	movff	?___llmod+2,printf@val+2
  1828  001830  C004  F053         	movff	?___llmod+3,printf@val+3
  1829  001834  D000               	goto	l2465
  1830  001836                     l2465:
  1831  001836  0663               	decf	printf@c,f,c
  1832  001838  2863               	incf	printf@c,w,c
  1833  00183A  B4D8               	btfsc	status,2,c
  1834  00183C  D009               	goto	l2471
  1835  00183E  D790               	goto	l2459
  1836                           
  1837                           ;doprnt.c: 1233: }
  1838                           ;doprnt.c: 1235: while(prec) {
  1839  001840  D007               	goto	l2471
  1840  001842                     l2467:
  1841                           
  1842                           ;doprnt.c: 1236: (putch('0') );
  1843  001842  0E30               	movlw	48
  1844  001844  EC5E  F015         	call	_putch
  1845                           
  1846                           ;doprnt.c: 1237: prec--;
  1847  001848  0661               	decf	printf@prec,f,c
  1848  00184A  A0D8               	btfss	status,0,c
  1849  00184C  0662               	decf	printf@prec+1,f,c
  1850  00184E  D000               	goto	l2471
  1851  001850                     l2471:
  1852  001850  5061               	movf	printf@prec,w,c
  1853  001852  1062               	iorwf	printf@prec+1,w,c
  1854  001854  B4D8               	btfsc	status,2,c
  1855  001856  D08B               	goto	l2517
  1856  001858  D7F4               	goto	l2467
  1857                           
  1858                           ;doprnt.c: 1238: }
  1859                           ;doprnt.c: 1245: continue;
  1860  00185A  D089               	goto	l2517
  1861  00185C                     l2473:
  1862                           
  1863                           ;doprnt.c: 1246: }
  1864                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1865  00185C  5061               	movf	printf@prec,w,c
  1866  00185E  1062               	iorwf	printf@prec+1,w,c
  1867  001860  A4D8               	btfss	status,2,c
  1868  001862  D009               	goto	l2479
  1869  001864  5050               	movf	printf@val,w,c
  1870  001866  1051               	iorwf	printf@val+1,w,c
  1871  001868  1052               	iorwf	printf@val+2,w,c
  1872  00186A  1053               	iorwf	printf@val+3,w,c
  1873  00186C  A4D8               	btfss	status,2,c
  1874  00186E  D003               	goto	l2479
  1875                           
  1876                           ;doprnt.c: 1291: prec++;
  1877  001870  4A61               	infsnz	printf@prec,f,c
  1878  001872  2A62               	incf	printf@prec+1,f,c
  1879  001874  D000               	goto	l2479
  1880  001876                     l2479:
  1881                           
  1882                           ;doprnt.c: 1339: if(c < prec)
  1883  001876  0E80               	movlw	128
  1884  001878  BE63               	btfsc	printf@c,7,c
  1885  00187A  0E7F               	movlw	127
  1886  00187C  6E45               	movwf	??_printf& (0+255),c
  1887  00187E  5061               	movf	printf@prec,w,c
  1888  001880  5C63               	subwf	printf@c,w,c
  1889  001882  5062               	movf	printf@prec+1,w,c
  1890  001884  0A80               	xorlw	128
  1891  001886  5845               	subwfb	??_printf& (0+255),w,c
  1892  001888  B0D8               	btfsc	status,0,c
  1893  00188A  D003               	goto	l2483
  1894                           
  1895                           ;doprnt.c: 1340: c = prec;
  1896  00188C  C061  F063         	movff	printf@prec,printf@c
  1897  001890  D011               	goto	l2487
  1898  001892                     l2483:
  1899                           
  1900                           ;doprnt.c: 1341: else if(prec < c)
  1901  001892  5062               	movf	printf@prec+1,w,c
  1902  001894  0A80               	xorlw	128
  1903  001896  6E45               	movwf	??_printf& (0+255),c
  1904  001898  5063               	movf	printf@c,w,c
  1905  00189A  5C61               	subwf	printf@prec,w,c
  1906  00189C  0E80               	movlw	128
  1907  00189E  BE63               	btfsc	printf@c,7,c
  1908  0018A0  0E7F               	movlw	127
  1909  0018A2  5845               	subwfb	??_printf& (0+255),w,c
  1910  0018A4  B0D8               	btfsc	status,0,c
  1911  0018A6  D006               	goto	l2487
  1912                           
  1913                           ;doprnt.c: 1342: prec = c;
  1914  0018A8  5063               	movf	printf@c,w,c
  1915  0018AA  6E61               	movwf	printf@prec,c
  1916  0018AC  6A62               	clrf	printf@prec+1,c
  1917  0018AE  BE61               	btfsc	printf@prec,7,c
  1918  0018B0  0662               	decf	printf@prec+1,f,c
  1919  0018B2  D000               	goto	l2487
  1920  0018B4                     l2487:
  1921                           
  1922                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1923  0018B4  5056               	movf	printf@width,w,c
  1924  0018B6  1057               	iorwf	printf@width+1,w,c
  1925  0018B8  B4D8               	btfsc	status,2,c
  1926  0018BA  D00E               	goto	l2493
  1927  0018BC  0E03               	movlw	3
  1928  0018BE  1454               	andwf	printf@flag,w,c
  1929  0018C0  6E45               	movwf	??_printf& (0+255),c
  1930  0018C2  0E00               	movlw	0
  1931  0018C4  1455               	andwf	printf@flag+1,w,c
  1932  0018C6  6E46               	movwf	(??_printf+1)& (0+255),c
  1933  0018C8  5045               	movf	??_printf,w,c
  1934  0018CA  1046               	iorwf	??_printf+1,w,c
  1935  0018CC  B4D8               	btfsc	status,2,c
  1936  0018CE  D004               	goto	l2493
  1937                           
  1938                           ;doprnt.c: 1346: width--;
  1939  0018D0  0656               	decf	printf@width,f,c
  1940  0018D2  A0D8               	btfss	status,0,c
  1941  0018D4  0657               	decf	printf@width+1,f,c
  1942  0018D6  D000               	goto	l2493
  1943  0018D8                     l2493:
  1944                           
  1945                           ;doprnt.c: 1348: if(flag & 0x4000) {
  1946  0018D8  AC55               	btfss	printf@flag+1,6,c
  1947  0018DA  D014               	goto	l2501
  1948                           
  1949                           ;doprnt.c: 1349: if(width > prec)
  1950  0018DC  5056               	movf	printf@width,w,c
  1951  0018DE  5C61               	subwf	printf@prec,w,c
  1952  0018E0  5062               	movf	printf@prec+1,w,c
  1953  0018E2  0A80               	xorlw	128
  1954  0018E4  6E45               	movwf	??_printf& (0+255),c
  1955  0018E6  5057               	movf	printf@width+1,w,c
  1956  0018E8  0A80               	xorlw	128
  1957  0018EA  5845               	subwfb	??_printf& (0+255),w,c
  1958  0018EC  B0D8               	btfsc	status,0,c
  1959  0018EE  D005               	goto	l2499
  1960                           
  1961                           ;doprnt.c: 1350: width -= prec;
  1962  0018F0  5061               	movf	printf@prec,w,c
  1963  0018F2  5E56               	subwf	printf@width,f,c
  1964  0018F4  5062               	movf	printf@prec+1,w,c
  1965  0018F6  5A57               	subwfb	printf@width+1,f,c
  1966  0018F8  D005               	goto	l2501
  1967  0018FA                     l2499:
  1968                           
  1969                           ;doprnt.c: 1351: else
  1970                           ;doprnt.c: 1352: width = 0;
  1971  0018FA  0E00               	movlw	0
  1972  0018FC  6E57               	movwf	printf@width+1,c
  1973  0018FE  0E00               	movlw	0
  1974  001900  6E56               	movwf	printf@width,c
  1975  001902  D000               	goto	l2501
  1976  001904                     l2501:
  1977                           
  1978                           ;doprnt.c: 1353: }
  1979                           ;doprnt.c: 1381: if(width > c)
  1980  001904  0E80               	movlw	128
  1981  001906  BE63               	btfsc	printf@c,7,c
  1982  001908  0E7F               	movlw	127
  1983  00190A  6E45               	movwf	??_printf& (0+255),c
  1984  00190C  5056               	movf	printf@width,w,c
  1985  00190E  5C63               	subwf	printf@c,w,c
  1986  001910  5057               	movf	printf@width+1,w,c
  1987  001912  0A80               	xorlw	128
  1988  001914  5845               	subwfb	??_printf& (0+255),w,c
  1989  001916  B0D8               	btfsc	status,0,c
  1990  001918  D007               	goto	l2505
  1991                           
  1992                           ;doprnt.c: 1382: width -= c;
  1993  00191A  5063               	movf	printf@c,w,c
  1994  00191C  5E56               	subwf	printf@width,f,c
  1995  00191E  0E00               	movlw	0
  1996  001920  BE63               	btfsc	printf@c,7,c
  1997  001922  0EFF               	movlw	255
  1998  001924  5A57               	subwfb	printf@width+1,f,c
  1999  001926  D005               	goto	l2507
  2000  001928                     l2505:
  2001                           
  2002                           ;doprnt.c: 1383: else
  2003                           ;doprnt.c: 1384: width = 0;
  2004  001928  0E00               	movlw	0
  2005  00192A  6E57               	movwf	printf@width+1,c
  2006  00192C  0E00               	movlw	0
  2007  00192E  6E56               	movwf	printf@width,c
  2008  001930  D000               	goto	l2507
  2009  001932                     l2507:
  2010                           
  2011                           ;doprnt.c: 1422: {
  2012                           ;doprnt.c: 1424: if(width
  2013                           ;doprnt.c: 1428: )
  2014  001932  5056               	movf	printf@width,w,c
  2015  001934  1057               	iorwf	printf@width+1,w,c
  2016  001936  B4D8               	btfsc	status,2,c
  2017  001938  D00C               	goto	l2513
  2018  00193A                     l2509:
  2019                           
  2020                           ;doprnt.c: 1430: (putch(' ') );
  2021  00193A  0E20               	movlw	32
  2022  00193C  EC5E  F015         	call	_putch
  2023                           
  2024                           ;doprnt.c: 1431: while(--width);
  2025  001940  0656               	decf	printf@width,f,c
  2026  001942  A0D8               	btfss	status,0,c
  2027  001944  0657               	decf	printf@width+1,f,c
  2028  001946  5056               	movf	printf@width,w,c
  2029  001948  1057               	iorwf	printf@width+1,w,c
  2030  00194A  B4D8               	btfsc	status,2,c
  2031  00194C  D002               	goto	l2513
  2032  00194E  D7F5               	goto	l2509
  2033  001950  D000               	goto	l2513
  2034  001952                     l2513:
  2035                           
  2036                           ;doprnt.c: 1438: if(flag & 0x03)
  2037  001952  0E03               	movlw	3
  2038  001954  1454               	andwf	printf@flag,w,c
  2039  001956  6E45               	movwf	??_printf& (0+255),c
  2040  001958  0E00               	movlw	0
  2041  00195A  1455               	andwf	printf@flag+1,w,c
  2042  00195C  6E46               	movwf	(??_printf+1)& (0+255),c
  2043  00195E  5045               	movf	??_printf,w,c
  2044  001960  1046               	iorwf	??_printf+1,w,c
  2045  001962  B4D8               	btfsc	status,2,c
  2046  001964  D004               	goto	l2517
  2047                           
  2048                           ;doprnt.c: 1439: (putch('-') );
  2049  001966  0E2D               	movlw	45
  2050  001968  EC5E  F015         	call	_putch
  2051  00196C  D000               	goto	l2517
  2052  00196E                     l2517:
  2053  00196E  C040  FFF6         	movff	printf@f,tblptrl
  2054  001972  C041  FFF7         	movff	printf@f+1,tblptrh
  2055  001976  4A40               	infsnz	printf@f,f,c
  2056  001978  2A41               	incf	printf@f+1,f,c
  2057  00197A                     	if	0	;tblptru may be non-zero
  2058  00197A                     	endif
  2059  00197A                     	if	0	;tblptru may be non-zero
  2060  00197A                     	endif
  2061  00197A  0008               	tblrd		*
  2062  00197C  CFF5 F063          	movff	tablat,printf@c
  2063  001980  5063               	movf	printf@c,w,c
  2064  001982  B4D8               	btfsc	status,2,c
  2065  001984  D003               	goto	l137
  2066  001986  EF85  F008         	goto	l2285
  2067  00198A  D000               	goto	l137
  2068  00198C                     l137:
  2069  00198C  0012               	return		;funcret
  2070  00198E                     __end_of_printf:
  2071                           	opt stack 0
  2072                           tblptru	equ	0xFF8
  2073                           tblptrh	equ	0xFF7
  2074                           tblptrl	equ	0xFF6
  2075                           tablat	equ	0xFF5
  2076                           prodh	equ	0xFF4
  2077                           prodl	equ	0xFF3
  2078                           wreg	equ	0xFE8
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085 ;; *************** function _scale *****************
  2086 ;; Defined at:
  2087 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  scl             1    wreg     char 
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;  scl             1   41[COMRAM] char 
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  3   35[COMRAM] char 
  2094 ;; Registers used:
  2095 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2101 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;Total ram usage:        7 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    2
  2108 ;; This function calls:
  2109 ;;		___awdiv
  2110 ;;		___awmod
  2111 ;;		___ftmul
  2112 ;;		___wmul
  2113 ;; This function is called by:
  2114 ;;		_printf
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text2
  2119  00198E                     __ptext2:
  2120                           	opt stack 0
  2121  00198E                     _scale:
  2122                           	opt stack 27
  2123                           
  2124                           ;incstack = 0
  2125                           ;scale@scl stored from wreg
  2126  00198E  6E2A               	movwf	scale@scl,c
  2127                           
  2128                           ;doprnt.c: 428: if(scl < 0) {
  2129  001990  AE2A               	btfss	scale@scl,7,c
  2130  001992  D0EF               	goto	l2009
  2131                           
  2132                           ;doprnt.c: 429: scl = -scl;
  2133  001994  6C2A               	negf	scale@scl,c
  2134                           
  2135                           ;doprnt.c: 430: if(scl>=110)
  2136  001996  502A               	movf	scale@scl,w,c
  2137  001998  0A80               	xorlw	128
  2138  00199A  0F12               	addlw	-238
  2139  00199C  A0D8               	btfss	status,0,c
  2140  00199E  D08D               	goto	l1999
  2141                           
  2142                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2143  0019A0  0E00               	movlw	0
  2144  0019A2  6E12               	movwf	___wmul@multiplicand+1,c
  2145  0019A4  0E03               	movlw	3
  2146  0019A6  6E11               	movwf	___wmul@multiplicand,c
  2147  0019A8  0E00               	movlw	0
  2148  0019AA  6E0A               	movwf	___awdiv@divisor+1,c
  2149  0019AC  0E0A               	movlw	10
  2150  0019AE  6E09               	movwf	___awdiv@divisor,c
  2151  0019B0  0E00               	movlw	0
  2152  0019B2  6E04               	movwf	___awmod@divisor+1,c
  2153  0019B4  0E64               	movlw	100
  2154  0019B6  6E03               	movwf	___awmod@divisor,c
  2155  0019B8  502A               	movf	scale@scl,w,c
  2156  0019BA  6E01               	movwf	___awmod@dividend,c
  2157  0019BC  6A02               	clrf	___awmod@dividend+1,c
  2158  0019BE  BE01               	btfsc	___awmod@dividend,7,c
  2159  0019C0  0602               	decf	___awmod@dividend+1,f,c
  2160  0019C2  ECF6  F013         	call	___awmod	;wreg free
  2161  0019C6  C001  F007         	movff	?___awmod,___awdiv@dividend
  2162  0019CA  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2163  0019CE  EC1A  F013         	call	___awdiv	;wreg free
  2164  0019D2  0E09               	movlw	9
  2165  0019D4  2407               	addwf	?___awdiv,w,c
  2166  0019D6  6E0F               	movwf	___wmul@multiplier,c
  2167  0019D8  0E00               	movlw	0
  2168  0019DA  2008               	addwfc	?___awdiv+1,w,c
  2169  0019DC  6E10               	movwf	___wmul@multiplier+1,c
  2170  0019DE  EC1D  F015         	call	___wmul	;wreg free
  2171  0019E2  0E29               	movlw	low __npowers_
  2172  0019E4  240F               	addwf	?___wmul,w,c
  2173  0019E6  6EF6               	movwf	tblptrl,c
  2174  0019E8  0E10               	movlw	high __npowers_
  2175  0019EA  2010               	addwfc	?___wmul+1,w,c
  2176  0019EC  6EF7               	movwf	tblptrh,c
  2177  0019EE                     	if	0	;There are less than 3 active tblptr bytes
  2178  0019EE                     	endif
  2179  0019EE  0009               	tblrd		*+
  2180  0019F0  CFF5 F018          	movff	tablat,___ftmul@f2
  2181  0019F4  0009               	tblrd		*+
  2182  0019F6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2183  0019FA  000A               	tblrd		*-
  2184  0019FC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2185  001A00  0E00               	movlw	0
  2186  001A02  6E0A               	movwf	___awdiv@divisor+1,c
  2187  001A04  0E64               	movlw	100
  2188  001A06  6E09               	movwf	___awdiv@divisor,c
  2189  001A08  502A               	movf	scale@scl,w,c
  2190  001A0A  6E07               	movwf	___awdiv@dividend,c
  2191  001A0C  6A08               	clrf	___awdiv@dividend+1,c
  2192  001A0E  BE07               	btfsc	___awdiv@dividend,7,c
  2193  001A10  0608               	decf	___awdiv@dividend+1,f,c
  2194  001A12  EC1A  F013         	call	___awdiv	;wreg free
  2195  001A16  0E12               	movlw	18
  2196  001A18  2407               	addwf	?___awdiv,w,c
  2197  001A1A  6E0F               	movwf	___wmul@multiplier,c
  2198  001A1C  0E00               	movlw	0
  2199  001A1E  2008               	addwfc	?___awdiv+1,w,c
  2200  001A20  6E10               	movwf	___wmul@multiplier+1,c
  2201  001A22  0E00               	movlw	0
  2202  001A24  6E12               	movwf	___wmul@multiplicand+1,c
  2203  001A26  0E03               	movlw	3
  2204  001A28  6E11               	movwf	___wmul@multiplicand,c
  2205  001A2A  EC1D  F015         	call	___wmul	;wreg free
  2206  001A2E  0E29               	movlw	low __npowers_
  2207  001A30  240F               	addwf	?___wmul,w,c
  2208  001A32  6EF6               	movwf	tblptrl,c
  2209  001A34  0E10               	movlw	high __npowers_
  2210  001A36  2010               	addwfc	?___wmul+1,w,c
  2211  001A38  6EF7               	movwf	tblptrh,c
  2212  001A3A                     	if	0	;There are less than 3 active tblptr bytes
  2213  001A3A                     	endif
  2214  001A3A  0009               	tblrd		*+
  2215  001A3C  CFF5 F015          	movff	tablat,___ftmul@f1
  2216  001A40  0009               	tblrd		*+
  2217  001A42  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2218  001A46  000A               	tblrd		*-
  2219  001A48  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2220  001A4C  ECC8  F011         	call	___ftmul	;wreg free
  2221  001A50  C015  F027         	movff	?___ftmul,_scale$910
  2222  001A54  C016  F028         	movff	?___ftmul+1,_scale$910+1
  2223  001A58  C017  F029         	movff	?___ftmul+2,_scale$910+2
  2224                           
  2225                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2226  001A5C  C027  F015         	movff	_scale$910,___ftmul@f1
  2227  001A60  C028  F016         	movff	_scale$910+1,___ftmul@f1+1
  2228  001A64  C029  F017         	movff	_scale$910+2,___ftmul@f1+2
  2229  001A68  0E00               	movlw	0
  2230  001A6A  6E12               	movwf	___wmul@multiplicand+1,c
  2231  001A6C  0E03               	movlw	3
  2232  001A6E  6E11               	movwf	___wmul@multiplicand,c
  2233  001A70  0E00               	movlw	0
  2234  001A72  6E04               	movwf	___awmod@divisor+1,c
  2235  001A74  0E0A               	movlw	10
  2236  001A76  6E03               	movwf	___awmod@divisor,c
  2237  001A78  502A               	movf	scale@scl,w,c
  2238  001A7A  6E01               	movwf	___awmod@dividend,c
  2239  001A7C  6A02               	clrf	___awmod@dividend+1,c
  2240  001A7E  BE01               	btfsc	___awmod@dividend,7,c
  2241  001A80  0602               	decf	___awmod@dividend+1,f,c
  2242  001A82  ECF6  F013         	call	___awmod	;wreg free
  2243  001A86  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2244  001A8A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2245  001A8E  EC1D  F015         	call	___wmul	;wreg free
  2246  001A92  0E29               	movlw	low __npowers_
  2247  001A94  240F               	addwf	?___wmul,w,c
  2248  001A96  6EF6               	movwf	tblptrl,c
  2249  001A98  0E10               	movlw	high __npowers_
  2250  001A9A  2010               	addwfc	?___wmul+1,w,c
  2251  001A9C  6EF7               	movwf	tblptrh,c
  2252  001A9E                     	if	0	;There are less than 3 active tblptr bytes
  2253  001A9E                     	endif
  2254  001A9E  0009               	tblrd		*+
  2255  001AA0  CFF5 F018          	movff	tablat,___ftmul@f2
  2256  001AA4  0009               	tblrd		*+
  2257  001AA6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2258  001AAA  000A               	tblrd		*-
  2259  001AAC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2260  001AB0  ECC8  F011         	call	___ftmul	;wreg free
  2261  001AB4  D141               	goto	L5
  2262  001AB6  D15A               	goto	l54
  2263  001AB8  D054               	goto	l2005
  2264  001ABA                     l1999:
  2265                           
  2266                           ;doprnt.c: 432: else if(scl > 10)
  2267  001ABA  502A               	movf	scale@scl,w,c
  2268  001ABC  0A80               	xorlw	128
  2269  001ABE  0F75               	addlw	-139
  2270  001AC0  A0D8               	btfss	status,0,c
  2271  001AC2  D04F               	goto	l2005
  2272                           
  2273                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2274  001AC4  0E00               	movlw	0
  2275  001AC6  6E0A               	movwf	___awdiv@divisor+1,c
  2276  001AC8  0E0A               	movlw	10
  2277  001ACA  6E09               	movwf	___awdiv@divisor,c
  2278  001ACC  502A               	movf	scale@scl,w,c
  2279  001ACE  6E07               	movwf	___awdiv@dividend,c
  2280  001AD0  6A08               	clrf	___awdiv@dividend+1,c
  2281  001AD2  BE07               	btfsc	___awdiv@dividend,7,c
  2282  001AD4  0608               	decf	___awdiv@dividend+1,f,c
  2283  001AD6  EC1A  F013         	call	___awdiv	;wreg free
  2284  001ADA  0E09               	movlw	9
  2285  001ADC  2407               	addwf	?___awdiv,w,c
  2286  001ADE  6E0F               	movwf	___wmul@multiplier,c
  2287  001AE0  0E00               	movlw	0
  2288  001AE2  2008               	addwfc	?___awdiv+1,w,c
  2289  001AE4  6E10               	movwf	___wmul@multiplier+1,c
  2290  001AE6  0E00               	movlw	0
  2291  001AE8  6E12               	movwf	___wmul@multiplicand+1,c
  2292  001AEA  0E03               	movlw	3
  2293  001AEC  6E11               	movwf	___wmul@multiplicand,c
  2294  001AEE  EC1D  F015         	call	___wmul	;wreg free
  2295  001AF2  0E29               	movlw	low __npowers_
  2296  001AF4  240F               	addwf	?___wmul,w,c
  2297  001AF6  6EF6               	movwf	tblptrl,c
  2298  001AF8  0E10               	movlw	high __npowers_
  2299  001AFA  2010               	addwfc	?___wmul+1,w,c
  2300  001AFC  6EF7               	movwf	tblptrh,c
  2301  001AFE                     	if	0	;There are less than 3 active tblptr bytes
  2302  001AFE                     	endif
  2303  001AFE  0009               	tblrd		*+
  2304  001B00  CFF5 F015          	movff	tablat,___ftmul@f1
  2305  001B04  0009               	tblrd		*+
  2306  001B06  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2307  001B0A  000A               	tblrd		*-
  2308  001B0C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2309  001B10  0E00               	movlw	0
  2310  001B12  6E12               	movwf	___wmul@multiplicand+1,c
  2311  001B14  0E03               	movlw	3
  2312  001B16  6E11               	movwf	___wmul@multiplicand,c
  2313  001B18  0E00               	movlw	0
  2314  001B1A  6E04               	movwf	___awmod@divisor+1,c
  2315  001B1C  0E0A               	movlw	10
  2316  001B1E  6E03               	movwf	___awmod@divisor,c
  2317  001B20  502A               	movf	scale@scl,w,c
  2318  001B22  6E01               	movwf	___awmod@dividend,c
  2319  001B24  6A02               	clrf	___awmod@dividend+1,c
  2320  001B26  BE01               	btfsc	___awmod@dividend,7,c
  2321  001B28  0602               	decf	___awmod@dividend+1,f,c
  2322  001B2A  ECF6  F013         	call	___awmod	;wreg free
  2323  001B2E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2324  001B32  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2325  001B36  EC1D  F015         	call	___wmul	;wreg free
  2326  001B3A  0E29               	movlw	low __npowers_
  2327  001B3C  240F               	addwf	?___wmul,w,c
  2328  001B3E  6EF6               	movwf	tblptrl,c
  2329  001B40  0E10               	movlw	high __npowers_
  2330  001B42  2010               	addwfc	?___wmul+1,w,c
  2331  001B44  6EF7               	movwf	tblptrh,c
  2332  001B46                     	if	0	;There are less than 3 active tblptr bytes
  2333  001B46                     	endif
  2334  001B46  0009               	tblrd		*+
  2335  001B48  CFF5 F018          	movff	tablat,___ftmul@f2
  2336  001B4C  0009               	tblrd		*+
  2337  001B4E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2338  001B52  000A               	tblrd		*-
  2339  001B54  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2340  001B58  ECC8  F011         	call	___ftmul	;wreg free
  2341  001B5C  D0ED               	goto	L5
  2342  001B5E  D106               	goto	l54
  2343  001B60  D000               	goto	l2005
  2344  001B62                     l2005:
  2345                           
  2346                           ;doprnt.c: 434: return _npowers_[scl];
  2347  001B62  502A               	movf	scale@scl,w,c
  2348  001B64  0D03               	mullw	3
  2349  001B66  0E29               	movlw	low __npowers_
  2350  001B68  24F3               	addwf	prodl,w,c
  2351  001B6A  6EF6               	movwf	tblptrl,c
  2352  001B6C  0E10               	movlw	high __npowers_
  2353  001B6E  D0F2               	goto	L4
  2354  001B70  D0FD               	goto	l54
  2355  001B72                     l2009:
  2356                           
  2357                           ;doprnt.c: 435: }
  2358                           ;doprnt.c: 436: if(scl>=110)
  2359  001B72  502A               	movf	scale@scl,w,c
  2360  001B74  0A80               	xorlw	128
  2361  001B76  0F12               	addlw	-238
  2362  001B78  A0D8               	btfss	status,0,c
  2363  001B7A  D08D               	goto	l2017
  2364                           
  2365                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2366  001B7C  0E00               	movlw	0
  2367  001B7E  6E12               	movwf	___wmul@multiplicand+1,c
  2368  001B80  0E03               	movlw	3
  2369  001B82  6E11               	movwf	___wmul@multiplicand,c
  2370  001B84  0E00               	movlw	0
  2371  001B86  6E0A               	movwf	___awdiv@divisor+1,c
  2372  001B88  0E0A               	movlw	10
  2373  001B8A  6E09               	movwf	___awdiv@divisor,c
  2374  001B8C  0E00               	movlw	0
  2375  001B8E  6E04               	movwf	___awmod@divisor+1,c
  2376  001B90  0E64               	movlw	100
  2377  001B92  6E03               	movwf	___awmod@divisor,c
  2378  001B94  502A               	movf	scale@scl,w,c
  2379  001B96  6E01               	movwf	___awmod@dividend,c
  2380  001B98  6A02               	clrf	___awmod@dividend+1,c
  2381  001B9A  BE01               	btfsc	___awmod@dividend,7,c
  2382  001B9C  0602               	decf	___awmod@dividend+1,f,c
  2383  001B9E  ECF6  F013         	call	___awmod	;wreg free
  2384  001BA2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2385  001BA6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2386  001BAA  EC1A  F013         	call	___awdiv	;wreg free
  2387  001BAE  0E09               	movlw	9
  2388  001BB0  2407               	addwf	?___awdiv,w,c
  2389  001BB2  6E0F               	movwf	___wmul@multiplier,c
  2390  001BB4  0E00               	movlw	0
  2391  001BB6  2008               	addwfc	?___awdiv+1,w,c
  2392  001BB8  6E10               	movwf	___wmul@multiplier+1,c
  2393  001BBA  EC1D  F015         	call	___wmul	;wreg free
  2394  001BBE  0E50               	movlw	low __powers_
  2395  001BC0  240F               	addwf	?___wmul,w,c
  2396  001BC2  6EF6               	movwf	tblptrl,c
  2397  001BC4  0E10               	movlw	high __powers_
  2398  001BC6  2010               	addwfc	?___wmul+1,w,c
  2399  001BC8  6EF7               	movwf	tblptrh,c
  2400  001BCA                     	if	0	;There are less than 3 active tblptr bytes
  2401  001BCA                     	endif
  2402  001BCA  0009               	tblrd		*+
  2403  001BCC  CFF5 F018          	movff	tablat,___ftmul@f2
  2404  001BD0  0009               	tblrd		*+
  2405  001BD2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2406  001BD6  000A               	tblrd		*-
  2407  001BD8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2408  001BDC  0E00               	movlw	0
  2409  001BDE  6E0A               	movwf	___awdiv@divisor+1,c
  2410  001BE0  0E64               	movlw	100
  2411  001BE2  6E09               	movwf	___awdiv@divisor,c
  2412  001BE4  502A               	movf	scale@scl,w,c
  2413  001BE6  6E07               	movwf	___awdiv@dividend,c
  2414  001BE8  6A08               	clrf	___awdiv@dividend+1,c
  2415  001BEA  BE07               	btfsc	___awdiv@dividend,7,c
  2416  001BEC  0608               	decf	___awdiv@dividend+1,f,c
  2417  001BEE  EC1A  F013         	call	___awdiv	;wreg free
  2418  001BF2  0E12               	movlw	18
  2419  001BF4  2407               	addwf	?___awdiv,w,c
  2420  001BF6  6E0F               	movwf	___wmul@multiplier,c
  2421  001BF8  0E00               	movlw	0
  2422  001BFA  2008               	addwfc	?___awdiv+1,w,c
  2423  001BFC  6E10               	movwf	___wmul@multiplier+1,c
  2424  001BFE  0E00               	movlw	0
  2425  001C00  6E12               	movwf	___wmul@multiplicand+1,c
  2426  001C02  0E03               	movlw	3
  2427  001C04  6E11               	movwf	___wmul@multiplicand,c
  2428  001C06  EC1D  F015         	call	___wmul	;wreg free
  2429  001C0A  0E50               	movlw	low __powers_
  2430  001C0C  240F               	addwf	?___wmul,w,c
  2431  001C0E  6EF6               	movwf	tblptrl,c
  2432  001C10  0E10               	movlw	high __powers_
  2433  001C12  2010               	addwfc	?___wmul+1,w,c
  2434  001C14  6EF7               	movwf	tblptrh,c
  2435  001C16                     	if	0	;There are less than 3 active tblptr bytes
  2436  001C16                     	endif
  2437  001C16  0009               	tblrd		*+
  2438  001C18  CFF5 F015          	movff	tablat,___ftmul@f1
  2439  001C1C  0009               	tblrd		*+
  2440  001C1E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2441  001C22  000A               	tblrd		*-
  2442  001C24  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2443  001C28  ECC8  F011         	call	___ftmul	;wreg free
  2444  001C2C  C015  F027         	movff	?___ftmul,_scale$910
  2445  001C30  C016  F028         	movff	?___ftmul+1,_scale$910+1
  2446  001C34  C017  F029         	movff	?___ftmul+2,_scale$910+2
  2447                           
  2448                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2449  001C38  C027  F015         	movff	_scale$910,___ftmul@f1
  2450  001C3C  C028  F016         	movff	_scale$910+1,___ftmul@f1+1
  2451  001C40  C029  F017         	movff	_scale$910+2,___ftmul@f1+2
  2452  001C44  0E00               	movlw	0
  2453  001C46  6E12               	movwf	___wmul@multiplicand+1,c
  2454  001C48  0E03               	movlw	3
  2455  001C4A  6E11               	movwf	___wmul@multiplicand,c
  2456  001C4C  0E00               	movlw	0
  2457  001C4E  6E04               	movwf	___awmod@divisor+1,c
  2458  001C50  0E0A               	movlw	10
  2459  001C52  6E03               	movwf	___awmod@divisor,c
  2460  001C54  502A               	movf	scale@scl,w,c
  2461  001C56  6E01               	movwf	___awmod@dividend,c
  2462  001C58  6A02               	clrf	___awmod@dividend+1,c
  2463  001C5A  BE01               	btfsc	___awmod@dividend,7,c
  2464  001C5C  0602               	decf	___awmod@dividend+1,f,c
  2465  001C5E  ECF6  F013         	call	___awmod	;wreg free
  2466  001C62  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2467  001C66  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2468  001C6A  EC1D  F015         	call	___wmul	;wreg free
  2469  001C6E  0E50               	movlw	low __powers_
  2470  001C70  240F               	addwf	?___wmul,w,c
  2471  001C72  6EF6               	movwf	tblptrl,c
  2472  001C74  0E10               	movlw	high __powers_
  2473  001C76  2010               	addwfc	?___wmul+1,w,c
  2474  001C78  6EF7               	movwf	tblptrh,c
  2475  001C7A                     	if	0	;There are less than 3 active tblptr bytes
  2476  001C7A                     	endif
  2477  001C7A  0009               	tblrd		*+
  2478  001C7C  CFF5 F018          	movff	tablat,___ftmul@f2
  2479  001C80  0009               	tblrd		*+
  2480  001C82  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2481  001C86  000A               	tblrd		*-
  2482  001C88  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2483  001C8C  ECC8  F011         	call	___ftmul	;wreg free
  2484  001C90  D053               	goto	L5
  2485  001C92  D06C               	goto	l54
  2486  001C94  D059               	goto	l2023
  2487  001C96                     l2017:
  2488                           
  2489                           ;doprnt.c: 438: else if(scl > 10)
  2490  001C96  502A               	movf	scale@scl,w,c
  2491  001C98  0A80               	xorlw	128
  2492  001C9A  0F75               	addlw	-139
  2493  001C9C  A0D8               	btfss	status,0,c
  2494  001C9E  D054               	goto	l2023
  2495                           
  2496                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2497  001CA0  0E00               	movlw	0
  2498  001CA2  6E0A               	movwf	___awdiv@divisor+1,c
  2499  001CA4  0E0A               	movlw	10
  2500  001CA6  6E09               	movwf	___awdiv@divisor,c
  2501  001CA8  502A               	movf	scale@scl,w,c
  2502  001CAA  6E07               	movwf	___awdiv@dividend,c
  2503  001CAC  6A08               	clrf	___awdiv@dividend+1,c
  2504  001CAE  BE07               	btfsc	___awdiv@dividend,7,c
  2505  001CB0  0608               	decf	___awdiv@dividend+1,f,c
  2506  001CB2  EC1A  F013         	call	___awdiv	;wreg free
  2507  001CB6  0E09               	movlw	9
  2508  001CB8  2407               	addwf	?___awdiv,w,c
  2509  001CBA  6E0F               	movwf	___wmul@multiplier,c
  2510  001CBC  0E00               	movlw	0
  2511  001CBE  2008               	addwfc	?___awdiv+1,w,c
  2512  001CC0  6E10               	movwf	___wmul@multiplier+1,c
  2513  001CC2  0E00               	movlw	0
  2514  001CC4  6E12               	movwf	___wmul@multiplicand+1,c
  2515  001CC6  0E03               	movlw	3
  2516  001CC8  6E11               	movwf	___wmul@multiplicand,c
  2517  001CCA  EC1D  F015         	call	___wmul	;wreg free
  2518  001CCE  0E50               	movlw	low __powers_
  2519  001CD0  240F               	addwf	?___wmul,w,c
  2520  001CD2  6EF6               	movwf	tblptrl,c
  2521  001CD4  0E10               	movlw	high __powers_
  2522  001CD6  2010               	addwfc	?___wmul+1,w,c
  2523  001CD8  6EF7               	movwf	tblptrh,c
  2524  001CDA                     	if	0	;There are less than 3 active tblptr bytes
  2525  001CDA                     	endif
  2526  001CDA  0009               	tblrd		*+
  2527  001CDC  CFF5 F015          	movff	tablat,___ftmul@f1
  2528  001CE0  0009               	tblrd		*+
  2529  001CE2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2530  001CE6  000A               	tblrd		*-
  2531  001CE8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2532  001CEC  0E00               	movlw	0
  2533  001CEE  6E12               	movwf	___wmul@multiplicand+1,c
  2534  001CF0  0E03               	movlw	3
  2535  001CF2  6E11               	movwf	___wmul@multiplicand,c
  2536  001CF4  0E00               	movlw	0
  2537  001CF6  6E04               	movwf	___awmod@divisor+1,c
  2538  001CF8  0E0A               	movlw	10
  2539  001CFA  6E03               	movwf	___awmod@divisor,c
  2540  001CFC  502A               	movf	scale@scl,w,c
  2541  001CFE  6E01               	movwf	___awmod@dividend,c
  2542  001D00  6A02               	clrf	___awmod@dividend+1,c
  2543  001D02  BE01               	btfsc	___awmod@dividend,7,c
  2544  001D04  0602               	decf	___awmod@dividend+1,f,c
  2545  001D06  ECF6  F013         	call	___awmod	;wreg free
  2546  001D0A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2547  001D0E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2548  001D12  EC1D  F015         	call	___wmul	;wreg free
  2549  001D16  0E50               	movlw	low __powers_
  2550  001D18  240F               	addwf	?___wmul,w,c
  2551  001D1A  6EF6               	movwf	tblptrl,c
  2552  001D1C  0E10               	movlw	high __powers_
  2553  001D1E  2010               	addwfc	?___wmul+1,w,c
  2554  001D20  6EF7               	movwf	tblptrh,c
  2555  001D22                     	if	0	;There are less than 3 active tblptr bytes
  2556  001D22                     	endif
  2557  001D22  0009               	tblrd		*+
  2558  001D24  CFF5 F018          	movff	tablat,___ftmul@f2
  2559  001D28  0009               	tblrd		*+
  2560  001D2A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2561  001D2E  000A               	tblrd		*-
  2562  001D30  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2563  001D34  ECC8  F011         	call	___ftmul	;wreg free
  2564  001D38                     L5:
  2565  001D38  C015  F024         	movff	?___ftmul,?_scale
  2566  001D3C  C016  F025         	movff	?___ftmul+1,?_scale+1
  2567  001D40  C017  F026         	movff	?___ftmul+2,?_scale+2
  2568  001D44  D013               	goto	l54
  2569  001D46  D000               	goto	l2023
  2570  001D48                     l2023:
  2571                           
  2572                           ;doprnt.c: 440: return _powers_[scl];
  2573  001D48  502A               	movf	scale@scl,w,c
  2574  001D4A  0D03               	mullw	3
  2575  001D4C  0E50               	movlw	low __powers_
  2576  001D4E  24F3               	addwf	prodl,w,c
  2577  001D50  6EF6               	movwf	tblptrl,c
  2578  001D52  0E10               	movlw	high __powers_
  2579  001D54                     L4:
  2580  001D54  20F4               	addwfc	prodh,w,c
  2581  001D56  6EF7               	movwf	tblptrh,c
  2582  001D58                     	if	0	;There are less than 3 active tblptr bytes
  2583  001D58                     	endif
  2584  001D58  0009               	tblrd		*+
  2585  001D5A  CFF5 F024          	movff	tablat,?_scale
  2586  001D5E  0009               	tblrd		*+
  2587  001D60  CFF5 F025          	movff	tablat,?_scale+1
  2588  001D64  000A               	tblrd		*-
  2589  001D66  CFF5 F026          	movff	tablat,?_scale+2
  2590  001D6A  D000               	goto	l54
  2591  001D6C                     l54:
  2592  001D6C  0012               	return		;funcret
  2593  001D6E                     __end_of_scale:
  2594                           	opt stack 0
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           prodh	equ	0xFF4
  2600                           prodl	equ	0xFF3
  2601                           wreg	equ	0xFE8
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function _putch *****************
  2609 ;; Defined at:
  2610 ;;		line 17 in file "Lab1p2.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  c               1    wreg     unsigned char 
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  c               1    0[COMRAM] unsigned char 
  2615 ;; Return value:  Size  Location     Type
  2616 ;;		None               void
  2617 ;; Registers used:
  2618 ;;		wreg
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;Total ram usage:        1 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_printf
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text3
  2638  002ABC                     __ptext3:
  2639                           	opt stack 0
  2640  002ABC                     _putch:
  2641                           	opt stack 29
  2642                           
  2643                           ;incstack = 0
  2644                           ;putch@c stored from wreg
  2645  002ABC  6E01               	movwf	putch@c,c
  2646                           
  2647                           ;Lab1p2.c: 19: while (!TRMT);
  2648  002ABE  D000               	goto	l16
  2649  002AC0                     l16:
  2650  002AC0  A2AC               	btfss	4012,1,c	;volatile
  2651  002AC2  D7FE               	goto	l16
  2652                           
  2653                           ;Lab1p2.c: 20: TXREG = c;
  2654  002AC4  C001  FFAD         	movff	putch@c,4013	;volatile
  2655  002AC8  0012               	return		;funcret
  2656  002ACA                     __end_of_putch:
  2657                           	opt stack 0
  2658                           tblptru	equ	0xFF8
  2659                           tblptrh	equ	0xFF7
  2660                           tblptrl	equ	0xFF6
  2661                           tablat	equ	0xFF5
  2662                           prodh	equ	0xFF4
  2663                           prodl	equ	0xFF3
  2664                           wreg	equ	0xFE8
  2665                           postinc2	equ	0xFDE
  2666                           postdec2	equ	0xFDD
  2667                           fsr2h	equ	0xFDA
  2668                           fsr2l	equ	0xFD9
  2669                           status	equ	0xFD8
  2670                           
  2671 ;; *************** function _isdigit *****************
  2672 ;; Defined at:
  2673 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;  c               1    wreg     unsigned char 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  c               1    2[COMRAM] unsigned char 
  2678 ;; Return value:  Size  Location     Type
  2679 ;;		None               void
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;Total ram usage:        3 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_printf
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text4
  2701  002A86                     __ptext4:
  2702                           	opt stack 0
  2703  002A86                     _isdigit:
  2704                           	opt stack 29
  2705                           
  2706                           ;incstack = 0
  2707                           ;isdigit@c stored from wreg
  2708  002A86  6E03               	movwf	isdigit@c,c
  2709  002A88  0E00               	movlw	0
  2710  002A8A  6E02               	movwf	_isdigit$680,c
  2711  002A8C  0E3A               	movlw	58
  2712  002A8E  6003               	cpfslt	isdigit@c,c
  2713  002A90  D006               	goto	l2035
  2714  002A92  0E2F               	movlw	47
  2715  002A94  6403               	cpfsgt	isdigit@c,c
  2716  002A96  D003               	goto	l2035
  2717  002A98  0E01               	movlw	1
  2718  002A9A  6E02               	movwf	_isdigit$680,c
  2719  002A9C  D000               	goto	l2035
  2720  002A9E                     l2035:
  2721  002A9E  C002  F001         	movff	_isdigit$680,??_isdigit
  2722  002AA2  3001               	rrcf	??_isdigit,w,c
  2723  002AA4  D000               	goto	l638
  2724  002AA6                     l638:
  2725  002AA6  0012               	return		;funcret
  2726  002AA8                     __end_of_isdigit:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           wreg	equ	0xFE8
  2735                           postinc2	equ	0xFDE
  2736                           postdec2	equ	0xFDD
  2737                           fsr2h	equ	0xFDA
  2738                           fsr2l	equ	0xFD9
  2739                           status	equ	0xFD8
  2740                           
  2741 ;; *************** function _fround *****************
  2742 ;; Defined at:
  2743 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  prec            1    wreg     unsigned char 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  prec            1   44[COMRAM] unsigned char 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  3   35[COMRAM] unsigned char 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:       10 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    2
  2764 ;; This function calls:
  2765 ;;		___awdiv
  2766 ;;		___awmod
  2767 ;;		___ftmul
  2768 ;;		___wmul
  2769 ;; This function is called by:
  2770 ;;		_printf
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text5
  2775  001D6E                     __ptext5:
  2776                           	opt stack 0
  2777  001D6E                     _fround:
  2778                           	opt stack 27
  2779                           
  2780                           ;incstack = 0
  2781                           ;fround@prec stored from wreg
  2782  001D6E  6E2D               	movwf	fround@prec,c
  2783                           
  2784                           ;doprnt.c: 413: if(prec>=110)
  2785  001D70  0E6D               	movlw	109
  2786  001D72  642D               	cpfsgt	fround@prec,c
  2787  001D74  D09B               	goto	l1977
  2788                           
  2789                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2790  001D76  0E00               	movlw	0
  2791  001D78  6E12               	movwf	___wmul@multiplicand+1,c
  2792  001D7A  0E03               	movlw	3
  2793  001D7C  6E11               	movwf	___wmul@multiplicand,c
  2794  001D7E  0E00               	movlw	0
  2795  001D80  6E0A               	movwf	___awdiv@divisor+1,c
  2796  001D82  0E0A               	movlw	10
  2797  001D84  6E09               	movwf	___awdiv@divisor,c
  2798  001D86  0E00               	movlw	0
  2799  001D88  6E04               	movwf	___awmod@divisor+1,c
  2800  001D8A  0E64               	movlw	100
  2801  001D8C  6E03               	movwf	___awmod@divisor,c
  2802  001D8E  C02D  F001         	movff	fround@prec,___awmod@dividend
  2803  001D92  6A02               	clrf	___awmod@dividend+1,c
  2804  001D94  ECF6  F013         	call	___awmod	;wreg free
  2805  001D98  C001  F007         	movff	?___awmod,___awdiv@dividend
  2806  001D9C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2807  001DA0  EC1A  F013         	call	___awdiv	;wreg free
  2808  001DA4  0E09               	movlw	9
  2809  001DA6  2407               	addwf	?___awdiv,w,c
  2810  001DA8  6E0F               	movwf	___wmul@multiplier,c
  2811  001DAA  0E00               	movlw	0
  2812  001DAC  2008               	addwfc	?___awdiv+1,w,c
  2813  001DAE  6E10               	movwf	___wmul@multiplier+1,c
  2814  001DB0  EC1D  F015         	call	___wmul	;wreg free
  2815  001DB4  0E29               	movlw	low __npowers_
  2816  001DB6  240F               	addwf	?___wmul,w,c
  2817  001DB8  6EF6               	movwf	tblptrl,c
  2818  001DBA  0E10               	movlw	high __npowers_
  2819  001DBC  2010               	addwfc	?___wmul+1,w,c
  2820  001DBE  6EF7               	movwf	tblptrh,c
  2821  001DC0                     	if	0	;There are less than 3 active tblptr bytes
  2822  001DC0                     	endif
  2823  001DC0  0009               	tblrd		*+
  2824  001DC2  CFF5 F018          	movff	tablat,___ftmul@f2
  2825  001DC6  0009               	tblrd		*+
  2826  001DC8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2827  001DCC  000A               	tblrd		*-
  2828  001DCE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2829  001DD2  0E00               	movlw	0
  2830  001DD4  6E0A               	movwf	___awdiv@divisor+1,c
  2831  001DD6  0E64               	movlw	100
  2832  001DD8  6E09               	movwf	___awdiv@divisor,c
  2833  001DDA  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2834  001DDE  6A08               	clrf	___awdiv@dividend+1,c
  2835  001DE0  EC1A  F013         	call	___awdiv	;wreg free
  2836  001DE4  0E12               	movlw	18
  2837  001DE6  2407               	addwf	?___awdiv,w,c
  2838  001DE8  6E0F               	movwf	___wmul@multiplier,c
  2839  001DEA  0E00               	movlw	0
  2840  001DEC  2008               	addwfc	?___awdiv+1,w,c
  2841  001DEE  6E10               	movwf	___wmul@multiplier+1,c
  2842  001DF0  0E00               	movlw	0
  2843  001DF2  6E12               	movwf	___wmul@multiplicand+1,c
  2844  001DF4  0E03               	movlw	3
  2845  001DF6  6E11               	movwf	___wmul@multiplicand,c
  2846  001DF8  EC1D  F015         	call	___wmul	;wreg free
  2847  001DFC  0E29               	movlw	low __npowers_
  2848  001DFE  240F               	addwf	?___wmul,w,c
  2849  001E00  6EF6               	movwf	tblptrl,c
  2850  001E02  0E10               	movlw	high __npowers_
  2851  001E04  2010               	addwfc	?___wmul+1,w,c
  2852  001E06  6EF7               	movwf	tblptrh,c
  2853  001E08                     	if	0	;There are less than 3 active tblptr bytes
  2854  001E08                     	endif
  2855  001E08  0009               	tblrd		*+
  2856  001E0A  CFF5 F015          	movff	tablat,___ftmul@f1
  2857  001E0E  0009               	tblrd		*+
  2858  001E10  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2859  001E14  000A               	tblrd		*-
  2860  001E16  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2861  001E1A  ECC8  F011         	call	___ftmul	;wreg free
  2862  001E1E  C015  F02A         	movff	?___ftmul,_fround$908
  2863  001E22  C016  F02B         	movff	?___ftmul+1,_fround$908+1
  2864  001E26  C017  F02C         	movff	?___ftmul+2,_fround$908+2
  2865                           
  2866                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2867  001E2A  0E00               	movlw	0
  2868  001E2C  6E12               	movwf	___wmul@multiplicand+1,c
  2869  001E2E  0E03               	movlw	3
  2870  001E30  6E11               	movwf	___wmul@multiplicand,c
  2871  001E32  0E00               	movlw	0
  2872  001E34  6E04               	movwf	___awmod@divisor+1,c
  2873  001E36  0E0A               	movlw	10
  2874  001E38  6E03               	movwf	___awmod@divisor,c
  2875  001E3A  C02D  F001         	movff	fround@prec,___awmod@dividend
  2876  001E3E  6A02               	clrf	___awmod@dividend+1,c
  2877  001E40  ECF6  F013         	call	___awmod	;wreg free
  2878  001E44  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2879  001E48  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2880  001E4C  EC1D  F015         	call	___wmul	;wreg free
  2881  001E50  0E29               	movlw	low __npowers_
  2882  001E52  240F               	addwf	?___wmul,w,c
  2883  001E54  6EF6               	movwf	tblptrl,c
  2884  001E56  0E10               	movlw	high __npowers_
  2885  001E58  2010               	addwfc	?___wmul+1,w,c
  2886  001E5A  6EF7               	movwf	tblptrh,c
  2887  001E5C                     	if	0	;There are less than 3 active tblptr bytes
  2888  001E5C                     	endif
  2889  001E5C  0009               	tblrd		*+
  2890  001E5E  CFF5 F018          	movff	tablat,___ftmul@f2
  2891  001E62  0009               	tblrd		*+
  2892  001E64  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2893  001E68  000A               	tblrd		*-
  2894  001E6A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2895  001E6E  C02A  F015         	movff	_fround$908,___ftmul@f1
  2896  001E72  C02B  F016         	movff	_fround$908+1,___ftmul@f1+1
  2897  001E76  C02C  F017         	movff	_fround$908+2,___ftmul@f1+2
  2898  001E7A  ECC8  F011         	call	___ftmul	;wreg free
  2899  001E7E  C015  F027         	movff	?___ftmul,_fround$909
  2900  001E82  C016  F028         	movff	?___ftmul+1,_fround$909+1
  2901  001E86  C017  F029         	movff	?___ftmul+2,_fround$909+2
  2902                           
  2903                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2904  001E8A  C027  F015         	movff	_fround$909,___ftmul@f1
  2905  001E8E  C028  F016         	movff	_fround$909+1,___ftmul@f1+1
  2906  001E92  C029  F017         	movff	_fround$909+2,___ftmul@f1+2
  2907  001E96  0E00               	movlw	0
  2908  001E98  6E18               	movwf	___ftmul@f2,c
  2909  001E9A  0E00               	movlw	0
  2910  001E9C  6E19               	movwf	___ftmul@f2+1,c
  2911  001E9E  0E3F               	movlw	63
  2912  001EA0  6E1A               	movwf	___ftmul@f2+2,c
  2913  001EA2  ECC8  F011         	call	___ftmul	;wreg free
  2914  001EA6  D07D               	goto	L7
  2915  001EA8  D083               	goto	l47
  2916  001EAA  D062               	goto	l1985
  2917  001EAC                     l1977:
  2918                           
  2919                           ;doprnt.c: 415: else if(prec > 10)
  2920  001EAC  0E0A               	movlw	10
  2921  001EAE  642D               	cpfsgt	fround@prec,c
  2922  001EB0  D05F               	goto	l1985
  2923                           
  2924                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2925  001EB2  0E00               	movlw	0
  2926  001EB4  6E12               	movwf	___wmul@multiplicand+1,c
  2927  001EB6  0E03               	movlw	3
  2928  001EB8  6E11               	movwf	___wmul@multiplicand,c
  2929  001EBA  0E00               	movlw	0
  2930  001EBC  6E04               	movwf	___awmod@divisor+1,c
  2931  001EBE  0E0A               	movlw	10
  2932  001EC0  6E03               	movwf	___awmod@divisor,c
  2933  001EC2  C02D  F001         	movff	fround@prec,___awmod@dividend
  2934  001EC6  6A02               	clrf	___awmod@dividend+1,c
  2935  001EC8  ECF6  F013         	call	___awmod	;wreg free
  2936  001ECC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2937  001ED0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2938  001ED4  EC1D  F015         	call	___wmul	;wreg free
  2939  001ED8  0E29               	movlw	low __npowers_
  2940  001EDA  240F               	addwf	?___wmul,w,c
  2941  001EDC  6EF6               	movwf	tblptrl,c
  2942  001EDE  0E10               	movlw	high __npowers_
  2943  001EE0  2010               	addwfc	?___wmul+1,w,c
  2944  001EE2  6EF7               	movwf	tblptrh,c
  2945  001EE4                     	if	0	;There are less than 3 active tblptr bytes
  2946  001EE4                     	endif
  2947  001EE4  0009               	tblrd		*+
  2948  001EE6  CFF5 F018          	movff	tablat,___ftmul@f2
  2949  001EEA  0009               	tblrd		*+
  2950  001EEC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2951  001EF0  000A               	tblrd		*-
  2952  001EF2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2953  001EF6  0E00               	movlw	0
  2954  001EF8  6E0A               	movwf	___awdiv@divisor+1,c
  2955  001EFA  0E0A               	movlw	10
  2956  001EFC  6E09               	movwf	___awdiv@divisor,c
  2957  001EFE  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2958  001F02  6A08               	clrf	___awdiv@dividend+1,c
  2959  001F04  EC1A  F013         	call	___awdiv	;wreg free
  2960  001F08  0E09               	movlw	9
  2961  001F0A  2407               	addwf	?___awdiv,w,c
  2962  001F0C  6E0F               	movwf	___wmul@multiplier,c
  2963  001F0E  0E00               	movlw	0
  2964  001F10  2008               	addwfc	?___awdiv+1,w,c
  2965  001F12  6E10               	movwf	___wmul@multiplier+1,c
  2966  001F14  0E00               	movlw	0
  2967  001F16  6E12               	movwf	___wmul@multiplicand+1,c
  2968  001F18  0E03               	movlw	3
  2969  001F1A  6E11               	movwf	___wmul@multiplicand,c
  2970  001F1C  EC1D  F015         	call	___wmul	;wreg free
  2971  001F20  0E29               	movlw	low __npowers_
  2972  001F22  240F               	addwf	?___wmul,w,c
  2973  001F24  6EF6               	movwf	tblptrl,c
  2974  001F26  0E10               	movlw	high __npowers_
  2975  001F28  2010               	addwfc	?___wmul+1,w,c
  2976  001F2A  6EF7               	movwf	tblptrh,c
  2977  001F2C                     	if	0	;There are less than 3 active tblptr bytes
  2978  001F2C                     	endif
  2979  001F2C  0009               	tblrd		*+
  2980  001F2E  CFF5 F015          	movff	tablat,___ftmul@f1
  2981  001F32  0009               	tblrd		*+
  2982  001F34  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2983  001F38  000A               	tblrd		*-
  2984  001F3A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2985  001F3E  ECC8  F011         	call	___ftmul	;wreg free
  2986  001F42  C015  F02A         	movff	?___ftmul,_fround$908
  2987  001F46  C016  F02B         	movff	?___ftmul+1,_fround$908+1
  2988  001F4A  C017  F02C         	movff	?___ftmul+2,_fround$908+2
  2989                           
  2990                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2991  001F4E  C02A  F015         	movff	_fround$908,___ftmul@f1
  2992  001F52  C02B  F016         	movff	_fround$908+1,___ftmul@f1+1
  2993  001F56  C02C  F017         	movff	_fround$908+2,___ftmul@f1+2
  2994  001F5A  0E00               	movlw	0
  2995  001F5C  6E18               	movwf	___ftmul@f2,c
  2996  001F5E  0E00               	movlw	0
  2997  001F60  6E19               	movwf	___ftmul@f2+1,c
  2998  001F62  0E3F               	movlw	63
  2999  001F64  6E1A               	movwf	___ftmul@f2+2,c
  3000  001F66  ECC8  F011         	call	___ftmul	;wreg free
  3001  001F6A  D01B               	goto	L7
  3002  001F6C  D021               	goto	l47
  3003  001F6E  D000               	goto	l1985
  3004  001F70                     l1985:
  3005                           
  3006                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3007  001F70  502D               	movf	fround@prec,w,c
  3008  001F72  0D03               	mullw	3
  3009  001F74  0E29               	movlw	low __npowers_
  3010  001F76  24F3               	addwf	prodl,w,c
  3011  001F78  6EF6               	movwf	tblptrl,c
  3012  001F7A  0E10               	movlw	high __npowers_
  3013  001F7C  20F4               	addwfc	prodh,w,c
  3014  001F7E  6EF7               	movwf	tblptrh,c
  3015  001F80                     	if	0	;There are less than 3 active tblptr bytes
  3016  001F80                     	endif
  3017  001F80  0009               	tblrd		*+
  3018  001F82  CFF5 F015          	movff	tablat,___ftmul@f1
  3019  001F86  0009               	tblrd		*+
  3020  001F88  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3021  001F8C  000A               	tblrd		*-
  3022  001F8E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3023  001F92  0E00               	movlw	0
  3024  001F94  6E18               	movwf	___ftmul@f2,c
  3025  001F96  0E00               	movlw	0
  3026  001F98  6E19               	movwf	___ftmul@f2+1,c
  3027  001F9A  0E3F               	movlw	63
  3028  001F9C  6E1A               	movwf	___ftmul@f2+2,c
  3029  001F9E  ECC8  F011         	call	___ftmul	;wreg free
  3030  001FA2                     L7:
  3031  001FA2  C015  F024         	movff	?___ftmul,?_fround
  3032  001FA6  C016  F025         	movff	?___ftmul+1,?_fround+1
  3033  001FAA  C017  F026         	movff	?___ftmul+2,?_fround+2
  3034  001FAE  D000               	goto	l47
  3035  001FB0                     l47:
  3036  001FB0  0012               	return		;funcret
  3037  001FB2                     __end_of_fround:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           prodh	equ	0xFF4
  3044                           prodl	equ	0xFF3
  3045                           wreg	equ	0xFE8
  3046                           postinc2	equ	0xFDE
  3047                           postdec2	equ	0xFDD
  3048                           fsr2h	equ	0xFDA
  3049                           fsr2l	equ	0xFD9
  3050                           status	equ	0xFD8
  3051                           
  3052 ;; *************** function ___wmul *****************
  3053 ;; Defined at:
  3054 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  multiplier      2   14[COMRAM] unsigned int 
  3057 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  product         2   18[COMRAM] unsigned int 
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  2   14[COMRAM] unsigned int 
  3062 ;; Registers used:
  3063 ;;		wreg, status,2, status,0, prodl, prodh
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3069 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;Total ram usage:        6 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_fround
  3079 ;;		_scale
  3080 ;;		_printf
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text6
  3085  002A3A                     __ptext6:
  3086                           	opt stack 0
  3087  002A3A                     ___wmul:
  3088                           	opt stack 28
  3089                           
  3090                           ;incstack = 0
  3091  002A3A  500F               	movf	___wmul@multiplier,w,c
  3092  002A3C  0211               	mulwf	___wmul@multiplicand,c
  3093  002A3E  CFF3 F013          	movff	prodl,___wmul@product
  3094  002A42  CFF4 F014          	movff	prodh,___wmul@product+1
  3095  002A46  500F               	movf	___wmul@multiplier,w,c
  3096  002A48  0212               	mulwf	___wmul@multiplicand+1,c
  3097  002A4A  50F3               	movf	prodl,w,c
  3098  002A4C  2614               	addwf	___wmul@product+1,f,c
  3099  002A4E  5010               	movf	___wmul@multiplier+1,w,c
  3100  002A50  0211               	mulwf	___wmul@multiplicand,c
  3101  002A52  50F3               	movf	prodl,w,c
  3102  002A54  2614               	addwf	___wmul@product+1,f,c
  3103  002A56  C013  F00F         	movff	___wmul@product,?___wmul
  3104  002A5A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3105  002A5E  D000               	goto	l173
  3106  002A60                     l173:
  3107  002A60  0012               	return		;funcret
  3108  002A62                     __end_of___wmul:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           prodh	equ	0xFF4
  3115                           prodl	equ	0xFF3
  3116                           wreg	equ	0xFE8
  3117                           postinc2	equ	0xFDE
  3118                           postdec2	equ	0xFDD
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function ___ftmul *****************
  3124 ;; Defined at:
  3125 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  f1              3   20[COMRAM] float 
  3128 ;;  f2              3   23[COMRAM] float 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3131 ;;  sign            1   34[COMRAM] unsigned char 
  3132 ;;  cntr            1   33[COMRAM] unsigned char 
  3133 ;;  exp             1   29[COMRAM] unsigned char 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  3   20[COMRAM] float 
  3136 ;; Registers used:
  3137 ;;		wreg, status,2, status,0, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3143 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;Total ram usage:       15 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    1
  3150 ;; This function calls:
  3151 ;;		___ftpack
  3152 ;; This function is called by:
  3153 ;;		_fround
  3154 ;;		_scale
  3155 ;;		_printf
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text7
  3160  002390                     __ptext7:
  3161                           	opt stack 0
  3162  002390                     ___ftmul:
  3163                           	opt stack 27
  3164                           
  3165                           ;incstack = 0
  3166  002390  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3167  002394  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3168  002396  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3169  002398  3416               	rlcf	___ftmul@f1+1,w,c
  3170  00239A  361B               	rlcf	??___ftmul& (0+255),f,c
  3171  00239C  E301               	bnc	u1781
  3172  00239E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3173  0023A0                     u1781:
  3174  0023A0  501B               	movf	??___ftmul,w,c
  3175  0023A2  6E1E               	movwf	___ftmul@exp,c
  3176  0023A4  501E               	movf	___ftmul@exp,w,c
  3177  0023A6  A4D8               	btfss	status,2,c
  3178  0023A8  D002               	goto	l1791
  3179  0023AA  D00E               	goto	l1793
  3180  0023AC  D06C               	goto	l602
  3181  0023AE                     l1791:
  3182  0023AE  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3183  0023B2  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3184  0023B4  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3185  0023B6  3419               	rlcf	___ftmul@f2+1,w,c
  3186  0023B8  361B               	rlcf	??___ftmul& (0+255),f,c
  3187  0023BA  E301               	bnc	u1801
  3188  0023BC  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3189  0023BE                     u1801:
  3190  0023BE  501B               	movf	??___ftmul,w,c
  3191  0023C0  6E23               	movwf	___ftmul@sign,c
  3192  0023C2  5023               	movf	___ftmul@sign,w,c
  3193  0023C4  A4D8               	btfss	status,2,c
  3194  0023C6  D007               	goto	l1797
  3195  0023C8                     l1793:
  3196  0023C8  0E00               	movlw	0
  3197  0023CA  6E15               	movwf	?___ftmul,c
  3198  0023CC  0E00               	movlw	0
  3199  0023CE  6E16               	movwf	?___ftmul+1,c
  3200  0023D0  0E00               	movlw	0
  3201  0023D2  6E17               	movwf	?___ftmul+2,c
  3202  0023D4  D058               	goto	l602
  3203  0023D6                     l1797:
  3204  0023D6  5023               	movf	___ftmul@sign,w,c
  3205  0023D8  0F7B               	addlw	123
  3206  0023DA  261E               	addwf	___ftmul@exp,f,c
  3207  0023DC  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3208  0023E0  501A               	movf	___ftmul@f2+2,w,c
  3209  0023E2  1A23               	xorwf	___ftmul@sign,f,c
  3210  0023E4  0E80               	movlw	128
  3211  0023E6  1623               	andwf	___ftmul@sign,f,c
  3212  0023E8  8E16               	bsf	___ftmul@f1+1,7,c
  3213  0023EA  8E19               	bsf	___ftmul@f2+1,7,c
  3214  0023EC  0EFF               	movlw	255
  3215  0023EE  1618               	andwf	___ftmul@f2,f,c
  3216  0023F0  0EFF               	movlw	255
  3217  0023F2  1619               	andwf	___ftmul@f2+1,f,c
  3218  0023F4  0E00               	movlw	0
  3219  0023F6  161A               	andwf	___ftmul@f2+2,f,c
  3220  0023F8  0E00               	movlw	0
  3221  0023FA  6E1F               	movwf	___ftmul@f3_as_product,c
  3222  0023FC  0E00               	movlw	0
  3223  0023FE  6E20               	movwf	___ftmul@f3_as_product+1,c
  3224  002400  0E00               	movlw	0
  3225  002402  6E21               	movwf	___ftmul@f3_as_product+2,c
  3226  002404  0E07               	movlw	7
  3227  002406  6E22               	movwf	___ftmul@cntr,c
  3228  002408  D000               	goto	l1811
  3229  00240A                     l1811:
  3230  00240A  A015               	btfss	___ftmul@f1,0,c
  3231  00240C  D007               	goto	l1815
  3232  00240E  5018               	movf	___ftmul@f2,w,c
  3233  002410  261F               	addwf	___ftmul@f3_as_product,f,c
  3234  002412  5019               	movf	___ftmul@f2+1,w,c
  3235  002414  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3236  002416  501A               	movf	___ftmul@f2+2,w,c
  3237  002418  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3238  00241A  D000               	goto	l1815
  3239  00241C                     l1815:
  3240  00241C  90D8               	bcf	status,0,c
  3241  00241E  3217               	rrcf	___ftmul@f1+2,f,c
  3242  002420  3216               	rrcf	___ftmul@f1+1,f,c
  3243  002422  3215               	rrcf	___ftmul@f1,f,c
  3244  002424  90D8               	bcf	status,0,c
  3245  002426  3618               	rlcf	___ftmul@f2,f,c
  3246  002428  3619               	rlcf	___ftmul@f2+1,f,c
  3247  00242A  361A               	rlcf	___ftmul@f2+2,f,c
  3248  00242C  2E22               	decfsz	___ftmul@cntr,f,c
  3249  00242E  D7ED               	goto	l1811
  3250  002430  D000               	goto	l1819
  3251  002432                     l1819:
  3252  002432  0E09               	movlw	9
  3253  002434  6E22               	movwf	___ftmul@cntr,c
  3254  002436  D000               	goto	l1821
  3255  002438                     l1821:
  3256  002438  A015               	btfss	___ftmul@f1,0,c
  3257  00243A  D007               	goto	l1825
  3258  00243C  5018               	movf	___ftmul@f2,w,c
  3259  00243E  261F               	addwf	___ftmul@f3_as_product,f,c
  3260  002440  5019               	movf	___ftmul@f2+1,w,c
  3261  002442  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3262  002444  501A               	movf	___ftmul@f2+2,w,c
  3263  002446  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3264  002448  D000               	goto	l1825
  3265  00244A                     l1825:
  3266  00244A  90D8               	bcf	status,0,c
  3267  00244C  3217               	rrcf	___ftmul@f1+2,f,c
  3268  00244E  3216               	rrcf	___ftmul@f1+1,f,c
  3269  002450  3215               	rrcf	___ftmul@f1,f,c
  3270  002452  90D8               	bcf	status,0,c
  3271  002454  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3272  002456  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3273  002458  321F               	rrcf	___ftmul@f3_as_product,f,c
  3274  00245A  2E22               	decfsz	___ftmul@cntr,f,c
  3275  00245C  D7ED               	goto	l1821
  3276  00245E  D000               	goto	l1829
  3277  002460                     l1829:
  3278  002460  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3279  002464  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3280  002468  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3281  00246C  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3282  002470  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3283  002474  ECB7  F012         	call	___ftpack	;wreg free
  3284  002478  C001  F015         	movff	?___ftpack,?___ftmul
  3285  00247C  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3286  002480  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3287  002484  D000               	goto	l602
  3288  002486                     l602:
  3289  002486  0012               	return		;funcret
  3290  002488                     __end_of___ftmul:
  3291                           	opt stack 0
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           prodh	equ	0xFF4
  3297                           prodl	equ	0xFF3
  3298                           wreg	equ	0xFE8
  3299                           postinc2	equ	0xFDE
  3300                           postdec2	equ	0xFDD
  3301                           fsr2h	equ	0xFDA
  3302                           fsr2l	equ	0xFD9
  3303                           status	equ	0xFD8
  3304                           
  3305 ;; *************** function ___awmod *****************
  3306 ;; Defined at:
  3307 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  dividend        2    0[COMRAM] int 
  3310 ;;  divisor         2    2[COMRAM] int 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  sign            1    5[COMRAM] unsigned char 
  3313 ;;  counter         1    4[COMRAM] unsigned char 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  2    0[COMRAM] int 
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3323 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;Total ram usage:        6 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_fround
  3333 ;;		_scale
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text8
  3338  0027EC                     __ptext8:
  3339                           	opt stack 0
  3340  0027EC                     ___awmod:
  3341                           	opt stack 28
  3342                           
  3343                           ;incstack = 0
  3344  0027EC  0E00               	movlw	0
  3345  0027EE  6E06               	movwf	___awmod@sign,c
  3346  0027F0  AE02               	btfss	___awmod@dividend+1,7,c
  3347  0027F2  D007               	goto	l1885
  3348  0027F4  6C01               	negf	___awmod@dividend,c
  3349  0027F6  1E02               	comf	___awmod@dividend+1,f,c
  3350  0027F8  B0D8               	btfsc	status,0,c
  3351  0027FA  2A02               	incf	___awmod@dividend+1,f,c
  3352  0027FC  0E01               	movlw	1
  3353  0027FE  6E06               	movwf	___awmod@sign,c
  3354  002800  D000               	goto	l1885
  3355  002802                     l1885:
  3356  002802  AE04               	btfss	___awmod@divisor+1,7,c
  3357  002804  D005               	goto	l1889
  3358  002806  6C03               	negf	___awmod@divisor,c
  3359  002808  1E04               	comf	___awmod@divisor+1,f,c
  3360  00280A  B0D8               	btfsc	status,0,c
  3361  00280C  2A04               	incf	___awmod@divisor+1,f,c
  3362  00280E  D000               	goto	l1889
  3363  002810                     l1889:
  3364  002810  5003               	movf	___awmod@divisor,w,c
  3365  002812  1004               	iorwf	___awmod@divisor+1,w,c
  3366  002814  B4D8               	btfsc	status,2,c
  3367  002816  D01D               	goto	l1905
  3368  002818  0E01               	movlw	1
  3369  00281A  6E05               	movwf	___awmod@counter,c
  3370  00281C  D005               	goto	l1895
  3371  00281E                     l1893:
  3372  00281E  90D8               	bcf	status,0,c
  3373  002820  3603               	rlcf	___awmod@divisor,f,c
  3374  002822  3604               	rlcf	___awmod@divisor+1,f,c
  3375  002824  2A05               	incf	___awmod@counter,f,c
  3376  002826  D000               	goto	l1895
  3377  002828                     l1895:
  3378  002828  BE04               	btfsc	___awmod@divisor+1,7,c
  3379  00282A  D002               	goto	l1897
  3380  00282C  D7F8               	goto	l1893
  3381  00282E  D000               	goto	l1897
  3382  002830                     l1897:
  3383  002830  5003               	movf	___awmod@divisor,w,c
  3384  002832  5C01               	subwf	___awmod@dividend,w,c
  3385  002834  5004               	movf	___awmod@divisor+1,w,c
  3386  002836  5802               	subwfb	___awmod@dividend+1,w,c
  3387  002838  A0D8               	btfss	status,0,c
  3388  00283A  D005               	goto	l1901
  3389  00283C  5003               	movf	___awmod@divisor,w,c
  3390  00283E  5E01               	subwf	___awmod@dividend,f,c
  3391  002840  5004               	movf	___awmod@divisor+1,w,c
  3392  002842  5A02               	subwfb	___awmod@dividend+1,f,c
  3393  002844  D000               	goto	l1901
  3394  002846                     l1901:
  3395  002846  90D8               	bcf	status,0,c
  3396  002848  3204               	rrcf	___awmod@divisor+1,f,c
  3397  00284A  3203               	rrcf	___awmod@divisor,f,c
  3398  00284C  2E05               	decfsz	___awmod@counter,f,c
  3399  00284E  D7F0               	goto	l1897
  3400  002850  D000               	goto	l1905
  3401  002852                     l1905:
  3402  002852  5006               	movf	___awmod@sign,w,c
  3403  002854  B4D8               	btfsc	status,2,c
  3404  002856  D005               	goto	l1909
  3405  002858  6C01               	negf	___awmod@dividend,c
  3406  00285A  1E02               	comf	___awmod@dividend+1,f,c
  3407  00285C  B0D8               	btfsc	status,0,c
  3408  00285E  2A02               	incf	___awmod@dividend+1,f,c
  3409  002860  D000               	goto	l1909
  3410  002862                     l1909:
  3411  002862  C001  F001         	movff	___awmod@dividend,?___awmod
  3412  002866  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3413  00286A  D000               	goto	l379
  3414  00286C                     l379:
  3415  00286C  0012               	return		;funcret
  3416  00286E                     __end_of___awmod:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           wreg	equ	0xFE8
  3425                           postinc2	equ	0xFDE
  3426                           postdec2	equ	0xFDD
  3427                           fsr2h	equ	0xFDA
  3428                           fsr2l	equ	0xFD9
  3429                           status	equ	0xFD8
  3430                           
  3431 ;; *************** function ___awdiv *****************
  3432 ;; Defined at:
  3433 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  dividend        2    6[COMRAM] int 
  3436 ;;  divisor         2    8[COMRAM] int 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  quotient        2   12[COMRAM] int 
  3439 ;;  sign            1   11[COMRAM] unsigned char 
  3440 ;;  counter         1   10[COMRAM] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  2    6[COMRAM] int 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3450 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;Total ram usage:        8 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_fround
  3460 ;;		_scale
  3461 ;;		_printf
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           	psect	text9
  3466  002634                     __ptext9:
  3467                           	opt stack 0
  3468  002634                     ___awdiv:
  3469                           	opt stack 28
  3470                           
  3471                           ;incstack = 0
  3472  002634  0E00               	movlw	0
  3473  002636  6E0C               	movwf	___awdiv@sign,c
  3474  002638  AE0A               	btfss	___awdiv@divisor+1,7,c
  3475  00263A  D007               	goto	l1841
  3476  00263C  6C09               	negf	___awdiv@divisor,c
  3477  00263E  1E0A               	comf	___awdiv@divisor+1,f,c
  3478  002640  B0D8               	btfsc	status,0,c
  3479  002642  2A0A               	incf	___awdiv@divisor+1,f,c
  3480  002644  0E01               	movlw	1
  3481  002646  6E0C               	movwf	___awdiv@sign,c
  3482  002648  D000               	goto	l1841
  3483  00264A                     l1841:
  3484  00264A  AE08               	btfss	___awdiv@dividend+1,7,c
  3485  00264C  D007               	goto	l1847
  3486  00264E  6C07               	negf	___awdiv@dividend,c
  3487  002650  1E08               	comf	___awdiv@dividend+1,f,c
  3488  002652  B0D8               	btfsc	status,0,c
  3489  002654  2A08               	incf	___awdiv@dividend+1,f,c
  3490  002656  0E01               	movlw	1
  3491  002658  1A0C               	xorwf	___awdiv@sign,f,c
  3492  00265A  D000               	goto	l1847
  3493  00265C                     l1847:
  3494  00265C  0E00               	movlw	0
  3495  00265E  6E0E               	movwf	___awdiv@quotient+1,c
  3496  002660  0E00               	movlw	0
  3497  002662  6E0D               	movwf	___awdiv@quotient,c
  3498  002664  5009               	movf	___awdiv@divisor,w,c
  3499  002666  100A               	iorwf	___awdiv@divisor+1,w,c
  3500  002668  B4D8               	btfsc	status,2,c
  3501  00266A  D021               	goto	l1869
  3502  00266C  0E01               	movlw	1
  3503  00266E  6E0B               	movwf	___awdiv@counter,c
  3504  002670  D005               	goto	l1855
  3505  002672                     l1853:
  3506  002672  90D8               	bcf	status,0,c
  3507  002674  3609               	rlcf	___awdiv@divisor,f,c
  3508  002676  360A               	rlcf	___awdiv@divisor+1,f,c
  3509  002678  2A0B               	incf	___awdiv@counter,f,c
  3510  00267A  D000               	goto	l1855
  3511  00267C                     l1855:
  3512  00267C  BE0A               	btfsc	___awdiv@divisor+1,7,c
  3513  00267E  D002               	goto	l1857
  3514  002680  D7F8               	goto	l1853
  3515  002682  D000               	goto	l1857
  3516  002684                     l1857:
  3517  002684  90D8               	bcf	status,0,c
  3518  002686  360D               	rlcf	___awdiv@quotient,f,c
  3519  002688  360E               	rlcf	___awdiv@quotient+1,f,c
  3520  00268A  5009               	movf	___awdiv@divisor,w,c
  3521  00268C  5C07               	subwf	___awdiv@dividend,w,c
  3522  00268E  500A               	movf	___awdiv@divisor+1,w,c
  3523  002690  5808               	subwfb	___awdiv@dividend+1,w,c
  3524  002692  A0D8               	btfss	status,0,c
  3525  002694  D006               	goto	l1865
  3526  002696  5009               	movf	___awdiv@divisor,w,c
  3527  002698  5E07               	subwf	___awdiv@dividend,f,c
  3528  00269A  500A               	movf	___awdiv@divisor+1,w,c
  3529  00269C  5A08               	subwfb	___awdiv@dividend+1,f,c
  3530  00269E  800D               	bsf	___awdiv@quotient,0,c
  3531  0026A0  D000               	goto	l1865
  3532  0026A2                     l1865:
  3533  0026A2  90D8               	bcf	status,0,c
  3534  0026A4  320A               	rrcf	___awdiv@divisor+1,f,c
  3535  0026A6  3209               	rrcf	___awdiv@divisor,f,c
  3536  0026A8  2E0B               	decfsz	___awdiv@counter,f,c
  3537  0026AA  D7EC               	goto	l1857
  3538  0026AC  D000               	goto	l1869
  3539  0026AE                     l1869:
  3540  0026AE  500C               	movf	___awdiv@sign,w,c
  3541  0026B0  B4D8               	btfsc	status,2,c
  3542  0026B2  D005               	goto	l1873
  3543  0026B4  6C0D               	negf	___awdiv@quotient,c
  3544  0026B6  1E0E               	comf	___awdiv@quotient+1,f,c
  3545  0026B8  B0D8               	btfsc	status,0,c
  3546  0026BA  2A0E               	incf	___awdiv@quotient+1,f,c
  3547  0026BC  D000               	goto	l1873
  3548  0026BE                     l1873:
  3549  0026BE  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3550  0026C2  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3551  0026C6  D000               	goto	l366
  3552  0026C8                     l366:
  3553  0026C8  0012               	return		;funcret
  3554  0026CA                     __end_of___awdiv:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           wreg	equ	0xFE8
  3563                           postinc2	equ	0xFDE
  3564                           postdec2	equ	0xFDD
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function __tdiv_to_l_ *****************
  3570 ;; Defined at:
  3571 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  f1              3    0[COMRAM] float 
  3574 ;;  f2              3    3[COMRAM] float 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  quot            4    9[COMRAM] unsigned long 
  3577 ;;  exp1            1   14[COMRAM] unsigned char 
  3578 ;;  cntr            1   13[COMRAM] unsigned char 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  4    0[COMRAM] unsigned long 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3588 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;Total ram usage:       15 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_printf
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text10
  3602  002176                     __ptext10:
  3603                           	opt stack 0
  3604  002176                     __tdiv_to_l_:
  3605                           	opt stack 29
  3606                           
  3607                           ;incstack = 0
  3608  002176  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3609  00217A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3610  00217C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3611  00217E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3612  002180  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3613  002182  E301               	bnc	u2161
  3614  002184  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3615  002186                     u2161:
  3616  002186  5007               	movf	??__tdiv_to_l_,w,c
  3617  002188  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3618  00218A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3619  00218C  A4D8               	btfss	status,2,c
  3620  00218E  D002               	goto	l2045
  3621  002190  D05D               	goto	l2087
  3622  002192  D078               	goto	l578
  3623  002194                     l2045:
  3624  002194  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3625  002198  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3626  00219A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3627  00219C  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3628  00219E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3629  0021A0  E301               	bnc	u2181
  3630  0021A2  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3631  0021A4                     u2181:
  3632  0021A4  5007               	movf	??__tdiv_to_l_,w,c
  3633  0021A6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3634  0021A8  500E               	movf	__tdiv_to_l_@cntr,w,c
  3635  0021AA  A4D8               	btfss	status,2,c
  3636  0021AC  D002               	goto	l2051
  3637  0021AE  D04E               	goto	l2087
  3638  0021B0  D069               	goto	l578
  3639  0021B2                     l2051:
  3640  0021B2  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3641  0021B4  0EFF               	movlw	255
  3642  0021B6  1601               	andwf	__tdiv_to_l_@f1,f,c
  3643  0021B8  0EFF               	movlw	255
  3644  0021BA  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3645  0021BC  0E00               	movlw	0
  3646  0021BE  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3647  0021C0  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3648  0021C2  0EFF               	movlw	255
  3649  0021C4  1604               	andwf	__tdiv_to_l_@f2,f,c
  3650  0021C6  0EFF               	movlw	255
  3651  0021C8  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3652  0021CA  0E00               	movlw	0
  3653  0021CC  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3654  0021CE  0E00               	movlw	0
  3655  0021D0  6E0A               	movwf	__tdiv_to_l_@quot,c
  3656  0021D2  0E00               	movlw	0
  3657  0021D4  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3658  0021D6  0E00               	movlw	0
  3659  0021D8  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3660  0021DA  0E00               	movlw	0
  3661  0021DC  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3662  0021DE  0E7F               	movlw	127
  3663  0021E0  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3664  0021E2  500E               	movf	__tdiv_to_l_@cntr,w,c
  3665  0021E4  0F98               	addlw	152
  3666  0021E6  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3667  0021E8  0E18               	movlw	24
  3668  0021EA  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3669  0021EC                     l580:
  3670  0021EC  90D8               	bcf	status,0,c
  3671  0021EE  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3672  0021F0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3673  0021F2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3674  0021F4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3675  0021F6  5004               	movf	__tdiv_to_l_@f2,w,c
  3676  0021F8  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3677  0021FA  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3678  0021FC  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3679  0021FE  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3680  002200  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3681  002202  A0D8               	btfss	status,0,c
  3682  002204  D007               	goto	l581
  3683  002206  5004               	movf	__tdiv_to_l_@f2,w,c
  3684  002208  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3685  00220A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3686  00220C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3687  00220E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3688  002210  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3689  002212  800A               	bsf	__tdiv_to_l_@quot,0,c
  3690  002214                     l581:
  3691  002214  90D8               	bcf	status,0,c
  3692  002216  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3693  002218  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3694  00221A  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3695  00221C  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3696  00221E  D7E6               	goto	l580
  3697  002220  D000               	goto	l2073
  3698  002222                     l2073:
  3699  002222  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3700  002224  D010               	goto	l2085
  3701  002226  500F               	movf	__tdiv_to_l_@exp1,w,c
  3702  002228  0A80               	xorlw	128
  3703  00222A  0F97               	addlw	151
  3704  00222C  B0D8               	btfsc	status,0,c
  3705  00222E  D003               	goto	l2081
  3706  002230  D00D               	goto	l2087
  3707  002232  D028               	goto	l578
  3708  002234  D000               	goto	l2081
  3709  002236                     l2081:
  3710  002236  90D8               	bcf	status,0,c
  3711  002238  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3712  00223A  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3713  00223C  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3714  00223E  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3715  002240  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3716  002242  D7F9               	goto	l2081
  3717  002244  D017               	goto	l587
  3718  002246                     l2085:
  3719  002246  0E17               	movlw	23
  3720  002248  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3721  00224A  D011               	goto	l2093
  3722  00224C                     l2087:
  3723  00224C  0E00               	movlw	0
  3724  00224E  6E01               	movwf	?__tdiv_to_l_,c
  3725  002250  0E00               	movlw	0
  3726  002252  6E02               	movwf	?__tdiv_to_l_+1,c
  3727  002254  0E00               	movlw	0
  3728  002256  6E03               	movwf	?__tdiv_to_l_+2,c
  3729  002258  0E00               	movlw	0
  3730  00225A  6E04               	movwf	?__tdiv_to_l_+3,c
  3731  00225C  D013               	goto	l578
  3732  00225E  D007               	goto	l2093
  3733  002260                     l2091:
  3734  002260  90D8               	bcf	status,0,c
  3735  002262  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3736  002264  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3737  002266  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3738  002268  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3739  00226A  060F               	decf	__tdiv_to_l_@exp1,f,c
  3740  00226C  D000               	goto	l2093
  3741  00226E                     l2093:
  3742  00226E  500F               	movf	__tdiv_to_l_@exp1,w,c
  3743  002270  A4D8               	btfss	status,2,c
  3744  002272  D7F6               	goto	l2091
  3745  002274                     l587:
  3746  002274  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3747  002278  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3748  00227C  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3749  002280  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3750  002284                     l578:
  3751  002284  0012               	return		;funcret
  3752  002286                     __end_of__tdiv_to_l_:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           wreg	equ	0xFE8
  3761                           postinc2	equ	0xFDE
  3762                           postdec2	equ	0xFDD
  3763                           fsr2h	equ	0xFDA
  3764                           fsr2l	equ	0xFD9
  3765                           status	equ	0xFD8
  3766                           
  3767 ;; *************** function __div_to_l_ *****************
  3768 ;; Defined at:
  3769 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;  f1              3    0[COMRAM] unsigned long 
  3772 ;;  f2              3    3[COMRAM] unsigned long 
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;  quot            4    6[COMRAM] unsigned long 
  3775 ;;  exp1            1   11[COMRAM] unsigned char 
  3776 ;;  cntr            1   10[COMRAM] unsigned char 
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  4    0[COMRAM] unsigned long 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3786 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;Total ram usage:       12 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; This function calls:
  3793 ;;		Nothing
  3794 ;; This function is called by:
  3795 ;;		_printf
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text11
  3800  002286                     __ptext11:
  3801                           	opt stack 0
  3802  002286                     __div_to_l_:
  3803                           	opt stack 29
  3804                           
  3805                           ;incstack = 0
  3806  002286  3403               	rlcf	__div_to_l_@f1+2,w,c
  3807  002288  3404               	rlcf	__div_to_l_@f1+3,w,c
  3808  00228A  6E0C               	movwf	__div_to_l_@exp1,c
  3809  00228C  500C               	movf	__div_to_l_@exp1,w,c
  3810  00228E  A4D8               	btfss	status,2,c
  3811  002290  D002               	goto	l2101
  3812  002292  D061               	goto	l2147
  3813  002294  D07C               	goto	l457
  3814  002296                     l2101:
  3815  002296  3406               	rlcf	__div_to_l_@f2+2,w,c
  3816  002298  3407               	rlcf	__div_to_l_@f2+3,w,c
  3817  00229A  6E0B               	movwf	__div_to_l_@cntr,c
  3818  00229C  500B               	movf	__div_to_l_@cntr,w,c
  3819  00229E  A4D8               	btfss	status,2,c
  3820  0022A0  D002               	goto	l2107
  3821  0022A2  D059               	goto	l2147
  3822  0022A4  D074               	goto	l457
  3823  0022A6                     l2107:
  3824  0022A6  8E03               	bsf	__div_to_l_@f1+2,7,c
  3825  0022A8  0EFF               	movlw	255
  3826  0022AA  1601               	andwf	__div_to_l_@f1,f,c
  3827  0022AC  0EFF               	movlw	255
  3828  0022AE  1602               	andwf	__div_to_l_@f1+1,f,c
  3829  0022B0  0EFF               	movlw	255
  3830  0022B2  1603               	andwf	__div_to_l_@f1+2,f,c
  3831  0022B4  0E00               	movlw	0
  3832  0022B6  1604               	andwf	__div_to_l_@f1+3,f,c
  3833  0022B8  8E06               	bsf	__div_to_l_@f2+2,7,c
  3834  0022BA  0EFF               	movlw	255
  3835  0022BC  1604               	andwf	__div_to_l_@f2,f,c
  3836  0022BE  0EFF               	movlw	255
  3837  0022C0  1605               	andwf	__div_to_l_@f2+1,f,c
  3838  0022C2  0EFF               	movlw	255
  3839  0022C4  1606               	andwf	__div_to_l_@f2+2,f,c
  3840  0022C6  0E00               	movlw	0
  3841  0022C8  1607               	andwf	__div_to_l_@f2+3,f,c
  3842  0022CA  0E00               	movlw	0
  3843  0022CC  6E07               	movwf	__div_to_l_@quot,c
  3844  0022CE  0E00               	movlw	0
  3845  0022D0  6E08               	movwf	__div_to_l_@quot+1,c
  3846  0022D2  0E00               	movlw	0
  3847  0022D4  6E09               	movwf	__div_to_l_@quot+2,c
  3848  0022D6  0E00               	movlw	0
  3849  0022D8  6E0A               	movwf	__div_to_l_@quot+3,c
  3850  0022DA  0E7F               	movlw	127
  3851  0022DC  5E0C               	subwf	__div_to_l_@exp1,f,c
  3852  0022DE  500B               	movf	__div_to_l_@cntr,w,c
  3853  0022E0  0FA0               	addlw	160
  3854  0022E2  5E0C               	subwf	__div_to_l_@exp1,f,c
  3855  0022E4  0E20               	movlw	32
  3856  0022E6  6E0B               	movwf	__div_to_l_@cntr,c
  3857  0022E8  D000               	goto	l2121
  3858  0022EA                     l2121:
  3859  0022EA  90D8               	bcf	status,0,c
  3860  0022EC  3607               	rlcf	__div_to_l_@quot,f,c
  3861  0022EE  3608               	rlcf	__div_to_l_@quot+1,f,c
  3862  0022F0  3609               	rlcf	__div_to_l_@quot+2,f,c
  3863  0022F2  360A               	rlcf	__div_to_l_@quot+3,f,c
  3864  0022F4  5004               	movf	__div_to_l_@f2,w,c
  3865  0022F6  5C01               	subwf	__div_to_l_@f1,w,c
  3866  0022F8  5005               	movf	__div_to_l_@f2+1,w,c
  3867  0022FA  5802               	subwfb	__div_to_l_@f1+1,w,c
  3868  0022FC  5006               	movf	__div_to_l_@f2+2,w,c
  3869  0022FE  5803               	subwfb	__div_to_l_@f1+2,w,c
  3870  002300  5007               	movf	__div_to_l_@f2+3,w,c
  3871  002302  5804               	subwfb	__div_to_l_@f1+3,w,c
  3872  002304  A0D8               	btfss	status,0,c
  3873  002306  D00A               	goto	l2129
  3874  002308  5004               	movf	__div_to_l_@f2,w,c
  3875  00230A  5E01               	subwf	__div_to_l_@f1,f,c
  3876  00230C  5005               	movf	__div_to_l_@f2+1,w,c
  3877  00230E  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3878  002310  5006               	movf	__div_to_l_@f2+2,w,c
  3879  002312  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3880  002314  5007               	movf	__div_to_l_@f2+3,w,c
  3881  002316  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3882  002318  8007               	bsf	__div_to_l_@quot,0,c
  3883  00231A  D000               	goto	l2129
  3884  00231C                     l2129:
  3885  00231C  90D8               	bcf	status,0,c
  3886  00231E  3601               	rlcf	__div_to_l_@f1,f,c
  3887  002320  3602               	rlcf	__div_to_l_@f1+1,f,c
  3888  002322  3603               	rlcf	__div_to_l_@f1+2,f,c
  3889  002324  3604               	rlcf	__div_to_l_@f1+3,f,c
  3890  002326  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3891  002328  D7E0               	goto	l2121
  3892  00232A  D000               	goto	l2133
  3893  00232C                     l2133:
  3894  00232C  AE0C               	btfss	__div_to_l_@exp1,7,c
  3895  00232E  D010               	goto	l2145
  3896  002330  500C               	movf	__div_to_l_@exp1,w,c
  3897  002332  0A80               	xorlw	128
  3898  002334  0F9F               	addlw	159
  3899  002336  B0D8               	btfsc	status,0,c
  3900  002338  D003               	goto	l2141
  3901  00233A  D00D               	goto	l2147
  3902  00233C  D028               	goto	l457
  3903  00233E  D000               	goto	l2141
  3904  002340                     l2141:
  3905  002340  90D8               	bcf	status,0,c
  3906  002342  320A               	rrcf	__div_to_l_@quot+3,f,c
  3907  002344  3209               	rrcf	__div_to_l_@quot+2,f,c
  3908  002346  3208               	rrcf	__div_to_l_@quot+1,f,c
  3909  002348  3207               	rrcf	__div_to_l_@quot,f,c
  3910  00234A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3911  00234C  D7F9               	goto	l2141
  3912  00234E  D017               	goto	l466
  3913  002350                     l2145:
  3914  002350  0E1F               	movlw	31
  3915  002352  640C               	cpfsgt	__div_to_l_@exp1,c
  3916  002354  D011               	goto	l2153
  3917  002356                     l2147:
  3918  002356  0E00               	movlw	0
  3919  002358  6E01               	movwf	?__div_to_l_,c
  3920  00235A  0E00               	movlw	0
  3921  00235C  6E02               	movwf	?__div_to_l_+1,c
  3922  00235E  0E00               	movlw	0
  3923  002360  6E03               	movwf	?__div_to_l_+2,c
  3924  002362  0E00               	movlw	0
  3925  002364  6E04               	movwf	?__div_to_l_+3,c
  3926  002366  D013               	goto	l457
  3927  002368  D007               	goto	l2153
  3928  00236A                     l2151:
  3929  00236A  90D8               	bcf	status,0,c
  3930  00236C  3607               	rlcf	__div_to_l_@quot,f,c
  3931  00236E  3608               	rlcf	__div_to_l_@quot+1,f,c
  3932  002370  3609               	rlcf	__div_to_l_@quot+2,f,c
  3933  002372  360A               	rlcf	__div_to_l_@quot+3,f,c
  3934  002374  060C               	decf	__div_to_l_@exp1,f,c
  3935  002376  D000               	goto	l2153
  3936  002378                     l2153:
  3937  002378  500C               	movf	__div_to_l_@exp1,w,c
  3938  00237A  A4D8               	btfss	status,2,c
  3939  00237C  D7F6               	goto	l2151
  3940  00237E                     l466:
  3941  00237E  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3942  002382  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3943  002386  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3944  00238A  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3945  00238E                     l457:
  3946  00238E  0012               	return		;funcret
  3947  002390                     __end_of__div_to_l_:
  3948                           	opt stack 0
  3949                           tblptru	equ	0xFF8
  3950                           tblptrh	equ	0xFF7
  3951                           tblptrl	equ	0xFF6
  3952                           tablat	equ	0xFF5
  3953                           prodh	equ	0xFF4
  3954                           prodl	equ	0xFF3
  3955                           wreg	equ	0xFE8
  3956                           postinc2	equ	0xFDE
  3957                           postdec2	equ	0xFDD
  3958                           fsr2h	equ	0xFDA
  3959                           fsr2l	equ	0xFD9
  3960                           status	equ	0xFD8
  3961                           
  3962 ;; *************** function ___lltoft *****************
  3963 ;; Defined at:
  3964 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  c               4    8[COMRAM] unsigned long 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  exp             1   16[COMRAM] unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  3    8[COMRAM] float 
  3971 ;; Registers used:
  3972 ;;		wreg, status,2, status,0, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3978 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;Total ram usage:        9 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    1
  3985 ;; This function calls:
  3986 ;;		___ftpack
  3987 ;; This function is called by:
  3988 ;;		_printf
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text12
  3993  00294E                     __ptext12:
  3994                           	opt stack 0
  3995  00294E                     ___lltoft:
  3996                           	opt stack 28
  3997                           
  3998                           ;incstack = 0
  3999  00294E  0E8E               	movlw	142
  4000  002950  6E11               	movwf	___lltoft@exp,c
  4001  002952  D007               	goto	l2273
  4002  002954                     l2271:
  4003  002954  90D8               	bcf	status,0,c
  4004  002956  320C               	rrcf	___lltoft@c+3,f,c
  4005  002958  320B               	rrcf	___lltoft@c+2,f,c
  4006  00295A  320A               	rrcf	___lltoft@c+1,f,c
  4007  00295C  3209               	rrcf	___lltoft@c,f,c
  4008  00295E  2A11               	incf	___lltoft@exp,f,c
  4009  002960  D000               	goto	l2273
  4010  002962                     l2273:
  4011  002962  0E00               	movlw	0
  4012  002964  1409               	andwf	___lltoft@c,w,c
  4013  002966  6E0D               	movwf	??___lltoft& (0+255),c
  4014  002968  0E00               	movlw	0
  4015  00296A  140A               	andwf	___lltoft@c+1,w,c
  4016  00296C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4017  00296E  0E00               	movlw	0
  4018  002970  140B               	andwf	___lltoft@c+2,w,c
  4019  002972  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4020  002974  0EFF               	movlw	255
  4021  002976  140C               	andwf	___lltoft@c+3,w,c
  4022  002978  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4023  00297A  500D               	movf	??___lltoft,w,c
  4024  00297C  100E               	iorwf	??___lltoft+1,w,c
  4025  00297E  100F               	iorwf	??___lltoft+2,w,c
  4026  002980  1010               	iorwf	??___lltoft+3,w,c
  4027  002982  A4D8               	btfss	status,2,c
  4028  002984  D7E7               	goto	l2271
  4029  002986  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4030  00298A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4031  00298E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4032  002992  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4033  002996  0E00               	movlw	0
  4034  002998  6E05               	movwf	___ftpack@sign,c
  4035  00299A  ECB7  F012         	call	___ftpack	;wreg free
  4036  00299E  C001  F009         	movff	?___ftpack,?___lltoft
  4037  0029A2  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4038  0029A6  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4039  0029AA  D000               	goto	l697
  4040  0029AC                     l697:
  4041  0029AC  0012               	return		;funcret
  4042  0029AE                     __end_of___lltoft:
  4043                           	opt stack 0
  4044                           tblptru	equ	0xFF8
  4045                           tblptrh	equ	0xFF7
  4046                           tblptrl	equ	0xFF6
  4047                           tablat	equ	0xFF5
  4048                           prodh	equ	0xFF4
  4049                           prodl	equ	0xFF3
  4050                           wreg	equ	0xFE8
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function ___llmod *****************
  4058 ;; Defined at:
  4059 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  dividend        4    0[COMRAM] unsigned long 
  4062 ;;  divisor         4    4[COMRAM] unsigned long 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  counter         1    8[COMRAM] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  4    0[COMRAM] unsigned long 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4074 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;Total ram usage:        9 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_printf
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text13
  4088  00286E                     __ptext13:
  4089                           	opt stack 0
  4090  00286E                     ___llmod:
  4091                           	opt stack 29
  4092                           
  4093                           ;incstack = 0
  4094  00286E  5005               	movf	___llmod@divisor,w,c
  4095  002870  1006               	iorwf	___llmod@divisor+1,w,c
  4096  002872  1007               	iorwf	___llmod@divisor+2,w,c
  4097  002874  1008               	iorwf	___llmod@divisor+3,w,c
  4098  002876  B4D8               	btfsc	status,2,c
  4099  002878  D029               	goto	l677
  4100  00287A  0E01               	movlw	1
  4101  00287C  6E09               	movwf	___llmod@counter,c
  4102  00287E  D007               	goto	l2259
  4103  002880                     l2257:
  4104  002880  90D8               	bcf	status,0,c
  4105  002882  3605               	rlcf	___llmod@divisor,f,c
  4106  002884  3606               	rlcf	___llmod@divisor+1,f,c
  4107  002886  3607               	rlcf	___llmod@divisor+2,f,c
  4108  002888  3608               	rlcf	___llmod@divisor+3,f,c
  4109  00288A  2A09               	incf	___llmod@counter,f,c
  4110  00288C  D000               	goto	l2259
  4111  00288E                     l2259:
  4112  00288E  BE08               	btfsc	___llmod@divisor+3,7,c
  4113  002890  D002               	goto	l2261
  4114  002892  D7F6               	goto	l2257
  4115  002894  D000               	goto	l2261
  4116  002896                     l2261:
  4117  002896  5005               	movf	___llmod@divisor,w,c
  4118  002898  5C01               	subwf	___llmod@dividend,w,c
  4119  00289A  5006               	movf	___llmod@divisor+1,w,c
  4120  00289C  5802               	subwfb	___llmod@dividend+1,w,c
  4121  00289E  5007               	movf	___llmod@divisor+2,w,c
  4122  0028A0  5803               	subwfb	___llmod@dividend+2,w,c
  4123  0028A2  5008               	movf	___llmod@divisor+3,w,c
  4124  0028A4  5804               	subwfb	___llmod@dividend+3,w,c
  4125  0028A6  A0D8               	btfss	status,0,c
  4126  0028A8  D009               	goto	l2265
  4127  0028AA  5005               	movf	___llmod@divisor,w,c
  4128  0028AC  5E01               	subwf	___llmod@dividend,f,c
  4129  0028AE  5006               	movf	___llmod@divisor+1,w,c
  4130  0028B0  5A02               	subwfb	___llmod@dividend+1,f,c
  4131  0028B2  5007               	movf	___llmod@divisor+2,w,c
  4132  0028B4  5A03               	subwfb	___llmod@dividend+2,f,c
  4133  0028B6  5008               	movf	___llmod@divisor+3,w,c
  4134  0028B8  5A04               	subwfb	___llmod@dividend+3,f,c
  4135  0028BA  D000               	goto	l2265
  4136  0028BC                     l2265:
  4137  0028BC  90D8               	bcf	status,0,c
  4138  0028BE  3208               	rrcf	___llmod@divisor+3,f,c
  4139  0028C0  3207               	rrcf	___llmod@divisor+2,f,c
  4140  0028C2  3206               	rrcf	___llmod@divisor+1,f,c
  4141  0028C4  3205               	rrcf	___llmod@divisor,f,c
  4142  0028C6  2E09               	decfsz	___llmod@counter,f,c
  4143  0028C8  D7E6               	goto	l2261
  4144  0028CA  D000               	goto	l677
  4145  0028CC                     l677:
  4146  0028CC  C001  F001         	movff	___llmod@dividend,?___llmod
  4147  0028D0  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4148  0028D4  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4149  0028D8  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4150  0028DC  0012               	return		;funcret
  4151  0028DE                     __end_of___llmod:
  4152                           	opt stack 0
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           wreg	equ	0xFE8
  4160                           postinc2	equ	0xFDE
  4161                           postdec2	equ	0xFDD
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function ___lldiv *****************
  4167 ;; Defined at:
  4168 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  dividend        4    0[COMRAM] unsigned long 
  4171 ;;  divisor         4    4[COMRAM] unsigned long 
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  quotient        4    8[COMRAM] unsigned long 
  4174 ;;  counter         1   12[COMRAM] unsigned char 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  4    0[COMRAM] unsigned long 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4184 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;Total ram usage:       13 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_printf
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text14
  4198  002760                     __ptext14:
  4199                           	opt stack 0
  4200  002760                     ___lldiv:
  4201                           	opt stack 29
  4202                           
  4203                           ;incstack = 0
  4204  002760  0E00               	movlw	0
  4205  002762  6E09               	movwf	___lldiv@quotient,c
  4206  002764  0E00               	movlw	0
  4207  002766  6E0A               	movwf	___lldiv@quotient+1,c
  4208  002768  0E00               	movlw	0
  4209  00276A  6E0B               	movwf	___lldiv@quotient+2,c
  4210  00276C  0E00               	movlw	0
  4211  00276E  6E0C               	movwf	___lldiv@quotient+3,c
  4212  002770  5005               	movf	___lldiv@divisor,w,c
  4213  002772  1006               	iorwf	___lldiv@divisor+1,w,c
  4214  002774  1007               	iorwf	___lldiv@divisor+2,w,c
  4215  002776  1008               	iorwf	___lldiv@divisor+3,w,c
  4216  002778  B4D8               	btfsc	status,2,c
  4217  00277A  D02F               	goto	l667
  4218  00277C  0E01               	movlw	1
  4219  00277E  6E0D               	movwf	___lldiv@counter,c
  4220  002780  D007               	goto	l2239
  4221  002782                     l2237:
  4222  002782  90D8               	bcf	status,0,c
  4223  002784  3605               	rlcf	___lldiv@divisor,f,c
  4224  002786  3606               	rlcf	___lldiv@divisor+1,f,c
  4225  002788  3607               	rlcf	___lldiv@divisor+2,f,c
  4226  00278A  3608               	rlcf	___lldiv@divisor+3,f,c
  4227  00278C  2A0D               	incf	___lldiv@counter,f,c
  4228  00278E  D000               	goto	l2239
  4229  002790                     l2239:
  4230  002790  BE08               	btfsc	___lldiv@divisor+3,7,c
  4231  002792  D002               	goto	l2241
  4232  002794  D7F6               	goto	l2237
  4233  002796  D000               	goto	l2241
  4234  002798                     l2241:
  4235  002798  90D8               	bcf	status,0,c
  4236  00279A  3609               	rlcf	___lldiv@quotient,f,c
  4237  00279C  360A               	rlcf	___lldiv@quotient+1,f,c
  4238  00279E  360B               	rlcf	___lldiv@quotient+2,f,c
  4239  0027A0  360C               	rlcf	___lldiv@quotient+3,f,c
  4240  0027A2  5005               	movf	___lldiv@divisor,w,c
  4241  0027A4  5C01               	subwf	___lldiv@dividend,w,c
  4242  0027A6  5006               	movf	___lldiv@divisor+1,w,c
  4243  0027A8  5802               	subwfb	___lldiv@dividend+1,w,c
  4244  0027AA  5007               	movf	___lldiv@divisor+2,w,c
  4245  0027AC  5803               	subwfb	___lldiv@dividend+2,w,c
  4246  0027AE  5008               	movf	___lldiv@divisor+3,w,c
  4247  0027B0  5804               	subwfb	___lldiv@dividend+3,w,c
  4248  0027B2  A0D8               	btfss	status,0,c
  4249  0027B4  D00A               	goto	l2249
  4250  0027B6  5005               	movf	___lldiv@divisor,w,c
  4251  0027B8  5E01               	subwf	___lldiv@dividend,f,c
  4252  0027BA  5006               	movf	___lldiv@divisor+1,w,c
  4253  0027BC  5A02               	subwfb	___lldiv@dividend+1,f,c
  4254  0027BE  5007               	movf	___lldiv@divisor+2,w,c
  4255  0027C0  5A03               	subwfb	___lldiv@dividend+2,f,c
  4256  0027C2  5008               	movf	___lldiv@divisor+3,w,c
  4257  0027C4  5A04               	subwfb	___lldiv@dividend+3,f,c
  4258  0027C6  8009               	bsf	___lldiv@quotient,0,c
  4259  0027C8  D000               	goto	l2249
  4260  0027CA                     l2249:
  4261  0027CA  90D8               	bcf	status,0,c
  4262  0027CC  3208               	rrcf	___lldiv@divisor+3,f,c
  4263  0027CE  3207               	rrcf	___lldiv@divisor+2,f,c
  4264  0027D0  3206               	rrcf	___lldiv@divisor+1,f,c
  4265  0027D2  3205               	rrcf	___lldiv@divisor,f,c
  4266  0027D4  2E0D               	decfsz	___lldiv@counter,f,c
  4267  0027D6  D7E0               	goto	l2241
  4268  0027D8  D000               	goto	l667
  4269  0027DA                     l667:
  4270  0027DA  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4271  0027DE  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4272  0027E2  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4273  0027E6  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4274  0027EA  0012               	return		;funcret
  4275  0027EC                     __end_of___lldiv:
  4276                           	opt stack 0
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           wreg	equ	0xFE8
  4284                           postinc2	equ	0xFDE
  4285                           postdec2	equ	0xFDD
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290 ;; *************** function ___fttol *****************
  4291 ;; Defined at:
  4292 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  f1              3   42[COMRAM] float 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;  lval            4   52[COMRAM] unsigned long 
  4297 ;;  exp1            1   56[COMRAM] unsigned char 
  4298 ;;  sign1           1   51[COMRAM] unsigned char 
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  4   42[COMRAM] long 
  4301 ;; Registers used:
  4302 ;;		wreg, status,2, status,0
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4308 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;Total ram usage:       15 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; This function calls:
  4315 ;;		Nothing
  4316 ;; This function is called by:
  4317 ;;		_printf
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text15
  4322  002488                     __ptext15:
  4323                           	opt stack 0
  4324  002488                     ___fttol:
  4325                           	opt stack 29
  4326                           
  4327                           ;incstack = 0
  4328  002488  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4329  00248C  6A30               	clrf	(??___fttol+1)& (0+255),c
  4330  00248E  6A31               	clrf	(??___fttol+2)& (0+255),c
  4331  002490  342C               	rlcf	___fttol@f1+1,w,c
  4332  002492  362F               	rlcf	??___fttol& (0+255),f,c
  4333  002494  E301               	bnc	u2371
  4334  002496  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4335  002498                     u2371:
  4336  002498  502F               	movf	??___fttol,w,c
  4337  00249A  6E39               	movwf	___fttol@exp1,c
  4338  00249C  5039               	movf	___fttol@exp1,w,c
  4339  00249E  A4D8               	btfss	status,2,c
  4340  0024A0  D002               	goto	l2191
  4341  0024A2  D039               	goto	l2215
  4342  0024A4  D063               	goto	l623
  4343  0024A6                     l2191:
  4344  0024A6  0E17               	movlw	23
  4345  0024A8  6E2F               	movwf	??___fttol& (0+255),c
  4346  0024AA  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4347  0024AE  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4348  0024B2  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4349  0024B6  282F               	incf	??___fttol,w,c
  4350  0024B8  6E33               	movwf	(??___fttol+4)& (0+255),c
  4351  0024BA  D004               	goto	u2390
  4352  0024BC                     u2395:
  4353  0024BC  90D8               	bcf	status,0,c
  4354  0024BE  3232               	rrcf	??___fttol+3,f,c
  4355  0024C0  3231               	rrcf	??___fttol+2,f,c
  4356  0024C2  3230               	rrcf	??___fttol+1,f,c
  4357  0024C4                     u2390:
  4358  0024C4  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4359  0024C6  D7FA               	goto	u2395
  4360  0024C8  5030               	movf	??___fttol+1,w,c
  4361  0024CA  6E34               	movwf	___fttol@sign1,c
  4362  0024CC  8E2C               	bsf	___fttol@f1+1,7,c
  4363  0024CE  0EFF               	movlw	255
  4364  0024D0  162B               	andwf	___fttol@f1,f,c
  4365  0024D2  0EFF               	movlw	255
  4366  0024D4  162C               	andwf	___fttol@f1+1,f,c
  4367  0024D6  0E00               	movlw	0
  4368  0024D8  162D               	andwf	___fttol@f1+2,f,c
  4369  0024DA  502B               	movf	___fttol@f1,w,c
  4370  0024DC  6E35               	movwf	___fttol@lval,c
  4371  0024DE  502C               	movf	___fttol@f1+1,w,c
  4372  0024E0  6E36               	movwf	___fttol@lval+1,c
  4373  0024E2  502D               	movf	___fttol@f1+2,w,c
  4374  0024E4  6E37               	movwf	___fttol@lval+2,c
  4375  0024E6  6A38               	clrf	___fttol@lval+3,c
  4376  0024E8  0E8E               	movlw	142
  4377  0024EA  5E39               	subwf	___fttol@exp1,f,c
  4378  0024EC  AE39               	btfss	___fttol@exp1,7,c
  4379  0024EE  D010               	goto	l2213
  4380  0024F0  5039               	movf	___fttol@exp1,w,c
  4381  0024F2  0A80               	xorlw	128
  4382  0024F4  0F8F               	addlw	143
  4383  0024F6  B0D8               	btfsc	status,0,c
  4384  0024F8  D003               	goto	l2209
  4385  0024FA  D00D               	goto	l2215
  4386  0024FC  D037               	goto	l623
  4387  0024FE  D000               	goto	l2209
  4388  002500                     l2209:
  4389  002500  90D8               	bcf	status,0,c
  4390  002502  3238               	rrcf	___fttol@lval+3,f,c
  4391  002504  3237               	rrcf	___fttol@lval+2,f,c
  4392  002506  3236               	rrcf	___fttol@lval+1,f,c
  4393  002508  3235               	rrcf	___fttol@lval,f,c
  4394  00250A  3E39               	incfsz	___fttol@exp1,f,c
  4395  00250C  D7F9               	goto	l2209
  4396  00250E  D019               	goto	l2223
  4397  002510                     l2213:
  4398  002510  0E17               	movlw	23
  4399  002512  6439               	cpfsgt	___fttol@exp1,c
  4400  002514  D011               	goto	l2221
  4401  002516                     l2215:
  4402  002516  0E00               	movlw	0
  4403  002518  6E2B               	movwf	?___fttol,c
  4404  00251A  0E00               	movlw	0
  4405  00251C  6E2C               	movwf	?___fttol+1,c
  4406  00251E  0E00               	movlw	0
  4407  002520  6E2D               	movwf	?___fttol+2,c
  4408  002522  0E00               	movlw	0
  4409  002524  6E2E               	movwf	?___fttol+3,c
  4410  002526  D022               	goto	l623
  4411  002528  D007               	goto	l2221
  4412  00252A                     l2219:
  4413  00252A  90D8               	bcf	status,0,c
  4414  00252C  3635               	rlcf	___fttol@lval,f,c
  4415  00252E  3636               	rlcf	___fttol@lval+1,f,c
  4416  002530  3637               	rlcf	___fttol@lval+2,f,c
  4417  002532  3638               	rlcf	___fttol@lval+3,f,c
  4418  002534  0639               	decf	___fttol@exp1,f,c
  4419  002536  D000               	goto	l2221
  4420  002538                     l2221:
  4421  002538  5039               	movf	___fttol@exp1,w,c
  4422  00253A  B4D8               	btfsc	status,2,c
  4423  00253C  D002               	goto	l2223
  4424  00253E  D7F5               	goto	l2219
  4425  002540  D000               	goto	l2223
  4426  002542                     l2223:
  4427  002542  5034               	movf	___fttol@sign1,w,c
  4428  002544  B4D8               	btfsc	status,2,c
  4429  002546  D009               	goto	l2227
  4430  002548  1E38               	comf	___fttol@lval+3,f,c
  4431  00254A  1E37               	comf	___fttol@lval+2,f,c
  4432  00254C  1E36               	comf	___fttol@lval+1,f,c
  4433  00254E  6C35               	negf	___fttol@lval,c
  4434  002550  0E00               	movlw	0
  4435  002552  2236               	addwfc	___fttol@lval+1,f,c
  4436  002554  2237               	addwfc	___fttol@lval+2,f,c
  4437  002556  2238               	addwfc	___fttol@lval+3,f,c
  4438  002558  D000               	goto	l2227
  4439  00255A                     l2227:
  4440  00255A  C035  F02B         	movff	___fttol@lval,?___fttol
  4441  00255E  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4442  002562  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4443  002566  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4444  00256A  D000               	goto	l623
  4445  00256C                     l623:
  4446  00256C  0012               	return		;funcret
  4447  00256E                     __end_of___fttol:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           wreg	equ	0xFE8
  4456                           postinc2	equ	0xFDE
  4457                           postdec2	equ	0xFDD
  4458                           fsr2h	equ	0xFDA
  4459                           fsr2l	equ	0xFD9
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function ___ftsub *****************
  4463 ;; Defined at:
  4464 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;  f1              3   57[COMRAM] float 
  4467 ;;  f2              3   60[COMRAM] float 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  3   57[COMRAM] float 
  4472 ;; Registers used:
  4473 ;;		wreg, status,2, status,0, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4479 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;Total ram usage:        6 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    2
  4486 ;; This function calls:
  4487 ;;		___ftadd
  4488 ;; This function is called by:
  4489 ;;		_printf
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text16
  4494  0029F6                     __ptext16:
  4495                           	opt stack 0
  4496  0029F6                     ___ftsub:
  4497                           	opt stack 27
  4498                           
  4499                           ;incstack = 0
  4500  0029F6  503D               	movf	___ftsub@f2,w,c
  4501  0029F8  103E               	iorwf	___ftsub@f2+1,w,c
  4502  0029FA  103F               	iorwf	___ftsub@f2+2,w,c
  4503  0029FC  B4D8               	btfsc	status,2,c
  4504  0029FE  D007               	goto	l2159
  4505  002A00  0E00               	movlw	0
  4506  002A02  1A3D               	xorwf	___ftsub@f2,f,c
  4507  002A04  0E00               	movlw	0
  4508  002A06  1A3E               	xorwf	___ftsub@f2+1,f,c
  4509  002A08  0E80               	movlw	128
  4510  002A0A  1A3F               	xorwf	___ftsub@f2+2,f,c
  4511  002A0C  D000               	goto	l2159
  4512  002A0E                     l2159:
  4513  002A0E  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4514  002A12  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4515  002A16  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4516  002A1A  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4517  002A1E  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4518  002A22  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4519  002A26  ECD9  F00F         	call	___ftadd	;wreg free
  4520  002A2A  C02E  F03A         	movff	?___ftadd,?___ftsub
  4521  002A2E  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4522  002A32  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4523  002A36  D000               	goto	l619
  4524  002A38                     l619:
  4525  002A38  0012               	return		;funcret
  4526  002A3A                     __end_of___ftsub:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           wreg	equ	0xFE8
  4535                           postinc2	equ	0xFDE
  4536                           postdec2	equ	0xFDD
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function ___ftadd *****************
  4542 ;; Defined at:
  4543 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;  f1              3   45[COMRAM] float 
  4546 ;;  f2              3   48[COMRAM] float 
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;  exp1            1   56[COMRAM] unsigned char 
  4549 ;;  exp2            1   55[COMRAM] unsigned char 
  4550 ;;  sign            1   54[COMRAM] unsigned char 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  3   45[COMRAM] float 
  4553 ;; Registers used:
  4554 ;;		wreg, status,2, status,0, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4560 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;Total ram usage:       12 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    1
  4567 ;; This function calls:
  4568 ;;		___ftpack
  4569 ;; This function is called by:
  4570 ;;		_printf
  4571 ;;		___ftsub
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text17
  4576  001FB2                     __ptext17:
  4577                           	opt stack 0
  4578  001FB2                     ___ftadd:
  4579                           	opt stack 27
  4580                           
  4581                           ;incstack = 0
  4582  001FB2  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4583  001FB6  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4584  001FB8  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4585  001FBA  342F               	rlcf	___ftadd@f1+1,w,c
  4586  001FBC  3634               	rlcf	??___ftadd& (0+255),f,c
  4587  001FBE  E301               	bnc	u1571
  4588  001FC0  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4589  001FC2                     u1571:
  4590  001FC2  5034               	movf	??___ftadd,w,c
  4591  001FC4  6E39               	movwf	___ftadd@exp1,c
  4592  001FC6  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4593  001FCA  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4594  001FCC  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4595  001FCE  3432               	rlcf	___ftadd@f2+1,w,c
  4596  001FD0  3634               	rlcf	??___ftadd& (0+255),f,c
  4597  001FD2  E301               	bnc	u1581
  4598  001FD4  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4599  001FD6                     u1581:
  4600  001FD6  5034               	movf	??___ftadd,w,c
  4601  001FD8  6E38               	movwf	___ftadd@exp2,c
  4602  001FDA  5039               	movf	___ftadd@exp1,w,c
  4603  001FDC  B4D8               	btfsc	status,2,c
  4604  001FDE  D00B               	goto	l538
  4605  001FE0  5038               	movf	___ftadd@exp2,w,c
  4606  001FE2  5C39               	subwf	___ftadd@exp1,w,c
  4607  001FE4  B0D8               	btfsc	status,0,c
  4608  001FE6  D00E               	goto	l1723
  4609  001FE8  5039               	movf	___ftadd@exp1,w,c
  4610  001FEA  0800               	sublw	0
  4611  001FEC  2438               	addwf	___ftadd@exp2,w,c
  4612  001FEE  6E34               	movwf	??___ftadd& (0+255),c
  4613  001FF0  0E18               	movlw	24
  4614  001FF2  6434               	cpfsgt	??___ftadd,c
  4615  001FF4  D007               	goto	l1723
  4616  001FF6                     l538:
  4617  001FF6  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4618  001FFA  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4619  001FFE  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4620  002002  D0B8               	goto	l539
  4621  002004                     l1723:
  4622  002004  5038               	movf	___ftadd@exp2,w,c
  4623  002006  B4D8               	btfsc	status,2,c
  4624  002008  D00B               	goto	l542
  4625  00200A  5039               	movf	___ftadd@exp1,w,c
  4626  00200C  5C38               	subwf	___ftadd@exp2,w,c
  4627  00200E  B0D8               	btfsc	status,0,c
  4628  002010  D00E               	goto	l1729
  4629  002012  5038               	movf	___ftadd@exp2,w,c
  4630  002014  0800               	sublw	0
  4631  002016  2439               	addwf	___ftadd@exp1,w,c
  4632  002018  6E34               	movwf	??___ftadd& (0+255),c
  4633  00201A  0E18               	movlw	24
  4634  00201C  6434               	cpfsgt	??___ftadd,c
  4635  00201E  D007               	goto	l1729
  4636  002020                     l542:
  4637  002020  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4638  002024  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4639  002028  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4640  00202C  D0A3               	goto	l539
  4641  00202E                     l1729:
  4642  00202E  0E06               	movlw	6
  4643  002030  6E37               	movwf	___ftadd@sign,c
  4644  002032  AE30               	btfss	___ftadd@f1+2,7,c
  4645  002034  D002               	goto	l1735
  4646  002036  8E37               	bsf	___ftadd@sign,7,c
  4647  002038  D000               	goto	l1735
  4648  00203A                     l1735:
  4649  00203A  BE33               	btfsc	___ftadd@f2+2,7,c
  4650  00203C  8C37               	bsf	___ftadd@sign,6,c
  4651  00203E  8E2F               	bsf	___ftadd@f1+1,7,c
  4652  002040  0EFF               	movlw	255
  4653  002042  162E               	andwf	___ftadd@f1,f,c
  4654  002044  0EFF               	movlw	255
  4655  002046  162F               	andwf	___ftadd@f1+1,f,c
  4656  002048  0E00               	movlw	0
  4657  00204A  1630               	andwf	___ftadd@f1+2,f,c
  4658  00204C  8E32               	bsf	___ftadd@f2+1,7,c
  4659  00204E  0EFF               	movlw	255
  4660  002050  1631               	andwf	___ftadd@f2,f,c
  4661  002052  0EFF               	movlw	255
  4662  002054  1632               	andwf	___ftadd@f2+1,f,c
  4663  002056  0E00               	movlw	0
  4664  002058  1633               	andwf	___ftadd@f2+2,f,c
  4665  00205A  5038               	movf	___ftadd@exp2,w,c
  4666  00205C  5C39               	subwf	___ftadd@exp1,w,c
  4667  00205E  B0D8               	btfsc	status,0,c
  4668  002060  D01E               	goto	l1755
  4669  002062                     l1745:
  4670  002062  90D8               	bcf	status,0,c
  4671  002064  3631               	rlcf	___ftadd@f2,f,c
  4672  002066  3632               	rlcf	___ftadd@f2+1,f,c
  4673  002068  3633               	rlcf	___ftadd@f2+2,f,c
  4674  00206A  0638               	decf	___ftadd@exp2,f,c
  4675  00206C  5039               	movf	___ftadd@exp1,w,c
  4676  00206E  1838               	xorwf	___ftadd@exp2,w,c
  4677  002070  B4D8               	btfsc	status,2,c
  4678  002072  D00F               	goto	l1753
  4679  002074  0637               	decf	___ftadd@sign,f,c
  4680  002076  C037  F034         	movff	___ftadd@sign,??___ftadd
  4681  00207A  0E07               	movlw	7
  4682  00207C  1634               	andwf	??___ftadd,f,c
  4683  00207E  B4D8               	btfsc	status,2,c
  4684  002080  D008               	goto	l1753
  4685  002082  D7EF               	goto	l1745
  4686  002084  D006               	goto	l1753
  4687  002086                     l1751:
  4688  002086  90D8               	bcf	status,0,c
  4689  002088  3230               	rrcf	___ftadd@f1+2,f,c
  4690  00208A  322F               	rrcf	___ftadd@f1+1,f,c
  4691  00208C  322E               	rrcf	___ftadd@f1,f,c
  4692  00208E  2A39               	incf	___ftadd@exp1,f,c
  4693  002090  D000               	goto	l1753
  4694  002092                     l1753:
  4695  002092  5038               	movf	___ftadd@exp2,w,c
  4696  002094  1839               	xorwf	___ftadd@exp1,w,c
  4697  002096  B4D8               	btfsc	status,2,c
  4698  002098  D024               	goto	l553
  4699  00209A  D7F5               	goto	l1751
  4700  00209C  D022               	goto	l553
  4701  00209E                     l1755:
  4702  00209E  5039               	movf	___ftadd@exp1,w,c
  4703  0020A0  5C38               	subwf	___ftadd@exp2,w,c
  4704  0020A2  B0D8               	btfsc	status,0,c
  4705  0020A4  D01E               	goto	l553
  4706  0020A6                     l1757:
  4707  0020A6  90D8               	bcf	status,0,c
  4708  0020A8  362E               	rlcf	___ftadd@f1,f,c
  4709  0020AA  362F               	rlcf	___ftadd@f1+1,f,c
  4710  0020AC  3630               	rlcf	___ftadd@f1+2,f,c
  4711  0020AE  0639               	decf	___ftadd@exp1,f,c
  4712  0020B0  5039               	movf	___ftadd@exp1,w,c
  4713  0020B2  1838               	xorwf	___ftadd@exp2,w,c
  4714  0020B4  B4D8               	btfsc	status,2,c
  4715  0020B6  D00F               	goto	l1765
  4716  0020B8  0637               	decf	___ftadd@sign,f,c
  4717  0020BA  C037  F034         	movff	___ftadd@sign,??___ftadd
  4718  0020BE  0E07               	movlw	7
  4719  0020C0  1634               	andwf	??___ftadd,f,c
  4720  0020C2  B4D8               	btfsc	status,2,c
  4721  0020C4  D008               	goto	l1765
  4722  0020C6  D7EF               	goto	l1757
  4723  0020C8  D006               	goto	l1765
  4724  0020CA                     l1763:
  4725  0020CA  90D8               	bcf	status,0,c
  4726  0020CC  3233               	rrcf	___ftadd@f2+2,f,c
  4727  0020CE  3232               	rrcf	___ftadd@f2+1,f,c
  4728  0020D0  3231               	rrcf	___ftadd@f2,f,c
  4729  0020D2  2A38               	incf	___ftadd@exp2,f,c
  4730  0020D4  D000               	goto	l1765
  4731  0020D6                     l1765:
  4732  0020D6  5038               	movf	___ftadd@exp2,w,c
  4733  0020D8  1839               	xorwf	___ftadd@exp1,w,c
  4734  0020DA  B4D8               	btfsc	status,2,c
  4735  0020DC  D002               	goto	l553
  4736  0020DE  D7F5               	goto	l1763
  4737  0020E0  D000               	goto	l553
  4738  0020E2                     l553:
  4739  0020E2  AE37               	btfss	___ftadd@sign,7,c
  4740  0020E4  D00C               	goto	l562
  4741  0020E6  0EFF               	movlw	255
  4742  0020E8  1A2E               	xorwf	___ftadd@f1,f,c
  4743  0020EA  0EFF               	movlw	255
  4744  0020EC  1A2F               	xorwf	___ftadd@f1+1,f,c
  4745  0020EE  0EFF               	movlw	255
  4746  0020F0  1A30               	xorwf	___ftadd@f1+2,f,c
  4747  0020F2  0E01               	movlw	1
  4748  0020F4  262E               	addwf	___ftadd@f1,f,c
  4749  0020F6  0E00               	movlw	0
  4750  0020F8  222F               	addwfc	___ftadd@f1+1,f,c
  4751  0020FA  0E00               	movlw	0
  4752  0020FC  2230               	addwfc	___ftadd@f1+2,f,c
  4753  0020FE                     l562:
  4754  0020FE  AC37               	btfss	___ftadd@sign,6,c
  4755  002100  D00D               	goto	l1771
  4756  002102  0EFF               	movlw	255
  4757  002104  1A31               	xorwf	___ftadd@f2,f,c
  4758  002106  0EFF               	movlw	255
  4759  002108  1A32               	xorwf	___ftadd@f2+1,f,c
  4760  00210A  0EFF               	movlw	255
  4761  00210C  1A33               	xorwf	___ftadd@f2+2,f,c
  4762  00210E  0E01               	movlw	1
  4763  002110  2631               	addwf	___ftadd@f2,f,c
  4764  002112  0E00               	movlw	0
  4765  002114  2232               	addwfc	___ftadd@f2+1,f,c
  4766  002116  0E00               	movlw	0
  4767  002118  2233               	addwfc	___ftadd@f2+2,f,c
  4768  00211A  D000               	goto	l1771
  4769  00211C                     l1771:
  4770  00211C  0E00               	movlw	0
  4771  00211E  6E37               	movwf	___ftadd@sign,c
  4772  002120  502E               	movf	___ftadd@f1,w,c
  4773  002122  2631               	addwf	___ftadd@f2,f,c
  4774  002124  502F               	movf	___ftadd@f1+1,w,c
  4775  002126  2232               	addwfc	___ftadd@f2+1,f,c
  4776  002128  5030               	movf	___ftadd@f1+2,w,c
  4777  00212A  2233               	addwfc	___ftadd@f2+2,f,c
  4778  00212C  AE33               	btfss	___ftadd@f2+2,7,c
  4779  00212E  D00F               	goto	l1781
  4780  002130  0EFF               	movlw	255
  4781  002132  1A31               	xorwf	___ftadd@f2,f,c
  4782  002134  0EFF               	movlw	255
  4783  002136  1A32               	xorwf	___ftadd@f2+1,f,c
  4784  002138  0EFF               	movlw	255
  4785  00213A  1A33               	xorwf	___ftadd@f2+2,f,c
  4786  00213C  0E01               	movlw	1
  4787  00213E  2631               	addwf	___ftadd@f2,f,c
  4788  002140  0E00               	movlw	0
  4789  002142  2232               	addwfc	___ftadd@f2+1,f,c
  4790  002144  0E00               	movlw	0
  4791  002146  2233               	addwfc	___ftadd@f2+2,f,c
  4792  002148  0E01               	movlw	1
  4793  00214A  6E37               	movwf	___ftadd@sign,c
  4794  00214C  D000               	goto	l1781
  4795  00214E                     l1781:
  4796  00214E  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4797  002152  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4798  002156  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4799  00215A  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4800  00215E  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4801  002162  ECB7  F012         	call	___ftpack	;wreg free
  4802  002166  C001  F02E         	movff	?___ftpack,?___ftadd
  4803  00216A  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4804  00216E  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4805  002172  D000               	goto	l539
  4806  002174                     l539:
  4807  002174  0012               	return		;funcret
  4808  002176                     __end_of___ftadd:
  4809                           	opt stack 0
  4810                           tblptru	equ	0xFF8
  4811                           tblptrh	equ	0xFF7
  4812                           tblptrl	equ	0xFF6
  4813                           tablat	equ	0xFF5
  4814                           prodh	equ	0xFF4
  4815                           prodl	equ	0xFF3
  4816                           wreg	equ	0xFE8
  4817                           postinc2	equ	0xFDE
  4818                           postdec2	equ	0xFDD
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823 ;; *************** function ___ftpack *****************
  4824 ;; Defined at:
  4825 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  arg             3    0[COMRAM] unsigned um
  4828 ;;  exp             1    3[COMRAM] unsigned char 
  4829 ;;  sign            1    4[COMRAM] unsigned char 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  3    0[COMRAM] float 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4841 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;Total ram usage:        8 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; This function calls:
  4848 ;;		Nothing
  4849 ;; This function is called by:
  4850 ;;		___ftadd
  4851 ;;		___ftmul
  4852 ;;		___lltoft
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text18
  4857  00256E                     __ptext18:
  4858                           	opt stack 0
  4859  00256E                     ___ftpack:
  4860                           	opt stack 27
  4861                           
  4862                           ;incstack = 0
  4863  00256E  5004               	movf	___ftpack@exp,w,c
  4864  002570  B4D8               	btfsc	status,2,c
  4865  002572  D005               	goto	l1677
  4866  002574  5001               	movf	___ftpack@arg,w,c
  4867  002576  1002               	iorwf	___ftpack@arg+1,w,c
  4868  002578  1003               	iorwf	___ftpack@arg+2,w,c
  4869  00257A  A4D8               	btfss	status,2,c
  4870  00257C  D00E               	goto	l1683
  4871  00257E                     l1677:
  4872  00257E  0E00               	movlw	0
  4873  002580  6E01               	movwf	?___ftpack,c
  4874  002582  0E00               	movlw	0
  4875  002584  6E02               	movwf	?___ftpack+1,c
  4876  002586  0E00               	movlw	0
  4877  002588  6E03               	movwf	?___ftpack+2,c
  4878  00258A  D053               	goto	l498
  4879  00258C  D006               	goto	l1683
  4880  00258E                     l1681:
  4881  00258E  2A04               	incf	___ftpack@exp,f,c
  4882  002590  90D8               	bcf	status,0,c
  4883  002592  3203               	rrcf	___ftpack@arg+2,f,c
  4884  002594  3202               	rrcf	___ftpack@arg+1,f,c
  4885  002596  3201               	rrcf	___ftpack@arg,f,c
  4886  002598  D000               	goto	l1683
  4887  00259A                     l1683:
  4888  00259A  0E00               	movlw	0
  4889  00259C  1401               	andwf	___ftpack@arg,w,c
  4890  00259E  6E06               	movwf	??___ftpack& (0+255),c
  4891  0025A0  0E00               	movlw	0
  4892  0025A2  1402               	andwf	___ftpack@arg+1,w,c
  4893  0025A4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4894  0025A6  0EFE               	movlw	254
  4895  0025A8  1403               	andwf	___ftpack@arg+2,w,c
  4896  0025AA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4897  0025AC  5006               	movf	??___ftpack,w,c
  4898  0025AE  1007               	iorwf	??___ftpack+1,w,c
  4899  0025B0  1008               	iorwf	??___ftpack+2,w,c
  4900  0025B2  B4D8               	btfsc	status,2,c
  4901  0025B4  D00E               	goto	l1689
  4902  0025B6  D7EB               	goto	l1681
  4903  0025B8  D00C               	goto	l1689
  4904  0025BA                     l1685:
  4905  0025BA  2A04               	incf	___ftpack@exp,f,c
  4906  0025BC  0E01               	movlw	1
  4907  0025BE  2601               	addwf	___ftpack@arg,f,c
  4908  0025C0  0E00               	movlw	0
  4909  0025C2  2202               	addwfc	___ftpack@arg+1,f,c
  4910  0025C4  0E00               	movlw	0
  4911  0025C6  2203               	addwfc	___ftpack@arg+2,f,c
  4912  0025C8  90D8               	bcf	status,0,c
  4913  0025CA  3203               	rrcf	___ftpack@arg+2,f,c
  4914  0025CC  3202               	rrcf	___ftpack@arg+1,f,c
  4915  0025CE  3201               	rrcf	___ftpack@arg,f,c
  4916  0025D0  D000               	goto	l1689
  4917  0025D2                     l1689:
  4918  0025D2  0E00               	movlw	0
  4919  0025D4  1401               	andwf	___ftpack@arg,w,c
  4920  0025D6  6E06               	movwf	??___ftpack& (0+255),c
  4921  0025D8  0E00               	movlw	0
  4922  0025DA  1402               	andwf	___ftpack@arg+1,w,c
  4923  0025DC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4924  0025DE  0EFF               	movlw	255
  4925  0025E0  1403               	andwf	___ftpack@arg+2,w,c
  4926  0025E2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4927  0025E4  5006               	movf	??___ftpack,w,c
  4928  0025E6  1007               	iorwf	??___ftpack+1,w,c
  4929  0025E8  1008               	iorwf	??___ftpack+2,w,c
  4930  0025EA  B4D8               	btfsc	status,2,c
  4931  0025EC  D008               	goto	l1693
  4932  0025EE  D7E5               	goto	l1685
  4933  0025F0  D006               	goto	l1693
  4934  0025F2                     l1691:
  4935  0025F2  0604               	decf	___ftpack@exp,f,c
  4936  0025F4  90D8               	bcf	status,0,c
  4937  0025F6  3601               	rlcf	___ftpack@arg,f,c
  4938  0025F8  3602               	rlcf	___ftpack@arg+1,f,c
  4939  0025FA  3603               	rlcf	___ftpack@arg+2,f,c
  4940  0025FC  D000               	goto	l1693
  4941  0025FE                     l1693:
  4942  0025FE  BE02               	btfsc	___ftpack@arg+1,7,c
  4943  002600  D004               	goto	l509
  4944  002602  0E02               	movlw	2
  4945  002604  6004               	cpfslt	___ftpack@exp,c
  4946  002606  D7F5               	goto	l1691
  4947  002608  D000               	goto	l509
  4948  00260A                     l509:
  4949  00260A  B004               	btfsc	___ftpack@exp,0,c
  4950  00260C  D002               	goto	l1699
  4951  00260E  9E02               	bcf	___ftpack@arg+1,7,c
  4952  002610  D000               	goto	l1699
  4953  002612                     l1699:
  4954  002612  90D8               	bcf	status,0,c
  4955  002614  3204               	rrcf	___ftpack@exp,f,c
  4956  002616  5004               	movf	___ftpack@exp,w,c
  4957  002618  1203               	iorwf	___ftpack@arg+2,f,c
  4958  00261A  5005               	movf	___ftpack@sign,w,c
  4959  00261C  B4D8               	btfsc	status,2,c
  4960  00261E  D002               	goto	l1705
  4961  002620  8E03               	bsf	___ftpack@arg+2,7,c
  4962  002622  D000               	goto	l1705
  4963  002624                     l1705:
  4964  002624  C001  F001         	movff	___ftpack@arg,?___ftpack
  4965  002628  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4966  00262C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4967  002630  D000               	goto	l498
  4968  002632                     l498:
  4969  002632  0012               	return		;funcret
  4970  002634                     __end_of___ftpack:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           wreg	equ	0xFE8
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function ___ftneg *****************
  4986 ;; Defined at:
  4987 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;  f1              3    0[COMRAM] float 
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  3    0[COMRAM] float 
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, status,0
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:        3 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_printf
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text19
  5015  002A62                     __ptext19:
  5016                           	opt stack 0
  5017  002A62                     ___ftneg:
  5018                           	opt stack 29
  5019                           
  5020                           ;incstack = 0
  5021  002A62  5001               	movf	___ftneg@f1,w,c
  5022  002A64  1002               	iorwf	___ftneg@f1+1,w,c
  5023  002A66  1003               	iorwf	___ftneg@f1+2,w,c
  5024  002A68  B4D8               	btfsc	status,2,c
  5025  002A6A  D006               	goto	l612
  5026  002A6C  0E00               	movlw	0
  5027  002A6E  1A01               	xorwf	___ftneg@f1,f,c
  5028  002A70  0E00               	movlw	0
  5029  002A72  1A02               	xorwf	___ftneg@f1+1,f,c
  5030  002A74  0E80               	movlw	128
  5031  002A76  1A03               	xorwf	___ftneg@f1+2,f,c
  5032  002A78                     l612:
  5033  002A78  C001  F001         	movff	___ftneg@f1,?___ftneg
  5034  002A7C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5035  002A80  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5036  002A84  0012               	return		;funcret
  5037  002A86                     __end_of___ftneg:
  5038                           	opt stack 0
  5039                           tblptru	equ	0xFF8
  5040                           tblptrh	equ	0xFF7
  5041                           tblptrl	equ	0xFF6
  5042                           tablat	equ	0xFF5
  5043                           prodh	equ	0xFF4
  5044                           prodl	equ	0xFF3
  5045                           wreg	equ	0xFE8
  5046                           postinc2	equ	0xFDE
  5047                           postdec2	equ	0xFDD
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function ___ftge *****************
  5053 ;; Defined at:
  5054 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  ff1             3    0[COMRAM] float 
  5057 ;;  ff2             3    3[COMRAM] float 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5069 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;Total ram usage:        9 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		_printf
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           	psect	text20
  5083  0026CA                     __ptext20:
  5084                           	opt stack 0
  5085  0026CA                     ___ftge:
  5086                           	opt stack 29
  5087                           
  5088                           ;incstack = 0
  5089  0026CA  AE03               	btfss	___ftge@ff1+2,7,c
  5090  0026CC  D017               	goto	l2167
  5091  0026CE  C001  F007         	movff	___ftge@ff1,??___ftge
  5092  0026D2  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5093  0026D6  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5094  0026DA  1E07               	comf	??___ftge,f,c
  5095  0026DC  1E08               	comf	??___ftge+1,f,c
  5096  0026DE  1E09               	comf	??___ftge+2,f,c
  5097  0026E0  2A07               	incf	??___ftge,f,c
  5098  0026E2  0E00               	movlw	0
  5099  0026E4  2208               	addwfc	??___ftge+1,f,c
  5100  0026E6  2209               	addwfc	??___ftge+2,f,c
  5101  0026E8  0E00               	movlw	0
  5102  0026EA  2407               	addwf	??___ftge,w,c
  5103  0026EC  6E01               	movwf	___ftge@ff1,c
  5104  0026EE  0E00               	movlw	0
  5105  0026F0  2008               	addwfc	??___ftge+1,w,c
  5106  0026F2  6E02               	movwf	___ftge@ff1+1,c
  5107  0026F4  0E80               	movlw	128
  5108  0026F6  2009               	addwfc	??___ftge+2,w,c
  5109  0026F8  6E03               	movwf	___ftge@ff1+2,c
  5110  0026FA  D000               	goto	l2167
  5111  0026FC                     l2167:
  5112  0026FC  AE06               	btfss	___ftge@ff2+2,7,c
  5113  0026FE  D017               	goto	l2171
  5114  002700  C004  F007         	movff	___ftge@ff2,??___ftge
  5115  002704  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5116  002708  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5117  00270C  1E07               	comf	??___ftge,f,c
  5118  00270E  1E08               	comf	??___ftge+1,f,c
  5119  002710  1E09               	comf	??___ftge+2,f,c
  5120  002712  2A07               	incf	??___ftge,f,c
  5121  002714  0E00               	movlw	0
  5122  002716  2208               	addwfc	??___ftge+1,f,c
  5123  002718  2209               	addwfc	??___ftge+2,f,c
  5124  00271A  0E00               	movlw	0
  5125  00271C  2407               	addwf	??___ftge,w,c
  5126  00271E  6E04               	movwf	___ftge@ff2,c
  5127  002720  0E00               	movlw	0
  5128  002722  2008               	addwfc	??___ftge+1,w,c
  5129  002724  6E05               	movwf	___ftge@ff2+1,c
  5130  002726  0E80               	movlw	128
  5131  002728  2009               	addwfc	??___ftge+2,w,c
  5132  00272A  6E06               	movwf	___ftge@ff2+2,c
  5133  00272C  D000               	goto	l2171
  5134  00272E                     l2171:
  5135  00272E  0E00               	movlw	0
  5136  002730  1A01               	xorwf	___ftge@ff1,f,c
  5137  002732  0E00               	movlw	0
  5138  002734  1A02               	xorwf	___ftge@ff1+1,f,c
  5139  002736  0E80               	movlw	128
  5140  002738  1A03               	xorwf	___ftge@ff1+2,f,c
  5141  00273A  0E00               	movlw	0
  5142  00273C  1A04               	xorwf	___ftge@ff2,f,c
  5143  00273E  0E00               	movlw	0
  5144  002740  1A05               	xorwf	___ftge@ff2+1,f,c
  5145  002742  0E80               	movlw	128
  5146  002744  1A06               	xorwf	___ftge@ff2+2,f,c
  5147  002746  5004               	movf	___ftge@ff2,w,c
  5148  002748  5C01               	subwf	___ftge@ff1,w,c
  5149  00274A  5005               	movf	___ftge@ff2+1,w,c
  5150  00274C  5802               	subwfb	___ftge@ff1+1,w,c
  5151  00274E  5006               	movf	___ftge@ff2+2,w,c
  5152  002750  5803               	subwfb	___ftge@ff1+2,w,c
  5153  002752  B0D8               	btfsc	status,0,c
  5154  002754  D002               	goto	l2177
  5155  002756  90D8               	bcf	status,0,c
  5156  002758  D002               	goto	l596
  5157  00275A                     l2177:
  5158  00275A  80D8               	bsf	status,0,c
  5159  00275C  D000               	goto	l596
  5160  00275E                     l596:
  5161  00275E  0012               	return		;funcret
  5162  002760                     __end_of___ftge:
  5163                           	opt stack 0
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           wreg	equ	0xFE8
  5171                           postinc2	equ	0xFDE
  5172                           postdec2	equ	0xFDD
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _init_UART *****************
  5178 ;; Defined at:
  5179 ;;		line 10 in file "Lab1p2.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;		None               void
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, cstack
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;Total ram usage:        0 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    1
  5200 ;; This function calls:
  5201 ;;		_OpenUSART
  5202 ;; This function is called by:
  5203 ;;		_main
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text21
  5208  002AA8                     __ptext21:
  5209                           	opt stack 0
  5210  002AA8                     _init_UART:
  5211                           	opt stack 29
  5212                           
  5213                           ;Lab1p2.c: 12: OpenUSART (0b01111111 & 0b10111111 &
  5214                           ;Lab1p2.c: 13: 0b11111110 & 0b11111101 & 0b11111111 &
  5215                           ;Lab1p2.c: 14: 0b11111111, 25);
  5216                           
  5217                           ;incstack = 0
  5218  002AA8  0E00               	movlw	0
  5219  002AAA  6E02               	movwf	OpenUSART@spbrg+1,c
  5220  002AAC  0E19               	movlw	25
  5221  002AAE  6E01               	movwf	OpenUSART@spbrg,c
  5222  002AB0  0E3C               	movlw	60
  5223  002AB2  EC6F  F014         	call	_OpenUSART
  5224                           
  5225                           ;Lab1p2.c: 15: OSCCON = 0x60;
  5226  002AB6  0E60               	movlw	96
  5227  002AB8  6ED3               	movwf	4051,c	;volatile
  5228  002ABA  0012               	return		;funcret
  5229  002ABC                     __end_of_init_UART:
  5230                           	opt stack 0
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           prodh	equ	0xFF4
  5236                           prodl	equ	0xFF3
  5237                           wreg	equ	0xFE8
  5238                           postinc2	equ	0xFDE
  5239                           postdec2	equ	0xFDD
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _OpenUSART *****************
  5245 ;; Defined at:
  5246 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  config          1    wreg     unsigned char 
  5249 ;;  spbrg           2    0[COMRAM] unsigned int 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;  config          1    2[COMRAM] unsigned char 
  5252 ;; Return value:  Size  Location     Type
  5253 ;;		None               void
  5254 ;; Registers used:
  5255 ;;		wreg, status,2
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5265 ;;Total ram usage:        3 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_init_UART
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text22
  5275  0028DE                     __ptext22:
  5276                           	opt stack 0
  5277  0028DE                     _OpenUSART:
  5278                           	opt stack 29
  5279                           
  5280                           ;incstack = 0
  5281                           ;OpenUSART@config stored from wreg
  5282  0028DE  6E03               	movwf	OpenUSART@config,c
  5283  0028E0  0E00               	movlw	0
  5284  0028E2  6EAC               	movwf	4012,c	;volatile
  5285  0028E4  0E00               	movlw	0
  5286  0028E6  6EAB               	movwf	4011,c	;volatile
  5287  0028E8  A003               	btfss	OpenUSART@config,0,c
  5288  0028EA  D002               	goto	l1919
  5289  0028EC  88AC               	bsf	4012,4,c	;volatile
  5290  0028EE  D000               	goto	l1919
  5291  0028F0                     l1919:
  5292  0028F0  A203               	btfss	OpenUSART@config,1,c
  5293  0028F2  D003               	goto	l1923
  5294  0028F4  8CAC               	bsf	4012,6,c	;volatile
  5295  0028F6  8CAB               	bsf	4011,6,c	;volatile
  5296  0028F8  D000               	goto	l1923
  5297  0028FA                     l1923:
  5298  0028FA  A403               	btfss	OpenUSART@config,2,c
  5299  0028FC  D002               	goto	l1927
  5300  0028FE  8EAC               	bsf	4012,7,c	;volatile
  5301  002900  D000               	goto	l1927
  5302  002902                     l1927:
  5303  002902  A603               	btfss	OpenUSART@config,3,c
  5304  002904  D002               	goto	l161
  5305  002906  88AB               	bsf	4011,4,c	;volatile
  5306  002908  D002               	goto	l1931
  5307  00290A                     l161:
  5308  00290A  8AAB               	bsf	4011,5,c	;volatile
  5309  00290C  D000               	goto	l1931
  5310  00290E                     l1931:
  5311  00290E  B803               	btfsc	OpenUSART@config,4,c
  5312  002910  84AC               	bsf	4012,2,c	;volatile
  5313  002912  989E               	bcf	3998,4,c	;volatile
  5314  002914  AA03               	btfss	OpenUSART@config,5,c
  5315  002916  D002               	goto	l1939
  5316  002918  86AB               	bsf	4011,3,c	;volatile
  5317  00291A  D000               	goto	l1939
  5318  00291C                     l1939:
  5319  00291C  AC03               	btfss	OpenUSART@config,6,c
  5320  00291E  D002               	goto	l165
  5321  002920  8A9D               	bsf	3997,5,c	;volatile
  5322  002922  D001               	goto	l166
  5323  002924                     l165:
  5324  002924  9A9D               	bcf	3997,5,c	;volatile
  5325  002926                     l166:
  5326  002926  9A9E               	bcf	3998,5,c	;volatile
  5327  002928  AE03               	btfss	OpenUSART@config,7,c
  5328  00292A  D002               	goto	l167
  5329  00292C  889D               	bsf	3997,4,c	;volatile
  5330  00292E  D001               	goto	l168
  5331  002930                     l167:
  5332  002930  989D               	bcf	3997,4,c	;volatile
  5333  002932                     l168:
  5334  002932  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5335  002936  5002               	movf	OpenUSART@spbrg+1,w,c
  5336  002938  6EB0               	movwf	4016,c	;volatile
  5337  00293A  8AAC               	bsf	4012,5,c	;volatile
  5338  00293C  8EAB               	bsf	4011,7,c	;volatile
  5339  00293E  9C94               	bcf	3988,6,c	;volatile
  5340  002940  8E94               	bsf	3988,7,c	;volatile
  5341  002942  B8AC               	btfsc	4012,4,c	;volatile
  5342  002944  BEAC               	btfsc	4012,7,c	;volatile
  5343  002946  D002               	goto	l170
  5344  002948  8C94               	bsf	3988,6,c	;volatile
  5345  00294A  D000               	goto	l170
  5346  00294C                     l170:
  5347  00294C  0012               	return		;funcret
  5348  00294E                     __end_of_OpenUSART:
  5349                           	opt stack 0
  5350                           tblptru	equ	0xFF8
  5351                           tblptrh	equ	0xFF7
  5352                           tblptrl	equ	0xFF6
  5353                           tablat	equ	0xFF5
  5354                           prodh	equ	0xFF4
  5355                           prodl	equ	0xFF3
  5356                           wreg	equ	0xFE8
  5357                           postinc2	equ	0xFDE
  5358                           postdec2	equ	0xFDD
  5359                           fsr2h	equ	0xFDA
  5360                           fsr2l	equ	0xFD9
  5361                           status	equ	0xFD8
  5362                           tblptru	equ	0xFF8
  5363                           tblptrh	equ	0xFF7
  5364                           tblptrl	equ	0xFF6
  5365                           tablat	equ	0xFF5
  5366                           prodh	equ	0xFF4
  5367                           prodl	equ	0xFF3
  5368                           wreg	equ	0xFE8
  5369                           postinc2	equ	0xFDE
  5370                           postdec2	equ	0xFDD
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           
  5375                           	psect	rparam
  5376  0000                     tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           wreg	equ	0xFE8
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8


Data Sizes:
    Strings     134
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    102     102
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 67
		 -> STR_2(CODE[67]), STR_1(CODE[67]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_UART->_OpenUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   37326
                                             99 COMRAM     3     3      0
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   37008
                                             63 COMRAM    36    31      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3    8724
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    8526
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2067
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3558
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1250
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1360
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    1790
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     411
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3053
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2800
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     454
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_UART
     _OpenUSART
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     66      66       1       80.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Sep 05 13:05:09 2021

                     l16 2AC0                       l54 1D6C                       l47 1FB0  
           ___awdiv@sign 000C      ___wmul@multiplicand 0011             ___ftadd@exp1 0039  
           ___ftadd@exp2 0038             ___ftadd@sign 0037                      l113 16F0  
                    l161 290A                      l137 198C                      l170 294C  
                    l165 2924                      l173 2A60                      l166 2926  
                    l167 2930                      l168 2932                      l602 2486  
                    l612 2A78                      l509 260A                      l542 2020  
                    l366 26C8                      l623 256C                      l553 20E2  
                    l457 238E                      l562 20FE                      l538 1FF6  
                    l466 237E                      l539 2174                      l619 2A38  
                    l379 286C                      l580 21EC                      l581 2214  
                    l638 2AA6                      l498 2632                      l578 2284  
                    l667 27DA                      l587 2274                      l596 275E  
                    l677 28CC                      l697 29AC             ___awmod@sign 0006  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l2101 2296                     l2005 1B62                     l2023 1D48  
                   l2121 22EA                     l2017 1C96                     l2009 1B72  
                   l2107 22A6                     l2051 21B2                     l2035 2A9E  
                   l2221 2538                     l2213 2510                     l2141 2340  
                   l2133 232C                     l2045 2194                     l2215 2516  
                   l2223 2542                     l2151 236A                     l2303 11AA  
                   l2209 2500                     l2241 2798                     l2153 2378  
                   l2145 2350                     l2129 231C                     l2081 2236  
                   l2073 2222                     l2401 1566                     l2313 1204  
                   l2171 272E                     l2227 255A                     l2219 252A  
                   l2147 2356                     l2091 2260                     l2331 126A  
                   l2323 1232                     l2315 121C                     l2237 2782  
                   l2261 2896                     l2093 226E                     l2085 2246  
                   l2501 1904                     l2421 15F0                     l2413 15A6  
                   l2405 1572                     l2341 12AC                     l2325 1254  
                   l2309 11CC                     l2167 26FC                     l2159 2A0E  
                   l2191 24A6                     l2239 2790                     l2271 2954  
                   l2087 224C                     l2431 1628                     l2423 15F6  
                   l2319 122A                     l2177 275A                     l1705 2624  
                   l2249 27CA                     l2265 28BC                     l2257 2880  
                   l2273 2962                     l2513 1952                     l2505 1928  
                   l2425 15FE                     l2417 15D8                     l2409 15A2  
                   l2521 29B4                     l1723 2004                     l2259 288E  
                   l1811 240A                     l2507 1932                     l2443 16CC  
                   l2427 160C                     l2371 13D8                     l1901 2846  
                   l1821 2438                     l2509 193A                     l2445 16DA  
                   l2437 16B2                     l2381 1450                     l2373 1408  
                   l2365 13A2                     l2357 133E                     l2285 110A  
                   l2517 196E                     l1751 2086                     l1735 203A  
                   l1815 241C                     l2471 1850                     l2455 1710  
                   l2439 16BE                     l2391 14C0                     l2375 1418  
                   l2295 114A                     l1681 258E                     l1753 2092  
                   l1745 2062                     l1729 202E                     l1841 264A  
                   l1905 2852                     l1825 244A                     l2465 1836  
                   l2449 16F6                     l2393 14EE                     l2385 1474  
                   l2369 13C8                     l2473 185C                     l2289 111C  
                   l1931 290E                     l1923 28FA                     l1691 25F2  
                   l1683 259A                     l1771 211C                     l1763 20CA  
                   l1755 209E                     l1819 2432                     l2483 1892  
                   l2467 1842                     l2459 1760                     l2387 147E  
                   l2395 14FC                     l1693 25FE                     l1685 25BA  
                   l1677 257E                     l1781 214E                     l1765 20D6  
                   l1757 20A6                     l1853 2672                     l1909 2862  
                   l1829 2460                     l2493 18D8                     l1927 2902  
                   l1919 28F0                     l1855 267C                     l1847 265C  
                   l1791 23AE                     l2487 18B4                     l2479 1876  
                   l2399 1562                     l1689 25D2                     l1873 26BE  
                   l1865 26A2                     l1857 2684                     l1793 23C8  
                   l1939 291C                     l1699 2612                     l2499 18FA  
                   l1869 26AE                     l1893 281E                     l1885 2802  
                   l1797 23D6                     l1895 2828                     l1897 2830  
                   l1889 2810                     l1985 1F70                     l1977 1EAC  
                   l1999 1ABA                     STR_1 1077                     STR_2 10BA  
                   u2161 2186                     u2181 21A4                     u1801 23BE  
                   u2610 12E4                     u1571 1FC2                     u2371 2498  
                   u1581 1FD6                     u2390 24C4                     u2615 12DA  
                   u2800 16EA                     u2395 24BC             printf@tmpval 0058  
                   u1781 23A0                     _TRMT 007D61                     _main 29AE  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000             ___ftmul@cntr 0022             ___param_bank 000010  
           ___ftmul@sign 0023             ___fttol@exp1 0039             ___fttol@lval 0035  
                  ?_main 0001          __end_of___awdiv 26CA          __end_of___ftadd 2176  
        __end_of___awmod 286E          __end_of___ftneg 2A86          __end_of___lldiv 27EC  
        __end_of___ftmul 2488          ___awdiv@divisor 0009          __end_of___llmod 28DE  
        __end_of___ftsub 2A3A          __end_of___fttol 256E          ___awdiv@counter 000B  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _TXREG 000FAD  
                  _TXSTA 000FAC             ___lltoft@exp 0011          __end_of_dpowers 1029  
                  _scale 198E          __end_of_isdigit 2AA8            ___ftpack@sign 0005  
                  _putch 2ABC                    main@t 0064           __CFG_BOREN$OFF 000000  
                  tablat 000FF5                    status 000FD8          __initialization 2ACA  
           __end_of_main 29F6                   ??_main 0064            ___fttol@sign1 0034  
          __activetblptr 000002     __size_of__tdiv_to_l_ 0110         ___llmod@dividend 0001  
                 ?_scale 0024         ___awdiv@dividend 0007                   ?_putch 0001  
       __end_of___ftpack 2634         __end_of___lltoft 29AE                   _OSCCON 000FD3  
                 _SPBRGH 000FB0         __end_of__powers_ 1077       __size_of_OpenUSART 0070  
                 ___ftge 26CA                   ___wmul 2A3A                ??___awdiv 000B  
              ??___ftadd 0034                ??___awmod 0005                ??___ftneg 0004  
              ??___lldiv 0009                ??___ftmul 001B                ??___llmod 0009  
              ??___ftsub 0040                ??___fttol 002F                   _fround 1D6E  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
                 _printf 10FE    ___ftmul@f3_as_product 001F                ??_isdigit 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001               __accesstop 0080  
__end_of__initialization 2ACA               ___ftadd@f1 002E               ___ftadd@f2 0031  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftneg@f1 0001               ___ftmul@f1 0015               ___ftmul@f2 0018  
             ___ftsub@f1 003A               ___ftsub@f2 003D               ___fttol@f1 002B  
         __pcstackCOMRAM 0001               ___lltoft@c 0009            __end_of_scale 1D6E  
          __end_of_putch 2ACA               __div_to_l_ 2286        __end_of_OpenUSART 294E  
        __div_to_l_@exp1 000C          __div_to_l_@cntr 000B                  ??_scale 0027  
        __div_to_l_@quot 0007                  ??_putch 0001       __size_of_init_UART 0014  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004                  ?___ftge 0001  
                ?___wmul 000F                  ?_fround 0024                ?___ftpack 0001  
                ?_printf 0040                ?___lltoft 0009        __end_of__npowers_ 1050  
                __Hparam 0000                  __Lparam 0000          __size_of___ftge 0096  
                ___awdiv 2634                  ___ftadd 1FB2                  ___awmod 27EC  
                ___ftneg 2A62                  ___lldiv 2760          __size_of___wmul 0028  
                ___ftmul 2390                  ___llmod 286E                  ___ftsub 29F6  
                ___fttol 2488               _fround$908 002A               _fround$909 0027  
           __psmallconst 1000                  __pcinit 2ACA               ??___ftpack 0006  
        __size_of_fround 0244                  __ramtop 1000               ??___lltoft 000D  
                __ptext0 29AE                  __ptext1 10FE                  __ptext2 198E  
                __ptext3 2ABC                  __ptext4 2A86                  __ptext5 1D6E  
                __ptext6 2A3A                  __ptext7 2390                  __ptext8 27EC  
                __ptext9 2634          __size_of_printf 0890        __end_of_init_UART 2ABC  
            ?__div_to_l_ 0001                  _dpowers 1001                  _isdigit 2A86  
       ___awmod@dividend 0001     end_of_initialization 2ACA            __Lmediumconst 0000  
        ___lldiv@divisor 0005          ___lldiv@counter 000D                _RCSTAbits 000FAB  
                printf@c 0063                  printf@f 0040                  postdec2 000FDD  
                postinc2 000FDE           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
             _printf$911 004B            ??__tdiv_to_l_ 0007                _TRISCbits 000F94  
            printf@width 0056                _TXSTAbits 000FAC      __size_of__div_to_l_ 010A  
            ___ftmul@exp 001E           __end_of___ftge 2760           __end_of___wmul 2A62  
         __end_of_fround 1FB2           __end_of_printf 198E      start_initialization 2ACA  
    __end_of__tdiv_to_l_ 2286                _OpenUSART 28DE          ___llmod@divisor 0005  
       __CFG_OSC$INTIO67 000000          ___llmod@counter 0009                 ??___ftge 0007  
               ??___wmul 0013                 ??_fround 0027                 ??_printf 0045  
             fround@prec 002D        __size_of___ftpack 00C6        __size_of___lltoft 0060  
             ?_OpenUSART 0001                 ?___awdiv 0007                 ?___ftadd 002E  
               ?___awmod 0001                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0015                 ?___llmod 0001                 ?___ftsub 003A  
              __npowers_ 1029                 ?___fttol 002B              __tdiv_to_l_ 2176  
           ??__div_to_l_ 0007              __smallconst 1000                 ?_isdigit 0001  
              _scale$910 0027                _init_UART 2AA8           __size_of_scale 03E0  
         __size_of_putch 000E           ___wmul@product 0013                 _PIE1bits 000F9D  
               _PIR1bits 000F9E       __end_of__div_to_l_ 2390        ___wmul@multiplier 000F  
             printf@flag 0054               printf@fval 005E               printf@prec 0061  
             ?_init_UART 0001              ??_OpenUSART 0003          OpenUSART@config 0003  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0096  
       __size_of___ftadd 01C4         __size_of___awmod 0082         __size_of___ftneg 0024  
       __size_of___lldiv 008C         __size_of___ftmul 00F8         __size_of___llmod 0070  
       __size_of___ftsub 0044         __size_of___fttol 00E6                 ___ftpack 256E  
               ___lltoft 294E              _isdigit$680 0002         __size_of_isdigit 0022  
               __ptext10 2176                 __ptext11 2286                 __ptext20 26CA  
               __ptext12 294E                 __ptext21 2AA8                 __ptext13 286E  
               __ptext22 28DE                 __ptext14 2760                 __ptext15 2488  
               __ptext16 29F6                 __ptext17 1FB2                 __ptext18 256E  
               __ptext19 2A62                 __powers_ 1050            __size_of_main 0048  
              printf@exp 005C                printf@val 0050           OpenUSART@spbrg 0001  
            ??_init_UART 0004                 isdigit@c 0003                 scale@scl 002A  
       __tdiv_to_l_@exp1 000F         __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A  
       ___lldiv@dividend 0001                 printf@ap 004E             ?__tdiv_to_l_ 0001  
       ___lldiv@quotient 0009  
