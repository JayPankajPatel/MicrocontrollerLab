

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 04 10:02:47 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataCOMRAM
    84  001B56                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _day
    88  001B56  04                 	db	4
    89                           
    90                           ;initializer for _dow
    91  001B57  03                 	db	3
    92                           
    93                           ;initializer for _hour
    94  001B58  02                 	db	2
    95                           
    96                           ;initializer for _minute
    97  001B59  01                 	db	1
    98                           
    99                           ;initializer for _month
   100  001B5A  05                 	db	5
   101                           
   102                           ;initializer for _tempSecond
   103  001B5B  FF                 	db	255
   104                           
   105                           ;initializer for _wrap
   106  001B5C  01                 	db	1
   107                           
   108                           ;initializer for _year
   109  001B5D  06                 	db	6
   110                           
   111                           	psect	idataBANK0
   112  001708                     __pidataBANK0:
   113                           	opt stack 0
   114                           
   115                           ;initializer for _color
   116  001708  F800               	dw	63488
   117  00170A  F800               	dw	63488
   118  00170C  F800               	dw	63488
   119  00170E  001F               	dw	31
   120  001710  001F               	dw	31
   121  001712  07E0               	dw	2016
   122  001714  F81F               	dw	63519
   123  001716  F81F               	dw	63519
   124  001718  F81F               	dw	63519
   125  00171A  0000               	dw	0
   126  00171C  0000               	dw	0
   127  00171E  0000               	dw	0
   128  001720  0000               	dw	0
   129  001722  0000               	dw	0
   130  001724  0000               	dw	0
   131  001726  0000               	dw	0
   132  001728  0000               	dw	0
   133  00172A  0000               	dw	0
   134  00172C  0000               	dw	0
   135  00172E  0000               	dw	0
   136  001730  0000               	dw	0
   137                           
   138                           ;initializer for _array1
   139  001732  A2                 	db	162
   140  001733  62                 	db	98
   141  001734  E2                 	db	226
   142  001735  22                 	db	34
   143  001736  02                 	db	2
   144  001737  C2                 	db	194
   145  001738  E0                 	db	224
   146  001739  A8                 	db	168
   147  00173A  90                 	db	144
   148  00173B  68                 	db	104
   149  00173C  98                 	db	152
   150  00173D  B0                 	db	176
   151  00173E  30                 	db	48
   152  00173F  18                 	db	24
   153  001740  7A                 	db	122
   154  001741  10                 	db	16
   155  001742  38                 	db	56
   156  001743  5A                 	db	90
   157  001744  42                 	db	66
   158  001745  4A                 	db	74
   159  001746  52                 	db	82
   160                           
   161                           	psect	idataBANK1
   162  001530                     __pidataBANK1:
   163                           	opt stack 0
   164                           
   165                           ;initializer for _txt1
   166  001530  43                 	db	67
   167  001531  48                 	db	72
   168  001532  2D                 	db	45
   169  001533  00                 	db	0
   170  001534  43                 	db	67
   171  001535  48                 	db	72
   172  001536  00                 	db	0
   173  001537  00                 	db	0
   174  001538  43                 	db	67
   175  001539  48                 	db	72
   176  00153A  2B                 	db	43
   177  00153B  00                 	db	0
   178  00153C  7C                 	db	124
   179  00153D  3C                 	db	60
   180  00153E  3C                 	db	60
   181  00153F  00                 	db	0
   182  001540  3E                 	db	62
   183  001541  3E                 	db	62
   184  001542  7C                 	db	124
   185  001543  00                 	db	0
   186  001544  3E                 	db	62
   187  001545  7C                 	db	124
   188  001546  7C                 	db	124
   189  001547  00                 	db	0
   190  001548  20                 	db	32
   191  001549  2D                 	db	45
   192  00154A  20                 	db	32
   193  00154B  00                 	db	0
   194  00154C  20                 	db	32
   195  00154D  2B                 	db	43
   196  00154E  20                 	db	32
   197  00154F  00                 	db	0
   198  001550  45                 	db	69
   199  001551  51                 	db	81
   200  001552  20                 	db	32
   201  001553  00                 	db	0
   202  001554  20                 	db	32
   203  001555  30                 	db	48
   204  001556  20                 	db	32
   205  001557  00                 	db	0
   206  001558  31                 	db	49
   207  001559  30                 	db	48
   208  00155A  30                 	db	48
   209  00155B  00                 	db	0
   210  00155C  32                 	db	50
   211  00155D  30                 	db	48
   212  00155E  30                 	db	48
   213  00155F  00                 	db	0
   214  001560  20                 	db	32
   215  001561  31                 	db	49
   216  001562  20                 	db	32
   217  001563  00                 	db	0
   218  001564  20                 	db	32
   219  001565  32                 	db	50
   220  001566  20                 	db	32
   221  001567  00                 	db	0
   222  001568  20                 	db	32
   223  001569  33                 	db	51
   224  00156A  20                 	db	32
   225  00156B  00                 	db	0
   226  00156C  20                 	db	32
   227  00156D  34                 	db	52
   228  00156E  20                 	db	32
   229  00156F  00                 	db	0
   230  001570  20                 	db	32
   231  001571  35                 	db	53
   232  001572  20                 	db	32
   233  001573  00                 	db	0
   234  001574  20                 	db	32
   235  001575  36                 	db	54
   236  001576  20                 	db	32
   237  001577  00                 	db	0
   238  001578  20                 	db	32
   239  001579  37                 	db	55
   240  00157A  20                 	db	32
   241  00157B  00                 	db	0
   242  00157C  20                 	db	32
   243  00157D  38                 	db	56
   244  00157E  20                 	db	32
   245  00157F  00                 	db	0
   246  001580  20                 	db	32
   247  001581  39                 	db	57
   248  001582  20                 	db	32
   249  001583  00                 	db	0
   250                           
   251                           	psect	mediumconst
   252  00FD38                     __pmediumconst:
   253                           	opt stack 0
   254  00FD38  00                 	db	0
   255  00FD39                     _font:
   256                           	opt stack 0
   257  00FD39  00                 	db	0
   258  00FD3A  00                 	db	0
   259  00FD3B  00                 	db	0
   260  00FD3C  00                 	db	0
   261  00FD3D  00                 	db	0
   262  00FD3E  00                 	db	0
   263  00FD3F  00                 	db	0
   264  00FD40  5F                 	db	95
   265  00FD41  00                 	db	0
   266  00FD42  00                 	db	0
   267  00FD43  00                 	db	0
   268  00FD44  07                 	db	7
   269  00FD45  00                 	db	0
   270  00FD46  07                 	db	7
   271  00FD47  00                 	db	0
   272  00FD48  14                 	db	20
   273  00FD49  7F                 	db	127
   274  00FD4A  14                 	db	20
   275  00FD4B  7F                 	db	127
   276  00FD4C  14                 	db	20
   277  00FD4D  24                 	db	36
   278  00FD4E  2A                 	db	42
   279  00FD4F  7F                 	db	127
   280  00FD50  2A                 	db	42
   281  00FD51  12                 	db	18
   282  00FD52  23                 	db	35
   283  00FD53  13                 	db	19
   284  00FD54  08                 	db	8
   285  00FD55  64                 	db	100
   286  00FD56  62                 	db	98
   287  00FD57  36                 	db	54
   288  00FD58  49                 	db	73
   289  00FD59  56                 	db	86
   290  00FD5A  20                 	db	32
   291  00FD5B  50                 	db	80
   292  00FD5C  00                 	db	0
   293  00FD5D  08                 	db	8
   294  00FD5E  07                 	db	7
   295  00FD5F  03                 	db	3
   296  00FD60  00                 	db	0
   297  00FD61  00                 	db	0
   298  00FD62  1C                 	db	28
   299  00FD63  22                 	db	34
   300  00FD64  41                 	db	65
   301  00FD65  00                 	db	0
   302  00FD66  00                 	db	0
   303  00FD67  41                 	db	65
   304  00FD68  22                 	db	34
   305  00FD69  1C                 	db	28
   306  00FD6A  00                 	db	0
   307  00FD6B  2A                 	db	42
   308  00FD6C  1C                 	db	28
   309  00FD6D  7F                 	db	127
   310  00FD6E  1C                 	db	28
   311  00FD6F  2A                 	db	42
   312  00FD70  08                 	db	8
   313  00FD71  08                 	db	8
   314  00FD72  3E                 	db	62
   315  00FD73  08                 	db	8
   316  00FD74  08                 	db	8
   317  00FD75  00                 	db	0
   318  00FD76  80                 	db	128
   319  00FD77  70                 	db	112
   320  00FD78  30                 	db	48
   321  00FD79  00                 	db	0
   322  00FD7A  08                 	db	8
   323  00FD7B  08                 	db	8
   324  00FD7C  08                 	db	8
   325  00FD7D  08                 	db	8
   326  00FD7E  08                 	db	8
   327  00FD7F  00                 	db	0
   328  00FD80  00                 	db	0
   329  00FD81  60                 	db	96
   330  00FD82  60                 	db	96
   331  00FD83  00                 	db	0
   332  00FD84  20                 	db	32
   333  00FD85  10                 	db	16
   334  00FD86  08                 	db	8
   335  00FD87  04                 	db	4
   336  00FD88  02                 	db	2
   337  00FD89  3E                 	db	62
   338  00FD8A  51                 	db	81
   339  00FD8B  49                 	db	73
   340  00FD8C  45                 	db	69
   341  00FD8D  3E                 	db	62
   342  00FD8E  00                 	db	0
   343  00FD8F  42                 	db	66
   344  00FD90  7F                 	db	127
   345  00FD91  40                 	db	64
   346  00FD92  00                 	db	0
   347  00FD93  72                 	db	114
   348  00FD94  49                 	db	73
   349  00FD95  49                 	db	73
   350  00FD96  49                 	db	73
   351  00FD97  46                 	db	70
   352  00FD98  21                 	db	33
   353  00FD99  41                 	db	65
   354  00FD9A  49                 	db	73
   355  00FD9B  4D                 	db	77
   356  00FD9C  33                 	db	51
   357  00FD9D  18                 	db	24
   358  00FD9E  14                 	db	20
   359  00FD9F  12                 	db	18
   360  00FDA0  7F                 	db	127
   361  00FDA1  10                 	db	16
   362  00FDA2  27                 	db	39
   363  00FDA3  45                 	db	69
   364  00FDA4  45                 	db	69
   365  00FDA5  45                 	db	69
   366  00FDA6  39                 	db	57
   367  00FDA7  3C                 	db	60
   368  00FDA8  4A                 	db	74
   369  00FDA9  49                 	db	73
   370  00FDAA  49                 	db	73
   371  00FDAB  31                 	db	49
   372  00FDAC  41                 	db	65
   373  00FDAD  21                 	db	33
   374  00FDAE  11                 	db	17
   375  00FDAF  09                 	db	9
   376  00FDB0  07                 	db	7
   377  00FDB1  36                 	db	54
   378  00FDB2  49                 	db	73
   379  00FDB3  49                 	db	73
   380  00FDB4  49                 	db	73
   381  00FDB5  36                 	db	54
   382  00FDB6  46                 	db	70
   383  00FDB7  49                 	db	73
   384  00FDB8  49                 	db	73
   385  00FDB9  29                 	db	41
   386  00FDBA  1E                 	db	30
   387  00FDBB  00                 	db	0
   388  00FDBC  00                 	db	0
   389  00FDBD  14                 	db	20
   390  00FDBE  00                 	db	0
   391  00FDBF  00                 	db	0
   392  00FDC0  00                 	db	0
   393  00FDC1  40                 	db	64
   394  00FDC2  34                 	db	52
   395  00FDC3  00                 	db	0
   396  00FDC4  00                 	db	0
   397  00FDC5  00                 	db	0
   398  00FDC6  08                 	db	8
   399  00FDC7  14                 	db	20
   400  00FDC8  22                 	db	34
   401  00FDC9  41                 	db	65
   402  00FDCA  14                 	db	20
   403  00FDCB  14                 	db	20
   404  00FDCC  14                 	db	20
   405  00FDCD  14                 	db	20
   406  00FDCE  14                 	db	20
   407  00FDCF  00                 	db	0
   408  00FDD0  41                 	db	65
   409  00FDD1  22                 	db	34
   410  00FDD2  14                 	db	20
   411  00FDD3  08                 	db	8
   412  00FDD4  02                 	db	2
   413  00FDD5  01                 	db	1
   414  00FDD6  59                 	db	89
   415  00FDD7  09                 	db	9
   416  00FDD8  06                 	db	6
   417  00FDD9  3E                 	db	62
   418  00FDDA  41                 	db	65
   419  00FDDB  5D                 	db	93
   420  00FDDC  59                 	db	89
   421  00FDDD  4E                 	db	78
   422  00FDDE  7C                 	db	124
   423  00FDDF  12                 	db	18
   424  00FDE0  11                 	db	17
   425  00FDE1  12                 	db	18
   426  00FDE2  7C                 	db	124
   427  00FDE3  7F                 	db	127
   428  00FDE4  49                 	db	73
   429  00FDE5  49                 	db	73
   430  00FDE6  49                 	db	73
   431  00FDE7  36                 	db	54
   432  00FDE8  3E                 	db	62
   433  00FDE9  41                 	db	65
   434  00FDEA  41                 	db	65
   435  00FDEB  41                 	db	65
   436  00FDEC  22                 	db	34
   437  00FDED  7F                 	db	127
   438  00FDEE  41                 	db	65
   439  00FDEF  41                 	db	65
   440  00FDF0  41                 	db	65
   441  00FDF1  3E                 	db	62
   442  00FDF2  7F                 	db	127
   443  00FDF3  49                 	db	73
   444  00FDF4  49                 	db	73
   445  00FDF5  49                 	db	73
   446  00FDF6  41                 	db	65
   447  00FDF7  7F                 	db	127
   448  00FDF8  09                 	db	9
   449  00FDF9  09                 	db	9
   450  00FDFA  09                 	db	9
   451  00FDFB  01                 	db	1
   452  00FDFC  3E                 	db	62
   453  00FDFD  41                 	db	65
   454  00FDFE  41                 	db	65
   455  00FDFF  51                 	db	81
   456  00FE00  73                 	db	115
   457  00FE01  7F                 	db	127
   458  00FE02  08                 	db	8
   459  00FE03  08                 	db	8
   460  00FE04  08                 	db	8
   461  00FE05  7F                 	db	127
   462  00FE06  00                 	db	0
   463  00FE07  41                 	db	65
   464  00FE08  7F                 	db	127
   465  00FE09  41                 	db	65
   466  00FE0A  00                 	db	0
   467  00FE0B  20                 	db	32
   468  00FE0C  40                 	db	64
   469  00FE0D  41                 	db	65
   470  00FE0E  3F                 	db	63
   471  00FE0F  01                 	db	1
   472  00FE10  7F                 	db	127
   473  00FE11  08                 	db	8
   474  00FE12  14                 	db	20
   475  00FE13  22                 	db	34
   476  00FE14  41                 	db	65
   477  00FE15  7F                 	db	127
   478  00FE16  40                 	db	64
   479  00FE17  40                 	db	64
   480  00FE18  40                 	db	64
   481  00FE19  40                 	db	64
   482  00FE1A  7F                 	db	127
   483  00FE1B  02                 	db	2
   484  00FE1C  1C                 	db	28
   485  00FE1D  02                 	db	2
   486  00FE1E  7F                 	db	127
   487  00FE1F  7F                 	db	127
   488  00FE20  04                 	db	4
   489  00FE21  08                 	db	8
   490  00FE22  10                 	db	16
   491  00FE23  7F                 	db	127
   492  00FE24  3E                 	db	62
   493  00FE25  41                 	db	65
   494  00FE26  41                 	db	65
   495  00FE27  41                 	db	65
   496  00FE28  3E                 	db	62
   497  00FE29  7F                 	db	127
   498  00FE2A  09                 	db	9
   499  00FE2B  09                 	db	9
   500  00FE2C  09                 	db	9
   501  00FE2D  06                 	db	6
   502  00FE2E  3E                 	db	62
   503  00FE2F  41                 	db	65
   504  00FE30  51                 	db	81
   505  00FE31  21                 	db	33
   506  00FE32  5E                 	db	94
   507  00FE33  7F                 	db	127
   508  00FE34  09                 	db	9
   509  00FE35  19                 	db	25
   510  00FE36  29                 	db	41
   511  00FE37  46                 	db	70
   512  00FE38                     __end_of_font:
   513                           	opt stack 0
   514  00FE38                     _font2:
   515                           	opt stack 0
   516  00FE38  26                 	db	38
   517  00FE39  49                 	db	73
   518  00FE3A  49                 	db	73
   519  00FE3B  49                 	db	73
   520  00FE3C  32                 	db	50
   521  00FE3D  03                 	db	3
   522  00FE3E  01                 	db	1
   523  00FE3F  7F                 	db	127
   524  00FE40  01                 	db	1
   525  00FE41  03                 	db	3
   526  00FE42  3F                 	db	63
   527  00FE43  40                 	db	64
   528  00FE44  40                 	db	64
   529  00FE45  40                 	db	64
   530  00FE46  3F                 	db	63
   531  00FE47  1F                 	db	31
   532  00FE48  20                 	db	32
   533  00FE49  40                 	db	64
   534  00FE4A  20                 	db	32
   535  00FE4B  1F                 	db	31
   536  00FE4C  3F                 	db	63
   537  00FE4D  40                 	db	64
   538  00FE4E  38                 	db	56
   539  00FE4F  40                 	db	64
   540  00FE50  3F                 	db	63
   541  00FE51  63                 	db	99
   542  00FE52  14                 	db	20
   543  00FE53  08                 	db	8
   544  00FE54  14                 	db	20
   545  00FE55  63                 	db	99
   546  00FE56  03                 	db	3
   547  00FE57  04                 	db	4
   548  00FE58  78                 	db	120
   549  00FE59  04                 	db	4
   550  00FE5A  03                 	db	3
   551  00FE5B  61                 	db	97
   552  00FE5C  59                 	db	89
   553  00FE5D  49                 	db	73
   554  00FE5E  4D                 	db	77
   555  00FE5F  43                 	db	67
   556  00FE60  00                 	db	0
   557  00FE61  7F                 	db	127
   558  00FE62  41                 	db	65
   559  00FE63  41                 	db	65
   560  00FE64  41                 	db	65
   561  00FE65  02                 	db	2
   562  00FE66  04                 	db	4
   563  00FE67  08                 	db	8
   564  00FE68  10                 	db	16
   565  00FE69  20                 	db	32
   566  00FE6A  00                 	db	0
   567  00FE6B  41                 	db	65
   568  00FE6C  41                 	db	65
   569  00FE6D  41                 	db	65
   570  00FE6E  7F                 	db	127
   571  00FE6F  04                 	db	4
   572  00FE70  02                 	db	2
   573  00FE71  01                 	db	1
   574  00FE72  02                 	db	2
   575  00FE73  04                 	db	4
   576  00FE74  40                 	db	64
   577  00FE75  40                 	db	64
   578  00FE76  40                 	db	64
   579  00FE77  40                 	db	64
   580  00FE78  40                 	db	64
   581  00FE79  00                 	db	0
   582  00FE7A  03                 	db	3
   583  00FE7B  07                 	db	7
   584  00FE7C  08                 	db	8
   585  00FE7D  00                 	db	0
   586  00FE7E  20                 	db	32
   587  00FE7F  54                 	db	84
   588  00FE80  54                 	db	84
   589  00FE81  78                 	db	120
   590  00FE82  40                 	db	64
   591  00FE83  7F                 	db	127
   592  00FE84  28                 	db	40
   593  00FE85  44                 	db	68
   594  00FE86  44                 	db	68
   595  00FE87  38                 	db	56
   596  00FE88  38                 	db	56
   597  00FE89  44                 	db	68
   598  00FE8A  44                 	db	68
   599  00FE8B  44                 	db	68
   600  00FE8C  28                 	db	40
   601  00FE8D  38                 	db	56
   602  00FE8E  44                 	db	68
   603  00FE8F  44                 	db	68
   604  00FE90  28                 	db	40
   605  00FE91  7F                 	db	127
   606  00FE92  38                 	db	56
   607  00FE93  54                 	db	84
   608  00FE94  54                 	db	84
   609  00FE95  54                 	db	84
   610  00FE96  18                 	db	24
   611  00FE97  00                 	db	0
   612  00FE98  08                 	db	8
   613  00FE99  7E                 	db	126
   614  00FE9A  09                 	db	9
   615  00FE9B  02                 	db	2
   616  00FE9C  18                 	db	24
   617  00FE9D  A4                 	db	164
   618  00FE9E  A4                 	db	164
   619  00FE9F  9C                 	db	156
   620  00FEA0  78                 	db	120
   621  00FEA1  7F                 	db	127
   622  00FEA2  08                 	db	8
   623  00FEA3  04                 	db	4
   624  00FEA4  04                 	db	4
   625  00FEA5  78                 	db	120
   626  00FEA6  00                 	db	0
   627  00FEA7  44                 	db	68
   628  00FEA8  7D                 	db	125
   629  00FEA9  40                 	db	64
   630  00FEAA  00                 	db	0
   631  00FEAB  20                 	db	32
   632  00FEAC  40                 	db	64
   633  00FEAD  40                 	db	64
   634  00FEAE  3D                 	db	61
   635  00FEAF  00                 	db	0
   636  00FEB0  7F                 	db	127
   637  00FEB1  10                 	db	16
   638  00FEB2  28                 	db	40
   639  00FEB3  44                 	db	68
   640  00FEB4  00                 	db	0
   641  00FEB5  00                 	db	0
   642  00FEB6  41                 	db	65
   643  00FEB7  7F                 	db	127
   644  00FEB8  40                 	db	64
   645  00FEB9  00                 	db	0
   646  00FEBA  7C                 	db	124
   647  00FEBB  04                 	db	4
   648  00FEBC  78                 	db	120
   649  00FEBD  04                 	db	4
   650  00FEBE  78                 	db	120
   651  00FEBF  7C                 	db	124
   652  00FEC0  08                 	db	8
   653  00FEC1  04                 	db	4
   654  00FEC2  04                 	db	4
   655  00FEC3  78                 	db	120
   656  00FEC4  38                 	db	56
   657  00FEC5  44                 	db	68
   658  00FEC6  44                 	db	68
   659  00FEC7  44                 	db	68
   660  00FEC8  38                 	db	56
   661  00FEC9  FC                 	db	252
   662  00FECA  18                 	db	24
   663  00FECB  24                 	db	36
   664  00FECC  24                 	db	36
   665  00FECD  18                 	db	24
   666  00FECE  18                 	db	24
   667  00FECF  24                 	db	36
   668  00FED0  24                 	db	36
   669  00FED1  18                 	db	24
   670  00FED2  FC                 	db	252
   671  00FED3  7C                 	db	124
   672  00FED4  08                 	db	8
   673  00FED5  04                 	db	4
   674  00FED6  04                 	db	4
   675  00FED7  08                 	db	8
   676  00FED8  48                 	db	72
   677  00FED9  54                 	db	84
   678  00FEDA  54                 	db	84
   679  00FEDB  54                 	db	84
   680  00FEDC  24                 	db	36
   681  00FEDD  04                 	db	4
   682  00FEDE  04                 	db	4
   683  00FEDF  3F                 	db	63
   684  00FEE0  44                 	db	68
   685  00FEE1  24                 	db	36
   686  00FEE2  3C                 	db	60
   687  00FEE3  40                 	db	64
   688  00FEE4  40                 	db	64
   689  00FEE5  20                 	db	32
   690  00FEE6  7C                 	db	124
   691  00FEE7  1C                 	db	28
   692  00FEE8  20                 	db	32
   693  00FEE9  40                 	db	64
   694  00FEEA  20                 	db	32
   695  00FEEB  1C                 	db	28
   696  00FEEC  3C                 	db	60
   697  00FEED  40                 	db	64
   698  00FEEE  30                 	db	48
   699  00FEEF  40                 	db	64
   700  00FEF0  3C                 	db	60
   701  00FEF1  44                 	db	68
   702  00FEF2  28                 	db	40
   703  00FEF3  10                 	db	16
   704  00FEF4  28                 	db	40
   705  00FEF5  44                 	db	68
   706  00FEF6  4C                 	db	76
   707  00FEF7  90                 	db	144
   708  00FEF8  90                 	db	144
   709  00FEF9  90                 	db	144
   710  00FEFA  7C                 	db	124
   711  00FEFB  44                 	db	68
   712  00FEFC  64                 	db	100
   713  00FEFD  54                 	db	84
   714  00FEFE  4C                 	db	76
   715  00FEFF  44                 	db	68
   716  00FF00  00                 	db	0
   717  00FF01  08                 	db	8
   718  00FF02  36                 	db	54
   719  00FF03  41                 	db	65
   720  00FF04  00                 	db	0
   721  00FF05  00                 	db	0
   722  00FF06  00                 	db	0
   723  00FF07  77                 	db	119
   724  00FF08  00                 	db	0
   725  00FF09  00                 	db	0
   726  00FF0A  00                 	db	0
   727  00FF0B  41                 	db	65
   728  00FF0C  36                 	db	54
   729  00FF0D  08                 	db	8
   730  00FF0E  00                 	db	0
   731  00FF0F  02                 	db	2
   732  00FF10  01                 	db	1
   733  00FF11  02                 	db	2
   734  00FF12  04                 	db	4
   735  00FF13  02                 	db	2
   736  00FF14                     __end_of_font2:
   737                           	opt stack 0
   738  00FF14                     _dpowers:
   739                           	opt stack 0
   740  00FF14  0001               	dw	1
   741  00FF16  0000               	dw	0
   742  00FF18  000A               	dw	10
   743  00FF1A  0000               	dw	0
   744  00FF1C  0064               	dw	100
   745  00FF1E  0000               	dw	0
   746  00FF20  03E8               	dw	1000
   747  00FF22  0000               	dw	0
   748  00FF24  2710               	dw	10000
   749  00FF26  0000               	dw	0
   750  00FF28  86A0               	dw	34464
   751  00FF2A  0001               	dw	1
   752  00FF2C  4240               	dw	16960
   753  00FF2E  000F               	dw	15
   754  00FF30  9680               	dw	38528
   755  00FF32  0098               	dw	152
   756  00FF34  E100               	dw	57600
   757  00FF36  05F5               	dw	1525
   758  00FF38  CA00               	dw	51712
   759  00FF3A  3B9A               	dw	15258
   760  00FF3C                     __end_of_dpowers:
   761                           	opt stack 0
   762  00FF3C                     _hexpowers:
   763                           	opt stack 0
   764  00FF3C  0001               	dw	1
   765  00FF3E  0000               	dw	0
   766  00FF40  0010               	dw	16
   767  00FF42  0000               	dw	0
   768  00FF44  0100               	dw	256
   769  00FF46  0000               	dw	0
   770  00FF48  1000               	dw	4096
   771  00FF4A  0000               	dw	0
   772  00FF4C  0000               	dw	0
   773  00FF4E  0001               	dw	1
   774  00FF50  0000               	dw	0
   775  00FF52  0010               	dw	16
   776  00FF54  0000               	dw	0
   777  00FF56  0100               	dw	256
   778  00FF58  0000               	dw	0
   779  00FF5A  1000               	dw	4096
   780  00FF5C                     __end_of_hexpowers:
   781                           	opt stack 0
   782  0000                     _ADCON1	set	4033
   783  0000                     _CCP2CON	set	4026
   784  0000                     _CCPR2L	set	4027
   785  0000                     _INTCON2bits	set	4081
   786  0000                     _INTCONbits	set	4082
   787  0000                     _OSCCON	set	4051
   788  0000                     _PIE1bits	set	3997
   789  0000                     _PIR1bits	set	3998
   790  0000                     _PIR2bits	set	4001
   791  0000                     _PORTBbits	set	3969
   792  0000                     _PORTC	set	3970
   793  0000                     _PORTDbits	set	3971
   794  0000                     _PORTEbits	set	3972
   795  0000                     _PR2	set	4043
   796  0000                     _RCSTA	set	4011
   797  0000                     _RCSTAbits	set	4011
   798  0000                     _SPBRG	set	4015
   799  0000                     _SPBRGH	set	4016
   800  0000                     _SSPBUF	set	4041
   801  0000                     _SSPCON1	set	4038
   802  0000                     _SSPSTAT	set	4039
   803  0000                     _SSPSTATbits	set	4039
   804  0000                     _T0CON	set	4053
   805  0000                     _T0CONbits	set	4053
   806  0000                     _T1CON	set	4045
   807  0000                     _T1CONbits	set	4045
   808  0000                     _T2CON	set	4042
   809  0000                     _T3CON	set	4017
   810  0000                     _T3CONbits	set	4017
   811  0000                     _TMR0H	set	4055
   812  0000                     _TMR0L	set	4054
   813  0000                     _TMR1H	set	4047
   814  0000                     _TMR1L	set	4046
   815  0000                     _TRISB	set	3987
   816  0000                     _TRISC	set	3988
   817  0000                     _TRISCbits	set	3988
   818  0000                     _TRISD	set	3989
   819  0000                     _TRISDbits	set	3989
   820  0000                     _TRISE	set	3990
   821  0000                     _TXREG	set	4013
   822  0000                     _TXSTA	set	4012
   823  0000                     _TXSTAbits	set	4012
   824  0000                     _RBPU	set	32655
   825  0000                     _TRMT	set	32097
   826  00FF5C                     STR_2:
   827  00FF5C  20                 	db	32
   828  00FF5D  54                 	db	84	;'T'
   829  00FF5E  65                 	db	101	;'e'
   830  00FF5F  6D                 	db	109	;'m'
   831  00FF60  70                 	db	112	;'p'
   832  00FF61  65                 	db	101	;'e'
   833  00FF62  72                 	db	114	;'r'
   834  00FF63  61                 	db	97	;'a'
   835  00FF64  74                 	db	116	;'t'
   836  00FF65  75                 	db	117	;'u'
   837  00FF66  72                 	db	114	;'r'
   838  00FF67  65                 	db	101	;'e'
   839  00FF68  20                 	db	32
   840  00FF69  3D                 	db	61	;'='
   841  00FF6A  20                 	db	32
   842  00FF6B  25                 	db	37
   843  00FF6C  64                 	db	100	;'d'
   844  00FF6D  20                 	db	32
   845  00FF6E  64                 	db	100	;'d'
   846  00FF6F  65                 	db	101	;'e'
   847  00FF70  67                 	db	103	;'g'
   848  00FF71  72                 	db	114	;'r'
   849  00FF72  65                 	db	101	;'e'
   850  00FF73  65                 	db	101	;'e'
   851  00FF74  73                 	db	115	;'s'
   852  00FF75  43                 	db	67	;'C'
   853  00FF76  20                 	db	32
   854  00FF77  3D                 	db	61	;'='
   855  00FF78  20                 	db	32
   856  00FF79  25                 	db	37
   857  00FF7A  64                 	db	100	;'d'
   858  00FF7B  20                 	db	32
   859  00FF7C  64                 	db	100	;'d'
   860  00FF7D  65                 	db	101	;'e'
   861  00FF7E  67                 	db	103	;'g'
   862  00FF7F  72                 	db	114	;'r'
   863  00FF80  65                 	db	101	;'e'
   864  00FF81  65                 	db	101	;'e'
   865  00FF82  73                 	db	115	;'s'
   866  00FF83  46                 	db	70	;'F'
   867  00FF84  0D                 	db	13
   868  00FF85  0A                 	db	10
   869  00FF86  00                 	db	0
   870  00FF87                     STR_1:
   871  00FF87  25                 	db	37
   872  00FF88  30                 	db	48	;'0'
   873  00FF89  32                 	db	50	;'2'
   874  00FF8A  78                 	db	120	;'x'
   875  00FF8B  3A                 	db	58	;':'
   876  00FF8C  25                 	db	37
   877  00FF8D  30                 	db	48	;'0'
   878  00FF8E  32                 	db	50	;'2'
   879  00FF8F  78                 	db	120	;'x'
   880  00FF90  3A                 	db	58	;':'
   881  00FF91  25                 	db	37
   882  00FF92  30                 	db	48	;'0'
   883  00FF93  32                 	db	50	;'2'
   884  00FF94  78                 	db	120	;'x'
   885  00FF95  20                 	db	32
   886  00FF96  25                 	db	37
   887  00FF97  30                 	db	48	;'0'
   888  00FF98  32                 	db	50	;'2'
   889  00FF99  78                 	db	120	;'x'
   890  00FF9A  2F                 	db	47
   891  00FF9B  25                 	db	37
   892  00FF9C  30                 	db	48	;'0'
   893  00FF9D  32                 	db	50	;'2'
   894  00FF9E  78                 	db	120	;'x'
   895  00FF9F  2F                 	db	47
   896  00FFA0  25                 	db	37
   897  00FFA1  30                 	db	48	;'0'
   898  00FFA2  32                 	db	50	;'2'
   899  00FFA3  78                 	db	120	;'x'
   900  00FFA4  00                 	db	0
   901  00FFA5                     STR_4:
   902  00FFA5  0D                 	db	13
   903  00FFA6  0A                 	db	10
   904  00FFA7  20                 	db	32
   905  00FFA8  4E                 	db	78	;'N'
   906  00FFA9  65                 	db	101	;'e'
   907  00FFAA  77                 	db	119	;'w'
   908  00FFAB  20                 	db	32
   909  00FFAC  54                 	db	84	;'T'
   910  00FFAD  69                 	db	105	;'i'
   911  00FFAE  6D                 	db	109	;'m'
   912  00FFAF  65                 	db	101	;'e'
   913  00FFB0  20                 	db	32
   914  00FFB1  53                 	db	83	;'S'
   915  00FFB2  65                 	db	101	;'e'
   916  00FFB3  74                 	db	116	;'t'
   917  00FFB4  21                 	db	33
   918  00FFB5  20                 	db	32
   919  00FFB6  0D                 	db	13
   920  00FFB7  0A                 	db	10
   921  00FFB8  20                 	db	32
   922  00FFB9  0D                 	db	13
   923  00FFBA  0A                 	db	10
   924  00FFBB  00                 	db	0
   925  00FFBC                     STR_3:
   926  00FFBC  4E                 	db	78	;'N'
   927  00FFBD  45                 	db	69	;'E'
   928  00FFBE  43                 	db	67	;'C'
   929  00FFBF  5F                 	db	95	;'_'
   930  00FFC0  43                 	db	67	;'C'
   931  00FFC1  6F                 	db	111	;'o'
   932  00FFC2  64                 	db	100	;'d'
   933  00FFC3  65                 	db	101	;'e'
   934  00FFC4  20                 	db	32
   935  00FFC5  3D                 	db	61	;'='
   936  00FFC6  20                 	db	32
   937  00FFC7  25                 	db	37
   938  00FFC8  30                 	db	48	;'0'
   939  00FFC9  38                 	db	56	;'8'
   940  00FFCA  6C                 	db	108	;'l'
   941  00FFCB  78                 	db	120	;'x'
   942  00FFCC  20                 	db	32
   943  00FFCD  25                 	db	37
   944  00FFCE  78                 	db	120	;'x'
   945  00FFCF  0D                 	db	13
   946  00FFD0  0A                 	db	10
   947  00FFD1  00                 	db	0
   948  00FFD2                     STR_5:
   949  00FFD2  45                 	db	69	;'E'
   950  00FFD3  43                 	db	67	;'C'
   951  00FFD4  45                 	db	69	;'E'
   952  00FFD5  33                 	db	51	;'3'
   953  00FFD6  33                 	db	51	;'3'
   954  00FFD7  30                 	db	48	;'0'
   955  00FFD8  31                 	db	49	;'1'
   956  00FFD9  4C                 	db	76	;'L'
   957  00FFDA  20                 	db	32
   958  00FFDB  46                 	db	70	;'F'
   959  00FFDC  61                 	db	97	;'a'
   960  00FFDD  6C                 	db	108	;'l'
   961  00FFDE  6C                 	db	108	;'l'
   962  00FFDF  20                 	db	32
   963  00FFE0  32                 	db	50	;'2'
   964  00FFE1  31                 	db	49	;'1'
   965  00FFE2  2D                 	db	45
   966  00FFE3  53                 	db	83	;'S'
   967  00FFE4  33                 	db	51	;'3'
   968  00FFE5  00                 	db	0
   969  00FFE6                     STR_7:
   970  00FFE6  30                 	db	48	;'0'
   971  00FFE7  31                 	db	49	;'1'
   972  00FFE8  32                 	db	50	;'2'
   973  00FFE9  33                 	db	51	;'3'
   974  00FFEA  34                 	db	52	;'4'
   975  00FFEB  35                 	db	53	;'5'
   976  00FFEC  36                 	db	54	;'6'
   977  00FFED  37                 	db	55	;'7'
   978  00FFEE  38                 	db	56	;'8'
   979  00FFEF  39                 	db	57	;'9'
   980  00FFF0  61                 	db	97	;'a'
   981  00FFF1  62                 	db	98	;'b'
   982  00FFF2  63                 	db	99	;'c'
   983  00FFF3  64                 	db	100	;'d'
   984  00FFF4  65                 	db	101	;'e'
   985  00FFF5  66                 	db	102	;'f'
   986  00FFF6  00                 	db	0
   987  00FFF7                     STR_6:
   988  00FFF7  4C                 	db	76	;'L'
   989  00FFF8  41                 	db	65	;'A'
   990  00FFF9  42                 	db	66	;'B'
   991  00FFFA  20                 	db	32
   992  00FFFB  31                 	db	49	;'1'
   993  00FFFC  30                 	db	48	;'0'
   994  00FFFD  20                 	db	32
   995  00FFFE  00                 	db	0
   996                           
   997                           ; #config settings
   998  00FFFF  00                 	db	0	; dummy byte at the end
   999  0000                     
  1000                           	psect	cinit
  1001  001288                     __pcinit:
  1002                           	opt stack 0
  1003  001288                     start_initialization:
  1004                           	opt stack 0
  1005  001288                     __initialization:
  1006                           	opt stack 0
  1007                           
  1008                           ; Clear objects allocated to BANK0 (31 bytes)
  1009  001288  EE00  F0BF         	lfsr	0,__pbssBANK0
  1010  00128C  0E1F               	movlw	31
  1011  00128E                     clear_0:
  1012  00128E  6AEE               	clrf	postinc0,c
  1013  001290  06E8               	decf	wreg,f,c
  1014  001292  E1FD               	bnz	clear_0
  1015                           
  1016                           ; Clear objects allocated to COMRAM (36 bytes)
  1017  001294  EE00  F044         	lfsr	0,__pbssCOMRAM
  1018  001298  0E24               	movlw	36
  1019  00129A                     clear_1:
  1020  00129A  6AEE               	clrf	postinc0,c
  1021  00129C  06E8               	decf	wreg,f,c
  1022  00129E  E1FD               	bnz	clear_1
  1023                           
  1024                           ; Initialize objects allocated to BANK1 (84 bytes)
  1025                           ; load TBLPTR registers with __pidataBANK1
  1026  0012A0  0E30               	movlw	low __pidataBANK1
  1027  0012A2  6EF6               	movwf	tblptrl,c
  1028  0012A4  0E15               	movlw	high __pidataBANK1
  1029  0012A6  6EF7               	movwf	tblptrh,c
  1030  0012A8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1031  0012AA  6EF8               	movwf	tblptru,c
  1032  0012AC  EE01  F000         	lfsr	0,__pdataBANK1
  1033  0012B0  EE10 F054          	lfsr	1,84
  1034  0012B4                     copy_data0:
  1035  0012B4  0009               	tblrd		*+
  1036  0012B6  CFF5 FFEE          	movff	tablat,postinc0
  1037  0012BA  50E5               	movf	postdec1,w,c
  1038  0012BC  50E1               	movf	fsr1l,w,c
  1039  0012BE  E1FA               	bnz	copy_data0
  1040                           
  1041                           ; Initialize objects allocated to BANK0 (63 bytes)
  1042                           ; load TBLPTR registers with __pidataBANK0
  1043  0012C0  0E08               	movlw	low __pidataBANK0
  1044  0012C2  6EF6               	movwf	tblptrl,c
  1045  0012C4  0E17               	movlw	high __pidataBANK0
  1046  0012C6  6EF7               	movwf	tblptrh,c
  1047  0012C8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1048  0012CA  6EF8               	movwf	tblptru,c
  1049  0012CC  EE00  F080         	lfsr	0,__pdataBANK0
  1050  0012D0  EE10 F03F          	lfsr	1,63
  1051  0012D4                     copy_data1:
  1052  0012D4  0009               	tblrd		*+
  1053  0012D6  CFF5 FFEE          	movff	tablat,postinc0
  1054  0012DA  50E5               	movf	postdec1,w,c
  1055  0012DC  50E1               	movf	fsr1l,w,c
  1056  0012DE  E1FA               	bnz	copy_data1
  1057                           
  1058                           ; Initialize objects allocated to COMRAM (8 bytes)
  1059                           ; load TBLPTR registers with __pidataCOMRAM
  1060  0012E0  0E56               	movlw	low __pidataCOMRAM
  1061  0012E2  6EF6               	movwf	tblptrl,c
  1062  0012E4  0E1B               	movlw	high __pidataCOMRAM
  1063  0012E6  6EF7               	movwf	tblptrh,c
  1064  0012E8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1065  0012EA  6EF8               	movwf	tblptru,c
  1066  0012EC  EE00  F068         	lfsr	0,__pdataCOMRAM
  1067  0012F0  EE10 F008          	lfsr	1,8
  1068  0012F4                     copy_data2:
  1069  0012F4  0009               	tblrd		*+
  1070  0012F6  CFF5 FFEE          	movff	tablat,postinc0
  1071  0012FA  50E5               	movf	postdec1,w,c
  1072  0012FC  50E1               	movf	fsr1l,w,c
  1073  0012FE  E1FA               	bnz	copy_data2
  1074  001300                     end_of_initialization:
  1075                           	opt stack 0
  1076  001300                     __end_of__initialization:
  1077                           	opt stack 0
  1078  001300  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1079  001302  6EF8               	movwf	tblptru,c
  1080  001304  0100               	movlb	0
  1081  001306  EF79  F002         	goto	_main	;jump to C main() function
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           postdec1	equ	0xFE5
  1089                           fsr1l	equ	0xFE1
  1090                           
  1091                           	psect	bssCOMRAM
  1092  000044                     __pbssCOMRAM:
  1093                           	opt stack 0
  1094  000044                     _Nec_code:
  1095                           	opt stack 0
  1096  000044                     	ds	4
  1097  000048                     _Time_Elapsed:
  1098                           	opt stack 0
  1099  000048                     	ds	2
  1100  00004A                     _nbr:
  1101                           	opt stack 0
  1102  00004A                     	ds	2
  1103  00004C                     _nec_ok:
  1104                           	opt stack 0
  1105  00004C                     	ds	2
  1106  00004E                     _txt:
  1107                           	opt stack 0
  1108  00004E                     	ds	2
  1109  000050                     _Nec_code1:
  1110                           	opt stack 0
  1111  000050                     	ds	1
  1112  000051                     _Nec_state:
  1113                           	opt stack 0
  1114  000051                     	ds	1
  1115  000052                     _TempSecond:
  1116                           	opt stack 0
  1117  000052                     	ds	1
  1118  000053                     __tft_type:
  1119                           	opt stack 0
  1120  000053                     	ds	1
  1121  000054                     _alarm_date:
  1122                           	opt stack 0
  1123  000054                     	ds	1
  1124  000055                     _alarm_hour:
  1125                           	opt stack 0
  1126  000055                     	ds	1
  1127  000056                     _alarm_minute:
  1128                           	opt stack 0
  1129  000056                     	ds	1
  1130  000057                     _alarm_second:
  1131                           	opt stack 0
  1132  000057                     	ds	1
  1133  000058                     _bit_count:
  1134                           	opt stack 0
  1135  000058                     	ds	1
  1136  000059                     _colstart:
  1137                           	opt stack 0
  1138  000059                     	ds	1
  1139  00005A                     _found:
  1140                           	opt stack 0
  1141  00005A                     	ds	1
  1142  00005B                     _rowstart:
  1143                           	opt stack 0
  1144  00005B                     	ds	1
  1145  00005C                     _second:
  1146                           	opt stack 0
  1147  00005C                     	ds	1
  1148  00005D                     _setup_alarm_hour:
  1149                           	opt stack 0
  1150  00005D                     	ds	1
  1151  00005E                     _setup_alarm_minute:
  1152                           	opt stack 0
  1153  00005E                     	ds	1
  1154  00005F                     _setup_alarm_second:
  1155                           	opt stack 0
  1156  00005F                     	ds	1
  1157  000060                     _setup_day:
  1158                           	opt stack 0
  1159  000060                     	ds	1
  1160  000061                     _setup_hour:
  1161                           	opt stack 0
  1162  000061                     	ds	1
  1163  000062                     _setup_minute:
  1164                           	opt stack 0
  1165  000062                     	ds	1
  1166  000063                     _setup_month:
  1167                           	opt stack 0
  1168  000063                     	ds	1
  1169  000064                     _setup_second:
  1170                           	opt stack 0
  1171  000064                     	ds	1
  1172  000065                     _setup_year:
  1173                           	opt stack 0
  1174  000065                     	ds	1
  1175  000066                     _tempC:
  1176                           	opt stack 0
  1177  000066                     	ds	1
  1178  000067                     _tempF:
  1179                           	opt stack 0
  1180  000067                     	ds	1
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           postinc0	equ	0xFEE
  1186                           wreg	equ	0xFE8
  1187                           postdec1	equ	0xFE5
  1188                           fsr1l	equ	0xFE1
  1189                           
  1190                           	psect	dataCOMRAM
  1191  000068                     __pdataCOMRAM:
  1192                           	opt stack 0
  1193  000068                     _day:
  1194                           	opt stack 0
  1195  000068                     	ds	1
  1196  000069                     _dow:
  1197                           	opt stack 0
  1198  000069                     	ds	1
  1199  00006A                     _hour:
  1200                           	opt stack 0
  1201  00006A                     	ds	1
  1202  00006B                     _minute:
  1203                           	opt stack 0
  1204  00006B                     	ds	1
  1205  00006C                     _month:
  1206                           	opt stack 0
  1207  00006C                     	ds	1
  1208  00006D                     _tempSecond:
  1209                           	opt stack 0
  1210  00006D                     	ds	1
  1211  00006E                     _wrap:
  1212                           	opt stack 0
  1213  00006E                     	ds	1
  1214  00006F                     _year:
  1215                           	opt stack 0
  1216  00006F                     	ds	1
  1217                           tblptru	equ	0xFF8
  1218                           tblptrh	equ	0xFF7
  1219                           tblptrl	equ	0xFF6
  1220                           tablat	equ	0xFF5
  1221                           postinc0	equ	0xFEE
  1222                           wreg	equ	0xFE8
  1223                           postdec1	equ	0xFE5
  1224                           fsr1l	equ	0xFE1
  1225                           
  1226                           	psect	bssBANK0
  1227  0000BF                     __pbssBANK0:
  1228                           	opt stack 0
  1229  0000BF                     _buffer:
  1230                           	opt stack 0
  1231  0000BF                     	ds	31
  1232                           tblptru	equ	0xFF8
  1233                           tblptrh	equ	0xFF7
  1234                           tblptrl	equ	0xFF6
  1235                           tablat	equ	0xFF5
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           postdec1	equ	0xFE5
  1239                           fsr1l	equ	0xFE1
  1240                           
  1241                           	psect	dataBANK0
  1242  000080                     __pdataBANK0:
  1243                           	opt stack 0
  1244  000080                     _color:
  1245                           	opt stack 0
  1246  000080                     	ds	42
  1247  0000AA                     _array1:
  1248                           	opt stack 0
  1249  0000AA                     	ds	21
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           postdec1	equ	0xFE5
  1257                           fsr1l	equ	0xFE1
  1258                           
  1259                           	psect	dataBANK1
  1260  000100                     __pdataBANK1:
  1261                           	opt stack 0
  1262  000100                     _txt1:
  1263                           	opt stack 0
  1264  000100                     	ds	84
  1265                           tblptru	equ	0xFF8
  1266                           tblptrh	equ	0xFF7
  1267                           tblptrl	equ	0xFF6
  1268                           tablat	equ	0xFF5
  1269                           postinc0	equ	0xFEE
  1270                           wreg	equ	0xFE8
  1271                           postdec1	equ	0xFE5
  1272                           fsr1l	equ	0xFE1
  1273                           
  1274                           	psect	cstackBANK0
  1275  0000DE                     __pcstackBANK0:
  1276                           	opt stack 0
  1277  0000DE                     drawtext@x:
  1278                           	opt stack 0
  1279  0000DE                     printf@idx:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x0
  1283  0000DE                     	ds	1
  1284  0000DF                     drawtext@textsize:
  1285                           	opt stack 0
  1286  0000DF                     printf@prec:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x1
  1290  0000DF                     	ds	2
  1291  0000E1                     drawtext@i:
  1292                           	opt stack 0
  1293  0000E1                     printf@ap:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x3
  1297  0000E1                     	ds	2
  1298  0000E3                     drawtext@cursor_y:
  1299                           	opt stack 0
  1300  0000E3                     printf@val:
  1301                           	opt stack 0
  1302                           
  1303                           ; 4 bytes @ 0x5
  1304  0000E3                     	ds	1
  1305  0000E4                     drawtext@cursor_x:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x6
  1309  0000E4                     	ds	3
  1310  0000E7                     printf@width:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x9
  1314  0000E7                     	ds	2
  1315  0000E9                     printf@flag:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0xB
  1319  0000E9                     	ds	1
  1320  0000EA                     printf@c:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0xC
  1324  0000EA                     	ds	1
  1325  0000EB                     main@i:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0xD
  1329  0000EB                     	ds	2
  1330  0000ED                     main@found:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0xF
  1334  0000ED                     	ds	1
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           postdec1	equ	0xFE5
  1342                           fsr1l	equ	0xFE1
  1343                           
  1344                           	psect	cstackCOMRAM
  1345  000001                     __pcstackCOMRAM:
  1346                           	opt stack 0
  1347  000001                     ??_INT0_isr:
  1348  000001                     
  1349                           ; 1 bytes @ 0x0
  1350  000001                     	ds	2
  1351  000003                     ??_chkisr:
  1352                           
  1353                           ; 0 bytes @ 0x2
  1354  000003                     	ds	14
  1355  000011                     ??_isdigit:
  1356  000011                     ?_strlen:
  1357                           	opt stack 0
  1358  000011                     ?___wmul:
  1359                           	opt stack 0
  1360  000011                     ?___lldiv:
  1361                           	opt stack 0
  1362  000011                     spiwrite@x:
  1363                           	opt stack 0
  1364  000011                     I2C_Read@ack:
  1365                           	opt stack 0
  1366  000011                     I2C_Write@outByte:
  1367                           	opt stack 0
  1368  000011                     putch@c:
  1369                           	opt stack 0
  1370  000011                     OpenUSART@spbrg:
  1371                           	opt stack 0
  1372  000011                     ___wmul@multiplier:
  1373                           	opt stack 0
  1374  000011                     strcpy@to:
  1375                           	opt stack 0
  1376  000011                     strlen@s:
  1377                           	opt stack 0
  1378  000011                     I2C_Init@c:
  1379                           	opt stack 0
  1380  000011                     ___lldiv@dividend:
  1381                           	opt stack 0
  1382                           
  1383                           ; 4 bytes @ 0x10
  1384  000011                     	ds	1
  1385  000012                     spiwrite@spidata:
  1386                           	opt stack 0
  1387  000012                     I2C_Read@n:
  1388                           	opt stack 0
  1389  000012                     I2C_Write@n:
  1390                           	opt stack 0
  1391  000012                     _isdigit$2119:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x11
  1395  000012                     	ds	1
  1396  000013                     ??_strlen:
  1397  000013                     write_command@cmd_:
  1398                           	opt stack 0
  1399  000013                     write_data@data_:
  1400                           	opt stack 0
  1401  000013                     I2C_Read@inByte:
  1402                           	opt stack 0
  1403  000013                     I2C_Write_Cmd_Only@Cmd:
  1404                           	opt stack 0
  1405  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1406                           	opt stack 0
  1407  000013                     DS3231_Setup_Time@Device:
  1408                           	opt stack 0
  1409  000013                     OpenUSART@config:
  1410                           	opt stack 0
  1411  000013                     isdigit@c:
  1412                           	opt stack 0
  1413  000013                     ___wmul@multiplicand:
  1414                           	opt stack 0
  1415  000013                     strcpy@from:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x12
  1419  000013                     	ds	1
  1420  000014                     ?_DS1621_Read_Temp:
  1421                           	opt stack 0
  1422  000014                     setAddrWindow@y0:
  1423                           	opt stack 0
  1424  000014                     I2C_Write_Cmd_Only@Device:
  1425                           	opt stack 0
  1426  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1427                           	opt stack 0
  1428  000014                     DS3231_Read_Time@Address:
  1429                           	opt stack 0
  1430  000014                     DS3231_Setup_Time@Address:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x13
  1434  000014                     	ds	1
  1435  000015                     setAddrWindow@x1:
  1436                           	opt stack 0
  1437  000015                     I2C_Write_Cmd_Write_Data@Device:
  1438                           	opt stack 0
  1439  000015                     DS3231_Read_Time@Device:
  1440                           	opt stack 0
  1441  000015                     ___wmul@product:
  1442                           	opt stack 0
  1443  000015                     strcpy@cp:
  1444                           	opt stack 0
  1445  000015                     strlen@cp:
  1446                           	opt stack 0
  1447  000015                     ___lldiv@divisor:
  1448                           	opt stack 0
  1449                           
  1450                           ; 4 bytes @ 0x14
  1451  000015                     	ds	1
  1452  000016                     setAddrWindow@y1:
  1453                           	opt stack 0
  1454  000016                     DS1621_Init@Device:
  1455                           	opt stack 0
  1456  000016                     DS1621_Read_Temp@Cmd:
  1457                           	opt stack 0
  1458                           
  1459                           ; 1 bytes @ 0x15
  1460  000016                     	ds	1
  1461  000017                     ?___awdiv:
  1462                           	opt stack 0
  1463  000017                     setAddrWindow@x0:
  1464                           	opt stack 0
  1465  000017                     DS1621_Read_Temp@Data_Ret:
  1466                           	opt stack 0
  1467  000017                     delay_ms@ms:
  1468                           	opt stack 0
  1469  000017                     ___awdiv@dividend:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x16
  1473  000017                     	ds	1
  1474  000018                     drawPixel@y:
  1475                           	opt stack 0
  1476  000018                     drawFastVLine@y:
  1477                           	opt stack 0
  1478  000018                     fillRectangle@y:
  1479                           	opt stack 0
  1480  000018                     DS1621_Read_Temp@Device:
  1481                           	opt stack 0
  1482                           
  1483                           ; 1 bytes @ 0x17
  1484  000018                     	ds	1
  1485  000019                     ??_delay_ms:
  1486  000019                     drawFastVLine@h:
  1487                           	opt stack 0
  1488  000019                     fillRectangle@w:
  1489                           	opt stack 0
  1490  000019                     drawPixel@color:
  1491                           	opt stack 0
  1492  000019                     ___awdiv@divisor:
  1493                           	opt stack 0
  1494  000019                     ___lldiv@quotient:
  1495                           	opt stack 0
  1496                           
  1497                           ; 4 bytes @ 0x18
  1498  000019                     	ds	1
  1499  00001A                     fillRectangle@h:
  1500                           	opt stack 0
  1501  00001A                     drawFastVLine@color:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x19
  1505  00001A                     	ds	1
  1506  00001B                     drawPixel@x:
  1507                           	opt stack 0
  1508  00001B                     ___awdiv@counter:
  1509                           	opt stack 0
  1510  00001B                     delay_ms@count:
  1511                           	opt stack 0
  1512  00001B                     fillRectangle@color:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x1A
  1516  00001B                     	ds	1
  1517  00001C                     ??_drawFastVLine:
  1518  00001C                     ___awdiv@sign:
  1519                           	opt stack 0
  1520  00001C                     drawCircle@x0:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x1B
  1524  00001C                     	ds	1
  1525  00001D                     ??_fillRectangle:
  1526  00001D                     ___lldiv@counter:
  1527                           	opt stack 0
  1528  00001D                     ___awdiv@quotient:
  1529                           	opt stack 0
  1530                           
  1531                           ; 2 bytes @ 0x1C
  1532  00001D                     	ds	1
  1533  00001E                     ?___llmod:
  1534                           	opt stack 0
  1535  00001E                     drawCircle@y0:
  1536                           	opt stack 0
  1537  00001E                     ___llmod@dividend:
  1538                           	opt stack 0
  1539                           
  1540                           ; 4 bytes @ 0x1D
  1541  00001E                     	ds	1
  1542  00001F                     _Do_LED$1560:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x1E
  1546  00001F                     	ds	1
  1547  000020                     drawFastVLine@hi:
  1548                           	opt stack 0
  1549  000020                     drawCircle@r:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x1F
  1553  000020                     	ds	1
  1554  000021                     drawFastVLine@lo:
  1555                           	opt stack 0
  1556  000021                     fillRectangle@hi:
  1557                           	opt stack 0
  1558                           
  1559                           ; 1 bytes @ 0x20
  1560  000021                     	ds	1
  1561  000022                     drawFastVLine@x:
  1562                           	opt stack 0
  1563  000022                     fillRectangle@lo:
  1564                           	opt stack 0
  1565  000022                     drawCircle@color:
  1566                           	opt stack 0
  1567  000022                     ___llmod@divisor:
  1568                           	opt stack 0
  1569                           
  1570                           ; 4 bytes @ 0x21
  1571  000022                     	ds	1
  1572  000023                     fillRect@y:
  1573                           	opt stack 0
  1574  000023                     fillRectangle@x:
  1575                           	opt stack 0
  1576  000023                     fillCircleHelper@x0:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x22
  1580  000023                     	ds	1
  1581  000024                     ??_drawCircle:
  1582  000024                     fillRect@w:
  1583                           	opt stack 0
  1584  000024                     fillScreen@color:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x23
  1588  000024                     	ds	1
  1589  000025                     fillRect@h:
  1590                           	opt stack 0
  1591  000025                     fillCircleHelper@y0:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x24
  1595  000025                     	ds	1
  1596  000026                     ___llmod@counter:
  1597                           	opt stack 0
  1598  000026                     fillRect@color:
  1599                           	opt stack 0
  1600  000026                     drawCircle@ddF_x:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x25
  1604  000026                     	ds	1
  1605  000027                     ?_printf:
  1606                           	opt stack 0
  1607  000027                     fillCircleHelper@r:
  1608                           	opt stack 0
  1609  000027                     printf@f:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x26
  1613  000027                     	ds	1
  1614  000028                     ??_fillRect:
  1615  000028                     drawCircle@ddF_y:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x27
  1619  000028                     	ds	1
  1620  000029                     fillCircleHelper@cornername:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x28
  1624  000029                     	ds	1
  1625  00002A                     drawCircle@f:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x29
  1629  00002A                     	ds	1
  1630  00002B                     fillRect@x:
  1631                           	opt stack 0
  1632  00002B                     fillCircleHelper@delta:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x2A
  1636  00002B                     	ds	1
  1637  00002C                     fillRect@i:
  1638                           	opt stack 0
  1639  00002C                     drawCircle@x:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x2B
  1643  00002C                     	ds	1
  1644  00002D                     fillCircleHelper@color:
  1645                           	opt stack 0
  1646                           
  1647                           ; 2 bytes @ 0x2C
  1648  00002D                     	ds	1
  1649  00002E                     drawChar@y:
  1650                           	opt stack 0
  1651  00002E                     drawCircle@y:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x2D
  1655  00002E                     	ds	1
  1656  00002F                     ??_fillCircleHelper:
  1657  00002F                     drawChar@c:
  1658                           	opt stack 0
  1659                           
  1660                           ; 1 bytes @ 0x2E
  1661  00002F                     	ds	1
  1662  000030                     drawChar@color:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x2F
  1666  000030                     	ds	1
  1667  000031                     fillCircleHelper@ddF_x:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x30
  1671  000031                     	ds	1
  1672  000032                     drawChar@bg:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x31
  1676  000032                     	ds	1
  1677  000033                     fillCircleHelper@ddF_y:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x32
  1681  000033                     	ds	1
  1682  000034                     drawChar@size:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x33
  1686  000034                     	ds	1
  1687  000035                     ??_printf:
  1688  000035                     drawChar@line:
  1689                           	opt stack 0
  1690  000035                     fillCircleHelper@f:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x34
  1694  000035                     	ds	1
  1695  000036                     drawChar@x:
  1696                           	opt stack 0
  1697                           
  1698                           ; 1 bytes @ 0x35
  1699  000036                     	ds	1
  1700  000037                     drawChar@j:
  1701                           	opt stack 0
  1702  000037                     fillCircleHelper@x:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x36
  1706  000037                     	ds	1
  1707  000038                     drawChar@i:
  1708                           	opt stack 0
  1709                           
  1710                           ; 1 bytes @ 0x37
  1711  000038                     	ds	1
  1712  000039                     drawtext@y:
  1713                           	opt stack 0
  1714  000039                     fillCircleHelper@y:
  1715                           	opt stack 0
  1716                           
  1717                           ; 2 bytes @ 0x38
  1718  000039                     	ds	1
  1719  00003A                     drawtext@_text:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x39
  1723  00003A                     	ds	1
  1724  00003B                     fillCircle@x0:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x3A
  1728  00003B                     	ds	1
  1729  00003C                     drawtext@color:
  1730                           	opt stack 0
  1731                           
  1732                           ; 2 bytes @ 0x3B
  1733  00003C                     	ds	1
  1734  00003D                     fillCircle@y0:
  1735                           	opt stack 0
  1736                           
  1737                           ; 2 bytes @ 0x3C
  1738  00003D                     	ds	1
  1739  00003E                     drawtext@bg:
  1740                           	opt stack 0
  1741                           
  1742                           ; 2 bytes @ 0x3D
  1743  00003E                     	ds	1
  1744  00003F                     fillCircle@r:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x3E
  1748  00003F                     	ds	1
  1749  000040                     drawtext@size:
  1750                           	opt stack 0
  1751                           
  1752                           ; 1 bytes @ 0x3F
  1753  000040                     	ds	1
  1754  000041                     ??_drawtext:
  1755  000041                     fillCircle@color:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x40
  1759  000041                     	ds	2
  1760  000043                     
  1761                           ; 0 bytes @ 0x42
  1762  000043                     	ds	1
  1763                           tblptru	equ	0xFF8
  1764                           tblptrh	equ	0xFF7
  1765                           tblptrl	equ	0xFF6
  1766                           tablat	equ	0xFF5
  1767                           postinc0	equ	0xFEE
  1768                           wreg	equ	0xFE8
  1769                           postdec1	equ	0xFE5
  1770                           fsr1l	equ	0xFE1
  1771                           
  1772 ;;
  1773 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1774 ;;
  1775 ;; *************** function _main *****************
  1776 ;; Defined at:
  1777 ;;		line 181 in file "Lab10_sample_3.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  i               2   13[BANK0 ] int 
  1782 ;;  found           1   15[BANK0 ] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;		None               void
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;Total ram usage:        4 bytes
  1797 ;; Hardware stack levels required when called:   11
  1798 ;; This function calls:
  1799 ;;		_DS1621_Read_Temp
  1800 ;;		_DS3231_Read_Time
  1801 ;;		_DS3231_Setup_Time
  1802 ;;		_Do_Init
  1803 ;;		_Do_LED
  1804 ;;		_Initialize_Screen
  1805 ;;		___awdiv
  1806 ;;		___wmul
  1807 ;;		_drawCircle
  1808 ;;		_drawtext
  1809 ;;		_fillCircle
  1810 ;;		_printf
  1811 ;;		_waitHalfSecondWithBeep
  1812 ;; This function is called by:
  1813 ;;		Startup code after reset
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text0
  1818  0004F2                     __ptext0:
  1819                           	opt stack 0
  1820  0004F2                     _main:
  1821                           	opt stack 20
  1822                           
  1823                           ;Lab10_sample_3.c: 183: Do_Init();
  1824                           
  1825                           ;incstack = 0
  1826  0004F2  EC01  F00C         	call	_Do_Init	;wreg free
  1827                           
  1828                           ;Lab10_sample_3.c: 184: Initialize_Screen();
  1829  0004F6  EC73  F008         	call	_Initialize_Screen	;wreg free
  1830  0004FA  D000               	goto	l5433
  1831  0004FC                     l5433:
  1832                           
  1833                           ;Lab10_sample_3.c: 195: {
  1834                           ;Lab10_sample_3.c: 197: DS3231_Read_Time();
  1835  0004FC  EC66  F00A         	call	_DS3231_Read_Time	;wreg free
  1836                           
  1837                           ;Lab10_sample_3.c: 198: if(tempSecond != second)
  1838  000500  505C               	movf	_second,w,c
  1839  000502  186D               	xorwf	_tempSecond,w,c
  1840  000504  B4D8               	btfsc	status,2,c
  1841  000506  D049               	goto	l5449
  1842                           
  1843                           ;Lab10_sample_3.c: 199: {
  1844                           ;Lab10_sample_3.c: 200: tempSecond = second;
  1845  000508  C05C  F06D         	movff	_second,_tempSecond
  1846                           
  1847                           ;Lab10_sample_3.c: 201: tempC = DS1621_Read_Temp();
  1848  00050C  EC1F  F00C         	call	_DS1621_Read_Temp	;wreg free
  1849  000510  5014               	movf	?_DS1621_Read_Temp,w,c
  1850  000512  6E66               	movwf	_tempC,c
  1851                           
  1852                           ;Lab10_sample_3.c: 202: tempF = (tempC * 9 / 5) + 32;
  1853  000514  5066               	movf	_tempC,w,c
  1854  000516  6E11               	movwf	___wmul@multiplier,c
  1855  000518  6A12               	clrf	___wmul@multiplier+1,c
  1856  00051A  BE11               	btfsc	___wmul@multiplier,7,c
  1857  00051C  0612               	decf	___wmul@multiplier+1,f,c
  1858  00051E  0E00               	movlw	0
  1859  000520  6E14               	movwf	___wmul@multiplicand+1,c
  1860  000522  0E09               	movlw	9
  1861  000524  6E13               	movwf	___wmul@multiplicand,c
  1862  000526  ECB8  F00C         	call	___wmul	;wreg free
  1863  00052A  C011  F017         	movff	?___wmul,___awdiv@dividend
  1864  00052E  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1865  000532  0E00               	movlw	0
  1866  000534  6E1A               	movwf	___awdiv@divisor+1,c
  1867  000536  0E05               	movlw	5
  1868  000538  6E19               	movwf	___awdiv@divisor,c
  1869  00053A  EC28  F008         	call	___awdiv	;wreg free
  1870  00053E  5017               	movf	?___awdiv,w,c
  1871  000540  0F20               	addlw	32
  1872  000542  6E67               	movwf	_tempF,c
  1873                           
  1874                           ;Lab10_sample_3.c: 203: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month
      +                          ,day,year);
  1875  000544  0E87               	movlw	low STR_1
  1876  000546  6E27               	movwf	printf@f,c
  1877  000548  0EFF               	movlw	high STR_1
  1878  00054A  6E28               	movwf	printf@f+1,c
  1879  00054C  C06A  F029         	movff	_hour,?_printf+2
  1880  000550  6A2A               	clrf	?_printf+3,c
  1881  000552  C06B  F02B         	movff	_minute,?_printf+4
  1882  000556  6A2C               	clrf	?_printf+5,c
  1883  000558  C05C  F02D         	movff	_second,?_printf+6
  1884  00055C  6A2E               	clrf	?_printf+7,c
  1885  00055E  C06C  F02F         	movff	_month,?_printf+8
  1886  000562  6A30               	clrf	?_printf+9,c
  1887  000564  C068  F031         	movff	_day,?_printf+10
  1888  000568  6A32               	clrf	?_printf+11,c
  1889  00056A  C06F  F033         	movff	_year,?_printf+12
  1890  00056E  6A34               	clrf	?_printf+13,c
  1891  000570  EC0E  F000         	call	_printf	;wreg free
  1892                           
  1893                           ;Lab10_sample_3.c: 204: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, t
      +                          empF);
  1894  000574  0E5C               	movlw	low STR_2
  1895  000576  6E27               	movwf	printf@f,c
  1896  000578  0EFF               	movlw	high STR_2
  1897  00057A  6E28               	movwf	printf@f+1,c
  1898  00057C  5066               	movf	_tempC,w,c
  1899  00057E  6E29               	movwf	?_printf+2,c
  1900  000580  6A2A               	clrf	?_printf+3,c
  1901  000582  BE29               	btfsc	?_printf+2,7,c
  1902  000584  062A               	decf	?_printf+3,f,c
  1903  000586  5067               	movf	_tempF,w,c
  1904  000588  6E2B               	movwf	?_printf+4,c
  1905  00058A  6A2C               	clrf	?_printf+5,c
  1906  00058C  BE2B               	btfsc	?_printf+4,7,c
  1907  00058E  062C               	decf	?_printf+5,f,c
  1908  000590  EC0E  F000         	call	_printf	;wreg free
  1909                           
  1910                           ;Lab10_sample_3.c: 206: Do_LED();
  1911  000594  EC3D  F00C         	call	_Do_LED	;wreg free
  1912  000598  D000               	goto	l5449
  1913  00059A                     l5449:
  1914                           
  1915                           ;Lab10_sample_3.c: 207: }
  1916                           ;Lab10_sample_3.c: 209: if (nec_ok == 1)
  1917  00059A  044C               	decf	_nec_ok,w,c
  1918  00059C  104D               	iorwf	_nec_ok+1,w,c
  1919  00059E  A4D8               	btfss	status,2,c
  1920  0005A0  D7AD               	goto	l5433
  1921                           
  1922                           ;Lab10_sample_3.c: 210: {
  1923                           ;Lab10_sample_3.c: 211: nec_ok = 0;
  1924  0005A2  0E00               	movlw	0
  1925  0005A4  6E4D               	movwf	_nec_ok+1,c
  1926  0005A6  0E00               	movlw	0
  1927  0005A8  6E4C               	movwf	_nec_ok,c
  1928                           
  1929                           ;Lab10_sample_3.c: 213: Nec_code1 = (char) ((Nec_code >> 8));
  1930  0005AA  C045  F050         	movff	_Nec_code+1,_Nec_code1
  1931                           
  1932                           ;Lab10_sample_3.c: 214: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  1933  0005AE  0EBC               	movlw	low STR_3
  1934  0005B0  6E27               	movwf	printf@f,c
  1935  0005B2  0EFF               	movlw	high STR_3
  1936  0005B4  6E28               	movwf	printf@f+1,c
  1937  0005B6  C044  F029         	movff	_Nec_code,?_printf+2
  1938  0005BA  C045  F02A         	movff	_Nec_code+1,?_printf+3
  1939  0005BE  C046  F02B         	movff	_Nec_code+2,?_printf+4
  1940  0005C2  C047  F02C         	movff	_Nec_code+3,?_printf+5
  1941  0005C6  C050  F02D         	movff	_Nec_code1,?_printf+6
  1942  0005CA  6A2E               	clrf	?_printf+7,c
  1943  0005CC  EC0E  F000         	call	_printf	;wreg free
  1944                           
  1945                           ;Lab10_sample_3.c: 215: INTCONbits.INT0IE = 1;
  1946  0005D0  88F2               	bsf	intcon,4,c	;volatile
  1947                           
  1948                           ;Lab10_sample_3.c: 216: INTCON2bits.INTEDG0 = 0;
  1949  0005D2  9CF1               	bcf	intcon2,6,c	;volatile
  1950                           
  1951                           ;Lab10_sample_3.c: 218: char found = 0xff;
  1952  0005D4  0100               	movlb	0	; () banked
  1953  0005D6  69ED               	setf	main@found& (0+255),b
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;Lab10_sample_3.c: 220: for( int i = 0; i < 21; i++ )
  1957  0005D8  0E00               	movlw	0
  1958  0005DA  0100               	movlb	0	; () banked
  1959  0005DC  6FEC               	movwf	(main@i+1)& (0+255),b
  1960  0005DE  0E00               	movlw	0
  1961  0005E0  6FEB               	movwf	main@i& (0+255),b
  1962  0005E2                     l5465:
  1963                           
  1964                           ; BSR set to: 0
  1965  0005E2  0100               	movlb	0	; () banked
  1966  0005E4  BFEC               	btfsc	(main@i+1)& (0+255),7,b
  1967  0005E6  D00A               	goto	l5469
  1968  0005E8  0100               	movlb	0	; () banked
  1969  0005EA  51EC               	movf	(main@i+1)& (0+255),w,b
  1970  0005EC  E11B               	bnz	l5477
  1971  0005EE  0E15               	movlw	21
  1972  0005F0  0100               	movlb	0	; () banked
  1973  0005F2  5DEB               	subwf	main@i& (0+255),w,b
  1974  0005F4  B0D8               	btfsc	status,0,c
  1975  0005F6  D016               	goto	l5477
  1976  0005F8  D001               	goto	l5469
  1977                           
  1978                           ; BSR set to: 0
  1979  0005FA  D014               	goto	l5477
  1980  0005FC                     l5469:
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;Lab10_sample_3.c: 221: {
  1984                           ;Lab10_sample_3.c: 222: if( Nec_code1 == array1[i] )
  1985  0005FC  0EAA               	movlw	low _array1
  1986  0005FE  0100               	movlb	0	; () banked
  1987  000600  25EB               	addwf	main@i& (0+255),w,b
  1988  000602  6ED9               	movwf	fsr2l,c
  1989  000604  0E00               	movlw	high _array1
  1990  000606  0100               	movlb	0	; () banked
  1991  000608  21EC               	addwfc	(main@i+1)& (0+255),w,b
  1992  00060A  6EDA               	movwf	fsr2h,c
  1993  00060C  5050               	movf	_Nec_code1,w,c
  1994  00060E  18DE               	xorwf	postinc2,w,c
  1995  000610  A4D8               	btfss	status,2,c
  1996  000612  D003               	goto	l5473
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;Lab10_sample_3.c: 223: {
  2000                           ;Lab10_sample_3.c: 224: found = i;
  2001  000614  C0EB  F0ED         	movff	main@i,main@found
  2002  000618  D000               	goto	l5473
  2003  00061A                     l5473:
  2004                           
  2005                           ; BSR set to: 0
  2006  00061A  0100               	movlb	0	; () banked
  2007  00061C  4BEB               	infsnz	main@i& (0+255),f,b
  2008  00061E  2BEC               	incf	(main@i+1)& (0+255),f,b
  2009  000620  D7E0               	goto	l5465
  2010                           
  2011                           ; BSR set to: 0
  2012  000622  D000               	goto	l5477
  2013  000624                     l5477:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;Lab10_sample_3.c: 225: }
  2017                           ;Lab10_sample_3.c: 227: }
  2018                           ;Lab10_sample_3.c: 229: if(found == 8)
  2019  000624  0E08               	movlw	8
  2020  000626  0100               	movlb	0	; () banked
  2021  000628  19ED               	xorwf	main@found& (0+255),w,b
  2022  00062A  A4D8               	btfss	status,2,c
  2023  00062C  D009               	goto	l5483
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;Lab10_sample_3.c: 230: { printf("\r\n New Time Set! \r\n \r\n");
  2027  00062E  0EA5               	movlw	low STR_4
  2028  000630  6E27               	movwf	printf@f,c
  2029  000632  0EFF               	movlw	high STR_4
  2030  000634  6E28               	movwf	printf@f+1,c
  2031  000636  EC0E  F000         	call	_printf	;wreg free
  2032                           
  2033                           ;Lab10_sample_3.c: 231: DS3231_Setup_Time();
  2034  00063A  EC33  F00A         	call	_DS3231_Setup_Time	;wreg free
  2035  00063E  D000               	goto	l5483
  2036  000640                     l5483:
  2037                           
  2038                           ;Lab10_sample_3.c: 232: }
  2039                           ;Lab10_sample_3.c: 235: if (found != 0xff)
  2040  000640  0100               	movlb	0	; () banked
  2041  000642  29ED               	incf	main@found& (0+255),w,b
  2042  000644  B4D8               	btfsc	status,2,c
  2043  000646  D75A               	goto	l5433
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;Lab10_sample_3.c: 236: {
  2047                           ;Lab10_sample_3.c: 237: fillCircle(60, 80, 20, color[found]);
  2048  000648  0E00               	movlw	0
  2049  00064A  6E3C               	movwf	fillCircle@x0+1,c
  2050  00064C  0E3C               	movlw	60
  2051  00064E  6E3B               	movwf	fillCircle@x0,c
  2052  000650  0E00               	movlw	0
  2053  000652  6E3E               	movwf	fillCircle@y0+1,c
  2054  000654  0E50               	movlw	80
  2055  000656  6E3D               	movwf	fillCircle@y0,c
  2056  000658  0E00               	movlw	0
  2057  00065A  6E40               	movwf	fillCircle@r+1,c
  2058  00065C  0E14               	movlw	20
  2059  00065E  6E3F               	movwf	fillCircle@r,c
  2060  000660  0100               	movlb	0	; () banked
  2061  000662  51ED               	movf	main@found& (0+255),w,b
  2062  000664  0D02               	mullw	2
  2063  000666  0E80               	movlw	low _color
  2064  000668  24F3               	addwf	prodl,w,c
  2065  00066A  6ED9               	movwf	fsr2l,c
  2066  00066C  0E00               	movlw	high _color
  2067  00066E  20F4               	addwfc	prodh,w,c
  2068  000670  6EDA               	movwf	fsr2h,c
  2069  000672  CFDE F041          	movff	postinc2,fillCircle@color
  2070  000676  CFDD F042          	movff	postdec2,fillCircle@color+1
  2071  00067A  ECC2  F00A         	call	_fillCircle	;wreg free
  2072                           
  2073                           ;Lab10_sample_3.c: 238: drawCircle(60, 80, 20, 0xFFFF);
  2074  00067E  0E00               	movlw	0
  2075  000680  6E1D               	movwf	drawCircle@x0+1,c
  2076  000682  0E3C               	movlw	60
  2077  000684  6E1C               	movwf	drawCircle@x0,c
  2078  000686  0E00               	movlw	0
  2079  000688  6E1F               	movwf	drawCircle@y0+1,c
  2080  00068A  0E50               	movlw	80
  2081  00068C  6E1E               	movwf	drawCircle@y0,c
  2082  00068E  0E00               	movlw	0
  2083  000690  6E21               	movwf	drawCircle@r+1,c
  2084  000692  0E14               	movlw	20
  2085  000694  6E20               	movwf	drawCircle@r,c
  2086  000696  0EFF               	movlw	255
  2087  000698  6E23               	movwf	drawCircle@color+1,c
  2088  00069A  6822               	setf	drawCircle@color,c
  2089  00069C  EC6C  F003         	call	_drawCircle	;wreg free
  2090                           
  2091                           ;Lab10_sample_3.c: 239: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  2092  0006A0  0E4D               	movlw	77
  2093  0006A2  6E39               	movwf	drawtext@y,c
  2094  0006A4  0100               	movlb	0	; () banked
  2095  0006A6  51ED               	movf	main@found& (0+255),w,b
  2096  0006A8  0D04               	mullw	4
  2097  0006AA  0E00               	movlw	low _txt1
  2098  0006AC  24F3               	addwf	prodl,w,c
  2099  0006AE  6E3A               	movwf	drawtext@_text,c
  2100  0006B0  0E01               	movlw	high _txt1
  2101  0006B2  20F4               	addwfc	prodh,w,c
  2102  0006B4  6E3B               	movwf	drawtext@_text+1,c
  2103  0006B6  0EFF               	movlw	255
  2104  0006B8  6E3D               	movwf	drawtext@color+1,c
  2105  0006BA  683C               	setf	drawtext@color,c
  2106  0006BC  0E00               	movlw	0
  2107  0006BE  6E3F               	movwf	drawtext@bg+1,c
  2108  0006C0  0E00               	movlw	0
  2109  0006C2  6E3E               	movwf	drawtext@bg,c
  2110  0006C4  0E01               	movlw	1
  2111  0006C6  6E40               	movwf	drawtext@size,c
  2112  0006C8  0E34               	movlw	52
  2113  0006CA  ECBC  F006         	call	_drawtext
  2114                           
  2115                           ;Lab10_sample_3.c: 240: waitHalfSecondWithBeep();
  2116  0006CE  EC43  F00D         	call	_waitHalfSecondWithBeep	;wreg free
  2117  0006D2  D714               	goto	l5433
  2118  0006D4  EF0C  F000         	goto	start
  2119  0006D8                     __end_of_main:
  2120                           	opt stack 0
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           prodh	equ	0xFF4
  2126                           prodl	equ	0xFF3
  2127                           intcon	equ	0xFF2
  2128                           intcon2	equ	0xFF1
  2129                           postinc0	equ	0xFEE
  2130                           wreg	equ	0xFE8
  2131                           postdec1	equ	0xFE5
  2132                           fsr1l	equ	0xFE1
  2133                           postinc2	equ	0xFDE
  2134                           postdec2	equ	0xFDD
  2135                           fsr2h	equ	0xFDA
  2136                           fsr2l	equ	0xFD9
  2137                           status	equ	0xFD8
  2138                           
  2139 ;; *************** function _waitHalfSecondWithBeep *****************
  2140 ;; Defined at:
  2141 ;;		line 284 in file "Lab10_sample_3.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;		None
  2146 ;; Return value:  Size  Location     Type
  2147 ;;		None               void
  2148 ;; Registers used:
  2149 ;;		wreg, status,2, cstack
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;Total ram usage:        0 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    4
  2162 ;; This function calls:
  2163 ;;		_Activate_Buzzer
  2164 ;;		_Deactivate_Buzzer
  2165 ;;		_Wait_Half_Second
  2166 ;; This function is called by:
  2167 ;;		_main
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text1
  2172  001A86                     __ptext1:
  2173                           	opt stack 0
  2174  001A86                     _waitHalfSecondWithBeep:
  2175                           	opt stack 26
  2176                           
  2177                           ;Lab10_sample_3.c: 286: PORTEbits.RE1 = 1;
  2178                           
  2179                           ;incstack = 0
  2180  001A86  8284               	bsf	3972,1,c	;volatile
  2181                           
  2182                           ;Lab10_sample_3.c: 287: Activate_Buzzer();
  2183  001A88  EC4C  F00D         	call	_Activate_Buzzer	;wreg free
  2184                           
  2185                           ;Lab10_sample_3.c: 288: Wait_Half_Second();
  2186  001A8C  EC0A  F00D         	call	_Wait_Half_Second	;wreg free
  2187                           
  2188                           ;Lab10_sample_3.c: 289: Deactivate_Buzzer();
  2189  001A90  ECAF  F00D         	call	_Deactivate_Buzzer	;wreg free
  2190                           
  2191                           ;Lab10_sample_3.c: 290: PORTEbits.RE1 = 0;
  2192  001A94  9284               	bcf	3972,1,c	;volatile
  2193  001A96  0012               	return		;funcret
  2194  001A98                     __end_of_waitHalfSecondWithBeep:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           intcon	equ	0xFF2
  2203                           intcon2	equ	0xFF1
  2204                           postinc0	equ	0xFEE
  2205                           wreg	equ	0xFE8
  2206                           postdec1	equ	0xFE5
  2207                           fsr1l	equ	0xFE1
  2208                           postinc2	equ	0xFDE
  2209                           postdec2	equ	0xFDD
  2210                           fsr2h	equ	0xFDA
  2211                           fsr2l	equ	0xFD9
  2212                           status	equ	0xFD8
  2213                           
  2214 ;; *************** function _Wait_Half_Second *****************
  2215 ;; Defined at:
  2216 ;;		line 141 in file "Lab10_sample_3.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;		None
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;		None               void
  2223 ;; Registers used:
  2224 ;;		wreg, status,2
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;Total ram usage:        0 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    3
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_waitHalfSecondWithBeep
  2241 ;;		_Wait_One_Sec
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text2
  2246  001A14                     __ptext2:
  2247                           	opt stack 0
  2248  001A14                     _Wait_Half_Second:
  2249                           	opt stack 26
  2250                           
  2251                           ;Lab10_sample_3.c: 143: T0CON = 0x03;
  2252                           
  2253                           ;incstack = 0
  2254  001A14  0E03               	movlw	3
  2255  001A16  6ED5               	movwf	4053,c	;volatile
  2256                           
  2257                           ;Lab10_sample_3.c: 144: TMR0L = 0xDB;
  2258  001A18  0EDB               	movlw	219
  2259  001A1A  6ED6               	movwf	4054,c	;volatile
  2260                           
  2261                           ;Lab10_sample_3.c: 145: TMR0H = 0x0B;
  2262  001A1C  0E0B               	movlw	11
  2263  001A1E  6ED7               	movwf	4055,c	;volatile
  2264                           
  2265                           ;Lab10_sample_3.c: 146: INTCONbits.TMR0IF = 0;
  2266  001A20  94F2               	bcf	intcon,2,c	;volatile
  2267                           
  2268                           ;Lab10_sample_3.c: 147: T0CONbits.TMR0ON = 1;
  2269  001A22  8ED5               	bsf	4053,7,c	;volatile
  2270                           
  2271                           ;Lab10_sample_3.c: 148: while (INTCONbits.TMR0IF == 0);
  2272  001A24  D000               	goto	l555
  2273  001A26                     l555:
  2274  001A26  A4F2               	btfss	intcon,2,c	;volatile
  2275  001A28  D7FE               	goto	l555
  2276                           
  2277                           ;Lab10_sample_3.c: 149: T0CONbits.TMR0ON = 0;
  2278  001A2A  9ED5               	bcf	4053,7,c	;volatile
  2279  001A2C  0012               	return		;funcret
  2280  001A2E                     __end_of_Wait_Half_Second:
  2281                           	opt stack 0
  2282                           tblptru	equ	0xFF8
  2283                           tblptrh	equ	0xFF7
  2284                           tblptrl	equ	0xFF6
  2285                           tablat	equ	0xFF5
  2286                           prodh	equ	0xFF4
  2287                           prodl	equ	0xFF3
  2288                           intcon	equ	0xFF2
  2289                           intcon2	equ	0xFF1
  2290                           postinc0	equ	0xFEE
  2291                           wreg	equ	0xFE8
  2292                           postdec1	equ	0xFE5
  2293                           fsr1l	equ	0xFE1
  2294                           postinc2	equ	0xFDE
  2295                           postdec2	equ	0xFDD
  2296                           fsr2h	equ	0xFDA
  2297                           fsr2l	equ	0xFD9
  2298                           status	equ	0xFD8
  2299                           
  2300 ;; *************** function _Deactivate_Buzzer *****************
  2301 ;; Defined at:
  2302 ;;		line 263 in file "Lab10_sample_3.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;		None
  2307 ;; Return value:  Size  Location     Type
  2308 ;;		None               void
  2309 ;; Registers used:
  2310 ;;		wreg, status,2
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;Total ram usage:        0 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    3
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_waitHalfSecondWithBeep
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text3
  2331  001B5E                     __ptext3:
  2332                           	opt stack 0
  2333  001B5E                     _Deactivate_Buzzer:
  2334                           	opt stack 26
  2335                           
  2336                           ;Lab10_sample_3.c: 265: CCP2CON = 0x0;
  2337                           
  2338                           ;incstack = 0
  2339  001B5E  0E00               	movlw	0
  2340  001B60  6EBA               	movwf	4026,c	;volatile
  2341                           
  2342                           ;Lab10_sample_3.c: 266: PORTBbits.RB3 = 0;
  2343  001B62  9681               	bcf	3969,3,c	;volatile
  2344  001B64  0012               	return		;funcret
  2345  001B66                     __end_of_Deactivate_Buzzer:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           tblptrh	equ	0xFF7
  2349                           tblptrl	equ	0xFF6
  2350                           tablat	equ	0xFF5
  2351                           prodh	equ	0xFF4
  2352                           prodl	equ	0xFF3
  2353                           intcon	equ	0xFF2
  2354                           intcon2	equ	0xFF1
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           postdec1	equ	0xFE5
  2358                           fsr1l	equ	0xFE1
  2359                           postinc2	equ	0xFDE
  2360                           postdec2	equ	0xFDD
  2361                           fsr2h	equ	0xFDA
  2362                           fsr2l	equ	0xFD9
  2363                           status	equ	0xFD8
  2364                           
  2365 ;; *************** function _Activate_Buzzer *****************
  2366 ;; Defined at:
  2367 ;;		line 255 in file "Lab10_sample_3.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;		None
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;		None
  2372 ;; Return value:  Size  Location     Type
  2373 ;;		None               void
  2374 ;; Registers used:
  2375 ;;		wreg, status,2
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;Total ram usage:        0 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    3
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_waitHalfSecondWithBeep
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           	psect	text4
  2396  001A98                     __ptext4:
  2397                           	opt stack 0
  2398  001A98                     _Activate_Buzzer:
  2399                           	opt stack 26
  2400                           
  2401                           ;Lab10_sample_3.c: 257: PR2 = 0b11111001;
  2402                           
  2403                           ;incstack = 0
  2404  001A98  0EF9               	movlw	249
  2405  001A9A  6ECB               	movwf	4043,c	;volatile
  2406                           
  2407                           ;Lab10_sample_3.c: 258: T2CON = 0b00000101;
  2408  001A9C  0E05               	movlw	5
  2409  001A9E  6ECA               	movwf	4042,c	;volatile
  2410                           
  2411                           ;Lab10_sample_3.c: 259: CCPR2L = 0b01001010;
  2412  001AA0  0E4A               	movlw	74
  2413  001AA2  6EBB               	movwf	4027,c	;volatile
  2414                           
  2415                           ;Lab10_sample_3.c: 260: CCP2CON = 0b00111100;
  2416  001AA4  0E3C               	movlw	60
  2417  001AA6  6EBA               	movwf	4026,c	;volatile
  2418  001AA8  0012               	return		;funcret
  2419  001AAA                     __end_of_Activate_Buzzer:
  2420                           	opt stack 0
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           prodh	equ	0xFF4
  2426                           prodl	equ	0xFF3
  2427                           intcon	equ	0xFF2
  2428                           intcon2	equ	0xFF1
  2429                           postinc0	equ	0xFEE
  2430                           wreg	equ	0xFE8
  2431                           postdec1	equ	0xFE5
  2432                           fsr1l	equ	0xFE1
  2433                           postinc2	equ	0xFDE
  2434                           postdec2	equ	0xFDD
  2435                           fsr2h	equ	0xFDA
  2436                           fsr2l	equ	0xFD9
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function _printf *****************
  2440 ;; Defined at:
  2441 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;  f               2   38[COMRAM] PTR const unsigned char 
  2444 ;;		 -> STR_4(23), STR_3(22), STR_2(43), STR_1(30), 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  idx             1    0[BANK0 ] unsigned char 
  2447 ;;  val             4    5[BANK0 ] unsigned long 
  2448 ;;  tmpval          4    0        struct .
  2449 ;;  cp              3    0        PTR const unsigned char 
  2450 ;;  width           2    9[BANK0 ] int 
  2451 ;;  ap              2    3[BANK0 ] PTR void [1]
  2452 ;;		 -> ?_printf(2), 
  2453 ;;  prec            2    1[BANK0 ] int 
  2454 ;;  len             2    0        unsigned int 
  2455 ;;  c               1   12[BANK0 ] char 
  2456 ;;  flag            1   11[BANK0 ] unsigned char 
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  2   38[COMRAM] int 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2466 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2467 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Totals:        18      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;Total ram usage:       31 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    4
  2473 ;; This function calls:
  2474 ;;		___lldiv
  2475 ;;		___llmod
  2476 ;;		___wmul
  2477 ;;		_isdigit
  2478 ;;		_putch
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text5
  2485  00001C                     __ptext5:
  2486                           	opt stack 0
  2487  00001C                     _printf:
  2488                           	opt stack 26
  2489                           
  2490                           ;doprnt.c: 466: va_list ap;
  2491                           ;doprnt.c: 499: signed char c;
  2492                           ;doprnt.c: 501: int width;
  2493                           ;doprnt.c: 504: int prec;
  2494                           ;doprnt.c: 508: unsigned char flag;
  2495                           ;doprnt.c: 523: union {
  2496                           ;doprnt.c: 524: unsigned long vd;
  2497                           ;doprnt.c: 525: double integ;
  2498                           ;doprnt.c: 526: } tmpval;
  2499                           ;doprnt.c: 528: unsigned long val;
  2500                           ;doprnt.c: 529: unsigned len;
  2501                           ;doprnt.c: 530: const char * cp;
  2502                           ;doprnt.c: 533: *ap = __va_start();
  2503                           
  2504                           ;incstack = 0
  2505  00001C  0E29               	movlw	low (?_printf+2)
  2506  00001E  0100               	movlb	0	; () banked
  2507  000020  6FE1               	movwf	printf@ap& (0+255),b
  2508  000022  0E00               	movlw	high (?_printf+2)
  2509  000024  0100               	movlb	0	; () banked
  2510  000026  6FE2               	movwf	(printf@ap+1)& (0+255),b
  2511                           
  2512                           ;doprnt.c: 536: while(c = *f++) {
  2513  000028  D254               	goto	l5139
  2514  00002A                     l5001:
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;doprnt.c: 538: if(c != '%')
  2518  00002A  0E25               	movlw	37
  2519  00002C  0100               	movlb	0	; () banked
  2520  00002E  19EA               	xorwf	printf@c& (0+255),w,b
  2521  000030  B4D8               	btfsc	status,2,c
  2522  000032  D005               	goto	l5005
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;doprnt.c: 540: {
  2526                           ;doprnt.c: 541: (putch(c) );
  2527  000034  0100               	movlb	0	; () banked
  2528  000036  51EA               	movf	printf@c& (0+255),w,b
  2529  000038  EC89  F00D         	call	_putch
  2530                           
  2531                           ;doprnt.c: 542: continue;
  2532  00003C  D24A               	goto	l5139
  2533  00003E                     l5005:
  2534                           
  2535                           ;doprnt.c: 543: }
  2536                           ;doprnt.c: 546: width = 0;
  2537  00003E  0E00               	movlw	0
  2538  000040  0100               	movlb	0	; () banked
  2539  000042  6FE8               	movwf	(printf@width+1)& (0+255),b
  2540  000044  0E00               	movlw	0
  2541  000046  6FE7               	movwf	printf@width& (0+255),b
  2542                           
  2543                           ;doprnt.c: 548: flag = 0;
  2544  000048  0E00               	movlw	0
  2545  00004A  0100               	movlb	0	; () banked
  2546  00004C  6FE9               	movwf	printf@flag& (0+255),b
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;doprnt.c: 551: switch(*f) {
  2550                           
  2551                           ;doprnt.c: 550: for(;;) {
  2552  00004E  D006               	goto	l5011
  2553  000050                     l5007:
  2554                           
  2555                           ;doprnt.c: 580: flag |= 0x04;
  2556  000050  0100               	movlb	0	; () banked
  2557  000052  85E9               	bsf	printf@flag& (0+255),2,b
  2558                           
  2559                           ;doprnt.c: 581: f++;
  2560  000054  4A27               	infsnz	printf@f,f,c
  2561  000056  2A28               	incf	printf@f+1,f,c
  2562                           
  2563                           ;doprnt.c: 582: continue;
  2564  000058  D001               	goto	l5011
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;doprnt.c: 584: }
  2568  00005A  D00B               	goto	l5013
  2569  00005C                     l5011:
  2570  00005C  C027  FFF6         	movff	printf@f,tblptrl
  2571  000060  C028  FFF7         	movff	printf@f+1,tblptrh
  2572  000064                     	if	0	;tblptru may be non-zero
  2573  000064                     	endif
  2574  000064                     	if	0	;tblptru may be non-zero
  2575  000064                     	endif
  2576  000064  0008               	tblrd		*
  2577  000066  50F5               	movf	tablat,w,c
  2578                           
  2579                           ; Switch size 1, requested type "space"
  2580                           ; Number of cases is 1, Range of values is 48 to 48
  2581                           ; switch strategies available:
  2582                           ; Name         Instructions Cycles
  2583                           ; simple_byte            4     3 (average)
  2584                           ;	Chosen strategy is simple_byte
  2585  000068  0A30               	xorlw	48	; case 48
  2586  00006A  B4D8               	btfsc	status,2,c
  2587  00006C  D7F1               	goto	l5007
  2588                           
  2589                           ;doprnt.c: 585: break;
  2590  00006E  D001               	goto	l5013
  2591                           
  2592                           ;doprnt.c: 586: }
  2593  000070  D7F5               	goto	l5011
  2594  000072                     l5013:
  2595                           
  2596                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2597  000072  C027  FFF6         	movff	printf@f,tblptrl
  2598  000076  C028  FFF7         	movff	printf@f+1,tblptrh
  2599  00007A                     	if	0	;tblptru may be non-zero
  2600  00007A                     	endif
  2601  00007A                     	if	0	;tblptru may be non-zero
  2602  00007A                     	endif
  2603  00007A  0008               	tblrd		*
  2604  00007C  50F5               	movf	tablat,w,c
  2605  00007E  ECCC  F00C         	call	_isdigit
  2606  000082  A0D8               	btfss	status,0,c
  2607  000084  D042               	goto	l5031
  2608                           
  2609                           ;doprnt.c: 598: width = 0;
  2610  000086  0E00               	movlw	0
  2611  000088  0100               	movlb	0	; () banked
  2612  00008A  6FE8               	movwf	(printf@width+1)& (0+255),b
  2613  00008C  0E00               	movlw	0
  2614  00008E  6FE7               	movwf	printf@width& (0+255),b
  2615  000090  D000               	goto	l5017
  2616  000092                     l5017:
  2617                           
  2618                           ;doprnt.c: 600: width *= 10;
  2619  000092  C0E7  F011         	movff	printf@width,___wmul@multiplier
  2620  000096  C0E8  F012         	movff	printf@width+1,___wmul@multiplier+1
  2621  00009A  0E00               	movlw	0
  2622  00009C  6E14               	movwf	___wmul@multiplicand+1,c
  2623  00009E  0E0A               	movlw	10
  2624  0000A0  6E13               	movwf	___wmul@multiplicand,c
  2625  0000A2  ECB8  F00C         	call	___wmul	;wreg free
  2626  0000A6  C011  F0E7         	movff	?___wmul,printf@width
  2627  0000AA  C012  F0E8         	movff	?___wmul+1,printf@width+1
  2628                           
  2629                           ;doprnt.c: 601: width += *f++ - '0';
  2630  0000AE  0ED0               	movlw	208
  2631  0000B0  6E35               	movwf	??_printf& (0+255),c
  2632  0000B2  0EFF               	movlw	255
  2633  0000B4  6E36               	movwf	(??_printf+1)& (0+255),c
  2634  0000B6  C027  FFF6         	movff	printf@f,tblptrl
  2635  0000BA  C028  FFF7         	movff	printf@f+1,tblptrh
  2636  0000BE                     	if	0	;tblptru may be non-zero
  2637  0000BE                     	endif
  2638  0000BE                     	if	0	;tblptru may be non-zero
  2639  0000BE                     	endif
  2640  0000BE  0008               	tblrd		*
  2641  0000C0  50F5               	movf	tablat,w,c
  2642  0000C2  6E37               	movwf	(??_printf+2)& (0+255),c
  2643  0000C4  6A38               	clrf	(??_printf+3)& (0+255),c
  2644  0000C6  5035               	movf	??_printf,w,c
  2645  0000C8  2637               	addwf	??_printf+2,f,c
  2646  0000CA  5036               	movf	??_printf+1,w,c
  2647  0000CC  2238               	addwfc	??_printf+3,f,c
  2648  0000CE  5037               	movf	??_printf+2,w,c
  2649  0000D0  0100               	movlb	0	; () banked
  2650  0000D2  27E7               	addwf	printf@width& (0+255),f,b
  2651  0000D4  5038               	movf	??_printf+3,w,c
  2652  0000D6  0100               	movlb	0	; () banked
  2653  0000D8  23E8               	addwfc	(printf@width+1)& (0+255),f,b
  2654                           
  2655                           ; BSR set to: 0
  2656  0000DA  4A27               	infsnz	printf@f,f,c
  2657  0000DC  2A28               	incf	printf@f+1,f,c
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2661  0000DE  C027  FFF6         	movff	printf@f,tblptrl
  2662  0000E2  C028  FFF7         	movff	printf@f+1,tblptrh
  2663  0000E6                     	if	0	;tblptru may be non-zero
  2664  0000E6                     	endif
  2665  0000E6                     	if	0	;tblptru may be non-zero
  2666  0000E6                     	endif
  2667  0000E6  0008               	tblrd		*
  2668  0000E8  50F5               	movf	tablat,w,c
  2669  0000EA  ECCC  F00C         	call	_isdigit
  2670  0000EE  A0D8               	btfss	status,0,c
  2671  0000F0  D00C               	goto	l5031
  2672  0000F2  D7CF               	goto	l5017
  2673                           
  2674                           ;doprnt.c: 635: switch(c = *f++) {
  2675                           
  2676                           ;doprnt.c: 608: }
  2677                           ;doprnt.c: 633: loop:
  2678  0000F4  D00A               	goto	l5031
  2679                           
  2680                           ;doprnt.c: 638: goto alldone;
  2681                           
  2682                           ;doprnt.c: 637: case 0:
  2683  0000F6  D1FC               	goto	l671
  2684  0000F8                     l5025:
  2685                           
  2686                           ;doprnt.c: 643: flag |= 0x10;
  2687  0000F8  0100               	movlb	0	; () banked
  2688  0000FA  89E9               	bsf	printf@flag& (0+255),4,b
  2689                           
  2690                           ;doprnt.c: 644: goto loop;
  2691  0000FC  D006               	goto	l5031
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;doprnt.c: 698: case 'i':
  2695                           ;doprnt.c: 699: break;
  2696                           
  2697                           ; BSR set to: 0
  2698                           
  2699                           ;doprnt.c: 697: case 'd':
  2700  0000FE  D020               	goto	l630
  2701  000100                     l5027:
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;doprnt.c: 721: flag |= 0x80;
  2705  000100  0100               	movlb	0	; () banked
  2706  000102  8FE9               	bsf	printf@flag& (0+255),7,b
  2707                           
  2708                           ;doprnt.c: 723: break;
  2709  000104  D01D               	goto	l630
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;doprnt.c: 813: continue;
  2713                           
  2714                           ;doprnt.c: 802: default:
  2715  000106  D1E5               	goto	l5139
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;doprnt.c: 822: }
  2719  000108  D01B               	goto	l630
  2720  00010A                     l5031:
  2721  00010A  C027  FFF6         	movff	printf@f,tblptrl
  2722  00010E  C028  FFF7         	movff	printf@f+1,tblptrh
  2723  000112  4A27               	infsnz	printf@f,f,c
  2724  000114  2A28               	incf	printf@f+1,f,c
  2725  000116                     	if	0	;tblptru may be non-zero
  2726  000116                     	endif
  2727  000116                     	if	0	;tblptru may be non-zero
  2728  000116                     	endif
  2729  000116  0008               	tblrd		*
  2730  000118  CFF5 F0EA          	movff	tablat,printf@c
  2731  00011C  0100               	movlb	0	; () banked
  2732  00011E  51EA               	movf	printf@c& (0+255),w,b
  2733                           
  2734                           ; Switch size 1, requested type "space"
  2735                           ; Number of cases is 5, Range of values is 0 to 120
  2736                           ; switch strategies available:
  2737                           ; Name         Instructions Cycles
  2738                           ; simple_byte           16     9 (average)
  2739                           ;	Chosen strategy is simple_byte
  2740  000120  0A00               	xorlw	0	; case 0
  2741  000122  B4D8               	btfsc	status,2,c
  2742  000124  D1E5               	goto	l671
  2743  000126  0A64               	xorlw	100	; case 100
  2744  000128  B4D8               	btfsc	status,2,c
  2745  00012A  D00A               	goto	l630
  2746  00012C  0A0D               	xorlw	13	; case 105
  2747  00012E  B4D8               	btfsc	status,2,c
  2748  000130  D007               	goto	l630
  2749  000132  0A05               	xorlw	5	; case 108
  2750  000134  B4D8               	btfsc	status,2,c
  2751  000136  D7E0               	goto	l5025
  2752  000138  0A14               	xorlw	20	; case 120
  2753  00013A  B4D8               	btfsc	status,2,c
  2754  00013C  D7E1               	goto	l5027
  2755  00013E  D1C9               	goto	l5139
  2756  000140                     l630:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2760  000140  0100               	movlb	0	; () banked
  2761  000142  BFE9               	btfsc	printf@flag& (0+255),7,b
  2762  000144  D035               	goto	l633
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;doprnt.c: 1253: {
  2766                           ;doprnt.c: 1255: if(flag & 0x10)
  2767  000146  0100               	movlb	0	; () banked
  2768  000148  A9E9               	btfss	printf@flag& (0+255),4,b
  2769  00014A  D00E               	goto	l5039
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2773  00014C  C0E1  FFD9         	movff	printf@ap,fsr2l
  2774  000150  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  2775  000154  CFDE F0E3          	movff	postinc2,printf@val
  2776  000158  CFDE F0E4          	movff	postinc2,printf@val+1
  2777  00015C  CFDE F0E5          	movff	postinc2,printf@val+2
  2778  000160  CFDE F0E6          	movff	postinc2,printf@val+3
  2779                           
  2780                           ; BSR set to: 0
  2781  000164  0E04               	movlw	4
  2782  000166  D00F               	goto	L1
  2783  000168                     l5039:
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;doprnt.c: 1257: else
  2787                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2788  000168  C0E1  FFD9         	movff	printf@ap,fsr2l
  2789  00016C  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  2790  000170  CFDE F0E3          	movff	postinc2,printf@val
  2791  000174  CFDD F0E4          	movff	postdec2,printf@val+1
  2792  000178  0100               	movlb	0	; () banked
  2793  00017A  0E00               	movlw	0
  2794  00017C  BFE4               	btfsc	(printf@val+1)& (0+255),7,b
  2795  00017E  0EFF               	movlw	-1
  2796  000180  6FE5               	movwf	(printf@val+2)& (0+255),b
  2797  000182  6FE6               	movwf	(printf@val+3)& (0+255),b
  2798                           
  2799                           ; BSR set to: 0
  2800  000184  0E02               	movlw	2
  2801  000186                     L1:
  2802  000186  0100               	movlb	0	; () banked
  2803  000188  27E1               	addwf	printf@ap& (0+255),f,b
  2804  00018A  0E00               	movlw	0
  2805  00018C  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  2806  00018E  D000               	goto	l5043
  2807  000190                     l5043:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;doprnt.c: 1261: if((long)val < 0) {
  2811  000190  0100               	movlb	0	; () banked
  2812  000192  AFE6               	btfss	(printf@val+3)& (0+255),7,b
  2813  000194  D089               	goto	l5087
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;doprnt.c: 1262: flag |= 0x03;
  2817  000196  0E03               	movlw	3
  2818  000198  0100               	movlb	0	; () banked
  2819  00019A  13E9               	iorwf	printf@flag& (0+255),f,b
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;doprnt.c: 1263: val = -val;
  2823  00019C  0100               	movlb	0	; () banked
  2824  00019E  1FE6               	comf	(printf@val+3)& (0+255),f,b
  2825  0001A0  1FE5               	comf	(printf@val+2)& (0+255),f,b
  2826  0001A2  1FE4               	comf	(printf@val+1)& (0+255),f,b
  2827  0001A4  6DE3               	negf	printf@val& (0+255),b
  2828  0001A6  0E00               	movlw	0
  2829  0001A8  23E4               	addwfc	(printf@val+1)& (0+255),f,b
  2830  0001AA  23E5               	addwfc	(printf@val+2)& (0+255),f,b
  2831  0001AC  23E6               	addwfc	(printf@val+3)& (0+255),f,b
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;doprnt.c: 1264: }
  2835                           ;doprnt.c: 1266: }
  2836  0001AE  D07C               	goto	l5087
  2837  0001B0                     l633:
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;doprnt.c: 1268: else
  2841                           ;doprnt.c: 1273: {
  2842                           ;doprnt.c: 1281: if(flag & 0x10)
  2843  0001B0  0100               	movlb	0	; () banked
  2844  0001B2  A9E9               	btfss	printf@flag& (0+255),4,b
  2845  0001B4  D00E               	goto	l5053
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2849  0001B6  C0E1  FFD9         	movff	printf@ap,fsr2l
  2850  0001BA  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  2851  0001BE  CFDE F0E3          	movff	postinc2,printf@val
  2852  0001C2  CFDE F0E4          	movff	postinc2,printf@val+1
  2853  0001C6  CFDE F0E5          	movff	postinc2,printf@val+2
  2854  0001CA  CFDE F0E6          	movff	postinc2,printf@val+3
  2855                           
  2856                           ; BSR set to: 0
  2857  0001CE  0E04               	movlw	4
  2858  0001D0  D010               	goto	L2
  2859  0001D2                     l5053:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;doprnt.c: 1283: else
  2863                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2864  0001D2  C0E1  FFD9         	movff	printf@ap,fsr2l
  2865  0001D6  C0E2  FFDA         	movff	printf@ap+1,fsr2h
  2866  0001DA  CFDE F035          	movff	postinc2,??_printf
  2867  0001DE  CFDD F036          	movff	postdec2,??_printf+1
  2868  0001E2  C035  F0E3         	movff	??_printf,printf@val
  2869  0001E6  C036  F0E4         	movff	??_printf+1,printf@val+1
  2870  0001EA  0100               	movlb	0	; () banked
  2871  0001EC  6BE5               	clrf	(printf@val+2)& (0+255),b
  2872  0001EE  6BE6               	clrf	(printf@val+3)& (0+255),b
  2873                           
  2874                           ; BSR set to: 0
  2875  0001F0  0E02               	movlw	2
  2876  0001F2                     L2:
  2877  0001F2  0100               	movlb	0	; () banked
  2878  0001F4  27E1               	addwf	printf@ap& (0+255),f,b
  2879  0001F6  0E00               	movlw	0
  2880  0001F8  23E2               	addwfc	(printf@ap+1)& (0+255),f,b
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;doprnt.c: 1287: }
  2884                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2885                           
  2886                           ; BSR set to: 0
  2887  0001FA  D056               	goto	l5087
  2888  0001FC                     l5057:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2892  0001FC  0E01               	movlw	1
  2893  0001FE  0100               	movlb	0	; () banked
  2894  000200  6FEA               	movwf	printf@c& (0+255),b
  2895  000202                     l5059:
  2896                           
  2897                           ; BSR set to: 0
  2898  000202  0E0A               	movlw	10
  2899  000204  0100               	movlb	0	; () banked
  2900  000206  19EA               	xorwf	printf@c& (0+255),w,b
  2901  000208  B4D8               	btfsc	status,2,c
  2902  00020A  D058               	goto	l5089
  2903  00020C  D001               	goto	l5063
  2904                           
  2905                           ; BSR set to: 0
  2906  00020E  D056               	goto	l5089
  2907  000210                     l5063:
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;doprnt.c: 1306: if(val < dpowers[c])
  2911  000210  0100               	movlb	0	; () banked
  2912  000212  51EA               	movf	printf@c& (0+255),w,b
  2913  000214  0D04               	mullw	4
  2914  000216  0E14               	movlw	low _dpowers
  2915  000218  24F3               	addwf	prodl,w,c
  2916  00021A  6EF6               	movwf	tblptrl,c
  2917  00021C  0EFF               	movlw	high _dpowers
  2918  00021E  20F4               	addwfc	prodh,w,c
  2919  000220  6EF7               	movwf	tblptrh,c
  2920  000222                     	if	0	;There are less than 3 active tblptr bytes
  2921  000222                     	endif
  2922  000222  0009               	tblrd		*+
  2923  000224  50F5               	movf	tablat,w,c
  2924  000226  0100               	movlb	0	; () banked
  2925  000228  5DE3               	subwf	printf@val& (0+255),w,b
  2926  00022A  0009               	tblrd		*+
  2927  00022C  50F5               	movf	tablat,w,c
  2928  00022E  0100               	movlb	0	; () banked
  2929  000230  59E4               	subwfb	(printf@val+1)& (0+255),w,b
  2930  000232  0009               	tblrd		*+
  2931  000234  50F5               	movf	tablat,w,c
  2932  000236  0100               	movlb	0	; () banked
  2933  000238  59E5               	subwfb	(printf@val+2)& (0+255),w,b
  2934  00023A  0009               	tblrd		*+
  2935  00023C  50F5               	movf	tablat,w,c
  2936  00023E  0100               	movlb	0	; () banked
  2937  000240  59E6               	subwfb	(printf@val+3)& (0+255),w,b
  2938  000242  A0D8               	btfss	status,0,c
  2939  000244  D03B               	goto	l5089
  2940  000246  D001               	goto	l5067
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;doprnt.c: 1307: break;
  2944  000248  D039               	goto	l5089
  2945  00024A                     l5067:
  2946                           
  2947                           ; BSR set to: 0
  2948  00024A  0100               	movlb	0	; () banked
  2949  00024C  2BEA               	incf	printf@c& (0+255),f,b
  2950  00024E  D7D9               	goto	l5059
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;doprnt.c: 1309: break;
  2954                           
  2955                           ; BSR set to: 0
  2956  000250  D035               	goto	l5089
  2957  000252                     l5071:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2961  000252  0E01               	movlw	1
  2962  000254  0100               	movlb	0	; () banked
  2963  000256  6FEA               	movwf	printf@c& (0+255),b
  2964  000258                     l5073:
  2965                           
  2966                           ; BSR set to: 0
  2967  000258  0E08               	movlw	8
  2968  00025A  0100               	movlb	0	; () banked
  2969  00025C  19EA               	xorwf	printf@c& (0+255),w,b
  2970  00025E  B4D8               	btfsc	status,2,c
  2971  000260  D02D               	goto	l5089
  2972  000262  D001               	goto	l5077
  2973                           
  2974                           ; BSR set to: 0
  2975  000264  D02B               	goto	l5089
  2976  000266                     l5077:
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2980  000266  0100               	movlb	0	; () banked
  2981  000268  51EA               	movf	printf@c& (0+255),w,b
  2982  00026A  0D04               	mullw	4
  2983  00026C  0E3C               	movlw	low _hexpowers
  2984  00026E  24F3               	addwf	prodl,w,c
  2985  000270  6EF6               	movwf	tblptrl,c
  2986  000272  0EFF               	movlw	high _hexpowers
  2987  000274  20F4               	addwfc	prodh,w,c
  2988  000276  6EF7               	movwf	tblptrh,c
  2989  000278                     	if	0	;There are less than 3 active tblptr bytes
  2990  000278                     	endif
  2991  000278  0009               	tblrd		*+
  2992  00027A  50F5               	movf	tablat,w,c
  2993  00027C  0100               	movlb	0	; () banked
  2994  00027E  5DE3               	subwf	printf@val& (0+255),w,b
  2995  000280  0009               	tblrd		*+
  2996  000282  50F5               	movf	tablat,w,c
  2997  000284  0100               	movlb	0	; () banked
  2998  000286  59E4               	subwfb	(printf@val+1)& (0+255),w,b
  2999  000288  0009               	tblrd		*+
  3000  00028A  50F5               	movf	tablat,w,c
  3001  00028C  0100               	movlb	0	; () banked
  3002  00028E  59E5               	subwfb	(printf@val+2)& (0+255),w,b
  3003  000290  0009               	tblrd		*+
  3004  000292  50F5               	movf	tablat,w,c
  3005  000294  0100               	movlb	0	; () banked
  3006  000296  59E6               	subwfb	(printf@val+3)& (0+255),w,b
  3007  000298  A0D8               	btfss	status,0,c
  3008  00029A  D010               	goto	l5089
  3009  00029C  D001               	goto	l5081
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;doprnt.c: 1318: break;
  3013  00029E  D00E               	goto	l5089
  3014  0002A0                     l5081:
  3015                           
  3016                           ; BSR set to: 0
  3017  0002A0  0100               	movlb	0	; () banked
  3018  0002A2  2BEA               	incf	printf@c& (0+255),f,b
  3019  0002A4  D7D9               	goto	l5073
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;doprnt.c: 1336: }
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;doprnt.c: 1320: break;
  3026                           
  3027                           ; BSR set to: 0
  3028  0002A6  D00A               	goto	l5089
  3029  0002A8                     l5087:
  3030                           
  3031                           ; BSR set to: 0
  3032  0002A8  0100               	movlb	0	; () banked
  3033  0002AA  51E9               	movf	printf@flag& (0+255),w,b
  3034  0002AC  0B80               	andlw	128
  3035                           
  3036                           ; Switch size 1, requested type "space"
  3037                           ; Number of cases is 2, Range of values is 0 to 128
  3038                           ; switch strategies available:
  3039                           ; Name         Instructions Cycles
  3040                           ; simple_byte            7     4 (average)
  3041                           ;	Chosen strategy is simple_byte
  3042  0002AE  0A00               	xorlw	0	; case 0
  3043  0002B0  B4D8               	btfsc	status,2,c
  3044  0002B2  D7A4               	goto	l5057
  3045  0002B4  0A80               	xorlw	128	; case 128
  3046  0002B6  B4D8               	btfsc	status,2,c
  3047  0002B8  D7CC               	goto	l5071
  3048  0002BA  D000               	goto	l5089
  3049  0002BC                     l5089:
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3053  0002BC  0100               	movlb	0	; () banked
  3054  0002BE  51E7               	movf	printf@width& (0+255),w,b
  3055  0002C0  0100               	movlb	0	; () banked
  3056  0002C2  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  3057  0002C4  B4D8               	btfsc	status,2,c
  3058  0002C6  D00B               	goto	l5095
  3059                           
  3060                           ; BSR set to: 0
  3061  0002C8  C0E9  F035         	movff	printf@flag,??_printf
  3062  0002CC  0E03               	movlw	3
  3063  0002CE  1635               	andwf	??_printf,f,c
  3064  0002D0  B4D8               	btfsc	status,2,c
  3065  0002D2  D005               	goto	l5095
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;doprnt.c: 1346: width--;
  3069  0002D4  0100               	movlb	0	; () banked
  3070  0002D6  07E7               	decf	printf@width& (0+255),f,b
  3071  0002D8  A0D8               	btfss	status,0,c
  3072  0002DA  07E8               	decf	(printf@width+1)& (0+255),f,b
  3073  0002DC  D000               	goto	l5095
  3074  0002DE                     l5095:
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;doprnt.c: 1381: if(width > c)
  3078  0002DE  0E80               	movlw	128
  3079  0002E0  0100               	movlb	0	; () banked
  3080  0002E2  BFEA               	btfsc	printf@c& (0+255),7,b
  3081  0002E4  0E7F               	movlw	127
  3082  0002E6  6E35               	movwf	??_printf& (0+255),c
  3083  0002E8  0100               	movlb	0	; () banked
  3084  0002EA  51E7               	movf	printf@width& (0+255),w,b
  3085  0002EC  0100               	movlb	0	; () banked
  3086  0002EE  5DEA               	subwf	printf@c& (0+255),w,b
  3087  0002F0  0100               	movlb	0	; () banked
  3088  0002F2  51E8               	movf	(printf@width+1)& (0+255),w,b
  3089  0002F4  0A80               	xorlw	128
  3090  0002F6  5835               	subwfb	??_printf& (0+255),w,c
  3091  0002F8  B0D8               	btfsc	status,0,c
  3092  0002FA  D00B               	goto	l5099
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;doprnt.c: 1382: width -= c;
  3096  0002FC  0100               	movlb	0	; () banked
  3097  0002FE  51EA               	movf	printf@c& (0+255),w,b
  3098  000300  0100               	movlb	0	; () banked
  3099  000302  5FE7               	subwf	printf@width& (0+255),f,b
  3100  000304  0E00               	movlw	0
  3101  000306  0100               	movlb	0	; () banked
  3102  000308  BFEA               	btfsc	printf@c& (0+255),7,b
  3103  00030A  0EFF               	movlw	255
  3104  00030C  0100               	movlb	0	; () banked
  3105  00030E  5BE8               	subwfb	(printf@width+1)& (0+255),f,b
  3106  000310  D006               	goto	l5101
  3107  000312                     l5099:
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;doprnt.c: 1383: else
  3111                           ;doprnt.c: 1384: width = 0;
  3112  000312  0E00               	movlw	0
  3113  000314  0100               	movlb	0	; () banked
  3114  000316  6FE8               	movwf	(printf@width+1)& (0+255),b
  3115  000318  0E00               	movlw	0
  3116  00031A  6FE7               	movwf	printf@width& (0+255),b
  3117  00031C  D000               	goto	l5101
  3118  00031E                     l5101:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;doprnt.c: 1387: if(flag & 0x04) {
  3122  00031E  0100               	movlb	0	; () banked
  3123  000320  A5E9               	btfss	printf@flag& (0+255),2,b
  3124  000322  D01F               	goto	l5113
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;doprnt.c: 1392: if(flag & 0x03)
  3128  000324  C0E9  F035         	movff	printf@flag,??_printf
  3129  000328  0E03               	movlw	3
  3130  00032A  1635               	andwf	??_printf,f,c
  3131  00032C  B4D8               	btfsc	status,2,c
  3132  00032E  D004               	goto	l5107
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;doprnt.c: 1393: (putch('-') );
  3136  000330  0E2D               	movlw	45
  3137  000332  EC89  F00D         	call	_putch
  3138  000336  D000               	goto	l5107
  3139  000338                     l5107:
  3140                           
  3141                           ;doprnt.c: 1415: if(width)
  3142  000338  0100               	movlb	0	; () banked
  3143  00033A  51E7               	movf	printf@width& (0+255),w,b
  3144  00033C  0100               	movlb	0	; () banked
  3145  00033E  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  3146  000340  B4D8               	btfsc	status,2,c
  3147  000342  D02E               	goto	l5123
  3148  000344                     l5109:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;doprnt.c: 1417: (putch('0') );
  3152  000344  0E30               	movlw	48
  3153  000346  EC89  F00D         	call	_putch
  3154                           
  3155                           ;doprnt.c: 1418: while(--width);
  3156  00034A  0100               	movlb	0	; () banked
  3157  00034C  07E7               	decf	printf@width& (0+255),f,b
  3158  00034E  A0D8               	btfss	status,0,c
  3159  000350  07E8               	decf	(printf@width+1)& (0+255),f,b
  3160  000352  0100               	movlb	0	; () banked
  3161  000354  51E7               	movf	printf@width& (0+255),w,b
  3162  000356  0100               	movlb	0	; () banked
  3163  000358  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  3164  00035A  B4D8               	btfsc	status,2,c
  3165  00035C  D021               	goto	l5123
  3166  00035E  D7F2               	goto	l5109
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;doprnt.c: 1420: } else
  3170                           
  3171                           ; BSR set to: 0
  3172  000360  D01F               	goto	l5123
  3173  000362                     l5113:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;doprnt.c: 1422: {
  3177                           ;doprnt.c: 1424: if(width
  3178                           ;doprnt.c: 1428: )
  3179  000362  0100               	movlb	0	; () banked
  3180  000364  51E7               	movf	printf@width& (0+255),w,b
  3181  000366  0100               	movlb	0	; () banked
  3182  000368  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  3183  00036A  B4D8               	btfsc	status,2,c
  3184  00036C  D00F               	goto	l5119
  3185  00036E                     l5115:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;doprnt.c: 1430: (putch(' ') );
  3189  00036E  0E20               	movlw	32
  3190  000370  EC89  F00D         	call	_putch
  3191                           
  3192                           ;doprnt.c: 1431: while(--width);
  3193  000374  0100               	movlb	0	; () banked
  3194  000376  07E7               	decf	printf@width& (0+255),f,b
  3195  000378  A0D8               	btfss	status,0,c
  3196  00037A  07E8               	decf	(printf@width+1)& (0+255),f,b
  3197  00037C  0100               	movlb	0	; () banked
  3198  00037E  51E7               	movf	printf@width& (0+255),w,b
  3199  000380  0100               	movlb	0	; () banked
  3200  000382  11E8               	iorwf	(printf@width+1)& (0+255),w,b
  3201  000384  B4D8               	btfsc	status,2,c
  3202  000386  D002               	goto	l5119
  3203  000388  D7F2               	goto	l5115
  3204                           
  3205                           ; BSR set to: 0
  3206  00038A  D000               	goto	l5119
  3207  00038C                     l5119:
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;doprnt.c: 1438: if(flag & 0x03)
  3211  00038C  C0E9  F035         	movff	printf@flag,??_printf
  3212  000390  0E03               	movlw	3
  3213  000392  1635               	andwf	??_printf,f,c
  3214  000394  B4D8               	btfsc	status,2,c
  3215  000396  D004               	goto	l5123
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;doprnt.c: 1439: (putch('-') );
  3219  000398  0E2D               	movlw	45
  3220  00039A  EC89  F00D         	call	_putch
  3221  00039E  D000               	goto	l5123
  3222  0003A0                     l5123:
  3223                           
  3224                           ;doprnt.c: 1469: }
  3225                           ;doprnt.c: 1472: prec = c;
  3226  0003A0  0100               	movlb	0	; () banked
  3227  0003A2  51EA               	movf	printf@c& (0+255),w,b
  3228  0003A4  0100               	movlb	0	; () banked
  3229  0003A6  6FDF               	movwf	printf@prec& (0+255),b
  3230  0003A8  6BE0               	clrf	(printf@prec+1)& (0+255),b
  3231  0003AA  BFDF               	btfsc	printf@prec& (0+255),7,b
  3232  0003AC  07E0               	decf	(printf@prec+1)& (0+255),f,b
  3233                           
  3234                           ;doprnt.c: 1474: while(prec--) {
  3235  0003AE  D084               	goto	l5137
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3239  0003B0  D074               	goto	l5133
  3240  0003B2                     l5125:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3244  0003B2  C0DF  F035         	movff	printf@prec,??_printf
  3245  0003B6  C0E0  F036         	movff	printf@prec+1,??_printf+1
  3246  0003BA  90D8               	bcf	status,0,c
  3247  0003BC  3635               	rlcf	??_printf,f,c
  3248  0003BE  3636               	rlcf	??_printf+1,f,c
  3249  0003C0  90D8               	bcf	status,0,c
  3250  0003C2  3635               	rlcf	??_printf,f,c
  3251  0003C4  3636               	rlcf	??_printf+1,f,c
  3252  0003C6  0E14               	movlw	low _dpowers
  3253  0003C8  2435               	addwf	??_printf,w,c
  3254  0003CA  6EF6               	movwf	tblptrl,c
  3255  0003CC  0EFF               	movlw	high _dpowers
  3256  0003CE  2036               	addwfc	??_printf+1,w,c
  3257  0003D0  6EF7               	movwf	tblptrh,c
  3258  0003D2                     	if	0	;There are less than 3 active tblptr bytes
  3259  0003D2                     	endif
  3260  0003D2  0009               	tblrd		*+
  3261  0003D4  CFF5 F015          	movff	tablat,___lldiv@divisor
  3262  0003D8  0009               	tblrd		*+
  3263  0003DA  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3264  0003DE  0009               	tblrd		*+
  3265  0003E0  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3266  0003E4  000A               	tblrd		*-
  3267  0003E6  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3268  0003EA  C0E3  F011         	movff	printf@val,___lldiv@dividend
  3269  0003EE  C0E4  F012         	movff	printf@val+1,___lldiv@dividend+1
  3270  0003F2  C0E5  F013         	movff	printf@val+2,___lldiv@dividend+2
  3271  0003F6  C0E6  F014         	movff	printf@val+3,___lldiv@dividend+3
  3272  0003FA  ECBA  F008         	call	___lldiv	;wreg free
  3273  0003FE  C011  F01E         	movff	?___lldiv,___llmod@dividend
  3274  000402  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  3275  000406  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  3276  00040A  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  3277  00040E  0E0A               	movlw	10
  3278  000410  6E22               	movwf	___llmod@divisor,c
  3279  000412  0E00               	movlw	0
  3280  000414  6E23               	movwf	___llmod@divisor+1,c
  3281  000416  0E00               	movlw	0
  3282  000418  6E24               	movwf	___llmod@divisor+2,c
  3283  00041A  0E00               	movlw	0
  3284  00041C  6E25               	movwf	___llmod@divisor+3,c
  3285  00041E  ECC3  F009         	call	___llmod	;wreg free
  3286  000422  501E               	movf	?___llmod,w,c
  3287  000424  0F30               	addlw	48
  3288  000426  0100               	movlb	0	; () banked
  3289  000428  6FEA               	movwf	printf@c& (0+255),b
  3290                           
  3291                           ;doprnt.c: 1491: break;
  3292  00042A  D041               	goto	l5135
  3293  00042C                     l5127:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;doprnt.c: 1499: {
  3297                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3298  00042C  C0E3  F011         	movff	printf@val,___lldiv@dividend
  3299  000430  C0E4  F012         	movff	printf@val+1,___lldiv@dividend+1
  3300  000434  C0E5  F013         	movff	printf@val+2,___lldiv@dividend+2
  3301  000438  C0E6  F014         	movff	printf@val+3,___lldiv@dividend+3
  3302  00043C  C0DF  F035         	movff	printf@prec,??_printf
  3303  000440  C0E0  F036         	movff	printf@prec+1,??_printf+1
  3304  000444  90D8               	bcf	status,0,c
  3305  000446  3635               	rlcf	??_printf,f,c
  3306  000448  3636               	rlcf	??_printf+1,f,c
  3307  00044A  90D8               	bcf	status,0,c
  3308  00044C  3635               	rlcf	??_printf,f,c
  3309  00044E  3636               	rlcf	??_printf+1,f,c
  3310  000450  0E3C               	movlw	low _hexpowers
  3311  000452  2435               	addwf	??_printf,w,c
  3312  000454  6EF6               	movwf	tblptrl,c
  3313  000456  0EFF               	movlw	high _hexpowers
  3314  000458  2036               	addwfc	??_printf+1,w,c
  3315  00045A  6EF7               	movwf	tblptrh,c
  3316  00045C                     	if	0	;There are less than 3 active tblptr bytes
  3317  00045C                     	endif
  3318  00045C  0009               	tblrd		*+
  3319  00045E  CFF5 F015          	movff	tablat,___lldiv@divisor
  3320  000462  0009               	tblrd		*+
  3321  000464  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3322  000468  0009               	tblrd		*+
  3323  00046A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3324  00046E  000A               	tblrd		*-
  3325  000470  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3326  000474  ECBA  F008         	call	___lldiv	;wreg free
  3327  000478  5011               	movf	?___lldiv,w,c
  3328  00047A  0B0F               	andlw	15
  3329  00047C  0100               	movlb	0	; () banked
  3330  00047E  6FDE               	movwf	printf@idx& (0+255),b
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3334  000480  0100               	movlb	0	; () banked
  3335  000482  51DE               	movf	printf@idx& (0+255),w,b
  3336  000484  0D01               	mullw	1
  3337  000486  0EE6               	movlw	low STR_7
  3338  000488  24F3               	addwf	prodl,w,c
  3339  00048A  6EF6               	movwf	tblptrl,c
  3340  00048C  0EFF               	movlw	high STR_7
  3341  00048E  20F4               	addwfc	prodh,w,c
  3342  000490  6EF7               	movwf	tblptrh,c
  3343  000492                     	if	0	;There are less than 3 active tblptr bytes
  3344  000492                     	endif
  3345  000492  0008               	tblrd		*
  3346  000494  CFF5 F0EA          	movff	tablat,printf@c
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;doprnt.c: 1523: }
  3350                           
  3351                           ;doprnt.c: 1508: }
  3352                           ;doprnt.c: 1510: break;
  3353  000498  D00A               	goto	l5135
  3354  00049A                     l5133:
  3355                           
  3356                           ; BSR set to: 0
  3357  00049A  0100               	movlb	0	; () banked
  3358  00049C  51E9               	movf	printf@flag& (0+255),w,b
  3359  00049E  0B80               	andlw	128
  3360                           
  3361                           ; Switch size 1, requested type "space"
  3362                           ; Number of cases is 2, Range of values is 0 to 128
  3363                           ; switch strategies available:
  3364                           ; Name         Instructions Cycles
  3365                           ; simple_byte            7     4 (average)
  3366                           ;	Chosen strategy is simple_byte
  3367  0004A0  0A00               	xorlw	0	; case 0
  3368  0004A2  B4D8               	btfsc	status,2,c
  3369  0004A4  D786               	goto	l5125
  3370  0004A6  0A80               	xorlw	128	; case 128
  3371  0004A8  B4D8               	btfsc	status,2,c
  3372  0004AA  D7C0               	goto	l5127
  3373  0004AC  D000               	goto	l5135
  3374  0004AE                     l5135:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;doprnt.c: 1524: (putch(c) );
  3378  0004AE  0100               	movlb	0	; () banked
  3379  0004B0  51EA               	movf	printf@c& (0+255),w,b
  3380  0004B2  EC89  F00D         	call	_putch
  3381  0004B6  D000               	goto	l5137
  3382  0004B8                     l5137:
  3383  0004B8  0100               	movlb	0	; () banked
  3384  0004BA  07DF               	decf	printf@prec& (0+255),f,b
  3385  0004BC  A0D8               	btfss	status,0,c
  3386  0004BE  07E0               	decf	(printf@prec+1)& (0+255),f,b
  3387  0004C0  0100               	movlb	0	; () banked
  3388  0004C2  29DF               	incf	printf@prec& (0+255),w,b
  3389  0004C4  E1EA               	bnz	l5133
  3390  0004C6  0100               	movlb	0	; () banked
  3391  0004C8  29E0               	incf	(printf@prec+1)& (0+255),w,b
  3392  0004CA  B4D8               	btfsc	status,2,c
  3393  0004CC  D002               	goto	l5139
  3394  0004CE  D7E5               	goto	l5133
  3395                           
  3396                           ; BSR set to: 0
  3397  0004D0  D000               	goto	l5139
  3398  0004D2                     l5139:
  3399  0004D2  C027  FFF6         	movff	printf@f,tblptrl
  3400  0004D6  C028  FFF7         	movff	printf@f+1,tblptrh
  3401  0004DA  4A27               	infsnz	printf@f,f,c
  3402  0004DC  2A28               	incf	printf@f+1,f,c
  3403  0004DE                     	if	0	;tblptru may be non-zero
  3404  0004DE                     	endif
  3405  0004DE                     	if	0	;tblptru may be non-zero
  3406  0004DE                     	endif
  3407  0004DE  0008               	tblrd		*
  3408  0004E0  CFF5 F0EA          	movff	tablat,printf@c
  3409  0004E4  0100               	movlb	0	; () banked
  3410  0004E6  51EA               	movf	printf@c& (0+255),w,b
  3411  0004E8  B4D8               	btfsc	status,2,c
  3412  0004EA  D002               	goto	l671
  3413  0004EC  D59E               	goto	l5001
  3414                           
  3415                           ; BSR set to: 0
  3416  0004EE  D000               	goto	l671
  3417  0004F0                     l671:
  3418  0004F0  0012               	return		;funcret
  3419  0004F2                     __end_of_printf:
  3420                           	opt stack 0
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           intcon2	equ	0xFF1
  3429                           postinc0	equ	0xFEE
  3430                           wreg	equ	0xFE8
  3431                           postdec1	equ	0xFE5
  3432                           fsr1l	equ	0xFE1
  3433                           postinc2	equ	0xFDE
  3434                           postdec2	equ	0xFDD
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8
  3438                           
  3439 ;; *************** function _putch *****************
  3440 ;; Defined at:
  3441 ;;		line 129 in file "Lab10_sample_3.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;  c               1    wreg     unsigned char 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  c               1   16[COMRAM] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;		None               void
  3448 ;; Registers used:
  3449 ;;		wreg
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;Total ram usage:        1 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    3
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_printf
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text6
  3470  001B12                     __ptext6:
  3471                           	opt stack 0
  3472  001B12                     _putch:
  3473                           	opt stack 26
  3474                           
  3475                           ;incstack = 0
  3476                           ;putch@c stored from wreg
  3477  001B12  6E11               	movwf	putch@c,c
  3478                           
  3479                           ;Lab10_sample_3.c: 131: while (!TRMT);
  3480  001B14  D000               	goto	l546
  3481  001B16                     l546:
  3482  001B16  A2AC               	btfss	4012,1,c	;volatile
  3483  001B18  D7FE               	goto	l546
  3484                           
  3485                           ;Lab10_sample_3.c: 132: TXREG = c;
  3486  001B1A  C011  FFAD         	movff	putch@c,4013	;volatile
  3487  001B1E  0012               	return		;funcret
  3488  001B20                     __end_of_putch:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           intcon	equ	0xFF2
  3497                           intcon2	equ	0xFF1
  3498                           postinc0	equ	0xFEE
  3499                           wreg	equ	0xFE8
  3500                           postdec1	equ	0xFE5
  3501                           fsr1l	equ	0xFE1
  3502                           postinc2	equ	0xFDE
  3503                           postdec2	equ	0xFDD
  3504                           fsr2h	equ	0xFDA
  3505                           fsr2l	equ	0xFD9
  3506                           status	equ	0xFD8
  3507                           
  3508 ;; *************** function _isdigit *****************
  3509 ;; Defined at:
  3510 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  c               1    wreg     unsigned char 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  c               1   18[COMRAM] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;		None               void
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;Total ram usage:        3 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    3
  3531 ;; This function calls:
  3532 ;;		Nothing
  3533 ;; This function is called by:
  3534 ;;		_printf
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text7
  3539  001998                     __ptext7:
  3540                           	opt stack 0
  3541  001998                     _isdigit:
  3542                           	opt stack 26
  3543                           
  3544                           ;incstack = 0
  3545                           ;isdigit@c stored from wreg
  3546  001998  6E13               	movwf	isdigit@c,c
  3547  00199A  0E00               	movlw	0
  3548  00199C  6E12               	movwf	_isdigit$2119,c
  3549  00199E  0E3A               	movlw	58
  3550  0019A0  6013               	cpfslt	isdigit@c,c
  3551  0019A2  D006               	goto	l4735
  3552  0019A4  0E2F               	movlw	47
  3553  0019A6  6413               	cpfsgt	isdigit@c,c
  3554  0019A8  D003               	goto	l4735
  3555  0019AA  0E01               	movlw	1
  3556  0019AC  6E12               	movwf	_isdigit$2119,c
  3557  0019AE  D000               	goto	l4735
  3558  0019B0                     l4735:
  3559  0019B0  C012  F011         	movff	_isdigit$2119,??_isdigit
  3560  0019B4  3011               	rrcf	??_isdigit,w,c
  3561  0019B6  D000               	goto	l1138
  3562  0019B8                     l1138:
  3563  0019B8  0012               	return		;funcret
  3564  0019BA                     __end_of_isdigit:
  3565                           	opt stack 0
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           intcon	equ	0xFF2
  3573                           intcon2	equ	0xFF1
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1l	equ	0xFE1
  3578                           postinc2	equ	0xFDE
  3579                           postdec2	equ	0xFDD
  3580                           fsr2h	equ	0xFDA
  3581                           fsr2l	equ	0xFD9
  3582                           status	equ	0xFD8
  3583                           
  3584 ;; *************** function ___llmod *****************
  3585 ;; Defined at:
  3586 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;  dividend        4   29[COMRAM] unsigned long 
  3589 ;;  divisor         4   33[COMRAM] unsigned long 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  counter         1   37[COMRAM] unsigned char 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  4   29[COMRAM] unsigned long 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3601 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3605 ;;Total ram usage:        9 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    3
  3608 ;; This function calls:
  3609 ;;		Nothing
  3610 ;; This function is called by:
  3611 ;;		_printf
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text8
  3616  001386                     __ptext8:
  3617                           	opt stack 0
  3618  001386                     ___llmod:
  3619                           	opt stack 26
  3620                           
  3621                           ;incstack = 0
  3622  001386  5022               	movf	___llmod@divisor,w,c
  3623  001388  1023               	iorwf	___llmod@divisor+1,w,c
  3624  00138A  1024               	iorwf	___llmod@divisor+2,w,c
  3625  00138C  1025               	iorwf	___llmod@divisor+3,w,c
  3626  00138E  B4D8               	btfsc	status,2,c
  3627  001390  D029               	goto	l1177
  3628  001392  0E01               	movlw	1
  3629  001394  6E26               	movwf	___llmod@counter,c
  3630  001396  D007               	goto	l4811
  3631  001398                     l4809:
  3632  001398  90D8               	bcf	status,0,c
  3633  00139A  3622               	rlcf	___llmod@divisor,f,c
  3634  00139C  3623               	rlcf	___llmod@divisor+1,f,c
  3635  00139E  3624               	rlcf	___llmod@divisor+2,f,c
  3636  0013A0  3625               	rlcf	___llmod@divisor+3,f,c
  3637  0013A2  2A26               	incf	___llmod@counter,f,c
  3638  0013A4  D000               	goto	l4811
  3639  0013A6                     l4811:
  3640  0013A6  BE25               	btfsc	___llmod@divisor+3,7,c
  3641  0013A8  D002               	goto	l4813
  3642  0013AA  D7F6               	goto	l4809
  3643  0013AC  D000               	goto	l4813
  3644  0013AE                     l4813:
  3645  0013AE  5022               	movf	___llmod@divisor,w,c
  3646  0013B0  5C1E               	subwf	___llmod@dividend,w,c
  3647  0013B2  5023               	movf	___llmod@divisor+1,w,c
  3648  0013B4  581F               	subwfb	___llmod@dividend+1,w,c
  3649  0013B6  5024               	movf	___llmod@divisor+2,w,c
  3650  0013B8  5820               	subwfb	___llmod@dividend+2,w,c
  3651  0013BA  5025               	movf	___llmod@divisor+3,w,c
  3652  0013BC  5821               	subwfb	___llmod@dividend+3,w,c
  3653  0013BE  A0D8               	btfss	status,0,c
  3654  0013C0  D009               	goto	l4817
  3655  0013C2  5022               	movf	___llmod@divisor,w,c
  3656  0013C4  5E1E               	subwf	___llmod@dividend,f,c
  3657  0013C6  5023               	movf	___llmod@divisor+1,w,c
  3658  0013C8  5A1F               	subwfb	___llmod@dividend+1,f,c
  3659  0013CA  5024               	movf	___llmod@divisor+2,w,c
  3660  0013CC  5A20               	subwfb	___llmod@dividend+2,f,c
  3661  0013CE  5025               	movf	___llmod@divisor+3,w,c
  3662  0013D0  5A21               	subwfb	___llmod@dividend+3,f,c
  3663  0013D2  D000               	goto	l4817
  3664  0013D4                     l4817:
  3665  0013D4  90D8               	bcf	status,0,c
  3666  0013D6  3225               	rrcf	___llmod@divisor+3,f,c
  3667  0013D8  3224               	rrcf	___llmod@divisor+2,f,c
  3668  0013DA  3223               	rrcf	___llmod@divisor+1,f,c
  3669  0013DC  3222               	rrcf	___llmod@divisor,f,c
  3670  0013DE  2E26               	decfsz	___llmod@counter,f,c
  3671  0013E0  D7E6               	goto	l4813
  3672  0013E2  D000               	goto	l1177
  3673  0013E4                     l1177:
  3674  0013E4  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3675  0013E8  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3676  0013EC  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3677  0013F0  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3678  0013F4  0012               	return		;funcret
  3679  0013F6                     __end_of___llmod:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           intcon	equ	0xFF2
  3688                           intcon2	equ	0xFF1
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           postdec1	equ	0xFE5
  3692                           fsr1l	equ	0xFE1
  3693                           postinc2	equ	0xFDE
  3694                           postdec2	equ	0xFDD
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function ___lldiv *****************
  3700 ;; Defined at:
  3701 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  dividend        4   16[COMRAM] unsigned long 
  3704 ;;  divisor         4   20[COMRAM] unsigned long 
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;  quotient        4   24[COMRAM] unsigned long 
  3707 ;;  counter         1   28[COMRAM] unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  4   16[COMRAM] unsigned long 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3717 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;Total ram usage:       13 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    3
  3724 ;; This function calls:
  3725 ;;		Nothing
  3726 ;; This function is called by:
  3727 ;;		_printf
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           	psect	text9
  3732  001174                     __ptext9:
  3733                           	opt stack 0
  3734  001174                     ___lldiv:
  3735                           	opt stack 26
  3736                           
  3737                           ;incstack = 0
  3738  001174  0E00               	movlw	0
  3739  001176  6E19               	movwf	___lldiv@quotient,c
  3740  001178  0E00               	movlw	0
  3741  00117A  6E1A               	movwf	___lldiv@quotient+1,c
  3742  00117C  0E00               	movlw	0
  3743  00117E  6E1B               	movwf	___lldiv@quotient+2,c
  3744  001180  0E00               	movlw	0
  3745  001182  6E1C               	movwf	___lldiv@quotient+3,c
  3746  001184  5015               	movf	___lldiv@divisor,w,c
  3747  001186  1016               	iorwf	___lldiv@divisor+1,w,c
  3748  001188  1017               	iorwf	___lldiv@divisor+2,w,c
  3749  00118A  1018               	iorwf	___lldiv@divisor+3,w,c
  3750  00118C  B4D8               	btfsc	status,2,c
  3751  00118E  D02F               	goto	l1167
  3752  001190  0E01               	movlw	1
  3753  001192  6E1D               	movwf	___lldiv@counter,c
  3754  001194  D007               	goto	l4791
  3755  001196                     l4789:
  3756  001196  90D8               	bcf	status,0,c
  3757  001198  3615               	rlcf	___lldiv@divisor,f,c
  3758  00119A  3616               	rlcf	___lldiv@divisor+1,f,c
  3759  00119C  3617               	rlcf	___lldiv@divisor+2,f,c
  3760  00119E  3618               	rlcf	___lldiv@divisor+3,f,c
  3761  0011A0  2A1D               	incf	___lldiv@counter,f,c
  3762  0011A2  D000               	goto	l4791
  3763  0011A4                     l4791:
  3764  0011A4  BE18               	btfsc	___lldiv@divisor+3,7,c
  3765  0011A6  D002               	goto	l4793
  3766  0011A8  D7F6               	goto	l4789
  3767  0011AA  D000               	goto	l4793
  3768  0011AC                     l4793:
  3769  0011AC  90D8               	bcf	status,0,c
  3770  0011AE  3619               	rlcf	___lldiv@quotient,f,c
  3771  0011B0  361A               	rlcf	___lldiv@quotient+1,f,c
  3772  0011B2  361B               	rlcf	___lldiv@quotient+2,f,c
  3773  0011B4  361C               	rlcf	___lldiv@quotient+3,f,c
  3774  0011B6  5015               	movf	___lldiv@divisor,w,c
  3775  0011B8  5C11               	subwf	___lldiv@dividend,w,c
  3776  0011BA  5016               	movf	___lldiv@divisor+1,w,c
  3777  0011BC  5812               	subwfb	___lldiv@dividend+1,w,c
  3778  0011BE  5017               	movf	___lldiv@divisor+2,w,c
  3779  0011C0  5813               	subwfb	___lldiv@dividend+2,w,c
  3780  0011C2  5018               	movf	___lldiv@divisor+3,w,c
  3781  0011C4  5814               	subwfb	___lldiv@dividend+3,w,c
  3782  0011C6  A0D8               	btfss	status,0,c
  3783  0011C8  D00A               	goto	l4801
  3784  0011CA  5015               	movf	___lldiv@divisor,w,c
  3785  0011CC  5E11               	subwf	___lldiv@dividend,f,c
  3786  0011CE  5016               	movf	___lldiv@divisor+1,w,c
  3787  0011D0  5A12               	subwfb	___lldiv@dividend+1,f,c
  3788  0011D2  5017               	movf	___lldiv@divisor+2,w,c
  3789  0011D4  5A13               	subwfb	___lldiv@dividend+2,f,c
  3790  0011D6  5018               	movf	___lldiv@divisor+3,w,c
  3791  0011D8  5A14               	subwfb	___lldiv@dividend+3,f,c
  3792  0011DA  8019               	bsf	___lldiv@quotient,0,c
  3793  0011DC  D000               	goto	l4801
  3794  0011DE                     l4801:
  3795  0011DE  90D8               	bcf	status,0,c
  3796  0011E0  3218               	rrcf	___lldiv@divisor+3,f,c
  3797  0011E2  3217               	rrcf	___lldiv@divisor+2,f,c
  3798  0011E4  3216               	rrcf	___lldiv@divisor+1,f,c
  3799  0011E6  3215               	rrcf	___lldiv@divisor,f,c
  3800  0011E8  2E1D               	decfsz	___lldiv@counter,f,c
  3801  0011EA  D7E0               	goto	l4793
  3802  0011EC  D000               	goto	l1167
  3803  0011EE                     l1167:
  3804  0011EE  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3805  0011F2  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3806  0011F6  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3807  0011FA  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3808  0011FE  0012               	return		;funcret
  3809  001200                     __end_of___lldiv:
  3810                           	opt stack 0
  3811                           tblptru	equ	0xFF8
  3812                           tblptrh	equ	0xFF7
  3813                           tblptrl	equ	0xFF6
  3814                           tablat	equ	0xFF5
  3815                           prodh	equ	0xFF4
  3816                           prodl	equ	0xFF3
  3817                           intcon	equ	0xFF2
  3818                           intcon2	equ	0xFF1
  3819                           postinc0	equ	0xFEE
  3820                           wreg	equ	0xFE8
  3821                           postdec1	equ	0xFE5
  3822                           fsr1l	equ	0xFE1
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _fillCircle *****************
  3830 ;; Defined at:
  3831 ;;		line 651 in file "ST7735_TFT.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  x0              2   58[COMRAM] int 
  3834 ;;  y0              2   60[COMRAM] int 
  3835 ;;  r               2   62[COMRAM] int 
  3836 ;;  color           2   64[COMRAM] unsigned int 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;		None               void
  3841 ;; Registers used:
  3842 ;;		wreg, status,2, status,0, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3848 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;Total ram usage:        8 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    8
  3855 ;; This function calls:
  3856 ;;		_drawFastVLine
  3857 ;;		_fillCircleHelper
  3858 ;; This function is called by:
  3859 ;;		_main
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	text10
  3864  001584                     __ptext10:
  3865                           	opt stack 0
  3866  001584                     _fillCircle:
  3867                           	opt stack 22
  3868                           
  3869                           ;ST7735_TFT.c: 653: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3870                           
  3871                           ;incstack = 0
  3872  001584  503F               	movf	fillCircle@r,w,c
  3873  001586  0800               	sublw	0
  3874  001588  243D               	addwf	fillCircle@y0,w,c
  3875  00158A  6E18               	movwf	drawFastVLine@y,c
  3876  00158C  80D8               	bsf	status,0,c
  3877  00158E  343F               	rlcf	fillCircle@r,w,c
  3878  001590  6E19               	movwf	drawFastVLine@h,c
  3879  001592  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3880  001596  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3881  00159A  503B               	movf	fillCircle@x0,w,c
  3882  00159C  EC00  F009         	call	_drawFastVLine
  3883                           
  3884                           ;ST7735_TFT.c: 654: fillCircleHelper(x0, y0, r, 3, 0, color);
  3885  0015A0  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3886  0015A4  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3887  0015A8  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3888  0015AC  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3889  0015B0  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3890  0015B4  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3891  0015B8  0E00               	movlw	0
  3892  0015BA  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3893  0015BC  0E03               	movlw	3
  3894  0015BE  6E29               	movwf	fillCircleHelper@cornername,c
  3895  0015C0  0E00               	movlw	0
  3896  0015C2  6E2C               	movwf	fillCircleHelper@delta+1,c
  3897  0015C4  0E00               	movlw	0
  3898  0015C6  6E2B               	movwf	fillCircleHelper@delta,c
  3899  0015C8  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3900  0015CC  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3901  0015D0  EC98  F005         	call	_fillCircleHelper	;wreg free
  3902  0015D4  0012               	return		;funcret
  3903  0015D6                     __end_of_fillCircle:
  3904                           	opt stack 0
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           prodh	equ	0xFF4
  3910                           prodl	equ	0xFF3
  3911                           intcon	equ	0xFF2
  3912                           intcon2	equ	0xFF1
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           postdec1	equ	0xFE5
  3916                           fsr1l	equ	0xFE1
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           fsr2h	equ	0xFDA
  3920                           fsr2l	equ	0xFD9
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _fillCircleHelper *****************
  3924 ;; Defined at:
  3925 ;;		line 626 in file "ST7735_TFT.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  x0              2   34[COMRAM] int 
  3928 ;;  y0              2   36[COMRAM] int 
  3929 ;;  r               2   38[COMRAM] int 
  3930 ;;  cornername      2   40[COMRAM] unsigned int 
  3931 ;;  delta           2   42[COMRAM] int 
  3932 ;;  color           2   44[COMRAM] unsigned int 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  y               2   56[COMRAM] int 
  3935 ;;  x               2   54[COMRAM] int 
  3936 ;;  f               2   52[COMRAM] int 
  3937 ;;  ddF_y           2   50[COMRAM] int 
  3938 ;;  ddF_x           2   48[COMRAM] int 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;		None               void
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3948 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;Total ram usage:       24 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    7
  3955 ;; This function calls:
  3956 ;;		_drawFastVLine
  3957 ;; This function is called by:
  3958 ;;		_fillCircle
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text11
  3963  000B30                     __ptext11:
  3964                           	opt stack 0
  3965  000B30                     _fillCircleHelper:
  3966                           	opt stack 22
  3967                           
  3968                           ;ST7735_TFT.c: 628: signed int f, ddF_x, ddF_y, x, y;
  3969                           ;ST7735_TFT.c: 629: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3970                           
  3971                           ;incstack = 0
  3972  000B30  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3973  000B34  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3974  000B38  1E2F               	comf	??_fillCircleHelper,f,c
  3975  000B3A  1E30               	comf	??_fillCircleHelper+1,f,c
  3976  000B3C  4A2F               	infsnz	??_fillCircleHelper,f,c
  3977  000B3E  2A30               	incf	??_fillCircleHelper+1,f,c
  3978  000B40  0E01               	movlw	1
  3979  000B42  242F               	addwf	??_fillCircleHelper,w,c
  3980  000B44  6E35               	movwf	fillCircleHelper@f,c
  3981  000B46  0E00               	movlw	0
  3982  000B48  2030               	addwfc	??_fillCircleHelper+1,w,c
  3983  000B4A  6E36               	movwf	fillCircleHelper@f+1,c
  3984  000B4C  0E00               	movlw	0
  3985  000B4E  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3986  000B50  0E01               	movlw	1
  3987  000B52  6E31               	movwf	fillCircleHelper@ddF_x,c
  3988  000B54  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3989  000B58  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3990  000B5C  90D8               	bcf	status,0,c
  3991  000B5E  362F               	rlcf	??_fillCircleHelper,f,c
  3992  000B60  3630               	rlcf	??_fillCircleHelper+1,f,c
  3993  000B62  1E2F               	comf	??_fillCircleHelper,f,c
  3994  000B64  1E30               	comf	??_fillCircleHelper+1,f,c
  3995  000B66  4A2F               	infsnz	??_fillCircleHelper,f,c
  3996  000B68  2A30               	incf	??_fillCircleHelper+1,f,c
  3997  000B6A  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3998  000B6E  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3999  000B72  0E00               	movlw	0
  4000  000B74  6E38               	movwf	fillCircleHelper@x+1,c
  4001  000B76  0E00               	movlw	0
  4002  000B78  6E37               	movwf	fillCircleHelper@x,c
  4003  000B7A  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  4004  000B7E  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  4005                           
  4006                           ;ST7735_TFT.c: 630: while (x<y) {
  4007  000B82  D067               	goto	l4619
  4008  000B84                     l4599:
  4009                           
  4010                           ;ST7735_TFT.c: 631: if (f >= 0) {
  4011  000B84  BE36               	btfsc	fillCircleHelper@f+1,7,c
  4012  000B86  D00B               	goto	l177
  4013                           
  4014                           ;ST7735_TFT.c: 632: y--;
  4015  000B88  0639               	decf	fillCircleHelper@y,f,c
  4016  000B8A  A0D8               	btfss	status,0,c
  4017  000B8C  063A               	decf	fillCircleHelper@y+1,f,c
  4018                           
  4019                           ;ST7735_TFT.c: 633: ddF_y += 2;
  4020  000B8E  0E02               	movlw	2
  4021  000B90  2633               	addwf	fillCircleHelper@ddF_y,f,c
  4022  000B92  0E00               	movlw	0
  4023  000B94  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  4024                           
  4025                           ;ST7735_TFT.c: 634: f += ddF_y;
  4026  000B96  5033               	movf	fillCircleHelper@ddF_y,w,c
  4027  000B98  2635               	addwf	fillCircleHelper@f,f,c
  4028  000B9A  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  4029  000B9C  2236               	addwfc	fillCircleHelper@f+1,f,c
  4030  000B9E                     l177:
  4031                           
  4032                           ;ST7735_TFT.c: 635: }
  4033                           ;ST7735_TFT.c: 636: x++;
  4034  000B9E  4A37               	infsnz	fillCircleHelper@x,f,c
  4035  000BA0  2A38               	incf	fillCircleHelper@x+1,f,c
  4036                           
  4037                           ;ST7735_TFT.c: 637: ddF_x += 2;
  4038  000BA2  0E02               	movlw	2
  4039  000BA4  2631               	addwf	fillCircleHelper@ddF_x,f,c
  4040  000BA6  0E00               	movlw	0
  4041  000BA8  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  4042                           
  4043                           ;ST7735_TFT.c: 638: f += ddF_x;
  4044  000BAA  5031               	movf	fillCircleHelper@ddF_x,w,c
  4045  000BAC  2635               	addwf	fillCircleHelper@f,f,c
  4046  000BAE  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  4047  000BB0  2236               	addwfc	fillCircleHelper@f+1,f,c
  4048                           
  4049                           ;ST7735_TFT.c: 640: if (cornername & 0x1) {
  4050  000BB2  A029               	btfss	fillCircleHelper@cornername,0,c
  4051  000BB4  D025               	goto	l4615
  4052                           
  4053                           ;ST7735_TFT.c: 641: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  4054  000BB6  5039               	movf	fillCircleHelper@y,w,c
  4055  000BB8  0800               	sublw	0
  4056  000BBA  2425               	addwf	fillCircleHelper@y0,w,c
  4057  000BBC  6E18               	movwf	drawFastVLine@y,c
  4058  000BBE  5039               	movf	fillCircleHelper@y,w,c
  4059  000BC0  2439               	addwf	fillCircleHelper@y,w,c
  4060  000BC2  242B               	addwf	fillCircleHelper@delta,w,c
  4061  000BC4  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  4062  000BC6  282F               	incf	??_fillCircleHelper,w,c
  4063  000BC8  6E19               	movwf	drawFastVLine@h,c
  4064  000BCA  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  4065  000BCE  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  4066  000BD2  5023               	movf	fillCircleHelper@x0,w,c
  4067  000BD4  2437               	addwf	fillCircleHelper@x,w,c
  4068  000BD6  EC00  F009         	call	_drawFastVLine
  4069                           
  4070                           ;ST7735_TFT.c: 642: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  4071  000BDA  5037               	movf	fillCircleHelper@x,w,c
  4072  000BDC  0800               	sublw	0
  4073  000BDE  2425               	addwf	fillCircleHelper@y0,w,c
  4074  000BE0  6E18               	movwf	drawFastVLine@y,c
  4075  000BE2  5037               	movf	fillCircleHelper@x,w,c
  4076  000BE4  2437               	addwf	fillCircleHelper@x,w,c
  4077  000BE6  242B               	addwf	fillCircleHelper@delta,w,c
  4078  000BE8  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  4079  000BEA  282F               	incf	??_fillCircleHelper,w,c
  4080  000BEC  6E19               	movwf	drawFastVLine@h,c
  4081  000BEE  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  4082  000BF2  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  4083  000BF6  5023               	movf	fillCircleHelper@x0,w,c
  4084  000BF8  2439               	addwf	fillCircleHelper@y,w,c
  4085  000BFA  EC00  F009         	call	_drawFastVLine
  4086  000BFE  D000               	goto	l4615
  4087  000C00                     l4615:
  4088                           
  4089                           ;ST7735_TFT.c: 643: }
  4090                           ;ST7735_TFT.c: 644: if (cornername & 0x2) {
  4091  000C00  A229               	btfss	fillCircleHelper@cornername,1,c
  4092  000C02  D027               	goto	l4619
  4093                           
  4094                           ;ST7735_TFT.c: 645: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  4095  000C04  5039               	movf	fillCircleHelper@y,w,c
  4096  000C06  0800               	sublw	0
  4097  000C08  2425               	addwf	fillCircleHelper@y0,w,c
  4098  000C0A  6E18               	movwf	drawFastVLine@y,c
  4099  000C0C  5039               	movf	fillCircleHelper@y,w,c
  4100  000C0E  2439               	addwf	fillCircleHelper@y,w,c
  4101  000C10  242B               	addwf	fillCircleHelper@delta,w,c
  4102  000C12  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  4103  000C14  282F               	incf	??_fillCircleHelper,w,c
  4104  000C16  6E19               	movwf	drawFastVLine@h,c
  4105  000C18  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  4106  000C1C  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  4107  000C20  5037               	movf	fillCircleHelper@x,w,c
  4108  000C22  0800               	sublw	0
  4109  000C24  2423               	addwf	fillCircleHelper@x0,w,c
  4110  000C26  EC00  F009         	call	_drawFastVLine
  4111                           
  4112                           ;ST7735_TFT.c: 646: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  4113  000C2A  5037               	movf	fillCircleHelper@x,w,c
  4114  000C2C  0800               	sublw	0
  4115  000C2E  2425               	addwf	fillCircleHelper@y0,w,c
  4116  000C30  6E18               	movwf	drawFastVLine@y,c
  4117  000C32  5037               	movf	fillCircleHelper@x,w,c
  4118  000C34  2437               	addwf	fillCircleHelper@x,w,c
  4119  000C36  242B               	addwf	fillCircleHelper@delta,w,c
  4120  000C38  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  4121  000C3A  282F               	incf	??_fillCircleHelper,w,c
  4122  000C3C  6E19               	movwf	drawFastVLine@h,c
  4123  000C3E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  4124  000C42  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  4125  000C46  5039               	movf	fillCircleHelper@y,w,c
  4126  000C48  0800               	sublw	0
  4127  000C4A  2423               	addwf	fillCircleHelper@x0,w,c
  4128  000C4C  EC00  F009         	call	_drawFastVLine
  4129  000C50  D000               	goto	l4619
  4130  000C52                     l4619:
  4131  000C52  5039               	movf	fillCircleHelper@y,w,c
  4132  000C54  5C37               	subwf	fillCircleHelper@x,w,c
  4133  000C56  5038               	movf	fillCircleHelper@x+1,w,c
  4134  000C58  0A80               	xorlw	128
  4135  000C5A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  4136  000C5C  503A               	movf	fillCircleHelper@y+1,w,c
  4137  000C5E  0A80               	xorlw	128
  4138  000C60  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  4139  000C62  A0D8               	btfss	status,0,c
  4140  000C64  D78F               	goto	l4599
  4141  000C66  0012               	return		;funcret
  4142  000C68                     __end_of_fillCircleHelper:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           intcon	equ	0xFF2
  4151                           intcon2	equ	0xFF1
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           postdec1	equ	0xFE5
  4155                           fsr1l	equ	0xFE1
  4156                           postinc2	equ	0xFDE
  4157                           postdec2	equ	0xFDD
  4158                           fsr2h	equ	0xFDA
  4159                           fsr2l	equ	0xFD9
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function _drawCircle *****************
  4163 ;; Defined at:
  4164 ;;		line 565 in file "ST7735_TFT.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  x0              2   27[COMRAM] int 
  4167 ;;  y0              2   29[COMRAM] int 
  4168 ;;  r               2   31[COMRAM] int 
  4169 ;;  color           2   33[COMRAM] unsigned int 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  y               2   45[COMRAM] int 
  4172 ;;  x               2   43[COMRAM] int 
  4173 ;;  f               2   41[COMRAM] int 
  4174 ;;  ddF_y           2   39[COMRAM] int 
  4175 ;;  ddF_x           2   37[COMRAM] int 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;		None               void
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4185 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;Total ram usage:       20 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    7
  4192 ;; This function calls:
  4193 ;;		_drawPixel
  4194 ;; This function is called by:
  4195 ;;		_main
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text12
  4200  0006D8                     __ptext12:
  4201                           	opt stack 0
  4202  0006D8                     _drawCircle:
  4203                           	opt stack 23
  4204                           
  4205                           ;ST7735_TFT.c: 567: signed int f, ddF_x, ddF_y, x, y;
  4206                           ;ST7735_TFT.c: 568: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  4207                           
  4208                           ;incstack = 0
  4209  0006D8  C020  F024         	movff	drawCircle@r,??_drawCircle
  4210  0006DC  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  4211  0006E0  1E24               	comf	??_drawCircle,f,c
  4212  0006E2  1E25               	comf	??_drawCircle+1,f,c
  4213  0006E4  4A24               	infsnz	??_drawCircle,f,c
  4214  0006E6  2A25               	incf	??_drawCircle+1,f,c
  4215  0006E8  0E01               	movlw	1
  4216  0006EA  2424               	addwf	??_drawCircle,w,c
  4217  0006EC  6E2A               	movwf	drawCircle@f,c
  4218  0006EE  0E00               	movlw	0
  4219  0006F0  2025               	addwfc	??_drawCircle+1,w,c
  4220  0006F2  6E2B               	movwf	drawCircle@f+1,c
  4221  0006F4  0E00               	movlw	0
  4222  0006F6  6E27               	movwf	drawCircle@ddF_x+1,c
  4223  0006F8  0E01               	movlw	1
  4224  0006FA  6E26               	movwf	drawCircle@ddF_x,c
  4225  0006FC  C020  F024         	movff	drawCircle@r,??_drawCircle
  4226  000700  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  4227  000704  90D8               	bcf	status,0,c
  4228  000706  3624               	rlcf	??_drawCircle,f,c
  4229  000708  3625               	rlcf	??_drawCircle+1,f,c
  4230  00070A  1E24               	comf	??_drawCircle,f,c
  4231  00070C  1E25               	comf	??_drawCircle+1,f,c
  4232  00070E  4A24               	infsnz	??_drawCircle,f,c
  4233  000710  2A25               	incf	??_drawCircle+1,f,c
  4234  000712  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  4235  000716  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  4236  00071A  0E00               	movlw	0
  4237  00071C  6E2D               	movwf	drawCircle@x+1,c
  4238  00071E  0E00               	movlw	0
  4239  000720  6E2C               	movwf	drawCircle@x,c
  4240  000722  C020  F02E         	movff	drawCircle@r,drawCircle@y
  4241  000726  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  4242                           
  4243                           ;ST7735_TFT.c: 569: drawPixel(x0 , y0 + r, color);
  4244  00072A  501E               	movf	drawCircle@y0,w,c
  4245  00072C  2420               	addwf	drawCircle@r,w,c
  4246  00072E  6E18               	movwf	drawPixel@y,c
  4247  000730  C022  F019         	movff	drawCircle@color,drawPixel@color
  4248  000734  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4249  000738  501C               	movf	drawCircle@x0,w,c
  4250  00073A  EC73  F00C         	call	_drawPixel
  4251                           
  4252                           ;ST7735_TFT.c: 570: drawPixel(x0 , y0 - r, color);
  4253  00073E  5020               	movf	drawCircle@r,w,c
  4254  000740  0800               	sublw	0
  4255  000742  241E               	addwf	drawCircle@y0,w,c
  4256  000744  6E18               	movwf	drawPixel@y,c
  4257  000746  C022  F019         	movff	drawCircle@color,drawPixel@color
  4258  00074A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4259  00074E  501C               	movf	drawCircle@x0,w,c
  4260  000750  EC73  F00C         	call	_drawPixel
  4261                           
  4262                           ;ST7735_TFT.c: 571: drawPixel(x0+r, y0 , color);
  4263  000754  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4264  000758  C022  F019         	movff	drawCircle@color,drawPixel@color
  4265  00075C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4266  000760  501C               	movf	drawCircle@x0,w,c
  4267  000762  2420               	addwf	drawCircle@r,w,c
  4268  000764  EC73  F00C         	call	_drawPixel
  4269                           
  4270                           ;ST7735_TFT.c: 572: drawPixel(x0-r, y0 , color);
  4271  000768  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4272  00076C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4273  000770  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4274  000774  5020               	movf	drawCircle@r,w,c
  4275  000776  0800               	sublw	0
  4276  000778  241C               	addwf	drawCircle@x0,w,c
  4277  00077A  EC73  F00C         	call	_drawPixel
  4278                           
  4279                           ;ST7735_TFT.c: 573: while (x < y) {
  4280  00077E  D078               	goto	l4869
  4281  000780                     l4841:
  4282                           
  4283                           ;ST7735_TFT.c: 574: if (f >= 0) {
  4284  000780  BE2B               	btfsc	drawCircle@f+1,7,c
  4285  000782  D00B               	goto	l159
  4286                           
  4287                           ;ST7735_TFT.c: 575: y--;
  4288  000784  062E               	decf	drawCircle@y,f,c
  4289  000786  A0D8               	btfss	status,0,c
  4290  000788  062F               	decf	drawCircle@y+1,f,c
  4291                           
  4292                           ;ST7735_TFT.c: 576: ddF_y += 2;
  4293  00078A  0E02               	movlw	2
  4294  00078C  2628               	addwf	drawCircle@ddF_y,f,c
  4295  00078E  0E00               	movlw	0
  4296  000790  2229               	addwfc	drawCircle@ddF_y+1,f,c
  4297                           
  4298                           ;ST7735_TFT.c: 577: f += ddF_y;
  4299  000792  5028               	movf	drawCircle@ddF_y,w,c
  4300  000794  262A               	addwf	drawCircle@f,f,c
  4301  000796  5029               	movf	drawCircle@ddF_y+1,w,c
  4302  000798  222B               	addwfc	drawCircle@f+1,f,c
  4303  00079A                     l159:
  4304                           
  4305                           ;ST7735_TFT.c: 578: }
  4306                           ;ST7735_TFT.c: 579: x++;
  4307  00079A  4A2C               	infsnz	drawCircle@x,f,c
  4308  00079C  2A2D               	incf	drawCircle@x+1,f,c
  4309                           
  4310                           ;ST7735_TFT.c: 580: ddF_x += 2;
  4311  00079E  0E02               	movlw	2
  4312  0007A0  2626               	addwf	drawCircle@ddF_x,f,c
  4313  0007A2  0E00               	movlw	0
  4314  0007A4  2227               	addwfc	drawCircle@ddF_x+1,f,c
  4315                           
  4316                           ;ST7735_TFT.c: 581: f += ddF_x;
  4317  0007A6  5026               	movf	drawCircle@ddF_x,w,c
  4318  0007A8  262A               	addwf	drawCircle@f,f,c
  4319  0007AA  5027               	movf	drawCircle@ddF_x+1,w,c
  4320  0007AC  222B               	addwfc	drawCircle@f+1,f,c
  4321                           
  4322                           ;ST7735_TFT.c: 582: drawPixel(x0 + x, y0 + y, color);
  4323  0007AE  501E               	movf	drawCircle@y0,w,c
  4324  0007B0  242E               	addwf	drawCircle@y,w,c
  4325  0007B2  6E18               	movwf	drawPixel@y,c
  4326  0007B4  C022  F019         	movff	drawCircle@color,drawPixel@color
  4327  0007B8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4328  0007BC  501C               	movf	drawCircle@x0,w,c
  4329  0007BE  242C               	addwf	drawCircle@x,w,c
  4330  0007C0  EC73  F00C         	call	_drawPixel
  4331                           
  4332                           ;ST7735_TFT.c: 583: drawPixel(x0 - x, y0 + y, color);
  4333  0007C4  501E               	movf	drawCircle@y0,w,c
  4334  0007C6  242E               	addwf	drawCircle@y,w,c
  4335  0007C8  6E18               	movwf	drawPixel@y,c
  4336  0007CA  C022  F019         	movff	drawCircle@color,drawPixel@color
  4337  0007CE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4338  0007D2  502C               	movf	drawCircle@x,w,c
  4339  0007D4  0800               	sublw	0
  4340  0007D6  241C               	addwf	drawCircle@x0,w,c
  4341  0007D8  EC73  F00C         	call	_drawPixel
  4342                           
  4343                           ;ST7735_TFT.c: 584: drawPixel(x0 + x, y0 - y, color);
  4344  0007DC  502E               	movf	drawCircle@y,w,c
  4345  0007DE  0800               	sublw	0
  4346  0007E0  241E               	addwf	drawCircle@y0,w,c
  4347  0007E2  6E18               	movwf	drawPixel@y,c
  4348  0007E4  C022  F019         	movff	drawCircle@color,drawPixel@color
  4349  0007E8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4350  0007EC  501C               	movf	drawCircle@x0,w,c
  4351  0007EE  242C               	addwf	drawCircle@x,w,c
  4352  0007F0  EC73  F00C         	call	_drawPixel
  4353                           
  4354                           ;ST7735_TFT.c: 585: drawPixel(x0 - x, y0 - y, color);
  4355  0007F4  502E               	movf	drawCircle@y,w,c
  4356  0007F6  0800               	sublw	0
  4357  0007F8  241E               	addwf	drawCircle@y0,w,c
  4358  0007FA  6E18               	movwf	drawPixel@y,c
  4359  0007FC  C022  F019         	movff	drawCircle@color,drawPixel@color
  4360  000800  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4361  000804  502C               	movf	drawCircle@x,w,c
  4362  000806  0800               	sublw	0
  4363  000808  241C               	addwf	drawCircle@x0,w,c
  4364  00080A  EC73  F00C         	call	_drawPixel
  4365                           
  4366                           ;ST7735_TFT.c: 586: drawPixel(x0 + y, y0 + x, color);
  4367  00080E  501E               	movf	drawCircle@y0,w,c
  4368  000810  242C               	addwf	drawCircle@x,w,c
  4369  000812  6E18               	movwf	drawPixel@y,c
  4370  000814  C022  F019         	movff	drawCircle@color,drawPixel@color
  4371  000818  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4372  00081C  501C               	movf	drawCircle@x0,w,c
  4373  00081E  242E               	addwf	drawCircle@y,w,c
  4374  000820  EC73  F00C         	call	_drawPixel
  4375                           
  4376                           ;ST7735_TFT.c: 587: drawPixel(x0 - y, y0 + x, color);
  4377  000824  501E               	movf	drawCircle@y0,w,c
  4378  000826  242C               	addwf	drawCircle@x,w,c
  4379  000828  6E18               	movwf	drawPixel@y,c
  4380  00082A  C022  F019         	movff	drawCircle@color,drawPixel@color
  4381  00082E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4382  000832  502E               	movf	drawCircle@y,w,c
  4383  000834  0800               	sublw	0
  4384  000836  241C               	addwf	drawCircle@x0,w,c
  4385  000838  EC73  F00C         	call	_drawPixel
  4386                           
  4387                           ;ST7735_TFT.c: 588: drawPixel(x0 + y, y0 - x, color);
  4388  00083C  502C               	movf	drawCircle@x,w,c
  4389  00083E  0800               	sublw	0
  4390  000840  241E               	addwf	drawCircle@y0,w,c
  4391  000842  6E18               	movwf	drawPixel@y,c
  4392  000844  C022  F019         	movff	drawCircle@color,drawPixel@color
  4393  000848  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4394  00084C  501C               	movf	drawCircle@x0,w,c
  4395  00084E  242E               	addwf	drawCircle@y,w,c
  4396  000850  EC73  F00C         	call	_drawPixel
  4397                           
  4398                           ;ST7735_TFT.c: 589: drawPixel(x0 - y, y0 - x, color);
  4399  000854  502C               	movf	drawCircle@x,w,c
  4400  000856  0800               	sublw	0
  4401  000858  241E               	addwf	drawCircle@y0,w,c
  4402  00085A  6E18               	movwf	drawPixel@y,c
  4403  00085C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4404  000860  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4405  000864  502E               	movf	drawCircle@y,w,c
  4406  000866  0800               	sublw	0
  4407  000868  241C               	addwf	drawCircle@x0,w,c
  4408  00086A  EC73  F00C         	call	_drawPixel
  4409  00086E  D000               	goto	l4869
  4410  000870                     l4869:
  4411  000870  502E               	movf	drawCircle@y,w,c
  4412  000872  5C2C               	subwf	drawCircle@x,w,c
  4413  000874  502D               	movf	drawCircle@x+1,w,c
  4414  000876  0A80               	xorlw	128
  4415  000878  6E24               	movwf	??_drawCircle& (0+255),c
  4416  00087A  502F               	movf	drawCircle@y+1,w,c
  4417  00087C  0A80               	xorlw	128
  4418  00087E  5824               	subwfb	??_drawCircle& (0+255),w,c
  4419  000880  A0D8               	btfss	status,0,c
  4420  000882  D77E               	goto	l4841
  4421  000884  0012               	return		;funcret
  4422  000886                     __end_of_drawCircle:
  4423                           	opt stack 0
  4424                           tblptru	equ	0xFF8
  4425                           tblptrh	equ	0xFF7
  4426                           tblptrl	equ	0xFF6
  4427                           tablat	equ	0xFF5
  4428                           prodh	equ	0xFF4
  4429                           prodl	equ	0xFF3
  4430                           intcon	equ	0xFF2
  4431                           intcon2	equ	0xFF1
  4432                           postinc0	equ	0xFEE
  4433                           wreg	equ	0xFE8
  4434                           postdec1	equ	0xFE5
  4435                           fsr1l	equ	0xFE1
  4436                           postinc2	equ	0xFDE
  4437                           postdec2	equ	0xFDD
  4438                           fsr2h	equ	0xFDA
  4439                           fsr2l	equ	0xFD9
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function _Initialize_Screen *****************
  4443 ;; Defined at:
  4444 ;;		line 269 in file "Lab10_sample_3.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;		None
  4449 ;; Return value:  Size  Location     Type
  4450 ;;		None               void
  4451 ;; Registers used:
  4452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;Total ram usage:        0 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:   10
  4465 ;; This function calls:
  4466 ;;		_LCD_Reset
  4467 ;;		_TFT_GreenTab_Initialize
  4468 ;;		_drawtext
  4469 ;;		_fillScreen
  4470 ;;		_strcpy
  4471 ;; This function is called by:
  4472 ;;		_main
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text13
  4477  0010E6                     __ptext13:
  4478                           	opt stack 0
  4479  0010E6                     _Initialize_Screen:
  4480                           	opt stack 20
  4481                           
  4482                           ;Lab10_sample_3.c: 271: LCD_Reset();
  4483                           
  4484                           ;incstack = 0
  4485  0010E6  EC55  F00D         	call	_LCD_Reset	;wreg free
  4486                           
  4487                           ;Lab10_sample_3.c: 272: TFT_GreenTab_Initialize();
  4488  0010EA  ECA3  F00C         	call	_TFT_GreenTab_Initialize	;wreg free
  4489                           
  4490                           ;Lab10_sample_3.c: 273: fillScreen(0x0000);
  4491  0010EE  0E00               	movlw	0
  4492  0010F0  6E25               	movwf	fillScreen@color+1,c
  4493  0010F2  0E00               	movlw	0
  4494  0010F4  6E24               	movwf	fillScreen@color,c
  4495  0010F6  ECFC  F00C         	call	_fillScreen	;wreg free
  4496                           
  4497                           ;Lab10_sample_3.c: 276: txt = buffer;
  4498  0010FA  0EBF               	movlw	low _buffer
  4499  0010FC  6E4E               	movwf	_txt,c
  4500  0010FE  0E00               	movlw	high _buffer
  4501  001100  6E4F               	movwf	_txt+1,c
  4502                           
  4503                           ;Lab10_sample_3.c: 277: strcpy(txt, "ECE3301L Fall 21-S3");
  4504  001102  C04E  F011         	movff	_txt,strcpy@to
  4505  001106  C04F  F012         	movff	_txt+1,strcpy@to+1
  4506  00110A  0ED2               	movlw	low STR_5
  4507  00110C  6E13               	movwf	strcpy@from,c
  4508  00110E  0EFF               	movlw	high STR_5
  4509  001110  6E14               	movwf	strcpy@from+1,c
  4510  001112  EC5A  F00C         	call	_strcpy	;wreg free
  4511                           
  4512                           ;Lab10_sample_3.c: 278: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4513  001116  0E02               	movlw	2
  4514  001118  6E39               	movwf	drawtext@y,c
  4515  00111A  C04E  F03A         	movff	_txt,drawtext@_text
  4516  00111E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4517  001122  0EFF               	movlw	255
  4518  001124  6E3D               	movwf	drawtext@color+1,c
  4519  001126  683C               	setf	drawtext@color,c
  4520  001128  0E00               	movlw	0
  4521  00112A  6E3F               	movwf	drawtext@bg+1,c
  4522  00112C  0E00               	movlw	0
  4523  00112E  6E3E               	movwf	drawtext@bg,c
  4524  001130  0E01               	movlw	1
  4525  001132  6E40               	movwf	drawtext@size,c
  4526  001134  0E02               	movlw	2
  4527  001136  ECBC  F006         	call	_drawtext
  4528                           
  4529                           ;Lab10_sample_3.c: 280: strcpy(txt, "LAB 10 ");
  4530  00113A  C04E  F011         	movff	_txt,strcpy@to
  4531  00113E  C04F  F012         	movff	_txt+1,strcpy@to+1
  4532  001142  0EF7               	movlw	low STR_6
  4533  001144  6E13               	movwf	strcpy@from,c
  4534  001146  0EFF               	movlw	high STR_6
  4535  001148  6E14               	movwf	strcpy@from+1,c
  4536  00114A  EC5A  F00C         	call	_strcpy	;wreg free
  4537                           
  4538                           ;Lab10_sample_3.c: 281: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4539  00114E  0E0A               	movlw	10
  4540  001150  6E39               	movwf	drawtext@y,c
  4541  001152  C04E  F03A         	movff	_txt,drawtext@_text
  4542  001156  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4543  00115A  0EFF               	movlw	255
  4544  00115C  6E3D               	movwf	drawtext@color+1,c
  4545  00115E  683C               	setf	drawtext@color,c
  4546  001160  0E00               	movlw	0
  4547  001162  6E3F               	movwf	drawtext@bg+1,c
  4548  001164  0E00               	movlw	0
  4549  001166  6E3E               	movwf	drawtext@bg,c
  4550  001168  0E01               	movlw	1
  4551  00116A  6E40               	movwf	drawtext@size,c
  4552  00116C  0E32               	movlw	50
  4553  00116E  ECBC  F006         	call	_drawtext
  4554  001172  0012               	return		;funcret
  4555  001174                     __end_of_Initialize_Screen:
  4556                           	opt stack 0
  4557                           tblptru	equ	0xFF8
  4558                           tblptrh	equ	0xFF7
  4559                           tblptrl	equ	0xFF6
  4560                           tablat	equ	0xFF5
  4561                           prodh	equ	0xFF4
  4562                           prodl	equ	0xFF3
  4563                           intcon	equ	0xFF2
  4564                           intcon2	equ	0xFF1
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           postdec1	equ	0xFE5
  4568                           fsr1l	equ	0xFE1
  4569                           postinc2	equ	0xFDE
  4570                           postdec2	equ	0xFDD
  4571                           fsr2h	equ	0xFDA
  4572                           fsr2l	equ	0xFD9
  4573                           status	equ	0xFD8
  4574                           
  4575 ;; *************** function _strcpy *****************
  4576 ;; Defined at:
  4577 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  to              2   16[COMRAM] PTR unsigned char 
  4580 ;;		 -> NULL(0), buffer(31), 
  4581 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4582 ;;		 -> STR_6(8), STR_5(20), 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4585 ;;		 -> NULL(0), buffer(31), 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  2   16[COMRAM] PTR unsigned char 
  4588 ;; Registers used:
  4589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4595 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;Total ram usage:        6 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    3
  4602 ;; This function calls:
  4603 ;;		Nothing
  4604 ;; This function is called by:
  4605 ;;		_Initialize_Screen
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           	psect	text14
  4610  0018B4                     __ptext14:
  4611                           	opt stack 0
  4612  0018B4                     _strcpy:
  4613                           	opt stack 26
  4614                           
  4615                           ;incstack = 0
  4616  0018B4  C011  F015         	movff	strcpy@to,strcpy@cp
  4617  0018B8  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4618  0018BC  D005               	goto	l4725
  4619  0018BE                     l4723:
  4620  0018BE  4A15               	infsnz	strcpy@cp,f,c
  4621  0018C0  2A16               	incf	strcpy@cp+1,f,c
  4622  0018C2  4A13               	infsnz	strcpy@from,f,c
  4623  0018C4  2A14               	incf	strcpy@from+1,f,c
  4624  0018C6  D000               	goto	l4725
  4625  0018C8                     l4725:
  4626  0018C8  C013  FFF6         	movff	strcpy@from,tblptrl
  4627  0018CC  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4628  0018D0                     	if	0	;tblptru may be non-zero
  4629  0018D0                     	endif
  4630  0018D0                     	if	0	;tblptru may be non-zero
  4631  0018D0                     	endif
  4632  0018D0  C015  FFD9         	movff	strcpy@cp,fsr2l
  4633  0018D4  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4634  0018D8  0008               	tblrd		*
  4635  0018DA  CFF5 FFDF          	movff	tablat,indf2
  4636  0018DE  50DF               	movf	indf2,w,c
  4637  0018E0  A4D8               	btfss	status,2,c
  4638  0018E2  D7ED               	goto	l4723
  4639                           
  4640                           ;	Return value of _strcpy is never used
  4641  0018E4  0012               	return		;funcret
  4642  0018E6                     __end_of_strcpy:
  4643                           	opt stack 0
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           intcon2	equ	0xFF1
  4652                           postinc0	equ	0xFEE
  4653                           wreg	equ	0xFE8
  4654                           postdec1	equ	0xFE5
  4655                           fsr1l	equ	0xFE1
  4656                           indf2	equ	0xFDF
  4657                           postinc2	equ	0xFDE
  4658                           postdec2	equ	0xFDD
  4659                           fsr2h	equ	0xFDA
  4660                           fsr2l	equ	0xFD9
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function _fillScreen *****************
  4664 ;; Defined at:
  4665 ;;		line 656 in file "ST7735_TFT.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  color           2   35[COMRAM] unsigned int 
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;		None               void
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4679 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;Total ram usage:        2 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    7
  4686 ;; This function calls:
  4687 ;;		_fillRectangle
  4688 ;; This function is called by:
  4689 ;;		_Initialize_Screen
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text15
  4694  0019F8                     __ptext15:
  4695                           	opt stack 0
  4696  0019F8                     _fillScreen:
  4697                           	opt stack 22
  4698                           
  4699                           ;ST7735_TFT.c: 658: fillRectangle(0, 0, 128, 160, color);
  4700                           
  4701                           ;incstack = 0
  4702  0019F8  0E00               	movlw	0
  4703  0019FA  6E18               	movwf	fillRectangle@y,c
  4704  0019FC  0E80               	movlw	128
  4705  0019FE  6E19               	movwf	fillRectangle@w,c
  4706  001A00  0EA0               	movlw	160
  4707  001A02  6E1A               	movwf	fillRectangle@h,c
  4708  001A04  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4709  001A08  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4710  001A0C  0E00               	movlw	0
  4711  001A0E  ECBA  F007         	call	_fillRectangle
  4712  001A12  0012               	return		;funcret
  4713  001A14                     __end_of_fillScreen:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           intcon	equ	0xFF2
  4722                           intcon2	equ	0xFF1
  4723                           postinc0	equ	0xFEE
  4724                           wreg	equ	0xFE8
  4725                           postdec1	equ	0xFE5
  4726                           fsr1l	equ	0xFE1
  4727                           indf2	equ	0xFDF
  4728                           postinc2	equ	0xFDE
  4729                           postdec2	equ	0xFDD
  4730                           fsr2h	equ	0xFDA
  4731                           fsr2l	equ	0xFD9
  4732                           status	equ	0xFD8
  4733                           
  4734 ;; *************** function _fillRectangle *****************
  4735 ;; Defined at:
  4736 ;;		line 540 in file "ST7735_TFT.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  x               1    wreg     unsigned char 
  4739 ;;  y               1   23[COMRAM] unsigned char 
  4740 ;;  w               1   24[COMRAM] unsigned char 
  4741 ;;  h               1   25[COMRAM] unsigned char 
  4742 ;;  color           2   26[COMRAM] unsigned int 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  x               1   34[COMRAM] unsigned char 
  4745 ;;  lo              1   33[COMRAM] unsigned char 
  4746 ;;  hi              1   32[COMRAM] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;		None               void
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4756 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;Total ram usage:       12 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    6
  4763 ;; This function calls:
  4764 ;;		_setAddrWindow
  4765 ;;		_spiwrite
  4766 ;; This function is called by:
  4767 ;;		_fillScreen
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text16
  4772  000F74                     __ptext16:
  4773                           	opt stack 0
  4774  000F74                     _fillRectangle:
  4775                           	opt stack 22
  4776                           
  4777                           ;incstack = 0
  4778                           ;fillRectangle@x stored from wreg
  4779  000F74  6E23               	movwf	fillRectangle@x,c
  4780                           
  4781                           ;ST7735_TFT.c: 542: unsigned char hi, lo;
  4782                           ;ST7735_TFT.c: 543: if((x >= 128) || (y >= 160))
  4783  000F76  0E80               	movlw	128
  4784  000F78  6023               	cpfslt	fillRectangle@x,c
  4785  000F7A  D069               	goto	l148
  4786  000F7C  0E9F               	movlw	159
  4787  000F7E  6418               	cpfsgt	fillRectangle@y,c
  4788  000F80  D001               	goto	l4433
  4789                           
  4790                           ;ST7735_TFT.c: 544: return;
  4791  000F82  D065               	goto	l148
  4792  000F84                     l4433:
  4793                           
  4794                           ;ST7735_TFT.c: 545: if((x + w - 1) >= 128)
  4795  000F84  0EFF               	movlw	255
  4796  000F86  6E1D               	movwf	??_fillRectangle& (0+255),c
  4797  000F88  0EFF               	movlw	255
  4798  000F8A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4799  000F8C  5019               	movf	fillRectangle@w,w,c
  4800  000F8E  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4801  000F92  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4802  000F94  261F               	addwf	??_fillRectangle+2,f,c
  4803  000F96  0E00               	movlw	0
  4804  000F98  2220               	addwfc	??_fillRectangle+3,f,c
  4805  000F9A  501D               	movf	??_fillRectangle,w,c
  4806  000F9C  261F               	addwf	??_fillRectangle+2,f,c
  4807  000F9E  501E               	movf	??_fillRectangle+1,w,c
  4808  000FA0  2220               	addwfc	??_fillRectangle+3,f,c
  4809  000FA2  BE20               	btfsc	??_fillRectangle+3,7,c
  4810  000FA4  D00A               	goto	l149
  4811  000FA6  5020               	movf	??_fillRectangle+3,w,c
  4812  000FA8  E104               	bnz	u2990
  4813  000FAA  0E80               	movlw	128
  4814  000FAC  5C1F               	subwf	??_fillRectangle+2,w,c
  4815  000FAE  A0D8               	btfss	status,0,c
  4816  000FB0  D004               	goto	l149
  4817  000FB2                     u2990:
  4818                           
  4819                           ;ST7735_TFT.c: 546: w = 128 - x;
  4820  000FB2  5023               	movf	fillRectangle@x,w,c
  4821  000FB4  0800               	sublw	0
  4822  000FB6  0F80               	addlw	128
  4823  000FB8  6E19               	movwf	fillRectangle@w,c
  4824  000FBA                     l149:
  4825                           
  4826                           ;ST7735_TFT.c: 547: if((y + h - 1) >= 160)
  4827  000FBA  0EFF               	movlw	255
  4828  000FBC  6E1D               	movwf	??_fillRectangle& (0+255),c
  4829  000FBE  0EFF               	movlw	255
  4830  000FC0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4831  000FC2  501A               	movf	fillRectangle@h,w,c
  4832  000FC4  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4833  000FC8  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4834  000FCA  261F               	addwf	??_fillRectangle+2,f,c
  4835  000FCC  0E00               	movlw	0
  4836  000FCE  2220               	addwfc	??_fillRectangle+3,f,c
  4837  000FD0  501D               	movf	??_fillRectangle,w,c
  4838  000FD2  261F               	addwf	??_fillRectangle+2,f,c
  4839  000FD4  501E               	movf	??_fillRectangle+1,w,c
  4840  000FD6  2220               	addwfc	??_fillRectangle+3,f,c
  4841  000FD8  BE20               	btfsc	??_fillRectangle+3,7,c
  4842  000FDA  D00B               	goto	l4439
  4843  000FDC  5020               	movf	??_fillRectangle+3,w,c
  4844  000FDE  E104               	bnz	u3000
  4845  000FE0  0EA0               	movlw	160
  4846  000FE2  5C1F               	subwf	??_fillRectangle+2,w,c
  4847  000FE4  A0D8               	btfss	status,0,c
  4848  000FE6  D005               	goto	l4439
  4849  000FE8                     u3000:
  4850                           
  4851                           ;ST7735_TFT.c: 548: h = 160 - y;
  4852  000FE8  5018               	movf	fillRectangle@y,w,c
  4853  000FEA  0800               	sublw	0
  4854  000FEC  0FA0               	addlw	160
  4855  000FEE  6E1A               	movwf	fillRectangle@h,c
  4856  000FF0  D000               	goto	l4439
  4857  000FF2                     l4439:
  4858                           
  4859                           ;ST7735_TFT.c: 549: setAddrWindow(x, y, x+w-1, y+h-1);
  4860  000FF2  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4861  000FF6  5023               	movf	fillRectangle@x,w,c
  4862  000FF8  2419               	addwf	fillRectangle@w,w,c
  4863  000FFA  6E1D               	movwf	??_fillRectangle& (0+255),c
  4864  000FFC  041D               	decf	??_fillRectangle,w,c
  4865  000FFE  6E15               	movwf	setAddrWindow@x1,c
  4866  001000  5018               	movf	fillRectangle@y,w,c
  4867  001002  241A               	addwf	fillRectangle@h,w,c
  4868  001004  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4869  001006  041E               	decf	??_fillRectangle+1,w,c
  4870  001008  6E16               	movwf	setAddrWindow@y1,c
  4871  00100A  5023               	movf	fillRectangle@x,w,c
  4872  00100C  EC14  F00B         	call	_setAddrWindow
  4873                           
  4874                           ;ST7735_TFT.c: 550: hi = color >> 8; lo = color;
  4875  001010  501C               	movf	fillRectangle@color+1,w,c
  4876  001012  6E21               	movwf	fillRectangle@hi,c
  4877  001014  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4878                           
  4879                           ;ST7735_TFT.c: 551: PORTDbits.RD3 = 1;
  4880  001018  8683               	bsf	3971,3,c	;volatile
  4881                           
  4882                           ;ST7735_TFT.c: 552: PORTDbits.RD4 = 0;
  4883  00101A  9883               	bcf	3971,4,c	;volatile
  4884                           
  4885                           ;ST7735_TFT.c: 554: for(y=h; y>0; y--) {
  4886  00101C  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4887  001020                     l4451:
  4888  001020  5018               	movf	fillRectangle@y,w,c
  4889  001022  B4D8               	btfsc	status,2,c
  4890  001024  D013               	goto	l152
  4891  001026  D001               	goto	l151
  4892  001028  D011               	goto	l152
  4893  00102A                     l151:
  4894                           
  4895                           ;ST7735_TFT.c: 555: for(x = w; x > 0; x--) {
  4896  00102A  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4897  00102E                     l4455:
  4898  00102E  5023               	movf	fillRectangle@x,w,c
  4899  001030  B4D8               	btfsc	status,2,c
  4900  001032  D00A               	goto	l4465
  4901  001034  D001               	goto	l4459
  4902  001036  D008               	goto	l4465
  4903  001038                     l4459:
  4904                           
  4905                           ;ST7735_TFT.c: 556: spiwrite(hi);
  4906  001038  5021               	movf	fillRectangle@hi,w,c
  4907  00103A  EC2F  F00D         	call	_spiwrite
  4908                           
  4909                           ;ST7735_TFT.c: 557: spiwrite(lo);
  4910  00103E  5022               	movf	fillRectangle@lo,w,c
  4911  001040  EC2F  F00D         	call	_spiwrite
  4912  001044  0623               	decf	fillRectangle@x,f,c
  4913  001046  D7F3               	goto	l4455
  4914  001048                     l4465:
  4915  001048  0618               	decf	fillRectangle@y,f,c
  4916  00104A  D7EA               	goto	l4451
  4917  00104C                     l152:
  4918                           
  4919                           ;ST7735_TFT.c: 558: }
  4920                           ;ST7735_TFT.c: 559: }
  4921                           ;ST7735_TFT.c: 560: PORTDbits.RD4 = 1;
  4922  00104C  8883               	bsf	3971,4,c	;volatile
  4923  00104E                     l148:
  4924  00104E  0012               	return		;funcret
  4925  001050                     __end_of_fillRectangle:
  4926                           	opt stack 0
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           prodh	equ	0xFF4
  4932                           prodl	equ	0xFF3
  4933                           intcon	equ	0xFF2
  4934                           intcon2	equ	0xFF1
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           postdec1	equ	0xFE5
  4938                           fsr1l	equ	0xFE1
  4939                           indf2	equ	0xFDF
  4940                           postinc2	equ	0xFDE
  4941                           postdec2	equ	0xFDD
  4942                           fsr2h	equ	0xFDA
  4943                           fsr2l	equ	0xFD9
  4944                           status	equ	0xFD8
  4945                           
  4946 ;; *************** function _drawtext *****************
  4947 ;; Defined at:
  4948 ;;		line 511 in file "ST7735_TFT.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;  x               1    wreg     unsigned char 
  4951 ;;  y               1   56[COMRAM] unsigned char 
  4952 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4953 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4954 ;;  color           2   59[COMRAM] unsigned int 
  4955 ;;  bg              2   61[COMRAM] unsigned int 
  4956 ;;  size            1   63[COMRAM] unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  x               1    0[BANK0 ] unsigned char 
  4959 ;;  i               2    3[BANK0 ] unsigned int 
  4960 ;;  textsize        2    1[BANK0 ] unsigned int 
  4961 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4962 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4963 ;; Return value:  Size  Location     Type
  4964 ;;		None               void
  4965 ;; Registers used:
  4966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4972 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;Total ram usage:       17 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    9
  4979 ;; This function calls:
  4980 ;;		_drawChar
  4981 ;;		_strlen
  4982 ;; This function is called by:
  4983 ;;		_main
  4984 ;;		_Initialize_Screen
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text17
  4989  000D78                     __ptext17:
  4990                           	opt stack 0
  4991  000D78                     _drawtext:
  4992                           	opt stack 21
  4993                           
  4994                           ;incstack = 0
  4995                           ;drawtext@x stored from wreg
  4996  000D78  0100               	movlb	0	; () banked
  4997  000D7A  6FDE               	movwf	drawtext@x& (0+255),b
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;ST7735_TFT.c: 513: unsigned char cursor_x, cursor_y;
  5001                           ;ST7735_TFT.c: 514: unsigned int textsize, i;
  5002                           ;ST7735_TFT.c: 515: cursor_x = x, cursor_y = y;
  5003  000D7C  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  5004                           
  5005                           ; BSR set to: 0
  5006  000D80  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;ST7735_TFT.c: 516: textsize = strlen(_text);
  5010  000D84  C03A  F011         	movff	drawtext@_text,strlen@s
  5011  000D88  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5012  000D8C  ECA4  F00B         	call	_strlen	;wreg free
  5013  000D90  C011  F0DF         	movff	?_strlen,drawtext@textsize
  5014  000D94  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  5015                           
  5016                           ;ST7735_TFT.c: 517: for(i = 0; i < textsize; i++){
  5017  000D98  0E00               	movlw	0
  5018  000D9A  0100               	movlb	0	; () banked
  5019  000D9C  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  5020  000D9E  0E00               	movlw	0
  5021  000DA0  6FE1               	movwf	drawtext@i& (0+255),b
  5022  000DA2  D064               	goto	l4587
  5023  000DA4                     l4561:
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;ST7735_TFT.c: 518: if(wrap && ((cursor_x + size * 5) > 128)){
  5027  000DA4  506E               	movf	_wrap,w,c
  5028  000DA6  B4D8               	btfsc	status,2,c
  5029  000DA8  D034               	goto	l4577
  5030                           
  5031                           ; BSR set to: 0
  5032  000DAA  5040               	movf	drawtext@size,w,c
  5033  000DAC  0D05               	mullw	5
  5034  000DAE  0100               	movlb	0	; () banked
  5035  000DB0  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  5036  000DB2  6E41               	movwf	??_drawtext& (0+255),c
  5037  000DB4  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5038  000DB6  50F3               	movf	prodl,w,c
  5039  000DB8  2641               	addwf	??_drawtext,f,c
  5040  000DBA  50F4               	movf	prodh,w,c
  5041  000DBC  2242               	addwfc	??_drawtext+1,f,c
  5042  000DBE  BE42               	btfsc	??_drawtext+1,7,c
  5043  000DC0  D028               	goto	l4577
  5044  000DC2  5042               	movf	??_drawtext+1,w,c
  5045  000DC4  E104               	bnz	u3160
  5046  000DC6  0E81               	movlw	129
  5047  000DC8  5C41               	subwf	??_drawtext,w,c
  5048  000DCA  A0D8               	btfss	status,0,c
  5049  000DCC  D022               	goto	l4577
  5050  000DCE                     u3160:
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;ST7735_TFT.c: 519: cursor_x = 0;
  5054  000DCE  0E00               	movlw	0
  5055  000DD0  0100               	movlb	0	; () banked
  5056  000DD2  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;ST7735_TFT.c: 520: cursor_y = cursor_y + size * 7 + 3 ;
  5060  000DD4  5040               	movf	drawtext@size,w,c
  5061  000DD6  0D07               	mullw	7
  5062  000DD8  50F3               	movf	prodl,w,c
  5063  000DDA  0100               	movlb	0	; () banked
  5064  000DDC  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  5065  000DDE  0F03               	addlw	3
  5066  000DE0  0100               	movlb	0	; () banked
  5067  000DE2  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;ST7735_TFT.c: 521: if(cursor_y > 160) cursor_y = 160;
  5071  000DE4  0EA0               	movlw	160
  5072  000DE6  0100               	movlb	0	; () banked
  5073  000DE8  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  5074  000DEA  D004               	goto	l4573
  5075                           
  5076                           ; BSR set to: 0
  5077  000DEC  0EA0               	movlw	160
  5078  000DEE  0100               	movlb	0	; () banked
  5079  000DF0  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  5080  000DF2  D000               	goto	l4573
  5081  000DF4                     l4573:
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;ST7735_TFT.c: 522: if(_text[i] == 0x20) goto _skip; }
  5085  000DF4  0100               	movlb	0	; () banked
  5086  000DF6  51E1               	movf	drawtext@i& (0+255),w,b
  5087  000DF8  243A               	addwf	drawtext@_text,w,c
  5088  000DFA  6ED9               	movwf	fsr2l,c
  5089  000DFC  0100               	movlb	0	; () banked
  5090  000DFE  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  5091  000E00  203B               	addwfc	drawtext@_text+1,w,c
  5092  000E02  6EDA               	movwf	fsr2h,c
  5093  000E04  0E20               	movlw	32
  5094  000E06  18DE               	xorwf	postinc2,w,c
  5095  000E08  B4D8               	btfsc	status,2,c
  5096  000E0A  D02C               	goto	l4585
  5097  000E0C  D002               	goto	l4577
  5098                           
  5099                           ; BSR set to: 0
  5100  000E0E  D02A               	goto	l4585
  5101                           
  5102                           ; BSR set to: 0
  5103  000E10  D000               	goto	l4577
  5104  000E12                     l4577:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;ST7735_TFT.c: 523: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5108  000E12  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  5109  000E16  0100               	movlb	0	; () banked
  5110  000E18  51E1               	movf	drawtext@i& (0+255),w,b
  5111  000E1A  243A               	addwf	drawtext@_text,w,c
  5112  000E1C  6ED9               	movwf	fsr2l,c
  5113  000E1E  0100               	movlb	0	; () banked
  5114  000E20  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  5115  000E22  203B               	addwfc	drawtext@_text+1,w,c
  5116  000E24  6EDA               	movwf	fsr2h,c
  5117  000E26  50DF               	movf	indf2,w,c
  5118  000E28  6E2F               	movwf	drawChar@c,c
  5119  000E2A  C03C  F030         	movff	drawtext@color,drawChar@color
  5120  000E2E  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5121  000E32  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5122  000E36  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5123  000E3A  C040  F034         	movff	drawtext@size,drawChar@size
  5124  000E3E  0100               	movlb	0	; () banked
  5125  000E40  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  5126  000E42  EC43  F004         	call	_drawChar
  5127                           
  5128                           ;ST7735_TFT.c: 524: cursor_x = cursor_x + size * 6;
  5129  000E46  5040               	movf	drawtext@size,w,c
  5130  000E48  0D06               	mullw	6
  5131  000E4A  50F3               	movf	prodl,w,c
  5132  000E4C  0100               	movlb	0	; () banked
  5133  000E4E  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  5134  000E50  0100               	movlb	0	; () banked
  5135  000E52  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;ST7735_TFT.c: 525: if(cursor_x > 128) cursor_x = 128;
  5139  000E54  0E80               	movlw	128
  5140  000E56  0100               	movlb	0	; () banked
  5141  000E58  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  5142  000E5A  D004               	goto	l4585
  5143                           
  5144                           ; BSR set to: 0
  5145  000E5C  0E80               	movlw	128
  5146  000E5E  0100               	movlb	0	; () banked
  5147  000E60  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  5148                           
  5149                           ; BSR set to: 0
  5150  000E62  D000               	goto	l4585
  5151  000E64                     l4585:
  5152                           
  5153                           ; BSR set to: 0
  5154  000E64  0100               	movlb	0	; () banked
  5155  000E66  4BE1               	infsnz	drawtext@i& (0+255),f,b
  5156  000E68  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  5157  000E6A  D000               	goto	l4587
  5158  000E6C                     l4587:
  5159                           
  5160                           ; BSR set to: 0
  5161  000E6C  0100               	movlb	0	; () banked
  5162  000E6E  51DF               	movf	drawtext@textsize& (0+255),w,b
  5163  000E70  0100               	movlb	0	; () banked
  5164  000E72  5DE1               	subwf	drawtext@i& (0+255),w,b
  5165  000E74  0100               	movlb	0	; () banked
  5166  000E76  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  5167  000E78  0100               	movlb	0	; () banked
  5168  000E7A  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  5169  000E7C  A0D8               	btfss	status,0,c
  5170  000E7E  D792               	goto	l4561
  5171                           
  5172                           ; BSR set to: 0
  5173                           
  5174                           ; BSR set to: 0
  5175  000E80  0012               	return		;funcret
  5176  000E82                     __end_of_drawtext:
  5177                           	opt stack 0
  5178                           tblptru	equ	0xFF8
  5179                           tblptrh	equ	0xFF7
  5180                           tblptrl	equ	0xFF6
  5181                           tablat	equ	0xFF5
  5182                           prodh	equ	0xFF4
  5183                           prodl	equ	0xFF3
  5184                           intcon	equ	0xFF2
  5185                           intcon2	equ	0xFF1
  5186                           postinc0	equ	0xFEE
  5187                           wreg	equ	0xFE8
  5188                           postdec1	equ	0xFE5
  5189                           fsr1l	equ	0xFE1
  5190                           indf2	equ	0xFDF
  5191                           postinc2	equ	0xFDE
  5192                           postdec2	equ	0xFDD
  5193                           fsr2h	equ	0xFDA
  5194                           fsr2l	equ	0xFD9
  5195                           status	equ	0xFD8
  5196                           
  5197 ;; *************** function _strlen *****************
  5198 ;; Defined at:
  5199 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5202 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5205 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  2   16[COMRAM] unsigned int 
  5208 ;; Registers used:
  5209 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;Total ram usage:        6 bytes
  5220 ;; Hardware stack levels used:    1
  5221 ;; Hardware stack levels required when called:    3
  5222 ;; This function calls:
  5223 ;;		Nothing
  5224 ;; This function is called by:
  5225 ;;		_drawtext
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text18
  5230  001748                     __ptext18:
  5231                           	opt stack 0
  5232  001748                     _strlen:
  5233                           	opt stack 26
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;incstack = 0
  5237  001748  C011  F015         	movff	strlen@s,strlen@cp
  5238  00174C  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5239  001750  D003               	goto	l4423
  5240  001752                     l4421:
  5241  001752  4A15               	infsnz	strlen@cp,f,c
  5242  001754  2A16               	incf	strlen@cp+1,f,c
  5243  001756  D000               	goto	l4423
  5244  001758                     l4423:
  5245  001758  C015  FFD9         	movff	strlen@cp,fsr2l
  5246  00175C  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5247  001760  50DF               	movf	indf2,w,c
  5248  001762  A4D8               	btfss	status,2,c
  5249  001764  D7F6               	goto	l4421
  5250  001766  C011  F013         	movff	strlen@s,??_strlen
  5251  00176A  C012  F014         	movff	strlen@s+1,??_strlen+1
  5252  00176E  1E13               	comf	??_strlen,f,c
  5253  001770  1E14               	comf	??_strlen+1,f,c
  5254  001772  4A13               	infsnz	??_strlen,f,c
  5255  001774  2A14               	incf	??_strlen+1,f,c
  5256  001776  5015               	movf	strlen@cp,w,c
  5257  001778  2413               	addwf	??_strlen,w,c
  5258  00177A  6E11               	movwf	?_strlen,c
  5259  00177C  5016               	movf	strlen@cp+1,w,c
  5260  00177E  2014               	addwfc	??_strlen+1,w,c
  5261  001780  6E12               	movwf	?_strlen+1,c
  5262  001782  D000               	goto	l1269
  5263  001784                     l1269:
  5264  001784  0012               	return		;funcret
  5265  001786                     __end_of_strlen:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           intcon2	equ	0xFF1
  5275                           postinc0	equ	0xFEE
  5276                           wreg	equ	0xFE8
  5277                           postdec1	equ	0xFE5
  5278                           fsr1l	equ	0xFE1
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _drawChar *****************
  5287 ;; Defined at:
  5288 ;;		line 484 in file "ST7735_TFT.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  x               1    wreg     unsigned char 
  5291 ;;  y               1   45[COMRAM] unsigned char 
  5292 ;;  c               1   46[COMRAM] unsigned char 
  5293 ;;  color           2   47[COMRAM] unsigned int 
  5294 ;;  bg              2   49[COMRAM] unsigned int 
  5295 ;;  size            1   51[COMRAM] unsigned char 
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;  x               1   53[COMRAM] unsigned char 
  5298 ;;  line            1   52[COMRAM] unsigned char 
  5299 ;;  i               1   55[COMRAM] unsigned char 
  5300 ;;  j               1   54[COMRAM] unsigned char 
  5301 ;; Return value:  Size  Location     Type
  5302 ;;		None               void
  5303 ;; Registers used:
  5304 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5310 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;Total ram usage:       11 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    8
  5317 ;; This function calls:
  5318 ;;		___wmul
  5319 ;;		_drawPixel
  5320 ;;		_fillRect
  5321 ;; This function is called by:
  5322 ;;		_drawtext
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text19
  5327  000886                     __ptext19:
  5328                           	opt stack 0
  5329  000886                     _drawChar:
  5330                           	opt stack 21
  5331                           
  5332                           ;incstack = 0
  5333                           ;drawChar@x stored from wreg
  5334  000886  6E36               	movwf	drawChar@x,c
  5335                           
  5336                           ;ST7735_TFT.c: 486: char i, j;
  5337                           ;ST7735_TFT.c: 487: if((x >= 128) || (y >= 160))
  5338  000888  0E80               	movlw	128
  5339  00088A  6036               	cpfslt	drawChar@x,c
  5340  00088C  D0A6               	goto	l111
  5341  00088E  0E9F               	movlw	159
  5342  000890  642E               	cpfsgt	drawChar@y,c
  5343  000892  D001               	goto	l4369
  5344                           
  5345                           ;ST7735_TFT.c: 488: return;
  5346  000894  D0A2               	goto	l111
  5347  000896                     l4369:
  5348                           
  5349                           ;ST7735_TFT.c: 489: if(size < 1) size = 1;
  5350  000896  5034               	movf	drawChar@size,w,c
  5351  000898  A4D8               	btfss	status,2,c
  5352  00089A  D003               	goto	l4373
  5353  00089C  0E01               	movlw	1
  5354  00089E  6E34               	movwf	drawChar@size,c
  5355  0008A0  D000               	goto	l4373
  5356  0008A2                     l4373:
  5357                           
  5358                           ;ST7735_TFT.c: 490: if((c < ' ') || (c > '~'))
  5359  0008A2  0E1F               	movlw	31
  5360  0008A4  642F               	cpfsgt	drawChar@c,c
  5361  0008A6  D004               	goto	l4377
  5362  0008A8  0E7E               	movlw	126
  5363  0008AA  642F               	cpfsgt	drawChar@c,c
  5364  0008AC  D003               	goto	l113
  5365  0008AE  D000               	goto	l4377
  5366  0008B0                     l4377:
  5367                           
  5368                           ;ST7735_TFT.c: 491: c = '?';
  5369  0008B0  0E3F               	movlw	63
  5370  0008B2  6E2F               	movwf	drawChar@c,c
  5371  0008B4                     l113:
  5372                           
  5373                           ;ST7735_TFT.c: 492: for(i=0; i<5; i++ ) {
  5374  0008B4  0E00               	movlw	0
  5375  0008B6  6E38               	movwf	drawChar@i,c
  5376  0008B8                     l4379:
  5377  0008B8  0E04               	movlw	4
  5378  0008BA  6438               	cpfsgt	drawChar@i,c
  5379  0008BC  D001               	goto	l4383
  5380  0008BE  D08D               	goto	l111
  5381  0008C0                     l4383:
  5382                           
  5383                           ;ST7735_TFT.c: 493: unsigned char line;
  5384                           ;ST7735_TFT.c: 494: if(c < 'S')
  5385  0008C0  0E53               	movlw	83
  5386  0008C2  602F               	cpfslt	drawChar@c,c
  5387  0008C4  D015               	goto	l4387
  5388                           
  5389                           ;ST7735_TFT.c: 495: line = font[(c - 32)*5 + i];
  5390  0008C6  0EE0               	movlw	224
  5391  0008C8  242F               	addwf	drawChar@c,w,c
  5392  0008CA  6E11               	movwf	___wmul@multiplier,c
  5393  0008CC  6A12               	clrf	___wmul@multiplier+1,c
  5394  0008CE  0EFF               	movlw	255
  5395  0008D0  2212               	addwfc	___wmul@multiplier+1,f,c
  5396  0008D2  0E00               	movlw	0
  5397  0008D4  6E14               	movwf	___wmul@multiplicand+1,c
  5398  0008D6  0E05               	movlw	5
  5399  0008D8  6E13               	movwf	___wmul@multiplicand,c
  5400  0008DA  ECB8  F00C         	call	___wmul	;wreg free
  5401  0008DE  5038               	movf	drawChar@i,w,c
  5402  0008E0  2611               	addwf	?___wmul,f,c
  5403  0008E2  0E00               	movlw	0
  5404  0008E4  2212               	addwfc	?___wmul+1,f,c
  5405  0008E6  0E39               	movlw	low _font
  5406  0008E8  2411               	addwf	?___wmul,w,c
  5407  0008EA  6EF6               	movwf	tblptrl,c
  5408  0008EC  0EFD               	movlw	high _font
  5409  0008EE  D014               	goto	L3
  5410  0008F0                     l4387:
  5411                           
  5412                           ;ST7735_TFT.c: 496: else
  5413                           ;ST7735_TFT.c: 497: line = font2[(c - 'S')*5 + i];
  5414  0008F0  0EAD               	movlw	173
  5415  0008F2  242F               	addwf	drawChar@c,w,c
  5416  0008F4  6E11               	movwf	___wmul@multiplier,c
  5417  0008F6  6A12               	clrf	___wmul@multiplier+1,c
  5418  0008F8  0EFF               	movlw	255
  5419  0008FA  2212               	addwfc	___wmul@multiplier+1,f,c
  5420  0008FC  0E00               	movlw	0
  5421  0008FE  6E14               	movwf	___wmul@multiplicand+1,c
  5422  000900  0E05               	movlw	5
  5423  000902  6E13               	movwf	___wmul@multiplicand,c
  5424  000904  ECB8  F00C         	call	___wmul	;wreg free
  5425  000908  5038               	movf	drawChar@i,w,c
  5426  00090A  2611               	addwf	?___wmul,f,c
  5427  00090C  0E00               	movlw	0
  5428  00090E  2212               	addwfc	?___wmul+1,f,c
  5429  000910  0E38               	movlw	low _font2
  5430  000912  2411               	addwf	?___wmul,w,c
  5431  000914  6EF6               	movwf	tblptrl,c
  5432  000916  0EFE               	movlw	high _font2
  5433  000918                     L3:
  5434  000918  2012               	addwfc	?___wmul+1,w,c
  5435  00091A  6EF7               	movwf	tblptrh,c
  5436  00091C                     	if	0	;There are less than 3 active tblptr bytes
  5437  00091C                     	endif
  5438  00091C  0008               	tblrd		*
  5439  00091E  CFF5 F035          	movff	tablat,drawChar@line
  5440  000922  D000               	goto	l4389
  5441  000924                     l4389:
  5442                           
  5443                           ;ST7735_TFT.c: 498: for(j=0; j<7; j++, line >>= 1) {
  5444  000924  0E00               	movlw	0
  5445  000926  6E37               	movwf	drawChar@j,c
  5446  000928                     l4391:
  5447  000928  0E06               	movlw	6
  5448  00092A  6437               	cpfsgt	drawChar@j,c
  5449  00092C  D001               	goto	l120
  5450  00092E  D053               	goto	l4415
  5451  000930                     l120:
  5452                           
  5453                           ;ST7735_TFT.c: 499: if(line & 0x01) {
  5454  000930  A035               	btfss	drawChar@line,0,c
  5455  000932  D023               	goto	l4401
  5456                           
  5457                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, color);
  5458  000934  0434               	decf	drawChar@size,w,c
  5459  000936  A4D8               	btfss	status,2,c
  5460  000938  D00C               	goto	l4399
  5461  00093A  502E               	movf	drawChar@y,w,c
  5462  00093C  2437               	addwf	drawChar@j,w,c
  5463  00093E  6E18               	movwf	drawPixel@y,c
  5464  000940  C030  F019         	movff	drawChar@color,drawPixel@color
  5465  000944  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5466  000948  5036               	movf	drawChar@x,w,c
  5467  00094A  2438               	addwf	drawChar@i,w,c
  5468  00094C  EC73  F00C         	call	_drawPixel
  5469  000950  D03E               	goto	l4409
  5470  000952                     l4399:
  5471                           
  5472                           ;ST7735_TFT.c: 501: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5473  000952  5037               	movf	drawChar@j,w,c
  5474  000954  0234               	mulwf	drawChar@size,c
  5475  000956  50F3               	movf	prodl,w,c
  5476  000958  242E               	addwf	drawChar@y,w,c
  5477  00095A  6E23               	movwf	fillRect@y,c
  5478  00095C  C034  F024         	movff	drawChar@size,fillRect@w
  5479  000960  C034  F025         	movff	drawChar@size,fillRect@h
  5480  000964  C030  F026         	movff	drawChar@color,fillRect@color
  5481  000968  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5482  00096C  5038               	movf	drawChar@i,w,c
  5483  00096E  0234               	mulwf	drawChar@size,c
  5484  000970  50F3               	movf	prodl,w,c
  5485  000972  2436               	addwf	drawChar@x,w,c
  5486  000974  EC3B  F00B         	call	_fillRect
  5487                           
  5488                           ;ST7735_TFT.c: 502: }
  5489  000978  D02A               	goto	l4409
  5490  00097A                     l4401:
  5491                           
  5492                           ;ST7735_TFT.c: 503: else if(bg != color) {
  5493  00097A  5030               	movf	drawChar@color,w,c
  5494  00097C  1832               	xorwf	drawChar@bg,w,c
  5495  00097E  E104               	bnz	u2920
  5496  000980  5031               	movf	drawChar@color+1,w,c
  5497  000982  1833               	xorwf	drawChar@bg+1,w,c
  5498  000984  B4D8               	btfsc	status,2,c
  5499  000986  D023               	goto	l4409
  5500  000988                     u2920:
  5501                           
  5502                           ;ST7735_TFT.c: 504: if(size == 1) drawPixel(x+i, y+j, bg);
  5503  000988  0434               	decf	drawChar@size,w,c
  5504  00098A  A4D8               	btfss	status,2,c
  5505  00098C  D00C               	goto	l4407
  5506  00098E  502E               	movf	drawChar@y,w,c
  5507  000990  2437               	addwf	drawChar@j,w,c
  5508  000992  6E18               	movwf	drawPixel@y,c
  5509  000994  C032  F019         	movff	drawChar@bg,drawPixel@color
  5510  000998  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5511  00099C  5036               	movf	drawChar@x,w,c
  5512  00099E  2438               	addwf	drawChar@i,w,c
  5513  0009A0  EC73  F00C         	call	_drawPixel
  5514  0009A4  D014               	goto	l4409
  5515  0009A6                     l4407:
  5516                           
  5517                           ;ST7735_TFT.c: 505: else fillRect(x+i*size, y+j*size, size, size, bg);
  5518  0009A6  5037               	movf	drawChar@j,w,c
  5519  0009A8  0234               	mulwf	drawChar@size,c
  5520  0009AA  50F3               	movf	prodl,w,c
  5521  0009AC  242E               	addwf	drawChar@y,w,c
  5522  0009AE  6E23               	movwf	fillRect@y,c
  5523  0009B0  C034  F024         	movff	drawChar@size,fillRect@w
  5524  0009B4  C034  F025         	movff	drawChar@size,fillRect@h
  5525  0009B8  C032  F026         	movff	drawChar@bg,fillRect@color
  5526  0009BC  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5527  0009C0  5038               	movf	drawChar@i,w,c
  5528  0009C2  0234               	mulwf	drawChar@size,c
  5529  0009C4  50F3               	movf	prodl,w,c
  5530  0009C6  2436               	addwf	drawChar@x,w,c
  5531  0009C8  EC3B  F00B         	call	_fillRect
  5532  0009CC  D000               	goto	l4409
  5533  0009CE                     l4409:
  5534  0009CE  2A37               	incf	drawChar@j,f,c
  5535  0009D0  90D8               	bcf	status,0,c
  5536  0009D2  3235               	rrcf	drawChar@line,f,c
  5537  0009D4  D7A9               	goto	l4391
  5538  0009D6                     l4415:
  5539  0009D6  2A38               	incf	drawChar@i,f,c
  5540  0009D8  D76F               	goto	l4379
  5541  0009DA                     l111:
  5542  0009DA  0012               	return		;funcret
  5543  0009DC                     __end_of_drawChar:
  5544                           	opt stack 0
  5545                           tblptru	equ	0xFF8
  5546                           tblptrh	equ	0xFF7
  5547                           tblptrl	equ	0xFF6
  5548                           tablat	equ	0xFF5
  5549                           prodh	equ	0xFF4
  5550                           prodl	equ	0xFF3
  5551                           intcon	equ	0xFF2
  5552                           intcon2	equ	0xFF1
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           postdec1	equ	0xFE5
  5556                           fsr1l	equ	0xFE1
  5557                           indf2	equ	0xFDF
  5558                           postinc2	equ	0xFDE
  5559                           postdec2	equ	0xFDD
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564 ;; *************** function _fillRect *****************
  5565 ;; Defined at:
  5566 ;;		line 474 in file "ST7735_TFT.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;  x               1    wreg     unsigned char 
  5569 ;;  y               1   34[COMRAM] unsigned char 
  5570 ;;  w               1   35[COMRAM] unsigned char 
  5571 ;;  h               1   36[COMRAM] unsigned char 
  5572 ;;  color           2   37[COMRAM] unsigned int 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  x               1   42[COMRAM] unsigned char 
  5575 ;;  i               2   43[COMRAM] int 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;		None               void
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5585 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;Total ram usage:       11 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    7
  5592 ;; This function calls:
  5593 ;;		_drawFastVLine
  5594 ;; This function is called by:
  5595 ;;		_drawChar
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text20
  5600  001676                     __ptext20:
  5601                           	opt stack 0
  5602  001676                     _fillRect:
  5603                           	opt stack 21
  5604                           
  5605                           ;incstack = 0
  5606                           ;fillRect@x stored from wreg
  5607  001676  6E2B               	movwf	fillRect@x,c
  5608                           
  5609                           ;ST7735_TFT.c: 476: signed int i;
  5610                           ;ST7735_TFT.c: 478: for (i = x; i < x + w; i++)
  5611  001678  C02B  F02C         	movff	fillRect@x,fillRect@i
  5612  00167C  6A2D               	clrf	fillRect@i+1,c
  5613  00167E  D00E               	goto	l4231
  5614  001680                     l4227:
  5615                           
  5616                           ;ST7735_TFT.c: 479: {
  5617                           ;ST7735_TFT.c: 480: drawFastVLine(i, y, h, color);
  5618  001680  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5619  001684  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5620  001688  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5621  00168C  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5622  001690  502C               	movf	fillRect@i,w,c
  5623  001692  EC00  F009         	call	_drawFastVLine
  5624  001696  4A2C               	infsnz	fillRect@i,f,c
  5625  001698  2A2D               	incf	fillRect@i+1,f,c
  5626  00169A  D000               	goto	l4231
  5627  00169C                     l4231:
  5628  00169C  5024               	movf	fillRect@w,w,c
  5629  00169E  C02B  F028         	movff	fillRect@x,??_fillRect
  5630  0016A2  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5631  0016A4  2628               	addwf	??_fillRect,f,c
  5632  0016A6  0E00               	movlw	0
  5633  0016A8  2229               	addwfc	??_fillRect+1,f,c
  5634  0016AA  5028               	movf	??_fillRect,w,c
  5635  0016AC  5C2C               	subwf	fillRect@i,w,c
  5636  0016AE  502D               	movf	fillRect@i+1,w,c
  5637  0016B0  0A80               	xorlw	128
  5638  0016B2  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5639  0016B4  5029               	movf	??_fillRect+1,w,c
  5640  0016B6  0A80               	xorlw	128
  5641  0016B8  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5642  0016BA  A0D8               	btfss	status,0,c
  5643  0016BC  D7E1               	goto	l4227
  5644  0016BE  0012               	return		;funcret
  5645  0016C0                     __end_of_fillRect:
  5646                           	opt stack 0
  5647                           tblptru	equ	0xFF8
  5648                           tblptrh	equ	0xFF7
  5649                           tblptrl	equ	0xFF6
  5650                           tablat	equ	0xFF5
  5651                           prodh	equ	0xFF4
  5652                           prodl	equ	0xFF3
  5653                           intcon	equ	0xFF2
  5654                           intcon2	equ	0xFF1
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           postdec1	equ	0xFE5
  5658                           fsr1l	equ	0xFE1
  5659                           indf2	equ	0xFDF
  5660                           postinc2	equ	0xFDE
  5661                           postdec2	equ	0xFDD
  5662                           fsr2h	equ	0xFDA
  5663                           fsr2l	equ	0xFD9
  5664                           status	equ	0xFD8
  5665                           
  5666 ;; *************** function _drawFastVLine *****************
  5667 ;; Defined at:
  5668 ;;		line 453 in file "ST7735_TFT.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  x               1    wreg     unsigned char 
  5671 ;;  y               1   23[COMRAM] unsigned char 
  5672 ;;  h               1   24[COMRAM] unsigned char 
  5673 ;;  color           2   25[COMRAM] unsigned int 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  x               1   33[COMRAM] unsigned char 
  5676 ;;  lo              1   32[COMRAM] unsigned char 
  5677 ;;  hi              1   31[COMRAM] unsigned char 
  5678 ;; Return value:  Size  Location     Type
  5679 ;;		None               void
  5680 ;; Registers used:
  5681 ;;		wreg, status,2, status,0, cstack
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5687 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;Total ram usage:       11 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; Hardware stack levels required when called:    6
  5694 ;; This function calls:
  5695 ;;		_setAddrWindow
  5696 ;;		_spiwrite
  5697 ;; This function is called by:
  5698 ;;		_fillRect
  5699 ;;		_fillCircleHelper
  5700 ;;		_fillCircle
  5701 ;;		_drawRect
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           	psect	text21
  5706  001200                     __ptext21:
  5707                           	opt stack 0
  5708  001200                     _drawFastVLine:
  5709                           	opt stack 22
  5710                           
  5711                           ;incstack = 0
  5712                           ;drawFastVLine@x stored from wreg
  5713  001200  6E22               	movwf	drawFastVLine@x,c
  5714                           
  5715                           ;ST7735_TFT.c: 455: unsigned char hi, lo;
  5716                           ;ST7735_TFT.c: 456: if((x >= 128) || (y >= 160))
  5717  001202  0E80               	movlw	128
  5718  001204  6022               	cpfslt	drawFastVLine@x,c
  5719  001206  D03F               	goto	l95
  5720  001208  0E9F               	movlw	159
  5721  00120A  6418               	cpfsgt	drawFastVLine@y,c
  5722  00120C  D001               	goto	l4167
  5723                           
  5724                           ;ST7735_TFT.c: 457: return;
  5725  00120E  D03B               	goto	l95
  5726  001210                     l4167:
  5727                           
  5728                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  5729  001210  0EFF               	movlw	255
  5730  001212  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5731  001214  0EFF               	movlw	255
  5732  001216  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5733  001218  5019               	movf	drawFastVLine@h,w,c
  5734  00121A  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5735  00121E  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5736  001220  261E               	addwf	??_drawFastVLine+2,f,c
  5737  001222  0E00               	movlw	0
  5738  001224  221F               	addwfc	??_drawFastVLine+3,f,c
  5739  001226  501C               	movf	??_drawFastVLine,w,c
  5740  001228  261E               	addwf	??_drawFastVLine+2,f,c
  5741  00122A  501D               	movf	??_drawFastVLine+1,w,c
  5742  00122C  221F               	addwfc	??_drawFastVLine+3,f,c
  5743  00122E  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5744  001230  D00B               	goto	l4171
  5745  001232  501F               	movf	??_drawFastVLine+3,w,c
  5746  001234  E104               	bnz	u2730
  5747  001236  0EA0               	movlw	160
  5748  001238  5C1E               	subwf	??_drawFastVLine+2,w,c
  5749  00123A  A0D8               	btfss	status,0,c
  5750  00123C  D005               	goto	l4171
  5751  00123E                     u2730:
  5752                           
  5753                           ;ST7735_TFT.c: 459: h = 160 - y;
  5754  00123E  5018               	movf	drawFastVLine@y,w,c
  5755  001240  0800               	sublw	0
  5756  001242  0FA0               	addlw	160
  5757  001244  6E19               	movwf	drawFastVLine@h,c
  5758  001246  D000               	goto	l4171
  5759  001248                     l4171:
  5760                           
  5761                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  5762  001248  501B               	movf	drawFastVLine@color+1,w,c
  5763  00124A  6E20               	movwf	drawFastVLine@hi,c
  5764  00124C  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5765                           
  5766                           ;ST7735_TFT.c: 461: setAddrWindow(x, y, x, y + h - 1);
  5767  001250  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5768  001254  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5769  001258  5018               	movf	drawFastVLine@y,w,c
  5770  00125A  2419               	addwf	drawFastVLine@h,w,c
  5771  00125C  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5772  00125E  041C               	decf	??_drawFastVLine,w,c
  5773  001260  6E16               	movwf	setAddrWindow@y1,c
  5774  001262  5022               	movf	drawFastVLine@x,w,c
  5775  001264  EC14  F00B         	call	_setAddrWindow
  5776                           
  5777                           ;ST7735_TFT.c: 462: PORTDbits.RD3 = 1;
  5778  001268  8683               	bsf	3971,3,c	;volatile
  5779                           
  5780                           ;ST7735_TFT.c: 463: PORTDbits.RD4 = 0;
  5781  00126A  9883               	bcf	3971,4,c	;volatile
  5782                           
  5783                           ;ST7735_TFT.c: 465: while (h--) {
  5784  00126C  D007               	goto	l4183
  5785  00126E                     l4181:
  5786                           
  5787                           ;ST7735_TFT.c: 466: spiwrite(hi);
  5788  00126E  5020               	movf	drawFastVLine@hi,w,c
  5789  001270  EC2F  F00D         	call	_spiwrite
  5790                           
  5791                           ;ST7735_TFT.c: 467: spiwrite(lo);
  5792  001274  5021               	movf	drawFastVLine@lo,w,c
  5793  001276  EC2F  F00D         	call	_spiwrite
  5794  00127A  D000               	goto	l4183
  5795  00127C                     l4183:
  5796  00127C  0619               	decf	drawFastVLine@h,f,c
  5797  00127E  2819               	incf	drawFastVLine@h,w,c
  5798  001280  A4D8               	btfss	status,2,c
  5799  001282  D7F5               	goto	l4181
  5800                           
  5801                           ;ST7735_TFT.c: 468: }
  5802                           ;ST7735_TFT.c: 469: PORTDbits.RD4 = 1;
  5803  001284  8883               	bsf	3971,4,c	;volatile
  5804  001286                     l95:
  5805  001286  0012               	return		;funcret
  5806  001288                     __end_of_drawFastVLine:
  5807                           	opt stack 0
  5808                           tblptru	equ	0xFF8
  5809                           tblptrh	equ	0xFF7
  5810                           tblptrl	equ	0xFF6
  5811                           tablat	equ	0xFF5
  5812                           prodh	equ	0xFF4
  5813                           prodl	equ	0xFF3
  5814                           intcon	equ	0xFF2
  5815                           intcon2	equ	0xFF1
  5816                           postinc0	equ	0xFEE
  5817                           wreg	equ	0xFE8
  5818                           postdec1	equ	0xFE5
  5819                           fsr1l	equ	0xFE1
  5820                           indf2	equ	0xFDF
  5821                           postinc2	equ	0xFDE
  5822                           postdec2	equ	0xFDD
  5823                           fsr2h	equ	0xFDA
  5824                           fsr2l	equ	0xFD9
  5825                           status	equ	0xFD8
  5826                           
  5827 ;; *************** function _drawPixel *****************
  5828 ;; Defined at:
  5829 ;;		line 444 in file "ST7735_TFT.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;  x               1    wreg     unsigned char 
  5832 ;;  y               1   23[COMRAM] unsigned char 
  5833 ;;  color           2   24[COMRAM] unsigned int 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  x               1   26[COMRAM] unsigned char 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;		None               void
  5838 ;; Registers used:
  5839 ;;		wreg, status,2, status,0, cstack
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5845 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;Total ram usage:        4 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    6
  5852 ;; This function calls:
  5853 ;;		_setAddrWindow
  5854 ;;		_write_data
  5855 ;; This function is called by:
  5856 ;;		_drawChar
  5857 ;;		_drawCircle
  5858 ;;		_drawCircleHelper
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text22
  5863  0018E6                     __ptext22:
  5864                           	opt stack 0
  5865  0018E6                     _drawPixel:
  5866                           	opt stack 22
  5867                           
  5868                           ;incstack = 0
  5869                           ;drawPixel@x stored from wreg
  5870  0018E6  6E1B               	movwf	drawPixel@x,c
  5871                           
  5872                           ;ST7735_TFT.c: 446: if((x >= 128) || (y >= 160))
  5873  0018E8  0E80               	movlw	128
  5874  0018EA  601B               	cpfslt	drawPixel@x,c
  5875  0018EC  D013               	goto	l89
  5876  0018EE  0E9F               	movlw	159
  5877  0018F0  6418               	cpfsgt	drawPixel@y,c
  5878  0018F2  D001               	goto	l4219
  5879                           
  5880                           ;ST7735_TFT.c: 447: return;
  5881  0018F4  D00F               	goto	l89
  5882  0018F6                     l4219:
  5883                           
  5884                           ;ST7735_TFT.c: 448: setAddrWindow(x,y,x+1,y+1);
  5885  0018F6  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5886  0018FA  281B               	incf	drawPixel@x,w,c
  5887  0018FC  6E15               	movwf	setAddrWindow@x1,c
  5888  0018FE  2818               	incf	drawPixel@y,w,c
  5889  001900  6E16               	movwf	setAddrWindow@y1,c
  5890  001902  501B               	movf	drawPixel@x,w,c
  5891  001904  EC14  F00B         	call	_setAddrWindow
  5892                           
  5893                           ;ST7735_TFT.c: 449: write_data(color >> 8);
  5894  001908  501A               	movf	drawPixel@color+1,w,c
  5895  00190A  EC79  F00D         	call	_write_data
  5896                           
  5897                           ;ST7735_TFT.c: 450: write_data(color & 0xFF);
  5898  00190E  5019               	movf	drawPixel@color,w,c
  5899  001910  EC79  F00D         	call	_write_data
  5900  001914                     l89:
  5901  001914  0012               	return		;funcret
  5902  001916                     __end_of_drawPixel:
  5903                           	opt stack 0
  5904                           tblptru	equ	0xFF8
  5905                           tblptrh	equ	0xFF7
  5906                           tblptrl	equ	0xFF6
  5907                           tablat	equ	0xFF5
  5908                           prodh	equ	0xFF4
  5909                           prodl	equ	0xFF3
  5910                           intcon	equ	0xFF2
  5911                           intcon2	equ	0xFF1
  5912                           postinc0	equ	0xFEE
  5913                           wreg	equ	0xFE8
  5914                           postdec1	equ	0xFE5
  5915                           fsr1l	equ	0xFE1
  5916                           indf2	equ	0xFDF
  5917                           postinc2	equ	0xFDE
  5918                           postdec2	equ	0xFDD
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8
  5922                           
  5923 ;; *************** function _setAddrWindow *****************
  5924 ;; Defined at:
  5925 ;;		line 429 in file "ST7735_TFT.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  x0              1    wreg     unsigned char 
  5928 ;;  y0              1   19[COMRAM] unsigned char 
  5929 ;;  x1              1   20[COMRAM] unsigned char 
  5930 ;;  y1              1   21[COMRAM] unsigned char 
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  x0              1   22[COMRAM] unsigned char 
  5933 ;; Return value:  Size  Location     Type
  5934 ;;		None               void
  5935 ;; Registers used:
  5936 ;;		wreg, status,2, status,0, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5942 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;Total ram usage:        4 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    5
  5949 ;; This function calls:
  5950 ;;		_write_command
  5951 ;;		_write_data
  5952 ;; This function is called by:
  5953 ;;		_drawPixel
  5954 ;;		_drawFastVLine
  5955 ;;		_fillRectangle
  5956 ;;		_drawFastHLine
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text23
  5961  001628                     __ptext23:
  5962                           	opt stack 0
  5963  001628                     _setAddrWindow:
  5964                           	opt stack 22
  5965                           
  5966                           ;incstack = 0
  5967                           ;setAddrWindow@x0 stored from wreg
  5968  001628  6E17               	movwf	setAddrWindow@x0,c
  5969                           
  5970                           ;ST7735_TFT.c: 431: write_command(0x2A);
  5971  00162A  0E2A               	movlw	42
  5972  00162C  EC81  F00D         	call	_write_command
  5973                           
  5974                           ;ST7735_TFT.c: 432: write_data(0);
  5975  001630  0E00               	movlw	0
  5976  001632  EC79  F00D         	call	_write_data
  5977                           
  5978                           ;ST7735_TFT.c: 433: write_data(x0 + colstart);
  5979  001636  5017               	movf	setAddrWindow@x0,w,c
  5980  001638  2459               	addwf	_colstart,w,c
  5981  00163A  EC79  F00D         	call	_write_data
  5982                           
  5983                           ;ST7735_TFT.c: 434: write_data(0);
  5984  00163E  0E00               	movlw	0
  5985  001640  EC79  F00D         	call	_write_data
  5986                           
  5987                           ;ST7735_TFT.c: 435: write_data(x1 + colstart);
  5988  001644  5015               	movf	setAddrWindow@x1,w,c
  5989  001646  2459               	addwf	_colstart,w,c
  5990  001648  EC79  F00D         	call	_write_data
  5991                           
  5992                           ;ST7735_TFT.c: 436: write_command(0x2B);
  5993  00164C  0E2B               	movlw	43
  5994  00164E  EC81  F00D         	call	_write_command
  5995                           
  5996                           ;ST7735_TFT.c: 437: write_data(0);
  5997  001652  0E00               	movlw	0
  5998  001654  EC79  F00D         	call	_write_data
  5999                           
  6000                           ;ST7735_TFT.c: 438: write_data(y0 + rowstart);
  6001  001658  5014               	movf	setAddrWindow@y0,w,c
  6002  00165A  245B               	addwf	_rowstart,w,c
  6003  00165C  EC79  F00D         	call	_write_data
  6004                           
  6005                           ;ST7735_TFT.c: 439: write_data(0);
  6006  001660  0E00               	movlw	0
  6007  001662  EC79  F00D         	call	_write_data
  6008                           
  6009                           ;ST7735_TFT.c: 440: write_data(y1 + rowstart);
  6010  001666  5016               	movf	setAddrWindow@y1,w,c
  6011  001668  245B               	addwf	_rowstart,w,c
  6012  00166A  EC79  F00D         	call	_write_data
  6013                           
  6014                           ;ST7735_TFT.c: 441: write_command(0x2C);
  6015  00166E  0E2C               	movlw	44
  6016  001670  EC81  F00D         	call	_write_command
  6017  001674  0012               	return		;funcret
  6018  001676                     __end_of_setAddrWindow:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           intcon	equ	0xFF2
  6027                           intcon2	equ	0xFF1
  6028                           postinc0	equ	0xFEE
  6029                           wreg	equ	0xFE8
  6030                           postdec1	equ	0xFE5
  6031                           fsr1l	equ	0xFE1
  6032                           indf2	equ	0xFDF
  6033                           postinc2	equ	0xFDE
  6034                           postdec2	equ	0xFDD
  6035                           fsr2h	equ	0xFDA
  6036                           fsr2l	equ	0xFD9
  6037                           status	equ	0xFD8
  6038                           
  6039 ;; *************** function _TFT_GreenTab_Initialize *****************
  6040 ;; Defined at:
  6041 ;;		line 681 in file "ST7735_TFT.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;		None
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;		None
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;Total ram usage:        0 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    6
  6062 ;; This function calls:
  6063 ;;		_Rcmd1
  6064 ;;		_Rcmd2red
  6065 ;;		_Rcmd3
  6066 ;;		_write_command
  6067 ;;		_write_data
  6068 ;; This function is called by:
  6069 ;;		_Initialize_Screen
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text24
  6074  001946                     __ptext24:
  6075                           	opt stack 0
  6076  001946                     _TFT_GreenTab_Initialize:
  6077                           	opt stack 23
  6078                           
  6079                           ;ST7735_TFT.c: 683: PORTDbits.RD4 = 1;
  6080                           
  6081                           ;incstack = 0
  6082  001946  8883               	bsf	3971,4,c	;volatile
  6083                           
  6084                           ;ST7735_TFT.c: 684: PORTDbits.RD3 = 0;
  6085  001948  9683               	bcf	3971,3,c	;volatile
  6086                           
  6087                           ;ST7735_TFT.c: 686: SSPSTAT=0x80;
  6088  00194A  0E80               	movlw	128
  6089  00194C  6EC7               	movwf	4039,c	;volatile
  6090                           
  6091                           ;ST7735_TFT.c: 687: SSPCON1=0x30;
  6092  00194E  0E30               	movlw	48
  6093  001950  6EC6               	movwf	4038,c	;volatile
  6094                           
  6095                           ;ST7735_TFT.c: 690: Rcmd1();
  6096  001952  EC34  F006         	call	_Rcmd1	;wreg free
  6097                           
  6098                           ;ST7735_TFT.c: 691: Rcmd2red();
  6099  001956  ECC3  F00B         	call	_Rcmd2red	;wreg free
  6100                           
  6101                           ;ST7735_TFT.c: 692: Rcmd3();
  6102  00195A  EC41  F007         	call	_Rcmd3	;wreg free
  6103                           
  6104                           ;ST7735_TFT.c: 693: write_command(0x36);
  6105  00195E  0E36               	movlw	54
  6106  001960  EC81  F00D         	call	_write_command
  6107                           
  6108                           ;ST7735_TFT.c: 694: write_data(0xC0);
  6109  001964  0EC0               	movlw	192
  6110  001966  EC79  F00D         	call	_write_data
  6111                           
  6112                           ;ST7735_TFT.c: 695: _tft_type = 1;
  6113  00196A  0E01               	movlw	1
  6114  00196C  6E53               	movwf	__tft_type,c
  6115  00196E  0012               	return		;funcret
  6116  001970                     __end_of_TFT_GreenTab_Initialize:
  6117                           	opt stack 0
  6118                           tblptru	equ	0xFF8
  6119                           tblptrh	equ	0xFF7
  6120                           tblptrl	equ	0xFF6
  6121                           tablat	equ	0xFF5
  6122                           prodh	equ	0xFF4
  6123                           prodl	equ	0xFF3
  6124                           intcon	equ	0xFF2
  6125                           intcon2	equ	0xFF1
  6126                           postinc0	equ	0xFEE
  6127                           wreg	equ	0xFE8
  6128                           postdec1	equ	0xFE5
  6129                           fsr1l	equ	0xFE1
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _Rcmd3 *****************
  6138 ;; Defined at:
  6139 ;;		line 375 in file "ST7735_TFT.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;		None
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;		None
  6144 ;; Return value:  Size  Location     Type
  6145 ;;		None               void
  6146 ;; Registers used:
  6147 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;Total ram usage:        0 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    5
  6160 ;; This function calls:
  6161 ;;		_delay_ms
  6162 ;;		_write_command
  6163 ;;		_write_data
  6164 ;; This function is called by:
  6165 ;;		_TFT_GreenTab_Initialize
  6166 ;;		_TFT_BlackTab_Initialize
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text25
  6171  000E82                     __ptext25:
  6172                           	opt stack 0
  6173  000E82                     _Rcmd3:
  6174                           	opt stack 23
  6175                           
  6176                           ;ST7735_TFT.c: 377: write_command(0xE0);
  6177                           
  6178                           ;incstack = 0
  6179  000E82  0EE0               	movlw	224
  6180  000E84  EC81  F00D         	call	_write_command
  6181                           
  6182                           ;ST7735_TFT.c: 378: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6183  000E88  0E02               	movlw	2
  6184  000E8A  EC79  F00D         	call	_write_data
  6185  000E8E  0E1C               	movlw	28
  6186  000E90  EC79  F00D         	call	_write_data
  6187  000E94  0E07               	movlw	7
  6188  000E96  EC79  F00D         	call	_write_data
  6189  000E9A  0E12               	movlw	18
  6190  000E9C  EC79  F00D         	call	_write_data
  6191                           
  6192                           ;ST7735_TFT.c: 379: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6193  000EA0  0E37               	movlw	55
  6194  000EA2  EC79  F00D         	call	_write_data
  6195  000EA6  0E32               	movlw	50
  6196  000EA8  EC79  F00D         	call	_write_data
  6197  000EAC  0E29               	movlw	41
  6198  000EAE  EC79  F00D         	call	_write_data
  6199  000EB2  0E2D               	movlw	45
  6200  000EB4  EC79  F00D         	call	_write_data
  6201                           
  6202                           ;ST7735_TFT.c: 380: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6203  000EB8  0E29               	movlw	41
  6204  000EBA  EC79  F00D         	call	_write_data
  6205  000EBE  0E25               	movlw	37
  6206  000EC0  EC79  F00D         	call	_write_data
  6207  000EC4  0E2B               	movlw	43
  6208  000EC6  EC79  F00D         	call	_write_data
  6209  000ECA  0E39               	movlw	57
  6210  000ECC  EC79  F00D         	call	_write_data
  6211                           
  6212                           ;ST7735_TFT.c: 381: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6213  000ED0  0E00               	movlw	0
  6214  000ED2  EC79  F00D         	call	_write_data
  6215  000ED6  0E01               	movlw	1
  6216  000ED8  EC79  F00D         	call	_write_data
  6217  000EDC  0E03               	movlw	3
  6218  000EDE  EC79  F00D         	call	_write_data
  6219  000EE2  0E10               	movlw	16
  6220  000EE4  EC79  F00D         	call	_write_data
  6221                           
  6222                           ;ST7735_TFT.c: 382: write_command(0xE1);
  6223  000EE8  0EE1               	movlw	225
  6224  000EEA  EC81  F00D         	call	_write_command
  6225                           
  6226                           ;ST7735_TFT.c: 383: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6227  000EEE  0E03               	movlw	3
  6228  000EF0  EC79  F00D         	call	_write_data
  6229  000EF4  0E1D               	movlw	29
  6230  000EF6  EC79  F00D         	call	_write_data
  6231  000EFA  0E07               	movlw	7
  6232  000EFC  EC79  F00D         	call	_write_data
  6233  000F00  0E06               	movlw	6
  6234  000F02  EC79  F00D         	call	_write_data
  6235                           
  6236                           ;ST7735_TFT.c: 384: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6237  000F06  0E2E               	movlw	46
  6238  000F08  EC79  F00D         	call	_write_data
  6239  000F0C  0E2C               	movlw	44
  6240  000F0E  EC79  F00D         	call	_write_data
  6241  000F12  0E29               	movlw	41
  6242  000F14  EC79  F00D         	call	_write_data
  6243  000F18  0E2D               	movlw	45
  6244  000F1A  EC79  F00D         	call	_write_data
  6245                           
  6246                           ;ST7735_TFT.c: 385: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6247  000F1E  0E2E               	movlw	46
  6248  000F20  EC79  F00D         	call	_write_data
  6249  000F24  0E2E               	movlw	46
  6250  000F26  EC79  F00D         	call	_write_data
  6251  000F2A  0E37               	movlw	55
  6252  000F2C  EC79  F00D         	call	_write_data
  6253  000F30  0E3F               	movlw	63
  6254  000F32  EC79  F00D         	call	_write_data
  6255                           
  6256                           ;ST7735_TFT.c: 386: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6257  000F36  0E00               	movlw	0
  6258  000F38  EC79  F00D         	call	_write_data
  6259  000F3C  0E00               	movlw	0
  6260  000F3E  EC79  F00D         	call	_write_data
  6261  000F42  0E02               	movlw	2
  6262  000F44  EC79  F00D         	call	_write_data
  6263  000F48  0E10               	movlw	16
  6264  000F4A  EC79  F00D         	call	_write_data
  6265                           
  6266                           ;ST7735_TFT.c: 387: write_command(0x13);
  6267  000F4E  0E13               	movlw	19
  6268  000F50  EC81  F00D         	call	_write_command
  6269                           
  6270                           ;ST7735_TFT.c: 388: delay_ms(10);
  6271  000F54  0E00               	movlw	0
  6272  000F56  6E18               	movwf	delay_ms@ms+1,c
  6273  000F58  0E0A               	movlw	10
  6274  000F5A  6E17               	movwf	delay_ms@ms,c
  6275  000F5C  ECEB  F00A         	call	_delay_ms	;wreg free
  6276                           
  6277                           ;ST7735_TFT.c: 389: write_command(0x29);
  6278  000F60  0E29               	movlw	41
  6279  000F62  EC81  F00D         	call	_write_command
  6280                           
  6281                           ;ST7735_TFT.c: 390: delay_ms(100);
  6282  000F66  0E00               	movlw	0
  6283  000F68  6E18               	movwf	delay_ms@ms+1,c
  6284  000F6A  0E64               	movlw	100
  6285  000F6C  6E17               	movwf	delay_ms@ms,c
  6286  000F6E  ECEB  F00A         	call	_delay_ms	;wreg free
  6287  000F72  0012               	return		;funcret
  6288  000F74                     __end_of_Rcmd3:
  6289                           	opt stack 0
  6290                           tblptru	equ	0xFF8
  6291                           tblptrh	equ	0xFF7
  6292                           tblptrl	equ	0xFF6
  6293                           tablat	equ	0xFF5
  6294                           prodh	equ	0xFF4
  6295                           prodl	equ	0xFF3
  6296                           intcon	equ	0xFF2
  6297                           intcon2	equ	0xFF1
  6298                           postinc0	equ	0xFEE
  6299                           wreg	equ	0xFE8
  6300                           postdec1	equ	0xFE5
  6301                           fsr1l	equ	0xFE1
  6302                           indf2	equ	0xFDF
  6303                           postinc2	equ	0xFDE
  6304                           postdec2	equ	0xFDD
  6305                           fsr2h	equ	0xFDA
  6306                           fsr2l	equ	0xFD9
  6307                           status	equ	0xFD8
  6308                           
  6309 ;; *************** function _Rcmd2red *****************
  6310 ;; Defined at:
  6311 ;;		line 365 in file "ST7735_TFT.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;		None
  6314 ;; Auto vars:     Size  Location     Type
  6315 ;;		None
  6316 ;; Return value:  Size  Location     Type
  6317 ;;		None               void
  6318 ;; Registers used:
  6319 ;;		wreg, status,2, cstack
  6320 ;; Tracked objects:
  6321 ;;		On entry : 0/0
  6322 ;;		On exit  : 0/0
  6323 ;;		Unchanged: 0/0
  6324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;Total ram usage:        0 bytes
  6330 ;; Hardware stack levels used:    1
  6331 ;; Hardware stack levels required when called:    5
  6332 ;; This function calls:
  6333 ;;		_write_command
  6334 ;;		_write_data
  6335 ;; This function is called by:
  6336 ;;		_TFT_GreenTab_Initialize
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text26
  6341  001786                     __ptext26:
  6342                           	opt stack 0
  6343  001786                     _Rcmd2red:
  6344                           	opt stack 23
  6345                           
  6346                           ;ST7735_TFT.c: 367: write_command(0x2A);
  6347                           
  6348                           ;incstack = 0
  6349  001786  0E2A               	movlw	42
  6350  001788  EC81  F00D         	call	_write_command
  6351                           
  6352                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x00);
  6353  00178C  0E00               	movlw	0
  6354  00178E  EC79  F00D         	call	_write_data
  6355  001792  0E00               	movlw	0
  6356  001794  EC79  F00D         	call	_write_data
  6357                           
  6358                           ;ST7735_TFT.c: 369: write_data(0x00); write_data(0x7F);
  6359  001798  0E00               	movlw	0
  6360  00179A  EC79  F00D         	call	_write_data
  6361  00179E  0E7F               	movlw	127
  6362  0017A0  EC79  F00D         	call	_write_data
  6363                           
  6364                           ;ST7735_TFT.c: 370: write_command(0x2B);
  6365  0017A4  0E2B               	movlw	43
  6366  0017A6  EC81  F00D         	call	_write_command
  6367                           
  6368                           ;ST7735_TFT.c: 371: write_data(0x00); write_data(0x00);
  6369  0017AA  0E00               	movlw	0
  6370  0017AC  EC79  F00D         	call	_write_data
  6371  0017B0  0E00               	movlw	0
  6372  0017B2  EC79  F00D         	call	_write_data
  6373                           
  6374                           ;ST7735_TFT.c: 372: write_data(0x00); write_data(0x9F);
  6375  0017B6  0E00               	movlw	0
  6376  0017B8  EC79  F00D         	call	_write_data
  6377  0017BC  0E9F               	movlw	159
  6378  0017BE  EC79  F00D         	call	_write_data
  6379  0017C2  0012               	return		;funcret
  6380  0017C4                     __end_of_Rcmd2red:
  6381                           	opt stack 0
  6382                           tblptru	equ	0xFF8
  6383                           tblptrh	equ	0xFF7
  6384                           tblptrl	equ	0xFF6
  6385                           tablat	equ	0xFF5
  6386                           prodh	equ	0xFF4
  6387                           prodl	equ	0xFF3
  6388                           intcon	equ	0xFF2
  6389                           intcon2	equ	0xFF1
  6390                           postinc0	equ	0xFEE
  6391                           wreg	equ	0xFE8
  6392                           postdec1	equ	0xFE5
  6393                           fsr1l	equ	0xFE1
  6394                           indf2	equ	0xFDF
  6395                           postinc2	equ	0xFDE
  6396                           postdec2	equ	0xFDD
  6397                           fsr2h	equ	0xFDA
  6398                           fsr2l	equ	0xFD9
  6399                           status	equ	0xFD8
  6400                           
  6401 ;; *************** function _Rcmd1 *****************
  6402 ;; Defined at:
  6403 ;;		line 318 in file "ST7735_TFT.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;		None
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;		None               void
  6410 ;; Registers used:
  6411 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;Total ram usage:        0 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    5
  6424 ;; This function calls:
  6425 ;;		_delay_ms
  6426 ;;		_write_command
  6427 ;;		_write_data
  6428 ;; This function is called by:
  6429 ;;		_TFT_GreenTab_Initialize
  6430 ;;		_TFT_BlackTab_Initialize
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text27
  6435  000C68                     __ptext27:
  6436                           	opt stack 0
  6437  000C68                     _Rcmd1:
  6438                           	opt stack 23
  6439                           
  6440                           ;ST7735_TFT.c: 320: write_command(0x01);
  6441                           
  6442                           ;incstack = 0
  6443  000C68  0E01               	movlw	1
  6444  000C6A  EC81  F00D         	call	_write_command
  6445                           
  6446                           ;ST7735_TFT.c: 321: delay_ms(150);
  6447  000C6E  0E00               	movlw	0
  6448  000C70  6E18               	movwf	delay_ms@ms+1,c
  6449  000C72  0E96               	movlw	150
  6450  000C74  6E17               	movwf	delay_ms@ms,c
  6451  000C76  ECEB  F00A         	call	_delay_ms	;wreg free
  6452                           
  6453                           ;ST7735_TFT.c: 322: write_command(0x11);
  6454  000C7A  0E11               	movlw	17
  6455  000C7C  EC81  F00D         	call	_write_command
  6456                           
  6457                           ;ST7735_TFT.c: 323: delay_ms(500);
  6458  000C80  0E01               	movlw	1
  6459  000C82  6E18               	movwf	delay_ms@ms+1,c
  6460  000C84  0EF4               	movlw	244
  6461  000C86  6E17               	movwf	delay_ms@ms,c
  6462  000C88  ECEB  F00A         	call	_delay_ms	;wreg free
  6463                           
  6464                           ;ST7735_TFT.c: 324: write_command(0xB1);
  6465  000C8C  0EB1               	movlw	177
  6466  000C8E  EC81  F00D         	call	_write_command
  6467                           
  6468                           ;ST7735_TFT.c: 325: write_data(0x01);
  6469  000C92  0E01               	movlw	1
  6470  000C94  EC79  F00D         	call	_write_data
  6471                           
  6472                           ;ST7735_TFT.c: 326: write_data(0x2C);
  6473  000C98  0E2C               	movlw	44
  6474  000C9A  EC79  F00D         	call	_write_data
  6475                           
  6476                           ;ST7735_TFT.c: 327: write_data(0x2D);
  6477  000C9E  0E2D               	movlw	45
  6478  000CA0  EC79  F00D         	call	_write_data
  6479                           
  6480                           ;ST7735_TFT.c: 328: write_command(0xB2);
  6481  000CA4  0EB2               	movlw	178
  6482  000CA6  EC81  F00D         	call	_write_command
  6483                           
  6484                           ;ST7735_TFT.c: 329: write_data(0x01);
  6485  000CAA  0E01               	movlw	1
  6486  000CAC  EC79  F00D         	call	_write_data
  6487                           
  6488                           ;ST7735_TFT.c: 330: write_data(0x2C);
  6489  000CB0  0E2C               	movlw	44
  6490  000CB2  EC79  F00D         	call	_write_data
  6491                           
  6492                           ;ST7735_TFT.c: 331: write_data(0x2D);
  6493  000CB6  0E2D               	movlw	45
  6494  000CB8  EC79  F00D         	call	_write_data
  6495                           
  6496                           ;ST7735_TFT.c: 332: write_command(0xB3);
  6497  000CBC  0EB3               	movlw	179
  6498  000CBE  EC81  F00D         	call	_write_command
  6499                           
  6500                           ;ST7735_TFT.c: 333: write_data(0x01);
  6501  000CC2  0E01               	movlw	1
  6502  000CC4  EC79  F00D         	call	_write_data
  6503                           
  6504                           ;ST7735_TFT.c: 334: write_data(0x2C);
  6505  000CC8  0E2C               	movlw	44
  6506  000CCA  EC79  F00D         	call	_write_data
  6507                           
  6508                           ;ST7735_TFT.c: 335: write_data(0x2D);
  6509  000CCE  0E2D               	movlw	45
  6510  000CD0  EC79  F00D         	call	_write_data
  6511                           
  6512                           ;ST7735_TFT.c: 336: write_data(0x01);
  6513  000CD4  0E01               	movlw	1
  6514  000CD6  EC79  F00D         	call	_write_data
  6515                           
  6516                           ;ST7735_TFT.c: 337: write_data(0x2C);
  6517  000CDA  0E2C               	movlw	44
  6518  000CDC  EC79  F00D         	call	_write_data
  6519                           
  6520                           ;ST7735_TFT.c: 338: write_data(0x2D);
  6521  000CE0  0E2D               	movlw	45
  6522  000CE2  EC79  F00D         	call	_write_data
  6523                           
  6524                           ;ST7735_TFT.c: 339: write_command(0xB4);
  6525  000CE6  0EB4               	movlw	180
  6526  000CE8  EC81  F00D         	call	_write_command
  6527                           
  6528                           ;ST7735_TFT.c: 340: write_data(0x07);
  6529  000CEC  0E07               	movlw	7
  6530  000CEE  EC79  F00D         	call	_write_data
  6531                           
  6532                           ;ST7735_TFT.c: 341: write_command(0xC0);
  6533  000CF2  0EC0               	movlw	192
  6534  000CF4  EC81  F00D         	call	_write_command
  6535                           
  6536                           ;ST7735_TFT.c: 342: write_data(0xA2);
  6537  000CF8  0EA2               	movlw	162
  6538  000CFA  EC79  F00D         	call	_write_data
  6539                           
  6540                           ;ST7735_TFT.c: 343: write_data(0x02);
  6541  000CFE  0E02               	movlw	2
  6542  000D00  EC79  F00D         	call	_write_data
  6543                           
  6544                           ;ST7735_TFT.c: 344: write_data(0x84);
  6545  000D04  0E84               	movlw	132
  6546  000D06  EC79  F00D         	call	_write_data
  6547                           
  6548                           ;ST7735_TFT.c: 345: write_command(0xC1);
  6549  000D0A  0EC1               	movlw	193
  6550  000D0C  EC81  F00D         	call	_write_command
  6551                           
  6552                           ;ST7735_TFT.c: 346: write_data(0xC5);
  6553  000D10  0EC5               	movlw	197
  6554  000D12  EC79  F00D         	call	_write_data
  6555                           
  6556                           ;ST7735_TFT.c: 347: write_command(0xC2);
  6557  000D16  0EC2               	movlw	194
  6558  000D18  EC81  F00D         	call	_write_command
  6559                           
  6560                           ;ST7735_TFT.c: 348: write_data(0x0A);
  6561  000D1C  0E0A               	movlw	10
  6562  000D1E  EC79  F00D         	call	_write_data
  6563                           
  6564                           ;ST7735_TFT.c: 349: write_data(0x00);
  6565  000D22  0E00               	movlw	0
  6566  000D24  EC79  F00D         	call	_write_data
  6567                           
  6568                           ;ST7735_TFT.c: 350: write_command(0xC3);
  6569  000D28  0EC3               	movlw	195
  6570  000D2A  EC81  F00D         	call	_write_command
  6571                           
  6572                           ;ST7735_TFT.c: 351: write_data(0x8A);
  6573  000D2E  0E8A               	movlw	138
  6574  000D30  EC79  F00D         	call	_write_data
  6575                           
  6576                           ;ST7735_TFT.c: 352: write_data(0x2A);
  6577  000D34  0E2A               	movlw	42
  6578  000D36  EC79  F00D         	call	_write_data
  6579                           
  6580                           ;ST7735_TFT.c: 353: write_command(0xC4);
  6581  000D3A  0EC4               	movlw	196
  6582  000D3C  EC81  F00D         	call	_write_command
  6583                           
  6584                           ;ST7735_TFT.c: 354: write_data(0x8A);
  6585  000D40  0E8A               	movlw	138
  6586  000D42  EC79  F00D         	call	_write_data
  6587                           
  6588                           ;ST7735_TFT.c: 355: write_data(0xEE);
  6589  000D46  0EEE               	movlw	238
  6590  000D48  EC79  F00D         	call	_write_data
  6591                           
  6592                           ;ST7735_TFT.c: 356: write_command(0xC5);
  6593  000D4C  0EC5               	movlw	197
  6594  000D4E  EC81  F00D         	call	_write_command
  6595                           
  6596                           ;ST7735_TFT.c: 357: write_data(0x0E);
  6597  000D52  0E0E               	movlw	14
  6598  000D54  EC79  F00D         	call	_write_data
  6599                           
  6600                           ;ST7735_TFT.c: 358: write_command(0x20);
  6601  000D58  0E20               	movlw	32
  6602  000D5A  EC81  F00D         	call	_write_command
  6603                           
  6604                           ;ST7735_TFT.c: 359: write_command(0x36);
  6605  000D5E  0E36               	movlw	54
  6606  000D60  EC81  F00D         	call	_write_command
  6607                           
  6608                           ;ST7735_TFT.c: 360: write_data(0xC8);
  6609  000D64  0EC8               	movlw	200
  6610  000D66  EC79  F00D         	call	_write_data
  6611                           
  6612                           ;ST7735_TFT.c: 361: write_command(0x3A);
  6613  000D6A  0E3A               	movlw	58
  6614  000D6C  EC81  F00D         	call	_write_command
  6615                           
  6616                           ;ST7735_TFT.c: 362: write_data(0x05);
  6617  000D70  0E05               	movlw	5
  6618  000D72  EC79  F00D         	call	_write_data
  6619  000D76  0012               	return		;funcret
  6620  000D78                     __end_of_Rcmd1:
  6621                           	opt stack 0
  6622                           tblptru	equ	0xFF8
  6623                           tblptrh	equ	0xFF7
  6624                           tblptrl	equ	0xFF6
  6625                           tablat	equ	0xFF5
  6626                           prodh	equ	0xFF4
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           intcon2	equ	0xFF1
  6630                           postinc0	equ	0xFEE
  6631                           wreg	equ	0xFE8
  6632                           postdec1	equ	0xFE5
  6633                           fsr1l	equ	0xFE1
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8
  6640                           
  6641 ;; *************** function _write_data *****************
  6642 ;; Defined at:
  6643 ;;		line 246 in file "ST7735_TFT.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  data_           1    wreg     unsigned char 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  data_           1   18[COMRAM] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;		None               void
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;Total ram usage:        1 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    4
  6664 ;; This function calls:
  6665 ;;		_spiwrite
  6666 ;; This function is called by:
  6667 ;;		_Rcmd1
  6668 ;;		_Rcmd2red
  6669 ;;		_Rcmd3
  6670 ;;		_setAddrWindow
  6671 ;;		_drawPixel
  6672 ;;		_TFT_GreenTab_Initialize
  6673 ;;		_Bcmd
  6674 ;;		_setScrollDefinition
  6675 ;;		_Rcmd2green
  6676 ;;		_VerticalScroll
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text28
  6681  001AF2                     __ptext28:
  6682                           	opt stack 0
  6683  001AF2                     _write_data:
  6684                           	opt stack 22
  6685                           
  6686                           ;incstack = 0
  6687                           ;write_data@data_ stored from wreg
  6688  001AF2  6E13               	movwf	write_data@data_,c
  6689                           
  6690                           ;ST7735_TFT.c: 248: PORTDbits.RD4 = 0;
  6691  001AF4  9883               	bcf	3971,4,c	;volatile
  6692                           
  6693                           ;ST7735_TFT.c: 249: PORTDbits.RD3 = 1;
  6694  001AF6  8683               	bsf	3971,3,c	;volatile
  6695                           
  6696                           ;ST7735_TFT.c: 250: spiwrite(data_);
  6697  001AF8  5013               	movf	write_data@data_,w,c
  6698  001AFA  EC2F  F00D         	call	_spiwrite
  6699                           
  6700                           ;ST7735_TFT.c: 251: PORTDbits.RD4 = 1;
  6701  001AFE  8883               	bsf	3971,4,c	;volatile
  6702  001B00  0012               	return		;funcret
  6703  001B02                     __end_of_write_data:
  6704                           	opt stack 0
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           intcon	equ	0xFF2
  6712                           intcon2	equ	0xFF1
  6713                           postinc0	equ	0xFEE
  6714                           wreg	equ	0xFE8
  6715                           postdec1	equ	0xFE5
  6716                           fsr1l	equ	0xFE1
  6717                           indf2	equ	0xFDF
  6718                           postinc2	equ	0xFDE
  6719                           postdec2	equ	0xFDD
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _write_command *****************
  6725 ;; Defined at:
  6726 ;;		line 235 in file "ST7735_TFT.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  cmd_            1    wreg     unsigned char 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  cmd_            1   18[COMRAM] unsigned char 
  6731 ;; Return value:  Size  Location     Type
  6732 ;;		None               void
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;Total ram usage:        1 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    4
  6747 ;; This function calls:
  6748 ;;		_spiwrite
  6749 ;; This function is called by:
  6750 ;;		_Rcmd1
  6751 ;;		_Rcmd2red
  6752 ;;		_Rcmd3
  6753 ;;		_setAddrWindow
  6754 ;;		_TFT_GreenTab_Initialize
  6755 ;;		_Bcmd
  6756 ;;		_setScrollDefinition
  6757 ;;		_Rcmd2green
  6758 ;;		_VerticalScroll
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           	psect	text29
  6763  001B02                     __ptext29:
  6764                           	opt stack 0
  6765  001B02                     _write_command:
  6766                           	opt stack 22
  6767                           
  6768                           ;incstack = 0
  6769                           ;write_command@cmd_ stored from wreg
  6770  001B02  6E13               	movwf	write_command@cmd_,c
  6771                           
  6772                           ;ST7735_TFT.c: 237: PORTDbits.RD4 = 0;
  6773  001B04  9883               	bcf	3971,4,c	;volatile
  6774                           
  6775                           ;ST7735_TFT.c: 239: PORTDbits.RD3 = 0;
  6776  001B06  9683               	bcf	3971,3,c	;volatile
  6777                           
  6778                           ;ST7735_TFT.c: 240: spiwrite(cmd_);
  6779  001B08  5013               	movf	write_command@cmd_,w,c
  6780  001B0A  EC2F  F00D         	call	_spiwrite
  6781                           
  6782                           ;ST7735_TFT.c: 242: PORTDbits.RD4 = 1;
  6783  001B0E  8883               	bsf	3971,4,c	;volatile
  6784  001B10  0012               	return		;funcret
  6785  001B12                     __end_of_write_command:
  6786                           	opt stack 0
  6787                           tblptru	equ	0xFF8
  6788                           tblptrh	equ	0xFF7
  6789                           tblptrl	equ	0xFF6
  6790                           tablat	equ	0xFF5
  6791                           prodh	equ	0xFF4
  6792                           prodl	equ	0xFF3
  6793                           intcon	equ	0xFF2
  6794                           intcon2	equ	0xFF1
  6795                           postinc0	equ	0xFEE
  6796                           wreg	equ	0xFE8
  6797                           postdec1	equ	0xFE5
  6798                           fsr1l	equ	0xFE1
  6799                           indf2	equ	0xFDF
  6800                           postinc2	equ	0xFDE
  6801                           postdec2	equ	0xFDD
  6802                           fsr2h	equ	0xFDA
  6803                           fsr2l	equ	0xFD9
  6804                           status	equ	0xFD8
  6805                           
  6806 ;; *************** function _spiwrite *****************
  6807 ;; Defined at:
  6808 ;;		line 226 in file "ST7735_TFT.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  spidata         1    wreg     unsigned char 
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;  spidata         1   17[COMRAM] unsigned char 
  6813 ;;  x               1   16[COMRAM] unsigned char 
  6814 ;; Return value:  Size  Location     Type
  6815 ;;		None               void
  6816 ;; Registers used:
  6817 ;;		wreg
  6818 ;; Tracked objects:
  6819 ;;		On entry : 0/0
  6820 ;;		On exit  : 0/0
  6821 ;;		Unchanged: 0/0
  6822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;Total ram usage:        2 bytes
  6828 ;; Hardware stack levels used:    1
  6829 ;; Hardware stack levels required when called:    3
  6830 ;; This function calls:
  6831 ;;		Nothing
  6832 ;; This function is called by:
  6833 ;;		_write_command
  6834 ;;		_write_data
  6835 ;;		_drawFastVLine
  6836 ;;		_fillRectangle
  6837 ;;		_drawFastHLine
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text30
  6842  001A5E                     __ptext30:
  6843                           	opt stack 0
  6844  001A5E                     _spiwrite:
  6845                           	opt stack 24
  6846                           
  6847                           ;incstack = 0
  6848                           ;spiwrite@spidata stored from wreg
  6849  001A5E  6E12               	movwf	spiwrite@spidata,c
  6850                           
  6851                           ;ST7735_TFT.c: 228: char x;
  6852                           ;ST7735_TFT.c: 229: PIR1bits.SSPIF = 0;
  6853  001A60  969E               	bcf	3998,3,c	;volatile
  6854                           
  6855                           ;ST7735_TFT.c: 230: x = SSPBUF;
  6856  001A62  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6857                           
  6858                           ;ST7735_TFT.c: 231: SSPBUF = spidata;
  6859  001A66  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6860                           
  6861                           ;ST7735_TFT.c: 232: while (!SSPSTATbits.BF);
  6862  001A6A  D000               	goto	l45
  6863  001A6C                     l45:
  6864  001A6C  A0C7               	btfss	4039,0,c	;volatile
  6865  001A6E  D7FE               	goto	l45
  6866  001A70  0012               	return		;funcret
  6867  001A72                     __end_of_spiwrite:
  6868                           	opt stack 0
  6869                           tblptru	equ	0xFF8
  6870                           tblptrh	equ	0xFF7
  6871                           tblptrl	equ	0xFF6
  6872                           tablat	equ	0xFF5
  6873                           prodh	equ	0xFF4
  6874                           prodl	equ	0xFF3
  6875                           intcon	equ	0xFF2
  6876                           intcon2	equ	0xFF1
  6877                           postinc0	equ	0xFEE
  6878                           wreg	equ	0xFE8
  6879                           postdec1	equ	0xFE5
  6880                           fsr1l	equ	0xFE1
  6881                           indf2	equ	0xFDF
  6882                           postinc2	equ	0xFDE
  6883                           postdec2	equ	0xFDD
  6884                           fsr2h	equ	0xFDA
  6885                           fsr2l	equ	0xFD9
  6886                           status	equ	0xFD8
  6887                           
  6888 ;; *************** function _LCD_Reset *****************
  6889 ;; Defined at:
  6890 ;;		line 254 in file "ST7735_TFT.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;		None
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;		None
  6895 ;; Return value:  Size  Location     Type
  6896 ;;		None               void
  6897 ;; Registers used:
  6898 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6908 ;;Total ram usage:        0 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    5
  6911 ;; This function calls:
  6912 ;;		_delay_ms
  6913 ;; This function is called by:
  6914 ;;		_Initialize_Screen
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	text31
  6919  001AAA                     __ptext31:
  6920                           	opt stack 0
  6921  001AAA                     _LCD_Reset:
  6922                           	opt stack 24
  6923                           
  6924                           ;ST7735_TFT.c: 256: PORTDbits.RD2 = 0;
  6925                           
  6926                           ;incstack = 0
  6927  001AAA  9483               	bcf	3971,2,c	;volatile
  6928                           
  6929                           ;ST7735_TFT.c: 257: delay_ms(100);
  6930  001AAC  0E00               	movlw	0
  6931  001AAE  6E18               	movwf	delay_ms@ms+1,c
  6932  001AB0  0E64               	movlw	100
  6933  001AB2  6E17               	movwf	delay_ms@ms,c
  6934  001AB4  ECEB  F00A         	call	_delay_ms	;wreg free
  6935                           
  6936                           ;ST7735_TFT.c: 258: PORTDbits.RD2 = 1;
  6937  001AB8  8483               	bsf	3971,2,c	;volatile
  6938  001ABA  0012               	return		;funcret
  6939  001ABC                     __end_of_LCD_Reset:
  6940                           	opt stack 0
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           intcon2	equ	0xFF1
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           postdec1	equ	0xFE5
  6952                           fsr1l	equ	0xFE1
  6953                           indf2	equ	0xFDF
  6954                           postinc2	equ	0xFDE
  6955                           postdec2	equ	0xFDD
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function _delay_ms *****************
  6961 ;; Defined at:
  6962 ;;		line 101 in file "ST7735_TFT.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;  ms              2   22[COMRAM] int 
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;  count           2   26[COMRAM] int 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;		None               void
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;Total ram usage:        6 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    4
  6983 ;; This function calls:
  6984 ;;		___wmul
  6985 ;; This function is called by:
  6986 ;;		_LCD_Reset
  6987 ;;		_Rcmd1
  6988 ;;		_Rcmd3
  6989 ;;		_Bcmd
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text32
  6994  0015D6                     __ptext32:
  6995                           	opt stack 0
  6996  0015D6                     _delay_ms:
  6997                           	opt stack 23
  6998                           
  6999                           ;ST7735_TFT.c: 107: int count;
  7000                           ;ST7735_TFT.c: 108: count = 8000000/4000/8 * ms;
  7001                           
  7002                           ;incstack = 0
  7003  0015D6  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7004  0015DA  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7005  0015DE  0E00               	movlw	0
  7006  0015E0  6E14               	movwf	___wmul@multiplicand+1,c
  7007  0015E2  0EFA               	movlw	250
  7008  0015E4  6E13               	movwf	___wmul@multiplicand,c
  7009  0015E6  ECB8  F00C         	call	___wmul	;wreg free
  7010  0015EA  C011  F01B         	movff	?___wmul,delay_ms@count
  7011  0015EE  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7012                           
  7013                           ;ST7735_TFT.c: 109: count = (0xffff - count);
  7014  0015F2  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7015  0015F6  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7016  0015FA  1E19               	comf	??_delay_ms,f,c
  7017  0015FC  1E1A               	comf	??_delay_ms+1,f,c
  7018  0015FE  4A19               	infsnz	??_delay_ms,f,c
  7019  001600  2A1A               	incf	??_delay_ms+1,f,c
  7020  001602  0EFF               	movlw	255
  7021  001604  2419               	addwf	??_delay_ms,w,c
  7022  001606  6E1B               	movwf	delay_ms@count,c
  7023  001608  0EFF               	movlw	255
  7024  00160A  201A               	addwfc	??_delay_ms+1,w,c
  7025  00160C  6E1C               	movwf	delay_ms@count+1,c
  7026                           
  7027                           ;ST7735_TFT.c: 111: T3CON = 0xb8;
  7028  00160E  0EB8               	movlw	184
  7029  001610  6EB1               	movwf	4017,c	;volatile
  7030                           
  7031                           ;ST7735_TFT.c: 113: TMR0L = count & 0x00ff;
  7032  001612  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  7033                           
  7034                           ;ST7735_TFT.c: 114: TMR0H = count >> 8;
  7035  001616  501C               	movf	delay_ms@count+1,w,c
  7036  001618  6ED7               	movwf	4055,c	;volatile
  7037                           
  7038                           ;ST7735_TFT.c: 116: PIR2bits.TMR3IF = 0;
  7039  00161A  92A1               	bcf	4001,1,c	;volatile
  7040                           
  7041                           ;ST7735_TFT.c: 117: T3CONbits.TMR3ON = 1;
  7042  00161C  80B1               	bsf	4017,0,c	;volatile
  7043                           
  7044                           ;ST7735_TFT.c: 119: while (PIR2bits.TMR3IF == 0);
  7045  00161E  D000               	goto	l35
  7046  001620                     l35:
  7047  001620  A2A1               	btfss	4001,1,c	;volatile
  7048  001622  D7FE               	goto	l35
  7049                           
  7050                           ;ST7735_TFT.c: 120: T3CONbits.TMR3ON = 0;
  7051  001624  90B1               	bcf	4017,0,c	;volatile
  7052  001626  0012               	return		;funcret
  7053  001628                     __end_of_delay_ms:
  7054                           	opt stack 0
  7055                           tblptru	equ	0xFF8
  7056                           tblptrh	equ	0xFF7
  7057                           tblptrl	equ	0xFF6
  7058                           tablat	equ	0xFF5
  7059                           prodh	equ	0xFF4
  7060                           prodl	equ	0xFF3
  7061                           intcon	equ	0xFF2
  7062                           intcon2	equ	0xFF1
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           postdec1	equ	0xFE5
  7066                           fsr1l	equ	0xFE1
  7067                           indf2	equ	0xFDF
  7068                           postinc2	equ	0xFDE
  7069                           postdec2	equ	0xFDD
  7070                           fsr2h	equ	0xFDA
  7071                           fsr2l	equ	0xFD9
  7072                           status	equ	0xFD8
  7073                           
  7074 ;; *************** function ___wmul *****************
  7075 ;; Defined at:
  7076 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;  multiplier      2   16[COMRAM] unsigned int 
  7079 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  product         2   20[COMRAM] unsigned int 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  2   16[COMRAM] unsigned int 
  7084 ;; Registers used:
  7085 ;;		wreg, status,2, status,0, prodl, prodh
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;Total ram usage:        6 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    3
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_delay_ms
  7102 ;;		_drawChar
  7103 ;;		_main
  7104 ;;		_printf
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           	psect	text33
  7109  001970                     __ptext33:
  7110                           	opt stack 0
  7111  001970                     ___wmul:
  7112                           	opt stack 26
  7113                           
  7114                           ;incstack = 0
  7115  001970  5011               	movf	___wmul@multiplier,w,c
  7116  001972  0213               	mulwf	___wmul@multiplicand,c
  7117  001974  CFF3 F015          	movff	prodl,___wmul@product
  7118  001978  CFF4 F016          	movff	prodh,___wmul@product+1
  7119  00197C  5011               	movf	___wmul@multiplier,w,c
  7120  00197E  0214               	mulwf	___wmul@multiplicand+1,c
  7121  001980  50F3               	movf	prodl,w,c
  7122  001982  2616               	addwf	___wmul@product+1,f,c
  7123  001984  5012               	movf	___wmul@multiplier+1,w,c
  7124  001986  0213               	mulwf	___wmul@multiplicand,c
  7125  001988  50F3               	movf	prodl,w,c
  7126  00198A  2616               	addwf	___wmul@product+1,f,c
  7127  00198C  C015  F011         	movff	___wmul@product,?___wmul
  7128  001990  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7129  001994  D000               	goto	l707
  7130  001996                     l707:
  7131  001996  0012               	return		;funcret
  7132  001998                     __end_of___wmul:
  7133                           	opt stack 0
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           intcon	equ	0xFF2
  7141                           intcon2	equ	0xFF1
  7142                           postinc0	equ	0xFEE
  7143                           wreg	equ	0xFE8
  7144                           postdec1	equ	0xFE5
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153 ;; *************** function _Do_LED *****************
  7154 ;; Defined at:
  7155 ;;		line 294 in file "Lab10_sample_3.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;		None
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;		None
  7160 ;; Return value:  Size  Location     Type
  7161 ;;		None               void
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;Total ram usage:        2 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    4
  7176 ;; This function calls:
  7177 ;;		___awdiv
  7178 ;; This function is called by:
  7179 ;;		_main
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           	psect	text34
  7184  00187A                     __ptext34:
  7185                           	opt stack 0
  7186  00187A                     _Do_LED:
  7187                           	opt stack 26
  7188                           
  7189                           ;Lab10_sample_3.c: 296: PORTC = (tempF >= 70) ? 7 : (tempF/10);
  7190                           
  7191                           ;incstack = 0
  7192  00187A  5067               	movf	_tempF,w,c
  7193  00187C  0A80               	xorlw	128
  7194  00187E  0F3A               	addlw	-198
  7195  001880  B0D8               	btfsc	status,0,c
  7196  001882  D010               	goto	l5145
  7197  001884  5067               	movf	_tempF,w,c
  7198  001886  6E17               	movwf	___awdiv@dividend,c
  7199  001888  6A18               	clrf	___awdiv@dividend+1,c
  7200  00188A  BE17               	btfsc	___awdiv@dividend,7,c
  7201  00188C  0618               	decf	___awdiv@dividend+1,f,c
  7202  00188E  0E00               	movlw	0
  7203  001890  6E1A               	movwf	___awdiv@divisor+1,c
  7204  001892  0E0A               	movlw	10
  7205  001894  6E19               	movwf	___awdiv@divisor,c
  7206  001896  EC28  F008         	call	___awdiv	;wreg free
  7207  00189A  C017  F01F         	movff	?___awdiv,_Do_LED$1560
  7208  00189E  C018  F020         	movff	?___awdiv+1,_Do_LED$1560+1
  7209  0018A2  D005               	goto	l5147
  7210  0018A4                     l5145:
  7211  0018A4  0E00               	movlw	0
  7212  0018A6  6E20               	movwf	_Do_LED$1560+1,c
  7213  0018A8  0E07               	movlw	7
  7214  0018AA  6E1F               	movwf	_Do_LED$1560,c
  7215  0018AC  D000               	goto	l5147
  7216  0018AE                     l5147:
  7217  0018AE  C01F  FF82         	movff	_Do_LED$1560,3970	;volatile
  7218  0018B2  0012               	return		;funcret
  7219  0018B4                     __end_of_Do_LED:
  7220                           	opt stack 0
  7221                           tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           intcon2	equ	0xFF1
  7229                           postinc0	equ	0xFEE
  7230                           wreg	equ	0xFE8
  7231                           postdec1	equ	0xFE5
  7232                           fsr1l	equ	0xFE1
  7233                           indf2	equ	0xFDF
  7234                           postinc2	equ	0xFDE
  7235                           postdec2	equ	0xFDD
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function ___awdiv *****************
  7241 ;; Defined at:
  7242 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  dividend        2   22[COMRAM] int 
  7245 ;;  divisor         2   24[COMRAM] int 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  quotient        2   28[COMRAM] int 
  7248 ;;  sign            1   27[COMRAM] unsigned char 
  7249 ;;  counter         1   26[COMRAM] unsigned char 
  7250 ;; Return value:  Size  Location     Type
  7251 ;;                  2   22[COMRAM] int 
  7252 ;; Registers used:
  7253 ;;		wreg, status,2, status,0
  7254 ;; Tracked objects:
  7255 ;;		On entry : 0/0
  7256 ;;		On exit  : 0/0
  7257 ;;		Unchanged: 0/0
  7258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;Total ram usage:        8 bytes
  7264 ;; Hardware stack levels used:    1
  7265 ;; Hardware stack levels required when called:    3
  7266 ;; This function calls:
  7267 ;;		Nothing
  7268 ;; This function is called by:
  7269 ;;		_main
  7270 ;;		_Do_LED
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text35
  7275  001050                     __ptext35:
  7276                           	opt stack 0
  7277  001050                     ___awdiv:
  7278                           	opt stack 27
  7279                           
  7280                           ;incstack = 0
  7281  001050  0E00               	movlw	0
  7282  001052  6E1C               	movwf	___awdiv@sign,c
  7283  001054  AE1A               	btfss	___awdiv@divisor+1,7,c
  7284  001056  D007               	goto	l4747
  7285  001058  6C19               	negf	___awdiv@divisor,c
  7286  00105A  1E1A               	comf	___awdiv@divisor+1,f,c
  7287  00105C  B0D8               	btfsc	status,0,c
  7288  00105E  2A1A               	incf	___awdiv@divisor+1,f,c
  7289  001060  0E01               	movlw	1
  7290  001062  6E1C               	movwf	___awdiv@sign,c
  7291  001064  D000               	goto	l4747
  7292  001066                     l4747:
  7293  001066  AE18               	btfss	___awdiv@dividend+1,7,c
  7294  001068  D007               	goto	l4753
  7295  00106A  6C17               	negf	___awdiv@dividend,c
  7296  00106C  1E18               	comf	___awdiv@dividend+1,f,c
  7297  00106E  B0D8               	btfsc	status,0,c
  7298  001070  2A18               	incf	___awdiv@dividend+1,f,c
  7299  001072  0E01               	movlw	1
  7300  001074  1A1C               	xorwf	___awdiv@sign,f,c
  7301  001076  D000               	goto	l4753
  7302  001078                     l4753:
  7303  001078  0E00               	movlw	0
  7304  00107A  6E1E               	movwf	___awdiv@quotient+1,c
  7305  00107C  0E00               	movlw	0
  7306  00107E  6E1D               	movwf	___awdiv@quotient,c
  7307  001080  5019               	movf	___awdiv@divisor,w,c
  7308  001082  101A               	iorwf	___awdiv@divisor+1,w,c
  7309  001084  B4D8               	btfsc	status,2,c
  7310  001086  D021               	goto	l4775
  7311  001088  0E01               	movlw	1
  7312  00108A  6E1B               	movwf	___awdiv@counter,c
  7313  00108C  D005               	goto	l4761
  7314  00108E                     l4759:
  7315  00108E  90D8               	bcf	status,0,c
  7316  001090  3619               	rlcf	___awdiv@divisor,f,c
  7317  001092  361A               	rlcf	___awdiv@divisor+1,f,c
  7318  001094  2A1B               	incf	___awdiv@counter,f,c
  7319  001096  D000               	goto	l4761
  7320  001098                     l4761:
  7321  001098  BE1A               	btfsc	___awdiv@divisor+1,7,c
  7322  00109A  D002               	goto	l4763
  7323  00109C  D7F8               	goto	l4759
  7324  00109E  D000               	goto	l4763
  7325  0010A0                     l4763:
  7326  0010A0  90D8               	bcf	status,0,c
  7327  0010A2  361D               	rlcf	___awdiv@quotient,f,c
  7328  0010A4  361E               	rlcf	___awdiv@quotient+1,f,c
  7329  0010A6  5019               	movf	___awdiv@divisor,w,c
  7330  0010A8  5C17               	subwf	___awdiv@dividend,w,c
  7331  0010AA  501A               	movf	___awdiv@divisor+1,w,c
  7332  0010AC  5818               	subwfb	___awdiv@dividend+1,w,c
  7333  0010AE  A0D8               	btfss	status,0,c
  7334  0010B0  D006               	goto	l4771
  7335  0010B2  5019               	movf	___awdiv@divisor,w,c
  7336  0010B4  5E17               	subwf	___awdiv@dividend,f,c
  7337  0010B6  501A               	movf	___awdiv@divisor+1,w,c
  7338  0010B8  5A18               	subwfb	___awdiv@dividend+1,f,c
  7339  0010BA  801D               	bsf	___awdiv@quotient,0,c
  7340  0010BC  D000               	goto	l4771
  7341  0010BE                     l4771:
  7342  0010BE  90D8               	bcf	status,0,c
  7343  0010C0  321A               	rrcf	___awdiv@divisor+1,f,c
  7344  0010C2  3219               	rrcf	___awdiv@divisor,f,c
  7345  0010C4  2E1B               	decfsz	___awdiv@counter,f,c
  7346  0010C6  D7EC               	goto	l4763
  7347  0010C8  D000               	goto	l4775
  7348  0010CA                     l4775:
  7349  0010CA  501C               	movf	___awdiv@sign,w,c
  7350  0010CC  B4D8               	btfsc	status,2,c
  7351  0010CE  D005               	goto	l4779
  7352  0010D0  6C1D               	negf	___awdiv@quotient,c
  7353  0010D2  1E1E               	comf	___awdiv@quotient+1,f,c
  7354  0010D4  B0D8               	btfsc	status,0,c
  7355  0010D6  2A1E               	incf	___awdiv@quotient+1,f,c
  7356  0010D8  D000               	goto	l4779
  7357  0010DA                     l4779:
  7358  0010DA  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  7359  0010DE  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  7360  0010E2  D000               	goto	l900
  7361  0010E4                     l900:
  7362  0010E4  0012               	return		;funcret
  7363  0010E6                     __end_of___awdiv:
  7364                           	opt stack 0
  7365                           tblptru	equ	0xFF8
  7366                           tblptrh	equ	0xFF7
  7367                           tblptrl	equ	0xFF6
  7368                           tablat	equ	0xFF5
  7369                           prodh	equ	0xFF4
  7370                           prodl	equ	0xFF3
  7371                           intcon	equ	0xFF2
  7372                           intcon2	equ	0xFF1
  7373                           postinc0	equ	0xFEE
  7374                           wreg	equ	0xFE8
  7375                           postdec1	equ	0xFE5
  7376                           fsr1l	equ	0xFE1
  7377                           indf2	equ	0xFDF
  7378                           postinc2	equ	0xFDE
  7379                           postdec2	equ	0xFDD
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384 ;; *************** function _Do_Init *****************
  7385 ;; Defined at:
  7386 ;;		line 161 in file "Lab10_sample_3.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;		None
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;		None
  7391 ;; Return value:  Size  Location     Type
  7392 ;;		None               void
  7393 ;; Registers used:
  7394 ;;		wreg, status,2, status,0, cstack
  7395 ;; Tracked objects:
  7396 ;;		On entry : 0/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;Total ram usage:        0 bytes
  7405 ;; Hardware stack levels used:    1
  7406 ;; Hardware stack levels required when called:    7
  7407 ;; This function calls:
  7408 ;;		_DS1621_Init
  7409 ;;		_I2C_Init
  7410 ;;		_init_INTERRUPT
  7411 ;;		_init_UART
  7412 ;; This function is called by:
  7413 ;;		_main
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           	psect	text36
  7418  001802                     __ptext36:
  7419                           	opt stack 0
  7420  001802                     _Do_Init:
  7421                           	opt stack 23
  7422                           
  7423                           ;Lab10_sample_3.c: 163: init_UART();
  7424                           
  7425                           ;incstack = 0
  7426  001802  EC39  F00D         	call	_init_UART	;wreg free
  7427                           
  7428                           ;Lab10_sample_3.c: 164: OSCCON=0x70;
  7429  001806  0E70               	movlw	112
  7430  001808  6ED3               	movwf	4051,c	;volatile
  7431                           
  7432                           ;Lab10_sample_3.c: 166: ADCON1=0x0F;
  7433  00180A  0E0F               	movlw	15
  7434  00180C  6EC1               	movwf	4033,c	;volatile
  7435                           
  7436                           ;Lab10_sample_3.c: 168: TRISB = 0x01;
  7437  00180E  0E01               	movlw	1
  7438  001810  6E93               	movwf	3987,c	;volatile
  7439                           
  7440                           ;Lab10_sample_3.c: 169: TRISC = 0x00;
  7441  001812  0E00               	movlw	0
  7442  001814  6E94               	movwf	3988,c	;volatile
  7443                           
  7444                           ;Lab10_sample_3.c: 170: TRISD = 0x00;
  7445  001816  0E00               	movlw	0
  7446  001818  6E95               	movwf	3989,c	;volatile
  7447                           
  7448                           ;Lab10_sample_3.c: 171: TRISE = 0x00;
  7449  00181A  0E00               	movlw	0
  7450  00181C  6E96               	movwf	3990,c	;volatile
  7451                           
  7452                           ;Lab10_sample_3.c: 173: RBPU=0;
  7453  00181E  9EF1               	bcf	intcon2,7,c	;volatile
  7454                           
  7455                           ;Lab10_sample_3.c: 174: init_INTERRUPT();
  7456  001820  EC8B  F00C         	call	_init_INTERRUPT	;wreg free
  7457                           
  7458                           ;Lab10_sample_3.c: 175: I2C_Init(100000);
  7459  001824  0EA0               	movlw	160
  7460  001826  6E11               	movwf	I2C_Init@c,c
  7461  001828  0E86               	movlw	134
  7462  00182A  6E12               	movwf	I2C_Init@c+1,c
  7463  00182C  0E01               	movlw	1
  7464  00182E  6E13               	movwf	I2C_Init@c+2,c
  7465  001830  0E00               	movlw	0
  7466  001832  6E14               	movwf	I2C_Init@c+3,c
  7467  001834  EC9C  F00D         	call	_I2C_Init	;wreg free
  7468                           
  7469                           ;Lab10_sample_3.c: 176: DS1621_Init();
  7470  001838  ECED  F00C         	call	_DS1621_Init	;wreg free
  7471  00183C  0012               	return		;funcret
  7472  00183E                     __end_of_Do_Init:
  7473                           	opt stack 0
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           intcon	equ	0xFF2
  7481                           intcon2	equ	0xFF1
  7482                           postinc0	equ	0xFEE
  7483                           wreg	equ	0xFE8
  7484                           postdec1	equ	0xFE5
  7485                           fsr1l	equ	0xFE1
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           fsr2h	equ	0xFDA
  7490                           fsr2l	equ	0xFD9
  7491                           status	equ	0xFD8
  7492                           
  7493 ;; *************** function _init_UART *****************
  7494 ;; Defined at:
  7495 ;;		line 135 in file "Lab10_sample_3.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;		None
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;		None
  7500 ;; Return value:  Size  Location     Type
  7501 ;;		None               void
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, cstack
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;Total ram usage:        0 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:    4
  7516 ;; This function calls:
  7517 ;;		_OpenUSART
  7518 ;; This function is called by:
  7519 ;;		_Do_Init
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           	psect	text37
  7524  001A72                     __ptext37:
  7525                           	opt stack 0
  7526  001A72                     _init_UART:
  7527                           	opt stack 25
  7528                           
  7529                           ;Lab10_sample_3.c: 137: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0
      +                          b11111111 & 0b11111111, 25);
  7530                           
  7531                           ;incstack = 0
  7532  001A72  0E00               	movlw	0
  7533  001A74  6E12               	movwf	OpenUSART@spbrg+1,c
  7534  001A76  0E19               	movlw	25
  7535  001A78  6E11               	movwf	OpenUSART@spbrg,c
  7536  001A7A  0E3C               	movlw	60
  7537  001A7C  ECFB  F009         	call	_OpenUSART
  7538                           
  7539                           ;Lab10_sample_3.c: 138: OSCCON = 0x70;
  7540  001A80  0E70               	movlw	112
  7541  001A82  6ED3               	movwf	4051,c	;volatile
  7542  001A84  0012               	return		;funcret
  7543  001A86                     __end_of_init_UART:
  7544                           	opt stack 0
  7545                           tblptru	equ	0xFF8
  7546                           tblptrh	equ	0xFF7
  7547                           tblptrl	equ	0xFF6
  7548                           tablat	equ	0xFF5
  7549                           prodh	equ	0xFF4
  7550                           prodl	equ	0xFF3
  7551                           intcon	equ	0xFF2
  7552                           intcon2	equ	0xFF1
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           postdec1	equ	0xFE5
  7556                           fsr1l	equ	0xFE1
  7557                           indf2	equ	0xFDF
  7558                           postinc2	equ	0xFDE
  7559                           postdec2	equ	0xFDD
  7560                           fsr2h	equ	0xFDA
  7561                           fsr2l	equ	0xFD9
  7562                           status	equ	0xFD8
  7563                           
  7564 ;; *************** function _OpenUSART *****************
  7565 ;; Defined at:
  7566 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  config          1    wreg     unsigned char 
  7569 ;;  spbrg           2   16[COMRAM] unsigned int 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  config          1   18[COMRAM] unsigned char 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;		None               void
  7574 ;; Registers used:
  7575 ;;		wreg, status,2
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7581 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7582 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;Total ram usage:        3 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    3
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_init_UART
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           	psect	text38
  7596  0013F6                     __ptext38:
  7597                           	opt stack 0
  7598  0013F6                     _OpenUSART:
  7599                           	opt stack 25
  7600                           
  7601                           ;incstack = 0
  7602                           ;OpenUSART@config stored from wreg
  7603  0013F6  6E13               	movwf	OpenUSART@config,c
  7604  0013F8  0E00               	movlw	0
  7605  0013FA  6EAC               	movwf	4012,c	;volatile
  7606  0013FC  0E00               	movlw	0
  7607  0013FE  6EAB               	movwf	4011,c	;volatile
  7608  001400  A013               	btfss	OpenUSART@config,0,c
  7609  001402  D002               	goto	l4503
  7610  001404  88AC               	bsf	4012,4,c	;volatile
  7611  001406  D000               	goto	l4503
  7612  001408                     l4503:
  7613  001408  A213               	btfss	OpenUSART@config,1,c
  7614  00140A  D003               	goto	l4507
  7615  00140C  8CAC               	bsf	4012,6,c	;volatile
  7616  00140E  8CAB               	bsf	4011,6,c	;volatile
  7617  001410  D000               	goto	l4507
  7618  001412                     l4507:
  7619  001412  A413               	btfss	OpenUSART@config,2,c
  7620  001414  D002               	goto	l4511
  7621  001416  8EAC               	bsf	4012,7,c	;volatile
  7622  001418  D000               	goto	l4511
  7623  00141A                     l4511:
  7624  00141A  A613               	btfss	OpenUSART@config,3,c
  7625  00141C  D002               	goto	l695
  7626  00141E  88AB               	bsf	4011,4,c	;volatile
  7627  001420  D002               	goto	l4515
  7628  001422                     l695:
  7629  001422  8AAB               	bsf	4011,5,c	;volatile
  7630  001424  D000               	goto	l4515
  7631  001426                     l4515:
  7632  001426  B813               	btfsc	OpenUSART@config,4,c
  7633  001428  84AC               	bsf	4012,2,c	;volatile
  7634  00142A  989E               	bcf	3998,4,c	;volatile
  7635  00142C  AA13               	btfss	OpenUSART@config,5,c
  7636  00142E  D002               	goto	l4523
  7637  001430  86AB               	bsf	4011,3,c	;volatile
  7638  001432  D000               	goto	l4523
  7639  001434                     l4523:
  7640  001434  AC13               	btfss	OpenUSART@config,6,c
  7641  001436  D002               	goto	l699
  7642  001438  8A9D               	bsf	3997,5,c	;volatile
  7643  00143A  D001               	goto	l700
  7644  00143C                     l699:
  7645  00143C  9A9D               	bcf	3997,5,c	;volatile
  7646  00143E                     l700:
  7647  00143E  9A9E               	bcf	3998,5,c	;volatile
  7648  001440  AE13               	btfss	OpenUSART@config,7,c
  7649  001442  D002               	goto	l701
  7650  001444  889D               	bsf	3997,4,c	;volatile
  7651  001446  D001               	goto	l702
  7652  001448                     l701:
  7653  001448  989D               	bcf	3997,4,c	;volatile
  7654  00144A                     l702:
  7655  00144A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7656  00144E  5012               	movf	OpenUSART@spbrg+1,w,c
  7657  001450  6EB0               	movwf	4016,c	;volatile
  7658  001452  8AAC               	bsf	4012,5,c	;volatile
  7659  001454  8EAB               	bsf	4011,7,c	;volatile
  7660  001456  9C94               	bcf	3988,6,c	;volatile
  7661  001458  8E94               	bsf	3988,7,c	;volatile
  7662  00145A  B8AC               	btfsc	4012,4,c	;volatile
  7663  00145C  BEAC               	btfsc	4012,7,c	;volatile
  7664  00145E  D002               	goto	l704
  7665  001460  8C94               	bsf	3988,6,c	;volatile
  7666  001462  D000               	goto	l704
  7667  001464                     l704:
  7668  001464  0012               	return		;funcret
  7669  001466                     __end_of_OpenUSART:
  7670                           	opt stack 0
  7671                           tblptru	equ	0xFF8
  7672                           tblptrh	equ	0xFF7
  7673                           tblptrl	equ	0xFF6
  7674                           tablat	equ	0xFF5
  7675                           prodh	equ	0xFF4
  7676                           prodl	equ	0xFF3
  7677                           intcon	equ	0xFF2
  7678                           intcon2	equ	0xFF1
  7679                           postinc0	equ	0xFEE
  7680                           wreg	equ	0xFE8
  7681                           postdec1	equ	0xFE5
  7682                           fsr1l	equ	0xFE1
  7683                           indf2	equ	0xFDF
  7684                           postinc2	equ	0xFDE
  7685                           postdec2	equ	0xFDD
  7686                           fsr2h	equ	0xFDA
  7687                           fsr2l	equ	0xFD9
  7688                           status	equ	0xFD8
  7689                           
  7690 ;; *************** function _init_INTERRUPT *****************
  7691 ;; Defined at:
  7692 ;;		line 13 in file "Interrupt.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;		None               void
  7699 ;; Registers used:
  7700 ;;		wreg, status,2
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7710 ;;Total ram usage:        0 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:    3
  7713 ;; This function calls:
  7714 ;;		Nothing
  7715 ;; This function is called by:
  7716 ;;		_Do_Init
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720                           	psect	text39
  7721  001916                     __ptext39:
  7722                           	opt stack 0
  7723  001916                     _init_INTERRUPT:
  7724                           	opt stack 26
  7725                           
  7726                           ;Interrupt.c: 15: INTCONbits.INT0IF = 0;
  7727                           
  7728                           ;incstack = 0
  7729  001916  92F2               	bcf	intcon,1,c	;volatile
  7730                           
  7731                           ;Interrupt.c: 16: INTCON2bits.INTEDG0 = 0;
  7732  001918  9CF1               	bcf	intcon2,6,c	;volatile
  7733                           
  7734                           ;Interrupt.c: 17: INTCONbits.INT0IE = 1;
  7735  00191A  88F2               	bsf	intcon,4,c	;volatile
  7736                           
  7737                           ;Interrupt.c: 18: TMR1H = 0;
  7738  00191C  0E00               	movlw	0
  7739  00191E  6ECF               	movwf	4047,c	;volatile
  7740                           
  7741                           ;Interrupt.c: 19: TMR1L = 0;
  7742  001920  0E00               	movlw	0
  7743  001922  6ECE               	movwf	4046,c	;volatile
  7744                           
  7745                           ;Interrupt.c: 20: PIR1bits.TMR1IF = 0;
  7746  001924  909E               	bcf	3998,0,c	;volatile
  7747                           
  7748                           ;Interrupt.c: 21: PIE1bits.TMR1IE = 1;
  7749  001926  809D               	bsf	3997,0,c	;volatile
  7750                           
  7751                           ;Interrupt.c: 22: INTCONbits.PEIE = 1;
  7752  001928  8CF2               	bsf	intcon,6,c	;volatile
  7753                           
  7754                           ;Interrupt.c: 23: INTCONbits.GIE = 1;
  7755  00192A  8EF2               	bsf	intcon,7,c	;volatile
  7756                           
  7757                           ;Interrupt.c: 24: nec_ok = 0;
  7758  00192C  0E00               	movlw	0
  7759  00192E  6E4D               	movwf	_nec_ok+1,c
  7760  001930  0E00               	movlw	0
  7761  001932  6E4C               	movwf	_nec_ok,c
  7762                           
  7763                           ;Interrupt.c: 25: Nec_code = 0x0;
  7764  001934  0E00               	movlw	0
  7765  001936  6E44               	movwf	_Nec_code,c
  7766  001938  0E00               	movlw	0
  7767  00193A  6E45               	movwf	_Nec_code+1,c
  7768  00193C  0E00               	movlw	0
  7769  00193E  6E46               	movwf	_Nec_code+2,c
  7770  001940  0E00               	movlw	0
  7771  001942  6E47               	movwf	_Nec_code+3,c
  7772  001944  0012               	return		;funcret
  7773  001946                     __end_of_init_INTERRUPT:
  7774                           	opt stack 0
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           prodh	equ	0xFF4
  7780                           prodl	equ	0xFF3
  7781                           intcon	equ	0xFF2
  7782                           intcon2	equ	0xFF1
  7783                           postinc0	equ	0xFEE
  7784                           wreg	equ	0xFE8
  7785                           postdec1	equ	0xFE5
  7786                           fsr1l	equ	0xFE1
  7787                           indf2	equ	0xFDF
  7788                           postinc2	equ	0xFDE
  7789                           postdec2	equ	0xFDD
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function _I2C_Init *****************
  7795 ;; Defined at:
  7796 ;;		line 14 in file "I2C.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  c               4   16[COMRAM] unsigned long 
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;		None
  7801 ;; Return value:  Size  Location     Type
  7802 ;;		None               void
  7803 ;; Registers used:
  7804 ;;		wreg, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;Total ram usage:        4 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    4
  7817 ;; This function calls:
  7818 ;;		_i2cHighScl
  7819 ;;		_i2cHighSda
  7820 ;; This function is called by:
  7821 ;;		_Do_Init
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825                           	psect	text40
  7826  001B38                     __ptext40:
  7827                           	opt stack 0
  7828  001B38                     _I2C_Init:
  7829                           	opt stack 25
  7830                           
  7831                           ;I2C.c: 16: i2cHighScl();
  7832                           
  7833                           ;incstack = 0
  7834  001B38  EC90  F00D         	call	_i2cHighScl	;wreg free
  7835                           
  7836                           ;I2C.c: 17: i2cHighSda();
  7837  001B3C  ECB7  F00D         	call	_i2cHighSda	;wreg free
  7838  001B40  0012               	return		;funcret
  7839  001B42                     __end_of_I2C_Init:
  7840                           	opt stack 0
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           prodh	equ	0xFF4
  7846                           prodl	equ	0xFF3
  7847                           intcon	equ	0xFF2
  7848                           intcon2	equ	0xFF1
  7849                           postinc0	equ	0xFEE
  7850                           wreg	equ	0xFE8
  7851                           postdec1	equ	0xFE5
  7852                           fsr1l	equ	0xFE1
  7853                           indf2	equ	0xFDF
  7854                           postinc2	equ	0xFDE
  7855                           postdec2	equ	0xFDD
  7856                           fsr2h	equ	0xFDA
  7857                           fsr2l	equ	0xFD9
  7858                           status	equ	0xFD8
  7859                           
  7860 ;; *************** function _DS1621_Init *****************
  7861 ;; Defined at:
  7862 ;;		line 21 in file "I2C_Support.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;		None
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;  Device          1   21[COMRAM] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;		None               void
  7869 ;; Registers used:
  7870 ;;		wreg, status,2, status,0, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;Total ram usage:        1 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    6
  7883 ;; This function calls:
  7884 ;;		_I2C_Write_Cmd_Only
  7885 ;;		_I2C_Write_Cmd_Write_Data
  7886 ;; This function is called by:
  7887 ;;		_Do_Init
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           	psect	text41
  7892  0019DA                     __ptext41:
  7893                           	opt stack 0
  7894  0019DA                     _DS1621_Init:
  7895                           	opt stack 23
  7896                           
  7897                           ;I2C_Support.c: 23: char Device = 0x48;
  7898                           
  7899                           ;incstack = 0
  7900  0019DA  0E48               	movlw	72
  7901  0019DC  6E16               	movwf	DS1621_Init@Device,c
  7902                           
  7903                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data(Device,0xAC,0x02);
  7904  0019DE  0EAC               	movlw	172
  7905  0019E0  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7906  0019E2  0E02               	movlw	2
  7907  0019E4  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7908  0019E6  5016               	movf	DS1621_Init@Device,w,c
  7909  0019E8  ECDD  F00C         	call	_I2C_Write_Cmd_Write_Data
  7910                           
  7911                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device,0xEE);
  7912  0019EC  0EEE               	movlw	238
  7913  0019EE  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7914  0019F0  5016               	movf	DS1621_Init@Device,w,c
  7915  0019F2  EC17  F00D         	call	_I2C_Write_Cmd_Only
  7916  0019F6  0012               	return		;funcret
  7917  0019F8                     __end_of_DS1621_Init:
  7918                           	opt stack 0
  7919                           tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           prodh	equ	0xFF4
  7924                           prodl	equ	0xFF3
  7925                           intcon	equ	0xFF2
  7926                           intcon2	equ	0xFF1
  7927                           postinc0	equ	0xFEE
  7928                           wreg	equ	0xFE8
  7929                           postdec1	equ	0xFE5
  7930                           fsr1l	equ	0xFE1
  7931                           indf2	equ	0xFDF
  7932                           postinc2	equ	0xFDE
  7933                           postdec2	equ	0xFDD
  7934                           fsr2h	equ	0xFDA
  7935                           fsr2l	equ	0xFD9
  7936                           status	equ	0xFD8
  7937                           
  7938 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7939 ;; Defined at:
  7940 ;;		line 152 in file "I2C.c"
  7941 ;; Parameters:    Size  Location     Type
  7942 ;;  Device          1    wreg     unsigned char 
  7943 ;;  Cmd             1   18[COMRAM] unsigned char 
  7944 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  Device          1   20[COMRAM] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;		None               void
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7956 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;Total ram usage:        3 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    5
  7963 ;; This function calls:
  7964 ;;		_I2C_Start
  7965 ;;		_I2C_Stop
  7966 ;;		_I2C_Write
  7967 ;; This function is called by:
  7968 ;;		_DS1621_Init
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           	psect	text42
  7973  0019BA                     __ptext42:
  7974                           	opt stack 0
  7975  0019BA                     _I2C_Write_Cmd_Write_Data:
  7976                           	opt stack 23
  7977                           
  7978                           ;incstack = 0
  7979                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7980  0019BA  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7981                           
  7982                           ;I2C.c: 154: I2C_Start();
  7983  0019BC  EC67  F00D         	call	_I2C_Start	;wreg free
  7984                           
  7985                           ;I2C.c: 155: I2C_Write((Device << 1) | 0);
  7986  0019C0  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7987  0019C2  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7988  0019C4  ECE2  F00B         	call	_I2C_Write
  7989                           
  7990                           ;I2C.c: 156: I2C_Write(Cmd);
  7991  0019C8  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7992  0019CA  ECE2  F00B         	call	_I2C_Write
  7993                           
  7994                           ;I2C.c: 157: I2C_Write(Data_Out);
  7995  0019CE  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7996  0019D0  ECE2  F00B         	call	_I2C_Write
  7997                           
  7998                           ;I2C.c: 158: I2C_Stop();
  7999  0019D4  EC5E  F00D         	call	_I2C_Stop	;wreg free
  8000  0019D8  0012               	return		;funcret
  8001  0019DA                     __end_of_I2C_Write_Cmd_Write_Data:
  8002                           	opt stack 0
  8003                           tblptru	equ	0xFF8
  8004                           tblptrh	equ	0xFF7
  8005                           tblptrl	equ	0xFF6
  8006                           tablat	equ	0xFF5
  8007                           prodh	equ	0xFF4
  8008                           prodl	equ	0xFF3
  8009                           intcon	equ	0xFF2
  8010                           intcon2	equ	0xFF1
  8011                           postinc0	equ	0xFEE
  8012                           wreg	equ	0xFE8
  8013                           postdec1	equ	0xFE5
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           postdec2	equ	0xFDD
  8018                           fsr2h	equ	0xFDA
  8019                           fsr2l	equ	0xFD9
  8020                           status	equ	0xFD8
  8021                           
  8022 ;; *************** function _I2C_Write_Cmd_Only *****************
  8023 ;; Defined at:
  8024 ;;		line 144 in file "I2C.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;  Device          1    wreg     unsigned char 
  8027 ;;  Cmd             1   18[COMRAM] unsigned char 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  Device          1   19[COMRAM] unsigned char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;		None               void
  8032 ;; Registers used:
  8033 ;;		wreg, status,2, status,0, cstack
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8039 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;Total ram usage:        2 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    5
  8046 ;; This function calls:
  8047 ;;		_I2C_Start
  8048 ;;		_I2C_Stop
  8049 ;;		_I2C_Write
  8050 ;; This function is called by:
  8051 ;;		_DS1621_Init
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text43
  8056  001A2E                     __ptext43:
  8057                           	opt stack 0
  8058  001A2E                     _I2C_Write_Cmd_Only:
  8059                           	opt stack 23
  8060                           
  8061                           ;incstack = 0
  8062                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8063  001A2E  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8064                           
  8065                           ;I2C.c: 146: I2C_Start();
  8066  001A30  EC67  F00D         	call	_I2C_Start	;wreg free
  8067                           
  8068                           ;I2C.c: 147: I2C_Write((Device << 1) | 0);
  8069  001A34  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8070  001A36  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8071  001A38  ECE2  F00B         	call	_I2C_Write
  8072                           
  8073                           ;I2C.c: 148: I2C_Write(Cmd);
  8074  001A3C  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8075  001A3E  ECE2  F00B         	call	_I2C_Write
  8076                           
  8077                           ;I2C.c: 149: I2C_Stop();
  8078  001A42  EC5E  F00D         	call	_I2C_Stop	;wreg free
  8079  001A46  0012               	return		;funcret
  8080  001A48                     __end_of_I2C_Write_Cmd_Only:
  8081                           	opt stack 0
  8082                           tblptru	equ	0xFF8
  8083                           tblptrh	equ	0xFF7
  8084                           tblptrl	equ	0xFF6
  8085                           tablat	equ	0xFF5
  8086                           prodh	equ	0xFF4
  8087                           prodl	equ	0xFF3
  8088                           intcon	equ	0xFF2
  8089                           intcon2	equ	0xFF1
  8090                           postinc0	equ	0xFEE
  8091                           wreg	equ	0xFE8
  8092                           postdec1	equ	0xFE5
  8093                           fsr1l	equ	0xFE1
  8094                           indf2	equ	0xFDF
  8095                           postinc2	equ	0xFDE
  8096                           postdec2	equ	0xFDD
  8097                           fsr2h	equ	0xFDA
  8098                           fsr2l	equ	0xFD9
  8099                           status	equ	0xFD8
  8100                           
  8101 ;; *************** function _DS3231_Setup_Time *****************
  8102 ;; Defined at:
  8103 ;;		line 69 in file "I2C_Support.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;  Address         1   19[COMRAM] unsigned char 
  8108 ;;  Device          1   18[COMRAM] unsigned char 
  8109 ;; Return value:  Size  Location     Type
  8110 ;;		None               void
  8111 ;; Registers used:
  8112 ;;		wreg, status,2, status,0, cstack
  8113 ;; Tracked objects:
  8114 ;;		On entry : 0/0
  8115 ;;		On exit  : 0/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;Total ram usage:        2 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:    5
  8125 ;; This function calls:
  8126 ;;		_I2C_Start
  8127 ;;		_I2C_Stop
  8128 ;;		_I2C_Write
  8129 ;; This function is called by:
  8130 ;;		_main
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text44
  8135  001466                     __ptext44:
  8136                           	opt stack 0
  8137  001466                     _DS3231_Setup_Time:
  8138                           	opt stack 25
  8139                           
  8140                           ;I2C_Support.c: 71: char Device = 0x68;
  8141                           
  8142                           ;incstack = 0
  8143  001466  0E68               	movlw	104
  8144  001468  6E13               	movwf	DS3231_Setup_Time@Device,c
  8145                           
  8146                           ;I2C_Support.c: 72: char Address = 0x00;
  8147  00146A  0E00               	movlw	0
  8148  00146C  6E14               	movwf	DS3231_Setup_Time@Address,c
  8149                           
  8150                           ;I2C_Support.c: 73: second = 0x00;
  8151  00146E  0E00               	movlw	0
  8152  001470  6E5C               	movwf	_second,c
  8153                           
  8154                           ;I2C_Support.c: 74: minute = 0x00;
  8155  001472  0E00               	movlw	0
  8156  001474  6E6B               	movwf	_minute,c
  8157                           
  8158                           ;I2C_Support.c: 75: hour = 0x19;
  8159  001476  0E19               	movlw	25
  8160  001478  6E6A               	movwf	_hour,c
  8161                           
  8162                           ;I2C_Support.c: 76: dow = 0x05;
  8163  00147A  0E05               	movlw	5
  8164  00147C  6E69               	movwf	_dow,c
  8165                           
  8166                           ;I2C_Support.c: 77: day = 0x28;
  8167  00147E  0E28               	movlw	40
  8168  001480  6E68               	movwf	_day,c
  8169                           
  8170                           ;I2C_Support.c: 78: month = 0x10;
  8171  001482  0E10               	movlw	16
  8172  001484  6E6C               	movwf	_month,c
  8173                           
  8174                           ;I2C_Support.c: 79: year = 0x21;
  8175  001486  0E21               	movlw	33
  8176  001488  6E6F               	movwf	_year,c
  8177                           
  8178                           ;I2C_Support.c: 82: I2C_Start();
  8179  00148A  EC67  F00D         	call	_I2C_Start	;wreg free
  8180                           
  8181                           ;I2C_Support.c: 83: I2C_Write((Device << 1) | 0);
  8182  00148E  5013               	movf	DS3231_Setup_Time@Device,w,c
  8183  001490  2413               	addwf	DS3231_Setup_Time@Device,w,c
  8184  001492  ECE2  F00B         	call	_I2C_Write
  8185                           
  8186                           ;I2C_Support.c: 84: I2C_Write(Address);
  8187  001496  5014               	movf	DS3231_Setup_Time@Address,w,c
  8188  001498  ECE2  F00B         	call	_I2C_Write
  8189                           
  8190                           ;I2C_Support.c: 86: I2C_Write(second);
  8191  00149C  505C               	movf	_second,w,c
  8192  00149E  ECE2  F00B         	call	_I2C_Write
  8193                           
  8194                           ;I2C_Support.c: 87: I2C_Write(minute);
  8195  0014A2  506B               	movf	_minute,w,c
  8196  0014A4  ECE2  F00B         	call	_I2C_Write
  8197                           
  8198                           ;I2C_Support.c: 88: I2C_Write(hour);
  8199  0014A8  506A               	movf	_hour,w,c
  8200  0014AA  ECE2  F00B         	call	_I2C_Write
  8201                           
  8202                           ;I2C_Support.c: 89: I2C_Write(dow);
  8203  0014AE  5069               	movf	_dow,w,c
  8204  0014B0  ECE2  F00B         	call	_I2C_Write
  8205                           
  8206                           ;I2C_Support.c: 90: I2C_Write(day);
  8207  0014B4  5068               	movf	_day,w,c
  8208  0014B6  ECE2  F00B         	call	_I2C_Write
  8209                           
  8210                           ;I2C_Support.c: 91: I2C_Write(month);
  8211  0014BA  506C               	movf	_month,w,c
  8212  0014BC  ECE2  F00B         	call	_I2C_Write
  8213                           
  8214                           ;I2C_Support.c: 92: I2C_Write(year);
  8215  0014C0  506F               	movf	_year,w,c
  8216  0014C2  ECE2  F00B         	call	_I2C_Write
  8217                           
  8218                           ;I2C_Support.c: 94: I2C_Stop();
  8219  0014C6  EC5E  F00D         	call	_I2C_Stop	;wreg free
  8220  0014CA  0012               	return		;funcret
  8221  0014CC                     __end_of_DS3231_Setup_Time:
  8222                           	opt stack 0
  8223                           tblptru	equ	0xFF8
  8224                           tblptrh	equ	0xFF7
  8225                           tblptrl	equ	0xFF6
  8226                           tablat	equ	0xFF5
  8227                           prodh	equ	0xFF4
  8228                           prodl	equ	0xFF3
  8229                           intcon	equ	0xFF2
  8230                           intcon2	equ	0xFF1
  8231                           postinc0	equ	0xFEE
  8232                           wreg	equ	0xFE8
  8233                           postdec1	equ	0xFE5
  8234                           fsr1l	equ	0xFE1
  8235                           indf2	equ	0xFDF
  8236                           postinc2	equ	0xFDE
  8237                           postdec2	equ	0xFDD
  8238                           fsr2h	equ	0xFDA
  8239                           fsr2l	equ	0xFD9
  8240                           status	equ	0xFD8
  8241                           
  8242 ;; *************** function _DS3231_Read_Time *****************
  8243 ;; Defined at:
  8244 ;;		line 45 in file "I2C_Support.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;		None
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  Device          1   20[COMRAM] unsigned char 
  8249 ;;  Address         1   19[COMRAM] unsigned char 
  8250 ;;  Data_Ret        1    0        unsigned char 
  8251 ;; Return value:  Size  Location     Type
  8252 ;;		None               void
  8253 ;; Registers used:
  8254 ;;		wreg, status,2, status,0, cstack
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;Total ram usage:        2 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    6
  8267 ;; This function calls:
  8268 ;;		_I2C_ReStart
  8269 ;;		_I2C_Read
  8270 ;;		_I2C_Start
  8271 ;;		_I2C_Stop
  8272 ;;		_I2C_Write
  8273 ;; This function is called by:
  8274 ;;		_main
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           	psect	text45
  8279  0014CC                     __ptext45:
  8280                           	opt stack 0
  8281  0014CC                     _DS3231_Read_Time:
  8282                           	opt stack 24
  8283                           
  8284                           ;I2C_Support.c: 47: char Device = 0x68;
  8285                           
  8286                           ;incstack = 0
  8287  0014CC  0E68               	movlw	104
  8288  0014CE  6E15               	movwf	DS3231_Read_Time@Device,c
  8289                           
  8290                           ;I2C_Support.c: 48: char Address = 0x00;
  8291  0014D0  0E00               	movlw	0
  8292  0014D2  6E14               	movwf	DS3231_Read_Time@Address,c
  8293                           
  8294                           ;I2C_Support.c: 49: char Data_Ret;
  8295                           ;I2C_Support.c: 50: I2C_Start();
  8296  0014D4  EC67  F00D         	call	_I2C_Start	;wreg free
  8297                           
  8298                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  8299  0014D8  5015               	movf	DS3231_Read_Time@Device,w,c
  8300  0014DA  2415               	addwf	DS3231_Read_Time@Device,w,c
  8301  0014DC  ECE2  F00B         	call	_I2C_Write
  8302                           
  8303                           ;I2C_Support.c: 52: I2C_Write(Address);
  8304  0014E0  5014               	movf	DS3231_Read_Time@Address,w,c
  8305  0014E2  ECE2  F00B         	call	_I2C_Write
  8306                           
  8307                           ;I2C_Support.c: 53: I2C_ReStart();
  8308  0014E6  EC24  F00D         	call	_I2C_ReStart	;wreg free
  8309                           
  8310                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  8311  0014EA  80D8               	bsf	status,0,c
  8312  0014EC  3415               	rlcf	DS3231_Read_Time@Device,w,c
  8313  0014EE  ECE2  F00B         	call	_I2C_Write
  8314                           
  8315                           ;I2C_Support.c: 56: second = I2C_Read(1);
  8316  0014F2  0E01               	movlw	1
  8317  0014F4  EC60  F00B         	call	_I2C_Read
  8318  0014F8  6E5C               	movwf	_second,c
  8319                           
  8320                           ;I2C_Support.c: 57: minute = I2C_Read(1);
  8321  0014FA  0E01               	movlw	1
  8322  0014FC  EC60  F00B         	call	_I2C_Read
  8323  001500  6E6B               	movwf	_minute,c
  8324                           
  8325                           ;I2C_Support.c: 58: hour = I2C_Read(1);
  8326  001502  0E01               	movlw	1
  8327  001504  EC60  F00B         	call	_I2C_Read
  8328  001508  6E6A               	movwf	_hour,c
  8329                           
  8330                           ;I2C_Support.c: 59: dow = I2C_Read(1);
  8331  00150A  0E01               	movlw	1
  8332  00150C  EC60  F00B         	call	_I2C_Read
  8333  001510  6E69               	movwf	_dow,c
  8334                           
  8335                           ;I2C_Support.c: 60: day = I2C_Read(1);
  8336  001512  0E01               	movlw	1
  8337  001514  EC60  F00B         	call	_I2C_Read
  8338  001518  6E68               	movwf	_day,c
  8339                           
  8340                           ;I2C_Support.c: 61: month = I2C_Read(1);
  8341  00151A  0E01               	movlw	1
  8342  00151C  EC60  F00B         	call	_I2C_Read
  8343  001520  6E6C               	movwf	_month,c
  8344                           
  8345                           ;I2C_Support.c: 63: year = I2C_Read(0);
  8346  001522  0E00               	movlw	0
  8347  001524  EC60  F00B         	call	_I2C_Read
  8348  001528  6E6F               	movwf	_year,c
  8349                           
  8350                           ;I2C_Support.c: 65: I2C_Stop();
  8351  00152A  EC5E  F00D         	call	_I2C_Stop	;wreg free
  8352  00152E  0012               	return		;funcret
  8353  001530                     __end_of_DS3231_Read_Time:
  8354                           	opt stack 0
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           intcon	equ	0xFF2
  8362                           intcon2	equ	0xFF1
  8363                           postinc0	equ	0xFEE
  8364                           wreg	equ	0xFE8
  8365                           postdec1	equ	0xFE5
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function _DS1621_Read_Temp *****************
  8375 ;; Defined at:
  8376 ;;		line 29 in file "I2C_Support.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;		None
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;  Device          1   23[COMRAM] unsigned char 
  8381 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  8382 ;;  Cmd             1   21[COMRAM] unsigned char 
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  2   19[COMRAM] int 
  8385 ;; Registers used:
  8386 ;;		wreg, status,2, status,0, cstack
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8392 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;Total ram usage:        5 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    6
  8399 ;; This function calls:
  8400 ;;		_I2C_ReStart
  8401 ;;		_I2C_Read
  8402 ;;		_I2C_Start
  8403 ;;		_I2C_Stop
  8404 ;;		_I2C_Write
  8405 ;; This function is called by:
  8406 ;;		_main
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text46
  8411  00183E                     __ptext46:
  8412                           	opt stack 0
  8413  00183E                     _DS1621_Read_Temp:
  8414                           	opt stack 24
  8415                           
  8416                           ;I2C_Support.c: 31: char Device = 0x48;
  8417                           
  8418                           ;incstack = 0
  8419  00183E  0E48               	movlw	72
  8420  001840  6E18               	movwf	DS1621_Read_Temp@Device,c
  8421                           
  8422                           ;I2C_Support.c: 33: char Cmd = 0xAA;
  8423  001842  0EAA               	movlw	170
  8424  001844  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  8425                           
  8426                           ;I2C_Support.c: 34: char Data_Ret;
  8427                           ;I2C_Support.c: 35: I2C_Start();
  8428  001846  EC67  F00D         	call	_I2C_Start	;wreg free
  8429                           
  8430                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  8431  00184A  5018               	movf	DS1621_Read_Temp@Device,w,c
  8432  00184C  2418               	addwf	DS1621_Read_Temp@Device,w,c
  8433  00184E  ECE2  F00B         	call	_I2C_Write
  8434                           
  8435                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  8436  001852  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  8437  001854  ECE2  F00B         	call	_I2C_Write
  8438                           
  8439                           ;I2C_Support.c: 38: I2C_ReStart();
  8440  001858  EC24  F00D         	call	_I2C_ReStart	;wreg free
  8441                           
  8442                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  8443  00185C  80D8               	bsf	status,0,c
  8444  00185E  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  8445  001860  ECE2  F00B         	call	_I2C_Write
  8446                           
  8447                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  8448  001864  0E00               	movlw	0
  8449  001866  EC60  F00B         	call	_I2C_Read
  8450  00186A  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  8451                           
  8452                           ;I2C_Support.c: 41: I2C_Stop();
  8453  00186C  EC5E  F00D         	call	_I2C_Stop	;wreg free
  8454                           
  8455                           ;I2C_Support.c: 42: return Data_Ret;
  8456  001870  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  8457  001874  6A15               	clrf	?_DS1621_Read_Temp+1,c
  8458  001876  D000               	goto	l322
  8459  001878                     l322:
  8460  001878  0012               	return		;funcret
  8461  00187A                     __end_of_DS1621_Read_Temp:
  8462                           	opt stack 0
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           prodh	equ	0xFF4
  8468                           prodl	equ	0xFF3
  8469                           intcon	equ	0xFF2
  8470                           intcon2	equ	0xFF1
  8471                           postinc0	equ	0xFEE
  8472                           wreg	equ	0xFE8
  8473                           postdec1	equ	0xFE5
  8474                           fsr1l	equ	0xFE1
  8475                           indf2	equ	0xFDF
  8476                           postinc2	equ	0xFDE
  8477                           postdec2	equ	0xFDD
  8478                           fsr2h	equ	0xFDA
  8479                           fsr2l	equ	0xFD9
  8480                           status	equ	0xFD8
  8481                           
  8482 ;; *************** function _I2C_Write *****************
  8483 ;; Defined at:
  8484 ;;		line 41 in file "I2C.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  outByte         1    wreg     unsigned char 
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;  outByte         1   16[COMRAM] unsigned char 
  8489 ;;  n               1   17[COMRAM] unsigned char 
  8490 ;; Return value:  Size  Location     Type
  8491 ;;		None               void
  8492 ;; Registers used:
  8493 ;;		wreg, status,2, status,0, cstack
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;Total ram usage:        2 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    4
  8506 ;; This function calls:
  8507 ;;		_i2cHighScl
  8508 ;;		_i2cHighSda
  8509 ;;		_i2cLowScl
  8510 ;;		_i2cLowSda
  8511 ;; This function is called by:
  8512 ;;		_I2C_Write_Cmd_Only
  8513 ;;		_I2C_Write_Cmd_Write_Data
  8514 ;;		_DS1621_Read_Temp
  8515 ;;		_DS3231_Read_Time
  8516 ;;		_DS3231_Setup_Time
  8517 ;;		_I2C_Write_Address_Read_One_Byte
  8518 ;;		_I2C_Write_Address_Write_One_Byte
  8519 ;;		_I2C_Write_Cmd_Read_One_Byte
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           	psect	text47
  8524  0017C4                     __ptext47:
  8525                           	opt stack 0
  8526  0017C4                     _I2C_Write:
  8527                           	opt stack 23
  8528                           
  8529                           ;incstack = 0
  8530                           ;I2C_Write@outByte stored from wreg
  8531  0017C4  6E11               	movwf	I2C_Write@outByte,c
  8532                           
  8533                           ;I2C.c: 43: unsigned char n;
  8534                           ;I2C.c: 44: for(n=0; n<8; n++)
  8535  0017C6  0E00               	movlw	0
  8536  0017C8  6E12               	movwf	I2C_Write@n,c
  8537  0017CA                     l4235:
  8538  0017CA  0E07               	movlw	7
  8539  0017CC  6412               	cpfsgt	I2C_Write@n,c
  8540  0017CE  D001               	goto	l242
  8541  0017D0  D011               	goto	l4253
  8542  0017D2                     l242:
  8543                           
  8544                           ;I2C.c: 45: {
  8545                           ;I2C.c: 46: if(outByte&0x80) i2cHighSda();
  8546  0017D2  AE11               	btfss	I2C_Write@outByte,7,c
  8547  0017D4  D003               	goto	l4241
  8548  0017D6  ECB7  F00D         	call	_i2cHighSda	;wreg free
  8549  0017DA  D003               	goto	l4243
  8550  0017DC                     l4241:
  8551                           
  8552                           ;I2C.c: 47: else i2cLowSda();
  8553  0017DC  ECA6  F00D         	call	_i2cLowSda	;wreg free
  8554  0017E0  D000               	goto	l4243
  8555  0017E2                     l4243:
  8556                           
  8557                           ;I2C.c: 48: i2cHighScl();
  8558  0017E2  EC90  F00D         	call	_i2cHighScl	;wreg free
  8559                           
  8560                           ;I2C.c: 49: i2cLowScl();
  8561  0017E6  ECB3  F00D         	call	_i2cLowScl	;wreg free
  8562                           
  8563                           ;I2C.c: 50: outByte = outByte << 1;
  8564  0017EA  5011               	movf	I2C_Write@outByte,w,c
  8565  0017EC  2411               	addwf	I2C_Write@outByte,w,c
  8566  0017EE  6E11               	movwf	I2C_Write@outByte,c
  8567  0017F0  2A12               	incf	I2C_Write@n,f,c
  8568  0017F2  D7EB               	goto	l4235
  8569  0017F4                     l4253:
  8570                           
  8571                           ;I2C.c: 51: }
  8572                           ;I2C.c: 52: i2cHighSda();
  8573  0017F4  ECB7  F00D         	call	_i2cHighSda	;wreg free
  8574                           
  8575                           ;I2C.c: 53: i2cHighScl();
  8576  0017F8  EC90  F00D         	call	_i2cHighScl	;wreg free
  8577                           
  8578                           ;I2C.c: 54: i2cLowScl();
  8579  0017FC  ECB3  F00D         	call	_i2cLowScl	;wreg free
  8580  001800  0012               	return		;funcret
  8581  001802                     __end_of_I2C_Write:
  8582                           	opt stack 0
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           prodh	equ	0xFF4
  8588                           prodl	equ	0xFF3
  8589                           intcon	equ	0xFF2
  8590                           intcon2	equ	0xFF1
  8591                           postinc0	equ	0xFEE
  8592                           wreg	equ	0xFE8
  8593                           postdec1	equ	0xFE5
  8594                           fsr1l	equ	0xFE1
  8595                           indf2	equ	0xFDF
  8596                           postinc2	equ	0xFDE
  8597                           postdec2	equ	0xFDD
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _I2C_Stop *****************
  8603 ;; Defined at:
  8604 ;;		line 88 in file "I2C.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;		None
  8609 ;; Return value:  Size  Location     Type
  8610 ;;		None               void
  8611 ;; Registers used:
  8612 ;;		wreg, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;Total ram usage:        0 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    4
  8625 ;; This function calls:
  8626 ;;		_i2cHighScl
  8627 ;;		_i2cHighSda
  8628 ;;		_i2cLowScl
  8629 ;;		_i2cLowSda
  8630 ;; This function is called by:
  8631 ;;		_I2C_Write_Cmd_Only
  8632 ;;		_I2C_Write_Cmd_Write_Data
  8633 ;;		_DS1621_Read_Temp
  8634 ;;		_DS3231_Read_Time
  8635 ;;		_DS3231_Setup_Time
  8636 ;;		_I2C_Write_Address_Read_One_Byte
  8637 ;;		_I2C_Write_Address_Write_One_Byte
  8638 ;;		_I2C_Write_Cmd_Read_One_Byte
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           	psect	text48
  8643  001ABC                     __ptext48:
  8644                           	opt stack 0
  8645  001ABC                     _I2C_Stop:
  8646                           	opt stack 23
  8647                           
  8648                           ;I2C.c: 90: i2cLowScl();
  8649                           
  8650                           ;incstack = 0
  8651  001ABC  ECB3  F00D         	call	_i2cLowScl	;wreg free
  8652                           
  8653                           ;I2C.c: 91: i2cLowSda();
  8654  001AC0  ECA6  F00D         	call	_i2cLowSda	;wreg free
  8655                           
  8656                           ;I2C.c: 92: i2cHighScl();
  8657  001AC4  EC90  F00D         	call	_i2cHighScl	;wreg free
  8658                           
  8659                           ;I2C.c: 93: i2cHighSda();
  8660  001AC8  ECB7  F00D         	call	_i2cHighSda	;wreg free
  8661  001ACC  0012               	return		;funcret
  8662  001ACE                     __end_of_I2C_Stop:
  8663                           	opt stack 0
  8664                           tblptru	equ	0xFF8
  8665                           tblptrh	equ	0xFF7
  8666                           tblptrl	equ	0xFF6
  8667                           tablat	equ	0xFF5
  8668                           prodh	equ	0xFF4
  8669                           prodl	equ	0xFF3
  8670                           intcon	equ	0xFF2
  8671                           intcon2	equ	0xFF1
  8672                           postinc0	equ	0xFEE
  8673                           wreg	equ	0xFE8
  8674                           postdec1	equ	0xFE5
  8675                           fsr1l	equ	0xFE1
  8676                           indf2	equ	0xFDF
  8677                           postinc2	equ	0xFDE
  8678                           postdec2	equ	0xFDD
  8679                           fsr2h	equ	0xFDA
  8680                           fsr2l	equ	0xFD9
  8681                           status	equ	0xFD8
  8682                           
  8683 ;; *************** function _I2C_Start *****************
  8684 ;; Defined at:
  8685 ;;		line 71 in file "I2C.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;		None
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;		None               void
  8692 ;; Registers used:
  8693 ;;		wreg, cstack
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;Total ram usage:        0 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:    4
  8706 ;; This function calls:
  8707 ;;		_i2cHighScl
  8708 ;;		_i2cHighSda
  8709 ;;		_i2cLowScl
  8710 ;;		_i2cLowSda
  8711 ;; This function is called by:
  8712 ;;		_I2C_Write_Cmd_Only
  8713 ;;		_I2C_Write_Cmd_Write_Data
  8714 ;;		_DS1621_Read_Temp
  8715 ;;		_DS3231_Read_Time
  8716 ;;		_DS3231_Setup_Time
  8717 ;;		_I2C_Write_Address_Read_One_Byte
  8718 ;;		_I2C_Write_Address_Write_One_Byte
  8719 ;;		_I2C_Write_Cmd_Read_One_Byte
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text49
  8724  001ACE                     __ptext49:
  8725                           	opt stack 0
  8726  001ACE                     _I2C_Start:
  8727                           	opt stack 23
  8728                           
  8729                           ;I2C.c: 73: i2cHighSda();
  8730                           
  8731                           ;incstack = 0
  8732  001ACE  ECB7  F00D         	call	_i2cHighSda	;wreg free
  8733                           
  8734                           ;I2C.c: 74: i2cHighScl();
  8735  001AD2  EC90  F00D         	call	_i2cHighScl	;wreg free
  8736                           
  8737                           ;I2C.c: 75: i2cLowSda();
  8738  001AD6  ECA6  F00D         	call	_i2cLowSda	;wreg free
  8739                           
  8740                           ;I2C.c: 76: i2cLowScl();
  8741  001ADA  ECB3  F00D         	call	_i2cLowScl	;wreg free
  8742  001ADE  0012               	return		;funcret
  8743  001AE0                     __end_of_I2C_Start:
  8744                           	opt stack 0
  8745                           tblptru	equ	0xFF8
  8746                           tblptrh	equ	0xFF7
  8747                           tblptrl	equ	0xFF6
  8748                           tablat	equ	0xFF5
  8749                           prodh	equ	0xFF4
  8750                           prodl	equ	0xFF3
  8751                           intcon	equ	0xFF2
  8752                           intcon2	equ	0xFF1
  8753                           postinc0	equ	0xFEE
  8754                           wreg	equ	0xFE8
  8755                           postdec1	equ	0xFE5
  8756                           fsr1l	equ	0xFE1
  8757                           indf2	equ	0xFDF
  8758                           postinc2	equ	0xFDE
  8759                           postdec2	equ	0xFDD
  8760                           fsr2h	equ	0xFDA
  8761                           fsr2l	equ	0xFD9
  8762                           status	equ	0xFD8
  8763                           
  8764 ;; *************** function _I2C_Read *****************
  8765 ;; Defined at:
  8766 ;;		line 20 in file "I2C.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  ack             1    wreg     unsigned char 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  ack             1   16[COMRAM] unsigned char 
  8771 ;;  inByte          1   18[COMRAM] unsigned char 
  8772 ;;  n               1   17[COMRAM] unsigned char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      unsigned char 
  8775 ;; Registers used:
  8776 ;;		wreg, status,2, status,0, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8783 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;Total ram usage:        3 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    5
  8789 ;; This function calls:
  8790 ;;		_i2cAck
  8791 ;;		_i2cHighScl
  8792 ;;		_i2cHighSda
  8793 ;;		_i2cLowScl
  8794 ;;		_i2cNack
  8795 ;; This function is called by:
  8796 ;;		_DS1621_Read_Temp
  8797 ;;		_DS3231_Read_Time
  8798 ;;		_I2C_Write_Address_Read_One_Byte
  8799 ;;		_I2C_Write_Cmd_Read_One_Byte
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text50
  8804  0016C0                     __ptext50:
  8805                           	opt stack 0
  8806  0016C0                     _I2C_Read:
  8807                           	opt stack 24
  8808                           
  8809                           ;incstack = 0
  8810                           ;I2C_Read@ack stored from wreg
  8811  0016C0  6E11               	movwf	I2C_Read@ack,c
  8812                           
  8813                           ;I2C.c: 22: unsigned char inByte, n;
  8814                           ;I2C.c: 23: i2cHighSda();
  8815  0016C2  ECB7  F00D         	call	_i2cHighSda	;wreg free
  8816                           
  8817                           ;I2C.c: 24: for (n=0; n<8; n++)
  8818  0016C6  0E00               	movlw	0
  8819  0016C8  6E12               	movwf	I2C_Read@n,c
  8820  0016CA                     l4647:
  8821  0016CA  0E07               	movlw	7
  8822  0016CC  6412               	cpfsgt	I2C_Read@n,c
  8823  0016CE  D001               	goto	l4651
  8824  0016D0  D00F               	goto	l4665
  8825  0016D2                     l4651:
  8826                           
  8827                           ;I2C.c: 25: {
  8828                           ;I2C.c: 26: i2cHighScl();
  8829  0016D2  EC90  F00D         	call	_i2cHighScl	;wreg free
  8830                           
  8831                           ;I2C.c: 28: if (PORTDbits.RD1)
  8832  0016D6  A283               	btfss	3971,1,c	;volatile
  8833  0016D8  D003               	goto	l4657
  8834                           
  8835                           ;I2C.c: 29: inByte = (inByte << 1) | 0x01;
  8836  0016DA  80D8               	bsf	status,0,c
  8837  0016DC  3613               	rlcf	I2C_Read@inByte,f,c
  8838  0016DE  D004               	goto	l4659
  8839  0016E0                     l4657:
  8840                           
  8841                           ;I2C.c: 30: else
  8842                           ;I2C.c: 31: inByte = inByte << 1;
  8843  0016E0  5013               	movf	I2C_Read@inByte,w,c
  8844  0016E2  2413               	addwf	I2C_Read@inByte,w,c
  8845  0016E4  6E13               	movwf	I2C_Read@inByte,c
  8846  0016E6  D000               	goto	l4659
  8847  0016E8                     l4659:
  8848                           
  8849                           ;I2C.c: 32: i2cLowScl();
  8850  0016E8  ECB3  F00D         	call	_i2cLowScl	;wreg free
  8851  0016EC  2A12               	incf	I2C_Read@n,f,c
  8852  0016EE  D7ED               	goto	l4647
  8853  0016F0                     l4665:
  8854                           
  8855                           ;I2C.c: 33: }
  8856                           ;I2C.c: 34: if (ack) i2cAck();
  8857  0016F0  5011               	movf	I2C_Read@ack,w,c
  8858  0016F2  B4D8               	btfsc	status,2,c
  8859  0016F4  D003               	goto	l4669
  8860  0016F6  EC70  F00D         	call	_i2cAck	;wreg free
  8861  0016FA  D003               	goto	l4671
  8862  0016FC                     l4669:
  8863                           
  8864                           ;I2C.c: 35: else i2cNack();
  8865  0016FC  ECA1  F00D         	call	_i2cNack	;wreg free
  8866  001700  D000               	goto	l4671
  8867  001702                     l4671:
  8868                           
  8869                           ;I2C.c: 38: return(inByte);
  8870  001702  5013               	movf	I2C_Read@inByte,w,c
  8871  001704  D000               	goto	l239
  8872  001706                     l239:
  8873  001706  0012               	return		;funcret
  8874  001708                     __end_of_I2C_Read:
  8875                           	opt stack 0
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           intcon	equ	0xFF2
  8883                           intcon2	equ	0xFF1
  8884                           postinc0	equ	0xFEE
  8885                           wreg	equ	0xFE8
  8886                           postdec1	equ	0xFE5
  8887                           fsr1l	equ	0xFE1
  8888                           indf2	equ	0xFDF
  8889                           postinc2	equ	0xFDE
  8890                           postdec2	equ	0xFDD
  8891                           fsr2h	equ	0xFDA
  8892                           fsr2l	equ	0xFD9
  8893                           status	equ	0xFD8
  8894                           
  8895 ;; *************** function _i2cNack *****************
  8896 ;; Defined at:
  8897 ;;		line 57 in file "I2C.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;		None
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;		None
  8902 ;; Return value:  Size  Location     Type
  8903 ;;		None               void
  8904 ;; Registers used:
  8905 ;;		wreg, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;Total ram usage:        0 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    4
  8918 ;; This function calls:
  8919 ;;		_i2cHighScl
  8920 ;;		_i2cLowScl
  8921 ;; This function is called by:
  8922 ;;		_I2C_Read
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           	psect	text51
  8927  001B42                     __ptext51:
  8928                           	opt stack 0
  8929  001B42                     _i2cNack:
  8930                           	opt stack 24
  8931                           
  8932                           ;I2C.c: 59: i2cHighScl();
  8933                           
  8934                           ;incstack = 0
  8935  001B42  EC90  F00D         	call	_i2cHighScl	;wreg free
  8936                           
  8937                           ;I2C.c: 60: i2cLowScl();
  8938  001B46  ECB3  F00D         	call	_i2cLowScl	;wreg free
  8939  001B4A  0012               	return		;funcret
  8940  001B4C                     __end_of_i2cNack:
  8941                           	opt stack 0
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           intcon	equ	0xFF2
  8949                           intcon2	equ	0xFF1
  8950                           postinc0	equ	0xFEE
  8951                           wreg	equ	0xFE8
  8952                           postdec1	equ	0xFE5
  8953                           fsr1l	equ	0xFE1
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           postdec2	equ	0xFDD
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           
  8961 ;; *************** function _i2cAck *****************
  8962 ;; Defined at:
  8963 ;;		line 63 in file "I2C.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;		None
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;		None
  8968 ;; Return value:  Size  Location     Type
  8969 ;;		None               void
  8970 ;; Registers used:
  8971 ;;		wreg, cstack
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;Total ram usage:        0 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:    4
  8984 ;; This function calls:
  8985 ;;		_i2cHighScl
  8986 ;;		_i2cHighSda
  8987 ;;		_i2cLowScl
  8988 ;;		_i2cLowSda
  8989 ;; This function is called by:
  8990 ;;		_I2C_Read
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           	psect	text52
  8995  001AE0                     __ptext52:
  8996                           	opt stack 0
  8997  001AE0                     _i2cAck:
  8998                           	opt stack 24
  8999                           
  9000                           ;I2C.c: 65: i2cLowSda();
  9001                           
  9002                           ;incstack = 0
  9003  001AE0  ECA6  F00D         	call	_i2cLowSda	;wreg free
  9004                           
  9005                           ;I2C.c: 66: i2cHighScl();
  9006  001AE4  EC90  F00D         	call	_i2cHighScl	;wreg free
  9007                           
  9008                           ;I2C.c: 67: i2cLowScl();
  9009  001AE8  ECB3  F00D         	call	_i2cLowScl	;wreg free
  9010                           
  9011                           ;I2C.c: 68: i2cHighSda();
  9012  001AEC  ECB7  F00D         	call	_i2cHighSda	;wreg free
  9013  001AF0  0012               	return		;funcret
  9014  001AF2                     __end_of_i2cAck:
  9015                           	opt stack 0
  9016                           tblptru	equ	0xFF8
  9017                           tblptrh	equ	0xFF7
  9018                           tblptrl	equ	0xFF6
  9019                           tablat	equ	0xFF5
  9020                           prodh	equ	0xFF4
  9021                           prodl	equ	0xFF3
  9022                           intcon	equ	0xFF2
  9023                           intcon2	equ	0xFF1
  9024                           postinc0	equ	0xFEE
  9025                           wreg	equ	0xFE8
  9026                           postdec1	equ	0xFE5
  9027                           fsr1l	equ	0xFE1
  9028                           indf2	equ	0xFDF
  9029                           postinc2	equ	0xFDE
  9030                           postdec2	equ	0xFDD
  9031                           fsr2h	equ	0xFDA
  9032                           fsr2l	equ	0xFD9
  9033                           status	equ	0xFD8
  9034                           
  9035 ;; *************** function _I2C_ReStart *****************
  9036 ;; Defined at:
  9037 ;;		line 79 in file "I2C.c"
  9038 ;; Parameters:    Size  Location     Type
  9039 ;;		None
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;		None
  9042 ;; Return value:  Size  Location     Type
  9043 ;;		None               void
  9044 ;; Registers used:
  9045 ;;		wreg, cstack
  9046 ;; Tracked objects:
  9047 ;;		On entry : 0/0
  9048 ;;		On exit  : 0/0
  9049 ;;		Unchanged: 0/0
  9050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;Total ram usage:        0 bytes
  9056 ;; Hardware stack levels used:    1
  9057 ;; Hardware stack levels required when called:    4
  9058 ;; This function calls:
  9059 ;;		_i2cHighScl
  9060 ;;		_i2cHighSda
  9061 ;;		_i2cLowScl
  9062 ;;		_i2cLowSda
  9063 ;; This function is called by:
  9064 ;;		_DS1621_Read_Temp
  9065 ;;		_DS3231_Read_Time
  9066 ;;		_I2C_Write_Address_Read_One_Byte
  9067 ;;		_I2C_Write_Cmd_Read_One_Byte
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           	psect	text53
  9072  001A48                     __ptext53:
  9073                           	opt stack 0
  9074  001A48                     _I2C_ReStart:
  9075                           	opt stack 25
  9076                           
  9077                           ;I2C.c: 81: i2cLowScl();
  9078                           
  9079                           ;incstack = 0
  9080  001A48  ECB3  F00D         	call	_i2cLowScl	;wreg free
  9081                           
  9082                           ;I2C.c: 82: i2cHighSda();
  9083  001A4C  ECB7  F00D         	call	_i2cHighSda	;wreg free
  9084                           
  9085                           ;I2C.c: 83: i2cHighScl();
  9086  001A50  EC90  F00D         	call	_i2cHighScl	;wreg free
  9087                           
  9088                           ;I2C.c: 84: i2cLowSda();
  9089  001A54  ECA6  F00D         	call	_i2cLowSda	;wreg free
  9090                           
  9091                           ;I2C.c: 85: i2cLowScl();
  9092  001A58  ECB3  F00D         	call	_i2cLowScl	;wreg free
  9093  001A5C  0012               	return		;funcret
  9094  001A5E                     __end_of_I2C_ReStart:
  9095                           	opt stack 0
  9096                           tblptru	equ	0xFF8
  9097                           tblptrh	equ	0xFF7
  9098                           tblptrl	equ	0xFF6
  9099                           tablat	equ	0xFF5
  9100                           prodh	equ	0xFF4
  9101                           prodl	equ	0xFF3
  9102                           intcon	equ	0xFF2
  9103                           intcon2	equ	0xFF1
  9104                           postinc0	equ	0xFEE
  9105                           wreg	equ	0xFE8
  9106                           postdec1	equ	0xFE5
  9107                           fsr1l	equ	0xFE1
  9108                           indf2	equ	0xFDF
  9109                           postinc2	equ	0xFDE
  9110                           postdec2	equ	0xFDD
  9111                           fsr2h	equ	0xFDA
  9112                           fsr2l	equ	0xFD9
  9113                           status	equ	0xFD8
  9114                           
  9115 ;; *************** function _i2cLowSda *****************
  9116 ;; Defined at:
  9117 ;;		line 102 in file "I2C.c"
  9118 ;; Parameters:    Size  Location     Type
  9119 ;;		None
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;		None
  9122 ;; Return value:  Size  Location     Type
  9123 ;;		None               void
  9124 ;; Registers used:
  9125 ;;		None
  9126 ;; Tracked objects:
  9127 ;;		On entry : 0/0
  9128 ;;		On exit  : 0/0
  9129 ;;		Unchanged: 0/0
  9130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;Total ram usage:        0 bytes
  9136 ;; Hardware stack levels used:    1
  9137 ;; Hardware stack levels required when called:    3
  9138 ;; This function calls:
  9139 ;;		Nothing
  9140 ;; This function is called by:
  9141 ;;		_I2C_Write
  9142 ;;		_i2cAck
  9143 ;;		_I2C_Start
  9144 ;;		_I2C_ReStart
  9145 ;;		_I2C_Stop
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           	psect	text54
  9150  001B4C                     __ptext54:
  9151                           	opt stack 0
  9152  001B4C                     _i2cLowSda:
  9153                           	opt stack 23
  9154                           
  9155                           ;I2C.c: 104: PORTDbits.RD1 = 0;
  9156                           
  9157                           ;incstack = 0
  9158  001B4C  9283               	bcf	3971,1,c	;volatile
  9159                           
  9160                           ;I2C.c: 105: TRISDbits.RD1 = 0;
  9161  001B4E  9295               	bcf	3989,1,c	;volatile
  9162                           
  9163                           ;I2C.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9164  001B50  D000               	nop2		;2 cycle nop
  9165  001B52  D000               	nop2		;2 cycle nop
  9166  001B54  0012               	return		;funcret
  9167  001B56                     __end_of_i2cLowSda:
  9168                           	opt stack 0
  9169                           tblptru	equ	0xFF8
  9170                           tblptrh	equ	0xFF7
  9171                           tblptrl	equ	0xFF6
  9172                           tablat	equ	0xFF5
  9173                           prodh	equ	0xFF4
  9174                           prodl	equ	0xFF3
  9175                           intcon	equ	0xFF2
  9176                           intcon2	equ	0xFF1
  9177                           postinc0	equ	0xFEE
  9178                           wreg	equ	0xFE8
  9179                           postdec1	equ	0xFE5
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           fsr2h	equ	0xFDA
  9185                           fsr2l	equ	0xFD9
  9186                           status	equ	0xFD8
  9187                           
  9188 ;; *************** function _i2cLowScl *****************
  9189 ;; Defined at:
  9190 ;;		line 115 in file "I2C.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;		None
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;		None
  9195 ;; Return value:  Size  Location     Type
  9196 ;;		None               void
  9197 ;; Registers used:
  9198 ;;		None
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;Total ram usage:        0 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    3
  9211 ;; This function calls:
  9212 ;;		Nothing
  9213 ;; This function is called by:
  9214 ;;		_I2C_Read
  9215 ;;		_I2C_Write
  9216 ;;		_i2cNack
  9217 ;;		_i2cAck
  9218 ;;		_I2C_Start
  9219 ;;		_I2C_ReStart
  9220 ;;		_I2C_Stop
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           	psect	text55
  9225  001B66                     __ptext55:
  9226                           	opt stack 0
  9227  001B66                     _i2cLowScl:
  9228                           	opt stack 23
  9229                           
  9230                           ;I2C.c: 117: PORTDbits.RD0 = 0;
  9231                           
  9232                           ;incstack = 0
  9233  001B66  9083               	bcf	3971,0,c	;volatile
  9234                           
  9235                           ;I2C.c: 118: TRISDbits.RD0 = 0;
  9236  001B68  9095               	bcf	3989,0,c	;volatile
  9237                           
  9238                           ;I2C.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9239  001B6A  D000               	nop2		;2 cycle nop
  9240  001B6C  0012               	return		;funcret
  9241  001B6E                     __end_of_i2cLowScl:
  9242                           	opt stack 0
  9243                           tblptru	equ	0xFF8
  9244                           tblptrh	equ	0xFF7
  9245                           tblptrl	equ	0xFF6
  9246                           tablat	equ	0xFF5
  9247                           prodh	equ	0xFF4
  9248                           prodl	equ	0xFF3
  9249                           intcon	equ	0xFF2
  9250                           intcon2	equ	0xFF1
  9251                           postinc0	equ	0xFEE
  9252                           wreg	equ	0xFE8
  9253                           postdec1	equ	0xFE5
  9254                           fsr1l	equ	0xFE1
  9255                           indf2	equ	0xFDF
  9256                           postinc2	equ	0xFDE
  9257                           postdec2	equ	0xFDD
  9258                           fsr2h	equ	0xFDA
  9259                           fsr2l	equ	0xFD9
  9260                           status	equ	0xFD8
  9261                           
  9262 ;; *************** function _i2cHighSda *****************
  9263 ;; Defined at:
  9264 ;;		line 96 in file "I2C.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;		None
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;		None
  9269 ;; Return value:  Size  Location     Type
  9270 ;;		None               void
  9271 ;; Registers used:
  9272 ;;		None
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;Total ram usage:        0 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    3
  9285 ;; This function calls:
  9286 ;;		Nothing
  9287 ;; This function is called by:
  9288 ;;		_I2C_Init
  9289 ;;		_I2C_Read
  9290 ;;		_I2C_Write
  9291 ;;		_i2cAck
  9292 ;;		_I2C_Start
  9293 ;;		_I2C_ReStart
  9294 ;;		_I2C_Stop
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text56
  9299  001B6E                     __ptext56:
  9300                           	opt stack 0
  9301  001B6E                     _i2cHighSda:
  9302                           	opt stack 25
  9303                           
  9304                           ;I2C.c: 98: TRISDbits.RD1 = 1;
  9305                           
  9306                           ;incstack = 0
  9307  001B6E  8295               	bsf	3989,1,c	;volatile
  9308                           
  9309                           ;I2C.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9310  001B70  D000               	nop2		;2 cycle nop
  9311  001B72  D000               	nop2		;2 cycle nop
  9312  001B74  0012               	return		;funcret
  9313  001B76                     __end_of_i2cHighSda:
  9314                           	opt stack 0
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           intcon	equ	0xFF2
  9322                           intcon2	equ	0xFF1
  9323                           postinc0	equ	0xFEE
  9324                           wreg	equ	0xFE8
  9325                           postdec1	equ	0xFE5
  9326                           fsr1l	equ	0xFE1
  9327                           indf2	equ	0xFDF
  9328                           postinc2	equ	0xFDE
  9329                           postdec2	equ	0xFDD
  9330                           fsr2h	equ	0xFDA
  9331                           fsr2l	equ	0xFD9
  9332                           status	equ	0xFD8
  9333                           
  9334 ;; *************** function _i2cHighScl *****************
  9335 ;; Defined at:
  9336 ;;		line 109 in file "I2C.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;		None
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;		None
  9341 ;; Return value:  Size  Location     Type
  9342 ;;		None               void
  9343 ;; Registers used:
  9344 ;;		wreg
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9354 ;;Total ram usage:        0 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; Hardware stack levels required when called:    3
  9357 ;; This function calls:
  9358 ;;		Nothing
  9359 ;; This function is called by:
  9360 ;;		_I2C_Init
  9361 ;;		_I2C_Read
  9362 ;;		_I2C_Write
  9363 ;;		_i2cNack
  9364 ;;		_i2cAck
  9365 ;;		_I2C_Start
  9366 ;;		_I2C_ReStart
  9367 ;;		_I2C_Stop
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           	psect	text57
  9372  001B20                     __ptext57:
  9373                           	opt stack 0
  9374  001B20                     _i2cHighScl:
  9375                           	opt stack 25
  9376                           
  9377                           ;I2C.c: 111: TRISDbits.RD0 = 1;
  9378                           
  9379                           ;incstack = 0
  9380  001B20  8095               	bsf	3989,0,c	;volatile
  9381                           
  9382                           ;I2C.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9383  001B22  0E06               	movlw	6
  9384  001B24                     u3987:
  9385  001B24  2EE8               	decfsz	wreg,f,c
  9386  001B26  D7FE               	goto	u3987
  9387  001B28  D000               	nop2		;nop
  9388  001B2A  0012               	return		;funcret
  9389  001B2C                     __end_of_i2cHighScl:
  9390                           	opt stack 0
  9391                           tblptru	equ	0xFF8
  9392                           tblptrh	equ	0xFF7
  9393                           tblptrl	equ	0xFF6
  9394                           tablat	equ	0xFF5
  9395                           prodh	equ	0xFF4
  9396                           prodl	equ	0xFF3
  9397                           intcon	equ	0xFF2
  9398                           intcon2	equ	0xFF1
  9399                           postinc0	equ	0xFEE
  9400                           wreg	equ	0xFE8
  9401                           postdec1	equ	0xFE5
  9402                           fsr1l	equ	0xFE1
  9403                           indf2	equ	0xFDF
  9404                           postinc2	equ	0xFDE
  9405                           postdec2	equ	0xFDD
  9406                           fsr2h	equ	0xFDA
  9407                           fsr2l	equ	0xFD9
  9408                           status	equ	0xFD8
  9409                           
  9410 ;; *************** function _chkisr *****************
  9411 ;; Defined at:
  9412 ;;		line 28 in file "Interrupt.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;		None
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;		None
  9417 ;; Return value:  Size  Location     Type
  9418 ;;		None               void
  9419 ;; Registers used:
  9420 ;;		wreg, status,2, status,0, cstack
  9421 ;; Tracked objects:
  9422 ;;		On entry : 0/0
  9423 ;;		On exit  : 0/0
  9424 ;;		Unchanged: 0/0
  9425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9429 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9430 ;;Total ram usage:       14 bytes
  9431 ;; Hardware stack levels used:    1
  9432 ;; Hardware stack levels required when called:    2
  9433 ;; This function calls:
  9434 ;;		_INT0_isr
  9435 ;;		_TIMER1_isr
  9436 ;; This function is called by:
  9437 ;;		Interrupt level 2
  9438 ;; This function uses a non-reentrant model
  9439 ;;
  9440                           
  9441                           	psect	intcode
  9442  000008                     __pintcode:
  9443                           	opt stack 0
  9444  000008                     _chkisr:
  9445                           	opt stack 20
  9446                           
  9447                           ;incstack = 0
  9448  000008  CFFA F003          	movff	pclath,??_chkisr
  9449  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9450  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9451  000014  ED85  F009         	call	int_func,f	;refresh shadow registers
  9452                           pclatu	equ	0xFFB
  9453                           pclath	equ	0xFFA
  9454                           tblptru	equ	0xFF8
  9455                           tblptrh	equ	0xFF7
  9456                           tblptrl	equ	0xFF6
  9457                           tablat	equ	0xFF5
  9458                           prodh	equ	0xFF4
  9459                           prodl	equ	0xFF3
  9460                           intcon	equ	0xFF2
  9461                           intcon2	equ	0xFF1
  9462                           postinc0	equ	0xFEE
  9463                           fsr0l	equ	0xFE9
  9464                           wreg	equ	0xFE8
  9465                           postdec1	equ	0xFE5
  9466                           fsr1l	equ	0xFE1
  9467                           indf2	equ	0xFDF
  9468                           postinc2	equ	0xFDE
  9469                           postdec2	equ	0xFDD
  9470                           fsr2h	equ	0xFDA
  9471                           fsr2l	equ	0xFD9
  9472                           status	equ	0xFD8
  9473                           
  9474                           	psect	intcode_body
  9475  00130A                     __pintcode_body:
  9476                           	opt stack 20
  9477  00130A                     int_func:
  9478                           	opt stack 20
  9479  00130A  0006               	pop		; remove dummy address from shadow register refresh
  9480  00130C  CFEA F006          	movff	fsr0h,??_chkisr+3
  9481  001310  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9482  001314  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9483  001318  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9484  00131C  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9485  001320  CFF3 F00B          	movff	prodl,??_chkisr+8
  9486  001324  CFF4 F00C          	movff	prodh,??_chkisr+9
  9487  001328  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9488  00132C  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9489  001330  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9490  001334  CFF5 F010          	movff	tablat,??_chkisr+13
  9491                           
  9492                           ;Interrupt.c: 30: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9493  001338  A09E               	btfss	3998,0,c	;volatile
  9494  00133A  D003               	goto	i2l2703
  9495  00133C  EC96  F00D         	call	_TIMER1_isr	;wreg free
  9496  001340  D000               	goto	i2l2703
  9497  001342                     i2l2703:
  9498                           
  9499                           ;Interrupt.c: 31: if (INTCONbits.INT0IF == 1) INT0_isr();
  9500  001342  A2F2               	btfss	intcon,1,c	;volatile
  9501  001344  D003               	goto	i2l366
  9502  001346  ECEE  F004         	call	_INT0_isr	;wreg free
  9503  00134A  D000               	goto	i2l366
  9504  00134C                     i2l366:
  9505  00134C  C010  FFF5         	movff	??_chkisr+13,tablat
  9506  001350  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9507  001354  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9508  001358  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9509  00135C  C00C  FFF4         	movff	??_chkisr+9,prodh
  9510  001360  C00B  FFF3         	movff	??_chkisr+8,prodl
  9511  001364  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9512  001368  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9513  00136C  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9514  001370  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9515  001374  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9516  001378  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9517  00137C  C004  FFFB         	movff	??_chkisr+1,pclatu
  9518  001380  C003  FFFA         	movff	??_chkisr,pclath
  9519  001384  0011               	retfie		f
  9520  001386                     __end_of_chkisr:
  9521                           	opt stack 0
  9522                           pclatu	equ	0xFFB
  9523                           pclath	equ	0xFFA
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           intcon	equ	0xFF2
  9531                           intcon2	equ	0xFF1
  9532                           postinc0	equ	0xFEE
  9533                           fsr0h	equ	0xFEA
  9534                           fsr0l	equ	0xFE9
  9535                           wreg	equ	0xFE8
  9536                           postdec1	equ	0xFE5
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           fsr2h	equ	0xFDA
  9543                           fsr2l	equ	0xFD9
  9544                           status	equ	0xFD8
  9545                           
  9546 ;; *************** function _TIMER1_isr *****************
  9547 ;; Defined at:
  9548 ;;		line 34 in file "Interrupt.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;		None
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;		None
  9553 ;; Return value:  Size  Location     Type
  9554 ;;		None               void
  9555 ;; Registers used:
  9556 ;;		wreg, status,2
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;Total ram usage:        0 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_chkisr
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text59
  9576  001B2C                     __ptext59:
  9577                           	opt stack 0
  9578  001B2C                     _TIMER1_isr:
  9579                           	opt stack 21
  9580                           
  9581                           ;Interrupt.c: 36: Nec_state = 0;
  9582                           
  9583                           ;incstack = 0
  9584  001B2C  0E00               	movlw	0
  9585  001B2E  6E51               	movwf	_Nec_state,c
  9586                           
  9587                           ;Interrupt.c: 37: INTCON2bits.INTEDG0 = 0;
  9588  001B30  9CF1               	bcf	intcon2,6,c	;volatile
  9589                           
  9590                           ;Interrupt.c: 38: T1CONbits.TMR1ON = 0;
  9591  001B32  90CD               	bcf	4045,0,c	;volatile
  9592                           
  9593                           ;Interrupt.c: 39: PIR1bits.TMR1IF = 0;
  9594  001B34  909E               	bcf	3998,0,c	;volatile
  9595  001B36  0012               	return		;funcret
  9596  001B38                     __end_of_TIMER1_isr:
  9597                           	opt stack 0
  9598                           pclatu	equ	0xFFB
  9599                           pclath	equ	0xFFA
  9600                           tblptru	equ	0xFF8
  9601                           tblptrh	equ	0xFF7
  9602                           tblptrl	equ	0xFF6
  9603                           tablat	equ	0xFF5
  9604                           prodh	equ	0xFF4
  9605                           prodl	equ	0xFF3
  9606                           intcon	equ	0xFF2
  9607                           intcon2	equ	0xFF1
  9608                           postinc0	equ	0xFEE
  9609                           fsr0h	equ	0xFEA
  9610                           fsr0l	equ	0xFE9
  9611                           wreg	equ	0xFE8
  9612                           postdec1	equ	0xFE5
  9613                           fsr1h	equ	0xFE2
  9614                           fsr1l	equ	0xFE1
  9615                           indf2	equ	0xFDF
  9616                           postinc2	equ	0xFDE
  9617                           postdec2	equ	0xFDD
  9618                           fsr2h	equ	0xFDA
  9619                           fsr2l	equ	0xFD9
  9620                           status	equ	0xFD8
  9621                           
  9622 ;; *************** function _INT0_isr *****************
  9623 ;; Defined at:
  9624 ;;		line 48 in file "Interrupt.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;		None
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;		None
  9629 ;; Return value:  Size  Location     Type
  9630 ;;		None               void
  9631 ;; Registers used:
  9632 ;;		wreg, status,2, status,0, cstack
  9633 ;; Tracked objects:
  9634 ;;		On entry : 0/0
  9635 ;;		On exit  : 0/0
  9636 ;;		Unchanged: 0/0
  9637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9640 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9641 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9642 ;;Total ram usage:        2 bytes
  9643 ;; Hardware stack levels used:    1
  9644 ;; Hardware stack levels required when called:    1
  9645 ;; This function calls:
  9646 ;;		_force_nec_state0
  9647 ;; This function is called by:
  9648 ;;		_chkisr
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           	psect	text60
  9653  0009DC                     __ptext60:
  9654                           	opt stack 0
  9655  0009DC                     _INT0_isr:
  9656                           	opt stack 20
  9657                           
  9658                           ;Interrupt.c: 50: INTCONbits.INT0IF = 0;
  9659                           
  9660                           ;incstack = 0
  9661  0009DC  92F2               	bcf	intcon,1,c	;volatile
  9662                           
  9663                           ;Interrupt.c: 51: if (Nec_state != 0)
  9664  0009DE  5051               	movf	_Nec_state,w,c
  9665  0009E0  B4D8               	btfsc	status,2,c
  9666  0009E2  D094               	goto	i2l2237
  9667                           
  9668                           ;Interrupt.c: 52: {
  9669                           ;Interrupt.c: 53: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9670  0009E4  50CE               	movf	4046,w,c	;volatile
  9671  0009E6  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9672  0009EA  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9673  0009EC  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9674  0009F0  6A01               	clrf	??_INT0_isr,c
  9675  0009F2  1001               	iorwf	??_INT0_isr,w,c
  9676  0009F4  6E48               	movwf	_Time_Elapsed,c
  9677  0009F6  5002               	movf	??_INT0_isr+1,w,c
  9678  0009F8  6E49               	movwf	_Time_Elapsed+1,c
  9679                           
  9680                           ;Interrupt.c: 54: TMR1H = 0;
  9681  0009FA  0E00               	movlw	0
  9682  0009FC  6ECF               	movwf	4047,c	;volatile
  9683                           
  9684                           ;Interrupt.c: 55: TMR1L = 0;
  9685  0009FE  0E00               	movlw	0
  9686  000A00  6ECE               	movwf	4046,c	;volatile
  9687                           
  9688                           ;Interrupt.c: 56: }
  9689                           ;Interrupt.c: 58: switch(Nec_state)
  9690  000A02  D084               	goto	i2l2237
  9691  000A04                     i2l2167:
  9692                           
  9693                           ;Interrupt.c: 61: {
  9694                           ;Interrupt.c: 63: TMR1H = 0;
  9695  000A04  0E00               	movlw	0
  9696  000A06  6ECF               	movwf	4047,c	;volatile
  9697                           
  9698                           ;Interrupt.c: 64: TMR1L = 0;
  9699  000A08  0E00               	movlw	0
  9700  000A0A  6ECE               	movwf	4046,c	;volatile
  9701                           
  9702                           ;Interrupt.c: 65: PIR1bits.TMR1IF = 0;
  9703  000A0C  909E               	bcf	3998,0,c	;volatile
  9704                           
  9705                           ;Interrupt.c: 66: T1CON= 0x90;
  9706  000A0E  0E90               	movlw	144
  9707  000A10  6ECD               	movwf	4045,c	;volatile
  9708                           
  9709                           ;Interrupt.c: 67: T1CONbits.TMR1ON = 1;
  9710  000A12  80CD               	bsf	4045,0,c	;volatile
  9711                           
  9712                           ;Interrupt.c: 68: bit_count = 0;
  9713  000A14  0E00               	movlw	0
  9714  000A16  6E58               	movwf	_bit_count,c
  9715                           
  9716                           ;Interrupt.c: 69: Nec_code = 0;
  9717  000A18  0E00               	movlw	0
  9718  000A1A  6E44               	movwf	_Nec_code,c
  9719  000A1C  0E00               	movlw	0
  9720  000A1E  6E45               	movwf	_Nec_code+1,c
  9721  000A20  0E00               	movlw	0
  9722  000A22  6E46               	movwf	_Nec_code+2,c
  9723  000A24  0E00               	movlw	0
  9724  000A26  6E47               	movwf	_Nec_code+3,c
  9725                           
  9726                           ;Interrupt.c: 70: Nec_state = 1;
  9727  000A28  0E01               	movlw	1
  9728  000A2A  6E51               	movwf	_Nec_state,c
  9729  000A2C  D06D               	goto	i2l2231
  9730                           
  9731                           ;Interrupt.c: 72: return;
  9732                           
  9733                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 1;
  9734  000A2E  D07F               	goto	i2l378
  9735  000A30                     i2l2177:
  9736                           
  9737                           ;Interrupt.c: 76: {
  9738                           ;Interrupt.c: 79: if( (Time_Elapsed > 8500 ) && (Time_Elapsed < 9500))
  9739  000A30  0E35               	movlw	53
  9740  000A32  5C48               	subwf	_Time_Elapsed,w,c
  9741  000A34  0E21               	movlw	33
  9742  000A36  5849               	subwfb	_Time_Elapsed+1,w,c
  9743  000A38  A0D8               	btfss	status,0,c
  9744  000A3A  D009               	goto	i2l2183
  9745  000A3C  0E1C               	movlw	28
  9746  000A3E  5C48               	subwf	_Time_Elapsed,w,c
  9747  000A40  0E25               	movlw	37
  9748  000A42  5849               	subwfb	_Time_Elapsed+1,w,c
  9749  000A44  B0D8               	btfsc	status,0,c
  9750  000A46  D003               	goto	i2l2183
  9751                           
  9752                           ;Interrupt.c: 80: {
  9753                           ;Interrupt.c: 81: Nec_state = 2;
  9754  000A48  0E02               	movlw	2
  9755  000A4A  6E51               	movwf	_Nec_state,c
  9756                           
  9757                           ;Interrupt.c: 82: }
  9758  000A4C  D02A               	goto	i2l2209
  9759  000A4E                     i2l2183:
  9760                           
  9761                           ;Interrupt.c: 83: else
  9762                           ;Interrupt.c: 84: {
  9763                           ;Interrupt.c: 85: force_nec_state0();
  9764  000A4E  ECBB  F00D         	call	_force_nec_state0	;wreg free
  9765  000A52  D027               	goto	i2l2209
  9766  000A54  D026               	goto	i2l2209
  9767                           
  9768                           ;Interrupt.c: 89: return;
  9769                           
  9770                           ;Interrupt.c: 86: }
  9771                           ;Interrupt.c: 88: INTCON2bits.INTEDG0 = 0;
  9772  000A56  D06B               	goto	i2l378
  9773  000A58                     i2l2189:
  9774                           
  9775                           ;Interrupt.c: 93: {
  9776                           ;Interrupt.c: 95: if( (Time_Elapsed > 4000 ) && (Time_Elapsed < 5000))
  9777  000A58  0EA1               	movlw	161
  9778  000A5A  5C48               	subwf	_Time_Elapsed,w,c
  9779  000A5C  0E0F               	movlw	15
  9780  000A5E  5849               	subwfb	_Time_Elapsed+1,w,c
  9781  000A60  A0D8               	btfss	status,0,c
  9782  000A62  D009               	goto	i2l2195
  9783  000A64  0E88               	movlw	136
  9784  000A66  5C48               	subwf	_Time_Elapsed,w,c
  9785  000A68  0E13               	movlw	19
  9786  000A6A  5849               	subwfb	_Time_Elapsed+1,w,c
  9787  000A6C  B0D8               	btfsc	status,0,c
  9788  000A6E  D003               	goto	i2l2195
  9789  000A70                     
  9790                           ;Interrupt.c: 96: {
  9791                           ;Interrupt.c: 97: Nec_state = 3;
  9792  000A70  0E03               	movlw	3
  9793  000A72  6E51               	movwf	_Nec_state,c
  9794                           
  9795                           ;Interrupt.c: 98: }
  9796  000A74  D049               	goto	i2l2231
  9797  000A76                     i2l2195:
  9798                           
  9799                           ;Interrupt.c: 100: else
  9800                           ;Interrupt.c: 101: {
  9801                           ;Interrupt.c: 102: force_nec_state0();
  9802  000A76  ECBB  F00D         	call	_force_nec_state0	;wreg free
  9803  000A7A  D046               	goto	i2l2231
  9804  000A7C  D045               	goto	i2l2231
  9805                           
  9806                           ;Interrupt.c: 105: return;
  9807                           
  9808                           ;Interrupt.c: 103: }
  9809                           ;Interrupt.c: 104: INTCON2bits.INTEDG0 = 1;
  9810  000A7E  D057               	goto	i2l378
  9811  000A80                     i2l2201:
  9812                           
  9813                           ;Interrupt.c: 109: {
  9814                           ;Interrupt.c: 111: if( (Time_Elapsed > 400 ) && (Time_Elapsed < 700))
  9815  000A80  0E91               	movlw	145
  9816  000A82  5C48               	subwf	_Time_Elapsed,w,c
  9817  000A84  0E01               	movlw	1
  9818  000A86  5849               	subwfb	_Time_Elapsed+1,w,c
  9819  000A88  A0D8               	btfss	status,0,c
  9820  000A8A  D008               	goto	i2l2207
  9821  000A8C  0EBC               	movlw	188
  9822  000A8E  5C48               	subwf	_Time_Elapsed,w,c
  9823  000A90  0E02               	movlw	2
  9824  000A92  5849               	subwfb	_Time_Elapsed+1,w,c
  9825  000A94  B0D8               	btfsc	status,0,c
  9826  000A96  D002               	goto	i2l2207
  9827                           
  9828                           ;Interrupt.c: 112: {
  9829                           ;Interrupt.c: 113: Nec_state = 4;
  9830  000A98  0E04               	movlw	4
  9831  000A9A  D7D7               	goto	L4
  9832  000A9C                     i2l2207:
  9833                           
  9834                           ;Interrupt.c: 116: else
  9835                           ;Interrupt.c: 117: {
  9836                           ;Interrupt.c: 118: force_nec_state0();
  9837  000A9C  ECBB  F00D         	call	_force_nec_state0	;wreg free
  9838  000AA0  D000               	goto	i2l2209
  9839  000AA2                     i2l2209:
  9840                           
  9841                           ;Interrupt.c: 119: }
  9842                           ;Interrupt.c: 120: INTCON2bits.INTEDG0 = 0;
  9843  000AA2  9CF1               	bcf	intcon2,6,c	;volatile
  9844                           
  9845                           ;Interrupt.c: 121: return;
  9846  000AA4  D044               	goto	i2l378
  9847  000AA6                     i2l2213:
  9848                           
  9849                           ;Interrupt.c: 125: {
  9850                           ;Interrupt.c: 127: if( (Time_Elapsed > 400) && (Time_Elapsed < 1800))
  9851  000AA6  0E91               	movlw	145
  9852  000AA8  5C48               	subwf	_Time_Elapsed,w,c
  9853  000AAA  0E01               	movlw	1
  9854  000AAC  5849               	subwfb	_Time_Elapsed+1,w,c
  9855  000AAE  A0D8               	btfss	status,0,c
  9856  000AB0  D028               	goto	i2l2229
  9857  000AB2  0E08               	movlw	8
  9858  000AB4  5C48               	subwf	_Time_Elapsed,w,c
  9859  000AB6  0E07               	movlw	7
  9860  000AB8  5849               	subwfb	_Time_Elapsed+1,w,c
  9861  000ABA  B0D8               	btfsc	status,0,c
  9862  000ABC  D022               	goto	i2l2229
  9863                           
  9864                           ;Interrupt.c: 128: {
  9865                           ;Interrupt.c: 129: Nec_code = Nec_code << 1;
  9866  000ABE  90D8               	bcf	status,0,c
  9867  000AC0  3444               	rlcf	_Nec_code,w,c
  9868  000AC2  6E44               	movwf	_Nec_code,c
  9869  000AC4  3445               	rlcf	_Nec_code+1,w,c
  9870  000AC6  6E45               	movwf	_Nec_code+1,c
  9871  000AC8  3446               	rlcf	_Nec_code+2,w,c
  9872  000ACA  6E46               	movwf	_Nec_code+2,c
  9873  000ACC  3447               	rlcf	_Nec_code+3,w,c
  9874  000ACE  6E47               	movwf	_Nec_code+3,c
  9875                           
  9876                           ;Interrupt.c: 131: if( Time_Elapsed > 1000 )
  9877  000AD0  0EE9               	movlw	233
  9878  000AD2  5C48               	subwf	_Time_Elapsed,w,c
  9879  000AD4  0E03               	movlw	3
  9880  000AD6  5849               	subwfb	_Time_Elapsed+1,w,c
  9881  000AD8  A0D8               	btfss	status,0,c
  9882  000ADA  D007               	goto	i2l2221
  9883                           
  9884                           ;Interrupt.c: 132: {
  9885                           ;Interrupt.c: 133: Nec_code += 1;
  9886  000ADC  0E01               	movlw	1
  9887  000ADE  2644               	addwf	_Nec_code,f,c
  9888  000AE0  0E00               	movlw	0
  9889  000AE2  2245               	addwfc	_Nec_code+1,f,c
  9890  000AE4  2246               	addwfc	_Nec_code+2,f,c
  9891  000AE6  2247               	addwfc	_Nec_code+3,f,c
  9892  000AE8  D000               	goto	i2l2221
  9893  000AEA                     i2l2221:
  9894                           
  9895                           ;Interrupt.c: 134: }
  9896                           ;Interrupt.c: 136: bit_count++;
  9897  000AEA  2A58               	incf	_bit_count,f,c
  9898                           
  9899                           ;Interrupt.c: 138: if( bit_count > 31 )
  9900  000AEC  0E1F               	movlw	31
  9901  000AEE  6458               	cpfsgt	_bit_count,c
  9902  000AF0  D7BF               	goto	L5
  9903                           
  9904                           ;Interrupt.c: 139: {
  9905                           ;Interrupt.c: 140: nec_ok = 1;
  9906  000AF2  0E00               	movlw	0
  9907  000AF4  6E4D               	movwf	_nec_ok+1,c
  9908  000AF6  0E01               	movlw	1
  9909  000AF8  6E4C               	movwf	_nec_ok,c
  9910                           
  9911                           ;Interrupt.c: 141: INTCONbits.INT0IE = 0;
  9912  000AFA  98F2               	bcf	intcon,4,c	;volatile
  9913                           
  9914                           ;Interrupt.c: 142: Nec_state = 0;
  9915  000AFC  0E00               	movlw	0
  9916  000AFE  6E51               	movwf	_Nec_state,c
  9917  000B00  D7B7               	goto	L5
  9918  000B02                     i2l2229:
  9919                           
  9920                           ;Interrupt.c: 149: else
  9921                           ;Interrupt.c: 150: {
  9922                           ;Interrupt.c: 151: force_nec_state0();
  9923  000B02  ECBB  F00D         	call	_force_nec_state0	;wreg free
  9924  000B06  D000               	goto	i2l2231
  9925  000B08                     i2l2231:
  9926                           
  9927                           ;Interrupt.c: 152: }
  9928                           ;Interrupt.c: 153: INTCON2bits.INTEDG0 = 1;
  9929  000B08  8CF1               	bsf	intcon2,6,c	;volatile
  9930                           
  9931                           ;Interrupt.c: 156: }
  9932                           ;Interrupt.c: 157: }
  9933                           
  9934                           ;Interrupt.c: 155: return;
  9935  000B0A  D011               	goto	i2l378
  9936  000B0C                     i2l2237:
  9937  000B0C  5051               	movf	_Nec_state,w,c
  9938                           
  9939                           ; Switch size 1, requested type "space"
  9940                           ; Number of cases is 5, Range of values is 0 to 4
  9941                           ; switch strategies available:
  9942                           ; Name         Instructions Cycles
  9943                           ; simple_byte           16     9 (average)
  9944                           ;	Chosen strategy is simple_byte
  9945  000B0E  0A00               	xorlw	0	; case 0
  9946  000B10  B4D8               	btfsc	status,2,c
  9947  000B12  D778               	goto	i2l2167
  9948  000B14  0A01               	xorlw	1	; case 1
  9949  000B16  B4D8               	btfsc	status,2,c
  9950  000B18  D78B               	goto	i2l2177
  9951  000B1A  0A03               	xorlw	3	; case 2
  9952  000B1C  B4D8               	btfsc	status,2,c
  9953  000B1E  D79C               	goto	i2l2189
  9954  000B20  0A01               	xorlw	1	; case 3
  9955  000B22  B4D8               	btfsc	status,2,c
  9956  000B24  D7AD               	goto	i2l2201
  9957  000B26  0A07               	xorlw	7	; case 4
  9958  000B28  B4D8               	btfsc	status,2,c
  9959  000B2A  D7BD               	goto	i2l2213
  9960  000B2C  D000               	goto	i2l378
  9961  000B2E                     i2l378:
  9962  000B2E  0012               	return		;funcret
  9963  000B30                     __end_of_INT0_isr:
  9964                           	opt stack 0
  9965                           pclatu	equ	0xFFB
  9966                           pclath	equ	0xFFA
  9967                           tblptru	equ	0xFF8
  9968                           tblptrh	equ	0xFF7
  9969                           tblptrl	equ	0xFF6
  9970                           tablat	equ	0xFF5
  9971                           prodh	equ	0xFF4
  9972                           prodl	equ	0xFF3
  9973                           intcon	equ	0xFF2
  9974                           intcon2	equ	0xFF1
  9975                           postinc0	equ	0xFEE
  9976                           fsr0h	equ	0xFEA
  9977                           fsr0l	equ	0xFE9
  9978                           wreg	equ	0xFE8
  9979                           postdec1	equ	0xFE5
  9980                           fsr1h	equ	0xFE2
  9981                           fsr1l	equ	0xFE1
  9982                           indf2	equ	0xFDF
  9983                           postinc2	equ	0xFDE
  9984                           postdec2	equ	0xFDD
  9985                           fsr2h	equ	0xFDA
  9986                           fsr2l	equ	0xFD9
  9987                           status	equ	0xFD8
  9988                           
  9989 ;; *************** function _force_nec_state0 *****************
  9990 ;; Defined at:
  9991 ;;		line 42 in file "Interrupt.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;		None
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;		None               void
  9998 ;; Registers used:
  9999 ;;		wreg, status,2
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;Total ram usage:        0 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_INT0_isr
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text61
 10019  001B76                     __ptext61:
 10020                           	opt stack 0
 10021  001B76                     _force_nec_state0:
 10022                           	opt stack 20
 10023                           
 10024                           ;Interrupt.c: 44: Nec_state=0;
 10025                           
 10026                           ;incstack = 0
 10027  001B76  0E00               	movlw	0
 10028  001B78  6E51               	movwf	_Nec_state,c
 10029                           
 10030                           ;Interrupt.c: 45: T1CONbits.TMR1ON = 0;
 10031  001B7A  90CD               	bcf	4045,0,c	;volatile
 10032  001B7C  0012               	return		;funcret
 10033  001B7E                     __end_of_force_nec_state0:
 10034                           	opt stack 0
 10035                           pclatu	equ	0xFFB
 10036                           pclath	equ	0xFFA
 10037                           tblptru	equ	0xFF8
 10038                           tblptrh	equ	0xFF7
 10039                           tblptrl	equ	0xFF6
 10040                           tablat	equ	0xFF5
 10041                           prodh	equ	0xFF4
 10042                           prodl	equ	0xFF3
 10043                           intcon	equ	0xFF2
 10044                           intcon2	equ	0xFF1
 10045                           postinc0	equ	0xFEE
 10046                           fsr0h	equ	0xFEA
 10047                           fsr0l	equ	0xFE9
 10048                           wreg	equ	0xFE8
 10049                           postdec1	equ	0xFE5
 10050                           fsr1h	equ	0xFE2
 10051                           fsr1l	equ	0xFE1
 10052                           indf2	equ	0xFDF
 10053                           postinc2	equ	0xFDE
 10054                           postdec2	equ	0xFDD
 10055                           fsr2h	equ	0xFDA
 10056                           fsr2l	equ	0xFD9
 10057                           status	equ	0xFD8
 10058                           pclatu	equ	0xFFB
 10059                           pclath	equ	0xFFA
 10060                           tblptru	equ	0xFF8
 10061                           tblptrh	equ	0xFF7
 10062                           tblptrl	equ	0xFF6
 10063                           tablat	equ	0xFF5
 10064                           prodh	equ	0xFF4
 10065                           prodl	equ	0xFF3
 10066                           intcon	equ	0xFF2
 10067                           intcon2	equ	0xFF1
 10068                           postinc0	equ	0xFEE
 10069                           fsr0h	equ	0xFEA
 10070                           fsr0l	equ	0xFE9
 10071                           wreg	equ	0xFE8
 10072                           postdec1	equ	0xFE5
 10073                           fsr1h	equ	0xFE2
 10074                           fsr1l	equ	0xFE1
 10075                           indf2	equ	0xFDF
 10076                           postinc2	equ	0xFDE
 10077                           postdec2	equ	0xFDD
 10078                           fsr2h	equ	0xFDA
 10079                           fsr2l	equ	0xFD9
 10080                           status	equ	0xFD8
 10081                           
 10082                           	psect	rparam
 10083  0000                     pclatu	equ	0xFFB
 10084                           pclath	equ	0xFFA
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           intcon2	equ	0xFF1
 10093                           postinc0	equ	0xFEE
 10094                           fsr0h	equ	0xFEA
 10095                           fsr0l	equ	0xFE9
 10096                           wreg	equ	0xFE8
 10097                           postdec1	equ	0xFE5
 10098                           fsr1h	equ	0xFE2
 10099                           fsr1l	equ	0xFE1
 10100                           indf2	equ	0xFDF
 10101                           postinc2	equ	0xFDE
 10102                           postdec2	equ	0xFDD
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8


Data Sizes:
    Strings     163
    Constant    547
    Data        155
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128     16     110
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[8]), STR_5(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_4(CODE[23]), STR_3(CODE[22]), STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___llmod
    ___llmod->___lldiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_LED->___awdiv
    ___awdiv->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_printf
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   57517
                                             66 COMRAM     1     1      0
                                             13 BANK0      3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                            _Do_Init
                             _Do_LED
                  _Initialize_Screen
                            ___awdiv
                             ___wmul
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
             _waitHalfSecondWithBeep
 ---------------------------------------------------------------------------------
 (1) _waitHalfSecondWithBeep                               0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (2) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              40    26     14    3725
                                             38 COMRAM    18     4     14
                                              0 BANK0     13    13      0
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     362
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     501
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   21503
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12656
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_LED                                               2     2      0     742
                                             30 COMRAM     2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     705
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Do_LED
     ___awdiv
       ___wmul (ARG)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch
   _waitHalfSecondWithBeep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_Half_Second

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      6E       5       85.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     131      34        0.0%
DATA                 0      0     131       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 04 10:02:47 2021

                      _Do_LED$1560 001F                        drawCircle@f 002A  
                      drawCircle@r 0020                        drawCircle@x 002C  
                      drawCircle@y 002E     __end_of_waitHalfSecondWithBeep 1A98  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                                 l35 1620  
                               l45 1A6C                                 l95 1286  
                               l89 1914                       ___awdiv@sign 001C  
              ___wmul@multiplicand 0013                                l111 09DA  
                              l120 0930                                l113 08B4  
                              l151 102A                                l152 104C  
                              l242 17D2                                l322 1878  
                              l148 104E                                l149 0FBA  
                              l239 1706                                l159 079A  
                              l177 0B9E                                l700 143E  
                              l701 1448                                l702 144A  
                              l630 0140                                l704 1464  
                              l633 01B0                                l546 1B16  
                              l707 1996                                l555 1A26  
                              l900 10E4                                l671 04F0  
                              l695 1422                                l699 143C  
                ?_Wait_Half_Second 0001                                _PR2 000FCB  
                              _day 0068                  _Deactivate_Buzzer 1B5E  
             __size_of_I2C_ReStart 0016                                _dow 0069  
                              _nbr 004A                                _txt 004E  
                              prod 000FF3                                wreg 000FE8  
               ??_Wait_Half_Second 0011                 ?_Deactivate_Buzzer 0001  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 1946                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1138 19B8  
                             l1167 11EE                               l1177 13E4  
                   drawFastVLine@x 0022                               l1269 1784  
                   drawFastVLine@y 0018                               l5001 002A  
                             l5011 005C                               l5101 031E  
                             l5013 0072                               l5005 003E  
                             l4231 169C                               l5031 010A  
                             l5007 0050                               l4241 17DC  
                             l4401 097A                               l5113 0362  
                             l5025 00F8                               l5017 0092  
                             l4243 17E2                               l4235 17CA  
                             l4219 18F6                               l4171 1248  
                             l4227 1680                               l5115 036E  
                             l5123 03A0                               l5107 0338  
                             l5043 0190                               l5027 0100  
                             l4253 17F4                               l4181 126E  
                             l4421 1752                               l5125 03B2  
                             l5133 049A                               l5109 0344  
                             l5053 01D2                               l4511 141A  
                             l4503 1408                               l4183 127C  
                             l4167 1210                               l4407 09A6  
                             l4415 09D6                               l4423 1758  
                             l5127 042C                               l5135 04AE  
                             l5119 038C                               l5071 0252  
                             l5063 0210                               l5039 0168  
                             l5145 18A4                               l4409 09CE  
                             l4433 0F84                               l5137 04B8  
                             l5081 02A0                               l5073 0258  
                             l5057 01FC                               l4523 1434  
                             l4515 1426                               l4507 1412  
                             l5147 18AE                               l4451 1020  
                             l5067 024A                               l5059 0202  
                             l5139 04D2                               l4373 08A2  
                             l5077 0266                               l4391 0928  
                             l4383 08C0                               l4455 102E  
                             l4439 0FF2                               l4615 0C00  
                             l5095 02DE                               l5087 02A8  
                             l4377 08B0                               l4369 0896  
                             l4561 0DA4                               l4465 1048  
                             l4801 11DE                               l5089 02BC  
                             l5433 04FC                               l4651 16D2  
                             l4387 08F0                               l4379 08B8  
                             l4459 1038                               l4723 18BE  
                             l4619 0C52                               l4811 13A6  
                             l5099 0312                               l4389 0924  
                             l4573 0DF4                               l4725 18C8  
                             l4813 13AE     I2C_Write_Cmd_Write_Data@Device 0015  
                             l4671 1702                               l4647 16CA  
                             l4399 0952                               l4735 19B0  
                             l4657 16E0                               l4665 16F0  
                             l4761 1098                               l4753 1078  
                             l4585 0E64                               l4577 0E12  
                             l4841 0780                               l4817 13D4  
                             l4809 1398                               l5473 061A  
                             l5465 05E2                               l5449 059A  
                             l4659 16E8                               l4771 10BE  
                             l4763 10A0                               l4747 1066  
                             l4587 0E6C                               l5483 0640  
                             l4669 16FC                               l5477 0624  
                             l5469 05FC                               l4759 108E  
                             l4775 10CA                               l4599 0B84  
                             l4791 11A4                               l4793 11AC  
                             l4779 10DA                               l4869 0870  
                             l4789 1196                               STR_1 FF87  
                             STR_2 FF5C                               STR_3 FFBC  
                             STR_4 FFA5                               STR_5 FFD2  
                             STR_6 FFF7                               STR_7 FFE6  
                             u3000 0FE8                               u3160 0DCE  
                             u2730 123E                               u2920 0988  
                             u2990 0FB2                               u3987 1B24  
                             _RBPU 007F8F                               _TRMT 007D61  
              ??_Deactivate_Buzzer 0011                               _main 04F2  
                             _font FD39                               _hour 006A  
                 __end_of_I2C_Init 1B42                   __end_of_I2C_Read 1708  
                             _year 006F                               fsr0h 000FEA  
                             _txt1 0100                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006E  
                 __end_of_I2C_Stop 1ACE                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 183E  
                  ??_drawFastVLine 001C                    __end_of_i2cNack 1B4C  
                     ___param_bank 000010                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 0B30          __end_of_Deactivate_Buzzer 1B66  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 10E6  
                  drawCircle@ddF_x 0026                    drawCircle@ddF_y 0028  
                  __end_of___lldiv 1200                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                  __end_of___llmod 13F6                              _T2CON 000FCA  
                            _T3CON 000FB1                              i2l366 134C  
                            i2l378 0B2E                    ___awdiv@counter 001B  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _SPBRG 000FAF                              _PORTC 000F82  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                            _Rcmd1 0C68                              _Rcmd3 0E82  
                       _i2cHighSda 1B6E                         _i2cHighScl 1B20  
                  __end_of_dpowers FF3C                              _color 0080  
                            _font2 FE38              fillCircleHelper@ddF_x 0031  
            fillCircleHelper@ddF_y 0033                              _found 005A  
                  __end_of_isdigit 19BA                              _tempC 0066  
                            _tempF 0067                              _month 006C  
            fillCircleHelper@delta 002B                              _putch 1B12  
            fillCircleHelper@color 002D                              main@i 00EB  
                __end_of_I2C_Start 1AE0                  __end_of_I2C_Write 1802  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 1288                       __end_of_main 06D8  
                     __end_of_font FE38                   __end_of_Rcmd2red 17C4  
                           ??_main 0043                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 1ABC  
        ??_TFT_GreenTab_Initialize 001D                 ??_DS3231_Read_Time 0014  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0030                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 0016                   ___llmod@dividend 001E  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             i2l2201 0A80  
                           i2l2221 0AEA                             i2l2213 0AA6  
                           i2l2231 0B08                             i2l2207 0A9C  
                           i2l2209 0AA2                             i2l2229 0B02  
                           i2l2237 0B0C                             i2l2183 0A4E  
                           i2l2167 0A04                             i2l2177 0A30  
                           i2l2195 0A76                             i2l2189 0A58  
                           i2l2703 1342                          ??_Do_Init 0017  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 0011                             _Do_LED 187A  
                 _force_nec_state0 1B76                   __end_of_delay_ms 1628  
                           _i2cAck 1AE0                         _TempSecond 0052  
                 __end_of_fillRect 16C0                   __end_of_drawChar 09DC  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 1970                          ??___awdiv 001B  
        __size_of_fillCircleHelper 0138                   __end_of_drawtext 0E82  
                        ??___lldiv 0019                          ??___llmod 0026  
                           _chkisr 0008                             _array1 00AA  
                           _buffer 00BF                             _nec_ok 004C  
                           clear_0 128E                             clear_1 129A  
                 ___awdiv@quotient 001D                             _minute 006B  
                           _second 005C            DS3231_Setup_Time@Device 0013  
       __size_of_Deactivate_Buzzer 0008                             _printf 001C  
                     drawtext@size 0040                             _strcpy 18B4  
                           _strlen 1748                       __pdataCOMRAM 0068  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD38                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 19DA                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 1A72                         __accesstop 0080  
          __end_of__initialization 1300                          ?_INT0_isr 0001  
               _setup_alarm_minute 005E                 _setup_alarm_second 005F  
                    ___rparam_used 000001                      __end_of_Rcmd1 0D78  
                    __end_of_Rcmd3 0F74                     __pcstackCOMRAM 0001  
                     __pidataBANK0 1708                       __pidataBANK1 1530  
                    __end_of_font2 FF14                  __end_of_i2cLowSda 1B56  
                __end_of_i2cLowScl 1B6E                      __end_of_putch 1B20  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011         fillCircleHelper@cornername 0029  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 1466  
                          ??_putch 0011                         __pbssBANK0 00BF  
                 _setup_alarm_hour 005D                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
        __size_of_Wait_Half_Second 001A                    spiwrite@spidata 0012  
                       _alarm_date 0054                            ?_Do_LED 0001  
                       ??_INT0_isr 0001                         _alarm_hour 0055  
                          ?_i2cAck 0001                 __CFG_CCP2MX$PORTBE 000000  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                       _fillCircle 1584                         I2C_Write@n 0012  
                          ?_printf 0027                            ?_strcpy 0011  
                          ?_strlen 0011                  ??_Activate_Buzzer 0011  
                       _fillScreen 19F8                         _drawCircle 06D8  
                   _init_INTERRUPT 1916                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
            __end_of_fillRectangle 1050                          ?_drawtext 0039  
                _DS3231_Setup_Time 1466                            _Do_Init 1802  
         _I2C_Write_Cmd_Write_Data 19BA         __end_of_I2C_Write_Cmd_Only 1A48  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0018  
                          _i2cNack 1B42                 __end_of_TIMER1_isr 1B38  
               ?_DS3231_Setup_Time 0001                      _write_command 1B02  
                  __size_of_Do_LED 003A                          _I2C_Start 1ACE  
                        _I2C_Write 17C4                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 19F8                  __end_of_drawPixel 1916  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1288  
                 _fillCircleHelper 0B30                            ___awdiv 1050  
                          ___lldiv 1174                    __size_of___wmul 0028  
                          ___llmod 1386                    __size_of_chkisr 137E  
                        ?_spiwrite 0001                            __pcinit 1288  
                          __ramtop 1000                            __ptext0 04F2  
                          __ptext1 1A86                            __ptext2 1A14  
                          __ptext3 1B5E                            __ptext4 1A98  
                          __ptext5 001C          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 1B12                            __ptext7 1998  
                          __ptext8 1386                            __ptext9 1174  
                  __size_of_printf 04D6                  __end_of_init_UART 1A86  
           __end_of_init_INTERRUPT 1946                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF5C           __end_of_force_nec_state0 1B7E  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF14                            _isdigit 1998  
                        _T3CONbits 000FB1                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 1A5E                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 14CC                         ??_drawChar 0035  
                        _LCD_Reset 1AAA                      _setAddrWindow 1628  
                   __pintcode_body 130A                         delay_ms@ms 0017  
             end_of_initialization 1300                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD38  
        __size_of_DS3231_Read_Time 0064                            int_func 130A  
          DS3231_Read_Time@Address 0014                         ?_I2C_Start 0001  
         ??_waitHalfSecondWithBeep 0011                         ?_I2C_Write 0001  
                  ___lldiv@divisor 0015                    ___lldiv@counter 001D  
                       _tempSecond 006D                          _RCSTAbits 000FAB  
                          printf@c 00EA                            printf@f 0027  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                   drawtext@cursor_x 00E4  
                 drawtext@cursor_y 00E3                          _PORTBbits 000F81  
                        _PORTDbits 000F83                          _PORTEbits 000F84  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                      ?_fillScreen 0024                         _setup_hour 0061  
                       _setup_year 0065                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISCbits 000F94  
                        _TRISDbits 000F95                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00DF                         drawPixel@x 001B  
                       drawPixel@y 0018                   _Wait_Half_Second 1A14  
                      _DS1621_Init 19DA                        printf@width 00E7  
                        _TXSTAbits 000FAC                     __end_of_Do_LED 18B4  
                __size_of_INT0_isr 0154                     __end_of_i2cAck 1AF2  
         DS1621_Read_Temp@Data_Ret 0017                 __end_of_i2cHighSda 1B76  
               __end_of_i2cHighScl 1B2C                     __end_of___wmul 1998  
                    delay_ms@count 001B                         _write_data 1AF2  
                    __pidataCOMRAM 1B56                     __end_of_chkisr 1386  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 1A48  
                       drawtext@bg 003E                          _Nec_code1 0050  
                        _i2cLowSda 1B4C                          _i2cLowScl 1B66  
                   __end_of_printf 04F2                     __end_of_strcpy 18E6  
                   __end_of_strlen 1786                          _Nec_state 0051  
              start_initialization 1288         __size_of_DS3231_Setup_Time 0066  
                  ??_write_command 0013                          _OpenUSART 13F6  
              __size_of_fillCircle 0052                    ___llmod@divisor 0022  
                         ??_Do_LED 001F                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                    ___llmod@counter 0026  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E    __size_of_waitHalfSecondWithBeep 0012  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 1A98                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 0035  
                 _DS1621_Read_Temp 183E                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00DE                        ??_LCD_Reset 001D  
                     _isdigit$2119 0012           __end_of_fillCircleHelper 0C68  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 14CC  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 1970  
                    __pmediumconst FD38                           ?___awdiv 0017  
                         ?___lldiv 0011                           ?___llmod 001E  
                        __tft_type 0053                 _I2C_Write_Cmd_Only 1A2E  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 18E6                  __size_of_spiwrite 0014  
           _waitHalfSecondWithBeep 1A86                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 1B38                           _I2C_Read 16C0  
                         _I2C_Stop 1ABC                  _Initialize_Screen 10E6  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 1A72                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF3C  
               ?_Initialize_Screen 0001                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 1AAA                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 09DC  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                         _PIR2bits 000FA1                   ??_init_INTERRUPT 0011  
                        _setup_day 0060                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                     ??_fillCircle 0043                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC           __end_of_Wait_Half_Second 1A2E  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 1174  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 00E9                         printf@prec 00DF  
                        main@found 00ED                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 12B4  
                        copy_data1 12D4                          copy_data2 12F4  
                        drawtext@i 00E1             __size_of_drawFastVLine 0088  
                        drawtext@x 00DE                          drawtext@y 0039  
                         _Nec_code 0044                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                       ?_DS1621_Init 0001  
                         _Rcmd2red 1786                   __size_of_Do_Init 003C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0048                 __end_of_fillCircle 15D6  
                 __size_of_i2cNack 000A                           __Hrparam 0000  
               __end_of_fillScreen 1A14                           __Lrparam 0000  
               __end_of_drawCircle 0886                   __size_of___awdiv 0096  
                 __size_of___lldiv 008C                   __size_of___llmod 0070  
                     ?_I2C_ReStart 0001                   __size_of_isdigit 0022  
                         _delay_ms 15D6                           __ptext10 1584  
                         __ptext11 0B30                           __ptext20 1676  
                         __ptext12 06D8                           __ptext21 1200  
                         __ptext13 10E6                           __ptext30 1A5E  
                         __ptext22 18E6                           __ptext14 18B4  
                         __ptext31 1AAA                           __ptext23 1628  
                         __ptext15 19F8                           __ptext40 1B38  
                         __ptext32 15D6                           __ptext24 1946  
                         __ptext16 0F74                           __ptext41 19DA  
                         __ptext33 1970                           __ptext25 0E82  
                         __ptext17 0D78                           __ptext50 16C0  
                         __ptext42 19BA                           __ptext34 187A  
                         __ptext26 1786                           __ptext18 1748  
                         __ptext51 1B42                           __ptext43 1A2E  
                         __ptext35 1050                           __ptext27 0C68  
                         __ptext19 0886                           __ptext60 09DC  
                         __ptext52 1AE0                           __ptext44 1466  
                         __ptext36 1802                           __ptext28 1AF2  
                         __ptext61 1B76                           __ptext53 1A48  
                         __ptext45 14CC                           __ptext37 1A72  
                         __ptext29 1B02                           __ptext54 1B4C  
                         __ptext46 183E                           __ptext38 13F6  
                         __ptext55 1B66                           __ptext47 17C4  
                         __ptext39 1916                           __ptext56 1B6E  
                         __ptext48 1ABC                           __ptext57 1B20  
                         __ptext49 1ACE                           __ptext59 1B2C  
                         _fillRect 1676                           _drawChar 0886  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 0D78                         strcpy@from 0013  
                    _fillRectangle 0F74           __end_of_DS1621_Read_Temp 187A  
                 ?_Activate_Buzzer 0001                      __size_of_main 01E6  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 1200                          printf@idx 00DE  
                         _spiwrite 1A5E                          printf@val 00E3  
                      ??_drawPixel 001B                           _rowstart 005B  
         __end_of_DS3231_Read_Time 1530                 fillCircleHelper@x0 0023  
               fillCircleHelper@y0 0025         __size_of_Initialize_Screen 008E  
                       _INTCONbits 000FF2                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                           isdigit@c 0013  
                ?_fillCircleHelper 0023                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
               ??_fillCircleHelper 002F              __end_of_write_command 1B12  
                 ___lldiv@dividend 0011                    fillScreen@color 0024  
                     fillCircle@x0 003B                       fillCircle@y0 003D  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 00E1  
                fillCircleHelper@f 0035                  fillCircleHelper@r 0027  
                fillCircleHelper@x 0037                  fillCircleHelper@y 0039  
                     ??_write_data 0013                         _TIMER1_isr 1B2C  
          ?_waitHalfSecondWithBeep 0001                      fillRect@color 0026  
                 ___lldiv@quotient 0019                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                       _setup_minute 0062  
                     _setup_second 0064                        fillCircle@r 003F  
            __end_of_setAddrWindow 1676                 fillRectangle@color 001B  
                    drawChar@color 0030                        _setup_month 0063  
               __end_of_write_data 1B02          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
