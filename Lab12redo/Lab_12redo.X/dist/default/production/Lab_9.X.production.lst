

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 28 09:43:47 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           	psect	idataCOMRAM
    60  00149A                     __pidataCOMRAM:
    61                           	opt stack 0
    62                           
    63                           ;initializer for _array1
    64  00149A  A2                 	db	162
    65  00149B  62                 	db	98
    66  00149C  E2                 	db	226
    67  00149D  22                 	db	34
    68  00149E  02                 	db	2
    69  00149F  C2                 	db	194
    70  0014A0  E0                 	db	224
    71  0014A1  A8                 	db	168
    72  0014A2  90                 	db	144
    73  0014A3  68                 	db	104
    74  0014A4  98                 	db	152
    75  0014A5  B0                 	db	176
    76  0014A6  30                 	db	48
    77  0014A7  18                 	db	24
    78  0014A8  7A                 	db	122
    79  0014A9  10                 	db	16
    80  0014AA  38                 	db	56
    81  0014AB  5A                 	db	90
    82  0014AC  42                 	db	66
    83  0014AD  4A                 	db	74
    84  0014AE  52                 	db	82
    85                           
    86                           ;initializer for _wrap
    87  0014AF  01                 	db	1
    88                           
    89                           	psect	idataBANK0
    90  0012BC                     __pidataBANK0:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _D1
    94  0012BC  04                 	db	4
    95  0012BD  04                 	db	4
    96  0012BE  04                 	db	4
    97  0012BF  20                 	db	32
    98  0012C0  20                 	db	32
    99  0012C1  10                 	db	16
   100  0012C2  24                 	db	36
   101  0012C3  00                 	db	0
   102  0012C4  00                 	db	0
   103  0012C5  00                 	db	0
   104  0012C6  00                 	db	0
   105  0012C7  00                 	db	0
   106  0012C8  00                 	db	0
   107  0012C9  00                 	db	0
   108  0012CA  00                 	db	0
   109  0012CB  00                 	db	0
   110  0012CC  00                 	db	0
   111  0012CD  00                 	db	0
   112  0012CE  00                 	db	0
   113  0012CF  00                 	db	0
   114  0012D0  00                 	db	0
   115                           
   116                           ;initializer for _D2
   117  0012D1  00                 	db	0
   118  0012D2  00                 	db	0
   119  0012D3  00                 	db	0
   120  0012D4  00                 	db	0
   121  0012D5  00                 	db	0
   122  0012D6  00                 	db	0
   123  0012D7  00                 	db	0
   124  0012D8  21                 	db	33
   125  0012D9  21                 	db	33
   126  0012DA  23                 	db	35
   127  0012DB  23                 	db	35
   128  0012DC  23                 	db	35
   129  0012DD  23                 	db	35
   130  0012DE  23                 	db	35
   131  0012DF  00                 	db	0
   132  0012E0  00                 	db	0
   133  0012E1  00                 	db	0
   134  0012E2  00                 	db	0
   135  0012E3  00                 	db	0
   136  0012E4  00                 	db	0
   137  0012E5  00                 	db	0
   138                           
   139                           ;initializer for _D3
   140  0012E6  00                 	db	0
   141  0012E7  00                 	db	0
   142  0012E8  00                 	db	0
   143  0012E9  00                 	db	0
   144  0012EA  00                 	db	0
   145  0012EB  00                 	db	0
   146  0012EC  00                 	db	0
   147  0012ED  00                 	db	0
   148  0012EE  00                 	db	0
   149  0012EF  00                 	db	0
   150  0012F0  00                 	db	0
   151  0012F1  00                 	db	0
   152  0012F2  00                 	db	0
   153  0012F3  00                 	db	0
   154  0012F4  07                 	db	7
   155  0012F5  07                 	db	7
   156  0012F6  07                 	db	7
   157  0012F7  07                 	db	7
   158  0012F8  07                 	db	7
   159  0012F9  07                 	db	7
   160  0012FA  07                 	db	7
   161                           
   162                           	psect	idataBANK1
   163  001016                     __pidataBANK1:
   164                           	opt stack 0
   165                           
   166                           ;initializer for _color
   167  001016  F800               	dw	63488
   168  001018  F800               	dw	63488
   169  00101A  F800               	dw	63488
   170  00101C  001F               	dw	31
   171  00101E  001F               	dw	31
   172  001020  07E0               	dw	2016
   173  001022  F81F               	dw	63519
   174  001024  F81F               	dw	63519
   175  001026  F81F               	dw	63519
   176  001028  0000               	dw	0
   177  00102A  0000               	dw	0
   178  00102C  0000               	dw	0
   179  00102E  0000               	dw	0
   180  001030  0000               	dw	0
   181  001032  0000               	dw	0
   182  001034  0000               	dw	0
   183  001036  0000               	dw	0
   184  001038  0000               	dw	0
   185  00103A  0000               	dw	0
   186  00103C  0000               	dw	0
   187  00103E  0000               	dw	0
   188                           
   189                           ;initializer for _txt1
   190  001040  43                 	db	67
   191  001041  48                 	db	72
   192  001042  2D                 	db	45
   193  001043  00                 	db	0
   194  001044  43                 	db	67
   195  001045  48                 	db	72
   196  001046  00                 	db	0
   197  001047  00                 	db	0
   198  001048  43                 	db	67
   199  001049  48                 	db	72
   200  00104A  2B                 	db	43
   201  00104B  00                 	db	0
   202  00104C  7C                 	db	124
   203  00104D  3C                 	db	60
   204  00104E  3C                 	db	60
   205  00104F  00                 	db	0
   206  001050  3E                 	db	62
   207  001051  3E                 	db	62
   208  001052  7C                 	db	124
   209  001053  00                 	db	0
   210  001054  3E                 	db	62
   211  001055  7C                 	db	124
   212  001056  7C                 	db	124
   213  001057  00                 	db	0
   214  001058  20                 	db	32
   215  001059  2D                 	db	45
   216  00105A  20                 	db	32
   217  00105B  00                 	db	0
   218  00105C  20                 	db	32
   219  00105D  2B                 	db	43
   220  00105E  20                 	db	32
   221  00105F  00                 	db	0
   222  001060  45                 	db	69
   223  001061  51                 	db	81
   224  001062  20                 	db	32
   225  001063  00                 	db	0
   226  001064  20                 	db	32
   227  001065  30                 	db	48
   228  001066  20                 	db	32
   229  001067  00                 	db	0
   230  001068  31                 	db	49
   231  001069  30                 	db	48
   232  00106A  30                 	db	48
   233  00106B  00                 	db	0
   234  00106C  32                 	db	50
   235  00106D  30                 	db	48
   236  00106E  30                 	db	48
   237  00106F  00                 	db	0
   238  001070  20                 	db	32
   239  001071  31                 	db	49
   240  001072  20                 	db	32
   241  001073  00                 	db	0
   242  001074  20                 	db	32
   243  001075  32                 	db	50
   244  001076  20                 	db	32
   245  001077  00                 	db	0
   246  001078  20                 	db	32
   247  001079  33                 	db	51
   248  00107A  20                 	db	32
   249  00107B  00                 	db	0
   250  00107C  20                 	db	32
   251  00107D  34                 	db	52
   252  00107E  20                 	db	32
   253  00107F  00                 	db	0
   254  001080  20                 	db	32
   255  001081  35                 	db	53
   256  001082  20                 	db	32
   257  001083  00                 	db	0
   258  001084  20                 	db	32
   259  001085  36                 	db	54
   260  001086  20                 	db	32
   261  001087  00                 	db	0
   262  001088  20                 	db	32
   263  001089  37                 	db	55
   264  00108A  20                 	db	32
   265  00108B  00                 	db	0
   266  00108C  20                 	db	32
   267  00108D  38                 	db	56
   268  00108E  20                 	db	32
   269  00108F  00                 	db	0
   270  001090  20                 	db	32
   271  001091  39                 	db	57
   272  001092  20                 	db	32
   273  001093  00                 	db	0
   274                           
   275                           	psect	mediumconst
   276  00FDC2                     __pmediumconst:
   277                           	opt stack 0
   278  00FDC2  00                 	db	0
   279  00FDC3                     _font:
   280                           	opt stack 0
   281  00FDC3  00                 	db	0
   282  00FDC4  00                 	db	0
   283  00FDC5  00                 	db	0
   284  00FDC6  00                 	db	0
   285  00FDC7  00                 	db	0
   286  00FDC8  00                 	db	0
   287  00FDC9  00                 	db	0
   288  00FDCA  5F                 	db	95
   289  00FDCB  00                 	db	0
   290  00FDCC  00                 	db	0
   291  00FDCD  00                 	db	0
   292  00FDCE  07                 	db	7
   293  00FDCF  00                 	db	0
   294  00FDD0  07                 	db	7
   295  00FDD1  00                 	db	0
   296  00FDD2  14                 	db	20
   297  00FDD3  7F                 	db	127
   298  00FDD4  14                 	db	20
   299  00FDD5  7F                 	db	127
   300  00FDD6  14                 	db	20
   301  00FDD7  24                 	db	36
   302  00FDD8  2A                 	db	42
   303  00FDD9  7F                 	db	127
   304  00FDDA  2A                 	db	42
   305  00FDDB  12                 	db	18
   306  00FDDC  23                 	db	35
   307  00FDDD  13                 	db	19
   308  00FDDE  08                 	db	8
   309  00FDDF  64                 	db	100
   310  00FDE0  62                 	db	98
   311  00FDE1  36                 	db	54
   312  00FDE2  49                 	db	73
   313  00FDE3  56                 	db	86
   314  00FDE4  20                 	db	32
   315  00FDE5  50                 	db	80
   316  00FDE6  00                 	db	0
   317  00FDE7  08                 	db	8
   318  00FDE8  07                 	db	7
   319  00FDE9  03                 	db	3
   320  00FDEA  00                 	db	0
   321  00FDEB  00                 	db	0
   322  00FDEC  1C                 	db	28
   323  00FDED  22                 	db	34
   324  00FDEE  41                 	db	65
   325  00FDEF  00                 	db	0
   326  00FDF0  00                 	db	0
   327  00FDF1  41                 	db	65
   328  00FDF2  22                 	db	34
   329  00FDF3  1C                 	db	28
   330  00FDF4  00                 	db	0
   331  00FDF5  2A                 	db	42
   332  00FDF6  1C                 	db	28
   333  00FDF7  7F                 	db	127
   334  00FDF8  1C                 	db	28
   335  00FDF9  2A                 	db	42
   336  00FDFA  08                 	db	8
   337  00FDFB  08                 	db	8
   338  00FDFC  3E                 	db	62
   339  00FDFD  08                 	db	8
   340  00FDFE  08                 	db	8
   341  00FDFF  00                 	db	0
   342  00FE00  80                 	db	128
   343  00FE01  70                 	db	112
   344  00FE02  30                 	db	48
   345  00FE03  00                 	db	0
   346  00FE04  08                 	db	8
   347  00FE05  08                 	db	8
   348  00FE06  08                 	db	8
   349  00FE07  08                 	db	8
   350  00FE08  08                 	db	8
   351  00FE09  00                 	db	0
   352  00FE0A  00                 	db	0
   353  00FE0B  60                 	db	96
   354  00FE0C  60                 	db	96
   355  00FE0D  00                 	db	0
   356  00FE0E  20                 	db	32
   357  00FE0F  10                 	db	16
   358  00FE10  08                 	db	8
   359  00FE11  04                 	db	4
   360  00FE12  02                 	db	2
   361  00FE13  3E                 	db	62
   362  00FE14  51                 	db	81
   363  00FE15  49                 	db	73
   364  00FE16  45                 	db	69
   365  00FE17  3E                 	db	62
   366  00FE18  00                 	db	0
   367  00FE19  42                 	db	66
   368  00FE1A  7F                 	db	127
   369  00FE1B  40                 	db	64
   370  00FE1C  00                 	db	0
   371  00FE1D  72                 	db	114
   372  00FE1E  49                 	db	73
   373  00FE1F  49                 	db	73
   374  00FE20  49                 	db	73
   375  00FE21  46                 	db	70
   376  00FE22  21                 	db	33
   377  00FE23  41                 	db	65
   378  00FE24  49                 	db	73
   379  00FE25  4D                 	db	77
   380  00FE26  33                 	db	51
   381  00FE27  18                 	db	24
   382  00FE28  14                 	db	20
   383  00FE29  12                 	db	18
   384  00FE2A  7F                 	db	127
   385  00FE2B  10                 	db	16
   386  00FE2C  27                 	db	39
   387  00FE2D  45                 	db	69
   388  00FE2E  45                 	db	69
   389  00FE2F  45                 	db	69
   390  00FE30  39                 	db	57
   391  00FE31  3C                 	db	60
   392  00FE32  4A                 	db	74
   393  00FE33  49                 	db	73
   394  00FE34  49                 	db	73
   395  00FE35  31                 	db	49
   396  00FE36  41                 	db	65
   397  00FE37  21                 	db	33
   398  00FE38  11                 	db	17
   399  00FE39  09                 	db	9
   400  00FE3A  07                 	db	7
   401  00FE3B  36                 	db	54
   402  00FE3C  49                 	db	73
   403  00FE3D  49                 	db	73
   404  00FE3E  49                 	db	73
   405  00FE3F  36                 	db	54
   406  00FE40  46                 	db	70
   407  00FE41  49                 	db	73
   408  00FE42  49                 	db	73
   409  00FE43  29                 	db	41
   410  00FE44  1E                 	db	30
   411  00FE45  00                 	db	0
   412  00FE46  00                 	db	0
   413  00FE47  14                 	db	20
   414  00FE48  00                 	db	0
   415  00FE49  00                 	db	0
   416  00FE4A  00                 	db	0
   417  00FE4B  40                 	db	64
   418  00FE4C  34                 	db	52
   419  00FE4D  00                 	db	0
   420  00FE4E  00                 	db	0
   421  00FE4F  00                 	db	0
   422  00FE50  08                 	db	8
   423  00FE51  14                 	db	20
   424  00FE52  22                 	db	34
   425  00FE53  41                 	db	65
   426  00FE54  14                 	db	20
   427  00FE55  14                 	db	20
   428  00FE56  14                 	db	20
   429  00FE57  14                 	db	20
   430  00FE58  14                 	db	20
   431  00FE59  00                 	db	0
   432  00FE5A  41                 	db	65
   433  00FE5B  22                 	db	34
   434  00FE5C  14                 	db	20
   435  00FE5D  08                 	db	8
   436  00FE5E  02                 	db	2
   437  00FE5F  01                 	db	1
   438  00FE60  59                 	db	89
   439  00FE61  09                 	db	9
   440  00FE62  06                 	db	6
   441  00FE63  3E                 	db	62
   442  00FE64  41                 	db	65
   443  00FE65  5D                 	db	93
   444  00FE66  59                 	db	89
   445  00FE67  4E                 	db	78
   446  00FE68  7C                 	db	124
   447  00FE69  12                 	db	18
   448  00FE6A  11                 	db	17
   449  00FE6B  12                 	db	18
   450  00FE6C  7C                 	db	124
   451  00FE6D  7F                 	db	127
   452  00FE6E  49                 	db	73
   453  00FE6F  49                 	db	73
   454  00FE70  49                 	db	73
   455  00FE71  36                 	db	54
   456  00FE72  3E                 	db	62
   457  00FE73  41                 	db	65
   458  00FE74  41                 	db	65
   459  00FE75  41                 	db	65
   460  00FE76  22                 	db	34
   461  00FE77  7F                 	db	127
   462  00FE78  41                 	db	65
   463  00FE79  41                 	db	65
   464  00FE7A  41                 	db	65
   465  00FE7B  3E                 	db	62
   466  00FE7C  7F                 	db	127
   467  00FE7D  49                 	db	73
   468  00FE7E  49                 	db	73
   469  00FE7F  49                 	db	73
   470  00FE80  41                 	db	65
   471  00FE81  7F                 	db	127
   472  00FE82  09                 	db	9
   473  00FE83  09                 	db	9
   474  00FE84  09                 	db	9
   475  00FE85  01                 	db	1
   476  00FE86  3E                 	db	62
   477  00FE87  41                 	db	65
   478  00FE88  41                 	db	65
   479  00FE89  51                 	db	81
   480  00FE8A  73                 	db	115
   481  00FE8B  7F                 	db	127
   482  00FE8C  08                 	db	8
   483  00FE8D  08                 	db	8
   484  00FE8E  08                 	db	8
   485  00FE8F  7F                 	db	127
   486  00FE90  00                 	db	0
   487  00FE91  41                 	db	65
   488  00FE92  7F                 	db	127
   489  00FE93  41                 	db	65
   490  00FE94  00                 	db	0
   491  00FE95  20                 	db	32
   492  00FE96  40                 	db	64
   493  00FE97  41                 	db	65
   494  00FE98  3F                 	db	63
   495  00FE99  01                 	db	1
   496  00FE9A  7F                 	db	127
   497  00FE9B  08                 	db	8
   498  00FE9C  14                 	db	20
   499  00FE9D  22                 	db	34
   500  00FE9E  41                 	db	65
   501  00FE9F  7F                 	db	127
   502  00FEA0  40                 	db	64
   503  00FEA1  40                 	db	64
   504  00FEA2  40                 	db	64
   505  00FEA3  40                 	db	64
   506  00FEA4  7F                 	db	127
   507  00FEA5  02                 	db	2
   508  00FEA6  1C                 	db	28
   509  00FEA7  02                 	db	2
   510  00FEA8  7F                 	db	127
   511  00FEA9  7F                 	db	127
   512  00FEAA  04                 	db	4
   513  00FEAB  08                 	db	8
   514  00FEAC  10                 	db	16
   515  00FEAD  7F                 	db	127
   516  00FEAE  3E                 	db	62
   517  00FEAF  41                 	db	65
   518  00FEB0  41                 	db	65
   519  00FEB1  41                 	db	65
   520  00FEB2  3E                 	db	62
   521  00FEB3  7F                 	db	127
   522  00FEB4  09                 	db	9
   523  00FEB5  09                 	db	9
   524  00FEB6  09                 	db	9
   525  00FEB7  06                 	db	6
   526  00FEB8  3E                 	db	62
   527  00FEB9  41                 	db	65
   528  00FEBA  51                 	db	81
   529  00FEBB  21                 	db	33
   530  00FEBC  5E                 	db	94
   531  00FEBD  7F                 	db	127
   532  00FEBE  09                 	db	9
   533  00FEBF  19                 	db	25
   534  00FEC0  29                 	db	41
   535  00FEC1  46                 	db	70
   536  00FEC2                     __end_of_font:
   537                           	opt stack 0
   538  00FEC2                     _font2:
   539                           	opt stack 0
   540  00FEC2  26                 	db	38
   541  00FEC3  49                 	db	73
   542  00FEC4  49                 	db	73
   543  00FEC5  49                 	db	73
   544  00FEC6  32                 	db	50
   545  00FEC7  03                 	db	3
   546  00FEC8  01                 	db	1
   547  00FEC9  7F                 	db	127
   548  00FECA  01                 	db	1
   549  00FECB  03                 	db	3
   550  00FECC  3F                 	db	63
   551  00FECD  40                 	db	64
   552  00FECE  40                 	db	64
   553  00FECF  40                 	db	64
   554  00FED0  3F                 	db	63
   555  00FED1  1F                 	db	31
   556  00FED2  20                 	db	32
   557  00FED3  40                 	db	64
   558  00FED4  20                 	db	32
   559  00FED5  1F                 	db	31
   560  00FED6  3F                 	db	63
   561  00FED7  40                 	db	64
   562  00FED8  38                 	db	56
   563  00FED9  40                 	db	64
   564  00FEDA  3F                 	db	63
   565  00FEDB  63                 	db	99
   566  00FEDC  14                 	db	20
   567  00FEDD  08                 	db	8
   568  00FEDE  14                 	db	20
   569  00FEDF  63                 	db	99
   570  00FEE0  03                 	db	3
   571  00FEE1  04                 	db	4
   572  00FEE2  78                 	db	120
   573  00FEE3  04                 	db	4
   574  00FEE4  03                 	db	3
   575  00FEE5  61                 	db	97
   576  00FEE6  59                 	db	89
   577  00FEE7  49                 	db	73
   578  00FEE8  4D                 	db	77
   579  00FEE9  43                 	db	67
   580  00FEEA  00                 	db	0
   581  00FEEB  7F                 	db	127
   582  00FEEC  41                 	db	65
   583  00FEED  41                 	db	65
   584  00FEEE  41                 	db	65
   585  00FEEF  02                 	db	2
   586  00FEF0  04                 	db	4
   587  00FEF1  08                 	db	8
   588  00FEF2  10                 	db	16
   589  00FEF3  20                 	db	32
   590  00FEF4  00                 	db	0
   591  00FEF5  41                 	db	65
   592  00FEF6  41                 	db	65
   593  00FEF7  41                 	db	65
   594  00FEF8  7F                 	db	127
   595  00FEF9  04                 	db	4
   596  00FEFA  02                 	db	2
   597  00FEFB  01                 	db	1
   598  00FEFC  02                 	db	2
   599  00FEFD  04                 	db	4
   600  00FEFE  40                 	db	64
   601  00FEFF  40                 	db	64
   602  00FF00  40                 	db	64
   603  00FF01  40                 	db	64
   604  00FF02  40                 	db	64
   605  00FF03  00                 	db	0
   606  00FF04  03                 	db	3
   607  00FF05  07                 	db	7
   608  00FF06  08                 	db	8
   609  00FF07  00                 	db	0
   610  00FF08  20                 	db	32
   611  00FF09  54                 	db	84
   612  00FF0A  54                 	db	84
   613  00FF0B  78                 	db	120
   614  00FF0C  40                 	db	64
   615  00FF0D  7F                 	db	127
   616  00FF0E  28                 	db	40
   617  00FF0F  44                 	db	68
   618  00FF10  44                 	db	68
   619  00FF11  38                 	db	56
   620  00FF12  38                 	db	56
   621  00FF13  44                 	db	68
   622  00FF14  44                 	db	68
   623  00FF15  44                 	db	68
   624  00FF16  28                 	db	40
   625  00FF17  38                 	db	56
   626  00FF18  44                 	db	68
   627  00FF19  44                 	db	68
   628  00FF1A  28                 	db	40
   629  00FF1B  7F                 	db	127
   630  00FF1C  38                 	db	56
   631  00FF1D  54                 	db	84
   632  00FF1E  54                 	db	84
   633  00FF1F  54                 	db	84
   634  00FF20  18                 	db	24
   635  00FF21  00                 	db	0
   636  00FF22  08                 	db	8
   637  00FF23  7E                 	db	126
   638  00FF24  09                 	db	9
   639  00FF25  02                 	db	2
   640  00FF26  18                 	db	24
   641  00FF27  A4                 	db	164
   642  00FF28  A4                 	db	164
   643  00FF29  9C                 	db	156
   644  00FF2A  78                 	db	120
   645  00FF2B  7F                 	db	127
   646  00FF2C  08                 	db	8
   647  00FF2D  04                 	db	4
   648  00FF2E  04                 	db	4
   649  00FF2F  78                 	db	120
   650  00FF30  00                 	db	0
   651  00FF31  44                 	db	68
   652  00FF32  7D                 	db	125
   653  00FF33  40                 	db	64
   654  00FF34  00                 	db	0
   655  00FF35  20                 	db	32
   656  00FF36  40                 	db	64
   657  00FF37  40                 	db	64
   658  00FF38  3D                 	db	61
   659  00FF39  00                 	db	0
   660  00FF3A  7F                 	db	127
   661  00FF3B  10                 	db	16
   662  00FF3C  28                 	db	40
   663  00FF3D  44                 	db	68
   664  00FF3E  00                 	db	0
   665  00FF3F  00                 	db	0
   666  00FF40  41                 	db	65
   667  00FF41  7F                 	db	127
   668  00FF42  40                 	db	64
   669  00FF43  00                 	db	0
   670  00FF44  7C                 	db	124
   671  00FF45  04                 	db	4
   672  00FF46  78                 	db	120
   673  00FF47  04                 	db	4
   674  00FF48  78                 	db	120
   675  00FF49  7C                 	db	124
   676  00FF4A  08                 	db	8
   677  00FF4B  04                 	db	4
   678  00FF4C  04                 	db	4
   679  00FF4D  78                 	db	120
   680  00FF4E  38                 	db	56
   681  00FF4F  44                 	db	68
   682  00FF50  44                 	db	68
   683  00FF51  44                 	db	68
   684  00FF52  38                 	db	56
   685  00FF53  FC                 	db	252
   686  00FF54  18                 	db	24
   687  00FF55  24                 	db	36
   688  00FF56  24                 	db	36
   689  00FF57  18                 	db	24
   690  00FF58  18                 	db	24
   691  00FF59  24                 	db	36
   692  00FF5A  24                 	db	36
   693  00FF5B  18                 	db	24
   694  00FF5C  FC                 	db	252
   695  00FF5D  7C                 	db	124
   696  00FF5E  08                 	db	8
   697  00FF5F  04                 	db	4
   698  00FF60  04                 	db	4
   699  00FF61  08                 	db	8
   700  00FF62  48                 	db	72
   701  00FF63  54                 	db	84
   702  00FF64  54                 	db	84
   703  00FF65  54                 	db	84
   704  00FF66  24                 	db	36
   705  00FF67  04                 	db	4
   706  00FF68  04                 	db	4
   707  00FF69  3F                 	db	63
   708  00FF6A  44                 	db	68
   709  00FF6B  24                 	db	36
   710  00FF6C  3C                 	db	60
   711  00FF6D  40                 	db	64
   712  00FF6E  40                 	db	64
   713  00FF6F  20                 	db	32
   714  00FF70  7C                 	db	124
   715  00FF71  1C                 	db	28
   716  00FF72  20                 	db	32
   717  00FF73  40                 	db	64
   718  00FF74  20                 	db	32
   719  00FF75  1C                 	db	28
   720  00FF76  3C                 	db	60
   721  00FF77  40                 	db	64
   722  00FF78  30                 	db	48
   723  00FF79  40                 	db	64
   724  00FF7A  3C                 	db	60
   725  00FF7B  44                 	db	68
   726  00FF7C  28                 	db	40
   727  00FF7D  10                 	db	16
   728  00FF7E  28                 	db	40
   729  00FF7F  44                 	db	68
   730  00FF80  4C                 	db	76
   731  00FF81  90                 	db	144
   732  00FF82  90                 	db	144
   733  00FF83  90                 	db	144
   734  00FF84  7C                 	db	124
   735  00FF85  44                 	db	68
   736  00FF86  64                 	db	100
   737  00FF87  54                 	db	84
   738  00FF88  4C                 	db	76
   739  00FF89  44                 	db	68
   740  00FF8A  00                 	db	0
   741  00FF8B  08                 	db	8
   742  00FF8C  36                 	db	54
   743  00FF8D  41                 	db	65
   744  00FF8E  00                 	db	0
   745  00FF8F  00                 	db	0
   746  00FF90  00                 	db	0
   747  00FF91  77                 	db	119
   748  00FF92  00                 	db	0
   749  00FF93  00                 	db	0
   750  00FF94  00                 	db	0
   751  00FF95  41                 	db	65
   752  00FF96  36                 	db	54
   753  00FF97  08                 	db	8
   754  00FF98  00                 	db	0
   755  00FF99  02                 	db	2
   756  00FF9A  01                 	db	1
   757  00FF9B  02                 	db	2
   758  00FF9C  04                 	db	4
   759  00FF9D  02                 	db	2
   760  00FF9E                     __end_of_font2:
   761                           	opt stack 0
   762  00FF9E                     _hexpowers:
   763                           	opt stack 0
   764  00FF9E  0001               	dw	1
   765  00FFA0  0000               	dw	0
   766  00FFA2  0010               	dw	16
   767  00FFA4  0000               	dw	0
   768  00FFA6  0100               	dw	256
   769  00FFA8  0000               	dw	0
   770  00FFAA  1000               	dw	4096
   771  00FFAC  0000               	dw	0
   772  00FFAE  0000               	dw	0
   773  00FFB0  0001               	dw	1
   774  00FFB2  0000               	dw	0
   775  00FFB4  0010               	dw	16
   776  00FFB6  0000               	dw	0
   777  00FFB8  0100               	dw	256
   778  00FFBA  0000               	dw	0
   779  00FFBC  1000               	dw	4096
   780  00FFBE                     __end_of_hexpowers:
   781                           	opt stack 0
   782  0000                     _ADCON1	set	4033
   783  0000                     _CCP2CON	set	4026
   784  0000                     _CCPR2L	set	4027
   785  0000                     _INTCON2bits	set	4081
   786  0000                     _INTCONbits	set	4082
   787  0000                     _OSCCON	set	4051
   788  0000                     _PIE1bits	set	3997
   789  0000                     _PIR1bits	set	3998
   790  0000                     _PIR2bits	set	4001
   791  0000                     _PORTA	set	3968
   792  0000                     _PORTB	set	3969
   793  0000                     _PORTBbits	set	3969
   794  0000                     _PORTC	set	3970
   795  0000                     _PORTD	set	3971
   796  0000                     _PORTDbits	set	3971
   797  0000                     _PORTE	set	3972
   798  0000                     _PORTEbits	set	3972
   799  0000                     _PR2	set	4043
   800  0000                     _RCSTA	set	4011
   801  0000                     _RCSTAbits	set	4011
   802  0000                     _SPBRG	set	4015
   803  0000                     _SPBRGH	set	4016
   804  0000                     _SSPBUF	set	4041
   805  0000                     _SSPCON1	set	4038
   806  0000                     _SSPSTAT	set	4039
   807  0000                     _SSPSTATbits	set	4039
   808  0000                     _T1CON	set	4045
   809  0000                     _T1CONbits	set	4045
   810  0000                     _T2CON	set	4042
   811  0000                     _T3CON	set	4017
   812  0000                     _T3CONbits	set	4017
   813  0000                     _TMR0H	set	4055
   814  0000                     _TMR0L	set	4054
   815  0000                     _TMR1H	set	4047
   816  0000                     _TMR1L	set	4046
   817  0000                     _TRISA	set	3986
   818  0000                     _TRISB	set	3987
   819  0000                     _TRISC	set	3988
   820  0000                     _TRISCbits	set	3988
   821  0000                     _TRISD	set	3989
   822  0000                     _TRISE	set	3990
   823  0000                     _TXREG	set	4013
   824  0000                     _TXSTA	set	4012
   825  0000                     _TXSTAbits	set	4012
   826  0000                     _TRMT	set	32097
   827  0000                     _nRBPU	set	32655
   828  00FFBE                     STR_1:
   829  00FFBE  4E                 	db	78	;'N'
   830  00FFBF  45                 	db	69	;'E'
   831  00FFC0  43                 	db	67	;'C'
   832  00FFC1  5F                 	db	95	;'_'
   833  00FFC2  43                 	db	67	;'C'
   834  00FFC3  6F                 	db	111	;'o'
   835  00FFC4  64                 	db	100	;'d'
   836  00FFC5  65                 	db	101	;'e'
   837  00FFC6  20                 	db	32
   838  00FFC7  3D                 	db	61	;'='
   839  00FFC8  20                 	db	32
   840  00FFC9  25                 	db	37
   841  00FFCA  30                 	db	48	;'0'
   842  00FFCB  38                 	db	56	;'8'
   843  00FFCC  6C                 	db	108	;'l'
   844  00FFCD  78                 	db	120	;'x'
   845  00FFCE  20                 	db	32
   846  00FFCF  25                 	db	37
   847  00FFD0  78                 	db	120	;'x'
   848  00FFD1  0D                 	db	13
   849  00FFD2  0A                 	db	10
   850  00FFD3  00                 	db	0
   851  00FFD4                     STR_2:
   852  00FFD4  45                 	db	69	;'E'
   853  00FFD5  43                 	db	67	;'C'
   854  00FFD6  45                 	db	69	;'E'
   855  00FFD7  33                 	db	51	;'3'
   856  00FFD8  33                 	db	51	;'3'
   857  00FFD9  30                 	db	48	;'0'
   858  00FFDA  31                 	db	49	;'1'
   859  00FFDB  4C                 	db	76	;'L'
   860  00FFDC  20                 	db	32
   861  00FFDD  46                 	db	70	;'F'
   862  00FFDE  61                 	db	97	;'a'
   863  00FFDF  6C                 	db	108	;'l'
   864  00FFE0  6C                 	db	108	;'l'
   865  00FFE1  20                 	db	32
   866  00FFE2  32                 	db	50	;'2'
   867  00FFE3  31                 	db	49	;'1'
   868  00FFE4  2D                 	db	45
   869  00FFE5  53                 	db	83	;'S'
   870  00FFE6  33                 	db	51	;'3'
   871  00FFE7  00                 	db	0
   872  00FFE8                     STR_4:
   873  00FFE8  30                 	db	48	;'0'
   874  00FFE9  31                 	db	49	;'1'
   875  00FFEA  32                 	db	50	;'2'
   876  00FFEB  33                 	db	51	;'3'
   877  00FFEC  34                 	db	52	;'4'
   878  00FFED  35                 	db	53	;'5'
   879  00FFEE  36                 	db	54	;'6'
   880  00FFEF  37                 	db	55	;'7'
   881  00FFF0  38                 	db	56	;'8'
   882  00FFF1  39                 	db	57	;'9'
   883  00FFF2  61                 	db	97	;'a'
   884  00FFF3  62                 	db	98	;'b'
   885  00FFF4  63                 	db	99	;'c'
   886  00FFF5  64                 	db	100	;'d'
   887  00FFF6  65                 	db	101	;'e'
   888  00FFF7  66                 	db	102	;'f'
   889  00FFF8  00                 	db	0
   890  00FFF9                     STR_3:
   891  00FFF9  4C                 	db	76	;'L'
   892  00FFFA  41                 	db	65	;'A'
   893  00FFFB  42                 	db	66	;'B'
   894  00FFFC  20                 	db	32
   895  00FFFD  39                 	db	57	;'9'
   896  00FFFE  00                 	db	0
   897                           
   898                           ; #config settings
   899  00FFFF  00                 	db	0	; dummy byte at the end
   900  0000                     
   901                           	psect	cinit
   902  000F94                     __pcinit:
   903                           	opt stack 0
   904  000F94                     start_initialization:
   905                           	opt stack 0
   906  000F94                     __initialization:
   907                           	opt stack 0
   908                           
   909                           ; Clear objects allocated to BANK0 (31 bytes)
   910  000F94  EE00  F0BF         	lfsr	0,__pbssBANK0
   911  000F98  0E1F               	movlw	31
   912  000F9A                     clear_0:
   913  000F9A  6AEE               	clrf	postinc0,c
   914  000F9C  06E8               	decf	wreg,f,c
   915  000F9E  E1FD               	bnz	clear_0
   916                           
   917                           ; Clear objects allocated to COMRAM (19 bytes)
   918  000FA0  EE00  F05D         	lfsr	0,__pbssCOMRAM
   919  000FA4  0E13               	movlw	19
   920  000FA6                     clear_1:
   921  000FA6  6AEE               	clrf	postinc0,c
   922  000FA8  06E8               	decf	wreg,f,c
   923  000FAA  E1FD               	bnz	clear_1
   924                           
   925                           ; Initialize objects allocated to BANK1 (126 bytes)
   926                           ; load TBLPTR registers with __pidataBANK1
   927  000FAC  0E16               	movlw	low __pidataBANK1
   928  000FAE  6EF6               	movwf	tblptrl,c
   929  000FB0  0E10               	movlw	high __pidataBANK1
   930  000FB2  6EF7               	movwf	tblptrh,c
   931  000FB4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   932  000FB6  6EF8               	movwf	tblptru,c
   933  000FB8  EE01  F000         	lfsr	0,__pdataBANK1
   934  000FBC  EE10 F07E          	lfsr	1,126
   935  000FC0                     copy_data0:
   936  000FC0  0009               	tblrd		*+
   937  000FC2  CFF5 FFEE          	movff	tablat,postinc0
   938  000FC6  50E5               	movf	postdec1,w,c
   939  000FC8  50E1               	movf	fsr1l,w,c
   940  000FCA  E1FA               	bnz	copy_data0
   941                           
   942                           ; Initialize objects allocated to BANK0 (63 bytes)
   943                           ; load TBLPTR registers with __pidataBANK0
   944  000FCC  0EBC               	movlw	low __pidataBANK0
   945  000FCE  6EF6               	movwf	tblptrl,c
   946  000FD0  0E12               	movlw	high __pidataBANK0
   947  000FD2  6EF7               	movwf	tblptrh,c
   948  000FD4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   949  000FD6  6EF8               	movwf	tblptru,c
   950  000FD8  EE00  F080         	lfsr	0,__pdataBANK0
   951  000FDC  EE10 F03F          	lfsr	1,63
   952  000FE0                     copy_data1:
   953  000FE0  0009               	tblrd		*+
   954  000FE2  CFF5 FFEE          	movff	tablat,postinc0
   955  000FE6  50E5               	movf	postdec1,w,c
   956  000FE8  50E1               	movf	fsr1l,w,c
   957  000FEA  E1FA               	bnz	copy_data1
   958                           
   959                           ; Initialize objects allocated to COMRAM (22 bytes)
   960                           ; load TBLPTR registers with __pidataCOMRAM
   961  000FEC  0E9A               	movlw	low __pidataCOMRAM
   962  000FEE  6EF6               	movwf	tblptrl,c
   963  000FF0  0E14               	movlw	high __pidataCOMRAM
   964  000FF2  6EF7               	movwf	tblptrh,c
   965  000FF4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   966  000FF6  6EF8               	movwf	tblptru,c
   967  000FF8  EE00  F047         	lfsr	0,__pdataCOMRAM
   968  000FFC  EE10 F016          	lfsr	1,22
   969  001000                     copy_data2:
   970  001000  0009               	tblrd		*+
   971  001002  CFF5 FFEE          	movff	tablat,postinc0
   972  001006  50E5               	movf	postdec1,w,c
   973  001008  50E1               	movf	fsr1l,w,c
   974  00100A  E1FA               	bnz	copy_data2
   975  00100C                     end_of_initialization:
   976                           	opt stack 0
   977  00100C                     __end_of__initialization:
   978                           	opt stack 0
   979  00100C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   980  00100E  6EF8               	movwf	tblptru,c
   981  001010  0100               	movlb	0
   982  001012  EF5F  F001         	goto	_main	;jump to C main() function
   983                           tblptru	equ	0xFF8
   984                           tblptrh	equ	0xFF7
   985                           tblptrl	equ	0xFF6
   986                           tablat	equ	0xFF5
   987                           postinc0	equ	0xFEE
   988                           wreg	equ	0xFE8
   989                           postdec1	equ	0xFE5
   990                           fsr1l	equ	0xFE1
   991                           
   992                           	psect	bssCOMRAM
   993  00005D                     __pbssCOMRAM:
   994                           	opt stack 0
   995  00005D                     _Nec_code:
   996                           	opt stack 0
   997  00005D                     	ds	4
   998  000061                     _Time_Elapsed:
   999                           	opt stack 0
  1000  000061                     	ds	2
  1001  000063                     _nbr:
  1002                           	opt stack 0
  1003  000063                     	ds	2
  1004  000065                     _nec_ok:
  1005                           	opt stack 0
  1006  000065                     	ds	2
  1007  000067                     _txt:
  1008                           	opt stack 0
  1009  000067                     	ds	2
  1010  000069                     _Nec_code1:
  1011                           	opt stack 0
  1012  000069                     	ds	1
  1013  00006A                     _Nec_state:
  1014                           	opt stack 0
  1015  00006A                     	ds	1
  1016  00006B                     __tft_type:
  1017                           	opt stack 0
  1018  00006B                     	ds	1
  1019  00006C                     _bit_count:
  1020                           	opt stack 0
  1021  00006C                     	ds	1
  1022  00006D                     _colstart:
  1023                           	opt stack 0
  1024  00006D                     	ds	1
  1025  00006E                     _i:
  1026                           	opt stack 0
  1027  00006E                     	ds	1
  1028  00006F                     _rowstart:
  1029                           	opt stack 0
  1030  00006F                     	ds	1
  1031                           tblptru	equ	0xFF8
  1032                           tblptrh	equ	0xFF7
  1033                           tblptrl	equ	0xFF6
  1034                           tablat	equ	0xFF5
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           postdec1	equ	0xFE5
  1038                           fsr1l	equ	0xFE1
  1039                           
  1040                           	psect	dataCOMRAM
  1041  000047                     __pdataCOMRAM:
  1042                           	opt stack 0
  1043  000047                     _array1:
  1044                           	opt stack 0
  1045  000047                     	ds	21
  1046  00005C                     _wrap:
  1047                           	opt stack 0
  1048  00005C                     	ds	1
  1049                           tblptru	equ	0xFF8
  1050                           tblptrh	equ	0xFF7
  1051                           tblptrl	equ	0xFF6
  1052                           tablat	equ	0xFF5
  1053                           postinc0	equ	0xFEE
  1054                           wreg	equ	0xFE8
  1055                           postdec1	equ	0xFE5
  1056                           fsr1l	equ	0xFE1
  1057                           
  1058                           	psect	bssBANK0
  1059  0000BF                     __pbssBANK0:
  1060                           	opt stack 0
  1061  0000BF                     _buffer:
  1062                           	opt stack 0
  1063  0000BF                     	ds	31
  1064                           tblptru	equ	0xFF8
  1065                           tblptrh	equ	0xFF7
  1066                           tblptrl	equ	0xFF6
  1067                           tablat	equ	0xFF5
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           postdec1	equ	0xFE5
  1071                           fsr1l	equ	0xFE1
  1072                           
  1073                           	psect	dataBANK0
  1074  000080                     __pdataBANK0:
  1075                           	opt stack 0
  1076  000080                     _D1:
  1077                           	opt stack 0
  1078  000080                     	ds	21
  1079  000095                     _D2:
  1080                           	opt stack 0
  1081  000095                     	ds	21
  1082  0000AA                     _D3:
  1083                           	opt stack 0
  1084  0000AA                     	ds	21
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postdec1	equ	0xFE5
  1092                           fsr1l	equ	0xFE1
  1093                           
  1094                           	psect	dataBANK1
  1095  000100                     __pdataBANK1:
  1096                           	opt stack 0
  1097  000100                     _color:
  1098                           	opt stack 0
  1099  000100                     	ds	42
  1100  00012A                     _txt1:
  1101                           	opt stack 0
  1102  00012A                     	ds	84
  1103                           tblptru	equ	0xFF8
  1104                           tblptrh	equ	0xFF7
  1105                           tblptrl	equ	0xFF6
  1106                           tablat	equ	0xFF5
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           postdec1	equ	0xFE5
  1110                           fsr1l	equ	0xFE1
  1111                           
  1112                           	psect	cstackBANK0
  1113  0000DE                     __pcstackBANK0:
  1114                           	opt stack 0
  1115  0000DE                     drawtext@x:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0x0
  1119  0000DE                     	ds	1
  1120  0000DF                     drawtext@textsize:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x1
  1124  0000DF                     	ds	2
  1125  0000E1                     drawtext@i:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x3
  1129  0000E1                     	ds	2
  1130  0000E3                     drawtext@cursor_y:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x5
  1134  0000E3                     	ds	1
  1135  0000E4                     drawtext@cursor_x:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x6
  1139  0000E4                     	ds	1
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           postdec1	equ	0xFE5
  1147                           fsr1l	equ	0xFE1
  1148                           
  1149                           	psect	cstackCOMRAM
  1150  000001                     __pcstackCOMRAM:
  1151                           	opt stack 0
  1152  000001                     ??_INT0_isr:
  1153  000001                     
  1154                           ; 0 bytes @ 0x0
  1155  000001                     	ds	2
  1156  000003                     ??_chkisr:
  1157                           
  1158                           ; 0 bytes @ 0x2
  1159  000003                     	ds	14
  1160  000011                     ??_isdigit:
  1161  000011                     ?_strlen:
  1162                           	opt stack 0
  1163  000011                     ?___wmul:
  1164                           	opt stack 0
  1165  000011                     ?___lldiv:
  1166                           	opt stack 0
  1167  000011                     putch@c:
  1168                           	opt stack 0
  1169  000011                     spiwrite@x:
  1170                           	opt stack 0
  1171  000011                     waitHalfSecond@i:
  1172                           	opt stack 0
  1173  000011                     OpenUSART@spbrg:
  1174                           	opt stack 0
  1175  000011                     ___wmul@multiplier:
  1176                           	opt stack 0
  1177  000011                     strcpy@to:
  1178                           	opt stack 0
  1179  000011                     strlen@s:
  1180                           	opt stack 0
  1181  000011                     ___lldiv@dividend:
  1182                           	opt stack 0
  1183                           
  1184                           ; 4 bytes @ 0x10
  1185  000011                     	ds	1
  1186  000012                     spiwrite@spidata:
  1187                           	opt stack 0
  1188  000012                     _isdigit$1813:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x11
  1192  000012                     	ds	1
  1193  000013                     ??_strlen:
  1194  000013                     write_command@cmd_:
  1195                           	opt stack 0
  1196  000013                     write_data@data_:
  1197                           	opt stack 0
  1198  000013                     OpenUSART@config:
  1199                           	opt stack 0
  1200  000013                     isdigit@c:
  1201                           	opt stack 0
  1202  000013                     ___wmul@multiplicand:
  1203                           	opt stack 0
  1204  000013                     strcpy@from:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x12
  1208  000013                     	ds	1
  1209  000014                     setAddrWindow@y0:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0x13
  1213  000014                     	ds	1
  1214  000015                     setAddrWindow@x1:
  1215                           	opt stack 0
  1216  000015                     ___wmul@product:
  1217                           	opt stack 0
  1218  000015                     strcpy@cp:
  1219                           	opt stack 0
  1220  000015                     strlen@cp:
  1221                           	opt stack 0
  1222  000015                     ___lldiv@divisor:
  1223                           	opt stack 0
  1224                           
  1225                           ; 4 bytes @ 0x14
  1226  000015                     	ds	1
  1227  000016                     setAddrWindow@y1:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x15
  1231  000016                     	ds	1
  1232  000017                     setAddrWindow@x0:
  1233                           	opt stack 0
  1234  000017                     delay_ms@ms:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x16
  1238  000017                     	ds	1
  1239  000018                     drawPixel@y:
  1240                           	opt stack 0
  1241  000018                     drawFastVLine@y:
  1242                           	opt stack 0
  1243  000018                     fillRectangle@y:
  1244                           	opt stack 0
  1245                           
  1246                           ; 1 bytes @ 0x17
  1247  000018                     	ds	1
  1248  000019                     ??_delay_ms:
  1249  000019                     drawFastVLine@h:
  1250                           	opt stack 0
  1251  000019                     fillRectangle@w:
  1252                           	opt stack 0
  1253  000019                     drawPixel@color:
  1254                           	opt stack 0
  1255  000019                     ___lldiv@quotient:
  1256                           	opt stack 0
  1257                           
  1258                           ; 4 bytes @ 0x18
  1259  000019                     	ds	1
  1260  00001A                     fillRectangle@h:
  1261                           	opt stack 0
  1262  00001A                     drawFastVLine@color:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x19
  1266  00001A                     	ds	1
  1267  00001B                     drawPixel@x:
  1268                           	opt stack 0
  1269  00001B                     delay_ms@count:
  1270                           	opt stack 0
  1271  00001B                     fillRectangle@color:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x1A
  1275  00001B                     	ds	1
  1276  00001C                     ??_drawFastVLine:
  1277  00001C                     drawCircle@x0:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x1B
  1281  00001C                     	ds	1
  1282  00001D                     ??_fillRectangle:
  1283  00001D                     ___lldiv@counter:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x1C
  1287  00001D                     	ds	1
  1288  00001E                     ?_printf:
  1289                           	opt stack 0
  1290  00001E                     drawCircle@y0:
  1291                           	opt stack 0
  1292  00001E                     printf@f:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x1D
  1296  00001E                     	ds	2
  1297  000020                     drawFastVLine@hi:
  1298                           	opt stack 0
  1299  000020                     drawCircle@r:
  1300                           	opt stack 0
  1301                           
  1302                           ; 2 bytes @ 0x1F
  1303  000020                     	ds	1
  1304  000021                     drawFastVLine@lo:
  1305                           	opt stack 0
  1306  000021                     fillRectangle@hi:
  1307                           	opt stack 0
  1308                           
  1309                           ; 1 bytes @ 0x20
  1310  000021                     	ds	1
  1311  000022                     drawFastVLine@x:
  1312                           	opt stack 0
  1313  000022                     fillRectangle@lo:
  1314                           	opt stack 0
  1315  000022                     drawCircle@color:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x21
  1319  000022                     	ds	1
  1320  000023                     fillRect@y:
  1321                           	opt stack 0
  1322  000023                     fillRectangle@x:
  1323                           	opt stack 0
  1324  000023                     fillCircleHelper@x0:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x22
  1328  000023                     	ds	1
  1329  000024                     ??_drawCircle:
  1330  000024                     fillRect@w:
  1331                           	opt stack 0
  1332  000024                     fillScreen@color:
  1333                           	opt stack 0
  1334                           
  1335                           ; 2 bytes @ 0x23
  1336  000024                     	ds	1
  1337  000025                     fillRect@h:
  1338                           	opt stack 0
  1339  000025                     fillCircleHelper@y0:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x24
  1343  000025                     	ds	1
  1344  000026                     ??_printf:
  1345  000026                     fillRect@color:
  1346                           	opt stack 0
  1347  000026                     drawCircle@ddF_x:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x25
  1351  000026                     	ds	1
  1352  000027                     fillCircleHelper@r:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x26
  1356  000027                     	ds	1
  1357  000028                     ??_fillRect:
  1358  000028                     drawCircle@ddF_y:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x27
  1362  000028                     	ds	1
  1363  000029                     fillCircleHelper@cornername:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x28
  1367  000029                     	ds	1
  1368  00002A                     printf@idx:
  1369                           	opt stack 0
  1370  00002A                     drawCircle@f:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x29
  1374  00002A                     	ds	1
  1375  00002B                     fillRect@x:
  1376                           	opt stack 0
  1377  00002B                     fillCircleHelper@delta:
  1378                           	opt stack 0
  1379  00002B                     printf@prec:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x2A
  1383  00002B                     	ds	1
  1384  00002C                     fillRect@i:
  1385                           	opt stack 0
  1386  00002C                     drawCircle@x:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x2B
  1390  00002C                     	ds	1
  1391  00002D                     fillCircleHelper@color:
  1392                           	opt stack 0
  1393  00002D                     printf@val:
  1394                           	opt stack 0
  1395                           
  1396                           ; 4 bytes @ 0x2C
  1397  00002D                     	ds	1
  1398  00002E                     drawChar@y:
  1399                           	opt stack 0
  1400  00002E                     drawCircle@y:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x2D
  1404  00002E                     	ds	1
  1405  00002F                     ??_fillCircleHelper:
  1406  00002F                     drawChar@c:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x2E
  1410  00002F                     	ds	1
  1411  000030                     drawChar@color:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x2F
  1415  000030                     	ds	1
  1416  000031                     fillCircleHelper@ddF_x:
  1417                           	opt stack 0
  1418  000031                     printf@ap:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x30
  1422  000031                     	ds	1
  1423  000032                     drawChar@bg:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x31
  1427  000032                     	ds	1
  1428  000033                     printf@flag:
  1429                           	opt stack 0
  1430  000033                     fillCircleHelper@ddF_y:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x32
  1434  000033                     	ds	1
  1435  000034                     drawChar@size:
  1436                           	opt stack 0
  1437  000034                     printf@width:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x33
  1441  000034                     	ds	1
  1442  000035                     drawChar@line:
  1443                           	opt stack 0
  1444  000035                     fillCircleHelper@f:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x34
  1448  000035                     	ds	1
  1449  000036                     drawChar@x:
  1450                           	opt stack 0
  1451  000036                     printf@c:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x35
  1455  000036                     	ds	1
  1456  000037                     drawChar@j:
  1457                           	opt stack 0
  1458  000037                     fillCircleHelper@x:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x36
  1462  000037                     	ds	1
  1463  000038                     drawChar@i:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x37
  1467  000038                     	ds	1
  1468  000039                     drawtext@y:
  1469                           	opt stack 0
  1470  000039                     fillCircleHelper@y:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x38
  1474  000039                     	ds	1
  1475  00003A                     drawtext@_text:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x39
  1479  00003A                     	ds	1
  1480  00003B                     fillCircle@x0:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x3A
  1484  00003B                     	ds	1
  1485  00003C                     drawtext@color:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x3B
  1489  00003C                     	ds	1
  1490  00003D                     fillCircle@y0:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x3C
  1494  00003D                     	ds	1
  1495  00003E                     drawtext@bg:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x3D
  1499  00003E                     	ds	1
  1500  00003F                     fillCircle@r:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x3E
  1504  00003F                     	ds	1
  1505  000040                     drawtext@size:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x3F
  1509  000040                     	ds	1
  1510  000041                     ??_drawtext:
  1511  000041                     fillCircle@color:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x40
  1515  000041                     	ds	2
  1516  000043                     ??_main:
  1517                           
  1518                           ; 0 bytes @ 0x42
  1519  000043                     	ds	1
  1520  000044                     main@i:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x43
  1524  000044                     	ds	2
  1525  000046                     main@found:
  1526                           	opt stack 0
  1527                           
  1528                           ; 1 bytes @ 0x45
  1529  000046                     	ds	1
  1530                           tblptru	equ	0xFF8
  1531                           tblptrh	equ	0xFF7
  1532                           tblptrl	equ	0xFF6
  1533                           tablat	equ	0xFF5
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           postdec1	equ	0xFE5
  1537                           fsr1l	equ	0xFE1
  1538                           
  1539 ;;
  1540 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1541 ;;
  1542 ;; *************** function _main *****************
  1543 ;; Defined at:
  1544 ;;		line 291 in file "Lab9_sample_3.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;  i               2   67[COMRAM] int 
  1549 ;;  found           1   69[COMRAM] unsigned char 
  1550 ;; Return value:  Size  Location     Type
  1551 ;;		None               void
  1552 ;; Registers used:
  1553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1563 ;;Total ram usage:        4 bytes
  1564 ;; Hardware stack levels required when called:   11
  1565 ;; This function calls:
  1566 ;;		_Initialize_Screen
  1567 ;;		_drawCircle
  1568 ;;		_drawtext
  1569 ;;		_fillCircle
  1570 ;;		_init_UART
  1571 ;;		_printf
  1572 ;;		_waitHalfSecond
  1573 ;; This function is called by:
  1574 ;;		Startup code after reset
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text0
  1579  0002BE                     __ptext0:
  1580                           	opt stack 0
  1581  0002BE                     _main:
  1582                           	opt stack 20
  1583                           
  1584                           ;Lab9_sample_3.c: 293: init_UART();
  1585                           
  1586                           ;incstack = 0
  1587  0002BE  EC58  F00A         	call	_init_UART	;wreg free
  1588                           
  1589                           ;Lab9_sample_3.c: 294: OSCCON = 0x70;
  1590  0002C2  0E70               	movlw	112
  1591  0002C4  6ED3               	movwf	4051,c	;volatile
  1592                           
  1593                           ;Lab9_sample_3.c: 295: nRBPU = 0;
  1594  0002C6  9EF1               	bcf	intcon2,7,c	;volatile
  1595                           
  1596                           ;Lab9_sample_3.c: 296: TRISA = 0x00;
  1597  0002C8  0E00               	movlw	0
  1598  0002CA  6E92               	movwf	3986,c	;volatile
  1599                           
  1600                           ;Lab9_sample_3.c: 297: TRISB = 0x01;
  1601  0002CC  0E01               	movlw	1
  1602  0002CE  6E93               	movwf	3987,c	;volatile
  1603                           
  1604                           ;Lab9_sample_3.c: 298: TRISC = 0x00;
  1605  0002D0  0E00               	movlw	0
  1606  0002D2  6E94               	movwf	3988,c	;volatile
  1607                           
  1608                           ;Lab9_sample_3.c: 299: TRISD = 0x00;
  1609  0002D4  0E00               	movlw	0
  1610  0002D6  6E95               	movwf	3989,c	;volatile
  1611                           
  1612                           ;Lab9_sample_3.c: 300: TRISE = 0x00;
  1613  0002D8  0E00               	movlw	0
  1614  0002DA  6E96               	movwf	3990,c	;volatile
  1615                           
  1616                           ;Lab9_sample_3.c: 301: PORTA = 0x00;
  1617  0002DC  0E00               	movlw	0
  1618  0002DE  6E80               	movwf	3968,c	;volatile
  1619                           
  1620                           ;Lab9_sample_3.c: 302: PORTB = 0x00;
  1621  0002E0  0E00               	movlw	0
  1622  0002E2  6E81               	movwf	3969,c	;volatile
  1623                           
  1624                           ;Lab9_sample_3.c: 303: PORTC = 0x00;
  1625  0002E4  0E00               	movlw	0
  1626  0002E6  6E82               	movwf	3970,c	;volatile
  1627                           
  1628                           ;Lab9_sample_3.c: 304: PORTD = 0x00;
  1629  0002E8  0E00               	movlw	0
  1630  0002EA  6E83               	movwf	3971,c	;volatile
  1631                           
  1632                           ;Lab9_sample_3.c: 305: PORTE = 0x00;
  1633  0002EC  0E00               	movlw	0
  1634  0002EE  6E84               	movwf	3972,c	;volatile
  1635                           
  1636                           ;Lab9_sample_3.c: 307: ADCON1 = 0x0F;
  1637  0002F0  0E0F               	movlw	15
  1638  0002F2  6EC1               	movwf	4033,c	;volatile
  1639                           
  1640                           ;Lab9_sample_3.c: 310: Initialize_Screen();
  1641  0002F4  ECF9  F006         	call	_Initialize_Screen	;wreg free
  1642                           
  1643                           ;Lab9_sample_3.c: 311: INTCONbits.INT0IF = 0;
  1644  0002F8  92F2               	bcf	intcon,1,c	;volatile
  1645                           
  1646                           ;Lab9_sample_3.c: 312: INTCON2bits.INTEDG0 = 0;
  1647  0002FA  9CF1               	bcf	intcon2,6,c	;volatile
  1648                           
  1649                           ;Lab9_sample_3.c: 313: INTCONbits.INT0IE = 1;
  1650  0002FC  88F2               	bsf	intcon,4,c	;volatile
  1651                           
  1652                           ;Lab9_sample_3.c: 314: TMR1H = 0;
  1653  0002FE  0E00               	movlw	0
  1654  000300  6ECF               	movwf	4047,c	;volatile
  1655                           
  1656                           ;Lab9_sample_3.c: 315: TMR1L = 0;
  1657  000302  0E00               	movlw	0
  1658  000304  6ECE               	movwf	4046,c	;volatile
  1659                           
  1660                           ;Lab9_sample_3.c: 316: PIR1bits.TMR1IF = 0;
  1661  000306  909E               	bcf	3998,0,c	;volatile
  1662                           
  1663                           ;Lab9_sample_3.c: 317: PIE1bits.TMR1IE = 1;
  1664  000308  809D               	bsf	3997,0,c	;volatile
  1665                           
  1666                           ;Lab9_sample_3.c: 318: INTCONbits.PEIE = 1;
  1667  00030A  8CF2               	bsf	intcon,6,c	;volatile
  1668                           
  1669                           ;Lab9_sample_3.c: 319: INTCONbits.GIE = 1;
  1670  00030C  8EF2               	bsf	intcon,7,c	;volatile
  1671                           
  1672                           ;Lab9_sample_3.c: 320: nec_ok = 0;
  1673  00030E  0E00               	movlw	0
  1674  000310  6E66               	movwf	_nec_ok+1,c
  1675  000312  0E00               	movlw	0
  1676  000314  6E65               	movwf	_nec_ok,c
  1677                           
  1678                           ;Lab9_sample_3.c: 321: Nec_code = 0x0;
  1679  000316  0E00               	movlw	0
  1680  000318  6E5D               	movwf	_Nec_code,c
  1681  00031A  0E00               	movlw	0
  1682  00031C  6E5E               	movwf	_Nec_code+1,c
  1683  00031E  0E00               	movlw	0
  1684  000320  6E5F               	movwf	_Nec_code+2,c
  1685  000322  0E00               	movlw	0
  1686  000324  6E60               	movwf	_Nec_code+3,c
  1687  000326  D000               	goto	l3805
  1688  000328                     l3805:
  1689                           
  1690                           ;Lab9_sample_3.c: 324: {
  1691                           ;Lab9_sample_3.c: 327: if (nec_ok == 1)
  1692  000328  0465               	decf	_nec_ok,w,c
  1693  00032A  1066               	iorwf	_nec_ok+1,w,c
  1694  00032C  A4D8               	btfss	status,2,c
  1695  00032E  D7FC               	goto	l3805
  1696                           
  1697                           ;Lab9_sample_3.c: 328: {
  1698                           ;Lab9_sample_3.c: 329: nec_ok = 0;
  1699  000330  0E00               	movlw	0
  1700  000332  6E66               	movwf	_nec_ok+1,c
  1701  000334  0E00               	movlw	0
  1702  000336  6E65               	movwf	_nec_ok,c
  1703                           
  1704                           ;Lab9_sample_3.c: 331: Nec_code1 = (char) ((Nec_code >> 8));
  1705  000338  C05E  F069         	movff	_Nec_code+1,_Nec_code1
  1706                           
  1707                           ;Lab9_sample_3.c: 332: printf ("NEC_Code = %08lx %x\r\n", Nec_code, Nec_code1);
  1708  00033C  0EBE               	movlw	low STR_1
  1709  00033E  6E1E               	movwf	printf@f,c
  1710  000340  0EFF               	movlw	high STR_1
  1711  000342  6E1F               	movwf	printf@f+1,c
  1712  000344  C05D  F020         	movff	_Nec_code,?_printf+2
  1713  000348  C05E  F021         	movff	_Nec_code+1,?_printf+3
  1714  00034C  C05F  F022         	movff	_Nec_code+2,?_printf+4
  1715  000350  C060  F023         	movff	_Nec_code+3,?_printf+5
  1716  000354  C069  F024         	movff	_Nec_code1,?_printf+6
  1717  000358  6A25               	clrf	?_printf+7,c
  1718  00035A  EC0E  F000         	call	_printf	;wreg free
  1719                           
  1720                           ;Lab9_sample_3.c: 333: INTCONbits.INT0IE = 1;
  1721  00035E  88F2               	bsf	intcon,4,c	;volatile
  1722                           
  1723                           ;Lab9_sample_3.c: 334: INTCON2bits.INTEDG0 = 0;
  1724  000360  9CF1               	bcf	intcon2,6,c	;volatile
  1725                           
  1726                           ;Lab9_sample_3.c: 336: char found = 0xff;
  1727  000362  6846               	setf	main@found,c
  1728                           
  1729                           ;Lab9_sample_3.c: 338: for( int i = 0; i < 21; i++ )
  1730  000364  0E00               	movlw	0
  1731  000366  6E45               	movwf	main@i+1,c
  1732  000368  0E00               	movlw	0
  1733  00036A  6E44               	movwf	main@i,c
  1734  00036C                     l3821:
  1735  00036C  BE45               	btfsc	main@i+1,7,c
  1736  00036E  D008               	goto	l3825
  1737  000370  5045               	movf	main@i+1,w,c
  1738  000372  E117               	bnz	l3833
  1739  000374  0E15               	movlw	21
  1740  000376  5C44               	subwf	main@i,w,c
  1741  000378  B0D8               	btfsc	status,0,c
  1742  00037A  D013               	goto	l3833
  1743  00037C  D001               	goto	l3825
  1744  00037E  D011               	goto	l3833
  1745  000380                     l3825:
  1746                           
  1747                           ;Lab9_sample_3.c: 339: {
  1748                           ;Lab9_sample_3.c: 340: if( Nec_code1 == array1[i] )
  1749  000380  0E47               	movlw	low _array1
  1750  000382  2444               	addwf	main@i,w,c
  1751  000384  6ED9               	movwf	fsr2l,c
  1752  000386  0E00               	movlw	high _array1
  1753  000388  2045               	addwfc	main@i+1,w,c
  1754  00038A  6EDA               	movwf	fsr2h,c
  1755  00038C  5069               	movf	_Nec_code1,w,c
  1756  00038E  18DE               	xorwf	postinc2,w,c
  1757  000390  A4D8               	btfss	status,2,c
  1758  000392  D003               	goto	l3829
  1759                           
  1760                           ;Lab9_sample_3.c: 341: {
  1761                           ;Lab9_sample_3.c: 342: found = i;
  1762  000394  C044  F046         	movff	main@i,main@found
  1763  000398  D000               	goto	l3829
  1764  00039A                     l3829:
  1765  00039A  4A44               	infsnz	main@i,f,c
  1766  00039C  2A45               	incf	main@i+1,f,c
  1767  00039E  D7E6               	goto	l3821
  1768  0003A0  D000               	goto	l3833
  1769  0003A2                     l3833:
  1770                           
  1771                           ;Lab9_sample_3.c: 343: }
  1772                           ;Lab9_sample_3.c: 345: }
  1773                           ;Lab9_sample_3.c: 348: if (found != 0xff)
  1774  0003A2  2846               	incf	main@found,w,c
  1775  0003A4  B4D8               	btfsc	status,2,c
  1776  0003A6  D7C0               	goto	l3805
  1777                           
  1778                           ;Lab9_sample_3.c: 349: {
  1779                           ;Lab9_sample_3.c: 350: fillCircle(60, 80, 20, color[found]);
  1780  0003A8  0E00               	movlw	0
  1781  0003AA  6E3C               	movwf	fillCircle@x0+1,c
  1782  0003AC  0E3C               	movlw	60
  1783  0003AE  6E3B               	movwf	fillCircle@x0,c
  1784  0003B0  0E00               	movlw	0
  1785  0003B2  6E3E               	movwf	fillCircle@y0+1,c
  1786  0003B4  0E50               	movlw	80
  1787  0003B6  6E3D               	movwf	fillCircle@y0,c
  1788  0003B8  0E00               	movlw	0
  1789  0003BA  6E40               	movwf	fillCircle@r+1,c
  1790  0003BC  0E14               	movlw	20
  1791  0003BE  6E3F               	movwf	fillCircle@r,c
  1792  0003C0  5046               	movf	main@found,w,c
  1793  0003C2  0D02               	mullw	2
  1794  0003C4  0E00               	movlw	low _color
  1795  0003C6  24F3               	addwf	prodl,w,c
  1796  0003C8  6ED9               	movwf	fsr2l,c
  1797  0003CA  0E01               	movlw	high _color
  1798  0003CC  20F4               	addwfc	prodh,w,c
  1799  0003CE  6EDA               	movwf	fsr2h,c
  1800  0003D0  CFDE F041          	movff	postinc2,fillCircle@color
  1801  0003D4  CFDD F042          	movff	postdec2,fillCircle@color+1
  1802  0003D8  ECC0  F008         	call	_fillCircle	;wreg free
  1803                           
  1804                           ;Lab9_sample_3.c: 351: drawCircle(60, 80, 20, 0xFFFF);
  1805  0003DC  0E00               	movlw	0
  1806  0003DE  6E1D               	movwf	drawCircle@x0+1,c
  1807  0003E0  0E3C               	movlw	60
  1808  0003E2  6E1C               	movwf	drawCircle@x0,c
  1809  0003E4  0E00               	movlw	0
  1810  0003E6  6E1F               	movwf	drawCircle@y0+1,c
  1811  0003E8  0E50               	movlw	80
  1812  0003EA  6E1E               	movwf	drawCircle@y0,c
  1813  0003EC  0E00               	movlw	0
  1814  0003EE  6E21               	movwf	drawCircle@r+1,c
  1815  0003F0  0E14               	movlw	20
  1816  0003F2  6E20               	movwf	drawCircle@r,c
  1817  0003F4  0EFF               	movlw	255
  1818  0003F6  6E23               	movwf	drawCircle@color+1,c
  1819  0003F8  6822               	setf	drawCircle@color,c
  1820  0003FA  EC3D  F002         	call	_drawCircle	;wreg free
  1821                           
  1822                           ;Lab9_sample_3.c: 352: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1823  0003FE  0E4D               	movlw	77
  1824  000400  6E39               	movwf	drawtext@y,c
  1825  000402  5046               	movf	main@found,w,c
  1826  000404  0D04               	mullw	4
  1827  000406  0E2A               	movlw	low _txt1
  1828  000408  24F3               	addwf	prodl,w,c
  1829  00040A  6E3A               	movwf	drawtext@_text,c
  1830  00040C  0E01               	movlw	high _txt1
  1831  00040E  20F4               	addwfc	prodh,w,c
  1832  000410  6E3B               	movwf	drawtext@_text+1,c
  1833  000412  0EFF               	movlw	255
  1834  000414  6E3D               	movwf	drawtext@color+1,c
  1835  000416  683C               	setf	drawtext@color,c
  1836  000418  0E00               	movlw	0
  1837  00041A  6E3F               	movwf	drawtext@bg+1,c
  1838  00041C  0E00               	movlw	0
  1839  00041E  6E3E               	movwf	drawtext@bg,c
  1840  000420  0E01               	movlw	1
  1841  000422  6E40               	movwf	drawtext@size,c
  1842  000424  0E34               	movlw	52
  1843  000426  EC8D  F005         	call	_drawtext
  1844                           
  1845                           ;Lab9_sample_3.c: 353: PORTB = D1[found];
  1846  00042A  5046               	movf	main@found,w,c
  1847  00042C  0D01               	mullw	1
  1848  00042E  0E80               	movlw	low _D1
  1849  000430  24F3               	addwf	prodl,w,c
  1850  000432  6ED9               	movwf	fsr2l,c
  1851  000434  0E00               	movlw	high _D1
  1852  000436  20F4               	addwfc	prodh,w,c
  1853  000438  6EDA               	movwf	fsr2h,c
  1854  00043A  50DF               	movf	indf2,w,c
  1855  00043C  6E81               	movwf	3969,c	;volatile
  1856                           
  1857                           ;Lab9_sample_3.c: 354: PORTC = (D3[found] & 0x07);
  1858  00043E  5046               	movf	main@found,w,c
  1859  000440  0D01               	mullw	1
  1860  000442  0EAA               	movlw	low _D3
  1861  000444  24F3               	addwf	prodl,w,c
  1862  000446  6ED9               	movwf	fsr2l,c
  1863  000448  0E00               	movlw	high _D3
  1864  00044A  20F4               	addwfc	prodh,w,c
  1865  00044C  6EDA               	movwf	fsr2h,c
  1866  00044E  50DF               	movf	indf2,w,c
  1867  000450  0B07               	andlw	7
  1868  000452  6E82               	movwf	3970,c	;volatile
  1869                           
  1870                           ;Lab9_sample_3.c: 355: PORTD = PORTD & 0x1C | (D2[found]);
  1871  000454  5046               	movf	main@found,w,c
  1872  000456  0D01               	mullw	1
  1873  000458  0E95               	movlw	low _D2
  1874  00045A  24F3               	addwf	prodl,w,c
  1875  00045C  6ED9               	movwf	fsr2l,c
  1876  00045E  0E00               	movlw	high _D2
  1877  000460  20F4               	addwfc	prodh,w,c
  1878  000462  6EDA               	movwf	fsr2h,c
  1879  000464  50DF               	movf	indf2,w,c
  1880  000466  6E43               	movwf	??_main& (0+255),c
  1881  000468  5083               	movf	3971,w,c	;volatile
  1882  00046A  0B1C               	andlw	28
  1883  00046C  1043               	iorwf	??_main,w,c
  1884  00046E  6E83               	movwf	3971,c	;volatile
  1885                           
  1886                           ;Lab9_sample_3.c: 356: waitHalfSecond();
  1887  000470  ECD5  F009         	call	_waitHalfSecond	;wreg free
  1888  000474  D759               	goto	l3805
  1889  000476  EF0C  F000         	goto	start
  1890  00047A                     __end_of_main:
  1891                           	opt stack 0
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           prodh	equ	0xFF4
  1897                           prodl	equ	0xFF3
  1898                           intcon	equ	0xFF2
  1899                           intcon2	equ	0xFF1
  1900                           postinc0	equ	0xFEE
  1901                           wreg	equ	0xFE8
  1902                           postdec1	equ	0xFE5
  1903                           fsr1l	equ	0xFE1
  1904                           indf2	equ	0xFDF
  1905                           postinc2	equ	0xFDE
  1906                           postdec2	equ	0xFDD
  1907                           fsr2h	equ	0xFDA
  1908                           fsr2l	equ	0xFD9
  1909                           status	equ	0xFD8
  1910                           
  1911 ;; *************** function _waitHalfSecond *****************
  1912 ;; Defined at:
  1913 ;;		line 396 in file "Lab9_sample_3.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;		None
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  i               2   16[COMRAM] int 
  1918 ;; Return value:  Size  Location     Type
  1919 ;;		None               void
  1920 ;; Registers used:
  1921 ;;		wreg, status,2, status,0, cstack
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;Total ram usage:        2 bytes
  1932 ;; Hardware stack levels used:    1
  1933 ;; Hardware stack levels required when called:    4
  1934 ;; This function calls:
  1935 ;;		_Activate_Buzzer
  1936 ;;		_Deactivate_Buzzer
  1937 ;; This function is called by:
  1938 ;;		_main
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text1
  1943  0013AA                     __ptext1:
  1944                           	opt stack 0
  1945  0013AA                     _waitHalfSecond:
  1946                           	opt stack 26
  1947                           
  1948                           ;Lab9_sample_3.c: 398: PORTEbits.RE1 = 1;
  1949                           
  1950                           ;incstack = 0
  1951  0013AA  8284               	bsf	3972,1,c	;volatile
  1952                           
  1953                           ;Lab9_sample_3.c: 399: Activate_Buzzer();
  1954  0013AC  EC6C  F00A         	call	_Activate_Buzzer	;wreg free
  1955                           
  1956                           ;Lab9_sample_3.c: 400: for(int i = 0; i < 8800; i++ );
  1957  0013B0  0E00               	movlw	0
  1958  0013B2  6E12               	movwf	waitHalfSecond@i+1,c
  1959  0013B4  0E00               	movlw	0
  1960  0013B6  6E11               	movwf	waitHalfSecond@i,c
  1961  0013B8                     l2831:
  1962  0013B8  BE12               	btfsc	waitHalfSecond@i+1,7,c
  1963  0013BA  D008               	goto	l2835
  1964  0013BC  0E60               	movlw	96
  1965  0013BE  5C11               	subwf	waitHalfSecond@i,w,c
  1966  0013C0  0E22               	movlw	34
  1967  0013C2  5812               	subwfb	waitHalfSecond@i+1,w,c
  1968  0013C4  B0D8               	btfsc	status,0,c
  1969  0013C6  D005               	goto	l2839
  1970  0013C8  D001               	goto	l2835
  1971  0013CA  D003               	goto	l2839
  1972  0013CC                     l2835:
  1973  0013CC  4A11               	infsnz	waitHalfSecond@i,f,c
  1974  0013CE  2A12               	incf	waitHalfSecond@i+1,f,c
  1975  0013D0  D7F3               	goto	l2831
  1976  0013D2                     l2839:
  1977                           
  1978                           ;Lab9_sample_3.c: 401: Deactivate_Buzzer();
  1979  0013D2  EC9B  F00A         	call	_Deactivate_Buzzer	;wreg free
  1980                           
  1981                           ;Lab9_sample_3.c: 402: PORTEbits.RE1 = 0;
  1982  0013D6  9284               	bcf	3972,1,c	;volatile
  1983  0013D8  0012               	return		;funcret
  1984  0013DA                     __end_of_waitHalfSecond:
  1985                           	opt stack 0
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           prodh	equ	0xFF4
  1991                           prodl	equ	0xFF3
  1992                           intcon	equ	0xFF2
  1993                           intcon2	equ	0xFF1
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           postdec1	equ	0xFE5
  1997                           fsr1l	equ	0xFE1
  1998                           indf2	equ	0xFDF
  1999                           postinc2	equ	0xFDE
  2000                           postdec2	equ	0xFDD
  2001                           fsr2h	equ	0xFDA
  2002                           fsr2l	equ	0xFD9
  2003                           status	equ	0xFD8
  2004                           
  2005 ;; *************** function _Deactivate_Buzzer *****************
  2006 ;; Defined at:
  2007 ;;		line 390 in file "Lab9_sample_3.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;		None               void
  2014 ;; Registers used:
  2015 ;;		wreg, status,2
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;Total ram usage:        0 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    3
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_waitHalfSecond
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text2
  2036  001536                     __ptext2:
  2037                           	opt stack 0
  2038  001536                     _Deactivate_Buzzer:
  2039                           	opt stack 26
  2040                           
  2041                           ;Lab9_sample_3.c: 392: CCP2CON = 0x0;
  2042                           
  2043                           ;incstack = 0
  2044  001536  0E00               	movlw	0
  2045  001538  6EBA               	movwf	4026,c	;volatile
  2046                           
  2047                           ;Lab9_sample_3.c: 393: PORTBbits.RB3 = 0;
  2048  00153A  9681               	bcf	3969,3,c	;volatile
  2049  00153C  0012               	return		;funcret
  2050  00153E                     __end_of_Deactivate_Buzzer:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           prodh	equ	0xFF4
  2057                           prodl	equ	0xFF3
  2058                           intcon	equ	0xFF2
  2059                           intcon2	equ	0xFF1
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           postdec1	equ	0xFE5
  2063                           fsr1l	equ	0xFE1
  2064                           indf2	equ	0xFDF
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _Activate_Buzzer *****************
  2072 ;; Defined at:
  2073 ;;		line 383 in file "Lab9_sample_3.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;		None               void
  2080 ;; Registers used:
  2081 ;;		wreg, status,2
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    3
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_waitHalfSecond
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text3
  2102  0014D8                     __ptext3:
  2103                           	opt stack 0
  2104  0014D8                     _Activate_Buzzer:
  2105                           	opt stack 26
  2106                           
  2107                           ;Lab9_sample_3.c: 385: PR2 = 0b11111001;
  2108                           
  2109                           ;incstack = 0
  2110  0014D8  0EF9               	movlw	249
  2111  0014DA  6ECB               	movwf	4043,c	;volatile
  2112                           
  2113                           ;Lab9_sample_3.c: 386: T2CON = 0b00000101;
  2114  0014DC  0E05               	movlw	5
  2115  0014DE  6ECA               	movwf	4042,c	;volatile
  2116                           
  2117                           ;Lab9_sample_3.c: 387: CCPR2L = 0b01001010;
  2118  0014E0  0E4A               	movlw	74
  2119  0014E2  6EBB               	movwf	4027,c	;volatile
  2120                           
  2121                           ;Lab9_sample_3.c: 388: CCP2CON = 0b00111100;
  2122  0014E4  0E3C               	movlw	60
  2123  0014E6  6EBA               	movwf	4026,c	;volatile
  2124  0014E8  0012               	return		;funcret
  2125  0014EA                     __end_of_Activate_Buzzer:
  2126                           	opt stack 0
  2127                           tblptru	equ	0xFF8
  2128                           tblptrh	equ	0xFF7
  2129                           tblptrl	equ	0xFF6
  2130                           tablat	equ	0xFF5
  2131                           prodh	equ	0xFF4
  2132                           prodl	equ	0xFF3
  2133                           intcon	equ	0xFF2
  2134                           intcon2	equ	0xFF1
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           postdec1	equ	0xFE5
  2138                           fsr1l	equ	0xFE1
  2139                           indf2	equ	0xFDF
  2140                           postinc2	equ	0xFDE
  2141                           postdec2	equ	0xFDD
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _printf *****************
  2147 ;; Defined at:
  2148 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  f               2   29[COMRAM] PTR const unsigned char 
  2151 ;;		 -> STR_1(22), 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  idx             1   41[COMRAM] unsigned char 
  2154 ;;  val             4   44[COMRAM] unsigned long 
  2155 ;;  tmpval          4    0        struct .
  2156 ;;  cp              3    0        PTR const unsigned char 
  2157 ;;  width           2   51[COMRAM] int 
  2158 ;;  ap              2   48[COMRAM] PTR void [1]
  2159 ;;		 -> ?_printf(2), 
  2160 ;;  prec            2   42[COMRAM] int 
  2161 ;;  len             2    0        unsigned int 
  2162 ;;  c               1   53[COMRAM] char 
  2163 ;;  flag            1   50[COMRAM] unsigned char 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  2   29[COMRAM] int 
  2166 ;; Registers used:
  2167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2173 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;Total ram usage:       25 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    4
  2180 ;; This function calls:
  2181 ;;		___lldiv
  2182 ;;		___wmul
  2183 ;;		_isdigit
  2184 ;;		_putch
  2185 ;; This function is called by:
  2186 ;;		_main
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text4
  2191  00001C                     __ptext4:
  2192                           	opt stack 0
  2193  00001C                     _printf:
  2194                           	opt stack 26
  2195                           
  2196                           ;doprnt.c: 466: va_list ap;
  2197                           ;doprnt.c: 499: signed char c;
  2198                           ;doprnt.c: 501: int width;
  2199                           ;doprnt.c: 504: int prec;
  2200                           ;doprnt.c: 508: unsigned char flag;
  2201                           ;doprnt.c: 523: union {
  2202                           ;doprnt.c: 524: unsigned long vd;
  2203                           ;doprnt.c: 525: double integ;
  2204                           ;doprnt.c: 526: } tmpval;
  2205                           ;doprnt.c: 528: unsigned long val;
  2206                           ;doprnt.c: 529: unsigned len;
  2207                           ;doprnt.c: 530: const char * cp;
  2208                           ;doprnt.c: 533: *ap = __va_start();
  2209                           
  2210                           ;incstack = 0
  2211  00001C  0E20               	movlw	low (?_printf+2)
  2212  00001E  6E31               	movwf	printf@ap,c
  2213  000020  0E00               	movlw	high (?_printf+2)
  2214  000022  6E32               	movwf	printf@ap+1,c
  2215                           
  2216                           ;doprnt.c: 536: while(c = *f++) {
  2217  000024  D13D               	goto	l3677
  2218  000026                     l3595:
  2219                           
  2220                           ;doprnt.c: 538: if(c != '%')
  2221  000026  0E25               	movlw	37
  2222  000028  1836               	xorwf	printf@c,w,c
  2223  00002A  B4D8               	btfsc	status,2,c
  2224  00002C  D004               	goto	l3599
  2225                           
  2226                           ;doprnt.c: 540: {
  2227                           ;doprnt.c: 541: (putch(c) );
  2228  00002E  5036               	movf	printf@c,w,c
  2229  000030  EC8E  F00A         	call	_putch
  2230                           
  2231                           ;doprnt.c: 542: continue;
  2232  000034  D135               	goto	l3677
  2233  000036                     l3599:
  2234                           
  2235                           ;doprnt.c: 543: }
  2236                           ;doprnt.c: 546: width = 0;
  2237  000036  0E00               	movlw	0
  2238  000038  6E35               	movwf	printf@width+1,c
  2239  00003A  0E00               	movlw	0
  2240  00003C  6E34               	movwf	printf@width,c
  2241                           
  2242                           ;doprnt.c: 548: flag = 0;
  2243  00003E  0E00               	movlw	0
  2244  000040  6E33               	movwf	printf@flag,c
  2245                           
  2246                           ;doprnt.c: 551: switch(*f) {
  2247                           
  2248                           ;doprnt.c: 550: for(;;) {
  2249  000042  D005               	goto	l3605
  2250  000044                     l3601:
  2251                           
  2252                           ;doprnt.c: 580: flag |= 0x04;
  2253  000044  8433               	bsf	printf@flag,2,c
  2254                           
  2255                           ;doprnt.c: 581: f++;
  2256  000046  4A1E               	infsnz	printf@f,f,c
  2257  000048  2A1F               	incf	printf@f+1,f,c
  2258                           
  2259                           ;doprnt.c: 582: continue;
  2260  00004A  D001               	goto	l3605
  2261                           
  2262                           ;doprnt.c: 584: }
  2263  00004C  D00B               	goto	l3607
  2264  00004E                     l3605:
  2265  00004E  C01E  FFF6         	movff	printf@f,tblptrl
  2266  000052  C01F  FFF7         	movff	printf@f+1,tblptrh
  2267  000056                     	if	0	;tblptru may be non-zero
  2268  000056                     	endif
  2269  000056                     	if	0	;tblptru may be non-zero
  2270  000056                     	endif
  2271  000056  0008               	tblrd		*
  2272  000058  50F5               	movf	tablat,w,c
  2273                           
  2274                           ; Switch size 1, requested type "space"
  2275                           ; Number of cases is 1, Range of values is 48 to 48
  2276                           ; switch strategies available:
  2277                           ; Name         Instructions Cycles
  2278                           ; simple_byte            4     3 (average)
  2279                           ;	Chosen strategy is simple_byte
  2280  00005A  0A30               	xorlw	48	; case 48
  2281  00005C  B4D8               	btfsc	status,2,c
  2282  00005E  D7F2               	goto	l3601
  2283                           
  2284                           ;doprnt.c: 585: break;
  2285  000060  D001               	goto	l3607
  2286                           
  2287                           ;doprnt.c: 586: }
  2288  000062  D7F5               	goto	l3605
  2289  000064                     l3607:
  2290                           
  2291                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2292  000064  C01E  FFF6         	movff	printf@f,tblptrl
  2293  000068  C01F  FFF7         	movff	printf@f+1,tblptrh
  2294  00006C                     	if	0	;tblptru may be non-zero
  2295  00006C                     	endif
  2296  00006C                     	if	0	;tblptru may be non-zero
  2297  00006C                     	endif
  2298  00006C  0008               	tblrd		*
  2299  00006E  50F5               	movf	tablat,w,c
  2300  000070  EC2E  F00A         	call	_isdigit
  2301  000074  A0D8               	btfss	status,0,c
  2302  000076  D03B               	goto	l3623
  2303                           
  2304                           ;doprnt.c: 598: width = 0;
  2305  000078  0E00               	movlw	0
  2306  00007A  6E35               	movwf	printf@width+1,c
  2307  00007C  0E00               	movlw	0
  2308  00007E  6E34               	movwf	printf@width,c
  2309  000080  D000               	goto	l3611
  2310  000082                     l3611:
  2311                           
  2312                           ;doprnt.c: 600: width *= 10;
  2313  000082  C034  F011         	movff	printf@width,___wmul@multiplier
  2314  000086  C035  F012         	movff	printf@width+1,___wmul@multiplier+1
  2315  00008A  0E00               	movlw	0
  2316  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2317  00008E  0E0A               	movlw	10
  2318  000090  6E13               	movwf	___wmul@multiplicand,c
  2319  000092  EC1A  F00A         	call	___wmul	;wreg free
  2320  000096  C011  F034         	movff	?___wmul,printf@width
  2321  00009A  C012  F035         	movff	?___wmul+1,printf@width+1
  2322                           
  2323                           ;doprnt.c: 601: width += *f++ - '0';
  2324  00009E  0ED0               	movlw	208
  2325  0000A0  6E26               	movwf	??_printf& (0+255),c
  2326  0000A2  0EFF               	movlw	255
  2327  0000A4  6E27               	movwf	(??_printf+1)& (0+255),c
  2328  0000A6  C01E  FFF6         	movff	printf@f,tblptrl
  2329  0000AA  C01F  FFF7         	movff	printf@f+1,tblptrh
  2330  0000AE                     	if	0	;tblptru may be non-zero
  2331  0000AE                     	endif
  2332  0000AE                     	if	0	;tblptru may be non-zero
  2333  0000AE                     	endif
  2334  0000AE  0008               	tblrd		*
  2335  0000B0  50F5               	movf	tablat,w,c
  2336  0000B2  6E28               	movwf	(??_printf+2)& (0+255),c
  2337  0000B4  6A29               	clrf	(??_printf+3)& (0+255),c
  2338  0000B6  5026               	movf	??_printf,w,c
  2339  0000B8  2628               	addwf	??_printf+2,f,c
  2340  0000BA  5027               	movf	??_printf+1,w,c
  2341  0000BC  2229               	addwfc	??_printf+3,f,c
  2342  0000BE  5028               	movf	??_printf+2,w,c
  2343  0000C0  2634               	addwf	printf@width,f,c
  2344  0000C2  5029               	movf	??_printf+3,w,c
  2345  0000C4  2235               	addwfc	printf@width+1,f,c
  2346  0000C6  4A1E               	infsnz	printf@f,f,c
  2347  0000C8  2A1F               	incf	printf@f+1,f,c
  2348                           
  2349                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2350  0000CA  C01E  FFF6         	movff	printf@f,tblptrl
  2351  0000CE  C01F  FFF7         	movff	printf@f+1,tblptrh
  2352  0000D2                     	if	0	;tblptru may be non-zero
  2353  0000D2                     	endif
  2354  0000D2                     	if	0	;tblptru may be non-zero
  2355  0000D2                     	endif
  2356  0000D2  0008               	tblrd		*
  2357  0000D4  50F5               	movf	tablat,w,c
  2358  0000D6  EC2E  F00A         	call	_isdigit
  2359  0000DA  A0D8               	btfss	status,0,c
  2360  0000DC  D008               	goto	l3623
  2361  0000DE  D7D1               	goto	l3611
  2362                           
  2363                           ;doprnt.c: 635: switch(c = *f++) {
  2364                           
  2365                           ;doprnt.c: 608: }
  2366                           ;doprnt.c: 633: loop:
  2367  0000E0  D006               	goto	l3623
  2368                           
  2369                           ;doprnt.c: 638: goto alldone;
  2370                           
  2371                           ;doprnt.c: 637: case 0:
  2372  0000E2  D0EC               	goto	l443
  2373  0000E4                     l3619:
  2374                           
  2375                           ;doprnt.c: 643: flag |= 0x10;
  2376  0000E4  8833               	bsf	printf@flag,4,c
  2377                           
  2378                           ;doprnt.c: 644: goto loop;
  2379  0000E6  D003               	goto	l3623
  2380                           
  2381                           ;doprnt.c: 723: break;
  2382                           
  2383                           ;doprnt.c: 718: case 'x':
  2384  0000E8  D015               	goto	l422
  2385                           
  2386                           ;doprnt.c: 813: continue;
  2387                           
  2388                           ;doprnt.c: 802: default:
  2389  0000EA  D0DA               	goto	l3677
  2390                           
  2391                           ;doprnt.c: 822: }
  2392  0000EC  D013               	goto	l422
  2393  0000EE                     l3623:
  2394  0000EE  C01E  FFF6         	movff	printf@f,tblptrl
  2395  0000F2  C01F  FFF7         	movff	printf@f+1,tblptrh
  2396  0000F6  4A1E               	infsnz	printf@f,f,c
  2397  0000F8  2A1F               	incf	printf@f+1,f,c
  2398  0000FA                     	if	0	;tblptru may be non-zero
  2399  0000FA                     	endif
  2400  0000FA                     	if	0	;tblptru may be non-zero
  2401  0000FA                     	endif
  2402  0000FA  0008               	tblrd		*
  2403  0000FC  CFF5 F036          	movff	tablat,printf@c
  2404  000100  5036               	movf	printf@c,w,c
  2405                           
  2406                           ; Switch size 1, requested type "space"
  2407                           ; Number of cases is 3, Range of values is 0 to 120
  2408                           ; switch strategies available:
  2409                           ; Name         Instructions Cycles
  2410                           ; simple_byte           10     6 (average)
  2411                           ;	Chosen strategy is simple_byte
  2412  000102  0A00               	xorlw	0	; case 0
  2413  000104  B4D8               	btfsc	status,2,c
  2414  000106  D0DA               	goto	l443
  2415  000108  0A6C               	xorlw	108	; case 108
  2416  00010A  B4D8               	btfsc	status,2,c
  2417  00010C  D7EB               	goto	l3619
  2418  00010E  0A14               	xorlw	20	; case 120
  2419  000110  A4D8               	btfss	status,2,c
  2420  000112  D0C6               	goto	l3677
  2421  000114                     l422:
  2422                           
  2423                           ;doprnt.c: 1273: {
  2424                           ;doprnt.c: 1281: if(flag & 0x10)
  2425  000114  A833               	btfss	printf@flag,4,c
  2426  000116  D00E               	goto	l3629
  2427                           
  2428                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2429  000118  C031  FFD9         	movff	printf@ap,fsr2l
  2430  00011C  C032  FFDA         	movff	printf@ap+1,fsr2h
  2431  000120  CFDE F02D          	movff	postinc2,printf@val
  2432  000124  CFDE F02E          	movff	postinc2,printf@val+1
  2433  000128  CFDE F02F          	movff	postinc2,printf@val+2
  2434  00012C  CFDE F030          	movff	postinc2,printf@val+3
  2435  000130  0E04               	movlw	4
  2436  000132  D00F               	goto	L1
  2437  000134                     l3629:
  2438                           
  2439                           ;doprnt.c: 1283: else
  2440                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2441  000134  C031  FFD9         	movff	printf@ap,fsr2l
  2442  000138  C032  FFDA         	movff	printf@ap+1,fsr2h
  2443  00013C  CFDE F026          	movff	postinc2,??_printf
  2444  000140  CFDD F027          	movff	postdec2,??_printf+1
  2445  000144  C026  F02D         	movff	??_printf,printf@val
  2446  000148  C027  F02E         	movff	??_printf+1,printf@val+1
  2447  00014C  6A2F               	clrf	printf@val+2,c
  2448  00014E  6A30               	clrf	printf@val+3,c
  2449  000150  0E02               	movlw	2
  2450  000152                     L1:
  2451  000152  2631               	addwf	printf@ap,f,c
  2452  000154  0E00               	movlw	0
  2453  000156  2232               	addwfc	printf@ap+1,f,c
  2454  000158  D000               	goto	l3633
  2455  00015A                     l3633:
  2456                           
  2457                           ;doprnt.c: 1287: }
  2458                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2459  00015A  0E01               	movlw	1
  2460  00015C  6E36               	movwf	printf@c,c
  2461  00015E                     l3635:
  2462  00015E  0E08               	movlw	8
  2463  000160  1836               	xorwf	printf@c,w,c
  2464  000162  B4D8               	btfsc	status,2,c
  2465  000164  D01C               	goto	l3647
  2466  000166  D001               	goto	l3639
  2467  000168  D01A               	goto	l3647
  2468  00016A                     l3639:
  2469                           
  2470                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2471  00016A  5036               	movf	printf@c,w,c
  2472  00016C  0D04               	mullw	4
  2473  00016E  0E9E               	movlw	low _hexpowers
  2474  000170  24F3               	addwf	prodl,w,c
  2475  000172  6EF6               	movwf	tblptrl,c
  2476  000174  0EFF               	movlw	high _hexpowers
  2477  000176  20F4               	addwfc	prodh,w,c
  2478  000178  6EF7               	movwf	tblptrh,c
  2479  00017A                     	if	0	;There are less than 3 active tblptr bytes
  2480  00017A                     	endif
  2481  00017A  0009               	tblrd		*+
  2482  00017C  50F5               	movf	tablat,w,c
  2483  00017E  5C2D               	subwf	printf@val,w,c
  2484  000180  0009               	tblrd		*+
  2485  000182  50F5               	movf	tablat,w,c
  2486  000184  582E               	subwfb	printf@val+1,w,c
  2487  000186  0009               	tblrd		*+
  2488  000188  50F5               	movf	tablat,w,c
  2489  00018A  582F               	subwfb	printf@val+2,w,c
  2490  00018C  0009               	tblrd		*+
  2491  00018E  50F5               	movf	tablat,w,c
  2492  000190  5830               	subwfb	printf@val+3,w,c
  2493  000192  A0D8               	btfss	status,0,c
  2494  000194  D004               	goto	l3647
  2495  000196  D001               	goto	l3643
  2496                           
  2497                           ;doprnt.c: 1318: break;
  2498  000198  D002               	goto	l3647
  2499  00019A                     l3643:
  2500  00019A  2A36               	incf	printf@c,f,c
  2501  00019C  D7E0               	goto	l3635
  2502  00019E                     l3647:
  2503                           
  2504                           ;doprnt.c: 1381: if(width > c)
  2505  00019E  0E80               	movlw	128
  2506  0001A0  BE36               	btfsc	printf@c,7,c
  2507  0001A2  0E7F               	movlw	127
  2508  0001A4  6E26               	movwf	??_printf& (0+255),c
  2509  0001A6  5034               	movf	printf@width,w,c
  2510  0001A8  5C36               	subwf	printf@c,w,c
  2511  0001AA  5035               	movf	printf@width+1,w,c
  2512  0001AC  0A80               	xorlw	128
  2513  0001AE  5826               	subwfb	??_printf& (0+255),w,c
  2514  0001B0  B0D8               	btfsc	status,0,c
  2515  0001B2  D007               	goto	l3651
  2516                           
  2517                           ;doprnt.c: 1382: width -= c;
  2518  0001B4  5036               	movf	printf@c,w,c
  2519  0001B6  5E34               	subwf	printf@width,f,c
  2520  0001B8  0E00               	movlw	0
  2521  0001BA  BE36               	btfsc	printf@c,7,c
  2522  0001BC  0EFF               	movlw	255
  2523  0001BE  5A35               	subwfb	printf@width+1,f,c
  2524  0001C0  D005               	goto	l3653
  2525  0001C2                     l3651:
  2526                           
  2527                           ;doprnt.c: 1383: else
  2528                           ;doprnt.c: 1384: width = 0;
  2529  0001C2  0E00               	movlw	0
  2530  0001C4  6E35               	movwf	printf@width+1,c
  2531  0001C6  0E00               	movlw	0
  2532  0001C8  6E34               	movwf	printf@width,c
  2533  0001CA  D000               	goto	l3653
  2534  0001CC                     l3653:
  2535                           
  2536                           ;doprnt.c: 1387: if(flag & 0x04) {
  2537  0001CC  A433               	btfss	printf@flag,2,c
  2538  0001CE  D010               	goto	l3661
  2539                           
  2540                           ;doprnt.c: 1415: if(width)
  2541  0001D0  5034               	movf	printf@width,w,c
  2542  0001D2  1035               	iorwf	printf@width+1,w,c
  2543  0001D4  B4D8               	btfsc	status,2,c
  2544  0001D6  D01C               	goto	l3667
  2545  0001D8                     l3657:
  2546                           
  2547                           ;doprnt.c: 1417: (putch('0') );
  2548  0001D8  0E30               	movlw	48
  2549  0001DA  EC8E  F00A         	call	_putch
  2550                           
  2551                           ;doprnt.c: 1418: while(--width);
  2552  0001DE  0634               	decf	printf@width,f,c
  2553  0001E0  A0D8               	btfss	status,0,c
  2554  0001E2  0635               	decf	printf@width+1,f,c
  2555  0001E4  5034               	movf	printf@width,w,c
  2556  0001E6  1035               	iorwf	printf@width+1,w,c
  2557  0001E8  B4D8               	btfsc	status,2,c
  2558  0001EA  D012               	goto	l3667
  2559  0001EC  D7F5               	goto	l3657
  2560                           
  2561                           ;doprnt.c: 1420: } else
  2562  0001EE  D010               	goto	l3667
  2563  0001F0                     l3661:
  2564                           
  2565                           ;doprnt.c: 1422: {
  2566                           ;doprnt.c: 1424: if(width
  2567                           ;doprnt.c: 1428: )
  2568  0001F0  5034               	movf	printf@width,w,c
  2569  0001F2  1035               	iorwf	printf@width+1,w,c
  2570  0001F4  B4D8               	btfsc	status,2,c
  2571  0001F6  D00C               	goto	l3667
  2572  0001F8                     l3663:
  2573                           
  2574                           ;doprnt.c: 1430: (putch(' ') );
  2575  0001F8  0E20               	movlw	32
  2576  0001FA  EC8E  F00A         	call	_putch
  2577                           
  2578                           ;doprnt.c: 1431: while(--width);
  2579  0001FE  0634               	decf	printf@width,f,c
  2580  000200  A0D8               	btfss	status,0,c
  2581  000202  0635               	decf	printf@width+1,f,c
  2582  000204  5034               	movf	printf@width,w,c
  2583  000206  1035               	iorwf	printf@width+1,w,c
  2584  000208  B4D8               	btfsc	status,2,c
  2585  00020A  D002               	goto	l3667
  2586  00020C  D7F5               	goto	l3663
  2587  00020E  D000               	goto	l3667
  2588  000210                     l3667:
  2589                           
  2590                           ;doprnt.c: 1469: }
  2591                           ;doprnt.c: 1472: prec = c;
  2592  000210  5036               	movf	printf@c,w,c
  2593  000212  6E2B               	movwf	printf@prec,c
  2594  000214  6A2C               	clrf	printf@prec+1,c
  2595  000216  BE2B               	btfsc	printf@prec,7,c
  2596  000218  062C               	decf	printf@prec+1,f,c
  2597                           
  2598                           ;doprnt.c: 1474: while(prec--) {
  2599  00021A  D038               	goto	l3675
  2600  00021C                     l3669:
  2601                           
  2602                           ;doprnt.c: 1478: {
  2603                           ;doprnt.c: 1499: {
  2604                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2605  00021C  C02D  F011         	movff	printf@val,___lldiv@dividend
  2606  000220  C02E  F012         	movff	printf@val+1,___lldiv@dividend+1
  2607  000224  C02F  F013         	movff	printf@val+2,___lldiv@dividend+2
  2608  000228  C030  F014         	movff	printf@val+3,___lldiv@dividend+3
  2609  00022C  C02B  F026         	movff	printf@prec,??_printf
  2610  000230  C02C  F027         	movff	printf@prec+1,??_printf+1
  2611  000234  90D8               	bcf	status,0,c
  2612  000236  3626               	rlcf	??_printf,f,c
  2613  000238  3627               	rlcf	??_printf+1,f,c
  2614  00023A  90D8               	bcf	status,0,c
  2615  00023C  3626               	rlcf	??_printf,f,c
  2616  00023E  3627               	rlcf	??_printf+1,f,c
  2617  000240  0E9E               	movlw	low _hexpowers
  2618  000242  2426               	addwf	??_printf,w,c
  2619  000244  6EF6               	movwf	tblptrl,c
  2620  000246  0EFF               	movlw	high _hexpowers
  2621  000248  2027               	addwfc	??_printf+1,w,c
  2622  00024A  6EF7               	movwf	tblptrh,c
  2623  00024C                     	if	0	;There are less than 3 active tblptr bytes
  2624  00024C                     	endif
  2625  00024C  0009               	tblrd		*+
  2626  00024E  CFF5 F015          	movff	tablat,___lldiv@divisor
  2627  000252  0009               	tblrd		*+
  2628  000254  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2629  000258  0009               	tblrd		*+
  2630  00025A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2631  00025E  000A               	tblrd		*-
  2632  000260  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2633  000264  EC40  F007         	call	___lldiv	;wreg free
  2634  000268  5011               	movf	?___lldiv,w,c
  2635  00026A  0B0F               	andlw	15
  2636  00026C  6E2A               	movwf	printf@idx,c
  2637                           
  2638                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2639  00026E  502A               	movf	printf@idx,w,c
  2640  000270  0D01               	mullw	1
  2641  000272  0EE8               	movlw	low STR_4
  2642  000274  24F3               	addwf	prodl,w,c
  2643  000276  6EF6               	movwf	tblptrl,c
  2644  000278  0EFF               	movlw	high STR_4
  2645  00027A  20F4               	addwfc	prodh,w,c
  2646  00027C  6EF7               	movwf	tblptrh,c
  2647  00027E                     	if	0	;There are less than 3 active tblptr bytes
  2648  00027E                     	endif
  2649  00027E  0008               	tblrd		*
  2650  000280  CFF5 F036          	movff	tablat,printf@c
  2651                           
  2652                           ;doprnt.c: 1508: }
  2653                           ;doprnt.c: 1523: }
  2654                           ;doprnt.c: 1524: (putch(c) );
  2655  000284  5036               	movf	printf@c,w,c
  2656  000286  EC8E  F00A         	call	_putch
  2657  00028A  D000               	goto	l3675
  2658  00028C                     l3675:
  2659  00028C  062B               	decf	printf@prec,f,c
  2660  00028E  A0D8               	btfss	status,0,c
  2661  000290  062C               	decf	printf@prec+1,f,c
  2662  000292  282B               	incf	printf@prec,w,c
  2663  000294  E1C3               	bnz	l3669
  2664  000296  282C               	incf	printf@prec+1,w,c
  2665  000298  B4D8               	btfsc	status,2,c
  2666  00029A  D002               	goto	l3677
  2667  00029C  D7BF               	goto	l3669
  2668  00029E  D000               	goto	l3677
  2669  0002A0                     l3677:
  2670  0002A0  C01E  FFF6         	movff	printf@f,tblptrl
  2671  0002A4  C01F  FFF7         	movff	printf@f+1,tblptrh
  2672  0002A8  4A1E               	infsnz	printf@f,f,c
  2673  0002AA  2A1F               	incf	printf@f+1,f,c
  2674  0002AC                     	if	0	;tblptru may be non-zero
  2675  0002AC                     	endif
  2676  0002AC                     	if	0	;tblptru may be non-zero
  2677  0002AC                     	endif
  2678  0002AC  0008               	tblrd		*
  2679  0002AE  CFF5 F036          	movff	tablat,printf@c
  2680  0002B2  5036               	movf	printf@c,w,c
  2681  0002B4  B4D8               	btfsc	status,2,c
  2682  0002B6  D002               	goto	l443
  2683  0002B8  D6B6               	goto	l3595
  2684  0002BA  D000               	goto	l443
  2685  0002BC                     l443:
  2686  0002BC  0012               	return		;funcret
  2687  0002BE                     __end_of_printf:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           intcon	equ	0xFF2
  2696                           intcon2	equ	0xFF1
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           postdec1	equ	0xFE5
  2700                           fsr1l	equ	0xFE1
  2701                           indf2	equ	0xFDF
  2702                           postinc2	equ	0xFDE
  2703                           postdec2	equ	0xFDD
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _putch *****************
  2709 ;; Defined at:
  2710 ;;		line 146 in file "Lab9_sample_3.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  c               1    wreg     unsigned char 
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  c               1   16[COMRAM] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;		None               void
  2717 ;; Registers used:
  2718 ;;		wreg
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;Total ram usage:        1 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    3
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_printf
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text5
  2739  00151C                     __ptext5:
  2740                           	opt stack 0
  2741  00151C                     _putch:
  2742                           	opt stack 26
  2743                           
  2744                           ;incstack = 0
  2745                           ;putch@c stored from wreg
  2746  00151C  6E11               	movwf	putch@c,c
  2747                           
  2748                           ;Lab9_sample_3.c: 148: while (!TRMT);
  2749  00151E  D000               	goto	l119
  2750  001520                     l119:
  2751  001520  A2AC               	btfss	4012,1,c	;volatile
  2752  001522  D7FE               	goto	l119
  2753                           
  2754                           ;Lab9_sample_3.c: 149: TXREG = c;
  2755  001524  C011  FFAD         	movff	putch@c,4013	;volatile
  2756  001528  0012               	return		;funcret
  2757  00152A                     __end_of_putch:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           intcon	equ	0xFF2
  2766                           intcon2	equ	0xFF1
  2767                           postinc0	equ	0xFEE
  2768                           wreg	equ	0xFE8
  2769                           postdec1	equ	0xFE5
  2770                           fsr1l	equ	0xFE1
  2771                           indf2	equ	0xFDF
  2772                           postinc2	equ	0xFDE
  2773                           postdec2	equ	0xFDD
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _isdigit *****************
  2779 ;; Defined at:
  2780 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  c               1    wreg     unsigned char 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  c               1   18[COMRAM] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;		None               void
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;Total ram usage:        3 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    3
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_printf
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text6
  2809  00145C                     __ptext6:
  2810                           	opt stack 0
  2811  00145C                     _isdigit:
  2812                           	opt stack 26
  2813                           
  2814                           ;incstack = 0
  2815                           ;isdigit@c stored from wreg
  2816  00145C  6E13               	movwf	isdigit@c,c
  2817  00145E  0E00               	movlw	0
  2818  001460  6E12               	movwf	_isdigit$1813,c
  2819  001462  0E3A               	movlw	58
  2820  001464  6013               	cpfslt	isdigit@c,c
  2821  001466  D006               	goto	l2645
  2822  001468  0E2F               	movlw	47
  2823  00146A  6413               	cpfsgt	isdigit@c,c
  2824  00146C  D003               	goto	l2645
  2825  00146E  0E01               	movlw	1
  2826  001470  6E12               	movwf	_isdigit$1813,c
  2827  001472  D000               	goto	l2645
  2828  001474                     l2645:
  2829  001474  C012  F011         	movff	_isdigit$1813,??_isdigit
  2830  001478  3011               	rrcf	??_isdigit,w,c
  2831  00147A  D000               	goto	l910
  2832  00147C                     l910:
  2833  00147C  0012               	return		;funcret
  2834  00147E                     __end_of_isdigit:
  2835                           	opt stack 0
  2836                           tblptru	equ	0xFF8
  2837                           tblptrh	equ	0xFF7
  2838                           tblptrl	equ	0xFF6
  2839                           tablat	equ	0xFF5
  2840                           prodh	equ	0xFF4
  2841                           prodl	equ	0xFF3
  2842                           intcon	equ	0xFF2
  2843                           intcon2	equ	0xFF1
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           postdec1	equ	0xFE5
  2847                           fsr1l	equ	0xFE1
  2848                           indf2	equ	0xFDF
  2849                           postinc2	equ	0xFDE
  2850                           postdec2	equ	0xFDD
  2851                           fsr2h	equ	0xFDA
  2852                           fsr2l	equ	0xFD9
  2853                           status	equ	0xFD8
  2854                           
  2855 ;; *************** function ___lldiv *****************
  2856 ;; Defined at:
  2857 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;  dividend        4   16[COMRAM] unsigned long 
  2860 ;;  divisor         4   20[COMRAM] unsigned long 
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;  quotient        4   24[COMRAM] unsigned long 
  2863 ;;  counter         1   28[COMRAM] unsigned char 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  4   16[COMRAM] unsigned long 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2, status,0
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2873 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;Total ram usage:       13 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    3
  2880 ;; This function calls:
  2881 ;;		Nothing
  2882 ;; This function is called by:
  2883 ;;		_printf
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text7
  2888  000E80                     __ptext7:
  2889                           	opt stack 0
  2890  000E80                     ___lldiv:
  2891                           	opt stack 26
  2892                           
  2893                           ;incstack = 0
  2894  000E80  0E00               	movlw	0
  2895  000E82  6E19               	movwf	___lldiv@quotient,c
  2896  000E84  0E00               	movlw	0
  2897  000E86  6E1A               	movwf	___lldiv@quotient+1,c
  2898  000E88  0E00               	movlw	0
  2899  000E8A  6E1B               	movwf	___lldiv@quotient+2,c
  2900  000E8C  0E00               	movlw	0
  2901  000E8E  6E1C               	movwf	___lldiv@quotient+3,c
  2902  000E90  5015               	movf	___lldiv@divisor,w,c
  2903  000E92  1016               	iorwf	___lldiv@divisor+1,w,c
  2904  000E94  1017               	iorwf	___lldiv@divisor+2,w,c
  2905  000E96  1018               	iorwf	___lldiv@divisor+3,w,c
  2906  000E98  B4D8               	btfsc	status,2,c
  2907  000E9A  D02F               	goto	l939
  2908  000E9C  0E01               	movlw	1
  2909  000E9E  6E1D               	movwf	___lldiv@counter,c
  2910  000EA0  D007               	goto	l2657
  2911  000EA2                     l2655:
  2912  000EA2  90D8               	bcf	status,0,c
  2913  000EA4  3615               	rlcf	___lldiv@divisor,f,c
  2914  000EA6  3616               	rlcf	___lldiv@divisor+1,f,c
  2915  000EA8  3617               	rlcf	___lldiv@divisor+2,f,c
  2916  000EAA  3618               	rlcf	___lldiv@divisor+3,f,c
  2917  000EAC  2A1D               	incf	___lldiv@counter,f,c
  2918  000EAE  D000               	goto	l2657
  2919  000EB0                     l2657:
  2920  000EB0  BE18               	btfsc	___lldiv@divisor+3,7,c
  2921  000EB2  D002               	goto	l2659
  2922  000EB4  D7F6               	goto	l2655
  2923  000EB6  D000               	goto	l2659
  2924  000EB8                     l2659:
  2925  000EB8  90D8               	bcf	status,0,c
  2926  000EBA  3619               	rlcf	___lldiv@quotient,f,c
  2927  000EBC  361A               	rlcf	___lldiv@quotient+1,f,c
  2928  000EBE  361B               	rlcf	___lldiv@quotient+2,f,c
  2929  000EC0  361C               	rlcf	___lldiv@quotient+3,f,c
  2930  000EC2  5015               	movf	___lldiv@divisor,w,c
  2931  000EC4  5C11               	subwf	___lldiv@dividend,w,c
  2932  000EC6  5016               	movf	___lldiv@divisor+1,w,c
  2933  000EC8  5812               	subwfb	___lldiv@dividend+1,w,c
  2934  000ECA  5017               	movf	___lldiv@divisor+2,w,c
  2935  000ECC  5813               	subwfb	___lldiv@dividend+2,w,c
  2936  000ECE  5018               	movf	___lldiv@divisor+3,w,c
  2937  000ED0  5814               	subwfb	___lldiv@dividend+3,w,c
  2938  000ED2  A0D8               	btfss	status,0,c
  2939  000ED4  D00A               	goto	l2667
  2940  000ED6  5015               	movf	___lldiv@divisor,w,c
  2941  000ED8  5E11               	subwf	___lldiv@dividend,f,c
  2942  000EDA  5016               	movf	___lldiv@divisor+1,w,c
  2943  000EDC  5A12               	subwfb	___lldiv@dividend+1,f,c
  2944  000EDE  5017               	movf	___lldiv@divisor+2,w,c
  2945  000EE0  5A13               	subwfb	___lldiv@dividend+2,f,c
  2946  000EE2  5018               	movf	___lldiv@divisor+3,w,c
  2947  000EE4  5A14               	subwfb	___lldiv@dividend+3,f,c
  2948  000EE6  8019               	bsf	___lldiv@quotient,0,c
  2949  000EE8  D000               	goto	l2667
  2950  000EEA                     l2667:
  2951  000EEA  90D8               	bcf	status,0,c
  2952  000EEC  3218               	rrcf	___lldiv@divisor+3,f,c
  2953  000EEE  3217               	rrcf	___lldiv@divisor+2,f,c
  2954  000EF0  3216               	rrcf	___lldiv@divisor+1,f,c
  2955  000EF2  3215               	rrcf	___lldiv@divisor,f,c
  2956  000EF4  2E1D               	decfsz	___lldiv@counter,f,c
  2957  000EF6  D7E0               	goto	l2659
  2958  000EF8  D000               	goto	l939
  2959  000EFA                     l939:
  2960  000EFA  C019  F011         	movff	___lldiv@quotient,?___lldiv
  2961  000EFE  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  2962  000F02  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  2963  000F06  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  2964  000F0A  0012               	return		;funcret
  2965  000F0C                     __end_of___lldiv:
  2966                           	opt stack 0
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           prodh	equ	0xFF4
  2972                           prodl	equ	0xFF3
  2973                           intcon	equ	0xFF2
  2974                           intcon2	equ	0xFF1
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           postdec1	equ	0xFE5
  2978                           fsr1l	equ	0xFE1
  2979                           indf2	equ	0xFDF
  2980                           postinc2	equ	0xFDE
  2981                           postdec2	equ	0xFDD
  2982                           fsr2h	equ	0xFDA
  2983                           fsr2l	equ	0xFD9
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _init_UART *****************
  2987 ;; Defined at:
  2988 ;;		line 151 in file "Lab9_sample_3.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;		None
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;		None
  2993 ;; Return value:  Size  Location     Type
  2994 ;;		None               void
  2995 ;; Registers used:
  2996 ;;		wreg, status,2, cstack
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;Total ram usage:        0 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    4
  3009 ;; This function calls:
  3010 ;;		_OpenUSART
  3011 ;; This function is called by:
  3012 ;;		_main
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text8
  3017  0014B0                     __ptext8:
  3018                           	opt stack 0
  3019  0014B0                     _init_UART:
  3020                           	opt stack 26
  3021                           
  3022                           ;Lab9_sample_3.c: 153: OpenUSART (0b01111111 & 0b10111111 &
  3023                           ;Lab9_sample_3.c: 154: 0b11111110 & 0b11111101 & 0b11111111 &
  3024                           ;Lab9_sample_3.c: 155: 0b11111111, 25);
  3025                           
  3026                           ;incstack = 0
  3027  0014B0  0E00               	movlw	0
  3028  0014B2  6E12               	movwf	OpenUSART@spbrg+1,c
  3029  0014B4  0E19               	movlw	25
  3030  0014B6  6E11               	movwf	OpenUSART@spbrg,c
  3031  0014B8  0E3C               	movlw	60
  3032  0014BA  EC88  F008         	call	_OpenUSART
  3033                           
  3034                           ;Lab9_sample_3.c: 156: OSCCON = 0x60;
  3035  0014BE  0E60               	movlw	96
  3036  0014C0  6ED3               	movwf	4051,c	;volatile
  3037  0014C2  0012               	return		;funcret
  3038  0014C4                     __end_of_init_UART:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           tblptrh	equ	0xFF7
  3042                           tblptrl	equ	0xFF6
  3043                           tablat	equ	0xFF5
  3044                           prodh	equ	0xFF4
  3045                           prodl	equ	0xFF3
  3046                           intcon	equ	0xFF2
  3047                           intcon2	equ	0xFF1
  3048                           postinc0	equ	0xFEE
  3049                           wreg	equ	0xFE8
  3050                           postdec1	equ	0xFE5
  3051                           fsr1l	equ	0xFE1
  3052                           indf2	equ	0xFDF
  3053                           postinc2	equ	0xFDE
  3054                           postdec2	equ	0xFDD
  3055                           fsr2h	equ	0xFDA
  3056                           fsr2l	equ	0xFD9
  3057                           status	equ	0xFD8
  3058                           
  3059 ;; *************** function _OpenUSART *****************
  3060 ;; Defined at:
  3061 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  config          1    wreg     unsigned char 
  3064 ;;  spbrg           2   16[COMRAM] unsigned int 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  config          1   18[COMRAM] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;		None               void
  3069 ;; Registers used:
  3070 ;;		wreg, status,2
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3076 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;Total ram usage:        3 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    3
  3083 ;; This function calls:
  3084 ;;		Nothing
  3085 ;; This function is called by:
  3086 ;;		_init_UART
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text9
  3091  001110                     __ptext9:
  3092                           	opt stack 0
  3093  001110                     _OpenUSART:
  3094                           	opt stack 26
  3095                           
  3096                           ;incstack = 0
  3097                           ;OpenUSART@config stored from wreg
  3098  001110  6E13               	movwf	OpenUSART@config,c
  3099  001112  0E00               	movlw	0
  3100  001114  6EAC               	movwf	4012,c	;volatile
  3101  001116  0E00               	movlw	0
  3102  001118  6EAB               	movwf	4011,c	;volatile
  3103  00111A  A013               	btfss	OpenUSART@config,0,c
  3104  00111C  D002               	goto	l2489
  3105  00111E  88AC               	bsf	4012,4,c	;volatile
  3106  001120  D000               	goto	l2489
  3107  001122                     l2489:
  3108  001122  A213               	btfss	OpenUSART@config,1,c
  3109  001124  D003               	goto	l2493
  3110  001126  8CAC               	bsf	4012,6,c	;volatile
  3111  001128  8CAB               	bsf	4011,6,c	;volatile
  3112  00112A  D000               	goto	l2493
  3113  00112C                     l2493:
  3114  00112C  A413               	btfss	OpenUSART@config,2,c
  3115  00112E  D002               	goto	l2497
  3116  001130  8EAC               	bsf	4012,7,c	;volatile
  3117  001132  D000               	goto	l2497
  3118  001134                     l2497:
  3119  001134  A613               	btfss	OpenUSART@config,3,c
  3120  001136  D002               	goto	l467
  3121  001138  88AB               	bsf	4011,4,c	;volatile
  3122  00113A  D002               	goto	l2501
  3123  00113C                     l467:
  3124  00113C  8AAB               	bsf	4011,5,c	;volatile
  3125  00113E  D000               	goto	l2501
  3126  001140                     l2501:
  3127  001140  B813               	btfsc	OpenUSART@config,4,c
  3128  001142  84AC               	bsf	4012,2,c	;volatile
  3129  001144  989E               	bcf	3998,4,c	;volatile
  3130  001146  AA13               	btfss	OpenUSART@config,5,c
  3131  001148  D002               	goto	l2509
  3132  00114A  86AB               	bsf	4011,3,c	;volatile
  3133  00114C  D000               	goto	l2509
  3134  00114E                     l2509:
  3135  00114E  AC13               	btfss	OpenUSART@config,6,c
  3136  001150  D002               	goto	l471
  3137  001152  8A9D               	bsf	3997,5,c	;volatile
  3138  001154  D001               	goto	l472
  3139  001156                     l471:
  3140  001156  9A9D               	bcf	3997,5,c	;volatile
  3141  001158                     l472:
  3142  001158  9A9E               	bcf	3998,5,c	;volatile
  3143  00115A  AE13               	btfss	OpenUSART@config,7,c
  3144  00115C  D002               	goto	l473
  3145  00115E  889D               	bsf	3997,4,c	;volatile
  3146  001160  D001               	goto	l474
  3147  001162                     l473:
  3148  001162  989D               	bcf	3997,4,c	;volatile
  3149  001164                     l474:
  3150  001164  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3151  001168  5012               	movf	OpenUSART@spbrg+1,w,c
  3152  00116A  6EB0               	movwf	4016,c	;volatile
  3153  00116C  8AAC               	bsf	4012,5,c	;volatile
  3154  00116E  8EAB               	bsf	4011,7,c	;volatile
  3155  001170  9C94               	bcf	3988,6,c	;volatile
  3156  001172  8E94               	bsf	3988,7,c	;volatile
  3157  001174  B8AC               	btfsc	4012,4,c	;volatile
  3158  001176  BEAC               	btfsc	4012,7,c	;volatile
  3159  001178  D002               	goto	l476
  3160  00117A  8C94               	bsf	3988,6,c	;volatile
  3161  00117C  D000               	goto	l476
  3162  00117E                     l476:
  3163  00117E  0012               	return		;funcret
  3164  001180                     __end_of_OpenUSART:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           intcon2	equ	0xFF1
  3174                           postinc0	equ	0xFEE
  3175                           wreg	equ	0xFE8
  3176                           postdec1	equ	0xFE5
  3177                           fsr1l	equ	0xFE1
  3178                           indf2	equ	0xFDF
  3179                           postinc2	equ	0xFDE
  3180                           postdec2	equ	0xFDD
  3181                           fsr2h	equ	0xFDA
  3182                           fsr2l	equ	0xFD9
  3183                           status	equ	0xFD8
  3184                           
  3185 ;; *************** function _fillCircle *****************
  3186 ;; Defined at:
  3187 ;;		line 651 in file "ST7735_TFT.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;  x0              2   58[COMRAM] int 
  3190 ;;  y0              2   60[COMRAM] int 
  3191 ;;  r               2   62[COMRAM] int 
  3192 ;;  color           2   64[COMRAM] unsigned int 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;		None               void
  3197 ;; Registers used:
  3198 ;;		wreg, status,2, status,0, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3204 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;Total ram usage:        8 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    8
  3211 ;; This function calls:
  3212 ;;		_drawFastVLine
  3213 ;;		_fillCircleHelper
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text10
  3220  001180                     __ptext10:
  3221                           	opt stack 0
  3222  001180                     _fillCircle:
  3223                           	opt stack 22
  3224                           
  3225                           ;ST7735_TFT.c: 653: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3226                           
  3227                           ;incstack = 0
  3228  001180  503F               	movf	fillCircle@r,w,c
  3229  001182  0800               	sublw	0
  3230  001184  243D               	addwf	fillCircle@y0,w,c
  3231  001186  6E18               	movwf	drawFastVLine@y,c
  3232  001188  80D8               	bsf	status,0,c
  3233  00118A  343F               	rlcf	fillCircle@r,w,c
  3234  00118C  6E19               	movwf	drawFastVLine@h,c
  3235  00118E  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3236  001192  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3237  001196  503B               	movf	fillCircle@x0,w,c
  3238  001198  EC86  F007         	call	_drawFastVLine
  3239                           
  3240                           ;ST7735_TFT.c: 654: fillCircleHelper(x0, y0, r, 3, 0, color);
  3241  00119C  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3242  0011A0  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3243  0011A4  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3244  0011A8  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3245  0011AC  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3246  0011B0  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3247  0011B4  0E00               	movlw	0
  3248  0011B6  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3249  0011B8  0E03               	movlw	3
  3250  0011BA  6E29               	movwf	fillCircleHelper@cornername,c
  3251  0011BC  0E00               	movlw	0
  3252  0011BE  6E2C               	movwf	fillCircleHelper@delta+1,c
  3253  0011C0  0E00               	movlw	0
  3254  0011C2  6E2B               	movwf	fillCircleHelper@delta,c
  3255  0011C4  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3256  0011C8  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3257  0011CC  EC69  F004         	call	_fillCircleHelper	;wreg free
  3258  0011D0  0012               	return		;funcret
  3259  0011D2                     __end_of_fillCircle:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           intcon	equ	0xFF2
  3268                           intcon2	equ	0xFF1
  3269                           postinc0	equ	0xFEE
  3270                           wreg	equ	0xFE8
  3271                           postdec1	equ	0xFE5
  3272                           fsr1l	equ	0xFE1
  3273                           indf2	equ	0xFDF
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function _fillCircleHelper *****************
  3281 ;; Defined at:
  3282 ;;		line 626 in file "ST7735_TFT.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  x0              2   34[COMRAM] int 
  3285 ;;  y0              2   36[COMRAM] int 
  3286 ;;  r               2   38[COMRAM] int 
  3287 ;;  cornername      2   40[COMRAM] unsigned int 
  3288 ;;  delta           2   42[COMRAM] int 
  3289 ;;  color           2   44[COMRAM] unsigned int 
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  y               2   56[COMRAM] int 
  3292 ;;  x               2   54[COMRAM] int 
  3293 ;;  f               2   52[COMRAM] int 
  3294 ;;  ddF_y           2   50[COMRAM] int 
  3295 ;;  ddF_x           2   48[COMRAM] int 
  3296 ;; Return value:  Size  Location     Type
  3297 ;;		None               void
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3305 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;Total ram usage:       24 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    7
  3312 ;; This function calls:
  3313 ;;		_drawFastVLine
  3314 ;; This function is called by:
  3315 ;;		_fillCircle
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text11
  3320  0008D2                     __ptext11:
  3321                           	opt stack 0
  3322  0008D2                     _fillCircleHelper:
  3323                           	opt stack 22
  3324                           
  3325                           ;ST7735_TFT.c: 628: signed int f, ddF_x, ddF_y, x, y;
  3326                           ;ST7735_TFT.c: 629: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3327                           
  3328                           ;incstack = 0
  3329  0008D2  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3330  0008D6  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3331  0008DA  1E2F               	comf	??_fillCircleHelper,f,c
  3332  0008DC  1E30               	comf	??_fillCircleHelper+1,f,c
  3333  0008DE  4A2F               	infsnz	??_fillCircleHelper,f,c
  3334  0008E0  2A30               	incf	??_fillCircleHelper+1,f,c
  3335  0008E2  0E01               	movlw	1
  3336  0008E4  242F               	addwf	??_fillCircleHelper,w,c
  3337  0008E6  6E35               	movwf	fillCircleHelper@f,c
  3338  0008E8  0E00               	movlw	0
  3339  0008EA  2030               	addwfc	??_fillCircleHelper+1,w,c
  3340  0008EC  6E36               	movwf	fillCircleHelper@f+1,c
  3341  0008EE  0E00               	movlw	0
  3342  0008F0  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3343  0008F2  0E01               	movlw	1
  3344  0008F4  6E31               	movwf	fillCircleHelper@ddF_x,c
  3345  0008F6  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3346  0008FA  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3347  0008FE  90D8               	bcf	status,0,c
  3348  000900  362F               	rlcf	??_fillCircleHelper,f,c
  3349  000902  3630               	rlcf	??_fillCircleHelper+1,f,c
  3350  000904  1E2F               	comf	??_fillCircleHelper,f,c
  3351  000906  1E30               	comf	??_fillCircleHelper+1,f,c
  3352  000908  4A2F               	infsnz	??_fillCircleHelper,f,c
  3353  00090A  2A30               	incf	??_fillCircleHelper+1,f,c
  3354  00090C  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3355  000910  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3356  000914  0E00               	movlw	0
  3357  000916  6E38               	movwf	fillCircleHelper@x+1,c
  3358  000918  0E00               	movlw	0
  3359  00091A  6E37               	movwf	fillCircleHelper@x,c
  3360  00091C  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3361  000920  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3362                           
  3363                           ;ST7735_TFT.c: 630: while (x<y) {
  3364  000924  D067               	goto	l3577
  3365  000926                     l3557:
  3366                           
  3367                           ;ST7735_TFT.c: 631: if (f >= 0) {
  3368  000926  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3369  000928  D00B               	goto	l359
  3370                           
  3371                           ;ST7735_TFT.c: 632: y--;
  3372  00092A  0639               	decf	fillCircleHelper@y,f,c
  3373  00092C  A0D8               	btfss	status,0,c
  3374  00092E  063A               	decf	fillCircleHelper@y+1,f,c
  3375                           
  3376                           ;ST7735_TFT.c: 633: ddF_y += 2;
  3377  000930  0E02               	movlw	2
  3378  000932  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3379  000934  0E00               	movlw	0
  3380  000936  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3381                           
  3382                           ;ST7735_TFT.c: 634: f += ddF_y;
  3383  000938  5033               	movf	fillCircleHelper@ddF_y,w,c
  3384  00093A  2635               	addwf	fillCircleHelper@f,f,c
  3385  00093C  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3386  00093E  2236               	addwfc	fillCircleHelper@f+1,f,c
  3387  000940                     l359:
  3388                           
  3389                           ;ST7735_TFT.c: 635: }
  3390                           ;ST7735_TFT.c: 636: x++;
  3391  000940  4A37               	infsnz	fillCircleHelper@x,f,c
  3392  000942  2A38               	incf	fillCircleHelper@x+1,f,c
  3393                           
  3394                           ;ST7735_TFT.c: 637: ddF_x += 2;
  3395  000944  0E02               	movlw	2
  3396  000946  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3397  000948  0E00               	movlw	0
  3398  00094A  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3399                           
  3400                           ;ST7735_TFT.c: 638: f += ddF_x;
  3401  00094C  5031               	movf	fillCircleHelper@ddF_x,w,c
  3402  00094E  2635               	addwf	fillCircleHelper@f,f,c
  3403  000950  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3404  000952  2236               	addwfc	fillCircleHelper@f+1,f,c
  3405                           
  3406                           ;ST7735_TFT.c: 640: if (cornername & 0x1) {
  3407  000954  A029               	btfss	fillCircleHelper@cornername,0,c
  3408  000956  D025               	goto	l3573
  3409                           
  3410                           ;ST7735_TFT.c: 641: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3411  000958  5039               	movf	fillCircleHelper@y,w,c
  3412  00095A  0800               	sublw	0
  3413  00095C  2425               	addwf	fillCircleHelper@y0,w,c
  3414  00095E  6E18               	movwf	drawFastVLine@y,c
  3415  000960  5039               	movf	fillCircleHelper@y,w,c
  3416  000962  2439               	addwf	fillCircleHelper@y,w,c
  3417  000964  242B               	addwf	fillCircleHelper@delta,w,c
  3418  000966  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3419  000968  282F               	incf	??_fillCircleHelper,w,c
  3420  00096A  6E19               	movwf	drawFastVLine@h,c
  3421  00096C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3422  000970  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3423  000974  5023               	movf	fillCircleHelper@x0,w,c
  3424  000976  2437               	addwf	fillCircleHelper@x,w,c
  3425  000978  EC86  F007         	call	_drawFastVLine
  3426                           
  3427                           ;ST7735_TFT.c: 642: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3428  00097C  5037               	movf	fillCircleHelper@x,w,c
  3429  00097E  0800               	sublw	0
  3430  000980  2425               	addwf	fillCircleHelper@y0,w,c
  3431  000982  6E18               	movwf	drawFastVLine@y,c
  3432  000984  5037               	movf	fillCircleHelper@x,w,c
  3433  000986  2437               	addwf	fillCircleHelper@x,w,c
  3434  000988  242B               	addwf	fillCircleHelper@delta,w,c
  3435  00098A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3436  00098C  282F               	incf	??_fillCircleHelper,w,c
  3437  00098E  6E19               	movwf	drawFastVLine@h,c
  3438  000990  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3439  000994  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3440  000998  5023               	movf	fillCircleHelper@x0,w,c
  3441  00099A  2439               	addwf	fillCircleHelper@y,w,c
  3442  00099C  EC86  F007         	call	_drawFastVLine
  3443  0009A0  D000               	goto	l3573
  3444  0009A2                     l3573:
  3445                           
  3446                           ;ST7735_TFT.c: 643: }
  3447                           ;ST7735_TFT.c: 644: if (cornername & 0x2) {
  3448  0009A2  A229               	btfss	fillCircleHelper@cornername,1,c
  3449  0009A4  D027               	goto	l3577
  3450                           
  3451                           ;ST7735_TFT.c: 645: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3452  0009A6  5039               	movf	fillCircleHelper@y,w,c
  3453  0009A8  0800               	sublw	0
  3454  0009AA  2425               	addwf	fillCircleHelper@y0,w,c
  3455  0009AC  6E18               	movwf	drawFastVLine@y,c
  3456  0009AE  5039               	movf	fillCircleHelper@y,w,c
  3457  0009B0  2439               	addwf	fillCircleHelper@y,w,c
  3458  0009B2  242B               	addwf	fillCircleHelper@delta,w,c
  3459  0009B4  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3460  0009B6  282F               	incf	??_fillCircleHelper,w,c
  3461  0009B8  6E19               	movwf	drawFastVLine@h,c
  3462  0009BA  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3463  0009BE  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3464  0009C2  5037               	movf	fillCircleHelper@x,w,c
  3465  0009C4  0800               	sublw	0
  3466  0009C6  2423               	addwf	fillCircleHelper@x0,w,c
  3467  0009C8  EC86  F007         	call	_drawFastVLine
  3468                           
  3469                           ;ST7735_TFT.c: 646: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3470  0009CC  5037               	movf	fillCircleHelper@x,w,c
  3471  0009CE  0800               	sublw	0
  3472  0009D0  2425               	addwf	fillCircleHelper@y0,w,c
  3473  0009D2  6E18               	movwf	drawFastVLine@y,c
  3474  0009D4  5037               	movf	fillCircleHelper@x,w,c
  3475  0009D6  2437               	addwf	fillCircleHelper@x,w,c
  3476  0009D8  242B               	addwf	fillCircleHelper@delta,w,c
  3477  0009DA  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3478  0009DC  282F               	incf	??_fillCircleHelper,w,c
  3479  0009DE  6E19               	movwf	drawFastVLine@h,c
  3480  0009E0  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3481  0009E4  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3482  0009E8  5039               	movf	fillCircleHelper@y,w,c
  3483  0009EA  0800               	sublw	0
  3484  0009EC  2423               	addwf	fillCircleHelper@x0,w,c
  3485  0009EE  EC86  F007         	call	_drawFastVLine
  3486  0009F2  D000               	goto	l3577
  3487  0009F4                     l3577:
  3488  0009F4  5039               	movf	fillCircleHelper@y,w,c
  3489  0009F6  5C37               	subwf	fillCircleHelper@x,w,c
  3490  0009F8  5038               	movf	fillCircleHelper@x+1,w,c
  3491  0009FA  0A80               	xorlw	128
  3492  0009FC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3493  0009FE  503A               	movf	fillCircleHelper@y+1,w,c
  3494  000A00  0A80               	xorlw	128
  3495  000A02  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3496  000A04  A0D8               	btfss	status,0,c
  3497  000A06  D78F               	goto	l3557
  3498  000A08  0012               	return		;funcret
  3499  000A0A                     __end_of_fillCircleHelper:
  3500                           	opt stack 0
  3501                           tblptru	equ	0xFF8
  3502                           tblptrh	equ	0xFF7
  3503                           tblptrl	equ	0xFF6
  3504                           tablat	equ	0xFF5
  3505                           prodh	equ	0xFF4
  3506                           prodl	equ	0xFF3
  3507                           intcon	equ	0xFF2
  3508                           intcon2	equ	0xFF1
  3509                           postinc0	equ	0xFEE
  3510                           wreg	equ	0xFE8
  3511                           postdec1	equ	0xFE5
  3512                           fsr1l	equ	0xFE1
  3513                           indf2	equ	0xFDF
  3514                           postinc2	equ	0xFDE
  3515                           postdec2	equ	0xFDD
  3516                           fsr2h	equ	0xFDA
  3517                           fsr2l	equ	0xFD9
  3518                           status	equ	0xFD8
  3519                           
  3520 ;; *************** function _drawCircle *****************
  3521 ;; Defined at:
  3522 ;;		line 565 in file "ST7735_TFT.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  x0              2   27[COMRAM] int 
  3525 ;;  y0              2   29[COMRAM] int 
  3526 ;;  r               2   31[COMRAM] int 
  3527 ;;  color           2   33[COMRAM] unsigned int 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  y               2   45[COMRAM] int 
  3530 ;;  x               2   43[COMRAM] int 
  3531 ;;  f               2   41[COMRAM] int 
  3532 ;;  ddF_y           2   39[COMRAM] int 
  3533 ;;  ddF_x           2   37[COMRAM] int 
  3534 ;; Return value:  Size  Location     Type
  3535 ;;		None               void
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3543 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;Total ram usage:       20 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    7
  3550 ;; This function calls:
  3551 ;;		_drawPixel
  3552 ;; This function is called by:
  3553 ;;		_main
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text12
  3558  00047A                     __ptext12:
  3559                           	opt stack 0
  3560  00047A                     _drawCircle:
  3561                           	opt stack 23
  3562                           
  3563                           ;ST7735_TFT.c: 567: signed int f, ddF_x, ddF_y, x, y;
  3564                           ;ST7735_TFT.c: 568: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3565                           
  3566                           ;incstack = 0
  3567  00047A  C020  F024         	movff	drawCircle@r,??_drawCircle
  3568  00047E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3569  000482  1E24               	comf	??_drawCircle,f,c
  3570  000484  1E25               	comf	??_drawCircle+1,f,c
  3571  000486  4A24               	infsnz	??_drawCircle,f,c
  3572  000488  2A25               	incf	??_drawCircle+1,f,c
  3573  00048A  0E01               	movlw	1
  3574  00048C  2424               	addwf	??_drawCircle,w,c
  3575  00048E  6E2A               	movwf	drawCircle@f,c
  3576  000490  0E00               	movlw	0
  3577  000492  2025               	addwfc	??_drawCircle+1,w,c
  3578  000494  6E2B               	movwf	drawCircle@f+1,c
  3579  000496  0E00               	movlw	0
  3580  000498  6E27               	movwf	drawCircle@ddF_x+1,c
  3581  00049A  0E01               	movlw	1
  3582  00049C  6E26               	movwf	drawCircle@ddF_x,c
  3583  00049E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3584  0004A2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3585  0004A6  90D8               	bcf	status,0,c
  3586  0004A8  3624               	rlcf	??_drawCircle,f,c
  3587  0004AA  3625               	rlcf	??_drawCircle+1,f,c
  3588  0004AC  1E24               	comf	??_drawCircle,f,c
  3589  0004AE  1E25               	comf	??_drawCircle+1,f,c
  3590  0004B0  4A24               	infsnz	??_drawCircle,f,c
  3591  0004B2  2A25               	incf	??_drawCircle+1,f,c
  3592  0004B4  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3593  0004B8  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3594  0004BC  0E00               	movlw	0
  3595  0004BE  6E2D               	movwf	drawCircle@x+1,c
  3596  0004C0  0E00               	movlw	0
  3597  0004C2  6E2C               	movwf	drawCircle@x,c
  3598  0004C4  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3599  0004C8  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3600                           
  3601                           ;ST7735_TFT.c: 569: drawPixel(x0 , y0 + r, color);
  3602  0004CC  501E               	movf	drawCircle@y0,w,c
  3603  0004CE  2420               	addwf	drawCircle@r,w,c
  3604  0004D0  6E18               	movwf	drawPixel@y,c
  3605  0004D2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3606  0004D6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3607  0004DA  501C               	movf	drawCircle@x0,w,c
  3608  0004DC  ECED  F009         	call	_drawPixel
  3609                           
  3610                           ;ST7735_TFT.c: 570: drawPixel(x0 , y0 - r, color);
  3611  0004E0  5020               	movf	drawCircle@r,w,c
  3612  0004E2  0800               	sublw	0
  3613  0004E4  241E               	addwf	drawCircle@y0,w,c
  3614  0004E6  6E18               	movwf	drawPixel@y,c
  3615  0004E8  C022  F019         	movff	drawCircle@color,drawPixel@color
  3616  0004EC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3617  0004F0  501C               	movf	drawCircle@x0,w,c
  3618  0004F2  ECED  F009         	call	_drawPixel
  3619                           
  3620                           ;ST7735_TFT.c: 571: drawPixel(x0+r, y0 , color);
  3621  0004F6  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3622  0004FA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3623  0004FE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3624  000502  501C               	movf	drawCircle@x0,w,c
  3625  000504  2420               	addwf	drawCircle@r,w,c
  3626  000506  ECED  F009         	call	_drawPixel
  3627                           
  3628                           ;ST7735_TFT.c: 572: drawPixel(x0-r, y0 , color);
  3629  00050A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3630  00050E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3631  000512  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3632  000516  5020               	movf	drawCircle@r,w,c
  3633  000518  0800               	sublw	0
  3634  00051A  241C               	addwf	drawCircle@x0,w,c
  3635  00051C  ECED  F009         	call	_drawPixel
  3636                           
  3637                           ;ST7735_TFT.c: 573: while (x < y) {
  3638  000520  D078               	goto	l3727
  3639  000522                     l3699:
  3640                           
  3641                           ;ST7735_TFT.c: 574: if (f >= 0) {
  3642  000522  BE2B               	btfsc	drawCircle@f+1,7,c
  3643  000524  D00B               	goto	l341
  3644                           
  3645                           ;ST7735_TFT.c: 575: y--;
  3646  000526  062E               	decf	drawCircle@y,f,c
  3647  000528  A0D8               	btfss	status,0,c
  3648  00052A  062F               	decf	drawCircle@y+1,f,c
  3649                           
  3650                           ;ST7735_TFT.c: 576: ddF_y += 2;
  3651  00052C  0E02               	movlw	2
  3652  00052E  2628               	addwf	drawCircle@ddF_y,f,c
  3653  000530  0E00               	movlw	0
  3654  000532  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3655                           
  3656                           ;ST7735_TFT.c: 577: f += ddF_y;
  3657  000534  5028               	movf	drawCircle@ddF_y,w,c
  3658  000536  262A               	addwf	drawCircle@f,f,c
  3659  000538  5029               	movf	drawCircle@ddF_y+1,w,c
  3660  00053A  222B               	addwfc	drawCircle@f+1,f,c
  3661  00053C                     l341:
  3662                           
  3663                           ;ST7735_TFT.c: 578: }
  3664                           ;ST7735_TFT.c: 579: x++;
  3665  00053C  4A2C               	infsnz	drawCircle@x,f,c
  3666  00053E  2A2D               	incf	drawCircle@x+1,f,c
  3667                           
  3668                           ;ST7735_TFT.c: 580: ddF_x += 2;
  3669  000540  0E02               	movlw	2
  3670  000542  2626               	addwf	drawCircle@ddF_x,f,c
  3671  000544  0E00               	movlw	0
  3672  000546  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3673                           
  3674                           ;ST7735_TFT.c: 581: f += ddF_x;
  3675  000548  5026               	movf	drawCircle@ddF_x,w,c
  3676  00054A  262A               	addwf	drawCircle@f,f,c
  3677  00054C  5027               	movf	drawCircle@ddF_x+1,w,c
  3678  00054E  222B               	addwfc	drawCircle@f+1,f,c
  3679                           
  3680                           ;ST7735_TFT.c: 582: drawPixel(x0 + x, y0 + y, color);
  3681  000550  501E               	movf	drawCircle@y0,w,c
  3682  000552  242E               	addwf	drawCircle@y,w,c
  3683  000554  6E18               	movwf	drawPixel@y,c
  3684  000556  C022  F019         	movff	drawCircle@color,drawPixel@color
  3685  00055A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3686  00055E  501C               	movf	drawCircle@x0,w,c
  3687  000560  242C               	addwf	drawCircle@x,w,c
  3688  000562  ECED  F009         	call	_drawPixel
  3689                           
  3690                           ;ST7735_TFT.c: 583: drawPixel(x0 - x, y0 + y, color);
  3691  000566  501E               	movf	drawCircle@y0,w,c
  3692  000568  242E               	addwf	drawCircle@y,w,c
  3693  00056A  6E18               	movwf	drawPixel@y,c
  3694  00056C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3695  000570  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3696  000574  502C               	movf	drawCircle@x,w,c
  3697  000576  0800               	sublw	0
  3698  000578  241C               	addwf	drawCircle@x0,w,c
  3699  00057A  ECED  F009         	call	_drawPixel
  3700                           
  3701                           ;ST7735_TFT.c: 584: drawPixel(x0 + x, y0 - y, color);
  3702  00057E  502E               	movf	drawCircle@y,w,c
  3703  000580  0800               	sublw	0
  3704  000582  241E               	addwf	drawCircle@y0,w,c
  3705  000584  6E18               	movwf	drawPixel@y,c
  3706  000586  C022  F019         	movff	drawCircle@color,drawPixel@color
  3707  00058A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3708  00058E  501C               	movf	drawCircle@x0,w,c
  3709  000590  242C               	addwf	drawCircle@x,w,c
  3710  000592  ECED  F009         	call	_drawPixel
  3711                           
  3712                           ;ST7735_TFT.c: 585: drawPixel(x0 - x, y0 - y, color);
  3713  000596  502E               	movf	drawCircle@y,w,c
  3714  000598  0800               	sublw	0
  3715  00059A  241E               	addwf	drawCircle@y0,w,c
  3716  00059C  6E18               	movwf	drawPixel@y,c
  3717  00059E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3718  0005A2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3719  0005A6  502C               	movf	drawCircle@x,w,c
  3720  0005A8  0800               	sublw	0
  3721  0005AA  241C               	addwf	drawCircle@x0,w,c
  3722  0005AC  ECED  F009         	call	_drawPixel
  3723                           
  3724                           ;ST7735_TFT.c: 586: drawPixel(x0 + y, y0 + x, color);
  3725  0005B0  501E               	movf	drawCircle@y0,w,c
  3726  0005B2  242C               	addwf	drawCircle@x,w,c
  3727  0005B4  6E18               	movwf	drawPixel@y,c
  3728  0005B6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3729  0005BA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3730  0005BE  501C               	movf	drawCircle@x0,w,c
  3731  0005C0  242E               	addwf	drawCircle@y,w,c
  3732  0005C2  ECED  F009         	call	_drawPixel
  3733                           
  3734                           ;ST7735_TFT.c: 587: drawPixel(x0 - y, y0 + x, color);
  3735  0005C6  501E               	movf	drawCircle@y0,w,c
  3736  0005C8  242C               	addwf	drawCircle@x,w,c
  3737  0005CA  6E18               	movwf	drawPixel@y,c
  3738  0005CC  C022  F019         	movff	drawCircle@color,drawPixel@color
  3739  0005D0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3740  0005D4  502E               	movf	drawCircle@y,w,c
  3741  0005D6  0800               	sublw	0
  3742  0005D8  241C               	addwf	drawCircle@x0,w,c
  3743  0005DA  ECED  F009         	call	_drawPixel
  3744                           
  3745                           ;ST7735_TFT.c: 588: drawPixel(x0 + y, y0 - x, color);
  3746  0005DE  502C               	movf	drawCircle@x,w,c
  3747  0005E0  0800               	sublw	0
  3748  0005E2  241E               	addwf	drawCircle@y0,w,c
  3749  0005E4  6E18               	movwf	drawPixel@y,c
  3750  0005E6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3751  0005EA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3752  0005EE  501C               	movf	drawCircle@x0,w,c
  3753  0005F0  242E               	addwf	drawCircle@y,w,c
  3754  0005F2  ECED  F009         	call	_drawPixel
  3755                           
  3756                           ;ST7735_TFT.c: 589: drawPixel(x0 - y, y0 - x, color);
  3757  0005F6  502C               	movf	drawCircle@x,w,c
  3758  0005F8  0800               	sublw	0
  3759  0005FA  241E               	addwf	drawCircle@y0,w,c
  3760  0005FC  6E18               	movwf	drawPixel@y,c
  3761  0005FE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3762  000602  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3763  000606  502E               	movf	drawCircle@y,w,c
  3764  000608  0800               	sublw	0
  3765  00060A  241C               	addwf	drawCircle@x0,w,c
  3766  00060C  ECED  F009         	call	_drawPixel
  3767  000610  D000               	goto	l3727
  3768  000612                     l3727:
  3769  000612  502E               	movf	drawCircle@y,w,c
  3770  000614  5C2C               	subwf	drawCircle@x,w,c
  3771  000616  502D               	movf	drawCircle@x+1,w,c
  3772  000618  0A80               	xorlw	128
  3773  00061A  6E24               	movwf	??_drawCircle& (0+255),c
  3774  00061C  502F               	movf	drawCircle@y+1,w,c
  3775  00061E  0A80               	xorlw	128
  3776  000620  5824               	subwfb	??_drawCircle& (0+255),w,c
  3777  000622  A0D8               	btfss	status,0,c
  3778  000624  D77E               	goto	l3699
  3779  000626  0012               	return		;funcret
  3780  000628                     __end_of_drawCircle:
  3781                           	opt stack 0
  3782                           tblptru	equ	0xFF8
  3783                           tblptrh	equ	0xFF7
  3784                           tblptrl	equ	0xFF6
  3785                           tablat	equ	0xFF5
  3786                           prodh	equ	0xFF4
  3787                           prodl	equ	0xFF3
  3788                           intcon	equ	0xFF2
  3789                           intcon2	equ	0xFF1
  3790                           postinc0	equ	0xFEE
  3791                           wreg	equ	0xFE8
  3792                           postdec1	equ	0xFE5
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _Initialize_Screen *****************
  3802 ;; Defined at:
  3803 ;;		line 365 in file "Lab9_sample_3.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;		None               void
  3810 ;; Registers used:
  3811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;Total ram usage:        0 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:   10
  3824 ;; This function calls:
  3825 ;;		_LCD_Reset
  3826 ;;		_TFT_GreenTab_Initialize
  3827 ;;		_drawtext
  3828 ;;		_fillScreen
  3829 ;;		_strcpy
  3830 ;; This function is called by:
  3831 ;;		_main
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text13
  3836  000DF2                     __ptext13:
  3837                           	opt stack 0
  3838  000DF2                     _Initialize_Screen:
  3839                           	opt stack 20
  3840                           
  3841                           ;Lab9_sample_3.c: 367: LCD_Reset();
  3842                           
  3843                           ;incstack = 0
  3844  000DF2  EC75  F00A         	call	_LCD_Reset	;wreg free
  3845                           
  3846                           ;Lab9_sample_3.c: 368: TFT_GreenTab_Initialize();
  3847  000DF6  EC05  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  3848                           
  3849                           ;Lab9_sample_3.c: 369: fillScreen(0x0000);
  3850  000DFA  0E00               	movlw	0
  3851  000DFC  6E25               	movwf	fillScreen@color+1,c
  3852  000DFE  0E00               	movlw	0
  3853  000E00  6E24               	movwf	fillScreen@color,c
  3854  000E02  EC3F  F00A         	call	_fillScreen	;wreg free
  3855                           
  3856                           ;Lab9_sample_3.c: 372: txt = buffer;
  3857  000E06  0EBF               	movlw	low _buffer
  3858  000E08  6E67               	movwf	_txt,c
  3859  000E0A  0E00               	movlw	high _buffer
  3860  000E0C  6E68               	movwf	_txt+1,c
  3861                           
  3862                           ;Lab9_sample_3.c: 373: strcpy(txt, "ECE3301L Fall 21-S3");
  3863  000E0E  C067  F011         	movff	_txt,strcpy@to
  3864  000E12  C068  F012         	movff	_txt+1,strcpy@to+1
  3865  000E16  0ED4               	movlw	low STR_2
  3866  000E18  6E13               	movwf	strcpy@from,c
  3867  000E1A  0EFF               	movlw	high STR_2
  3868  000E1C  6E14               	movwf	strcpy@from+1,c
  3869  000E1E  ECBC  F009         	call	_strcpy	;wreg free
  3870                           
  3871                           ;Lab9_sample_3.c: 374: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3872  000E22  0E02               	movlw	2
  3873  000E24  6E39               	movwf	drawtext@y,c
  3874  000E26  C067  F03A         	movff	_txt,drawtext@_text
  3875  000E2A  C068  F03B         	movff	_txt+1,drawtext@_text+1
  3876  000E2E  0EFF               	movlw	255
  3877  000E30  6E3D               	movwf	drawtext@color+1,c
  3878  000E32  683C               	setf	drawtext@color,c
  3879  000E34  0E00               	movlw	0
  3880  000E36  6E3F               	movwf	drawtext@bg+1,c
  3881  000E38  0E00               	movlw	0
  3882  000E3A  6E3E               	movwf	drawtext@bg,c
  3883  000E3C  0E01               	movlw	1
  3884  000E3E  6E40               	movwf	drawtext@size,c
  3885  000E40  0E02               	movlw	2
  3886  000E42  EC8D  F005         	call	_drawtext
  3887                           
  3888                           ;Lab9_sample_3.c: 376: strcpy(txt, "LAB 9");
  3889  000E46  C067  F011         	movff	_txt,strcpy@to
  3890  000E4A  C068  F012         	movff	_txt+1,strcpy@to+1
  3891  000E4E  0EF9               	movlw	low STR_3
  3892  000E50  6E13               	movwf	strcpy@from,c
  3893  000E52  0EFF               	movlw	high STR_3
  3894  000E54  6E14               	movwf	strcpy@from+1,c
  3895  000E56  ECBC  F009         	call	_strcpy	;wreg free
  3896                           
  3897                           ;Lab9_sample_3.c: 377: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3898  000E5A  0E0A               	movlw	10
  3899  000E5C  6E39               	movwf	drawtext@y,c
  3900  000E5E  C067  F03A         	movff	_txt,drawtext@_text
  3901  000E62  C068  F03B         	movff	_txt+1,drawtext@_text+1
  3902  000E66  0EFF               	movlw	255
  3903  000E68  6E3D               	movwf	drawtext@color+1,c
  3904  000E6A  683C               	setf	drawtext@color,c
  3905  000E6C  0E00               	movlw	0
  3906  000E6E  6E3F               	movwf	drawtext@bg+1,c
  3907  000E70  0E00               	movlw	0
  3908  000E72  6E3E               	movwf	drawtext@bg,c
  3909  000E74  0E01               	movlw	1
  3910  000E76  6E40               	movwf	drawtext@size,c
  3911  000E78  0E32               	movlw	50
  3912  000E7A  EC8D  F005         	call	_drawtext
  3913  000E7E  0012               	return		;funcret
  3914  000E80                     __end_of_Initialize_Screen:
  3915                           	opt stack 0
  3916                           tblptru	equ	0xFF8
  3917                           tblptrh	equ	0xFF7
  3918                           tblptrl	equ	0xFF6
  3919                           tablat	equ	0xFF5
  3920                           prodh	equ	0xFF4
  3921                           prodl	equ	0xFF3
  3922                           intcon	equ	0xFF2
  3923                           intcon2	equ	0xFF1
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           postdec1	equ	0xFE5
  3927                           fsr1l	equ	0xFE1
  3928                           indf2	equ	0xFDF
  3929                           postinc2	equ	0xFDE
  3930                           postdec2	equ	0xFDD
  3931                           fsr2h	equ	0xFDA
  3932                           fsr2l	equ	0xFD9
  3933                           status	equ	0xFD8
  3934                           
  3935 ;; *************** function _strcpy *****************
  3936 ;; Defined at:
  3937 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  to              2   16[COMRAM] PTR unsigned char 
  3940 ;;		 -> NULL(0), buffer(31), 
  3941 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3942 ;;		 -> STR_3(6), STR_2(20), 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3945 ;;		 -> NULL(0), buffer(31), 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  2   16[COMRAM] PTR unsigned char 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;Total ram usage:        6 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    3
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_Initialize_Screen
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text14
  3970  001378                     __ptext14:
  3971                           	opt stack 0
  3972  001378                     _strcpy:
  3973                           	opt stack 26
  3974                           
  3975                           ;incstack = 0
  3976  001378  C011  F015         	movff	strcpy@to,strcpy@cp
  3977  00137C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3978  001380  D005               	goto	l2597
  3979  001382                     l2595:
  3980  001382  4A15               	infsnz	strcpy@cp,f,c
  3981  001384  2A16               	incf	strcpy@cp+1,f,c
  3982  001386  4A13               	infsnz	strcpy@from,f,c
  3983  001388  2A14               	incf	strcpy@from+1,f,c
  3984  00138A  D000               	goto	l2597
  3985  00138C                     l2597:
  3986  00138C  C013  FFF6         	movff	strcpy@from,tblptrl
  3987  001390  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3988  001394                     	if	0	;tblptru may be non-zero
  3989  001394                     	endif
  3990  001394                     	if	0	;tblptru may be non-zero
  3991  001394                     	endif
  3992  001394  C015  FFD9         	movff	strcpy@cp,fsr2l
  3993  001398  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3994  00139C  0008               	tblrd		*
  3995  00139E  CFF5 FFDF          	movff	tablat,indf2
  3996  0013A2  50DF               	movf	indf2,w,c
  3997  0013A4  A4D8               	btfss	status,2,c
  3998  0013A6  D7ED               	goto	l2595
  3999                           
  4000                           ;	Return value of _strcpy is never used
  4001  0013A8  0012               	return		;funcret
  4002  0013AA                     __end_of_strcpy:
  4003                           	opt stack 0
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           postdec1	equ	0xFE5
  4015                           fsr1l	equ	0xFE1
  4016                           indf2	equ	0xFDF
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function _fillScreen *****************
  4024 ;; Defined at:
  4025 ;;		line 656 in file "ST7735_TFT.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  color           2   35[COMRAM] unsigned int 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;		None
  4030 ;; Return value:  Size  Location     Type
  4031 ;;		None               void
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4039 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;Total ram usage:        2 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    7
  4046 ;; This function calls:
  4047 ;;		_fillRectangle
  4048 ;; This function is called by:
  4049 ;;		_Initialize_Screen
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text15
  4054  00147E                     __ptext15:
  4055                           	opt stack 0
  4056  00147E                     _fillScreen:
  4057                           	opt stack 22
  4058                           
  4059                           ;ST7735_TFT.c: 658: fillRectangle(0, 0, 128, 160, color);
  4060                           
  4061                           ;incstack = 0
  4062  00147E  0E00               	movlw	0
  4063  001480  6E18               	movwf	fillRectangle@y,c
  4064  001482  0E80               	movlw	128
  4065  001484  6E19               	movwf	fillRectangle@w,c
  4066  001486  0EA0               	movlw	160
  4067  001488  6E1A               	movwf	fillRectangle@h,c
  4068  00148A  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4069  00148E  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4070  001492  0E00               	movlw	0
  4071  001494  EC8B  F006         	call	_fillRectangle
  4072  001498  0012               	return		;funcret
  4073  00149A                     __end_of_fillScreen:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodh	equ	0xFF4
  4080                           prodl	equ	0xFF3
  4081                           intcon	equ	0xFF2
  4082                           intcon2	equ	0xFF1
  4083                           postinc0	equ	0xFEE
  4084                           wreg	equ	0xFE8
  4085                           postdec1	equ	0xFE5
  4086                           fsr1l	equ	0xFE1
  4087                           indf2	equ	0xFDF
  4088                           postinc2	equ	0xFDE
  4089                           postdec2	equ	0xFDD
  4090                           fsr2h	equ	0xFDA
  4091                           fsr2l	equ	0xFD9
  4092                           status	equ	0xFD8
  4093                           
  4094 ;; *************** function _fillRectangle *****************
  4095 ;; Defined at:
  4096 ;;		line 540 in file "ST7735_TFT.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  x               1    wreg     unsigned char 
  4099 ;;  y               1   23[COMRAM] unsigned char 
  4100 ;;  w               1   24[COMRAM] unsigned char 
  4101 ;;  h               1   25[COMRAM] unsigned char 
  4102 ;;  color           2   26[COMRAM] unsigned int 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  x               1   34[COMRAM] unsigned char 
  4105 ;;  lo              1   33[COMRAM] unsigned char 
  4106 ;;  hi              1   32[COMRAM] unsigned char 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;		None               void
  4109 ;; Registers used:
  4110 ;;		wreg, status,2, status,0, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4116 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;Total ram usage:       12 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:    6
  4123 ;; This function calls:
  4124 ;;		_setAddrWindow
  4125 ;;		_spiwrite
  4126 ;; This function is called by:
  4127 ;;		_fillScreen
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           	psect	text16
  4132  000D16                     __ptext16:
  4133                           	opt stack 0
  4134  000D16                     _fillRectangle:
  4135                           	opt stack 22
  4136                           
  4137                           ;incstack = 0
  4138                           ;fillRectangle@x stored from wreg
  4139  000D16  6E23               	movwf	fillRectangle@x,c
  4140                           
  4141                           ;ST7735_TFT.c: 542: unsigned char hi, lo;
  4142                           ;ST7735_TFT.c: 543: if((x >= 128) || (y >= 160))
  4143  000D18  0E80               	movlw	128
  4144  000D1A  6023               	cpfslt	fillRectangle@x,c
  4145  000D1C  D069               	goto	l330
  4146  000D1E  0E9F               	movlw	159
  4147  000D20  6418               	cpfsgt	fillRectangle@y,c
  4148  000D22  D001               	goto	l3451
  4149                           
  4150                           ;ST7735_TFT.c: 544: return;
  4151  000D24  D065               	goto	l330
  4152  000D26                     l3451:
  4153                           
  4154                           ;ST7735_TFT.c: 545: if((x + w - 1) >= 128)
  4155  000D26  0EFF               	movlw	255
  4156  000D28  6E1D               	movwf	??_fillRectangle& (0+255),c
  4157  000D2A  0EFF               	movlw	255
  4158  000D2C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4159  000D2E  5019               	movf	fillRectangle@w,w,c
  4160  000D30  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4161  000D34  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4162  000D36  261F               	addwf	??_fillRectangle+2,f,c
  4163  000D38  0E00               	movlw	0
  4164  000D3A  2220               	addwfc	??_fillRectangle+3,f,c
  4165  000D3C  501D               	movf	??_fillRectangle,w,c
  4166  000D3E  261F               	addwf	??_fillRectangle+2,f,c
  4167  000D40  501E               	movf	??_fillRectangle+1,w,c
  4168  000D42  2220               	addwfc	??_fillRectangle+3,f,c
  4169  000D44  BE20               	btfsc	??_fillRectangle+3,7,c
  4170  000D46  D00A               	goto	l331
  4171  000D48  5020               	movf	??_fillRectangle+3,w,c
  4172  000D4A  E104               	bnz	u2400
  4173  000D4C  0E80               	movlw	128
  4174  000D4E  5C1F               	subwf	??_fillRectangle+2,w,c
  4175  000D50  A0D8               	btfss	status,0,c
  4176  000D52  D004               	goto	l331
  4177  000D54                     u2400:
  4178                           
  4179                           ;ST7735_TFT.c: 546: w = 128 - x;
  4180  000D54  5023               	movf	fillRectangle@x,w,c
  4181  000D56  0800               	sublw	0
  4182  000D58  0F80               	addlw	128
  4183  000D5A  6E19               	movwf	fillRectangle@w,c
  4184  000D5C                     l331:
  4185                           
  4186                           ;ST7735_TFT.c: 547: if((y + h - 1) >= 160)
  4187  000D5C  0EFF               	movlw	255
  4188  000D5E  6E1D               	movwf	??_fillRectangle& (0+255),c
  4189  000D60  0EFF               	movlw	255
  4190  000D62  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4191  000D64  501A               	movf	fillRectangle@h,w,c
  4192  000D66  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4193  000D6A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4194  000D6C  261F               	addwf	??_fillRectangle+2,f,c
  4195  000D6E  0E00               	movlw	0
  4196  000D70  2220               	addwfc	??_fillRectangle+3,f,c
  4197  000D72  501D               	movf	??_fillRectangle,w,c
  4198  000D74  261F               	addwf	??_fillRectangle+2,f,c
  4199  000D76  501E               	movf	??_fillRectangle+1,w,c
  4200  000D78  2220               	addwfc	??_fillRectangle+3,f,c
  4201  000D7A  BE20               	btfsc	??_fillRectangle+3,7,c
  4202  000D7C  D00B               	goto	l3457
  4203  000D7E  5020               	movf	??_fillRectangle+3,w,c
  4204  000D80  E104               	bnz	u2410
  4205  000D82  0EA0               	movlw	160
  4206  000D84  5C1F               	subwf	??_fillRectangle+2,w,c
  4207  000D86  A0D8               	btfss	status,0,c
  4208  000D88  D005               	goto	l3457
  4209  000D8A                     u2410:
  4210                           
  4211                           ;ST7735_TFT.c: 548: h = 160 - y;
  4212  000D8A  5018               	movf	fillRectangle@y,w,c
  4213  000D8C  0800               	sublw	0
  4214  000D8E  0FA0               	addlw	160
  4215  000D90  6E1A               	movwf	fillRectangle@h,c
  4216  000D92  D000               	goto	l3457
  4217  000D94                     l3457:
  4218                           
  4219                           ;ST7735_TFT.c: 549: setAddrWindow(x, y, x+w-1, y+h-1);
  4220  000D94  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4221  000D98  5023               	movf	fillRectangle@x,w,c
  4222  000D9A  2419               	addwf	fillRectangle@w,w,c
  4223  000D9C  6E1D               	movwf	??_fillRectangle& (0+255),c
  4224  000D9E  041D               	decf	??_fillRectangle,w,c
  4225  000DA0  6E15               	movwf	setAddrWindow@x1,c
  4226  000DA2  5018               	movf	fillRectangle@y,w,c
  4227  000DA4  241A               	addwf	fillRectangle@h,w,c
  4228  000DA6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4229  000DA8  041E               	decf	??_fillRectangle+1,w,c
  4230  000DAA  6E16               	movwf	setAddrWindow@y1,c
  4231  000DAC  5023               	movf	fillRectangle@x,w,c
  4232  000DAE  EC12  F009         	call	_setAddrWindow
  4233                           
  4234                           ;ST7735_TFT.c: 550: hi = color >> 8; lo = color;
  4235  000DB2  501C               	movf	fillRectangle@color+1,w,c
  4236  000DB4  6E21               	movwf	fillRectangle@hi,c
  4237  000DB6  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4238                           
  4239                           ;ST7735_TFT.c: 551: PORTDbits.RD3 = 1;
  4240  000DBA  8683               	bsf	3971,3,c	;volatile
  4241                           
  4242                           ;ST7735_TFT.c: 552: PORTDbits.RD4 = 0;
  4243  000DBC  9883               	bcf	3971,4,c	;volatile
  4244                           
  4245                           ;ST7735_TFT.c: 554: for(y=h; y>0; y--) {
  4246  000DBE  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4247  000DC2                     l3469:
  4248  000DC2  5018               	movf	fillRectangle@y,w,c
  4249  000DC4  B4D8               	btfsc	status,2,c
  4250  000DC6  D013               	goto	l334
  4251  000DC8  D001               	goto	l333
  4252  000DCA  D011               	goto	l334
  4253  000DCC                     l333:
  4254                           
  4255                           ;ST7735_TFT.c: 555: for(x = w; x > 0; x--) {
  4256  000DCC  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4257  000DD0                     l3473:
  4258  000DD0  5023               	movf	fillRectangle@x,w,c
  4259  000DD2  B4D8               	btfsc	status,2,c
  4260  000DD4  D00A               	goto	l3483
  4261  000DD6  D001               	goto	l3477
  4262  000DD8  D008               	goto	l3483
  4263  000DDA                     l3477:
  4264                           
  4265                           ;ST7735_TFT.c: 556: spiwrite(hi);
  4266  000DDA  5021               	movf	fillRectangle@hi,w,c
  4267  000DDC  EC62  F00A         	call	_spiwrite
  4268                           
  4269                           ;ST7735_TFT.c: 557: spiwrite(lo);
  4270  000DE0  5022               	movf	fillRectangle@lo,w,c
  4271  000DE2  EC62  F00A         	call	_spiwrite
  4272  000DE6  0623               	decf	fillRectangle@x,f,c
  4273  000DE8  D7F3               	goto	l3473
  4274  000DEA                     l3483:
  4275  000DEA  0618               	decf	fillRectangle@y,f,c
  4276  000DEC  D7EA               	goto	l3469
  4277  000DEE                     l334:
  4278                           
  4279                           ;ST7735_TFT.c: 558: }
  4280                           ;ST7735_TFT.c: 559: }
  4281                           ;ST7735_TFT.c: 560: PORTDbits.RD4 = 1;
  4282  000DEE  8883               	bsf	3971,4,c	;volatile
  4283  000DF0                     l330:
  4284  000DF0  0012               	return		;funcret
  4285  000DF2                     __end_of_fillRectangle:
  4286                           	opt stack 0
  4287                           tblptru	equ	0xFF8
  4288                           tblptrh	equ	0xFF7
  4289                           tblptrl	equ	0xFF6
  4290                           tablat	equ	0xFF5
  4291                           prodh	equ	0xFF4
  4292                           prodl	equ	0xFF3
  4293                           intcon	equ	0xFF2
  4294                           intcon2	equ	0xFF1
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           postdec1	equ	0xFE5
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _drawtext *****************
  4307 ;; Defined at:
  4308 ;;		line 511 in file "ST7735_TFT.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  x               1    wreg     unsigned char 
  4311 ;;  y               1   56[COMRAM] unsigned char 
  4312 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4313 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4314 ;;  color           2   59[COMRAM] unsigned int 
  4315 ;;  bg              2   61[COMRAM] unsigned int 
  4316 ;;  size            1   63[COMRAM] unsigned char 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  x               1    0[BANK0 ] unsigned char 
  4319 ;;  i               2    3[BANK0 ] unsigned int 
  4320 ;;  textsize        2    1[BANK0 ] unsigned int 
  4321 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4322 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;		None               void
  4325 ;; Registers used:
  4326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4332 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;Total ram usage:       17 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    9
  4339 ;; This function calls:
  4340 ;;		_drawChar
  4341 ;;		_strlen
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;;		_Initialize_Screen
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           	psect	text17
  4349  000B1A                     __ptext17:
  4350                           	opt stack 0
  4351  000B1A                     _drawtext:
  4352                           	opt stack 21
  4353                           
  4354                           ;incstack = 0
  4355                           ;drawtext@x stored from wreg
  4356  000B1A  0100               	movlb	0	; () banked
  4357  000B1C  6FDE               	movwf	drawtext@x& (0+255),b
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;ST7735_TFT.c: 513: unsigned char cursor_x, cursor_y;
  4361                           ;ST7735_TFT.c: 514: unsigned int textsize, i;
  4362                           ;ST7735_TFT.c: 515: cursor_x = x, cursor_y = y;
  4363  000B1E  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4364                           
  4365                           ; BSR set to: 0
  4366  000B22  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;ST7735_TFT.c: 516: textsize = strlen(_text);
  4370  000B26  C03A  F011         	movff	drawtext@_text,strlen@s
  4371  000B2A  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4372  000B2E  EC7E  F009         	call	_strlen	;wreg free
  4373  000B32  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4374  000B36  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4375                           
  4376                           ;ST7735_TFT.c: 517: for(i = 0; i < textsize; i++){
  4377  000B3A  0E00               	movlw	0
  4378  000B3C  0100               	movlb	0	; () banked
  4379  000B3E  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4380  000B40  0E00               	movlw	0
  4381  000B42  6FE1               	movwf	drawtext@i& (0+255),b
  4382  000B44  D064               	goto	l3521
  4383  000B46                     l3495:
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;ST7735_TFT.c: 518: if(wrap && ((cursor_x + size * 5) > 128)){
  4387  000B46  505C               	movf	_wrap,w,c
  4388  000B48  B4D8               	btfsc	status,2,c
  4389  000B4A  D034               	goto	l3511
  4390                           
  4391                           ; BSR set to: 0
  4392  000B4C  5040               	movf	drawtext@size,w,c
  4393  000B4E  0D05               	mullw	5
  4394  000B50  0100               	movlb	0	; () banked
  4395  000B52  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4396  000B54  6E41               	movwf	??_drawtext& (0+255),c
  4397  000B56  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4398  000B58  50F3               	movf	prodl,w,c
  4399  000B5A  2641               	addwf	??_drawtext,f,c
  4400  000B5C  50F4               	movf	prodh,w,c
  4401  000B5E  2242               	addwfc	??_drawtext+1,f,c
  4402  000B60  BE42               	btfsc	??_drawtext+1,7,c
  4403  000B62  D028               	goto	l3511
  4404  000B64  5042               	movf	??_drawtext+1,w,c
  4405  000B66  E104               	bnz	u2470
  4406  000B68  0E81               	movlw	129
  4407  000B6A  5C41               	subwf	??_drawtext,w,c
  4408  000B6C  A0D8               	btfss	status,0,c
  4409  000B6E  D022               	goto	l3511
  4410  000B70                     u2470:
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;ST7735_TFT.c: 519: cursor_x = 0;
  4414  000B70  0E00               	movlw	0
  4415  000B72  0100               	movlb	0	; () banked
  4416  000B74  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;ST7735_TFT.c: 520: cursor_y = cursor_y + size * 7 + 3 ;
  4420  000B76  5040               	movf	drawtext@size,w,c
  4421  000B78  0D07               	mullw	7
  4422  000B7A  50F3               	movf	prodl,w,c
  4423  000B7C  0100               	movlb	0	; () banked
  4424  000B7E  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4425  000B80  0F03               	addlw	3
  4426  000B82  0100               	movlb	0	; () banked
  4427  000B84  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;ST7735_TFT.c: 521: if(cursor_y > 160) cursor_y = 160;
  4431  000B86  0EA0               	movlw	160
  4432  000B88  0100               	movlb	0	; () banked
  4433  000B8A  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4434  000B8C  D004               	goto	l3507
  4435                           
  4436                           ; BSR set to: 0
  4437  000B8E  0EA0               	movlw	160
  4438  000B90  0100               	movlb	0	; () banked
  4439  000B92  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4440  000B94  D000               	goto	l3507
  4441  000B96                     l3507:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;ST7735_TFT.c: 522: if(_text[i] == 0x20) goto _skip; }
  4445  000B96  0100               	movlb	0	; () banked
  4446  000B98  51E1               	movf	drawtext@i& (0+255),w,b
  4447  000B9A  243A               	addwf	drawtext@_text,w,c
  4448  000B9C  6ED9               	movwf	fsr2l,c
  4449  000B9E  0100               	movlb	0	; () banked
  4450  000BA0  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4451  000BA2  203B               	addwfc	drawtext@_text+1,w,c
  4452  000BA4  6EDA               	movwf	fsr2h,c
  4453  000BA6  0E20               	movlw	32
  4454  000BA8  18DE               	xorwf	postinc2,w,c
  4455  000BAA  B4D8               	btfsc	status,2,c
  4456  000BAC  D02C               	goto	l3519
  4457  000BAE  D002               	goto	l3511
  4458                           
  4459                           ; BSR set to: 0
  4460  000BB0  D02A               	goto	l3519
  4461                           
  4462                           ; BSR set to: 0
  4463  000BB2  D000               	goto	l3511
  4464  000BB4                     l3511:
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;ST7735_TFT.c: 523: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4468  000BB4  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4469  000BB8  0100               	movlb	0	; () banked
  4470  000BBA  51E1               	movf	drawtext@i& (0+255),w,b
  4471  000BBC  243A               	addwf	drawtext@_text,w,c
  4472  000BBE  6ED9               	movwf	fsr2l,c
  4473  000BC0  0100               	movlb	0	; () banked
  4474  000BC2  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4475  000BC4  203B               	addwfc	drawtext@_text+1,w,c
  4476  000BC6  6EDA               	movwf	fsr2h,c
  4477  000BC8  50DF               	movf	indf2,w,c
  4478  000BCA  6E2F               	movwf	drawChar@c,c
  4479  000BCC  C03C  F030         	movff	drawtext@color,drawChar@color
  4480  000BD0  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4481  000BD4  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4482  000BD8  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4483  000BDC  C040  F034         	movff	drawtext@size,drawChar@size
  4484  000BE0  0100               	movlb	0	; () banked
  4485  000BE2  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4486  000BE4  EC14  F003         	call	_drawChar
  4487                           
  4488                           ;ST7735_TFT.c: 524: cursor_x = cursor_x + size * 6;
  4489  000BE8  5040               	movf	drawtext@size,w,c
  4490  000BEA  0D06               	mullw	6
  4491  000BEC  50F3               	movf	prodl,w,c
  4492  000BEE  0100               	movlb	0	; () banked
  4493  000BF0  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4494  000BF2  0100               	movlb	0	; () banked
  4495  000BF4  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;ST7735_TFT.c: 525: if(cursor_x > 128) cursor_x = 128;
  4499  000BF6  0E80               	movlw	128
  4500  000BF8  0100               	movlb	0	; () banked
  4501  000BFA  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4502  000BFC  D004               	goto	l3519
  4503                           
  4504                           ; BSR set to: 0
  4505  000BFE  0E80               	movlw	128
  4506  000C00  0100               	movlb	0	; () banked
  4507  000C02  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4508                           
  4509                           ; BSR set to: 0
  4510  000C04  D000               	goto	l3519
  4511  000C06                     l3519:
  4512                           
  4513                           ; BSR set to: 0
  4514  000C06  0100               	movlb	0	; () banked
  4515  000C08  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4516  000C0A  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4517  000C0C  D000               	goto	l3521
  4518  000C0E                     l3521:
  4519                           
  4520                           ; BSR set to: 0
  4521  000C0E  0100               	movlb	0	; () banked
  4522  000C10  51DF               	movf	drawtext@textsize& (0+255),w,b
  4523  000C12  0100               	movlb	0	; () banked
  4524  000C14  5DE1               	subwf	drawtext@i& (0+255),w,b
  4525  000C16  0100               	movlb	0	; () banked
  4526  000C18  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4527  000C1A  0100               	movlb	0	; () banked
  4528  000C1C  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4529  000C1E  A0D8               	btfss	status,0,c
  4530  000C20  D792               	goto	l3495
  4531                           
  4532                           ; BSR set to: 0
  4533                           
  4534                           ; BSR set to: 0
  4535  000C22  0012               	return		;funcret
  4536  000C24                     __end_of_drawtext:
  4537                           	opt stack 0
  4538                           tblptru	equ	0xFF8
  4539                           tblptrh	equ	0xFF7
  4540                           tblptrl	equ	0xFF6
  4541                           tablat	equ	0xFF5
  4542                           prodh	equ	0xFF4
  4543                           prodl	equ	0xFF3
  4544                           intcon	equ	0xFF2
  4545                           intcon2	equ	0xFF1
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           postdec1	equ	0xFE5
  4549                           fsr1l	equ	0xFE1
  4550                           indf2	equ	0xFDF
  4551                           postinc2	equ	0xFDE
  4552                           postdec2	equ	0xFDD
  4553                           fsr2h	equ	0xFDA
  4554                           fsr2l	equ	0xFD9
  4555                           status	equ	0xFD8
  4556                           
  4557 ;; *************** function _strlen *****************
  4558 ;; Defined at:
  4559 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4562 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4565 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  2   16[COMRAM] unsigned int 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4575 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;Total ram usage:        6 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    3
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_drawtext
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           	psect	text18
  4590  0012FC                     __ptext18:
  4591                           	opt stack 0
  4592  0012FC                     _strlen:
  4593                           	opt stack 26
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;incstack = 0
  4597  0012FC  C011  F015         	movff	strlen@s,strlen@cp
  4598  001300  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4599  001304  D003               	goto	l3441
  4600  001306                     l3439:
  4601  001306  4A15               	infsnz	strlen@cp,f,c
  4602  001308  2A16               	incf	strlen@cp+1,f,c
  4603  00130A  D000               	goto	l3441
  4604  00130C                     l3441:
  4605  00130C  C015  FFD9         	movff	strlen@cp,fsr2l
  4606  001310  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4607  001314  50DF               	movf	indf2,w,c
  4608  001316  A4D8               	btfss	status,2,c
  4609  001318  D7F6               	goto	l3439
  4610  00131A  C011  F013         	movff	strlen@s,??_strlen
  4611  00131E  C012  F014         	movff	strlen@s+1,??_strlen+1
  4612  001322  1E13               	comf	??_strlen,f,c
  4613  001324  1E14               	comf	??_strlen+1,f,c
  4614  001326  4A13               	infsnz	??_strlen,f,c
  4615  001328  2A14               	incf	??_strlen+1,f,c
  4616  00132A  5015               	movf	strlen@cp,w,c
  4617  00132C  2413               	addwf	??_strlen,w,c
  4618  00132E  6E11               	movwf	?_strlen,c
  4619  001330  5016               	movf	strlen@cp+1,w,c
  4620  001332  2014               	addwfc	??_strlen+1,w,c
  4621  001334  6E12               	movwf	?_strlen+1,c
  4622  001336  D000               	goto	l1041
  4623  001338                     l1041:
  4624  001338  0012               	return		;funcret
  4625  00133A                     __end_of_strlen:
  4626                           	opt stack 0
  4627                           tblptru	equ	0xFF8
  4628                           tblptrh	equ	0xFF7
  4629                           tblptrl	equ	0xFF6
  4630                           tablat	equ	0xFF5
  4631                           prodh	equ	0xFF4
  4632                           prodl	equ	0xFF3
  4633                           intcon	equ	0xFF2
  4634                           intcon2	equ	0xFF1
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           postdec1	equ	0xFE5
  4638                           fsr1l	equ	0xFE1
  4639                           indf2	equ	0xFDF
  4640                           postinc2	equ	0xFDE
  4641                           postdec2	equ	0xFDD
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function _drawChar *****************
  4647 ;; Defined at:
  4648 ;;		line 484 in file "ST7735_TFT.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  x               1    wreg     unsigned char 
  4651 ;;  y               1   45[COMRAM] unsigned char 
  4652 ;;  c               1   46[COMRAM] unsigned char 
  4653 ;;  color           2   47[COMRAM] unsigned int 
  4654 ;;  bg              2   49[COMRAM] unsigned int 
  4655 ;;  size            1   51[COMRAM] unsigned char 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  x               1   53[COMRAM] unsigned char 
  4658 ;;  line            1   52[COMRAM] unsigned char 
  4659 ;;  i               1   55[COMRAM] unsigned char 
  4660 ;;  j               1   54[COMRAM] unsigned char 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;		None               void
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4670 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;Total ram usage:       11 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    8
  4677 ;; This function calls:
  4678 ;;		___wmul
  4679 ;;		_drawPixel
  4680 ;;		_fillRect
  4681 ;; This function is called by:
  4682 ;;		_drawtext
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text19
  4687  000628                     __ptext19:
  4688                           	opt stack 0
  4689  000628                     _drawChar:
  4690                           	opt stack 21
  4691                           
  4692                           ;incstack = 0
  4693                           ;drawChar@x stored from wreg
  4694  000628  6E36               	movwf	drawChar@x,c
  4695                           
  4696                           ;ST7735_TFT.c: 486: char i, j;
  4697                           ;ST7735_TFT.c: 487: if((x >= 128) || (y >= 160))
  4698  00062A  0E80               	movlw	128
  4699  00062C  6036               	cpfslt	drawChar@x,c
  4700  00062E  D0A6               	goto	l293
  4701  000630  0E9F               	movlw	159
  4702  000632  642E               	cpfsgt	drawChar@y,c
  4703  000634  D001               	goto	l3387
  4704                           
  4705                           ;ST7735_TFT.c: 488: return;
  4706  000636  D0A2               	goto	l293
  4707  000638                     l3387:
  4708                           
  4709                           ;ST7735_TFT.c: 489: if(size < 1) size = 1;
  4710  000638  5034               	movf	drawChar@size,w,c
  4711  00063A  A4D8               	btfss	status,2,c
  4712  00063C  D003               	goto	l3391
  4713  00063E  0E01               	movlw	1
  4714  000640  6E34               	movwf	drawChar@size,c
  4715  000642  D000               	goto	l3391
  4716  000644                     l3391:
  4717                           
  4718                           ;ST7735_TFT.c: 490: if((c < ' ') || (c > '~'))
  4719  000644  0E1F               	movlw	31
  4720  000646  642F               	cpfsgt	drawChar@c,c
  4721  000648  D004               	goto	l3395
  4722  00064A  0E7E               	movlw	126
  4723  00064C  642F               	cpfsgt	drawChar@c,c
  4724  00064E  D003               	goto	l295
  4725  000650  D000               	goto	l3395
  4726  000652                     l3395:
  4727                           
  4728                           ;ST7735_TFT.c: 491: c = '?';
  4729  000652  0E3F               	movlw	63
  4730  000654  6E2F               	movwf	drawChar@c,c
  4731  000656                     l295:
  4732                           
  4733                           ;ST7735_TFT.c: 492: for(i=0; i<5; i++ ) {
  4734  000656  0E00               	movlw	0
  4735  000658  6E38               	movwf	drawChar@i,c
  4736  00065A                     l3397:
  4737  00065A  0E04               	movlw	4
  4738  00065C  6438               	cpfsgt	drawChar@i,c
  4739  00065E  D001               	goto	l3401
  4740  000660  D08D               	goto	l293
  4741  000662                     l3401:
  4742                           
  4743                           ;ST7735_TFT.c: 493: unsigned char line;
  4744                           ;ST7735_TFT.c: 494: if(c < 'S')
  4745  000662  0E53               	movlw	83
  4746  000664  602F               	cpfslt	drawChar@c,c
  4747  000666  D015               	goto	l3405
  4748                           
  4749                           ;ST7735_TFT.c: 495: line = font[(c - 32)*5 + i];
  4750  000668  0EE0               	movlw	224
  4751  00066A  242F               	addwf	drawChar@c,w,c
  4752  00066C  6E11               	movwf	___wmul@multiplier,c
  4753  00066E  6A12               	clrf	___wmul@multiplier+1,c
  4754  000670  0EFF               	movlw	255
  4755  000672  2212               	addwfc	___wmul@multiplier+1,f,c
  4756  000674  0E00               	movlw	0
  4757  000676  6E14               	movwf	___wmul@multiplicand+1,c
  4758  000678  0E05               	movlw	5
  4759  00067A  6E13               	movwf	___wmul@multiplicand,c
  4760  00067C  EC1A  F00A         	call	___wmul	;wreg free
  4761  000680  5038               	movf	drawChar@i,w,c
  4762  000682  2611               	addwf	?___wmul,f,c
  4763  000684  0E00               	movlw	0
  4764  000686  2212               	addwfc	?___wmul+1,f,c
  4765  000688  0EC3               	movlw	low _font
  4766  00068A  2411               	addwf	?___wmul,w,c
  4767  00068C  6EF6               	movwf	tblptrl,c
  4768  00068E  0EFD               	movlw	high _font
  4769  000690  D014               	goto	L2
  4770  000692                     l3405:
  4771                           
  4772                           ;ST7735_TFT.c: 496: else
  4773                           ;ST7735_TFT.c: 497: line = font2[(c - 'S')*5 + i];
  4774  000692  0EAD               	movlw	173
  4775  000694  242F               	addwf	drawChar@c,w,c
  4776  000696  6E11               	movwf	___wmul@multiplier,c
  4777  000698  6A12               	clrf	___wmul@multiplier+1,c
  4778  00069A  0EFF               	movlw	255
  4779  00069C  2212               	addwfc	___wmul@multiplier+1,f,c
  4780  00069E  0E00               	movlw	0
  4781  0006A0  6E14               	movwf	___wmul@multiplicand+1,c
  4782  0006A2  0E05               	movlw	5
  4783  0006A4  6E13               	movwf	___wmul@multiplicand,c
  4784  0006A6  EC1A  F00A         	call	___wmul	;wreg free
  4785  0006AA  5038               	movf	drawChar@i,w,c
  4786  0006AC  2611               	addwf	?___wmul,f,c
  4787  0006AE  0E00               	movlw	0
  4788  0006B0  2212               	addwfc	?___wmul+1,f,c
  4789  0006B2  0EC2               	movlw	low _font2
  4790  0006B4  2411               	addwf	?___wmul,w,c
  4791  0006B6  6EF6               	movwf	tblptrl,c
  4792  0006B8  0EFE               	movlw	high _font2
  4793  0006BA                     L2:
  4794  0006BA  2012               	addwfc	?___wmul+1,w,c
  4795  0006BC  6EF7               	movwf	tblptrh,c
  4796  0006BE                     	if	0	;There are less than 3 active tblptr bytes
  4797  0006BE                     	endif
  4798  0006BE  0008               	tblrd		*
  4799  0006C0  CFF5 F035          	movff	tablat,drawChar@line
  4800  0006C4  D000               	goto	l3407
  4801  0006C6                     l3407:
  4802                           
  4803                           ;ST7735_TFT.c: 498: for(j=0; j<7; j++, line >>= 1) {
  4804  0006C6  0E00               	movlw	0
  4805  0006C8  6E37               	movwf	drawChar@j,c
  4806  0006CA                     l3409:
  4807  0006CA  0E06               	movlw	6
  4808  0006CC  6437               	cpfsgt	drawChar@j,c
  4809  0006CE  D001               	goto	l302
  4810  0006D0  D053               	goto	l3433
  4811  0006D2                     l302:
  4812                           
  4813                           ;ST7735_TFT.c: 499: if(line & 0x01) {
  4814  0006D2  A035               	btfss	drawChar@line,0,c
  4815  0006D4  D023               	goto	l3419
  4816                           
  4817                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, color);
  4818  0006D6  0434               	decf	drawChar@size,w,c
  4819  0006D8  A4D8               	btfss	status,2,c
  4820  0006DA  D00C               	goto	l3417
  4821  0006DC  502E               	movf	drawChar@y,w,c
  4822  0006DE  2437               	addwf	drawChar@j,w,c
  4823  0006E0  6E18               	movwf	drawPixel@y,c
  4824  0006E2  C030  F019         	movff	drawChar@color,drawPixel@color
  4825  0006E6  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  4826  0006EA  5036               	movf	drawChar@x,w,c
  4827  0006EC  2438               	addwf	drawChar@i,w,c
  4828  0006EE  ECED  F009         	call	_drawPixel
  4829  0006F2  D03E               	goto	l3427
  4830  0006F4                     l3417:
  4831                           
  4832                           ;ST7735_TFT.c: 501: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4833  0006F4  5037               	movf	drawChar@j,w,c
  4834  0006F6  0234               	mulwf	drawChar@size,c
  4835  0006F8  50F3               	movf	prodl,w,c
  4836  0006FA  242E               	addwf	drawChar@y,w,c
  4837  0006FC  6E23               	movwf	fillRect@y,c
  4838  0006FE  C034  F024         	movff	drawChar@size,fillRect@w
  4839  000702  C034  F025         	movff	drawChar@size,fillRect@h
  4840  000706  C030  F026         	movff	drawChar@color,fillRect@color
  4841  00070A  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  4842  00070E  5038               	movf	drawChar@i,w,c
  4843  000710  0234               	mulwf	drawChar@size,c
  4844  000712  50F3               	movf	prodl,w,c
  4845  000714  2436               	addwf	drawChar@x,w,c
  4846  000716  EC39  F009         	call	_fillRect
  4847                           
  4848                           ;ST7735_TFT.c: 502: }
  4849  00071A  D02A               	goto	l3427
  4850  00071C                     l3419:
  4851                           
  4852                           ;ST7735_TFT.c: 503: else if(bg != color) {
  4853  00071C  5030               	movf	drawChar@color,w,c
  4854  00071E  1832               	xorwf	drawChar@bg,w,c
  4855  000720  E104               	bnz	u2330
  4856  000722  5031               	movf	drawChar@color+1,w,c
  4857  000724  1833               	xorwf	drawChar@bg+1,w,c
  4858  000726  B4D8               	btfsc	status,2,c
  4859  000728  D023               	goto	l3427
  4860  00072A                     u2330:
  4861                           
  4862                           ;ST7735_TFT.c: 504: if(size == 1) drawPixel(x+i, y+j, bg);
  4863  00072A  0434               	decf	drawChar@size,w,c
  4864  00072C  A4D8               	btfss	status,2,c
  4865  00072E  D00C               	goto	l3425
  4866  000730  502E               	movf	drawChar@y,w,c
  4867  000732  2437               	addwf	drawChar@j,w,c
  4868  000734  6E18               	movwf	drawPixel@y,c
  4869  000736  C032  F019         	movff	drawChar@bg,drawPixel@color
  4870  00073A  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4871  00073E  5036               	movf	drawChar@x,w,c
  4872  000740  2438               	addwf	drawChar@i,w,c
  4873  000742  ECED  F009         	call	_drawPixel
  4874  000746  D014               	goto	l3427
  4875  000748                     l3425:
  4876                           
  4877                           ;ST7735_TFT.c: 505: else fillRect(x+i*size, y+j*size, size, size, bg);
  4878  000748  5037               	movf	drawChar@j,w,c
  4879  00074A  0234               	mulwf	drawChar@size,c
  4880  00074C  50F3               	movf	prodl,w,c
  4881  00074E  242E               	addwf	drawChar@y,w,c
  4882  000750  6E23               	movwf	fillRect@y,c
  4883  000752  C034  F024         	movff	drawChar@size,fillRect@w
  4884  000756  C034  F025         	movff	drawChar@size,fillRect@h
  4885  00075A  C032  F026         	movff	drawChar@bg,fillRect@color
  4886  00075E  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4887  000762  5038               	movf	drawChar@i,w,c
  4888  000764  0234               	mulwf	drawChar@size,c
  4889  000766  50F3               	movf	prodl,w,c
  4890  000768  2436               	addwf	drawChar@x,w,c
  4891  00076A  EC39  F009         	call	_fillRect
  4892  00076E  D000               	goto	l3427
  4893  000770                     l3427:
  4894  000770  2A37               	incf	drawChar@j,f,c
  4895  000772  90D8               	bcf	status,0,c
  4896  000774  3235               	rrcf	drawChar@line,f,c
  4897  000776  D7A9               	goto	l3409
  4898  000778                     l3433:
  4899  000778  2A38               	incf	drawChar@i,f,c
  4900  00077A  D76F               	goto	l3397
  4901  00077C                     l293:
  4902  00077C  0012               	return		;funcret
  4903  00077E                     __end_of_drawChar:
  4904                           	opt stack 0
  4905                           tblptru	equ	0xFF8
  4906                           tblptrh	equ	0xFF7
  4907                           tblptrl	equ	0xFF6
  4908                           tablat	equ	0xFF5
  4909                           prodh	equ	0xFF4
  4910                           prodl	equ	0xFF3
  4911                           intcon	equ	0xFF2
  4912                           intcon2	equ	0xFF1
  4913                           postinc0	equ	0xFEE
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _fillRect *****************
  4925 ;; Defined at:
  4926 ;;		line 474 in file "ST7735_TFT.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;  x               1    wreg     unsigned char 
  4929 ;;  y               1   34[COMRAM] unsigned char 
  4930 ;;  w               1   35[COMRAM] unsigned char 
  4931 ;;  h               1   36[COMRAM] unsigned char 
  4932 ;;  color           2   37[COMRAM] unsigned int 
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;  x               1   42[COMRAM] unsigned char 
  4935 ;;  i               2   43[COMRAM] int 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;		None               void
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4945 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4948 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;Total ram usage:       11 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    7
  4952 ;; This function calls:
  4953 ;;		_drawFastVLine
  4954 ;; This function is called by:
  4955 ;;		_drawChar
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text20
  4960  001272                     __ptext20:
  4961                           	opt stack 0
  4962  001272                     _fillRect:
  4963                           	opt stack 21
  4964                           
  4965                           ;incstack = 0
  4966                           ;fillRect@x stored from wreg
  4967  001272  6E2B               	movwf	fillRect@x,c
  4968                           
  4969                           ;ST7735_TFT.c: 476: signed int i;
  4970                           ;ST7735_TFT.c: 478: for (i = x; i < x + w; i++)
  4971  001274  C02B  F02C         	movff	fillRect@x,fillRect@i
  4972  001278  6A2D               	clrf	fillRect@i+1,c
  4973  00127A  D00E               	goto	l3289
  4974  00127C                     l3285:
  4975                           
  4976                           ;ST7735_TFT.c: 479: {
  4977                           ;ST7735_TFT.c: 480: drawFastVLine(i, y, h, color);
  4978  00127C  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4979  001280  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4980  001284  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4981  001288  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4982  00128C  502C               	movf	fillRect@i,w,c
  4983  00128E  EC86  F007         	call	_drawFastVLine
  4984  001292  4A2C               	infsnz	fillRect@i,f,c
  4985  001294  2A2D               	incf	fillRect@i+1,f,c
  4986  001296  D000               	goto	l3289
  4987  001298                     l3289:
  4988  001298  5024               	movf	fillRect@w,w,c
  4989  00129A  C02B  F028         	movff	fillRect@x,??_fillRect
  4990  00129E  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4991  0012A0  2628               	addwf	??_fillRect,f,c
  4992  0012A2  0E00               	movlw	0
  4993  0012A4  2229               	addwfc	??_fillRect+1,f,c
  4994  0012A6  5028               	movf	??_fillRect,w,c
  4995  0012A8  5C2C               	subwf	fillRect@i,w,c
  4996  0012AA  502D               	movf	fillRect@i+1,w,c
  4997  0012AC  0A80               	xorlw	128
  4998  0012AE  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4999  0012B0  5029               	movf	??_fillRect+1,w,c
  5000  0012B2  0A80               	xorlw	128
  5001  0012B4  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5002  0012B6  A0D8               	btfss	status,0,c
  5003  0012B8  D7E1               	goto	l3285
  5004  0012BA  0012               	return		;funcret
  5005  0012BC                     __end_of_fillRect:
  5006                           	opt stack 0
  5007                           tblptru	equ	0xFF8
  5008                           tblptrh	equ	0xFF7
  5009                           tblptrl	equ	0xFF6
  5010                           tablat	equ	0xFF5
  5011                           prodh	equ	0xFF4
  5012                           prodl	equ	0xFF3
  5013                           intcon	equ	0xFF2
  5014                           intcon2	equ	0xFF1
  5015                           postinc0	equ	0xFEE
  5016                           wreg	equ	0xFE8
  5017                           postdec1	equ	0xFE5
  5018                           fsr1l	equ	0xFE1
  5019                           indf2	equ	0xFDF
  5020                           postinc2	equ	0xFDE
  5021                           postdec2	equ	0xFDD
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _drawFastVLine *****************
  5027 ;; Defined at:
  5028 ;;		line 453 in file "ST7735_TFT.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  x               1    wreg     unsigned char 
  5031 ;;  y               1   23[COMRAM] unsigned char 
  5032 ;;  h               1   24[COMRAM] unsigned char 
  5033 ;;  color           2   25[COMRAM] unsigned int 
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;  x               1   33[COMRAM] unsigned char 
  5036 ;;  lo              1   32[COMRAM] unsigned char 
  5037 ;;  hi              1   31[COMRAM] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;		None               void
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;Total ram usage:       11 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    6
  5054 ;; This function calls:
  5055 ;;		_setAddrWindow
  5056 ;;		_spiwrite
  5057 ;; This function is called by:
  5058 ;;		_fillRect
  5059 ;;		_fillCircleHelper
  5060 ;;		_fillCircle
  5061 ;;		_drawRect
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text21
  5066  000F0C                     __ptext21:
  5067                           	opt stack 0
  5068  000F0C                     _drawFastVLine:
  5069                           	opt stack 22
  5070                           
  5071                           ;incstack = 0
  5072                           ;drawFastVLine@x stored from wreg
  5073  000F0C  6E22               	movwf	drawFastVLine@x,c
  5074                           
  5075                           ;ST7735_TFT.c: 455: unsigned char hi, lo;
  5076                           ;ST7735_TFT.c: 456: if((x >= 128) || (y >= 160))
  5077  000F0E  0E80               	movlw	128
  5078  000F10  6022               	cpfslt	drawFastVLine@x,c
  5079  000F12  D03F               	goto	l277
  5080  000F14  0E9F               	movlw	159
  5081  000F16  6418               	cpfsgt	drawFastVLine@y,c
  5082  000F18  D001               	goto	l3235
  5083                           
  5084                           ;ST7735_TFT.c: 457: return;
  5085  000F1A  D03B               	goto	l277
  5086  000F1C                     l3235:
  5087                           
  5088                           ;ST7735_TFT.c: 458: if((y + h - 1) >= 160)
  5089  000F1C  0EFF               	movlw	255
  5090  000F1E  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5091  000F20  0EFF               	movlw	255
  5092  000F22  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5093  000F24  5019               	movf	drawFastVLine@h,w,c
  5094  000F26  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5095  000F2A  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5096  000F2C  261E               	addwf	??_drawFastVLine+2,f,c
  5097  000F2E  0E00               	movlw	0
  5098  000F30  221F               	addwfc	??_drawFastVLine+3,f,c
  5099  000F32  501C               	movf	??_drawFastVLine,w,c
  5100  000F34  261E               	addwf	??_drawFastVLine+2,f,c
  5101  000F36  501D               	movf	??_drawFastVLine+1,w,c
  5102  000F38  221F               	addwfc	??_drawFastVLine+3,f,c
  5103  000F3A  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5104  000F3C  D00B               	goto	l3239
  5105  000F3E  501F               	movf	??_drawFastVLine+3,w,c
  5106  000F40  E104               	bnz	u2170
  5107  000F42  0EA0               	movlw	160
  5108  000F44  5C1E               	subwf	??_drawFastVLine+2,w,c
  5109  000F46  A0D8               	btfss	status,0,c
  5110  000F48  D005               	goto	l3239
  5111  000F4A                     u2170:
  5112                           
  5113                           ;ST7735_TFT.c: 459: h = 160 - y;
  5114  000F4A  5018               	movf	drawFastVLine@y,w,c
  5115  000F4C  0800               	sublw	0
  5116  000F4E  0FA0               	addlw	160
  5117  000F50  6E19               	movwf	drawFastVLine@h,c
  5118  000F52  D000               	goto	l3239
  5119  000F54                     l3239:
  5120                           
  5121                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  5122  000F54  501B               	movf	drawFastVLine@color+1,w,c
  5123  000F56  6E20               	movwf	drawFastVLine@hi,c
  5124  000F58  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5125                           
  5126                           ;ST7735_TFT.c: 461: setAddrWindow(x, y, x, y + h - 1);
  5127  000F5C  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5128  000F60  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5129  000F64  5018               	movf	drawFastVLine@y,w,c
  5130  000F66  2419               	addwf	drawFastVLine@h,w,c
  5131  000F68  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5132  000F6A  041C               	decf	??_drawFastVLine,w,c
  5133  000F6C  6E16               	movwf	setAddrWindow@y1,c
  5134  000F6E  5022               	movf	drawFastVLine@x,w,c
  5135  000F70  EC12  F009         	call	_setAddrWindow
  5136                           
  5137                           ;ST7735_TFT.c: 462: PORTDbits.RD3 = 1;
  5138  000F74  8683               	bsf	3971,3,c	;volatile
  5139                           
  5140                           ;ST7735_TFT.c: 463: PORTDbits.RD4 = 0;
  5141  000F76  9883               	bcf	3971,4,c	;volatile
  5142                           
  5143                           ;ST7735_TFT.c: 465: while (h--) {
  5144  000F78  D007               	goto	l3251
  5145  000F7A                     l3249:
  5146                           
  5147                           ;ST7735_TFT.c: 466: spiwrite(hi);
  5148  000F7A  5020               	movf	drawFastVLine@hi,w,c
  5149  000F7C  EC62  F00A         	call	_spiwrite
  5150                           
  5151                           ;ST7735_TFT.c: 467: spiwrite(lo);
  5152  000F80  5021               	movf	drawFastVLine@lo,w,c
  5153  000F82  EC62  F00A         	call	_spiwrite
  5154  000F86  D000               	goto	l3251
  5155  000F88                     l3251:
  5156  000F88  0619               	decf	drawFastVLine@h,f,c
  5157  000F8A  2819               	incf	drawFastVLine@h,w,c
  5158  000F8C  A4D8               	btfss	status,2,c
  5159  000F8E  D7F5               	goto	l3249
  5160                           
  5161                           ;ST7735_TFT.c: 468: }
  5162                           ;ST7735_TFT.c: 469: PORTDbits.RD4 = 1;
  5163  000F90  8883               	bsf	3971,4,c	;volatile
  5164  000F92                     l277:
  5165  000F92  0012               	return		;funcret
  5166  000F94                     __end_of_drawFastVLine:
  5167                           	opt stack 0
  5168                           tblptru	equ	0xFF8
  5169                           tblptrh	equ	0xFF7
  5170                           tblptrl	equ	0xFF6
  5171                           tablat	equ	0xFF5
  5172                           prodh	equ	0xFF4
  5173                           prodl	equ	0xFF3
  5174                           intcon	equ	0xFF2
  5175                           intcon2	equ	0xFF1
  5176                           postinc0	equ	0xFEE
  5177                           wreg	equ	0xFE8
  5178                           postdec1	equ	0xFE5
  5179                           fsr1l	equ	0xFE1
  5180                           indf2	equ	0xFDF
  5181                           postinc2	equ	0xFDE
  5182                           postdec2	equ	0xFDD
  5183                           fsr2h	equ	0xFDA
  5184                           fsr2l	equ	0xFD9
  5185                           status	equ	0xFD8
  5186                           
  5187 ;; *************** function _drawPixel *****************
  5188 ;; Defined at:
  5189 ;;		line 444 in file "ST7735_TFT.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;  x               1    wreg     unsigned char 
  5192 ;;  y               1   23[COMRAM] unsigned char 
  5193 ;;  color           2   24[COMRAM] unsigned int 
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;  x               1   26[COMRAM] unsigned char 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;		None               void
  5198 ;; Registers used:
  5199 ;;		wreg, status,2, status,0, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5205 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5206 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;Total ram usage:        4 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    6
  5212 ;; This function calls:
  5213 ;;		_setAddrWindow
  5214 ;;		_write_data
  5215 ;; This function is called by:
  5216 ;;		_drawChar
  5217 ;;		_drawCircle
  5218 ;;		_drawCircleHelper
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text22
  5223  0013DA                     __ptext22:
  5224                           	opt stack 0
  5225  0013DA                     _drawPixel:
  5226                           	opt stack 22
  5227                           
  5228                           ;incstack = 0
  5229                           ;drawPixel@x stored from wreg
  5230  0013DA  6E1B               	movwf	drawPixel@x,c
  5231                           
  5232                           ;ST7735_TFT.c: 446: if((x >= 128) || (y >= 160))
  5233  0013DC  0E80               	movlw	128
  5234  0013DE  601B               	cpfslt	drawPixel@x,c
  5235  0013E0  D013               	goto	l271
  5236  0013E2  0E9F               	movlw	159
  5237  0013E4  6418               	cpfsgt	drawPixel@y,c
  5238  0013E6  D001               	goto	l3277
  5239                           
  5240                           ;ST7735_TFT.c: 447: return;
  5241  0013E8  D00F               	goto	l271
  5242  0013EA                     l3277:
  5243                           
  5244                           ;ST7735_TFT.c: 448: setAddrWindow(x,y,x+1,y+1);
  5245  0013EA  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5246  0013EE  281B               	incf	drawPixel@x,w,c
  5247  0013F0  6E15               	movwf	setAddrWindow@x1,c
  5248  0013F2  2818               	incf	drawPixel@y,w,c
  5249  0013F4  6E16               	movwf	setAddrWindow@y1,c
  5250  0013F6  501B               	movf	drawPixel@x,w,c
  5251  0013F8  EC12  F009         	call	_setAddrWindow
  5252                           
  5253                           ;ST7735_TFT.c: 449: write_data(color >> 8);
  5254  0013FC  501A               	movf	drawPixel@color+1,w,c
  5255  0013FE  EC7E  F00A         	call	_write_data
  5256                           
  5257                           ;ST7735_TFT.c: 450: write_data(color & 0xFF);
  5258  001402  5019               	movf	drawPixel@color,w,c
  5259  001404  EC7E  F00A         	call	_write_data
  5260  001408                     l271:
  5261  001408  0012               	return		;funcret
  5262  00140A                     __end_of_drawPixel:
  5263                           	opt stack 0
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           intcon	equ	0xFF2
  5271                           intcon2	equ	0xFF1
  5272                           postinc0	equ	0xFEE
  5273                           wreg	equ	0xFE8
  5274                           postdec1	equ	0xFE5
  5275                           fsr1l	equ	0xFE1
  5276                           indf2	equ	0xFDF
  5277                           postinc2	equ	0xFDE
  5278                           postdec2	equ	0xFDD
  5279                           fsr2h	equ	0xFDA
  5280                           fsr2l	equ	0xFD9
  5281                           status	equ	0xFD8
  5282                           
  5283 ;; *************** function _setAddrWindow *****************
  5284 ;; Defined at:
  5285 ;;		line 429 in file "ST7735_TFT.c"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;  x0              1    wreg     unsigned char 
  5288 ;;  y0              1   19[COMRAM] unsigned char 
  5289 ;;  x1              1   20[COMRAM] unsigned char 
  5290 ;;  y1              1   21[COMRAM] unsigned char 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  x0              1   22[COMRAM] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;		None               void
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5302 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;Total ram usage:        4 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    5
  5309 ;; This function calls:
  5310 ;;		_write_command
  5311 ;;		_write_data
  5312 ;; This function is called by:
  5313 ;;		_drawPixel
  5314 ;;		_drawFastVLine
  5315 ;;		_fillRectangle
  5316 ;;		_drawFastHLine
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text23
  5321  001224                     __ptext23:
  5322                           	opt stack 0
  5323  001224                     _setAddrWindow:
  5324                           	opt stack 22
  5325                           
  5326                           ;incstack = 0
  5327                           ;setAddrWindow@x0 stored from wreg
  5328  001224  6E17               	movwf	setAddrWindow@x0,c
  5329                           
  5330                           ;ST7735_TFT.c: 431: write_command(0x2A);
  5331  001226  0E2A               	movlw	42
  5332  001228  EC86  F00A         	call	_write_command
  5333                           
  5334                           ;ST7735_TFT.c: 432: write_data(0);
  5335  00122C  0E00               	movlw	0
  5336  00122E  EC7E  F00A         	call	_write_data
  5337                           
  5338                           ;ST7735_TFT.c: 433: write_data(x0 + colstart);
  5339  001232  5017               	movf	setAddrWindow@x0,w,c
  5340  001234  246D               	addwf	_colstart,w,c
  5341  001236  EC7E  F00A         	call	_write_data
  5342                           
  5343                           ;ST7735_TFT.c: 434: write_data(0);
  5344  00123A  0E00               	movlw	0
  5345  00123C  EC7E  F00A         	call	_write_data
  5346                           
  5347                           ;ST7735_TFT.c: 435: write_data(x1 + colstart);
  5348  001240  5015               	movf	setAddrWindow@x1,w,c
  5349  001242  246D               	addwf	_colstart,w,c
  5350  001244  EC7E  F00A         	call	_write_data
  5351                           
  5352                           ;ST7735_TFT.c: 436: write_command(0x2B);
  5353  001248  0E2B               	movlw	43
  5354  00124A  EC86  F00A         	call	_write_command
  5355                           
  5356                           ;ST7735_TFT.c: 437: write_data(0);
  5357  00124E  0E00               	movlw	0
  5358  001250  EC7E  F00A         	call	_write_data
  5359                           
  5360                           ;ST7735_TFT.c: 438: write_data(y0 + rowstart);
  5361  001254  5014               	movf	setAddrWindow@y0,w,c
  5362  001256  246F               	addwf	_rowstart,w,c
  5363  001258  EC7E  F00A         	call	_write_data
  5364                           
  5365                           ;ST7735_TFT.c: 439: write_data(0);
  5366  00125C  0E00               	movlw	0
  5367  00125E  EC7E  F00A         	call	_write_data
  5368                           
  5369                           ;ST7735_TFT.c: 440: write_data(y1 + rowstart);
  5370  001262  5016               	movf	setAddrWindow@y1,w,c
  5371  001264  246F               	addwf	_rowstart,w,c
  5372  001266  EC7E  F00A         	call	_write_data
  5373                           
  5374                           ;ST7735_TFT.c: 441: write_command(0x2C);
  5375  00126A  0E2C               	movlw	44
  5376  00126C  EC86  F00A         	call	_write_command
  5377  001270  0012               	return		;funcret
  5378  001272                     __end_of_setAddrWindow:
  5379                           	opt stack 0
  5380                           tblptru	equ	0xFF8
  5381                           tblptrh	equ	0xFF7
  5382                           tblptrl	equ	0xFF6
  5383                           tablat	equ	0xFF5
  5384                           prodh	equ	0xFF4
  5385                           prodl	equ	0xFF3
  5386                           intcon	equ	0xFF2
  5387                           intcon2	equ	0xFF1
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postdec1	equ	0xFE5
  5391                           fsr1l	equ	0xFE1
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           postdec2	equ	0xFDD
  5395                           fsr2h	equ	0xFDA
  5396                           fsr2l	equ	0xFD9
  5397                           status	equ	0xFD8
  5398                           
  5399 ;; *************** function _TFT_GreenTab_Initialize *****************
  5400 ;; Defined at:
  5401 ;;		line 681 in file "ST7735_TFT.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;		None
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;		None
  5406 ;; Return value:  Size  Location     Type
  5407 ;;		None               void
  5408 ;; Registers used:
  5409 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;Total ram usage:        0 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:    6
  5422 ;; This function calls:
  5423 ;;		_Rcmd1
  5424 ;;		_Rcmd2red
  5425 ;;		_Rcmd3
  5426 ;;		_write_command
  5427 ;;		_write_data
  5428 ;; This function is called by:
  5429 ;;		_Initialize_Screen
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text24
  5434  00140A                     __ptext24:
  5435                           	opt stack 0
  5436  00140A                     _TFT_GreenTab_Initialize:
  5437                           	opt stack 23
  5438                           
  5439                           ;ST7735_TFT.c: 683: PORTDbits.RD4 = 1;
  5440                           
  5441                           ;incstack = 0
  5442  00140A  8883               	bsf	3971,4,c	;volatile
  5443                           
  5444                           ;ST7735_TFT.c: 684: PORTDbits.RD3 = 0;
  5445  00140C  9683               	bcf	3971,3,c	;volatile
  5446                           
  5447                           ;ST7735_TFT.c: 686: SSPSTAT=0x80;
  5448  00140E  0E80               	movlw	128
  5449  001410  6EC7               	movwf	4039,c	;volatile
  5450                           
  5451                           ;ST7735_TFT.c: 687: SSPCON1=0x30;
  5452  001412  0E30               	movlw	48
  5453  001414  6EC6               	movwf	4038,c	;volatile
  5454                           
  5455                           ;ST7735_TFT.c: 690: Rcmd1();
  5456  001416  EC05  F005         	call	_Rcmd1	;wreg free
  5457                           
  5458                           ;ST7735_TFT.c: 691: Rcmd2red();
  5459  00141A  EC9D  F009         	call	_Rcmd2red	;wreg free
  5460                           
  5461                           ;ST7735_TFT.c: 692: Rcmd3();
  5462  00141E  EC12  F006         	call	_Rcmd3	;wreg free
  5463                           
  5464                           ;ST7735_TFT.c: 693: write_command(0x36);
  5465  001422  0E36               	movlw	54
  5466  001424  EC86  F00A         	call	_write_command
  5467                           
  5468                           ;ST7735_TFT.c: 694: write_data(0xC0);
  5469  001428  0EC0               	movlw	192
  5470  00142A  EC7E  F00A         	call	_write_data
  5471                           
  5472                           ;ST7735_TFT.c: 695: _tft_type = 1;
  5473  00142E  0E01               	movlw	1
  5474  001430  6E6B               	movwf	__tft_type,c
  5475  001432  0012               	return		;funcret
  5476  001434                     __end_of_TFT_GreenTab_Initialize:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           intcon	equ	0xFF2
  5485                           intcon2	equ	0xFF1
  5486                           postinc0	equ	0xFEE
  5487                           wreg	equ	0xFE8
  5488                           postdec1	equ	0xFE5
  5489                           fsr1l	equ	0xFE1
  5490                           indf2	equ	0xFDF
  5491                           postinc2	equ	0xFDE
  5492                           postdec2	equ	0xFDD
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _Rcmd3 *****************
  5498 ;; Defined at:
  5499 ;;		line 375 in file "ST7735_TFT.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;		None               void
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;Total ram usage:        0 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    5
  5520 ;; This function calls:
  5521 ;;		_delay_ms
  5522 ;;		_write_command
  5523 ;;		_write_data
  5524 ;; This function is called by:
  5525 ;;		_TFT_GreenTab_Initialize
  5526 ;;		_TFT_BlackTab_Initialize
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           	psect	text25
  5531  000C24                     __ptext25:
  5532                           	opt stack 0
  5533  000C24                     _Rcmd3:
  5534                           	opt stack 23
  5535                           
  5536                           ;ST7735_TFT.c: 377: write_command(0xE0);
  5537                           
  5538                           ;incstack = 0
  5539  000C24  0EE0               	movlw	224
  5540  000C26  EC86  F00A         	call	_write_command
  5541                           
  5542                           ;ST7735_TFT.c: 378: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5543  000C2A  0E02               	movlw	2
  5544  000C2C  EC7E  F00A         	call	_write_data
  5545  000C30  0E1C               	movlw	28
  5546  000C32  EC7E  F00A         	call	_write_data
  5547  000C36  0E07               	movlw	7
  5548  000C38  EC7E  F00A         	call	_write_data
  5549  000C3C  0E12               	movlw	18
  5550  000C3E  EC7E  F00A         	call	_write_data
  5551                           
  5552                           ;ST7735_TFT.c: 379: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5553  000C42  0E37               	movlw	55
  5554  000C44  EC7E  F00A         	call	_write_data
  5555  000C48  0E32               	movlw	50
  5556  000C4A  EC7E  F00A         	call	_write_data
  5557  000C4E  0E29               	movlw	41
  5558  000C50  EC7E  F00A         	call	_write_data
  5559  000C54  0E2D               	movlw	45
  5560  000C56  EC7E  F00A         	call	_write_data
  5561                           
  5562                           ;ST7735_TFT.c: 380: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5563  000C5A  0E29               	movlw	41
  5564  000C5C  EC7E  F00A         	call	_write_data
  5565  000C60  0E25               	movlw	37
  5566  000C62  EC7E  F00A         	call	_write_data
  5567  000C66  0E2B               	movlw	43
  5568  000C68  EC7E  F00A         	call	_write_data
  5569  000C6C  0E39               	movlw	57
  5570  000C6E  EC7E  F00A         	call	_write_data
  5571                           
  5572                           ;ST7735_TFT.c: 381: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5573  000C72  0E00               	movlw	0
  5574  000C74  EC7E  F00A         	call	_write_data
  5575  000C78  0E01               	movlw	1
  5576  000C7A  EC7E  F00A         	call	_write_data
  5577  000C7E  0E03               	movlw	3
  5578  000C80  EC7E  F00A         	call	_write_data
  5579  000C84  0E10               	movlw	16
  5580  000C86  EC7E  F00A         	call	_write_data
  5581                           
  5582                           ;ST7735_TFT.c: 382: write_command(0xE1);
  5583  000C8A  0EE1               	movlw	225
  5584  000C8C  EC86  F00A         	call	_write_command
  5585                           
  5586                           ;ST7735_TFT.c: 383: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5587  000C90  0E03               	movlw	3
  5588  000C92  EC7E  F00A         	call	_write_data
  5589  000C96  0E1D               	movlw	29
  5590  000C98  EC7E  F00A         	call	_write_data
  5591  000C9C  0E07               	movlw	7
  5592  000C9E  EC7E  F00A         	call	_write_data
  5593  000CA2  0E06               	movlw	6
  5594  000CA4  EC7E  F00A         	call	_write_data
  5595                           
  5596                           ;ST7735_TFT.c: 384: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5597  000CA8  0E2E               	movlw	46
  5598  000CAA  EC7E  F00A         	call	_write_data
  5599  000CAE  0E2C               	movlw	44
  5600  000CB0  EC7E  F00A         	call	_write_data
  5601  000CB4  0E29               	movlw	41
  5602  000CB6  EC7E  F00A         	call	_write_data
  5603  000CBA  0E2D               	movlw	45
  5604  000CBC  EC7E  F00A         	call	_write_data
  5605                           
  5606                           ;ST7735_TFT.c: 385: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5607  000CC0  0E2E               	movlw	46
  5608  000CC2  EC7E  F00A         	call	_write_data
  5609  000CC6  0E2E               	movlw	46
  5610  000CC8  EC7E  F00A         	call	_write_data
  5611  000CCC  0E37               	movlw	55
  5612  000CCE  EC7E  F00A         	call	_write_data
  5613  000CD2  0E3F               	movlw	63
  5614  000CD4  EC7E  F00A         	call	_write_data
  5615                           
  5616                           ;ST7735_TFT.c: 386: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5617  000CD8  0E00               	movlw	0
  5618  000CDA  EC7E  F00A         	call	_write_data
  5619  000CDE  0E00               	movlw	0
  5620  000CE0  EC7E  F00A         	call	_write_data
  5621  000CE4  0E02               	movlw	2
  5622  000CE6  EC7E  F00A         	call	_write_data
  5623  000CEA  0E10               	movlw	16
  5624  000CEC  EC7E  F00A         	call	_write_data
  5625                           
  5626                           ;ST7735_TFT.c: 387: write_command(0x13);
  5627  000CF0  0E13               	movlw	19
  5628  000CF2  EC86  F00A         	call	_write_command
  5629                           
  5630                           ;ST7735_TFT.c: 388: delay_ms(10);
  5631  000CF6  0E00               	movlw	0
  5632  000CF8  6E18               	movwf	delay_ms@ms+1,c
  5633  000CFA  0E0A               	movlw	10
  5634  000CFC  6E17               	movwf	delay_ms@ms,c
  5635  000CFE  ECE9  F008         	call	_delay_ms	;wreg free
  5636                           
  5637                           ;ST7735_TFT.c: 389: write_command(0x29);
  5638  000D02  0E29               	movlw	41
  5639  000D04  EC86  F00A         	call	_write_command
  5640                           
  5641                           ;ST7735_TFT.c: 390: delay_ms(100);
  5642  000D08  0E00               	movlw	0
  5643  000D0A  6E18               	movwf	delay_ms@ms+1,c
  5644  000D0C  0E64               	movlw	100
  5645  000D0E  6E17               	movwf	delay_ms@ms,c
  5646  000D10  ECE9  F008         	call	_delay_ms	;wreg free
  5647  000D14  0012               	return		;funcret
  5648  000D16                     __end_of_Rcmd3:
  5649                           	opt stack 0
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           prodh	equ	0xFF4
  5655                           prodl	equ	0xFF3
  5656                           intcon	equ	0xFF2
  5657                           intcon2	equ	0xFF1
  5658                           postinc0	equ	0xFEE
  5659                           wreg	equ	0xFE8
  5660                           postdec1	equ	0xFE5
  5661                           fsr1l	equ	0xFE1
  5662                           indf2	equ	0xFDF
  5663                           postinc2	equ	0xFDE
  5664                           postdec2	equ	0xFDD
  5665                           fsr2h	equ	0xFDA
  5666                           fsr2l	equ	0xFD9
  5667                           status	equ	0xFD8
  5668                           
  5669 ;; *************** function _Rcmd2red *****************
  5670 ;; Defined at:
  5671 ;;		line 365 in file "ST7735_TFT.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;		None
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;		None
  5676 ;; Return value:  Size  Location     Type
  5677 ;;		None               void
  5678 ;; Registers used:
  5679 ;;		wreg, status,2, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;Total ram usage:        0 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    5
  5692 ;; This function calls:
  5693 ;;		_write_command
  5694 ;;		_write_data
  5695 ;; This function is called by:
  5696 ;;		_TFT_GreenTab_Initialize
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           	psect	text26
  5701  00133A                     __ptext26:
  5702                           	opt stack 0
  5703  00133A                     _Rcmd2red:
  5704                           	opt stack 23
  5705                           
  5706                           ;ST7735_TFT.c: 367: write_command(0x2A);
  5707                           
  5708                           ;incstack = 0
  5709  00133A  0E2A               	movlw	42
  5710  00133C  EC86  F00A         	call	_write_command
  5711                           
  5712                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x00);
  5713  001340  0E00               	movlw	0
  5714  001342  EC7E  F00A         	call	_write_data
  5715  001346  0E00               	movlw	0
  5716  001348  EC7E  F00A         	call	_write_data
  5717                           
  5718                           ;ST7735_TFT.c: 369: write_data(0x00); write_data(0x7F);
  5719  00134C  0E00               	movlw	0
  5720  00134E  EC7E  F00A         	call	_write_data
  5721  001352  0E7F               	movlw	127
  5722  001354  EC7E  F00A         	call	_write_data
  5723                           
  5724                           ;ST7735_TFT.c: 370: write_command(0x2B);
  5725  001358  0E2B               	movlw	43
  5726  00135A  EC86  F00A         	call	_write_command
  5727                           
  5728                           ;ST7735_TFT.c: 371: write_data(0x00); write_data(0x00);
  5729  00135E  0E00               	movlw	0
  5730  001360  EC7E  F00A         	call	_write_data
  5731  001364  0E00               	movlw	0
  5732  001366  EC7E  F00A         	call	_write_data
  5733                           
  5734                           ;ST7735_TFT.c: 372: write_data(0x00); write_data(0x9F);
  5735  00136A  0E00               	movlw	0
  5736  00136C  EC7E  F00A         	call	_write_data
  5737  001370  0E9F               	movlw	159
  5738  001372  EC7E  F00A         	call	_write_data
  5739  001376  0012               	return		;funcret
  5740  001378                     __end_of_Rcmd2red:
  5741                           	opt stack 0
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           intcon	equ	0xFF2
  5749                           intcon2	equ	0xFF1
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           postdec1	equ	0xFE5
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _Rcmd1 *****************
  5762 ;; Defined at:
  5763 ;;		line 318 in file "ST7735_TFT.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;		None               void
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;Total ram usage:        0 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    5
  5784 ;; This function calls:
  5785 ;;		_delay_ms
  5786 ;;		_write_command
  5787 ;;		_write_data
  5788 ;; This function is called by:
  5789 ;;		_TFT_GreenTab_Initialize
  5790 ;;		_TFT_BlackTab_Initialize
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           	psect	text27
  5795  000A0A                     __ptext27:
  5796                           	opt stack 0
  5797  000A0A                     _Rcmd1:
  5798                           	opt stack 23
  5799                           
  5800                           ;ST7735_TFT.c: 320: write_command(0x01);
  5801                           
  5802                           ;incstack = 0
  5803  000A0A  0E01               	movlw	1
  5804  000A0C  EC86  F00A         	call	_write_command
  5805                           
  5806                           ;ST7735_TFT.c: 321: delay_ms(150);
  5807  000A10  0E00               	movlw	0
  5808  000A12  6E18               	movwf	delay_ms@ms+1,c
  5809  000A14  0E96               	movlw	150
  5810  000A16  6E17               	movwf	delay_ms@ms,c
  5811  000A18  ECE9  F008         	call	_delay_ms	;wreg free
  5812                           
  5813                           ;ST7735_TFT.c: 322: write_command(0x11);
  5814  000A1C  0E11               	movlw	17
  5815  000A1E  EC86  F00A         	call	_write_command
  5816                           
  5817                           ;ST7735_TFT.c: 323: delay_ms(500);
  5818  000A22  0E01               	movlw	1
  5819  000A24  6E18               	movwf	delay_ms@ms+1,c
  5820  000A26  0EF4               	movlw	244
  5821  000A28  6E17               	movwf	delay_ms@ms,c
  5822  000A2A  ECE9  F008         	call	_delay_ms	;wreg free
  5823                           
  5824                           ;ST7735_TFT.c: 324: write_command(0xB1);
  5825  000A2E  0EB1               	movlw	177
  5826  000A30  EC86  F00A         	call	_write_command
  5827                           
  5828                           ;ST7735_TFT.c: 325: write_data(0x01);
  5829  000A34  0E01               	movlw	1
  5830  000A36  EC7E  F00A         	call	_write_data
  5831                           
  5832                           ;ST7735_TFT.c: 326: write_data(0x2C);
  5833  000A3A  0E2C               	movlw	44
  5834  000A3C  EC7E  F00A         	call	_write_data
  5835                           
  5836                           ;ST7735_TFT.c: 327: write_data(0x2D);
  5837  000A40  0E2D               	movlw	45
  5838  000A42  EC7E  F00A         	call	_write_data
  5839                           
  5840                           ;ST7735_TFT.c: 328: write_command(0xB2);
  5841  000A46  0EB2               	movlw	178
  5842  000A48  EC86  F00A         	call	_write_command
  5843                           
  5844                           ;ST7735_TFT.c: 329: write_data(0x01);
  5845  000A4C  0E01               	movlw	1
  5846  000A4E  EC7E  F00A         	call	_write_data
  5847                           
  5848                           ;ST7735_TFT.c: 330: write_data(0x2C);
  5849  000A52  0E2C               	movlw	44
  5850  000A54  EC7E  F00A         	call	_write_data
  5851                           
  5852                           ;ST7735_TFT.c: 331: write_data(0x2D);
  5853  000A58  0E2D               	movlw	45
  5854  000A5A  EC7E  F00A         	call	_write_data
  5855                           
  5856                           ;ST7735_TFT.c: 332: write_command(0xB3);
  5857  000A5E  0EB3               	movlw	179
  5858  000A60  EC86  F00A         	call	_write_command
  5859                           
  5860                           ;ST7735_TFT.c: 333: write_data(0x01);
  5861  000A64  0E01               	movlw	1
  5862  000A66  EC7E  F00A         	call	_write_data
  5863                           
  5864                           ;ST7735_TFT.c: 334: write_data(0x2C);
  5865  000A6A  0E2C               	movlw	44
  5866  000A6C  EC7E  F00A         	call	_write_data
  5867                           
  5868                           ;ST7735_TFT.c: 335: write_data(0x2D);
  5869  000A70  0E2D               	movlw	45
  5870  000A72  EC7E  F00A         	call	_write_data
  5871                           
  5872                           ;ST7735_TFT.c: 336: write_data(0x01);
  5873  000A76  0E01               	movlw	1
  5874  000A78  EC7E  F00A         	call	_write_data
  5875                           
  5876                           ;ST7735_TFT.c: 337: write_data(0x2C);
  5877  000A7C  0E2C               	movlw	44
  5878  000A7E  EC7E  F00A         	call	_write_data
  5879                           
  5880                           ;ST7735_TFT.c: 338: write_data(0x2D);
  5881  000A82  0E2D               	movlw	45
  5882  000A84  EC7E  F00A         	call	_write_data
  5883                           
  5884                           ;ST7735_TFT.c: 339: write_command(0xB4);
  5885  000A88  0EB4               	movlw	180
  5886  000A8A  EC86  F00A         	call	_write_command
  5887                           
  5888                           ;ST7735_TFT.c: 340: write_data(0x07);
  5889  000A8E  0E07               	movlw	7
  5890  000A90  EC7E  F00A         	call	_write_data
  5891                           
  5892                           ;ST7735_TFT.c: 341: write_command(0xC0);
  5893  000A94  0EC0               	movlw	192
  5894  000A96  EC86  F00A         	call	_write_command
  5895                           
  5896                           ;ST7735_TFT.c: 342: write_data(0xA2);
  5897  000A9A  0EA2               	movlw	162
  5898  000A9C  EC7E  F00A         	call	_write_data
  5899                           
  5900                           ;ST7735_TFT.c: 343: write_data(0x02);
  5901  000AA0  0E02               	movlw	2
  5902  000AA2  EC7E  F00A         	call	_write_data
  5903                           
  5904                           ;ST7735_TFT.c: 344: write_data(0x84);
  5905  000AA6  0E84               	movlw	132
  5906  000AA8  EC7E  F00A         	call	_write_data
  5907                           
  5908                           ;ST7735_TFT.c: 345: write_command(0xC1);
  5909  000AAC  0EC1               	movlw	193
  5910  000AAE  EC86  F00A         	call	_write_command
  5911                           
  5912                           ;ST7735_TFT.c: 346: write_data(0xC5);
  5913  000AB2  0EC5               	movlw	197
  5914  000AB4  EC7E  F00A         	call	_write_data
  5915                           
  5916                           ;ST7735_TFT.c: 347: write_command(0xC2);
  5917  000AB8  0EC2               	movlw	194
  5918  000ABA  EC86  F00A         	call	_write_command
  5919                           
  5920                           ;ST7735_TFT.c: 348: write_data(0x0A);
  5921  000ABE  0E0A               	movlw	10
  5922  000AC0  EC7E  F00A         	call	_write_data
  5923                           
  5924                           ;ST7735_TFT.c: 349: write_data(0x00);
  5925  000AC4  0E00               	movlw	0
  5926  000AC6  EC7E  F00A         	call	_write_data
  5927                           
  5928                           ;ST7735_TFT.c: 350: write_command(0xC3);
  5929  000ACA  0EC3               	movlw	195
  5930  000ACC  EC86  F00A         	call	_write_command
  5931                           
  5932                           ;ST7735_TFT.c: 351: write_data(0x8A);
  5933  000AD0  0E8A               	movlw	138
  5934  000AD2  EC7E  F00A         	call	_write_data
  5935                           
  5936                           ;ST7735_TFT.c: 352: write_data(0x2A);
  5937  000AD6  0E2A               	movlw	42
  5938  000AD8  EC7E  F00A         	call	_write_data
  5939                           
  5940                           ;ST7735_TFT.c: 353: write_command(0xC4);
  5941  000ADC  0EC4               	movlw	196
  5942  000ADE  EC86  F00A         	call	_write_command
  5943                           
  5944                           ;ST7735_TFT.c: 354: write_data(0x8A);
  5945  000AE2  0E8A               	movlw	138
  5946  000AE4  EC7E  F00A         	call	_write_data
  5947                           
  5948                           ;ST7735_TFT.c: 355: write_data(0xEE);
  5949  000AE8  0EEE               	movlw	238
  5950  000AEA  EC7E  F00A         	call	_write_data
  5951                           
  5952                           ;ST7735_TFT.c: 356: write_command(0xC5);
  5953  000AEE  0EC5               	movlw	197
  5954  000AF0  EC86  F00A         	call	_write_command
  5955                           
  5956                           ;ST7735_TFT.c: 357: write_data(0x0E);
  5957  000AF4  0E0E               	movlw	14
  5958  000AF6  EC7E  F00A         	call	_write_data
  5959                           
  5960                           ;ST7735_TFT.c: 358: write_command(0x20);
  5961  000AFA  0E20               	movlw	32
  5962  000AFC  EC86  F00A         	call	_write_command
  5963                           
  5964                           ;ST7735_TFT.c: 359: write_command(0x36);
  5965  000B00  0E36               	movlw	54
  5966  000B02  EC86  F00A         	call	_write_command
  5967                           
  5968                           ;ST7735_TFT.c: 360: write_data(0xC8);
  5969  000B06  0EC8               	movlw	200
  5970  000B08  EC7E  F00A         	call	_write_data
  5971                           
  5972                           ;ST7735_TFT.c: 361: write_command(0x3A);
  5973  000B0C  0E3A               	movlw	58
  5974  000B0E  EC86  F00A         	call	_write_command
  5975                           
  5976                           ;ST7735_TFT.c: 362: write_data(0x05);
  5977  000B12  0E05               	movlw	5
  5978  000B14  EC7E  F00A         	call	_write_data
  5979  000B18  0012               	return		;funcret
  5980  000B1A                     __end_of_Rcmd1:
  5981                           	opt stack 0
  5982                           tblptru	equ	0xFF8
  5983                           tblptrh	equ	0xFF7
  5984                           tblptrl	equ	0xFF6
  5985                           tablat	equ	0xFF5
  5986                           prodh	equ	0xFF4
  5987                           prodl	equ	0xFF3
  5988                           intcon	equ	0xFF2
  5989                           intcon2	equ	0xFF1
  5990                           postinc0	equ	0xFEE
  5991                           wreg	equ	0xFE8
  5992                           postdec1	equ	0xFE5
  5993                           fsr1l	equ	0xFE1
  5994                           indf2	equ	0xFDF
  5995                           postinc2	equ	0xFDE
  5996                           postdec2	equ	0xFDD
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001 ;; *************** function _write_data *****************
  6002 ;; Defined at:
  6003 ;;		line 246 in file "ST7735_TFT.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  data_           1    wreg     unsigned char 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  data_           1   18[COMRAM] unsigned char 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;		None               void
  6010 ;; Registers used:
  6011 ;;		wreg, status,2, cstack
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;Total ram usage:        1 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    4
  6024 ;; This function calls:
  6025 ;;		_spiwrite
  6026 ;; This function is called by:
  6027 ;;		_Rcmd1
  6028 ;;		_Rcmd2red
  6029 ;;		_Rcmd3
  6030 ;;		_setAddrWindow
  6031 ;;		_drawPixel
  6032 ;;		_TFT_GreenTab_Initialize
  6033 ;;		_Bcmd
  6034 ;;		_setScrollDefinition
  6035 ;;		_Rcmd2green
  6036 ;;		_VerticalScroll
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text28
  6041  0014FC                     __ptext28:
  6042                           	opt stack 0
  6043  0014FC                     _write_data:
  6044                           	opt stack 22
  6045                           
  6046                           ;incstack = 0
  6047                           ;write_data@data_ stored from wreg
  6048  0014FC  6E13               	movwf	write_data@data_,c
  6049                           
  6050                           ;ST7735_TFT.c: 248: PORTDbits.RD4 = 0;
  6051  0014FE  9883               	bcf	3971,4,c	;volatile
  6052                           
  6053                           ;ST7735_TFT.c: 249: PORTDbits.RD3 = 1;
  6054  001500  8683               	bsf	3971,3,c	;volatile
  6055                           
  6056                           ;ST7735_TFT.c: 250: spiwrite(data_);
  6057  001502  5013               	movf	write_data@data_,w,c
  6058  001504  EC62  F00A         	call	_spiwrite
  6059                           
  6060                           ;ST7735_TFT.c: 251: PORTDbits.RD4 = 1;
  6061  001508  8883               	bsf	3971,4,c	;volatile
  6062  00150A  0012               	return		;funcret
  6063  00150C                     __end_of_write_data:
  6064                           	opt stack 0
  6065                           tblptru	equ	0xFF8
  6066                           tblptrh	equ	0xFF7
  6067                           tblptrl	equ	0xFF6
  6068                           tablat	equ	0xFF5
  6069                           prodh	equ	0xFF4
  6070                           prodl	equ	0xFF3
  6071                           intcon	equ	0xFF2
  6072                           intcon2	equ	0xFF1
  6073                           postinc0	equ	0xFEE
  6074                           wreg	equ	0xFE8
  6075                           postdec1	equ	0xFE5
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function _write_command *****************
  6085 ;; Defined at:
  6086 ;;		line 235 in file "ST7735_TFT.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  cmd_            1    wreg     unsigned char 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  cmd_            1   18[COMRAM] unsigned char 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;		None               void
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, cstack
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;Total ram usage:        1 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    4
  6107 ;; This function calls:
  6108 ;;		_spiwrite
  6109 ;; This function is called by:
  6110 ;;		_Rcmd1
  6111 ;;		_Rcmd2red
  6112 ;;		_Rcmd3
  6113 ;;		_setAddrWindow
  6114 ;;		_TFT_GreenTab_Initialize
  6115 ;;		_Bcmd
  6116 ;;		_setScrollDefinition
  6117 ;;		_Rcmd2green
  6118 ;;		_VerticalScroll
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text29
  6123  00150C                     __ptext29:
  6124                           	opt stack 0
  6125  00150C                     _write_command:
  6126                           	opt stack 22
  6127                           
  6128                           ;incstack = 0
  6129                           ;write_command@cmd_ stored from wreg
  6130  00150C  6E13               	movwf	write_command@cmd_,c
  6131                           
  6132                           ;ST7735_TFT.c: 237: PORTDbits.RD4 = 0;
  6133  00150E  9883               	bcf	3971,4,c	;volatile
  6134                           
  6135                           ;ST7735_TFT.c: 239: PORTDbits.RD3 = 0;
  6136  001510  9683               	bcf	3971,3,c	;volatile
  6137                           
  6138                           ;ST7735_TFT.c: 240: spiwrite(cmd_);
  6139  001512  5013               	movf	write_command@cmd_,w,c
  6140  001514  EC62  F00A         	call	_spiwrite
  6141                           
  6142                           ;ST7735_TFT.c: 242: PORTDbits.RD4 = 1;
  6143  001518  8883               	bsf	3971,4,c	;volatile
  6144  00151A  0012               	return		;funcret
  6145  00151C                     __end_of_write_command:
  6146                           	opt stack 0
  6147                           tblptru	equ	0xFF8
  6148                           tblptrh	equ	0xFF7
  6149                           tblptrl	equ	0xFF6
  6150                           tablat	equ	0xFF5
  6151                           prodh	equ	0xFF4
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           intcon2	equ	0xFF1
  6155                           postinc0	equ	0xFEE
  6156                           wreg	equ	0xFE8
  6157                           postdec1	equ	0xFE5
  6158                           fsr1l	equ	0xFE1
  6159                           indf2	equ	0xFDF
  6160                           postinc2	equ	0xFDE
  6161                           postdec2	equ	0xFDD
  6162                           fsr2h	equ	0xFDA
  6163                           fsr2l	equ	0xFD9
  6164                           status	equ	0xFD8
  6165                           
  6166 ;; *************** function _spiwrite *****************
  6167 ;; Defined at:
  6168 ;;		line 226 in file "ST7735_TFT.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;  spidata         1    wreg     unsigned char 
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  spidata         1   17[COMRAM] unsigned char 
  6173 ;;  x               1   16[COMRAM] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;		None               void
  6176 ;; Registers used:
  6177 ;;		wreg
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;Total ram usage:        2 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    3
  6190 ;; This function calls:
  6191 ;;		Nothing
  6192 ;; This function is called by:
  6193 ;;		_write_command
  6194 ;;		_write_data
  6195 ;;		_drawFastVLine
  6196 ;;		_fillRectangle
  6197 ;;		_drawFastHLine
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text30
  6202  0014C4                     __ptext30:
  6203                           	opt stack 0
  6204  0014C4                     _spiwrite:
  6205                           	opt stack 24
  6206                           
  6207                           ;incstack = 0
  6208                           ;spiwrite@spidata stored from wreg
  6209  0014C4  6E12               	movwf	spiwrite@spidata,c
  6210                           
  6211                           ;ST7735_TFT.c: 228: char x;
  6212                           ;ST7735_TFT.c: 229: PIR1bits.SSPIF = 0;
  6213  0014C6  969E               	bcf	3998,3,c	;volatile
  6214                           
  6215                           ;ST7735_TFT.c: 230: x = SSPBUF;
  6216  0014C8  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6217                           
  6218                           ;ST7735_TFT.c: 231: SSPBUF = spidata;
  6219  0014CC  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6220                           
  6221                           ;ST7735_TFT.c: 232: while (!SSPSTATbits.BF);
  6222  0014D0  D000               	goto	l227
  6223  0014D2                     l227:
  6224  0014D2  A0C7               	btfss	4039,0,c	;volatile
  6225  0014D4  D7FE               	goto	l227
  6226  0014D6  0012               	return		;funcret
  6227  0014D8                     __end_of_spiwrite:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           intcon	equ	0xFF2
  6236                           intcon2	equ	0xFF1
  6237                           postinc0	equ	0xFEE
  6238                           wreg	equ	0xFE8
  6239                           postdec1	equ	0xFE5
  6240                           fsr1l	equ	0xFE1
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           postdec2	equ	0xFDD
  6244                           fsr2h	equ	0xFDA
  6245                           fsr2l	equ	0xFD9
  6246                           status	equ	0xFD8
  6247                           
  6248 ;; *************** function _LCD_Reset *****************
  6249 ;; Defined at:
  6250 ;;		line 254 in file "ST7735_TFT.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;		None
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;		None
  6255 ;; Return value:  Size  Location     Type
  6256 ;;		None               void
  6257 ;; Registers used:
  6258 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6268 ;;Total ram usage:        0 bytes
  6269 ;; Hardware stack levels used:    1
  6270 ;; Hardware stack levels required when called:    5
  6271 ;; This function calls:
  6272 ;;		_delay_ms
  6273 ;; This function is called by:
  6274 ;;		_Initialize_Screen
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           	psect	text31
  6279  0014EA                     __ptext31:
  6280                           	opt stack 0
  6281  0014EA                     _LCD_Reset:
  6282                           	opt stack 24
  6283                           
  6284                           ;ST7735_TFT.c: 256: PORTDbits.RD2 = 0;
  6285                           
  6286                           ;incstack = 0
  6287  0014EA  9483               	bcf	3971,2,c	;volatile
  6288                           
  6289                           ;ST7735_TFT.c: 257: delay_ms(100);
  6290  0014EC  0E00               	movlw	0
  6291  0014EE  6E18               	movwf	delay_ms@ms+1,c
  6292  0014F0  0E64               	movlw	100
  6293  0014F2  6E17               	movwf	delay_ms@ms,c
  6294  0014F4  ECE9  F008         	call	_delay_ms	;wreg free
  6295                           
  6296                           ;ST7735_TFT.c: 258: PORTDbits.RD2 = 1;
  6297  0014F8  8483               	bsf	3971,2,c	;volatile
  6298  0014FA  0012               	return		;funcret
  6299  0014FC                     __end_of_LCD_Reset:
  6300                           	opt stack 0
  6301                           tblptru	equ	0xFF8
  6302                           tblptrh	equ	0xFF7
  6303                           tblptrl	equ	0xFF6
  6304                           tablat	equ	0xFF5
  6305                           prodh	equ	0xFF4
  6306                           prodl	equ	0xFF3
  6307                           intcon	equ	0xFF2
  6308                           intcon2	equ	0xFF1
  6309                           postinc0	equ	0xFEE
  6310                           wreg	equ	0xFE8
  6311                           postdec1	equ	0xFE5
  6312                           fsr1l	equ	0xFE1
  6313                           indf2	equ	0xFDF
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320 ;; *************** function _delay_ms *****************
  6321 ;; Defined at:
  6322 ;;		line 101 in file "ST7735_TFT.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  ms              2   22[COMRAM] int 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  count           2   26[COMRAM] int 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;		None               void
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;Total ram usage:        6 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    4
  6343 ;; This function calls:
  6344 ;;		___wmul
  6345 ;; This function is called by:
  6346 ;;		_LCD_Reset
  6347 ;;		_Rcmd1
  6348 ;;		_Rcmd3
  6349 ;;		_Bcmd
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text32
  6354  0011D2                     __ptext32:
  6355                           	opt stack 0
  6356  0011D2                     _delay_ms:
  6357                           	opt stack 23
  6358                           
  6359                           ;ST7735_TFT.c: 107: int count;
  6360                           ;ST7735_TFT.c: 108: count = 8000000/4000/8 * ms;
  6361                           
  6362                           ;incstack = 0
  6363  0011D2  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6364  0011D6  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6365  0011DA  0E00               	movlw	0
  6366  0011DC  6E14               	movwf	___wmul@multiplicand+1,c
  6367  0011DE  0EFA               	movlw	250
  6368  0011E0  6E13               	movwf	___wmul@multiplicand,c
  6369  0011E2  EC1A  F00A         	call	___wmul	;wreg free
  6370  0011E6  C011  F01B         	movff	?___wmul,delay_ms@count
  6371  0011EA  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6372                           
  6373                           ;ST7735_TFT.c: 109: count = (0xffff - count);
  6374  0011EE  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6375  0011F2  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6376  0011F6  1E19               	comf	??_delay_ms,f,c
  6377  0011F8  1E1A               	comf	??_delay_ms+1,f,c
  6378  0011FA  4A19               	infsnz	??_delay_ms,f,c
  6379  0011FC  2A1A               	incf	??_delay_ms+1,f,c
  6380  0011FE  0EFF               	movlw	255
  6381  001200  2419               	addwf	??_delay_ms,w,c
  6382  001202  6E1B               	movwf	delay_ms@count,c
  6383  001204  0EFF               	movlw	255
  6384  001206  201A               	addwfc	??_delay_ms+1,w,c
  6385  001208  6E1C               	movwf	delay_ms@count+1,c
  6386                           
  6387                           ;ST7735_TFT.c: 111: T3CON = 0xb8;
  6388  00120A  0EB8               	movlw	184
  6389  00120C  6EB1               	movwf	4017,c	;volatile
  6390                           
  6391                           ;ST7735_TFT.c: 113: TMR0L = count & 0x00ff;
  6392  00120E  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  6393                           
  6394                           ;ST7735_TFT.c: 114: TMR0H = count >> 8;
  6395  001212  501C               	movf	delay_ms@count+1,w,c
  6396  001214  6ED7               	movwf	4055,c	;volatile
  6397                           
  6398                           ;ST7735_TFT.c: 116: PIR2bits.TMR3IF = 0;
  6399  001216  92A1               	bcf	4001,1,c	;volatile
  6400                           
  6401                           ;ST7735_TFT.c: 117: T3CONbits.TMR3ON = 1;
  6402  001218  80B1               	bsf	4017,0,c	;volatile
  6403                           
  6404                           ;ST7735_TFT.c: 119: while (PIR2bits.TMR3IF == 0);
  6405  00121A  D000               	goto	l217
  6406  00121C                     l217:
  6407  00121C  A2A1               	btfss	4001,1,c	;volatile
  6408  00121E  D7FE               	goto	l217
  6409                           
  6410                           ;ST7735_TFT.c: 120: T3CONbits.TMR3ON = 0;
  6411  001220  90B1               	bcf	4017,0,c	;volatile
  6412  001222  0012               	return		;funcret
  6413  001224                     __end_of_delay_ms:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           intcon	equ	0xFF2
  6422                           intcon2	equ	0xFF1
  6423                           postinc0	equ	0xFEE
  6424                           wreg	equ	0xFE8
  6425                           postdec1	equ	0xFE5
  6426                           fsr1l	equ	0xFE1
  6427                           indf2	equ	0xFDF
  6428                           postinc2	equ	0xFDE
  6429                           postdec2	equ	0xFDD
  6430                           fsr2h	equ	0xFDA
  6431                           fsr2l	equ	0xFD9
  6432                           status	equ	0xFD8
  6433                           
  6434 ;; *************** function ___wmul *****************
  6435 ;; Defined at:
  6436 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  multiplier      2   16[COMRAM] unsigned int 
  6439 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  product         2   20[COMRAM] unsigned int 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  2   16[COMRAM] unsigned int 
  6444 ;; Registers used:
  6445 ;;		wreg, status,2, status,0, prodl, prodh
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6451 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;Total ram usage:        6 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    3
  6458 ;; This function calls:
  6459 ;;		Nothing
  6460 ;; This function is called by:
  6461 ;;		_delay_ms
  6462 ;;		_drawChar
  6463 ;;		_printf
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text33
  6468  001434                     __ptext33:
  6469                           	opt stack 0
  6470  001434                     ___wmul:
  6471                           	opt stack 26
  6472                           
  6473                           ;incstack = 0
  6474  001434  5011               	movf	___wmul@multiplier,w,c
  6475  001436  0213               	mulwf	___wmul@multiplicand,c
  6476  001438  CFF3 F015          	movff	prodl,___wmul@product
  6477  00143C  CFF4 F016          	movff	prodh,___wmul@product+1
  6478  001440  5011               	movf	___wmul@multiplier,w,c
  6479  001442  0214               	mulwf	___wmul@multiplicand+1,c
  6480  001444  50F3               	movf	prodl,w,c
  6481  001446  2616               	addwf	___wmul@product+1,f,c
  6482  001448  5012               	movf	___wmul@multiplier+1,w,c
  6483  00144A  0213               	mulwf	___wmul@multiplicand,c
  6484  00144C  50F3               	movf	prodl,w,c
  6485  00144E  2616               	addwf	___wmul@product+1,f,c
  6486  001450  C015  F011         	movff	___wmul@product,?___wmul
  6487  001454  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6488  001458  D000               	goto	l479
  6489  00145A                     l479:
  6490  00145A  0012               	return		;funcret
  6491  00145C                     __end_of___wmul:
  6492                           	opt stack 0
  6493                           tblptru	equ	0xFF8
  6494                           tblptrh	equ	0xFF7
  6495                           tblptrl	equ	0xFF6
  6496                           tablat	equ	0xFF5
  6497                           prodh	equ	0xFF4
  6498                           prodl	equ	0xFF3
  6499                           intcon	equ	0xFF2
  6500                           intcon2	equ	0xFF1
  6501                           postinc0	equ	0xFEE
  6502                           wreg	equ	0xFE8
  6503                           postdec1	equ	0xFE5
  6504                           fsr1l	equ	0xFE1
  6505                           indf2	equ	0xFDF
  6506                           postinc2	equ	0xFDE
  6507                           postdec2	equ	0xFDD
  6508                           fsr2h	equ	0xFDA
  6509                           fsr2l	equ	0xFD9
  6510                           status	equ	0xFD8
  6511                           
  6512 ;; *************** function _chkisr *****************
  6513 ;; Defined at:
  6514 ;;		line 159 in file "Lab9_sample_3.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;		None
  6519 ;; Return value:  Size  Location     Type
  6520 ;;		None               void
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0, cstack
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6532 ;;Total ram usage:       14 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    2
  6535 ;; This function calls:
  6536 ;;		_INT0_isr
  6537 ;;		_TIMER1_isr
  6538 ;; This function is called by:
  6539 ;;		Interrupt level 2
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	intcode
  6544  000008                     __pintcode:
  6545                           	opt stack 0
  6546  000008                     _chkisr:
  6547                           	opt stack 20
  6548                           
  6549                           ;incstack = 0
  6550  000008  CFFA F003          	movff	pclath,??_chkisr
  6551  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6552  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6553  000014  ED4A  F008         	call	int_func,f	;refresh shadow registers
  6554                           pclatu	equ	0xFFB
  6555                           pclath	equ	0xFFA
  6556                           tblptru	equ	0xFF8
  6557                           tblptrh	equ	0xFF7
  6558                           tblptrl	equ	0xFF6
  6559                           tablat	equ	0xFF5
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           intcon	equ	0xFF2
  6563                           intcon2	equ	0xFF1
  6564                           postinc0	equ	0xFEE
  6565                           fsr0l	equ	0xFE9
  6566                           wreg	equ	0xFE8
  6567                           postdec1	equ	0xFE5
  6568                           fsr1l	equ	0xFE1
  6569                           indf2	equ	0xFDF
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           fsr2h	equ	0xFDA
  6573                           fsr2l	equ	0xFD9
  6574                           status	equ	0xFD8
  6575                           
  6576                           	psect	intcode_body
  6577  001094                     __pintcode_body:
  6578                           	opt stack 20
  6579  001094                     int_func:
  6580                           	opt stack 20
  6581  001094  0006               	pop		; remove dummy address from shadow register refresh
  6582  001096  CFEA F006          	movff	fsr0h,??_chkisr+3
  6583  00109A  CFE1 F007          	movff	fsr1l,??_chkisr+4
  6584  00109E  CFE2 F008          	movff	fsr1h,??_chkisr+5
  6585  0010A2  CFD9 F009          	movff	fsr2l,??_chkisr+6
  6586  0010A6  CFDA F00A          	movff	fsr2h,??_chkisr+7
  6587  0010AA  CFF3 F00B          	movff	prodl,??_chkisr+8
  6588  0010AE  CFF4 F00C          	movff	prodh,??_chkisr+9
  6589  0010B2  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  6590  0010B6  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  6591  0010BA  CFF8 F00F          	movff	tblptru,??_chkisr+12
  6592  0010BE  CFF5 F010          	movff	tablat,??_chkisr+13
  6593                           
  6594                           ;Lab9_sample_3.c: 161: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  6595  0010C2  A09E               	btfss	3998,0,c	;volatile
  6596  0010C4  D003               	goto	i2l1855
  6597  0010C6  EC95  F00A         	call	_TIMER1_isr	;wreg free
  6598  0010CA  D000               	goto	i2l1855
  6599  0010CC                     i2l1855:
  6600                           
  6601                           ;Lab9_sample_3.c: 162: if (INTCONbits.INT0IF == 1) INT0_isr();
  6602  0010CC  A2F2               	btfss	intcon,1,c	;volatile
  6603  0010CE  D003               	goto	i2l130
  6604  0010D0  ECBF  F003         	call	_INT0_isr	;wreg free
  6605  0010D4  D000               	goto	i2l130
  6606  0010D6                     i2l130:
  6607  0010D6  C010  FFF5         	movff	??_chkisr+13,tablat
  6608  0010DA  C00F  FFF8         	movff	??_chkisr+12,tblptru
  6609  0010DE  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  6610  0010E2  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  6611  0010E6  C00C  FFF4         	movff	??_chkisr+9,prodh
  6612  0010EA  C00B  FFF3         	movff	??_chkisr+8,prodl
  6613  0010EE  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  6614  0010F2  C009  FFD9         	movff	??_chkisr+6,fsr2l
  6615  0010F6  C008  FFE2         	movff	??_chkisr+5,fsr1h
  6616  0010FA  C007  FFE1         	movff	??_chkisr+4,fsr1l
  6617  0010FE  C006  FFEA         	movff	??_chkisr+3,fsr0h
  6618  001102  C005  FFE9         	movff	??_chkisr+2,fsr0l
  6619  001106  C004  FFFB         	movff	??_chkisr+1,pclatu
  6620  00110A  C003  FFFA         	movff	??_chkisr,pclath
  6621  00110E  0011               	retfie		f
  6622  001110                     __end_of_chkisr:
  6623                           	opt stack 0
  6624                           pclatu	equ	0xFFB
  6625                           pclath	equ	0xFFA
  6626                           tblptru	equ	0xFF8
  6627                           tblptrh	equ	0xFF7
  6628                           tblptrl	equ	0xFF6
  6629                           tablat	equ	0xFF5
  6630                           prodh	equ	0xFF4
  6631                           prodl	equ	0xFF3
  6632                           intcon	equ	0xFF2
  6633                           intcon2	equ	0xFF1
  6634                           postinc0	equ	0xFEE
  6635                           fsr0h	equ	0xFEA
  6636                           fsr0l	equ	0xFE9
  6637                           wreg	equ	0xFE8
  6638                           postdec1	equ	0xFE5
  6639                           fsr1h	equ	0xFE2
  6640                           fsr1l	equ	0xFE1
  6641                           indf2	equ	0xFDF
  6642                           postinc2	equ	0xFDE
  6643                           postdec2	equ	0xFDD
  6644                           fsr2h	equ	0xFDA
  6645                           fsr2l	equ	0xFD9
  6646                           status	equ	0xFD8
  6647                           
  6648 ;; *************** function _TIMER1_isr *****************
  6649 ;; Defined at:
  6650 ;;		line 165 in file "Lab9_sample_3.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;		None
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;		None               void
  6657 ;; Registers used:
  6658 ;;		wreg, status,2
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;Total ram usage:        0 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; This function calls:
  6671 ;;		Nothing
  6672 ;; This function is called by:
  6673 ;;		_chkisr
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text35
  6678  00152A                     __ptext35:
  6679                           	opt stack 0
  6680  00152A                     _TIMER1_isr:
  6681                           	opt stack 21
  6682                           
  6683                           ;Lab9_sample_3.c: 167: Nec_state = 0;
  6684                           
  6685                           ;incstack = 0
  6686  00152A  0E00               	movlw	0
  6687  00152C  6E6A               	movwf	_Nec_state,c
  6688                           
  6689                           ;Lab9_sample_3.c: 168: INTCON2bits.INTEDG0 = 0;
  6690  00152E  9CF1               	bcf	intcon2,6,c	;volatile
  6691                           
  6692                           ;Lab9_sample_3.c: 169: T1CONbits.TMR1ON = 0;
  6693  001530  90CD               	bcf	4045,0,c	;volatile
  6694                           
  6695                           ;Lab9_sample_3.c: 170: PIR1bits.TMR1IF = 0;
  6696  001532  909E               	bcf	3998,0,c	;volatile
  6697  001534  0012               	return		;funcret
  6698  001536                     __end_of_TIMER1_isr:
  6699                           	opt stack 0
  6700                           pclatu	equ	0xFFB
  6701                           pclath	equ	0xFFA
  6702                           tblptru	equ	0xFF8
  6703                           tblptrh	equ	0xFF7
  6704                           tblptrl	equ	0xFF6
  6705                           tablat	equ	0xFF5
  6706                           prodh	equ	0xFF4
  6707                           prodl	equ	0xFF3
  6708                           intcon	equ	0xFF2
  6709                           intcon2	equ	0xFF1
  6710                           postinc0	equ	0xFEE
  6711                           fsr0h	equ	0xFEA
  6712                           fsr0l	equ	0xFE9
  6713                           wreg	equ	0xFE8
  6714                           postdec1	equ	0xFE5
  6715                           fsr1h	equ	0xFE2
  6716                           fsr1l	equ	0xFE1
  6717                           indf2	equ	0xFDF
  6718                           postinc2	equ	0xFDE
  6719                           postdec2	equ	0xFDD
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _INT0_isr *****************
  6725 ;; Defined at:
  6726 ;;		line 179 in file "Lab9_sample_3.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;		None               void
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, status,0, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;Total ram usage:        2 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    1
  6747 ;; This function calls:
  6748 ;;		_force_nec_state0
  6749 ;; This function is called by:
  6750 ;;		_chkisr
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           	psect	text36
  6755  00077E                     __ptext36:
  6756                           	opt stack 0
  6757  00077E                     _INT0_isr:
  6758                           	opt stack 20
  6759                           
  6760                           ;Lab9_sample_3.c: 181: INTCONbits.INT0IF = 0;
  6761                           
  6762                           ;incstack = 0
  6763  00077E  92F2               	bcf	intcon,1,c	;volatile
  6764                           
  6765                           ;Lab9_sample_3.c: 182: if (Nec_state != 0)
  6766  000780  506A               	movf	_Nec_state,w,c
  6767  000782  B4D8               	btfsc	status,2,c
  6768  000784  D094               	goto	i2l1657
  6769                           
  6770                           ;Lab9_sample_3.c: 183: {
  6771                           ;Lab9_sample_3.c: 184: Time_Elapsed = (TMR1H << 8) | TMR1L;
  6772  000786  50CE               	movf	4046,w,c	;volatile
  6773  000788  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  6774  00078C  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  6775  00078E  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  6776  000792  6A01               	clrf	??_INT0_isr,c
  6777  000794  1001               	iorwf	??_INT0_isr,w,c
  6778  000796  6E61               	movwf	_Time_Elapsed,c
  6779  000798  5002               	movf	??_INT0_isr+1,w,c
  6780  00079A  6E62               	movwf	_Time_Elapsed+1,c
  6781                           
  6782                           ;Lab9_sample_3.c: 185: TMR1H = 0;
  6783  00079C  0E00               	movlw	0
  6784  00079E  6ECF               	movwf	4047,c	;volatile
  6785                           
  6786                           ;Lab9_sample_3.c: 186: TMR1L = 0;
  6787  0007A0  0E00               	movlw	0
  6788  0007A2  6ECE               	movwf	4046,c	;volatile
  6789                           
  6790                           ;Lab9_sample_3.c: 187: }
  6791                           ;Lab9_sample_3.c: 189: switch(Nec_state)
  6792  0007A4  D084               	goto	i2l1657
  6793  0007A6                     i2l1587:
  6794                           
  6795                           ;Lab9_sample_3.c: 192: {
  6796                           ;Lab9_sample_3.c: 194: TMR1H = 0;
  6797  0007A6  0E00               	movlw	0
  6798  0007A8  6ECF               	movwf	4047,c	;volatile
  6799                           
  6800                           ;Lab9_sample_3.c: 195: TMR1L = 0;
  6801  0007AA  0E00               	movlw	0
  6802  0007AC  6ECE               	movwf	4046,c	;volatile
  6803                           
  6804                           ;Lab9_sample_3.c: 196: PIR1bits.TMR1IF = 0;
  6805  0007AE  909E               	bcf	3998,0,c	;volatile
  6806                           
  6807                           ;Lab9_sample_3.c: 197: T1CON= 0x90;
  6808  0007B0  0E90               	movlw	144
  6809  0007B2  6ECD               	movwf	4045,c	;volatile
  6810                           
  6811                           ;Lab9_sample_3.c: 198: T1CONbits.TMR1ON = 1;
  6812  0007B4  80CD               	bsf	4045,0,c	;volatile
  6813                           
  6814                           ;Lab9_sample_3.c: 199: bit_count = 0;
  6815  0007B6  0E00               	movlw	0
  6816  0007B8  6E6C               	movwf	_bit_count,c
  6817                           
  6818                           ;Lab9_sample_3.c: 200: Nec_code = 0;
  6819  0007BA  0E00               	movlw	0
  6820  0007BC  6E5D               	movwf	_Nec_code,c
  6821  0007BE  0E00               	movlw	0
  6822  0007C0  6E5E               	movwf	_Nec_code+1,c
  6823  0007C2  0E00               	movlw	0
  6824  0007C4  6E5F               	movwf	_Nec_code+2,c
  6825  0007C6  0E00               	movlw	0
  6826  0007C8  6E60               	movwf	_Nec_code+3,c
  6827                           
  6828                           ;Lab9_sample_3.c: 201: Nec_state = 1;
  6829  0007CA  0E01               	movlw	1
  6830  0007CC  6E6A               	movwf	_Nec_state,c
  6831  0007CE  D06D               	goto	i2l1651
  6832                           
  6833                           ;Lab9_sample_3.c: 203: return;
  6834                           
  6835                           ;Lab9_sample_3.c: 202: INTCON2bits.INTEDG0 = 1;
  6836  0007D0  D07F               	goto	i2l142
  6837  0007D2                     i2l1597:
  6838                           
  6839                           ;Lab9_sample_3.c: 207: {
  6840                           ;Lab9_sample_3.c: 210: if( (Time_Elapsed > 8500 ) && (Time_Elapsed < 9500))
  6841  0007D2  0E35               	movlw	53
  6842  0007D4  5C61               	subwf	_Time_Elapsed,w,c
  6843  0007D6  0E21               	movlw	33
  6844  0007D8  5862               	subwfb	_Time_Elapsed+1,w,c
  6845  0007DA  A0D8               	btfss	status,0,c
  6846  0007DC  D009               	goto	i2l1603
  6847  0007DE  0E1C               	movlw	28
  6848  0007E0  5C61               	subwf	_Time_Elapsed,w,c
  6849  0007E2  0E25               	movlw	37
  6850  0007E4  5862               	subwfb	_Time_Elapsed+1,w,c
  6851  0007E6  B0D8               	btfsc	status,0,c
  6852  0007E8  D003               	goto	i2l1603
  6853                           
  6854                           ;Lab9_sample_3.c: 211: {
  6855                           ;Lab9_sample_3.c: 212: Nec_state = 2;
  6856  0007EA  0E02               	movlw	2
  6857  0007EC  6E6A               	movwf	_Nec_state,c
  6858                           
  6859                           ;Lab9_sample_3.c: 213: }
  6860  0007EE  D02A               	goto	i2l1629
  6861  0007F0                     i2l1603:
  6862                           
  6863                           ;Lab9_sample_3.c: 214: else
  6864                           ;Lab9_sample_3.c: 215: {
  6865                           ;Lab9_sample_3.c: 216: force_nec_state0();
  6866  0007F0  EC9F  F00A         	call	_force_nec_state0	;wreg free
  6867  0007F4  D027               	goto	i2l1629
  6868  0007F6  D026               	goto	i2l1629
  6869                           
  6870                           ;Lab9_sample_3.c: 220: return;
  6871                           
  6872                           ;Lab9_sample_3.c: 217: }
  6873                           ;Lab9_sample_3.c: 219: INTCON2bits.INTEDG0 = 0;
  6874  0007F8  D06B               	goto	i2l142
  6875  0007FA                     i2l1609:
  6876                           
  6877                           ;Lab9_sample_3.c: 224: {
  6878                           ;Lab9_sample_3.c: 226: if( (Time_Elapsed > 4000 ) && (Time_Elapsed < 5000))
  6879  0007FA  0EA1               	movlw	161
  6880  0007FC  5C61               	subwf	_Time_Elapsed,w,c
  6881  0007FE  0E0F               	movlw	15
  6882  000800  5862               	subwfb	_Time_Elapsed+1,w,c
  6883  000802  A0D8               	btfss	status,0,c
  6884  000804  D009               	goto	i2l1615
  6885  000806  0E88               	movlw	136
  6886  000808  5C61               	subwf	_Time_Elapsed,w,c
  6887  00080A  0E13               	movlw	19
  6888  00080C  5862               	subwfb	_Time_Elapsed+1,w,c
  6889  00080E  B0D8               	btfsc	status,0,c
  6890  000810  D003               	goto	i2l1615
  6891  000812                     
  6892                           ;Lab9_sample_3.c: 227: {
  6893                           ;Lab9_sample_3.c: 228: Nec_state = 3;
  6894  000812  0E03               	movlw	3
  6895  000814  6E6A               	movwf	_Nec_state,c
  6896                           
  6897                           ;Lab9_sample_3.c: 229: }
  6898  000816  D049               	goto	i2l1651
  6899  000818                     i2l1615:
  6900                           
  6901                           ;Lab9_sample_3.c: 231: else
  6902                           ;Lab9_sample_3.c: 232: {
  6903                           ;Lab9_sample_3.c: 233: force_nec_state0();
  6904  000818  EC9F  F00A         	call	_force_nec_state0	;wreg free
  6905  00081C  D046               	goto	i2l1651
  6906  00081E  D045               	goto	i2l1651
  6907                           
  6908                           ;Lab9_sample_3.c: 236: return;
  6909                           
  6910                           ;Lab9_sample_3.c: 234: }
  6911                           ;Lab9_sample_3.c: 235: INTCON2bits.INTEDG0 = 1;
  6912  000820  D057               	goto	i2l142
  6913  000822                     i2l1621:
  6914                           
  6915                           ;Lab9_sample_3.c: 240: {
  6916                           ;Lab9_sample_3.c: 242: if( (Time_Elapsed > 400 ) && (Time_Elapsed < 700))
  6917  000822  0E91               	movlw	145
  6918  000824  5C61               	subwf	_Time_Elapsed,w,c
  6919  000826  0E01               	movlw	1
  6920  000828  5862               	subwfb	_Time_Elapsed+1,w,c
  6921  00082A  A0D8               	btfss	status,0,c
  6922  00082C  D008               	goto	i2l1627
  6923  00082E  0EBC               	movlw	188
  6924  000830  5C61               	subwf	_Time_Elapsed,w,c
  6925  000832  0E02               	movlw	2
  6926  000834  5862               	subwfb	_Time_Elapsed+1,w,c
  6927  000836  B0D8               	btfsc	status,0,c
  6928  000838  D002               	goto	i2l1627
  6929                           
  6930                           ;Lab9_sample_3.c: 243: {
  6931                           ;Lab9_sample_3.c: 244: Nec_state = 4;
  6932  00083A  0E04               	movlw	4
  6933  00083C  D7D7               	goto	L3
  6934  00083E                     i2l1627:
  6935                           
  6936                           ;Lab9_sample_3.c: 247: else
  6937                           ;Lab9_sample_3.c: 248: {
  6938                           ;Lab9_sample_3.c: 249: force_nec_state0();
  6939  00083E  EC9F  F00A         	call	_force_nec_state0	;wreg free
  6940  000842  D000               	goto	i2l1629
  6941  000844                     i2l1629:
  6942                           
  6943                           ;Lab9_sample_3.c: 250: }
  6944                           ;Lab9_sample_3.c: 251: INTCON2bits.INTEDG0 = 0;
  6945  000844  9CF1               	bcf	intcon2,6,c	;volatile
  6946                           
  6947                           ;Lab9_sample_3.c: 252: return;
  6948  000846  D044               	goto	i2l142
  6949  000848                     i2l1633:
  6950                           
  6951                           ;Lab9_sample_3.c: 256: {
  6952                           ;Lab9_sample_3.c: 258: if( (Time_Elapsed > 400) && (Time_Elapsed < 1800))
  6953  000848  0E91               	movlw	145
  6954  00084A  5C61               	subwf	_Time_Elapsed,w,c
  6955  00084C  0E01               	movlw	1
  6956  00084E  5862               	subwfb	_Time_Elapsed+1,w,c
  6957  000850  A0D8               	btfss	status,0,c
  6958  000852  D028               	goto	i2l1649
  6959  000854  0E08               	movlw	8
  6960  000856  5C61               	subwf	_Time_Elapsed,w,c
  6961  000858  0E07               	movlw	7
  6962  00085A  5862               	subwfb	_Time_Elapsed+1,w,c
  6963  00085C  B0D8               	btfsc	status,0,c
  6964  00085E  D022               	goto	i2l1649
  6965                           
  6966                           ;Lab9_sample_3.c: 259: {
  6967                           ;Lab9_sample_3.c: 260: Nec_code = Nec_code << 1;
  6968  000860  90D8               	bcf	status,0,c
  6969  000862  345D               	rlcf	_Nec_code,w,c
  6970  000864  6E5D               	movwf	_Nec_code,c
  6971  000866  345E               	rlcf	_Nec_code+1,w,c
  6972  000868  6E5E               	movwf	_Nec_code+1,c
  6973  00086A  345F               	rlcf	_Nec_code+2,w,c
  6974  00086C  6E5F               	movwf	_Nec_code+2,c
  6975  00086E  3460               	rlcf	_Nec_code+3,w,c
  6976  000870  6E60               	movwf	_Nec_code+3,c
  6977                           
  6978                           ;Lab9_sample_3.c: 262: if( Time_Elapsed > 1000 )
  6979  000872  0EE9               	movlw	233
  6980  000874  5C61               	subwf	_Time_Elapsed,w,c
  6981  000876  0E03               	movlw	3
  6982  000878  5862               	subwfb	_Time_Elapsed+1,w,c
  6983  00087A  A0D8               	btfss	status,0,c
  6984  00087C  D007               	goto	i2l1641
  6985                           
  6986                           ;Lab9_sample_3.c: 263: {
  6987                           ;Lab9_sample_3.c: 264: Nec_code += 1;
  6988  00087E  0E01               	movlw	1
  6989  000880  265D               	addwf	_Nec_code,f,c
  6990  000882  0E00               	movlw	0
  6991  000884  225E               	addwfc	_Nec_code+1,f,c
  6992  000886  225F               	addwfc	_Nec_code+2,f,c
  6993  000888  2260               	addwfc	_Nec_code+3,f,c
  6994  00088A  D000               	goto	i2l1641
  6995  00088C                     i2l1641:
  6996                           
  6997                           ;Lab9_sample_3.c: 265: }
  6998                           ;Lab9_sample_3.c: 267: bit_count++;
  6999  00088C  2A6C               	incf	_bit_count,f,c
  7000                           
  7001                           ;Lab9_sample_3.c: 269: if( bit_count > 31 )
  7002  00088E  0E1F               	movlw	31
  7003  000890  646C               	cpfsgt	_bit_count,c
  7004  000892  D7BF               	goto	L4
  7005                           
  7006                           ;Lab9_sample_3.c: 270: {
  7007                           ;Lab9_sample_3.c: 271: nec_ok = 1;
  7008  000894  0E00               	movlw	0
  7009  000896  6E66               	movwf	_nec_ok+1,c
  7010  000898  0E01               	movlw	1
  7011  00089A  6E65               	movwf	_nec_ok,c
  7012                           
  7013                           ;Lab9_sample_3.c: 272: INTCONbits.INT0IE = 0;
  7014  00089C  98F2               	bcf	intcon,4,c	;volatile
  7015                           
  7016                           ;Lab9_sample_3.c: 273: Nec_state = 0;
  7017  00089E  0E00               	movlw	0
  7018  0008A0  6E6A               	movwf	_Nec_state,c
  7019  0008A2  D7B7               	goto	L4
  7020  0008A4                     i2l1649:
  7021                           
  7022                           ;Lab9_sample_3.c: 280: else
  7023                           ;Lab9_sample_3.c: 281: {
  7024                           ;Lab9_sample_3.c: 282: force_nec_state0();
  7025  0008A4  EC9F  F00A         	call	_force_nec_state0	;wreg free
  7026  0008A8  D000               	goto	i2l1651
  7027  0008AA                     i2l1651:
  7028                           
  7029                           ;Lab9_sample_3.c: 283: }
  7030                           ;Lab9_sample_3.c: 284: INTCON2bits.INTEDG0 = 1;
  7031  0008AA  8CF1               	bsf	intcon2,6,c	;volatile
  7032                           
  7033                           ;Lab9_sample_3.c: 287: }
  7034                           ;Lab9_sample_3.c: 288: }
  7035                           
  7036                           ;Lab9_sample_3.c: 286: return;
  7037  0008AC  D011               	goto	i2l142
  7038  0008AE                     i2l1657:
  7039  0008AE  506A               	movf	_Nec_state,w,c
  7040                           
  7041                           ; Switch size 1, requested type "space"
  7042                           ; Number of cases is 5, Range of values is 0 to 4
  7043                           ; switch strategies available:
  7044                           ; Name         Instructions Cycles
  7045                           ; simple_byte           16     9 (average)
  7046                           ;	Chosen strategy is simple_byte
  7047  0008B0  0A00               	xorlw	0	; case 0
  7048  0008B2  B4D8               	btfsc	status,2,c
  7049  0008B4  D778               	goto	i2l1587
  7050  0008B6  0A01               	xorlw	1	; case 1
  7051  0008B8  B4D8               	btfsc	status,2,c
  7052  0008BA  D78B               	goto	i2l1597
  7053  0008BC  0A03               	xorlw	3	; case 2
  7054  0008BE  B4D8               	btfsc	status,2,c
  7055  0008C0  D79C               	goto	i2l1609
  7056  0008C2  0A01               	xorlw	1	; case 3
  7057  0008C4  B4D8               	btfsc	status,2,c
  7058  0008C6  D7AD               	goto	i2l1621
  7059  0008C8  0A07               	xorlw	7	; case 4
  7060  0008CA  B4D8               	btfsc	status,2,c
  7061  0008CC  D7BD               	goto	i2l1633
  7062  0008CE  D000               	goto	i2l142
  7063  0008D0                     i2l142:
  7064  0008D0  0012               	return		;funcret
  7065  0008D2                     __end_of_INT0_isr:
  7066                           	opt stack 0
  7067                           pclatu	equ	0xFFB
  7068                           pclath	equ	0xFFA
  7069                           tblptru	equ	0xFF8
  7070                           tblptrh	equ	0xFF7
  7071                           tblptrl	equ	0xFF6
  7072                           tablat	equ	0xFF5
  7073                           prodh	equ	0xFF4
  7074                           prodl	equ	0xFF3
  7075                           intcon	equ	0xFF2
  7076                           intcon2	equ	0xFF1
  7077                           postinc0	equ	0xFEE
  7078                           fsr0h	equ	0xFEA
  7079                           fsr0l	equ	0xFE9
  7080                           wreg	equ	0xFE8
  7081                           postdec1	equ	0xFE5
  7082                           fsr1h	equ	0xFE2
  7083                           fsr1l	equ	0xFE1
  7084                           indf2	equ	0xFDF
  7085                           postinc2	equ	0xFDE
  7086                           postdec2	equ	0xFDD
  7087                           fsr2h	equ	0xFDA
  7088                           fsr2l	equ	0xFD9
  7089                           status	equ	0xFD8
  7090                           
  7091 ;; *************** function _force_nec_state0 *****************
  7092 ;; Defined at:
  7093 ;;		line 173 in file "Lab9_sample_3.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;		None
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;		None
  7098 ;; Return value:  Size  Location     Type
  7099 ;;		None               void
  7100 ;; Registers used:
  7101 ;;		wreg, status,2
  7102 ;; Tracked objects:
  7103 ;;		On entry : 0/0
  7104 ;;		On exit  : 0/0
  7105 ;;		Unchanged: 0/0
  7106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;Total ram usage:        0 bytes
  7112 ;; Hardware stack levels used:    1
  7113 ;; This function calls:
  7114 ;;		Nothing
  7115 ;; This function is called by:
  7116 ;;		_INT0_isr
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           	psect	text37
  7121  00153E                     __ptext37:
  7122                           	opt stack 0
  7123  00153E                     _force_nec_state0:
  7124                           	opt stack 20
  7125                           
  7126                           ;Lab9_sample_3.c: 175: Nec_state=0;
  7127                           
  7128                           ;incstack = 0
  7129  00153E  0E00               	movlw	0
  7130  001540  6E6A               	movwf	_Nec_state,c
  7131                           
  7132                           ;Lab9_sample_3.c: 176: T1CONbits.TMR1ON = 0;
  7133  001542  90CD               	bcf	4045,0,c	;volatile
  7134  001544  0012               	return		;funcret
  7135  001546                     __end_of_force_nec_state0:
  7136                           	opt stack 0
  7137                           pclatu	equ	0xFFB
  7138                           pclath	equ	0xFFA
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           prodh	equ	0xFF4
  7144                           prodl	equ	0xFF3
  7145                           intcon	equ	0xFF2
  7146                           intcon2	equ	0xFF1
  7147                           postinc0	equ	0xFEE
  7148                           fsr0h	equ	0xFEA
  7149                           fsr0l	equ	0xFE9
  7150                           wreg	equ	0xFE8
  7151                           postdec1	equ	0xFE5
  7152                           fsr1h	equ	0xFE2
  7153                           fsr1l	equ	0xFE1
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           pclatu	equ	0xFFB
  7161                           pclath	equ	0xFFA
  7162                           tblptru	equ	0xFF8
  7163                           tblptrh	equ	0xFF7
  7164                           tblptrl	equ	0xFF6
  7165                           tablat	equ	0xFF5
  7166                           prodh	equ	0xFF4
  7167                           prodl	equ	0xFF3
  7168                           intcon	equ	0xFF2
  7169                           intcon2	equ	0xFF1
  7170                           postinc0	equ	0xFEE
  7171                           fsr0h	equ	0xFEA
  7172                           fsr0l	equ	0xFE9
  7173                           wreg	equ	0xFE8
  7174                           postdec1	equ	0xFE5
  7175                           fsr1h	equ	0xFE2
  7176                           fsr1l	equ	0xFE1
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           fsr2h	equ	0xFDA
  7181                           fsr2l	equ	0xFD9
  7182                           status	equ	0xFD8
  7183                           
  7184                           	psect	rparam
  7185  0000                     pclatu	equ	0xFFB
  7186                           pclath	equ	0xFFA
  7187                           tblptru	equ	0xFF8
  7188                           tblptrh	equ	0xFF7
  7189                           tblptrl	equ	0xFF6
  7190                           tablat	equ	0xFF5
  7191                           prodh	equ	0xFF4
  7192                           prodl	equ	0xFF3
  7193                           intcon	equ	0xFF2
  7194                           intcon2	equ	0xFF1
  7195                           postinc0	equ	0xFEE
  7196                           fsr0h	equ	0xFEA
  7197                           fsr0l	equ	0xFE9
  7198                           wreg	equ	0xFE8
  7199                           postdec1	equ	0xFE5
  7200                           fsr1h	equ	0xFE2
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           postinc2	equ	0xFDE
  7204                           postdec2	equ	0xFDD
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8


Data Sizes:
    Strings     65
    Constant    507
    Data        211
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     70     111
    BANK0           128      7     101
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[6]), STR_2(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   51070
                                             66 COMRAM     4     4      0
                  _Initialize_Screen
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
                     _waitHalfSecond
 ---------------------------------------------------------------------------------
 (1) _waitHalfSecond                                       2     2      0      46
                                             16 COMRAM     2     2      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    2174
                                             29 COMRAM    25    17      8
                            ___lldiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     268
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20901
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___wmul
     _isdigit
     _putch
   _waitHalfSecond
     _Activate_Buzzer
     _Deactivate_Buzzer

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     46      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 28 09:43:47 2021

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006E                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _D1 0080                                _D2 0095  
                              _D3 00AA               ___wmul@multiplicand 0013  
                             l302 06D2                               l119 1520  
                             l217 121C                               l330 0DF0  
                             l227 14D2                               l331 0D5C  
                             l333 0DCC                               l341 053C  
                             l334 0DEE                               l422 0114  
                             l271 1408                               l443 02BC  
                             l277 0F92                               l293 077C  
                             l295 0656                               l359 0940  
                             l471 1156                               l472 1158  
                             l473 1162                               l474 1164  
                             l467 113C                               l476 117E  
                             l910 147C                               l479 145A  
                             l939 0EFA                               _PR2 000FCB  
               _Deactivate_Buzzer 1536                               _nbr 0063  
                             _txt 0067                               prod 000FF3  
                             wreg 000FE8                ?_Deactivate_Buzzer 0001  
                 ??_fillRectangle 001D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize 140A                      __CFG_WDT$OFF 000000  
                            l1041 1338                    drawFastVLine@h 0019  
                  drawFastVLine@x 0022                              l2501 1140  
                  drawFastVLine@y 0018                              l3401 0662  
                            l3251 0F88                              l3235 0F1C  
                            l3405 0692                              l2509 114E  
                            l3239 0F54                              l3407 06C6  
                            l3511 0BB4                              l3249 0F7A  
                            l3425 0748                              l3417 06F4  
                            l3433 0778                              l3409 06CA  
                            l3441 130C                              l3521 0C0E  
                            l3601 0044                              l3427 0770  
                            l3419 071C                              l3507 0B96  
                            l3451 0D26                              l3611 0082  
                            l3277 13EA                              l3285 127C  
                            l2493 112C                              l2645 1474  
                            l3605 004E                              l3391 0644  
                            l3439 1306                              l3519 0C06  
                            l2655 0EA2                              l3623 00EE  
                            l3607 0064                              l2831 13B8  
                            l3289 1298                              l3473 0DD0  
                            l3457 0D94                              l2497 1134  
                            l2489 1122                              l2657 0EB0  
                            l3633 015A                              l3395 0652  
                            l3387 0638                              l3483 0DEA  
                            l2595 1382                              l2667 0EEA  
                            l2659 0EB8                              l3651 01C2  
                            l3643 019A                              l3635 015E  
                            l3619 00E4                              l2835 13CC  
                            l3397 065A                              l3477 0DDA  
                            l3469 0DC2                              l2597 138C  
                            l3573 09A2                              l3557 0926  
                            l3661 01F0                              l3653 01CC  
                            l3629 0134                              l3821 036C  
                            l3805 0328                              l3495 0B46  
                            l3727 0612                              l3663 01F8  
                            l3647 019E                              l3639 016A  
                            l2839 13D2                              l3577 09F4  
                            l3657 01D8                              l3833 03A2  
                            l3825 0380                              l3675 028C  
                            l3667 0210                              l3595 0026  
                            l3669 021C                              l3677 02A0  
                            l3829 039A                              l3599 0036  
                            l3699 0522                              STR_1 FFBE  
                            STR_2 FFD4                              STR_3 FFF9  
                            STR_4 FFE8                              u2400 0D54  
                            u2170 0F4A                              u2330 072A  
                            u2410 0D8A                              u2470 0B70  
                            _TRMT 007D61               ??_Deactivate_Buzzer 0011  
                            _main 02BE                              _font FDC3  
                            fsr0h 000FEA                              _txt1 012A  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 005C                              pclat 000FFA  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
                 ??_drawFastVLine 001C                      ___param_bank 000010  
                     ?_TIMER1_isr 0001                  __end_of_INT0_isr 08D2  
       __end_of_Deactivate_Buzzer 153E                   drawFastVLine@hi 0020  
                 drawFastVLine@lo 0021                             ?_main 0001  
                 drawCircle@ddF_x 0026                   drawCircle@ddF_y 0028  
                 __end_of___lldiv 0F0C                             _T1CON 000FCD  
                           _T2CON 000FCA                             _T3CON 000FB1  
                           i2l130 10D6                             i2l142 08D0  
                 drawCircle@color 0022                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR1H 000FCF  
                           _TMR0L 000FD6                             _TMR1L 000FCE  
                           _SPBRG 000FAF                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TXREG 000FAD  
                           _TXSTA 000FAC                             _Rcmd1 0A0A  
                           _Rcmd3 0C24                             _nRBPU 007F8F  
                           _color 0100                             _font2 FEC2  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
                 __end_of_isdigit 147E             fillCircleHelper@delta 002B  
                           _putch 151C             fillCircleHelper@color 002D  
                           main@i 0044                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
                 write_data@data_ 0013                   __initialization 0F94  
                    __end_of_main 047A                      __end_of_font FEC2  
                __end_of_Rcmd2red 1378                            ??_main 0043  
                   __activetblptr 000002                 __end_of_LCD_Reset 14FC  
       ??_TFT_GreenTab_Initialize 001D                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON1 000FC1  
                          _CCPR2L 000FBB                            ?_putch 0001  
                          i2l1603 07F0                            i2l1621 0822  
                          i2l1615 0818                            i2l1641 088C  
                          i2l1633 0848                            i2l1609 07FA  
                          i2l1651 08AA                            i2l1627 083E  
                          i2l1629 0844                            i2l1649 08A4  
                          i2l1657 08AE                            i2l1587 07A6  
                          i2l1597 07D2                            i2l1855 10CC  
                          _OSCCON 000FD3               __size_of_TIMER1_isr 000C  
                          _SPBRGH 000FB0                            _SSPBUF 000FC9  
         __size_of_waitHalfSecond 0030                  _force_nec_state0 153E  
                __end_of_delay_ms 1224                  __end_of_fillRect 12BC  
                __end_of_drawChar 077E                __size_of_OpenUSART 0070  
        __size_of_Activate_Buzzer 0012                            ___wmul 1434  
       __size_of_fillCircleHelper 0138                  __end_of_drawtext 0C24  
                       ??___lldiv 0019                            _chkisr 0008  
                          _array1 0047                            _buffer 00BF  
                          _nec_ok 0065                            clear_0 0F9A  
                          clear_1 0FA6        __size_of_Deactivate_Buzzer 0008  
                          _printf 001C                      drawtext@size 0040  
                          _strcpy 1378                            _strlen 12FC  
                    __pdataCOMRAM 0047                         ??_isdigit 0011  
                    __mediumconst FDC2                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0011                  __end_of_spiwrite 14D8  
                      __accesstop 0080           __end_of__initialization 100C  
                       ?_INT0_isr 0001                     ___rparam_used 000001  
                   __end_of_Rcmd1 0B1A                     __end_of_Rcmd3 0D16  
                  __pcstackCOMRAM 0001                      __pidataBANK0 12BC  
                    __pidataBANK1 1016                     __end_of_font2 FF9E  
                   __end_of_putch 152A                    drawPixel@color 0019  
          __size_of_write_command 0010        fillCircleHelper@cornername 0029  
                         ??_Rcmd1 001D                           ??_Rcmd3 001D  
              __size_of_drawPixel 0030                 __end_of_OpenUSART 1180  
                         ??_putch 0011                        __pbssBANK0 00BF  
                       ?_Rcmd2red 0001                __size_of_init_UART 0014  
                 spiwrite@spidata 0012                        ??_INT0_isr 0001  
              __CFG_CCP2MX$PORTBE 000000                           ?___wmul 0011  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                      ??_TIMER1_isr 0001  
                      _fillCircle 1180                           ?_printf 001E  
                         ?_strcpy 0011                           ?_strlen 0011  
               ??_Activate_Buzzer 0011                        _fillScreen 147E  
                      _drawCircle 047A                         ?_delay_ms 0017  
                       ?_fillRect 0023                         ?_drawChar 002E  
                         _SSPCON1 000FC6                           _SSPSTAT 000FC7  
           __end_of_fillRectangle 0DF2                         ?_drawtext 0039  
                      ??_Rcmd2red 0014                    _waitHalfSecond 13AA  
              __end_of_TIMER1_isr 1536                     _write_command 150C  
                         __Hparam 0000                           __Lparam 0000  
               __end_of_drawPixel 140A             __end_of_drawFastVLine 0F94  
                _fillCircleHelper 08D2                           ___lldiv 0E80  
                 __size_of___wmul 0028                   __size_of_chkisr 1108  
                       ?_spiwrite 0001                           __pcinit 0F94  
                         __ramtop 1000                           __ptext0 02BE  
                         __ptext1 13AA                           __ptext2 1536  
                         __ptext3 14D8                           __ptext4 001C  
                         __ptext5 151C                           __ptext6 145C  
                         __ptext7 0E80                           __ptext8 14B0  
                         __ptext9 1110                   __size_of_printf 02A2  
               __end_of_init_UART 14C4                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                 __end_of_hexpowers FFBE  
        __end_of_force_nec_state0 1546                         _T1CONbits 000FCD  
                         _isdigit 145C                         _T3CONbits 000FB1  
                      ??_delay_ms 0019                     drawtext@_text 003A  
                   drawtext@color 003C                        ??_fillRect 0028  
                      ??_drawChar 0035                         _LCD_Reset 14EA  
                   _setAddrWindow 1224                    __pintcode_body 1094  
                      delay_ms@ms 0017              end_of_initialization 100C  
          __end_of_waitHalfSecond 13DA                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FDC2  
                         int_func 1094                   ___lldiv@divisor 0015  
                 ___lldiv@counter 001D                         _RCSTAbits 000FAB  
                         printf@c 0036                           printf@f 001E  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                drawtext@cursor_x 00E4                  drawtext@cursor_y 00E3  
                       _PORTBbits 000F81                         _PORTDbits 000F83  
                       _PORTEbits 000F84                       ?_fillScreen 0024  
                     ?_drawCircle 001C                        drawChar@bg 0032  
                       _TRISCbits 000F94                    ?_setAddrWindow 0014  
                      ?_LCD_Reset 0001                  drawtext@textsize 00DF  
                 ?_waitHalfSecond 0001                        drawPixel@x 001B  
                      drawPixel@y 0018                       printf@width 0034  
                       _TXSTAbits 000FAC                 __size_of_INT0_isr 0154  
                  __end_of___wmul 145C                     delay_ms@count 001B  
                      _write_data 14FC                     __pidataCOMRAM 149A  
                  __end_of_chkisr 1110          ?_TFT_GreenTab_Initialize 0001  
                      drawtext@bg 003E                         _Nec_code1 0069  
                  __end_of_printf 02BE                    __end_of_strcpy 13AA  
                  __end_of_strlen 133A                         _Nec_state 006A  
             start_initialization 0F94                   ??_write_command 0013  
                       _OpenUSART 1110               __size_of_fillCircle 0052  
                __CFG_OSC$INTIO67 000000                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
                 _Activate_Buzzer 14D8                          ??___wmul 0015  
                        ??_chkisr 0003                       __pdataBANK0 0080  
                     __pdataBANK1 0100                   setAddrWindow@x0 0017  
                 setAddrWindow@x1 0015                   setAddrWindow@y0 0014  
                 setAddrWindow@y1 0016                          ??_printf 0026  
                        ??_strcpy 0015                          ??_strlen 0013  
                 waitHalfSecond@i 0011                       __pbssCOMRAM 005D  
                 ??_setAddrWindow 0017                     __pcstackBANK0 00DE  
                     ??_LCD_Reset 001D                      _isdigit$1813 0012  
        __end_of_fillCircleHelper 0A0A                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0011                 __size_of_drawtext 010A  
                       _bit_count 006C                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 1434                     __pmediumconst FDC2  
                        ?___lldiv 0011                         __tft_type 006B  
              drawFastVLine@color 001A                       ?_write_data 0001  
                       _drawPixel 13DA                 __size_of_spiwrite 0014  
               ?_force_nec_state0 0001                          ?_isdigit 0001  
               _Initialize_Screen 0DF2                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _init_UART 14B0  
              ??_force_nec_state0 0001                         _hexpowers FF9E  
              ?_Initialize_Screen 0001                    __size_of_putch 000E  
         __end_of_Activate_Buzzer 14EA                    ___wmul@product 0015  
             ??_Initialize_Screen 0043                          _INT0_isr 077E  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                         fillRect@h 0025  
                       fillRect@i 002C                         fillRect@w 0024  
                       fillRect@x 002B                         fillRect@y 0023  
                       drawChar@c 002F                         drawChar@i 0038  
                       drawChar@j 0037                      ??_fillCircle 0043  
                       drawChar@x 0036                         drawChar@y 002E  
                      ?_drawPixel 0018            __size_of_fillRectangle 00DC  
               ___wmul@multiplier 0011         __end_of_Initialize_Screen 0E80  
                    ??_fillScreen 0026                      ??_drawCircle 0024  
                      printf@flag 0033                        printf@prec 002B  
                       main@found 0046                  ??_waitHalfSecond 0011  
                      ?_init_UART 0001                       _INTCON2bits 000FF1  
                       copy_data0 0FC0                         copy_data1 0FE0  
                       copy_data2 1000                         drawtext@i 00E1  
          __size_of_drawFastVLine 0088                         drawtext@x 00DE  
                       drawtext@y 0039                          _Nec_code 005D  
               write_command@cmd_ 0013                       ??_OpenUSART 0013  
                        _Rcmd2red 133A               __size_of_write_data 0010  
                 OpenUSART@config 0013                      _Time_Elapsed 0061  
              __end_of_fillCircle 11D2                          __Hrparam 0000  
              __end_of_fillScreen 149A                          __Lrparam 0000  
              __end_of_drawCircle 0628                  __size_of___lldiv 008C  
                __size_of_isdigit 0022                          _delay_ms 11D2  
                        __ptext10 1180                          __ptext11 08D2  
                        __ptext20 1272                          __ptext12 047A  
                        __ptext21 0F0C                          __ptext13 0DF2  
                        __ptext30 14C4                          __ptext22 13DA  
                        __ptext14 1378                          __ptext31 14EA  
                        __ptext23 1224                          __ptext15 147E  
                        __ptext32 11D2                          __ptext24 140A  
                        __ptext16 0D16                          __ptext33 1434  
                        __ptext25 0C24                          __ptext17 0B1A  
                        __ptext26 133A                          __ptext18 12FC  
                        __ptext35 152A                          __ptext27 0A0A  
                        __ptext19 0628                          __ptext36 077E  
                        __ptext28 14FC                          __ptext37 153E  
                        __ptext29 150C                          _fillRect 1272  
                        _drawChar 0628  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 006D                          _drawtext 0B1A  
                      strcpy@from 0013                     _fillRectangle 0D16  
                ?_Activate_Buzzer 0001                     __size_of_main 01BC  
                 fillRectangle@hi 0021                   fillRectangle@lo 0022  
                   _drawFastVLine 0F0C                         printf@idx 002A  
                        _spiwrite 14C4                         printf@val 002D  
                     ??_drawPixel 001B                          _rowstart 006F  
              fillCircleHelper@x0 0023                fillCircleHelper@y0 0025  
      __size_of_Initialize_Screen 008E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0011                       ??_init_UART 0014  
                        isdigit@c 0013                 ?_fillCircleHelper 0023  
                       spiwrite@x 0011                          intlevel2 0000  
                  ?_fillRectangle 0018                ??_fillCircleHelper 002F  
           __end_of_write_command 151C                  ___lldiv@dividend 0011  
                 fillScreen@color 0024                      fillCircle@x0 003B  
                    fillCircle@y0 003D                    fillRectangle@h 001A  
                  fillRectangle@w 0019                    fillRectangle@x 0023  
                  fillRectangle@y 0018                    ?_drawFastVLine 0018  
                        printf@ap 0031                 fillCircleHelper@f 0035  
               fillCircleHelper@r 0027                 fillCircleHelper@x 0037  
               fillCircleHelper@y 0039                      ??_write_data 0013  
                      _TIMER1_isr 152A                     fillRect@color 0026  
                ___lldiv@quotient 0019                          strcpy@cp 0015  
                        strlen@cp 0015                          strcpy@to 0011  
                     fillCircle@r 003F             __end_of_setAddrWindow 1272  
              fillRectangle@color 001B                     drawChar@color 0030  
              __end_of_write_data 150C         __size_of_force_nec_state0 0008  
                    drawChar@line 0035                      drawChar@size 0034  
