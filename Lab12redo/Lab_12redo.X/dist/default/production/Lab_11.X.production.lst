

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Dec 01 19:07:09 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  002444                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _day
   102  002444  04                 	db	4
   103                           
   104                           ;initializer for _dow
   105  002445  03                 	db	3
   106                           
   107                           ;initializer for _hour
   108  002446  02                 	db	2
   109                           
   110                           ;initializer for _minute
   111  002447  01                 	db	1
   112                           
   113                           ;initializer for _month
   114  002448  05                 	db	5
   115                           
   116                           ;initializer for _setup_fan_temp
   117  002449  4B                 	db	75
   118                           
   119                           ;initializer for _tempSecond
   120  00244A  FF                 	db	255
   121                           
   122                           ;initializer for _wrap
   123  00244B  01                 	db	1
   124                           
   125                           ;initializer for _year
   126  00244C  06                 	db	6
   127                           
   128                           	psect	idataBANK0
   129  001AF2                     __pidataBANK0:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _array1
   133  001AF2  A2                 	db	162
   134  001AF3  62                 	db	98
   135  001AF4  E2                 	db	226
   136  001AF5  22                 	db	34
   137  001AF6  02                 	db	2
   138  001AF7  C2                 	db	194
   139  001AF8  E0                 	db	224
   140  001AF9  A8                 	db	168
   141  001AFA  90                 	db	144
   142  001AFB  68                 	db	104
   143  001AFC  98                 	db	152
   144  001AFD  B0                 	db	176
   145  001AFE  30                 	db	48
   146  001AFF  18                 	db	24
   147  001B00  7A                 	db	122
   148  001B01  10                 	db	16
   149  001B02  38                 	db	56
   150  001B03  5A                 	db	90
   151  001B04  42                 	db	66
   152  001B05  4A                 	db	74
   153  001B06  52                 	db	82
   154                           
   155                           ;initializer for _alarm_time
   156  001B07  30                 	db	48
   157  001B08  30                 	db	48
   158  001B09  3A                 	db	58
   159  001B0A  30                 	db	48
   160  001B0B  30                 	db	48
   161  001B0C  3A                 	db	58
   162  001B0D  30                 	db	48
   163  001B0E  30                 	db	48
   164  001B0F  00                 	db	0
   165                           
   166                           ;initializer for _setup_alarm_time
   167  001B10  30                 	db	48
   168  001B11  30                 	db	48
   169  001B12  3A                 	db	58
   170  001B13  30                 	db	48
   171  001B14  30                 	db	48
   172  001B15  3A                 	db	58
   173  001B16  30                 	db	48
   174  001B17  30                 	db	48
   175  001B18  00                 	db	0
   176                           
   177                           ;initializer for _setup_date
   178  001B19  30                 	db	48
   179  001B1A  31                 	db	49
   180  001B1B  2F                 	db	47
   181  001B1C  30                 	db	48
   182  001B1D  31                 	db	49
   183  001B1E  2F                 	db	47
   184  001B1F  30                 	db	48
   185  001B20  30                 	db	48
   186  001B21  00                 	db	0
   187                           
   188                           ;initializer for _setup_time
   189  001B22  30                 	db	48
   190  001B23  30                 	db	48
   191  001B24  3A                 	db	58
   192  001B25  30                 	db	48
   193  001B26  30                 	db	48
   194  001B27  3A                 	db	58
   195  001B28  30                 	db	48
   196  001B29  30                 	db	48
   197  001B2A  00                 	db	0
   198                           
   199                           ;initializer for _colors
   200  001B2B  00                 	db	0
   201  001B2C  02                 	db	2
   202  001B2D  04                 	db	4
   203  001B2E  06                 	db	6
   204  001B2F  10                 	db	16
   205  001B30  12                 	db	18
   206  001B31  14                 	db	20
   207  001B32  16                 	db	22
   208                           
   209                           ;initializer for _setup_fan_text
   210  001B33  30                 	db	48
   211  001B34  37                 	db	55
   212  001B35  35                 	db	53
   213  001B36  46                 	db	70
   214  001B37  00                 	db	0
   215                           
   216                           ;initializer for _Alarm_SW_Txt
   217  001B38  4F                 	db	79
   218  001B39  46                 	db	70
   219  001B3A  46                 	db	70
   220  001B3B  00                 	db	0
   221                           
   222                           ;initializer for _RTC_ALARM_Txt
   223  001B3C  30                 	db	48
   224  001B3D  00                 	db	0
   225                           
   226                           ;initializer for _date
   227  001B3E  30                 	db	48
   228  001B3F  30                 	db	48
   229  001B40  2F                 	db	47
   230  001B41  30                 	db	48
   231  001B42  30                 	db	48
   232  001B43  2F                 	db	47
   233  001B44  30                 	db	48
   234  001B45  30                 	db	48
   235  001B46  00                 	db	0
   236                           
   237                           ;initializer for _time
   238  001B47  30                 	db	48
   239  001B48  30                 	db	48
   240  001B49  3A                 	db	58
   241  001B4A  30                 	db	48
   242  001B4B  30                 	db	48
   243  001B4C  3A                 	db	58
   244  001B4D  30                 	db	48
   245  001B4E  30                 	db	48
   246  001B4F  00                 	db	0
   247                           
   248                           ;initializer for _RPM_Txt
   249  001B50  30                 	db	48
   250  001B51  30                 	db	48
   251  001B52  30                 	db	48
   252  001B53  30                 	db	48
   253  001B54  00                 	db	0
   254                           
   255                           ;initializer for _DC_Txt
   256  001B55  30                 	db	48
   257  001B56  30                 	db	48
   258  001B57  30                 	db	48
   259  001B58  00                 	db	0
   260                           
   261                           ;initializer for _Fan_SW_Txt
   262  001B59  4F                 	db	79
   263  001B5A  46                 	db	70
   264  001B5B  46                 	db	70
   265  001B5C  00                 	db	0
   266                           
   267                           ;initializer for _tempC
   268  001B5D  2B                 	db	43
   269  001B5E  32                 	db	50
   270  001B5F  35                 	db	53
   271  001B60  00                 	db	0
   272                           
   273                           ;initializer for _tempF
   274  001B61  2B                 	db	43
   275  001B62  37                 	db	55
   276  001B63  37                 	db	55
   277  001B64  00                 	db	0
   278                           
   279                           	psect	idataBANK1
   280  002270                     __pidataBANK1:
   281                           	opt stack 0
   282                           
   283                           ;initializer for _buffer
   284  002270  20                 	db	32
   285  002271  45                 	db	69
   286  002272  43                 	db	67
   287  002273  45                 	db	69
   288  002274  33                 	db	51
   289  002275  33                 	db	51
   290  002276  30                 	db	48
   291  002277  31                 	db	49
   292  002278  4C                 	db	76
   293  002279  20                 	db	32
   294  00227A  53                 	db	83
   295  00227B  70                 	db	112
   296  00227C  27                 	db	39
   297  00227D  32                 	db	50
   298  00227E  31                 	db	49
   299  00227F  20                 	db	32
   300  002280  4C                 	db	76
   301  002281  31                 	db	49
   302  002282  32                 	db	50
   303  002283  00                 	db	0
   304  002284  00                 	db	0
   305  002285  00                 	db	0
   306  002286  00                 	db	0
   307  002287  00                 	db	0
   308  002288  00                 	db	0
   309  002289  00                 	db	0
   310  00228A  00                 	db	0
   311  00228B  00                 	db	0
   312  00228C  00                 	db	0
   313  00228D  00                 	db	0
   314  00228E  00                 	db	0
   315  00228F  00                 	db	0
   316  002290  00                 	db	0
   317                           
   318                           	psect	mediumconst
   319  00FD28                     __pmediumconst:
   320                           	opt stack 0
   321  00FD28  00                 	db	0
   322  00FD29                     _font:
   323                           	opt stack 0
   324  00FD29  00                 	db	0
   325  00FD2A  00                 	db	0
   326  00FD2B  00                 	db	0
   327  00FD2C  00                 	db	0
   328  00FD2D  00                 	db	0
   329  00FD2E  00                 	db	0
   330  00FD2F  00                 	db	0
   331  00FD30  5F                 	db	95
   332  00FD31  00                 	db	0
   333  00FD32  00                 	db	0
   334  00FD33  00                 	db	0
   335  00FD34  07                 	db	7
   336  00FD35  00                 	db	0
   337  00FD36  07                 	db	7
   338  00FD37  00                 	db	0
   339  00FD38  14                 	db	20
   340  00FD39  7F                 	db	127
   341  00FD3A  14                 	db	20
   342  00FD3B  7F                 	db	127
   343  00FD3C  14                 	db	20
   344  00FD3D  24                 	db	36
   345  00FD3E  2A                 	db	42
   346  00FD3F  7F                 	db	127
   347  00FD40  2A                 	db	42
   348  00FD41  12                 	db	18
   349  00FD42  23                 	db	35
   350  00FD43  13                 	db	19
   351  00FD44  08                 	db	8
   352  00FD45  64                 	db	100
   353  00FD46  62                 	db	98
   354  00FD47  36                 	db	54
   355  00FD48  49                 	db	73
   356  00FD49  56                 	db	86
   357  00FD4A  20                 	db	32
   358  00FD4B  50                 	db	80
   359  00FD4C  00                 	db	0
   360  00FD4D  08                 	db	8
   361  00FD4E  07                 	db	7
   362  00FD4F  03                 	db	3
   363  00FD50  00                 	db	0
   364  00FD51  00                 	db	0
   365  00FD52  1C                 	db	28
   366  00FD53  22                 	db	34
   367  00FD54  41                 	db	65
   368  00FD55  00                 	db	0
   369  00FD56  00                 	db	0
   370  00FD57  41                 	db	65
   371  00FD58  22                 	db	34
   372  00FD59  1C                 	db	28
   373  00FD5A  00                 	db	0
   374  00FD5B  2A                 	db	42
   375  00FD5C  1C                 	db	28
   376  00FD5D  7F                 	db	127
   377  00FD5E  1C                 	db	28
   378  00FD5F  2A                 	db	42
   379  00FD60  08                 	db	8
   380  00FD61  08                 	db	8
   381  00FD62  3E                 	db	62
   382  00FD63  08                 	db	8
   383  00FD64  08                 	db	8
   384  00FD65  00                 	db	0
   385  00FD66  80                 	db	128
   386  00FD67  70                 	db	112
   387  00FD68  30                 	db	48
   388  00FD69  00                 	db	0
   389  00FD6A  08                 	db	8
   390  00FD6B  08                 	db	8
   391  00FD6C  08                 	db	8
   392  00FD6D  08                 	db	8
   393  00FD6E  08                 	db	8
   394  00FD6F  00                 	db	0
   395  00FD70  00                 	db	0
   396  00FD71  60                 	db	96
   397  00FD72  60                 	db	96
   398  00FD73  00                 	db	0
   399  00FD74  20                 	db	32
   400  00FD75  10                 	db	16
   401  00FD76  08                 	db	8
   402  00FD77  04                 	db	4
   403  00FD78  02                 	db	2
   404  00FD79  3E                 	db	62
   405  00FD7A  51                 	db	81
   406  00FD7B  49                 	db	73
   407  00FD7C  45                 	db	69
   408  00FD7D  3E                 	db	62
   409  00FD7E  00                 	db	0
   410  00FD7F  42                 	db	66
   411  00FD80  7F                 	db	127
   412  00FD81  40                 	db	64
   413  00FD82  00                 	db	0
   414  00FD83  72                 	db	114
   415  00FD84  49                 	db	73
   416  00FD85  49                 	db	73
   417  00FD86  49                 	db	73
   418  00FD87  46                 	db	70
   419  00FD88  21                 	db	33
   420  00FD89  41                 	db	65
   421  00FD8A  49                 	db	73
   422  00FD8B  4D                 	db	77
   423  00FD8C  33                 	db	51
   424  00FD8D  18                 	db	24
   425  00FD8E  14                 	db	20
   426  00FD8F  12                 	db	18
   427  00FD90  7F                 	db	127
   428  00FD91  10                 	db	16
   429  00FD92  27                 	db	39
   430  00FD93  45                 	db	69
   431  00FD94  45                 	db	69
   432  00FD95  45                 	db	69
   433  00FD96  39                 	db	57
   434  00FD97  3C                 	db	60
   435  00FD98  4A                 	db	74
   436  00FD99  49                 	db	73
   437  00FD9A  49                 	db	73
   438  00FD9B  31                 	db	49
   439  00FD9C  41                 	db	65
   440  00FD9D  21                 	db	33
   441  00FD9E  11                 	db	17
   442  00FD9F  09                 	db	9
   443  00FDA0  07                 	db	7
   444  00FDA1  36                 	db	54
   445  00FDA2  49                 	db	73
   446  00FDA3  49                 	db	73
   447  00FDA4  49                 	db	73
   448  00FDA5  36                 	db	54
   449  00FDA6  46                 	db	70
   450  00FDA7  49                 	db	73
   451  00FDA8  49                 	db	73
   452  00FDA9  29                 	db	41
   453  00FDAA  1E                 	db	30
   454  00FDAB  00                 	db	0
   455  00FDAC  00                 	db	0
   456  00FDAD  14                 	db	20
   457  00FDAE  00                 	db	0
   458  00FDAF  00                 	db	0
   459  00FDB0  00                 	db	0
   460  00FDB1  40                 	db	64
   461  00FDB2  34                 	db	52
   462  00FDB3  00                 	db	0
   463  00FDB4  00                 	db	0
   464  00FDB5  00                 	db	0
   465  00FDB6  08                 	db	8
   466  00FDB7  14                 	db	20
   467  00FDB8  22                 	db	34
   468  00FDB9  41                 	db	65
   469  00FDBA  14                 	db	20
   470  00FDBB  14                 	db	20
   471  00FDBC  14                 	db	20
   472  00FDBD  14                 	db	20
   473  00FDBE  14                 	db	20
   474  00FDBF  00                 	db	0
   475  00FDC0  41                 	db	65
   476  00FDC1  22                 	db	34
   477  00FDC2  14                 	db	20
   478  00FDC3  08                 	db	8
   479  00FDC4  02                 	db	2
   480  00FDC5  01                 	db	1
   481  00FDC6  59                 	db	89
   482  00FDC7  09                 	db	9
   483  00FDC8  06                 	db	6
   484  00FDC9  3E                 	db	62
   485  00FDCA  41                 	db	65
   486  00FDCB  5D                 	db	93
   487  00FDCC  59                 	db	89
   488  00FDCD  4E                 	db	78
   489  00FDCE  7C                 	db	124
   490  00FDCF  12                 	db	18
   491  00FDD0  11                 	db	17
   492  00FDD1  12                 	db	18
   493  00FDD2  7C                 	db	124
   494  00FDD3  7F                 	db	127
   495  00FDD4  49                 	db	73
   496  00FDD5  49                 	db	73
   497  00FDD6  49                 	db	73
   498  00FDD7  36                 	db	54
   499  00FDD8  3E                 	db	62
   500  00FDD9  41                 	db	65
   501  00FDDA  41                 	db	65
   502  00FDDB  41                 	db	65
   503  00FDDC  22                 	db	34
   504  00FDDD  7F                 	db	127
   505  00FDDE  41                 	db	65
   506  00FDDF  41                 	db	65
   507  00FDE0  41                 	db	65
   508  00FDE1  3E                 	db	62
   509  00FDE2  7F                 	db	127
   510  00FDE3  49                 	db	73
   511  00FDE4  49                 	db	73
   512  00FDE5  49                 	db	73
   513  00FDE6  41                 	db	65
   514  00FDE7  7F                 	db	127
   515  00FDE8  09                 	db	9
   516  00FDE9  09                 	db	9
   517  00FDEA  09                 	db	9
   518  00FDEB  01                 	db	1
   519  00FDEC  3E                 	db	62
   520  00FDED  41                 	db	65
   521  00FDEE  41                 	db	65
   522  00FDEF  51                 	db	81
   523  00FDF0  73                 	db	115
   524  00FDF1  7F                 	db	127
   525  00FDF2  08                 	db	8
   526  00FDF3  08                 	db	8
   527  00FDF4  08                 	db	8
   528  00FDF5  7F                 	db	127
   529  00FDF6  00                 	db	0
   530  00FDF7  41                 	db	65
   531  00FDF8  7F                 	db	127
   532  00FDF9  41                 	db	65
   533  00FDFA  00                 	db	0
   534  00FDFB  20                 	db	32
   535  00FDFC  40                 	db	64
   536  00FDFD  41                 	db	65
   537  00FDFE  3F                 	db	63
   538  00FDFF  01                 	db	1
   539  00FE00  7F                 	db	127
   540  00FE01  08                 	db	8
   541  00FE02  14                 	db	20
   542  00FE03  22                 	db	34
   543  00FE04  41                 	db	65
   544  00FE05  7F                 	db	127
   545  00FE06  40                 	db	64
   546  00FE07  40                 	db	64
   547  00FE08  40                 	db	64
   548  00FE09  40                 	db	64
   549  00FE0A  7F                 	db	127
   550  00FE0B  02                 	db	2
   551  00FE0C  1C                 	db	28
   552  00FE0D  02                 	db	2
   553  00FE0E  7F                 	db	127
   554  00FE0F  7F                 	db	127
   555  00FE10  04                 	db	4
   556  00FE11  08                 	db	8
   557  00FE12  10                 	db	16
   558  00FE13  7F                 	db	127
   559  00FE14  3E                 	db	62
   560  00FE15  41                 	db	65
   561  00FE16  41                 	db	65
   562  00FE17  41                 	db	65
   563  00FE18  3E                 	db	62
   564  00FE19  7F                 	db	127
   565  00FE1A  09                 	db	9
   566  00FE1B  09                 	db	9
   567  00FE1C  09                 	db	9
   568  00FE1D  06                 	db	6
   569  00FE1E  3E                 	db	62
   570  00FE1F  41                 	db	65
   571  00FE20  51                 	db	81
   572  00FE21  21                 	db	33
   573  00FE22  5E                 	db	94
   574  00FE23  7F                 	db	127
   575  00FE24  09                 	db	9
   576  00FE25  19                 	db	25
   577  00FE26  29                 	db	41
   578  00FE27  46                 	db	70
   579  00FE28                     __end_of_font:
   580                           	opt stack 0
   581  00FE28                     _font2:
   582                           	opt stack 0
   583  00FE28  26                 	db	38
   584  00FE29  49                 	db	73
   585  00FE2A  49                 	db	73
   586  00FE2B  49                 	db	73
   587  00FE2C  32                 	db	50
   588  00FE2D  03                 	db	3
   589  00FE2E  01                 	db	1
   590  00FE2F  7F                 	db	127
   591  00FE30  01                 	db	1
   592  00FE31  03                 	db	3
   593  00FE32  3F                 	db	63
   594  00FE33  40                 	db	64
   595  00FE34  40                 	db	64
   596  00FE35  40                 	db	64
   597  00FE36  3F                 	db	63
   598  00FE37  1F                 	db	31
   599  00FE38  20                 	db	32
   600  00FE39  40                 	db	64
   601  00FE3A  20                 	db	32
   602  00FE3B  1F                 	db	31
   603  00FE3C  3F                 	db	63
   604  00FE3D  40                 	db	64
   605  00FE3E  38                 	db	56
   606  00FE3F  40                 	db	64
   607  00FE40  3F                 	db	63
   608  00FE41  63                 	db	99
   609  00FE42  14                 	db	20
   610  00FE43  08                 	db	8
   611  00FE44  14                 	db	20
   612  00FE45  63                 	db	99
   613  00FE46  03                 	db	3
   614  00FE47  04                 	db	4
   615  00FE48  78                 	db	120
   616  00FE49  04                 	db	4
   617  00FE4A  03                 	db	3
   618  00FE4B  61                 	db	97
   619  00FE4C  59                 	db	89
   620  00FE4D  49                 	db	73
   621  00FE4E  4D                 	db	77
   622  00FE4F  43                 	db	67
   623  00FE50  00                 	db	0
   624  00FE51  7F                 	db	127
   625  00FE52  41                 	db	65
   626  00FE53  41                 	db	65
   627  00FE54  41                 	db	65
   628  00FE55  02                 	db	2
   629  00FE56  04                 	db	4
   630  00FE57  08                 	db	8
   631  00FE58  10                 	db	16
   632  00FE59  20                 	db	32
   633  00FE5A  00                 	db	0
   634  00FE5B  41                 	db	65
   635  00FE5C  41                 	db	65
   636  00FE5D  41                 	db	65
   637  00FE5E  7F                 	db	127
   638  00FE5F  04                 	db	4
   639  00FE60  02                 	db	2
   640  00FE61  01                 	db	1
   641  00FE62  02                 	db	2
   642  00FE63  04                 	db	4
   643  00FE64  40                 	db	64
   644  00FE65  40                 	db	64
   645  00FE66  40                 	db	64
   646  00FE67  40                 	db	64
   647  00FE68  40                 	db	64
   648  00FE69  00                 	db	0
   649  00FE6A  03                 	db	3
   650  00FE6B  07                 	db	7
   651  00FE6C  08                 	db	8
   652  00FE6D  00                 	db	0
   653  00FE6E  20                 	db	32
   654  00FE6F  54                 	db	84
   655  00FE70  54                 	db	84
   656  00FE71  78                 	db	120
   657  00FE72  40                 	db	64
   658  00FE73  7F                 	db	127
   659  00FE74  28                 	db	40
   660  00FE75  44                 	db	68
   661  00FE76  44                 	db	68
   662  00FE77  38                 	db	56
   663  00FE78  38                 	db	56
   664  00FE79  44                 	db	68
   665  00FE7A  44                 	db	68
   666  00FE7B  44                 	db	68
   667  00FE7C  28                 	db	40
   668  00FE7D  38                 	db	56
   669  00FE7E  44                 	db	68
   670  00FE7F  44                 	db	68
   671  00FE80  28                 	db	40
   672  00FE81  7F                 	db	127
   673  00FE82  38                 	db	56
   674  00FE83  54                 	db	84
   675  00FE84  54                 	db	84
   676  00FE85  54                 	db	84
   677  00FE86  18                 	db	24
   678  00FE87  00                 	db	0
   679  00FE88  08                 	db	8
   680  00FE89  7E                 	db	126
   681  00FE8A  09                 	db	9
   682  00FE8B  02                 	db	2
   683  00FE8C  18                 	db	24
   684  00FE8D  A4                 	db	164
   685  00FE8E  A4                 	db	164
   686  00FE8F  9C                 	db	156
   687  00FE90  78                 	db	120
   688  00FE91  7F                 	db	127
   689  00FE92  08                 	db	8
   690  00FE93  04                 	db	4
   691  00FE94  04                 	db	4
   692  00FE95  78                 	db	120
   693  00FE96  00                 	db	0
   694  00FE97  44                 	db	68
   695  00FE98  7D                 	db	125
   696  00FE99  40                 	db	64
   697  00FE9A  00                 	db	0
   698  00FE9B  20                 	db	32
   699  00FE9C  40                 	db	64
   700  00FE9D  40                 	db	64
   701  00FE9E  3D                 	db	61
   702  00FE9F  00                 	db	0
   703  00FEA0  7F                 	db	127
   704  00FEA1  10                 	db	16
   705  00FEA2  28                 	db	40
   706  00FEA3  44                 	db	68
   707  00FEA4  00                 	db	0
   708  00FEA5  00                 	db	0
   709  00FEA6  41                 	db	65
   710  00FEA7  7F                 	db	127
   711  00FEA8  40                 	db	64
   712  00FEA9  00                 	db	0
   713  00FEAA  7C                 	db	124
   714  00FEAB  04                 	db	4
   715  00FEAC  78                 	db	120
   716  00FEAD  04                 	db	4
   717  00FEAE  78                 	db	120
   718  00FEAF  7C                 	db	124
   719  00FEB0  08                 	db	8
   720  00FEB1  04                 	db	4
   721  00FEB2  04                 	db	4
   722  00FEB3  78                 	db	120
   723  00FEB4  38                 	db	56
   724  00FEB5  44                 	db	68
   725  00FEB6  44                 	db	68
   726  00FEB7  44                 	db	68
   727  00FEB8  38                 	db	56
   728  00FEB9  FC                 	db	252
   729  00FEBA  18                 	db	24
   730  00FEBB  24                 	db	36
   731  00FEBC  24                 	db	36
   732  00FEBD  18                 	db	24
   733  00FEBE  18                 	db	24
   734  00FEBF  24                 	db	36
   735  00FEC0  24                 	db	36
   736  00FEC1  18                 	db	24
   737  00FEC2  FC                 	db	252
   738  00FEC3  7C                 	db	124
   739  00FEC4  08                 	db	8
   740  00FEC5  04                 	db	4
   741  00FEC6  04                 	db	4
   742  00FEC7  08                 	db	8
   743  00FEC8  48                 	db	72
   744  00FEC9  54                 	db	84
   745  00FECA  54                 	db	84
   746  00FECB  54                 	db	84
   747  00FECC  24                 	db	36
   748  00FECD  04                 	db	4
   749  00FECE  04                 	db	4
   750  00FECF  3F                 	db	63
   751  00FED0  44                 	db	68
   752  00FED1  24                 	db	36
   753  00FED2  3C                 	db	60
   754  00FED3  40                 	db	64
   755  00FED4  40                 	db	64
   756  00FED5  20                 	db	32
   757  00FED6  7C                 	db	124
   758  00FED7  1C                 	db	28
   759  00FED8  20                 	db	32
   760  00FED9  40                 	db	64
   761  00FEDA  20                 	db	32
   762  00FEDB  1C                 	db	28
   763  00FEDC  3C                 	db	60
   764  00FEDD  40                 	db	64
   765  00FEDE  30                 	db	48
   766  00FEDF  40                 	db	64
   767  00FEE0  3C                 	db	60
   768  00FEE1  44                 	db	68
   769  00FEE2  28                 	db	40
   770  00FEE3  10                 	db	16
   771  00FEE4  28                 	db	40
   772  00FEE5  44                 	db	68
   773  00FEE6  4C                 	db	76
   774  00FEE7  90                 	db	144
   775  00FEE8  90                 	db	144
   776  00FEE9  90                 	db	144
   777  00FEEA  7C                 	db	124
   778  00FEEB  44                 	db	68
   779  00FEEC  64                 	db	100
   780  00FEED  54                 	db	84
   781  00FEEE  4C                 	db	76
   782  00FEEF  44                 	db	68
   783  00FEF0  00                 	db	0
   784  00FEF1  08                 	db	8
   785  00FEF2  36                 	db	54
   786  00FEF3  41                 	db	65
   787  00FEF4  00                 	db	0
   788  00FEF5  00                 	db	0
   789  00FEF6  00                 	db	0
   790  00FEF7  77                 	db	119
   791  00FEF8  00                 	db	0
   792  00FEF9  00                 	db	0
   793  00FEFA  00                 	db	0
   794  00FEFB  41                 	db	65
   795  00FEFC  36                 	db	54
   796  00FEFD  08                 	db	8
   797  00FEFE  00                 	db	0
   798  00FEFF  02                 	db	2
   799  00FF00  01                 	db	1
   800  00FF01  02                 	db	2
   801  00FF02  04                 	db	4
   802  00FF03  02                 	db	2
   803  00FF04                     __end_of_font2:
   804                           	opt stack 0
   805  00FF04                     _dpowers:
   806                           	opt stack 0
   807  00FF04  0001               	dw	1
   808  00FF06  000A               	dw	10
   809  00FF08  0064               	dw	100
   810  00FF0A  03E8               	dw	1000
   811  00FF0C  2710               	dw	10000
   812  00FF0E                     __end_of_dpowers:
   813                           	opt stack 0
   814  00FF0E                     _hexpowers:
   815                           	opt stack 0
   816  00FF0E  0001               	dw	1
   817  00FF10  0010               	dw	16
   818  00FF12  0100               	dw	256
   819  00FF14  1000               	dw	4096
   820  00FF16                     __end_of_hexpowers:
   821                           	opt stack 0
   822  0000                     _ADCON1	set	4033
   823  0000                     _CCP1CON	set	4029
   824  0000                     _CCP2CON	set	4026
   825  0000                     _CCPR1L	set	4030
   826  0000                     _CCPR2L	set	4027
   827  0000                     _INTCON2bits	set	4081
   828  0000                     _INTCONbits	set	4082
   829  0000                     _OSCCON	set	4051
   830  0000                     _PIE1bits	set	3997
   831  0000                     _PIR1bits	set	3998
   832  0000                     _PORTA	set	3968
   833  0000                     _PORTBbits	set	3969
   834  0000                     _PORTCbits	set	3970
   835  0000                     _PORTDbits	set	3971
   836  0000                     _PORTEbits	set	3972
   837  0000                     _PR2	set	4043
   838  0000                     _RCSTA	set	4011
   839  0000                     _RCSTAbits	set	4011
   840  0000                     _SPBRG	set	4015
   841  0000                     _SPBRGH	set	4016
   842  0000                     _SSPBUF	set	4041
   843  0000                     _SSPCON1	set	4038
   844  0000                     _SSPSTAT	set	4039
   845  0000                     _SSPSTATbits	set	4039
   846  0000                     _T0CON	set	4053
   847  0000                     _T0CONbits	set	4053
   848  0000                     _T1CON	set	4045
   849  0000                     _T1CONbits	set	4045
   850  0000                     _T2CON	set	4042
   851  0000                     _T3CON	set	4017
   852  0000                     _TMR0H	set	4055
   853  0000                     _TMR0L	set	4054
   854  0000                     _TMR1H	set	4047
   855  0000                     _TMR1L	set	4046
   856  0000                     _TMR3L	set	4018
   857  0000                     _TRISA	set	3986
   858  0000                     _TRISB	set	3987
   859  0000                     _TRISC	set	3988
   860  0000                     _TRISCbits	set	3988
   861  0000                     _TRISD	set	3989
   862  0000                     _TRISDbits	set	3989
   863  0000                     _TRISE	set	3990
   864  0000                     _TXREG	set	4013
   865  0000                     _TXSTA	set	4012
   866  0000                     _TXSTAbits	set	4012
   867  0000                     _RBPU	set	32655
   868  0000                     _TRMT	set	32097
   869  00FF16                     STR_1:
   870  00FF16  25                 	db	37
   871  00FF17  30                 	db	48	;'0'
   872  00FF18  32                 	db	50	;'2'
   873  00FF19  78                 	db	120	;'x'
   874  00FF1A  3A                 	db	58	;':'
   875  00FF1B  25                 	db	37
   876  00FF1C  30                 	db	48	;'0'
   877  00FF1D  32                 	db	50	;'2'
   878  00FF1E  78                 	db	120	;'x'
   879  00FF1F  3A                 	db	58	;':'
   880  00FF20  25                 	db	37
   881  00FF21  30                 	db	48	;'0'
   882  00FF22  32                 	db	50	;'2'
   883  00FF23  78                 	db	120	;'x'
   884  00FF24  20                 	db	32
   885  00FF25  25                 	db	37
   886  00FF26  30                 	db	48	;'0'
   887  00FF27  32                 	db	50	;'2'
   888  00FF28  78                 	db	120	;'x'
   889  00FF29  2F                 	db	47
   890  00FF2A  25                 	db	37
   891  00FF2B  30                 	db	48	;'0'
   892  00FF2C  32                 	db	50	;'2'
   893  00FF2D  78                 	db	120	;'x'
   894  00FF2E  2F                 	db	47
   895  00FF2F  25                 	db	37
   896  00FF30  30                 	db	48	;'0'
   897  00FF31  32                 	db	50	;'2'
   898  00FF32  78                 	db	120	;'x'
   899  00FF33  00                 	db	0
   900  00FF34                     STR_7:
   901  00FF34  0D                 	db	13
   902  00FF35  0A                 	db	10
   903  00FF36  20                 	db	32
   904  00FF37  4E                 	db	78	;'N'
   905  00FF38  65                 	db	101	;'e'
   906  00FF39  77                 	db	119	;'w'
   907  00FF3A  20                 	db	32
   908  00FF3B  54                 	db	84	;'T'
   909  00FF3C  69                 	db	105	;'i'
   910  00FF3D  6D                 	db	109	;'m'
   911  00FF3E  65                 	db	101	;'e'
   912  00FF3F  20                 	db	32
   913  00FF40  53                 	db	83	;'S'
   914  00FF41  65                 	db	101	;'e'
   915  00FF42  74                 	db	116	;'t'
   916  00FF43  21                 	db	33
   917  00FF44  20                 	db	32
   918  00FF45  0D                 	db	13
   919  00FF46  0A                 	db	10
   920  00FF47  20                 	db	32
   921  00FF48  0D                 	db	13
   922  00FF49  0A                 	db	10
   923  00FF4A  00                 	db	0
   924  00FF4B                     STR_8:
   925  00FF4B  45                 	db	69	;'E'
   926  00FF4C  43                 	db	67	;'C'
   927  00FF4D  45                 	db	69	;'E'
   928  00FF4E  33                 	db	51	;'3'
   929  00FF4F  33                 	db	51	;'3'
   930  00FF50  30                 	db	48	;'0'
   931  00FF51  31                 	db	49	;'1'
   932  00FF52  4C                 	db	76	;'L'
   933  00FF53  20                 	db	32
   934  00FF54  53                 	db	83	;'S'
   935  00FF55  70                 	db	112	;'p'
   936  00FF56  72                 	db	114	;'r'
   937  00FF57  69                 	db	105	;'i'
   938  00FF58  6E                 	db	110	;'n'
   939  00FF59  67                 	db	103	;'g'
   940  00FF5A  20                 	db	32
   941  00FF5B  32                 	db	50	;'2'
   942  00FF5C  31                 	db	49	;'1'
   943  00FF5D  2D                 	db	45
   944  00FF5E  53                 	db	83	;'S'
   945  00FF5F  31                 	db	49	;'1'
   946  00FF60  00                 	db	0
   947  00FF61                     STR_5:
   948  00FF61  43                 	db	67	;'C'
   949  00FF62  61                 	db	97	;'a'
   950  00FF63  6E                 	db	110	;'n'
   951  00FF64  6E                 	db	110	;'n'
   952  00FF65  6F                 	db	111	;'o'
   953  00FF66  74                 	db	116	;'t'
   954  00FF67  20                 	db	32
   955  00FF68  66                 	db	102	;'f'
   956  00FF69  69                 	db	105	;'i'
   957  00FF6A  6E                 	db	110	;'n'
   958  00FF6B  64                 	db	100	;'d'
   959  00FF6C  20                 	db	32
   960  00FF6D  62                 	db	98	;'b'
   961  00FF6E  75                 	db	117	;'u'
   962  00FF6F  74                 	db	116	;'t'
   963  00FF70  74                 	db	116	;'t'
   964  00FF71  6F                 	db	111	;'o'
   965  00FF72  6E                 	db	110	;'n'
   966  00FF73  20                 	db	32
   967  00FF74  0D                 	db	13
   968  00FF75  0A                 	db	10
   969  00FF76  00                 	db	0
   970  00FF77                     STR_2:
   971  00FF77  20                 	db	32
   972  00FF78  54                 	db	84	;'T'
   973  00FF79  65                 	db	101	;'e'
   974  00FF7A  6D                 	db	109	;'m'
   975  00FF7B  70                 	db	112	;'p'
   976  00FF7C  20                 	db	32
   977  00FF7D  3D                 	db	61	;'='
   978  00FF7E  20                 	db	32
   979  00FF7F  25                 	db	37
   980  00FF80  64                 	db	100	;'d'
   981  00FF81  20                 	db	32
   982  00FF82  43                 	db	67	;'C'
   983  00FF83  20                 	db	32
   984  00FF84  3D                 	db	61	;'='
   985  00FF85  20                 	db	32
   986  00FF86  25                 	db	37
   987  00FF87  64                 	db	100	;'d'
   988  00FF88  20                 	db	32
   989  00FF89  46                 	db	70	;'F'
   990  00FF8A  20                 	db	32
   991  00FF8B  00                 	db	0
   992  00FF8C                     STR_3:
   993  00FF8C  52                 	db	82	;'R'
   994  00FF8D  50                 	db	80	;'P'
   995  00FF8E  4D                 	db	77	;'M'
   996  00FF8F  20                 	db	32
   997  00FF90  3D                 	db	61	;'='
   998  00FF91  20                 	db	32
   999  00FF92  25                 	db	37
  1000  00FF93  64                 	db	100	;'d'
  1001  00FF94  20                 	db	32
  1002  00FF95  20                 	db	32
  1003  00FF96  64                 	db	100	;'d'
  1004  00FF97  63                 	db	99	;'c'
  1005  00FF98  20                 	db	32
  1006  00FF99  3D                 	db	61	;'='
  1007  00FF9A  20                 	db	32
  1008  00FF9B  25                 	db	37
  1009  00FF9C  64                 	db	100	;'d'
  1010  00FF9D  0D                 	db	13
  1011  00FF9E  0A                 	db	10
  1012  00FF9F  00                 	db	0
  1013  00FFA0                     STR_19:
  1014  00FFA0  30                 	db	48	;'0'
  1015  00FFA1  31                 	db	49	;'1'
  1016  00FFA2  32                 	db	50	;'2'
  1017  00FFA3  33                 	db	51	;'3'
  1018  00FFA4  34                 	db	52	;'4'
  1019  00FFA5  35                 	db	53	;'5'
  1020  00FFA6  36                 	db	54	;'6'
  1021  00FFA7  37                 	db	55	;'7'
  1022  00FFA8  38                 	db	56	;'8'
  1023  00FFA9  39                 	db	57	;'9'
  1024  00FFAA  61                 	db	97	;'a'
  1025  00FFAB  62                 	db	98	;'b'
  1026  00FFAC  63                 	db	99	;'c'
  1027  00FFAD  64                 	db	100	;'d'
  1028  00FFAE  65                 	db	101	;'e'
  1029  00FFAF  66                 	db	102	;'f'
  1030  00FFB0  00                 	db	0
  1031  00FFB1                     STR_4:
  1032  00FFB1  4E                 	db	78	;'N'
  1033  00FFB2  45                 	db	69	;'E'
  1034  00FFB3  43                 	db	67	;'C'
  1035  00FFB4  5F                 	db	95	;'_'
  1036  00FFB5  43                 	db	67	;'C'
  1037  00FFB6  6F                 	db	111	;'o'
  1038  00FFB7  64                 	db	100	;'d'
  1039  00FFB8  65                 	db	101	;'e'
  1040  00FFB9  20                 	db	32
  1041  00FFBA  3D                 	db	61	;'='
  1042  00FFBB  20                 	db	32
  1043  00FFBC  25                 	db	37
  1044  00FFBD  78                 	db	120	;'x'
  1045  00FFBE  0D                 	db	13
  1046  00FFBF  0A                 	db	10
  1047  00FFC0  00                 	db	0
  1048  00FFC1                     STR_6:
  1049  00FFC1  62                 	db	98	;'b'
  1050  00FFC2  75                 	db	117	;'u'
  1051  00FFC3  74                 	db	116	;'t'
  1052  00FFC4  74                 	db	116	;'t'
  1053  00FFC5  6F                 	db	111	;'o'
  1054  00FFC6  6E                 	db	110	;'n'
  1055  00FFC7  20                 	db	32
  1056  00FFC8  3D                 	db	61	;'='
  1057  00FFC9  20                 	db	32
  1058  00FFCA  25                 	db	37
  1059  00FFCB  64                 	db	100	;'d'
  1060  00FFCC  20                 	db	32
  1061  00FFCD  0D                 	db	13
  1062  00FFCE  0A                 	db	10
  1063  00FFCF  00                 	db	0
  1064  00FFD0                     STR_9:
  1065  00FFD0  54                 	db	84	;'T'
  1066  00FFD1  65                 	db	101	;'e'
  1067  00FFD2  6D                 	db	109	;'m'
  1068  00FFD3  70                 	db	112	;'p'
  1069  00FFD4  65                 	db	101	;'e'
  1070  00FFD5  72                 	db	114	;'r'
  1071  00FFD6  61                 	db	97	;'a'
  1072  00FFD7  74                 	db	116	;'t'
  1073  00FFD8  75                 	db	117	;'u'
  1074  00FFD9  72                 	db	114	;'r'
  1075  00FFDA  65                 	db	101	;'e'
  1076  00FFDB  3A                 	db	58	;':'
  1077  00FFDC  00                 	db	0
  1078  00FFDD                     STR_14:
  1079  00FFDD  20                 	db	32
  1080  00FFDE  20                 	db	32
  1081  00FFDF  46                 	db	70	;'F'
  1082  00FFE0  41                 	db	65	;'A'
  1083  00FFE1  4E                 	db	78	;'N'
  1084  00FFE2  00                 	db	0
  1085  00FFE3                     STR_12:
  1086  00FFE3  54                 	db	84	;'T'
  1087  00FFE4  69                 	db	105	;'i'
  1088  00FFE5  6D                 	db	109	;'m'
  1089  00FFE6  65                 	db	101	;'e'
  1090  00FFE7  00                 	db	0
  1091  00FFE8                     STR_13:
  1092  00FFE8  44                 	db	68	;'D'
  1093  00FFE9  61                 	db	97	;'a'
  1094  00FFEA  74                 	db	116	;'t'
  1095  00FFEB  65                 	db	101	;'e'
  1096  00FFEC  00                 	db	0
  1097  00FFED                     STR_17:
  1098  00FFED  4F                 	db	79	;'O'
  1099  00FFEE  4E                 	db	78	;'N'
  1100  00FFEF  20                 	db	32
  1101  00FFF0  00                 	db	0
  1102  00FFF1                     STR_18:
  1103  00FFF1  4F                 	db	79	;'O'
  1104  00FFF2  46                 	db	70	;'F'
  1105  00FFF3  46                 	db	70	;'F'
  1106  00FFF4  00                 	db	0
  1107  00FFF5                     STR_16:
  1108  00FFF5  52                 	db	82	;'R'
  1109  00FFF6  50                 	db	80	;'P'
  1110  00FFF7  4D                 	db	77	;'M'
  1111  00FFF8  00                 	db	0
  1112  00FFF9                     STR_10:
  1113  00FFF9  43                 	db	67	;'C'
  1114  00FFFA  2F                 	db	47
  1115  00FFFB  00                 	db	0
  1116  00FFFC                     STR_15:
  1117  00FFFC  44                 	db	68	;'D'
  1118  00FFFD  43                 	db	67	;'C'
  1119  00FFFE  00                 	db	0
  1120  0000                     
  1121                           ; #config settings
  1122  00FFFF  00                 	db	0	; dummy byte at the end
  1123  0000                     
  1124                           	psect	cinit
  1125  001972                     __pcinit:
  1126                           	opt stack 0
  1127  001972                     start_initialization:
  1128                           	opt stack 0
  1129  001972                     __initialization:
  1130                           	opt stack 0
  1131                           
  1132                           ; Clear objects allocated to BANK0 (8 bytes)
  1133  001972  EE00  F0F3         	lfsr	0,__pbssBANK0
  1134  001976  0E08               	movlw	8
  1135  001978                     clear_0:
  1136  001978  6AEE               	clrf	postinc0,c
  1137  00197A  06E8               	decf	wreg,f,c
  1138  00197C  E1FD               	bnz	clear_0
  1139                           
  1140                           ; Clear objects allocated to COMRAM (37 bytes)
  1141  00197E  EE00  F042         	lfsr	0,__pbssCOMRAM
  1142  001982  0E25               	movlw	37
  1143  001984                     clear_1:
  1144  001984  6AEE               	clrf	postinc0,c
  1145  001986  06E8               	decf	wreg,f,c
  1146  001988  E1FD               	bnz	clear_1
  1147                           
  1148                           ; Initialize objects allocated to BANK1 (33 bytes)
  1149                           ; load TBLPTR registers with __pidataBANK1
  1150  00198A  0E70               	movlw	low __pidataBANK1
  1151  00198C  6EF6               	movwf	tblptrl,c
  1152  00198E  0E22               	movlw	high __pidataBANK1
  1153  001990  6EF7               	movwf	tblptrh,c
  1154  001992  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1155  001994  6EF8               	movwf	tblptru,c
  1156  001996  EE01  F000         	lfsr	0,__pdataBANK1
  1157  00199A  EE10 F021          	lfsr	1,33
  1158  00199E                     copy_data0:
  1159  00199E  0009               	tblrd		*+
  1160  0019A0  CFF5 FFEE          	movff	tablat,postinc0
  1161  0019A4  50E5               	movf	postdec1,w,c
  1162  0019A6  50E1               	movf	fsr1l,w,c
  1163  0019A8  E1FA               	bnz	copy_data0
  1164                           
  1165                           ; Initialize objects allocated to BANK0 (115 bytes)
  1166                           ; load TBLPTR registers with __pidataBANK0
  1167  0019AA  0EF2               	movlw	low __pidataBANK0
  1168  0019AC  6EF6               	movwf	tblptrl,c
  1169  0019AE  0E1A               	movlw	high __pidataBANK0
  1170  0019B0  6EF7               	movwf	tblptrh,c
  1171  0019B2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1172  0019B4  6EF8               	movwf	tblptru,c
  1173  0019B6  EE00  F080         	lfsr	0,__pdataBANK0
  1174  0019BA  EE10 F073          	lfsr	1,115
  1175  0019BE                     copy_data1:
  1176  0019BE  0009               	tblrd		*+
  1177  0019C0  CFF5 FFEE          	movff	tablat,postinc0
  1178  0019C4  50E5               	movf	postdec1,w,c
  1179  0019C6  50E1               	movf	fsr1l,w,c
  1180  0019C8  E1FA               	bnz	copy_data1
  1181                           
  1182                           ; Initialize objects allocated to COMRAM (9 bytes)
  1183                           ; load TBLPTR registers with __pidataCOMRAM
  1184  0019CA  0E44               	movlw	low __pidataCOMRAM
  1185  0019CC  6EF6               	movwf	tblptrl,c
  1186  0019CE  0E24               	movlw	high __pidataCOMRAM
  1187  0019D0  6EF7               	movwf	tblptrh,c
  1188  0019D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1189  0019D4  6EF8               	movwf	tblptru,c
  1190  0019D6  EE00  F067         	lfsr	0,__pdataCOMRAM
  1191  0019DA  EE10 F009          	lfsr	1,9
  1192  0019DE                     copy_data2:
  1193  0019DE  0009               	tblrd		*+
  1194  0019E0  CFF5 FFEE          	movff	tablat,postinc0
  1195  0019E4  50E5               	movf	postdec1,w,c
  1196  0019E6  50E1               	movf	fsr1l,w,c
  1197  0019E8  E1FA               	bnz	copy_data2
  1198  0019EA                     end_of_initialization:
  1199                           	opt stack 0
  1200  0019EA                     __end_of__initialization:
  1201                           	opt stack 0
  1202  0019EA  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1203  0019EC  6EF8               	movwf	tblptru,c
  1204  0019EE  0100               	movlb	0
  1205  0019F0  EFD0  F004         	goto	_main	;jump to C main() function
  1206                           tblptru	equ	0xFF8
  1207                           tblptrh	equ	0xFF7
  1208                           tblptrl	equ	0xFF6
  1209                           tablat	equ	0xFF5
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           postdec1	equ	0xFE5
  1213                           fsr1l	equ	0xFE1
  1214                           
  1215                           	psect	bssCOMRAM
  1216  000042                     __pbssCOMRAM:
  1217                           	opt stack 0
  1218  000042                     _DS1621_tempC:
  1219                           	opt stack 0
  1220  000042                     	ds	2
  1221  000044                     _DS1621_tempF:
  1222                           	opt stack 0
  1223  000044                     	ds	2
  1224  000046                     _Time_Elapsed:
  1225                           	opt stack 0
  1226  000046                     	ds	2
  1227  000048                     _nec_ok:
  1228                           	opt stack 0
  1229  000048                     	ds	2
  1230  00004A                     _rpm:
  1231                           	opt stack 0
  1232  00004A                     	ds	2
  1233  00004C                     _rps:
  1234                           	opt stack 0
  1235  00004C                     	ds	2
  1236  00004E                     _txt:
  1237                           	opt stack 0
  1238  00004E                     	ds	2
  1239  000050                     _FAN:
  1240                           	opt stack 0
  1241  000050                     	ds	1
  1242  000051                     _Nec_code1:
  1243                           	opt stack 0
  1244  000051                     	ds	1
  1245  000052                     _Nec_state:
  1246                           	opt stack 0
  1247  000052                     	ds	1
  1248  000053                     __tft_type:
  1249                           	opt stack 0
  1250  000053                     	ds	1
  1251  000054                     _alarm_date:
  1252                           	opt stack 0
  1253  000054                     	ds	1
  1254  000055                     _alarm_hour:
  1255                           	opt stack 0
  1256  000055                     	ds	1
  1257  000056                     _alarm_minute:
  1258                           	opt stack 0
  1259  000056                     	ds	1
  1260  000057                     _alarm_second:
  1261                           	opt stack 0
  1262  000057                     	ds	1
  1263  000058                     _bit_count:
  1264                           	opt stack 0
  1265  000058                     	ds	1
  1266  000059                     _colstart:
  1267                           	opt stack 0
  1268  000059                     	ds	1
  1269  00005A                     _duty_cycle:
  1270                           	opt stack 0
  1271  00005A                     	ds	1
  1272  00005B                     _found:
  1273                           	opt stack 0
  1274  00005B                     	ds	1
  1275  00005C                     _rowstart:
  1276                           	opt stack 0
  1277  00005C                     	ds	1
  1278  00005D                     _second:
  1279                           	opt stack 0
  1280  00005D                     	ds	1
  1281  00005E                     _setup_alarm_hour:
  1282                           	opt stack 0
  1283  00005E                     	ds	1
  1284  00005F                     _setup_alarm_minute:
  1285                           	opt stack 0
  1286  00005F                     	ds	1
  1287  000060                     _setup_alarm_second:
  1288                           	opt stack 0
  1289  000060                     	ds	1
  1290  000061                     _setup_day:
  1291                           	opt stack 0
  1292  000061                     	ds	1
  1293  000062                     _setup_hour:
  1294                           	opt stack 0
  1295  000062                     	ds	1
  1296  000063                     _setup_minute:
  1297                           	opt stack 0
  1298  000063                     	ds	1
  1299  000064                     _setup_month:
  1300                           	opt stack 0
  1301  000064                     	ds	1
  1302  000065                     _setup_second:
  1303                           	opt stack 0
  1304  000065                     	ds	1
  1305  000066                     _setup_year:
  1306                           	opt stack 0
  1307  000066                     	ds	1
  1308                           tblptru	equ	0xFF8
  1309                           tblptrh	equ	0xFF7
  1310                           tblptrl	equ	0xFF6
  1311                           tablat	equ	0xFF5
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           postdec1	equ	0xFE5
  1315                           fsr1l	equ	0xFE1
  1316                           
  1317                           	psect	dataCOMRAM
  1318  000067                     __pdataCOMRAM:
  1319                           	opt stack 0
  1320  000067                     _day:
  1321                           	opt stack 0
  1322  000067                     	ds	1
  1323  000068                     _dow:
  1324                           	opt stack 0
  1325  000068                     	ds	1
  1326  000069                     _hour:
  1327                           	opt stack 0
  1328  000069                     	ds	1
  1329  00006A                     _minute:
  1330                           	opt stack 0
  1331  00006A                     	ds	1
  1332  00006B                     _month:
  1333                           	opt stack 0
  1334  00006B                     	ds	1
  1335  00006C                     _setup_fan_temp:
  1336                           	opt stack 0
  1337  00006C                     	ds	1
  1338  00006D                     _tempSecond:
  1339                           	opt stack 0
  1340  00006D                     	ds	1
  1341  00006E                     _wrap:
  1342                           	opt stack 0
  1343  00006E                     	ds	1
  1344  00006F                     _year:
  1345                           	opt stack 0
  1346  00006F                     	ds	1
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           
  1356                           	psect	bssBANK0
  1357  0000F3                     __pbssBANK0:
  1358                           	opt stack 0
  1359  0000F3                     _Nec_code:
  1360                           	opt stack 0
  1361  0000F3                     	ds	4
  1362  0000F7                     _ALARMEN:
  1363                           	opt stack 0
  1364  0000F7                     	ds	2
  1365  0000F9                     _nbr:
  1366                           	opt stack 0
  1367  0000F9                     	ds	2
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1l	equ	0xFE1
  1376                           
  1377                           	psect	dataBANK0
  1378  000080                     __pdataBANK0:
  1379                           	opt stack 0
  1380  000080                     _array1:
  1381                           	opt stack 0
  1382  000080                     	ds	21
  1383  000095                     _alarm_time:
  1384                           	opt stack 0
  1385  000095                     	ds	9
  1386  00009E                     _setup_alarm_time:
  1387                           	opt stack 0
  1388  00009E                     	ds	9
  1389  0000A7                     _setup_date:
  1390                           	opt stack 0
  1391  0000A7                     	ds	9
  1392  0000B0                     _setup_time:
  1393                           	opt stack 0
  1394  0000B0                     	ds	9
  1395  0000B9                     _colors:
  1396                           	opt stack 0
  1397  0000B9                     	ds	8
  1398  0000C1                     _setup_fan_text:
  1399                           	opt stack 0
  1400  0000C1                     	ds	5
  1401  0000C6                     _Alarm_SW_Txt:
  1402                           	opt stack 0
  1403  0000C6                     	ds	4
  1404  0000CA                     _RTC_ALARM_Txt:
  1405                           	opt stack 0
  1406  0000CA                     	ds	2
  1407  0000CC                     _date:
  1408                           	opt stack 0
  1409  0000CC                     	ds	9
  1410  0000D5                     _time:
  1411                           	opt stack 0
  1412  0000D5                     	ds	9
  1413  0000DE                     _RPM_Txt:
  1414                           	opt stack 0
  1415  0000DE                     	ds	5
  1416  0000E3                     _DC_Txt:
  1417                           	opt stack 0
  1418  0000E3                     	ds	4
  1419  0000E7                     _Fan_SW_Txt:
  1420                           	opt stack 0
  1421  0000E7                     	ds	4
  1422  0000EB                     _tempC:
  1423                           	opt stack 0
  1424  0000EB                     	ds	4
  1425  0000EF                     _tempF:
  1426                           	opt stack 0
  1427  0000EF                     	ds	4
  1428                           tblptru	equ	0xFF8
  1429                           tblptrh	equ	0xFF7
  1430                           tblptrl	equ	0xFF6
  1431                           tablat	equ	0xFF5
  1432                           postinc0	equ	0xFEE
  1433                           wreg	equ	0xFE8
  1434                           postdec1	equ	0xFE5
  1435                           fsr1l	equ	0xFE1
  1436                           
  1437                           	psect	dataBANK1
  1438  000100                     __pdataBANK1:
  1439                           	opt stack 0
  1440  000100                     _buffer:
  1441                           	opt stack 0
  1442  000100                     	ds	33
  1443                           tblptru	equ	0xFF8
  1444                           tblptrh	equ	0xFF7
  1445                           tblptrl	equ	0xFF6
  1446                           tablat	equ	0xFF5
  1447                           postinc0	equ	0xFEE
  1448                           wreg	equ	0xFE8
  1449                           postdec1	equ	0xFE5
  1450                           fsr1l	equ	0xFE1
  1451                           
  1452                           	psect	cstackBANK1
  1453  000121                     __pcstackBANK1:
  1454                           	opt stack 0
  1455  000121                     drawtext@x:
  1456                           	opt stack 0
  1457  000121                     do_update_pwm@dc_f:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0x0
  1461  000121                     	ds	1
  1462  000122                     drawtext@textsize:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x1
  1466  000122                     	ds	2
  1467  000124                     do_update_pwm@duty_cycle:
  1468                           	opt stack 0
  1469  000124                     drawtext@i:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x3
  1473  000124                     	ds	1
  1474  000125                     do_update_pwm@dc_I:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x4
  1478  000125                     	ds	1
  1479  000126                     drawtext@cursor_y:
  1480                           	opt stack 0
  1481                           
  1482                           ; 1 bytes @ 0x5
  1483  000126                     	ds	1
  1484  000127                     drawtext@cursor_x:
  1485                           	opt stack 0
  1486                           
  1487                           ; 1 bytes @ 0x6
  1488  000127                     	ds	1
  1489  000128                     Update_Screen@neg_tempF:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x7
  1493  000128                     	ds	2
  1494  00012A                     main@j:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x9
  1498  00012A                     	ds	2
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           postinc0	equ	0xFEE
  1504                           wreg	equ	0xFE8
  1505                           postdec1	equ	0xFE5
  1506                           fsr1l	equ	0xFE1
  1507                           
  1508                           	psect	cstackBANK0
  1509  0000FB                     __pcstackBANK0:
  1510                           	opt stack 0
  1511  0000FB                     ??_drawtext:
  1512                           
  1513                           ; 0 bytes @ 0x0
  1514  0000FB                     	ds	2
  1515  0000FD                     ??_Update_Screen:
  1516                           
  1517                           ; 0 bytes @ 0x2
  1518  0000FD                     	ds	2
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1l	equ	0xFE1
  1527                           
  1528                           	psect	cstackCOMRAM
  1529  000001                     __pcstackCOMRAM:
  1530                           	opt stack 0
  1531  000001                     ??_INT0_isr:
  1532  000001                     
  1533                           ; 2 bytes @ 0x0
  1534  000001                     	ds	2
  1535  000003                     ??_chkisr:
  1536                           
  1537                           ; 0 bytes @ 0x2
  1538  000003                     	ds	14
  1539  000011                     ??_isdigit:
  1540  000011                     ?_strlen:
  1541                           	opt stack 0
  1542  000011                     ?___wmul:
  1543                           	opt stack 0
  1544  000011                     ?___lwdiv:
  1545                           	opt stack 0
  1546  000011                     ?___ftpack:
  1547                           	opt stack 0
  1548  000011                     ?___fttol:
  1549                           	opt stack 0
  1550  000011                     I2C_Read@ack:
  1551                           	opt stack 0
  1552  000011                     I2C_Write@outByte:
  1553                           	opt stack 0
  1554  000011                     putch@c:
  1555                           	opt stack 0
  1556  000011                     spiwrite@x:
  1557                           	opt stack 0
  1558  000011                     Set_RPM_RGB@rpm:
  1559                           	opt stack 0
  1560  000011                     Wait_Half_Second@i:
  1561                           	opt stack 0
  1562  000011                     OpenUSART@spbrg:
  1563                           	opt stack 0
  1564  000011                     ___wmul@multiplier:
  1565                           	opt stack 0
  1566  000011                     ___lwdiv@dividend:
  1567                           	opt stack 0
  1568  000011                     strcpy@to:
  1569                           	opt stack 0
  1570  000011                     strlen@s:
  1571                           	opt stack 0
  1572  000011                     ___ftpack@arg:
  1573                           	opt stack 0
  1574  000011                     ___fttol@f1:
  1575                           	opt stack 0
  1576  000011                     I2C_Init@c:
  1577                           	opt stack 0
  1578                           
  1579                           ; 4 bytes @ 0x10
  1580  000011                     	ds	1
  1581  000012                     I2C_Read@n:
  1582                           	opt stack 0
  1583  000012                     I2C_Write@n:
  1584                           	opt stack 0
  1585  000012                     spiwrite@spidata:
  1586                           	opt stack 0
  1587  000012                     _isdigit$2492:
  1588                           	opt stack 0
  1589                           
  1590                           ; 1 bytes @ 0x11
  1591  000012                     	ds	1
  1592  000013                     ??_strlen:
  1593  000013                     I2C_Read@inByte:
  1594                           	opt stack 0
  1595  000013                     I2C_Write_Cmd_Only@Cmd:
  1596                           	opt stack 0
  1597  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1598                           	opt stack 0
  1599  000013                     DS3231_Setup_Time@Device:
  1600                           	opt stack 0
  1601  000013                     write_command@cmd_:
  1602                           	opt stack 0
  1603  000013                     write_data@data_:
  1604                           	opt stack 0
  1605  000013                     OpenUSART@config:
  1606                           	opt stack 0
  1607  000013                     isdigit@c:
  1608                           	opt stack 0
  1609  000013                     ___wmul@multiplicand:
  1610                           	opt stack 0
  1611  000013                     ___lwdiv@divisor:
  1612                           	opt stack 0
  1613  000013                     strcpy@from:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x12
  1617  000013                     	ds	1
  1618  000014                     ?_DS1621_Read_Temp:
  1619                           	opt stack 0
  1620  000014                     I2C_Write_Cmd_Only@Device:
  1621                           	opt stack 0
  1622  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1623                           	opt stack 0
  1624  000014                     DS3231_Read_Time@Address:
  1625                           	opt stack 0
  1626  000014                     DS3231_Setup_Time@Address:
  1627                           	opt stack 0
  1628  000014                     setAddrWindow@y0:
  1629                           	opt stack 0
  1630  000014                     ___ftpack@exp:
  1631                           	opt stack 0
  1632                           
  1633                           ; 1 bytes @ 0x13
  1634  000014                     	ds	1
  1635  000015                     ??___fttol:
  1636  000015                     I2C_Write_Cmd_Write_Data@Device:
  1637                           	opt stack 0
  1638  000015                     DS3231_Read_Time@Device:
  1639                           	opt stack 0
  1640  000015                     setAddrWindow@x1:
  1641                           	opt stack 0
  1642  000015                     ___ftpack@sign:
  1643                           	opt stack 0
  1644  000015                     ___lwdiv@counter:
  1645                           	opt stack 0
  1646  000015                     ___wmul@product:
  1647                           	opt stack 0
  1648  000015                     strcpy@cp:
  1649                           	opt stack 0
  1650  000015                     strlen@cp:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x14
  1654  000015                     	ds	1
  1655  000016                     ??___ftpack:
  1656  000016                     DS1621_Init@Device:
  1657                           	opt stack 0
  1658  000016                     DS1621_Read_Temp@Cmd:
  1659                           	opt stack 0
  1660  000016                     setAddrWindow@y1:
  1661                           	opt stack 0
  1662  000016                     ___lwdiv@quotient:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x15
  1666  000016                     	ds	1
  1667  000017                     ?___awdiv:
  1668                           	opt stack 0
  1669  000017                     DS1621_Read_Temp@Data_Ret:
  1670                           	opt stack 0
  1671  000017                     setAddrWindow@x0:
  1672                           	opt stack 0
  1673  000017                     delay_ms@ms:
  1674                           	opt stack 0
  1675  000017                     ___awdiv@dividend:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x16
  1679  000017                     	ds	1
  1680  000018                     ?___lwmod:
  1681                           	opt stack 0
  1682  000018                     DS1621_Read_Temp@Device:
  1683                           	opt stack 0
  1684  000018                     drawPixel@y:
  1685                           	opt stack 0
  1686  000018                     drawFastVLine@y:
  1687                           	opt stack 0
  1688  000018                     fillRectangle@y:
  1689                           	opt stack 0
  1690  000018                     ___lwmod@dividend:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x17
  1694  000018                     	ds	1
  1695  000019                     ??_delay_ms:
  1696  000019                     ?___lbtoft:
  1697                           	opt stack 0
  1698  000019                     drawFastVLine@h:
  1699                           	opt stack 0
  1700  000019                     fillRectangle@w:
  1701                           	opt stack 0
  1702  000019                     drawPixel@color:
  1703                           	opt stack 0
  1704  000019                     ___awdiv@divisor:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x18
  1708  000019                     	ds	1
  1709  00001A                     fillRectangle@h:
  1710                           	opt stack 0
  1711  00001A                     ___fttol@sign1:
  1712                           	opt stack 0
  1713  00001A                     drawFastVLine@color:
  1714                           	opt stack 0
  1715  00001A                     ___lwmod@divisor:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x19
  1719  00001A                     	ds	1
  1720  00001B                     drawPixel@x:
  1721                           	opt stack 0
  1722  00001B                     ___awdiv@counter:
  1723                           	opt stack 0
  1724  00001B                     delay_ms@count:
  1725                           	opt stack 0
  1726  00001B                     fillRectangle@color:
  1727                           	opt stack 0
  1728  00001B                     ___fttol@lval:
  1729                           	opt stack 0
  1730                           
  1731                           ; 4 bytes @ 0x1A
  1732  00001B                     	ds	1
  1733  00001C                     ??_drawFastVLine:
  1734  00001C                     ___awdiv@sign:
  1735                           	opt stack 0
  1736  00001C                     ___lbtoft@c:
  1737                           	opt stack 0
  1738  00001C                     ___lwmod@counter:
  1739                           	opt stack 0
  1740  00001C                     drawCircle@x0:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x1B
  1744  00001C                     	ds	1
  1745  00001D                     ??_fillRectangle:
  1746  00001D                     ?_printf:
  1747                           	opt stack 0
  1748  00001D                     ?___ftmul:
  1749                           	opt stack 0
  1750  00001D                     printf@f:
  1751                           	opt stack 0
  1752  00001D                     ___awdiv@quotient:
  1753                           	opt stack 0
  1754  00001D                     ___ftmul@f1:
  1755                           	opt stack 0
  1756                           
  1757                           ; 3 bytes @ 0x1C
  1758  00001D                     	ds	1
  1759  00001E                     drawCircle@y0:
  1760                           	opt stack 0
  1761                           
  1762                           ; 2 bytes @ 0x1D
  1763  00001E                     	ds	1
  1764  00001F                     ?_get_RPM:
  1765                           	opt stack 0
  1766  00001F                     ?___awmod:
  1767                           	opt stack 0
  1768  00001F                     ___fttol@exp1:
  1769                           	opt stack 0
  1770  00001F                     Set_DC_RGB@duty_cycle:
  1771                           	opt stack 0
  1772  00001F                     ___awmod@dividend:
  1773                           	opt stack 0
  1774                           
  1775                           ; 2 bytes @ 0x1E
  1776  00001F                     	ds	1
  1777  000020                     drawFastVLine@hi:
  1778                           	opt stack 0
  1779  000020                     drawCircle@r:
  1780                           	opt stack 0
  1781  000020                     ___ftmul@f2:
  1782                           	opt stack 0
  1783                           
  1784                           ; 3 bytes @ 0x1F
  1785  000020                     	ds	1
  1786  000021                     Set_DC_RGB@index:
  1787                           	opt stack 0
  1788  000021                     drawFastVLine@lo:
  1789                           	opt stack 0
  1790  000021                     fillRectangle@hi:
  1791                           	opt stack 0
  1792  000021                     get_RPM@RPS:
  1793                           	opt stack 0
  1794  000021                     ___awmod@divisor:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x20
  1798  000021                     	ds	1
  1799  000022                     drawFastVLine@x:
  1800                           	opt stack 0
  1801  000022                     fillRectangle@lo:
  1802                           	opt stack 0
  1803  000022                     _Set_DC_RGB$405:
  1804                           	opt stack 0
  1805  000022                     drawCircle@color:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x21
  1809  000022                     	ds	1
  1810  000023                     ??___ftmul:
  1811  000023                     fillRect@y:
  1812                           	opt stack 0
  1813  000023                     fillRectangle@x:
  1814                           	opt stack 0
  1815  000023                     ___awmod@counter:
  1816                           	opt stack 0
  1817                           
  1818                           ; 1 bytes @ 0x22
  1819  000023                     	ds	1
  1820  000024                     ??_drawCircle:
  1821  000024                     fillRect@w:
  1822                           	opt stack 0
  1823  000024                     ___awmod@sign:
  1824                           	opt stack 0
  1825  000024                     fillScreen@color:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x23
  1829  000024                     	ds	1
  1830  000025                     fillRect@h:
  1831                           	opt stack 0
  1832                           
  1833                           ; 1 bytes @ 0x24
  1834  000025                     	ds	1
  1835  000026                     ___ftmul@exp:
  1836                           	opt stack 0
  1837  000026                     fillRect@color:
  1838                           	opt stack 0
  1839  000026                     drawCircle@ddF_x:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x25
  1843  000026                     	ds	1
  1844  000027                     ___ftmul@f3_as_product:
  1845                           	opt stack 0
  1846                           
  1847                           ; 3 bytes @ 0x26
  1848  000027                     	ds	1
  1849  000028                     ??_fillRect:
  1850  000028                     drawCircle@ddF_y:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x27
  1854  000028                     	ds	2
  1855  00002A                     ___ftmul@cntr:
  1856                           	opt stack 0
  1857  00002A                     drawCircle@f:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x29
  1861  00002A                     	ds	1
  1862  00002B                     ??_printf:
  1863  00002B                     fillRect@x:
  1864                           	opt stack 0
  1865  00002B                     ___ftmul@sign:
  1866                           	opt stack 0
  1867                           
  1868                           ; 1 bytes @ 0x2A
  1869  00002B                     	ds	1
  1870  00002C                     ?___ftdiv:
  1871                           	opt stack 0
  1872  00002C                     fillRect@i:
  1873                           	opt stack 0
  1874  00002C                     drawCircle@x:
  1875                           	opt stack 0
  1876  00002C                     ___ftdiv@f1:
  1877                           	opt stack 0
  1878                           
  1879                           ; 3 bytes @ 0x2B
  1880  00002C                     	ds	2
  1881  00002E                     drawChar@y:
  1882                           	opt stack 0
  1883  00002E                     drawCircle@y:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x2D
  1887  00002E                     	ds	1
  1888  00002F                     drawChar@c:
  1889                           	opt stack 0
  1890  00002F                     printf@idx:
  1891                           	opt stack 0
  1892  00002F                     ___ftdiv@f2:
  1893                           	opt stack 0
  1894                           
  1895                           ; 3 bytes @ 0x2E
  1896  00002F                     	ds	1
  1897  000030                     drawChar@color:
  1898                           	opt stack 0
  1899  000030                     printf@ap:
  1900                           	opt stack 0
  1901                           
  1902                           ; 2 bytes @ 0x2F
  1903  000030                     	ds	2
  1904  000032                     ??___ftdiv:
  1905  000032                     printf@prec:
  1906                           	opt stack 0
  1907  000032                     drawChar@bg:
  1908                           	opt stack 0
  1909                           
  1910                           ; 2 bytes @ 0x31
  1911  000032                     	ds	1
  1912  000033                     printf@val:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x32
  1916  000033                     	ds	1
  1917  000034                     drawChar@size:
  1918                           	opt stack 0
  1919                           
  1920                           ; 1 bytes @ 0x33
  1921  000034                     	ds	1
  1922  000035                     drawChar@line:
  1923                           	opt stack 0
  1924  000035                     printf@flag:
  1925                           	opt stack 0
  1926  000035                     ___ftdiv@cntr:
  1927                           	opt stack 0
  1928                           
  1929                           ; 1 bytes @ 0x34
  1930  000035                     	ds	1
  1931  000036                     drawChar@x:
  1932                           	opt stack 0
  1933  000036                     printf@width:
  1934                           	opt stack 0
  1935  000036                     ___ftdiv@f3:
  1936                           	opt stack 0
  1937                           
  1938                           ; 3 bytes @ 0x35
  1939  000036                     	ds	1
  1940  000037                     drawChar@j:
  1941                           	opt stack 0
  1942                           
  1943                           ; 1 bytes @ 0x36
  1944  000037                     	ds	1
  1945  000038                     drawChar@i:
  1946                           	opt stack 0
  1947  000038                     printf@c:
  1948                           	opt stack 0
  1949                           
  1950                           ; 1 bytes @ 0x37
  1951  000038                     	ds	1
  1952  000039                     drawtext@y:
  1953                           	opt stack 0
  1954  000039                     ___ftdiv@exp:
  1955                           	opt stack 0
  1956                           
  1957                           ; 1 bytes @ 0x38
  1958  000039                     	ds	1
  1959  00003A                     ___ftdiv@sign:
  1960                           	opt stack 0
  1961  00003A                     drawtext@_text:
  1962                           	opt stack 0
  1963                           
  1964                           ; 2 bytes @ 0x39
  1965  00003A                     	ds	1
  1966  00003B                     ??_do_update_pwm:
  1967                           
  1968                           ; 0 bytes @ 0x3A
  1969  00003B                     	ds	1
  1970  00003C                     drawtext@color:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x3B
  1974  00003C                     	ds	2
  1975  00003E                     drawtext@bg:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x3D
  1979  00003E                     	ds	2
  1980  000040                     drawtext@size:
  1981                           	opt stack 0
  1982                           
  1983                           ; 1 bytes @ 0x3F
  1984  000040                     	ds	1
  1985  000041                     
  1986                           ; 0 bytes @ 0x40
  1987  000041                     	ds	1
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postdec1	equ	0xFE5
  1995                           fsr1l	equ	0xFE1
  1996                           
  1997 ;;
  1998 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1999 ;;
  2000 ;; *************** function _main *****************
  2001 ;; Defined at:
  2002 ;;		line 149 in file "Lab11_ex.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;		None
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  j               2    9[BANK1 ] int 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;		None               void
  2009 ;; Registers used:
  2010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Totals:         1       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;Total ram usage:        3 bytes
  2021 ;; Hardware stack levels required when called:   11
  2022 ;; This function calls:
  2023 ;;		_DS1621_Read_Temp
  2024 ;;		_DS3231_Read_Time
  2025 ;;		_DS3231_Setup_Time
  2026 ;;		_Decrease_Speed
  2027 ;;		_Do_Beep
  2028 ;;		_Do_Init
  2029 ;;		_Increase_Speed
  2030 ;;		_Initialize_Screen
  2031 ;;		_Set_DC_RGB
  2032 ;;		_Set_RPM_RGB
  2033 ;;		_Toggle_Fan
  2034 ;;		_Update_Screen
  2035 ;;		___awdiv
  2036 ;;		___wmul
  2037 ;;		_do_update_pwm
  2038 ;;		_get_RPM
  2039 ;;		_printf
  2040 ;; This function is called by:
  2041 ;;		Startup code after reset
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text0
  2046  0009A0                     __ptext0:
  2047                           	opt stack 0
  2048  0009A0                     _main:
  2049                           	opt stack 20
  2050                           
  2051                           ;Lab11_ex.c: 151: Do_Init();
  2052                           
  2053                           ;incstack = 0
  2054  0009A0  EC12  F00F         	call	_Do_Init	;wreg free
  2055                           
  2056                           ;Lab11_ex.c: 152: Initialize_Screen();
  2057  0009A4  EC9B  F003         	call	_Initialize_Screen	;wreg free
  2058                           
  2059                           ;Lab11_ex.c: 153: FAN = 1;
  2060  0009A8  0E01               	movlw	1
  2061  0009AA  6E50               	movwf	_FAN,c
  2062                           
  2063                           ;Lab11_ex.c: 154: PORTBbits.RB5 = 1;
  2064  0009AC  8A81               	bsf	3969,5,c	;volatile
  2065                           
  2066                           ;Lab11_ex.c: 155: PORTEbits.RE1 = 1;
  2067  0009AE  8284               	bsf	3972,1,c	;volatile
  2068                           
  2069                           ;Lab11_ex.c: 156: PORTCbits.RC2 = 1;
  2070  0009B0  8482               	bsf	3970,2,c	;volatile
  2071                           
  2072                           ;Lab11_ex.c: 157: duty_cycle = 50;
  2073  0009B2  0E32               	movlw	50
  2074  0009B4  6E5A               	movwf	_duty_cycle,c
  2075                           
  2076                           ;Lab11_ex.c: 158: do_update_pwm(duty_cycle);
  2077  0009B6  505A               	movf	_duty_cycle,w,c
  2078  0009B8  ECC9  F00B         	call	_do_update_pwm
  2079  0009BC  D000               	goto	l6806
  2080  0009BE                     l6806:
  2081                           
  2082                           ;Lab11_ex.c: 214: {
  2083                           ;Lab11_ex.c: 216: DS3231_Read_Time();
  2084  0009BE  EC89  F00E         	call	_DS3231_Read_Time	;wreg free
  2085                           
  2086                           ;Lab11_ex.c: 217: Set_RPM_RGB(rpm);
  2087  0009C2  C04A  F011         	movff	_rpm,Set_RPM_RGB@rpm
  2088  0009C6  C04B  F012         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2089  0009CA  ECB3  F00D         	call	_Set_RPM_RGB	;wreg free
  2090                           
  2091                           ;Lab11_ex.c: 218: Set_DC_RGB(duty_cycle);
  2092  0009CE  C05A  F01F         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2093  0009D2  6A20               	clrf	Set_DC_RGB@duty_cycle+1,c
  2094  0009D4  EC23  F00E         	call	_Set_DC_RGB	;wreg free
  2095                           
  2096                           ;Lab11_ex.c: 219: Set_RPM_RGB(rpm);
  2097  0009D8  C04A  F011         	movff	_rpm,Set_RPM_RGB@rpm
  2098  0009DC  C04B  F012         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2099  0009E0  ECB3  F00D         	call	_Set_RPM_RGB	;wreg free
  2100                           
  2101                           ;Lab11_ex.c: 220: if(tempSecond != second)
  2102  0009E4  505D               	movf	_second,w,c
  2103  0009E6  186D               	xorwf	_tempSecond,w,c
  2104  0009E8  B4D8               	btfsc	status,2,c
  2105  0009EA  D05E               	goto	l6832
  2106                           
  2107                           ;Lab11_ex.c: 221: {
  2108                           ;Lab11_ex.c: 222: tempSecond = second;
  2109  0009EC  C05D  F06D         	movff	_second,_tempSecond
  2110                           
  2111                           ;Lab11_ex.c: 223: DS1621_tempC = DS1621_Read_Temp();
  2112  0009F0  EC4C  F010         	call	_DS1621_Read_Temp	;wreg free
  2113  0009F4  C014  F042         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2114  0009F8  C015  F043         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2115                           
  2116                           ;Lab11_ex.c: 224: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2117  0009FC  C042  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2118  000A00  C043  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2119  000A04  0E00               	movlw	0
  2120  000A06  6E14               	movwf	___wmul@multiplicand+1,c
  2121  000A08  0E09               	movlw	9
  2122  000A0A  6E13               	movwf	___wmul@multiplicand,c
  2123  000A0C  ECC9  F010         	call	___wmul	;wreg free
  2124  000A10  C011  F017         	movff	?___wmul,___awdiv@dividend
  2125  000A14  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2126  000A18  0E00               	movlw	0
  2127  000A1A  6E1A               	movwf	___awdiv@divisor+1,c
  2128  000A1C  0E05               	movlw	5
  2129  000A1E  6E19               	movwf	___awdiv@divisor,c
  2130  000A20  EC2A  F00C         	call	___awdiv	;wreg free
  2131  000A24  0E20               	movlw	32
  2132  000A26  2417               	addwf	?___awdiv,w,c
  2133  000A28  6E44               	movwf	_DS1621_tempF,c
  2134  000A2A  0E00               	movlw	0
  2135  000A2C  2018               	addwfc	?___awdiv+1,w,c
  2136  000A2E  6E45               	movwf	_DS1621_tempF+1,c
  2137                           
  2138                           ;Lab11_ex.c: 225: rpm = get_RPM();
  2139  000A30  ECD0  F00F         	call	_get_RPM	;wreg free
  2140  000A34  C01F  F04A         	movff	?_get_RPM,_rpm
  2141  000A38  C020  F04B         	movff	?_get_RPM+1,_rpm+1
  2142                           
  2143                           ;Lab11_ex.c: 226: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2144  000A3C  0E16               	movlw	low STR_1
  2145  000A3E  6E1D               	movwf	printf@f,c
  2146  000A40  0EFF               	movlw	high STR_1
  2147  000A42  6E1E               	movwf	printf@f+1,c
  2148  000A44  C069  F01F         	movff	_hour,?_printf+2
  2149  000A48  6A20               	clrf	?_printf+3,c
  2150  000A4A  C06A  F021         	movff	_minute,?_printf+4
  2151  000A4E  6A22               	clrf	?_printf+5,c
  2152  000A50  C05D  F023         	movff	_second,?_printf+6
  2153  000A54  6A24               	clrf	?_printf+7,c
  2154  000A56  C06B  F025         	movff	_month,?_printf+8
  2155  000A5A  6A26               	clrf	?_printf+9,c
  2156  000A5C  C067  F027         	movff	_day,?_printf+10
  2157  000A60  6A28               	clrf	?_printf+11,c
  2158  000A62  C06F  F029         	movff	_year,?_printf+12
  2159  000A66  6A2A               	clrf	?_printf+13,c
  2160  000A68  ECEE  F001         	call	_printf	;wreg free
  2161                           
  2162                           ;Lab11_ex.c: 227: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2163  000A6C  0E77               	movlw	low STR_2
  2164  000A6E  6E1D               	movwf	printf@f,c
  2165  000A70  0EFF               	movlw	high STR_2
  2166  000A72  6E1E               	movwf	printf@f+1,c
  2167  000A74  C042  F01F         	movff	_DS1621_tempC,?_printf+2
  2168  000A78  C043  F020         	movff	_DS1621_tempC+1,?_printf+3
  2169  000A7C  C044  F021         	movff	_DS1621_tempF,?_printf+4
  2170  000A80  C045  F022         	movff	_DS1621_tempF+1,?_printf+5
  2171  000A84  ECEE  F001         	call	_printf	;wreg free
  2172                           
  2173                           ;Lab11_ex.c: 228: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2174  000A88  0E8C               	movlw	low STR_3
  2175  000A8A  6E1D               	movwf	printf@f,c
  2176  000A8C  0EFF               	movlw	high STR_3
  2177  000A8E  6E1E               	movwf	printf@f+1,c
  2178  000A90  C04A  F01F         	movff	_rpm,?_printf+2
  2179  000A94  C04B  F020         	movff	_rpm+1,?_printf+3
  2180  000A98  C05A  F021         	movff	_duty_cycle,?_printf+4
  2181  000A9C  6A22               	clrf	?_printf+5,c
  2182  000A9E  ECEE  F001         	call	_printf	;wreg free
  2183                           
  2184                           ;Lab11_ex.c: 229: Update_Screen();
  2185  000AA2  EC0E  F000         	call	_Update_Screen	;wreg free
  2186  000AA6  D000               	goto	l6832
  2187  000AA8                     l6832:
  2188                           
  2189                           ;Lab11_ex.c: 230: }
  2190                           ;Lab11_ex.c: 232: if (nec_ok == 1)
  2191  000AA8  0448               	decf	_nec_ok,w,c
  2192  000AAA  1049               	iorwf	_nec_ok+1,w,c
  2193  000AAC  A4D8               	btfss	status,2,c
  2194  000AAE  D787               	goto	l6806
  2195                           
  2196                           ;Lab11_ex.c: 233: {
  2197                           ;Lab11_ex.c: 234: nec_ok = 0;
  2198  000AB0  0E00               	movlw	0
  2199  000AB2  6E49               	movwf	_nec_ok+1,c
  2200  000AB4  0E00               	movlw	0
  2201  000AB6  6E48               	movwf	_nec_ok,c
  2202                           
  2203                           ;Lab11_ex.c: 235: printf ("NEC_Code = %x\r\n", Nec_code1);
  2204  000AB8  0EB1               	movlw	low STR_4
  2205  000ABA  6E1D               	movwf	printf@f,c
  2206  000ABC  0EFF               	movlw	high STR_4
  2207  000ABE  6E1E               	movwf	printf@f+1,c
  2208  000AC0  C051  F01F         	movff	_Nec_code1,?_printf+2
  2209  000AC4  6A20               	clrf	?_printf+3,c
  2210  000AC6  ECEE  F001         	call	_printf	;wreg free
  2211                           
  2212                           ;Lab11_ex.c: 237: INTCONbits.INT0IE = 1;
  2213  000ACA  88F2               	bsf	intcon,4,c	;volatile
  2214                           
  2215                           ;Lab11_ex.c: 238: INTCON2bits.INTEDG0 = 0;
  2216  000ACC  9CF1               	bcf	intcon2,6,c	;volatile
  2217                           
  2218                           ;Lab11_ex.c: 240: found = 0xff;
  2219  000ACE  685B               	setf	_found,c
  2220                           
  2221                           ;Lab11_ex.c: 241: for (int j=0; j< 21; j++)
  2222  000AD0  0E00               	movlw	0
  2223  000AD2  0101               	movlb	1	; () banked
  2224  000AD4  6F2B               	movwf	(main@j+1)& (0+255),b
  2225  000AD6  0E00               	movlw	0
  2226  000AD8  6F2A               	movwf	main@j& (0+255),b
  2227  000ADA                     l6846:
  2228                           
  2229                           ; BSR set to: 1
  2230  000ADA  0101               	movlb	1	; () banked
  2231  000ADC  BF2B               	btfsc	(main@j+1)& (0+255),7,b
  2232  000ADE  D00A               	goto	l6850
  2233  000AE0  0101               	movlb	1	; () banked
  2234  000AE2  512B               	movf	(main@j+1)& (0+255),w,b
  2235  000AE4  E120               	bnz	l6860
  2236  000AE6  0E15               	movlw	21
  2237  000AE8  0101               	movlb	1	; () banked
  2238  000AEA  5D2A               	subwf	main@j& (0+255),w,b
  2239  000AEC  B0D8               	btfsc	status,0,c
  2240  000AEE  D01B               	goto	l6860
  2241  000AF0  D001               	goto	l6850
  2242                           
  2243                           ; BSR set to: 1
  2244  000AF2  D019               	goto	l6860
  2245  000AF4                     l6850:
  2246                           
  2247                           ; BSR set to: 1
  2248                           ;Lab11_ex.c: 242: {
  2249                           ;Lab11_ex.c: 243: if (Nec_code1 == array1[j])
  2250  000AF4  0E80               	movlw	low _array1
  2251  000AF6  0101               	movlb	1	; () banked
  2252  000AF8  252A               	addwf	main@j& (0+255),w,b
  2253  000AFA  6ED9               	movwf	fsr2l,c
  2254  000AFC  0E00               	movlw	high _array1
  2255  000AFE  0101               	movlb	1	; () banked
  2256  000B00  212B               	addwfc	(main@j+1)& (0+255),w,b
  2257  000B02  6EDA               	movwf	fsr2h,c
  2258  000B04  5051               	movf	_Nec_code1,w,c
  2259  000B06  18DE               	xorwf	postinc2,w,c
  2260  000B08  A4D8               	btfss	status,2,c
  2261  000B0A  D008               	goto	l6856
  2262                           
  2263                           ; BSR set to: 1
  2264                           ;Lab11_ex.c: 244: {
  2265                           ;Lab11_ex.c: 245: found = j;
  2266  000B0C  C12A  F05B         	movff	main@j,_found
  2267                           
  2268                           ; BSR set to: 1
  2269                           ;Lab11_ex.c: 246: j = 21;
  2270  000B10  0E00               	movlw	0
  2271  000B12  0101               	movlb	1	; () banked
  2272  000B14  6F2B               	movwf	(main@j+1)& (0+255),b
  2273  000B16  0E15               	movlw	21
  2274  000B18  6F2A               	movwf	main@j& (0+255),b
  2275  000B1A  D000               	goto	l6856
  2276  000B1C                     l6856:
  2277                           
  2278                           ; BSR set to: 1
  2279  000B1C  0101               	movlb	1	; () banked
  2280  000B1E  4B2A               	infsnz	main@j& (0+255),f,b
  2281  000B20  2B2B               	incf	(main@j+1)& (0+255),f,b
  2282  000B22  D7DB               	goto	l6846
  2283                           
  2284                           ; BSR set to: 1
  2285  000B24  D000               	goto	l6860
  2286  000B26                     l6860:
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;Lab11_ex.c: 247: }
  2290                           ;Lab11_ex.c: 248: }
  2291                           ;Lab11_ex.c: 250: if (found == 0xff)
  2292  000B26  285B               	incf	_found,w,c
  2293  000B28  A4D8               	btfss	status,2,c
  2294  000B2A  D007               	goto	l6864
  2295                           
  2296                           ; BSR set to: 1
  2297                           ;Lab11_ex.c: 251: {
  2298                           ;Lab11_ex.c: 252: printf ("Cannot find button \r\n");
  2299  000B2C  0E61               	movlw	low STR_5
  2300  000B2E  6E1D               	movwf	printf@f,c
  2301  000B30  0EFF               	movlw	high STR_5
  2302  000B32  6E1E               	movwf	printf@f+1,c
  2303  000B34  ECEE  F001         	call	_printf	;wreg free
  2304                           
  2305                           ;Lab11_ex.c: 253: }
  2306  000B38  D742               	goto	l6806
  2307  000B3A                     l6864:
  2308                           
  2309                           ;Lab11_ex.c: 255: else
  2310                           ;Lab11_ex.c: 256: {
  2311                           ;Lab11_ex.c: 257: Do_Beep();
  2312  000B3A  ECFB  F011         	call	_Do_Beep	;wreg free
  2313                           
  2314                           ;Lab11_ex.c: 258: printf ("button = %d \r\n", found);
  2315  000B3E  0EC1               	movlw	low STR_6
  2316  000B40  6E1D               	movwf	printf@f,c
  2317  000B42  0EFF               	movlw	high STR_6
  2318  000B44  6E1E               	movwf	printf@f+1,c
  2319  000B46  C05B  F01F         	movff	_found,?_printf+2
  2320  000B4A  6A20               	clrf	?_printf+3,c
  2321  000B4C  ECEE  F001         	call	_printf	;wreg free
  2322                           
  2323                           ;Lab11_ex.c: 260: if ( found == 5 )
  2324  000B50  0E05               	movlw	5
  2325  000B52  185B               	xorwf	_found,w,c
  2326  000B54  A4D8               	btfss	status,2,c
  2327  000B56  D00B               	goto	l6878
  2328                           
  2329                           ;Lab11_ex.c: 261: {
  2330                           ;Lab11_ex.c: 262: if (FAN == 0 )
  2331  000B58  5050               	movf	_FAN,w,c
  2332  000B5A  A4D8               	btfss	status,2,c
  2333  000B5C  D002               	goto	l6874
  2334                           
  2335                           ;Lab11_ex.c: 263: {
  2336                           ;Lab11_ex.c: 264: FAN = 1;
  2337  000B5E  0E01               	movlw	1
  2338  000B60  D001               	goto	L1
  2339  000B62                     l6874:
  2340                           
  2341                           ;Lab11_ex.c: 266: else
  2342                           ;Lab11_ex.c: 267: {
  2343                           ;Lab11_ex.c: 268: FAN = 0;
  2344  000B62  0E00               	movlw	0
  2345  000B64                     L1:
  2346  000B64  6E50               	movwf	_FAN,c
  2347  000B66  D000               	goto	l6876
  2348  000B68                     l6876:
  2349                           
  2350                           ;Lab11_ex.c: 269: }
  2351                           ;Lab11_ex.c: 270: Toggle_Fan();
  2352  000B68  EC76  F011         	call	_Toggle_Fan	;wreg free
  2353  000B6C  D000               	goto	l6878
  2354  000B6E                     l6878:
  2355                           
  2356                           ;Lab11_ex.c: 272: }
  2357                           ;Lab11_ex.c: 274: if ( found == 6 )
  2358  000B6E  0E06               	movlw	6
  2359  000B70  185B               	xorwf	_found,w,c
  2360  000B72  A4D8               	btfss	status,2,c
  2361  000B74  D003               	goto	l6882
  2362                           
  2363                           ;Lab11_ex.c: 275: {
  2364                           ;Lab11_ex.c: 276: Decrease_Speed();
  2365  000B76  EC03  F011         	call	_Decrease_Speed	;wreg free
  2366  000B7A  D000               	goto	l6882
  2367  000B7C                     l6882:
  2368                           
  2369                           ;Lab11_ex.c: 277: }
  2370                           ;Lab11_ex.c: 279: if ( found == 7 )
  2371  000B7C  0E07               	movlw	7
  2372  000B7E  185B               	xorwf	_found,w,c
  2373  000B80  A4D8               	btfss	status,2,c
  2374  000B82  D003               	goto	l6886
  2375                           
  2376                           ;Lab11_ex.c: 280: {
  2377                           ;Lab11_ex.c: 281: Increase_Speed();
  2378  000B84  ECDD  F010         	call	_Increase_Speed	;wreg free
  2379  000B88  D000               	goto	l6886
  2380  000B8A                     l6886:
  2381                           
  2382                           ;Lab11_ex.c: 282: }
  2383                           ;Lab11_ex.c: 284: if ( found == 8 )
  2384  000B8A  0E08               	movlw	8
  2385  000B8C  185B               	xorwf	_found,w,c
  2386  000B8E  A4D8               	btfss	status,2,c
  2387  000B90  D716               	goto	l6806
  2388                           
  2389                           ;Lab11_ex.c: 285: {
  2390                           ;Lab11_ex.c: 286: printf("\r\n New Time Set! \r\n \r\n");
  2391  000B92  0E34               	movlw	low STR_7
  2392  000B94  6E1D               	movwf	printf@f,c
  2393  000B96  0EFF               	movlw	high STR_7
  2394  000B98  6E1E               	movwf	printf@f+1,c
  2395  000B9A  ECEE  F001         	call	_printf	;wreg free
  2396                           
  2397                           ;Lab11_ex.c: 287: DS3231_Setup_Time();
  2398  000B9E  EC56  F00E         	call	_DS3231_Setup_Time	;wreg free
  2399  000BA2  D70D               	goto	l6806
  2400  000BA4  EF0C  F000         	goto	start
  2401  000BA8                     __end_of_main:
  2402                           	opt stack 0
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           intcon	equ	0xFF2
  2408                           intcon2	equ	0xFF1
  2409                           postinc0	equ	0xFEE
  2410                           wreg	equ	0xFE8
  2411                           postdec1	equ	0xFE5
  2412                           fsr1l	equ	0xFE1
  2413                           postinc2	equ	0xFDE
  2414                           fsr2h	equ	0xFDA
  2415                           fsr2l	equ	0xFD9
  2416                           status	equ	0xFD8
  2417                           
  2418 ;; *************** function _printf *****************
  2419 ;; Defined at:
  2420 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2423 ;;		 -> STR_7(23), STR_6(15), STR_5(22), STR_4(16), 
  2424 ;;		 -> STR_3(20), STR_2(21), STR_1(30), 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  idx             1   46[COMRAM] unsigned char 
  2427 ;;  tmpval          4    0        struct .
  2428 ;;  cp              3    0        PTR const unsigned char 
  2429 ;;  width           2   53[COMRAM] int 
  2430 ;;  val             2   50[COMRAM] unsigned int 
  2431 ;;  ap              2   47[COMRAM] PTR void [1]
  2432 ;;		 -> ?_printf(2), 
  2433 ;;  len             2    0        unsigned int 
  2434 ;;  c               1   55[COMRAM] char 
  2435 ;;  flag            1   52[COMRAM] unsigned char 
  2436 ;;  prec            1   49[COMRAM] char 
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  2   28[COMRAM] int 
  2439 ;; Registers used:
  2440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2446 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;Total ram usage:       28 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    4
  2453 ;; This function calls:
  2454 ;;		___lwdiv
  2455 ;;		___lwmod
  2456 ;;		___wmul
  2457 ;;		_isdigit
  2458 ;;		_putch
  2459 ;; This function is called by:
  2460 ;;		_main
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text1
  2465  0003DC                     __ptext1:
  2466                           	opt stack 0
  2467  0003DC                     _printf:
  2468                           	opt stack 26
  2469                           
  2470                           ;doprnt.c: 466: va_list ap;
  2471                           ;doprnt.c: 499: signed char c;
  2472                           ;doprnt.c: 501: int width;
  2473                           ;doprnt.c: 506: signed char prec;
  2474                           ;doprnt.c: 508: unsigned char flag;
  2475                           ;doprnt.c: 523: union {
  2476                           ;doprnt.c: 524: unsigned long vd;
  2477                           ;doprnt.c: 525: double integ;
  2478                           ;doprnt.c: 526: } tmpval;
  2479                           ;doprnt.c: 528: unsigned int val;
  2480                           ;doprnt.c: 529: unsigned len;
  2481                           ;doprnt.c: 530: const char * cp;
  2482                           ;doprnt.c: 533: *ap = __va_start();
  2483                           
  2484                           ;incstack = 0
  2485  0003DC  0E1F               	movlw	low (?_printf+2)
  2486  0003DE  6E30               	movwf	printf@ap,c
  2487  0003E0  0E00               	movlw	high (?_printf+2)
  2488  0003E2  6E31               	movwf	printf@ap+1,c
  2489                           
  2490                           ;doprnt.c: 536: while(c = *f++) {
  2491  0003E4  D199               	goto	l6610
  2492  0003E6                     l6484:
  2493                           
  2494                           ;doprnt.c: 538: if(c != '%')
  2495  0003E6  0E25               	movlw	37
  2496  0003E8  1838               	xorwf	printf@c,w,c
  2497  0003EA  B4D8               	btfsc	status,2,c
  2498  0003EC  D004               	goto	l6488
  2499                           
  2500                           ;doprnt.c: 540: {
  2501                           ;doprnt.c: 541: (putch(c) );
  2502  0003EE  5038               	movf	printf@c,w,c
  2503  0003F0  ECF4  F011         	call	_putch
  2504                           
  2505                           ;doprnt.c: 542: continue;
  2506  0003F4  D191               	goto	l6610
  2507  0003F6                     l6488:
  2508                           
  2509                           ;doprnt.c: 543: }
  2510                           ;doprnt.c: 546: width = 0;
  2511  0003F6  0E00               	movlw	0
  2512  0003F8  6E37               	movwf	printf@width+1,c
  2513  0003FA  0E00               	movlw	0
  2514  0003FC  6E36               	movwf	printf@width,c
  2515                           
  2516                           ;doprnt.c: 548: flag = 0;
  2517  0003FE  0E00               	movlw	0
  2518  000400  6E35               	movwf	printf@flag,c
  2519                           
  2520                           ;doprnt.c: 551: switch(*f) {
  2521                           
  2522                           ;doprnt.c: 550: for(;;) {
  2523  000402  D005               	goto	l6494
  2524  000404                     l6490:
  2525                           
  2526                           ;doprnt.c: 580: flag |= 0x04;
  2527  000404  8435               	bsf	printf@flag,2,c
  2528                           
  2529                           ;doprnt.c: 581: f++;
  2530  000406  4A1D               	infsnz	printf@f,f,c
  2531  000408  2A1E               	incf	printf@f+1,f,c
  2532                           
  2533                           ;doprnt.c: 582: continue;
  2534  00040A  D001               	goto	l6494
  2535                           
  2536                           ;doprnt.c: 584: }
  2537  00040C  D00B               	goto	l6496
  2538  00040E                     l6494:
  2539  00040E  C01D  FFF6         	movff	printf@f,tblptrl
  2540  000412  C01E  FFF7         	movff	printf@f+1,tblptrh
  2541  000416                     	if	0	;tblptru may be non-zero
  2542  000416                     	endif
  2543  000416                     	if	0	;tblptru may be non-zero
  2544  000416                     	endif
  2545  000416  0008               	tblrd		*
  2546  000418  50F5               	movf	tablat,w,c
  2547                           
  2548                           ; Switch size 1, requested type "space"
  2549                           ; Number of cases is 1, Range of values is 48 to 48
  2550                           ; switch strategies available:
  2551                           ; Name         Instructions Cycles
  2552                           ; simple_byte            4     3 (average)
  2553                           ;	Chosen strategy is simple_byte
  2554  00041A  0A30               	xorlw	48	; case 48
  2555  00041C  B4D8               	btfsc	status,2,c
  2556  00041E  D7F2               	goto	l6490
  2557                           
  2558                           ;doprnt.c: 585: break;
  2559  000420  D001               	goto	l6496
  2560                           
  2561                           ;doprnt.c: 586: }
  2562  000422  D7F5               	goto	l6494
  2563  000424                     l6496:
  2564                           
  2565                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2566  000424  C01D  FFF6         	movff	printf@f,tblptrl
  2567  000428  C01E  FFF7         	movff	printf@f+1,tblptrh
  2568  00042C                     	if	0	;tblptru may be non-zero
  2569  00042C                     	endif
  2570  00042C                     	if	0	;tblptru may be non-zero
  2571  00042C                     	endif
  2572  00042C  0008               	tblrd		*
  2573  00042E  50F5               	movf	tablat,w,c
  2574  000430  EC27  F011         	call	_isdigit
  2575  000434  A0D8               	btfss	status,0,c
  2576  000436  D03B               	goto	l6512
  2577                           
  2578                           ;doprnt.c: 598: width = 0;
  2579  000438  0E00               	movlw	0
  2580  00043A  6E37               	movwf	printf@width+1,c
  2581  00043C  0E00               	movlw	0
  2582  00043E  6E36               	movwf	printf@width,c
  2583  000440  D000               	goto	l6500
  2584  000442                     l6500:
  2585                           
  2586                           ;doprnt.c: 600: width *= 10;
  2587  000442  C036  F011         	movff	printf@width,___wmul@multiplier
  2588  000446  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2589  00044A  0E00               	movlw	0
  2590  00044C  6E14               	movwf	___wmul@multiplicand+1,c
  2591  00044E  0E0A               	movlw	10
  2592  000450  6E13               	movwf	___wmul@multiplicand,c
  2593  000452  ECC9  F010         	call	___wmul	;wreg free
  2594  000456  C011  F036         	movff	?___wmul,printf@width
  2595  00045A  C012  F037         	movff	?___wmul+1,printf@width+1
  2596                           
  2597                           ;doprnt.c: 601: width += *f++ - '0';
  2598  00045E  0ED0               	movlw	208
  2599  000460  6E2B               	movwf	??_printf& (0+255),c
  2600  000462  0EFF               	movlw	255
  2601  000464  6E2C               	movwf	(??_printf+1)& (0+255),c
  2602  000466  C01D  FFF6         	movff	printf@f,tblptrl
  2603  00046A  C01E  FFF7         	movff	printf@f+1,tblptrh
  2604  00046E                     	if	0	;tblptru may be non-zero
  2605  00046E                     	endif
  2606  00046E                     	if	0	;tblptru may be non-zero
  2607  00046E                     	endif
  2608  00046E  0008               	tblrd		*
  2609  000470  50F5               	movf	tablat,w,c
  2610  000472  6E2D               	movwf	(??_printf+2)& (0+255),c
  2611  000474  6A2E               	clrf	(??_printf+3)& (0+255),c
  2612  000476  502B               	movf	??_printf,w,c
  2613  000478  262D               	addwf	??_printf+2,f,c
  2614  00047A  502C               	movf	??_printf+1,w,c
  2615  00047C  222E               	addwfc	??_printf+3,f,c
  2616  00047E  502D               	movf	??_printf+2,w,c
  2617  000480  2636               	addwf	printf@width,f,c
  2618  000482  502E               	movf	??_printf+3,w,c
  2619  000484  2237               	addwfc	printf@width+1,f,c
  2620  000486  4A1D               	infsnz	printf@f,f,c
  2621  000488  2A1E               	incf	printf@f+1,f,c
  2622                           
  2623                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2624  00048A  C01D  FFF6         	movff	printf@f,tblptrl
  2625  00048E  C01E  FFF7         	movff	printf@f+1,tblptrh
  2626  000492                     	if	0	;tblptru may be non-zero
  2627  000492                     	endif
  2628  000492                     	if	0	;tblptru may be non-zero
  2629  000492                     	endif
  2630  000492  0008               	tblrd		*
  2631  000494  50F5               	movf	tablat,w,c
  2632  000496  EC27  F011         	call	_isdigit
  2633  00049A  A0D8               	btfss	status,0,c
  2634  00049C  D008               	goto	l6512
  2635  00049E  D7D1               	goto	l6500
  2636                           
  2637                           ;doprnt.c: 608: }
  2638                           ;doprnt.c: 635: switch(c = *f++) {
  2639  0004A0  D006               	goto	l6512
  2640                           
  2641                           ;doprnt.c: 638: goto alldone;
  2642                           
  2643                           ;doprnt.c: 637: case 0:
  2644  0004A2  D148               	goto	l834
  2645                           
  2646                           ;doprnt.c: 698: case 'i':
  2647                           ;doprnt.c: 699: break;
  2648                           
  2649                           ;doprnt.c: 697: case 'd':
  2650  0004A4  D01B               	goto	l797
  2651  0004A6                     l6508:
  2652                           
  2653                           ;doprnt.c: 721: flag |= 0x80;
  2654  0004A6  8E35               	bsf	printf@flag,7,c
  2655                           
  2656                           ;doprnt.c: 723: break;
  2657  0004A8  D019               	goto	l797
  2658                           
  2659                           ;doprnt.c: 813: continue;
  2660                           
  2661                           ;doprnt.c: 802: default:
  2662  0004AA  D136               	goto	l6610
  2663                           
  2664                           ;doprnt.c: 822: }
  2665  0004AC  D017               	goto	l797
  2666  0004AE                     l6512:
  2667  0004AE  C01D  FFF6         	movff	printf@f,tblptrl
  2668  0004B2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2669  0004B6  4A1D               	infsnz	printf@f,f,c
  2670  0004B8  2A1E               	incf	printf@f+1,f,c
  2671  0004BA                     	if	0	;tblptru may be non-zero
  2672  0004BA                     	endif
  2673  0004BA                     	if	0	;tblptru may be non-zero
  2674  0004BA                     	endif
  2675  0004BA  0008               	tblrd		*
  2676  0004BC  CFF5 F038          	movff	tablat,printf@c
  2677  0004C0  5038               	movf	printf@c,w,c
  2678                           
  2679                           ; Switch size 1, requested type "space"
  2680                           ; Number of cases is 4, Range of values is 0 to 120
  2681                           ; switch strategies available:
  2682                           ; Name         Instructions Cycles
  2683                           ; simple_byte           13     7 (average)
  2684                           ;	Chosen strategy is simple_byte
  2685  0004C2  0A00               	xorlw	0	; case 0
  2686  0004C4  B4D8               	btfsc	status,2,c
  2687  0004C6  D136               	goto	l834
  2688  0004C8  0A64               	xorlw	100	; case 100
  2689  0004CA  B4D8               	btfsc	status,2,c
  2690  0004CC  D007               	goto	l797
  2691  0004CE  0A0D               	xorlw	13	; case 105
  2692  0004D0  B4D8               	btfsc	status,2,c
  2693  0004D2  D004               	goto	l797
  2694  0004D4  0A11               	xorlw	17	; case 120
  2695  0004D6  B4D8               	btfsc	status,2,c
  2696  0004D8  D7E6               	goto	l6508
  2697  0004DA  D11E               	goto	l6610
  2698  0004DC                     l797:
  2699                           
  2700                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2701  0004DC  BE35               	btfsc	printf@flag,7,c
  2702  0004DE  D015               	goto	l6524
  2703                           
  2704                           ;doprnt.c: 1253: {
  2705                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2706  0004E0  C030  FFD9         	movff	printf@ap,fsr2l
  2707  0004E4  C031  FFDA         	movff	printf@ap+1,fsr2h
  2708  0004E8  CFDE F033          	movff	postinc2,printf@val
  2709  0004EC  CFDD F034          	movff	postdec2,printf@val+1
  2710  0004F0  0E02               	movlw	2
  2711  0004F2  2630               	addwf	printf@ap,f,c
  2712  0004F4  0E00               	movlw	0
  2713  0004F6  2231               	addwfc	printf@ap+1,f,c
  2714                           
  2715                           ;doprnt.c: 1261: if((int)val < 0) {
  2716  0004F8  AE34               	btfss	printf@val+1,7,c
  2717  0004FA  D04E               	goto	l6558
  2718                           
  2719                           ;doprnt.c: 1262: flag |= 0x03;
  2720  0004FC  0E03               	movlw	3
  2721  0004FE  1235               	iorwf	printf@flag,f,c
  2722                           
  2723                           ;doprnt.c: 1263: val = -val;
  2724  000500  6C33               	negf	printf@val,c
  2725  000502  1E34               	comf	printf@val+1,f,c
  2726  000504  B0D8               	btfsc	status,0,c
  2727  000506  2A34               	incf	printf@val+1,f,c
  2728                           
  2729                           ;doprnt.c: 1264: }
  2730                           ;doprnt.c: 1266: }
  2731  000508  D047               	goto	l6558
  2732  00050A                     l6524:
  2733                           
  2734                           ;doprnt.c: 1268: else
  2735                           ;doprnt.c: 1273: {
  2736                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2737  00050A  C030  FFD9         	movff	printf@ap,fsr2l
  2738  00050E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2739  000512  CFDE F033          	movff	postinc2,printf@val
  2740  000516  CFDD F034          	movff	postdec2,printf@val+1
  2741  00051A  0E02               	movlw	2
  2742  00051C  2630               	addwf	printf@ap,f,c
  2743  00051E  0E00               	movlw	0
  2744  000520  2231               	addwfc	printf@ap+1,f,c
  2745                           
  2746                           ;doprnt.c: 1287: }
  2747                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2748  000522  D03A               	goto	l6558
  2749  000524                     l6528:
  2750                           
  2751                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2752  000524  0E01               	movlw	1
  2753  000526  6E38               	movwf	printf@c,c
  2754  000528                     l6530:
  2755  000528  0E05               	movlw	5
  2756  00052A  1838               	xorwf	printf@c,w,c
  2757  00052C  B4D8               	btfsc	status,2,c
  2758  00052E  D03D               	goto	l6560
  2759  000530  D001               	goto	l6534
  2760  000532  D03B               	goto	l6560
  2761  000534                     l6534:
  2762                           
  2763                           ;doprnt.c: 1306: if(val < dpowers[c])
  2764  000534  5038               	movf	printf@c,w,c
  2765  000536  0D02               	mullw	2
  2766  000538  0E04               	movlw	low _dpowers
  2767  00053A  24F3               	addwf	prodl,w,c
  2768  00053C  6EF6               	movwf	tblptrl,c
  2769  00053E  0EFF               	movlw	high _dpowers
  2770  000540  20F4               	addwfc	prodh,w,c
  2771  000542  6EF7               	movwf	tblptrh,c
  2772  000544                     	if	0	;There are less than 3 active tblptr bytes
  2773  000544                     	endif
  2774  000544  0009               	tblrd		*+
  2775  000546  50F5               	movf	tablat,w,c
  2776  000548  5C33               	subwf	printf@val,w,c
  2777  00054A  0009               	tblrd		*+
  2778  00054C  50F5               	movf	tablat,w,c
  2779  00054E  5834               	subwfb	printf@val+1,w,c
  2780  000550  A0D8               	btfss	status,0,c
  2781  000552  D02B               	goto	l6560
  2782  000554  D001               	goto	l6538
  2783                           
  2784                           ;doprnt.c: 1307: break;
  2785  000556  D029               	goto	l6560
  2786  000558                     l6538:
  2787  000558  2A38               	incf	printf@c,f,c
  2788  00055A  D7E6               	goto	l6530
  2789                           
  2790                           ;doprnt.c: 1309: break;
  2791  00055C  D026               	goto	l6560
  2792  00055E                     l6542:
  2793                           
  2794                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2795  00055E  0E01               	movlw	1
  2796  000560  6E38               	movwf	printf@c,c
  2797  000562                     l6544:
  2798  000562  0E04               	movlw	4
  2799  000564  1838               	xorwf	printf@c,w,c
  2800  000566  B4D8               	btfsc	status,2,c
  2801  000568  D020               	goto	l6560
  2802  00056A  D001               	goto	l6548
  2803  00056C  D01E               	goto	l6560
  2804  00056E                     l6548:
  2805                           
  2806                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2807  00056E  5038               	movf	printf@c,w,c
  2808  000570  0D02               	mullw	2
  2809  000572  0E0E               	movlw	low _hexpowers
  2810  000574  24F3               	addwf	prodl,w,c
  2811  000576  6EF6               	movwf	tblptrl,c
  2812  000578  0EFF               	movlw	high _hexpowers
  2813  00057A  20F4               	addwfc	prodh,w,c
  2814  00057C  6EF7               	movwf	tblptrh,c
  2815  00057E                     	if	0	;There are less than 3 active tblptr bytes
  2816  00057E                     	endif
  2817  00057E  0009               	tblrd		*+
  2818  000580  50F5               	movf	tablat,w,c
  2819  000582  5C33               	subwf	printf@val,w,c
  2820  000584  0009               	tblrd		*+
  2821  000586  50F5               	movf	tablat,w,c
  2822  000588  5834               	subwfb	printf@val+1,w,c
  2823  00058A  A0D8               	btfss	status,0,c
  2824  00058C  D00E               	goto	l6560
  2825  00058E  D001               	goto	l6552
  2826                           
  2827                           ;doprnt.c: 1318: break;
  2828  000590  D00C               	goto	l6560
  2829  000592                     l6552:
  2830  000592  2A38               	incf	printf@c,f,c
  2831  000594  D7E6               	goto	l6544
  2832                           
  2833                           ;doprnt.c: 1336: }
  2834                           
  2835                           ;doprnt.c: 1320: break;
  2836  000596  D009               	goto	l6560
  2837  000598                     l6558:
  2838  000598  5035               	movf	printf@flag,w,c
  2839  00059A  0B80               	andlw	128
  2840                           
  2841                           ; Switch size 1, requested type "space"
  2842                           ; Number of cases is 2, Range of values is 0 to 128
  2843                           ; switch strategies available:
  2844                           ; Name         Instructions Cycles
  2845                           ; simple_byte            7     4 (average)
  2846                           ;	Chosen strategy is simple_byte
  2847  00059C  0A00               	xorlw	0	; case 0
  2848  00059E  B4D8               	btfsc	status,2,c
  2849  0005A0  D7C1               	goto	l6528
  2850  0005A2  0A80               	xorlw	128	; case 128
  2851  0005A4  B4D8               	btfsc	status,2,c
  2852  0005A6  D7DB               	goto	l6542
  2853  0005A8  D000               	goto	l6560
  2854  0005AA                     l6560:
  2855                           
  2856                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2857  0005AA  5036               	movf	printf@width,w,c
  2858  0005AC  1037               	iorwf	printf@width+1,w,c
  2859  0005AE  B4D8               	btfsc	status,2,c
  2860  0005B0  D00A               	goto	l6566
  2861  0005B2  C035  F02B         	movff	printf@flag,??_printf
  2862  0005B6  0E03               	movlw	3
  2863  0005B8  162B               	andwf	??_printf,f,c
  2864  0005BA  B4D8               	btfsc	status,2,c
  2865  0005BC  D004               	goto	l6566
  2866                           
  2867                           ;doprnt.c: 1346: width--;
  2868  0005BE  0636               	decf	printf@width,f,c
  2869  0005C0  A0D8               	btfss	status,0,c
  2870  0005C2  0637               	decf	printf@width+1,f,c
  2871  0005C4  D000               	goto	l6566
  2872  0005C6                     l6566:
  2873                           
  2874                           ;doprnt.c: 1381: if(width > c)
  2875  0005C6  0E80               	movlw	128
  2876  0005C8  BE38               	btfsc	printf@c,7,c
  2877  0005CA  0E7F               	movlw	127
  2878  0005CC  6E2B               	movwf	??_printf& (0+255),c
  2879  0005CE  5036               	movf	printf@width,w,c
  2880  0005D0  5C38               	subwf	printf@c,w,c
  2881  0005D2  5037               	movf	printf@width+1,w,c
  2882  0005D4  0A80               	xorlw	128
  2883  0005D6  582B               	subwfb	??_printf& (0+255),w,c
  2884  0005D8  B0D8               	btfsc	status,0,c
  2885  0005DA  D007               	goto	l6570
  2886                           
  2887                           ;doprnt.c: 1382: width -= c;
  2888  0005DC  5038               	movf	printf@c,w,c
  2889  0005DE  5E36               	subwf	printf@width,f,c
  2890  0005E0  0E00               	movlw	0
  2891  0005E2  BE38               	btfsc	printf@c,7,c
  2892  0005E4  0EFF               	movlw	255
  2893  0005E6  5A37               	subwfb	printf@width+1,f,c
  2894  0005E8  D005               	goto	l6572
  2895  0005EA                     l6570:
  2896                           
  2897                           ;doprnt.c: 1383: else
  2898                           ;doprnt.c: 1384: width = 0;
  2899  0005EA  0E00               	movlw	0
  2900  0005EC  6E37               	movwf	printf@width+1,c
  2901  0005EE  0E00               	movlw	0
  2902  0005F0  6E36               	movwf	printf@width,c
  2903  0005F2  D000               	goto	l6572
  2904  0005F4                     l6572:
  2905                           
  2906                           ;doprnt.c: 1387: if(flag & 0x04) {
  2907  0005F4  A435               	btfss	printf@flag,2,c
  2908  0005F6  D01A               	goto	l6584
  2909                           
  2910                           ;doprnt.c: 1392: if(flag & 0x03)
  2911  0005F8  C035  F02B         	movff	printf@flag,??_printf
  2912  0005FC  0E03               	movlw	3
  2913  0005FE  162B               	andwf	??_printf,f,c
  2914  000600  B4D8               	btfsc	status,2,c
  2915  000602  D004               	goto	l6578
  2916                           
  2917                           ;doprnt.c: 1393: (putch('-') );
  2918  000604  0E2D               	movlw	45
  2919  000606  ECF4  F011         	call	_putch
  2920  00060A  D000               	goto	l6578
  2921  00060C                     l6578:
  2922                           
  2923                           ;doprnt.c: 1415: if(width)
  2924  00060C  5036               	movf	printf@width,w,c
  2925  00060E  1037               	iorwf	printf@width+1,w,c
  2926  000610  B4D8               	btfsc	status,2,c
  2927  000612  D026               	goto	l6594
  2928  000614                     l6580:
  2929                           
  2930                           ;doprnt.c: 1417: (putch('0') );
  2931  000614  0E30               	movlw	48
  2932  000616  ECF4  F011         	call	_putch
  2933                           
  2934                           ;doprnt.c: 1418: while(--width);
  2935  00061A  0636               	decf	printf@width,f,c
  2936  00061C  A0D8               	btfss	status,0,c
  2937  00061E  0637               	decf	printf@width+1,f,c
  2938  000620  5036               	movf	printf@width,w,c
  2939  000622  1037               	iorwf	printf@width+1,w,c
  2940  000624  B4D8               	btfsc	status,2,c
  2941  000626  D01C               	goto	l6594
  2942  000628  D7F5               	goto	l6580
  2943                           
  2944                           ;doprnt.c: 1420: } else
  2945  00062A  D01A               	goto	l6594
  2946  00062C                     l6584:
  2947                           
  2948                           ;doprnt.c: 1422: {
  2949                           ;doprnt.c: 1424: if(width
  2950                           ;doprnt.c: 1428: )
  2951  00062C  5036               	movf	printf@width,w,c
  2952  00062E  1037               	iorwf	printf@width+1,w,c
  2953  000630  B4D8               	btfsc	status,2,c
  2954  000632  D00C               	goto	l6590
  2955  000634                     l6586:
  2956                           
  2957                           ;doprnt.c: 1430: (putch(' ') );
  2958  000634  0E20               	movlw	32
  2959  000636  ECF4  F011         	call	_putch
  2960                           
  2961                           ;doprnt.c: 1431: while(--width);
  2962  00063A  0636               	decf	printf@width,f,c
  2963  00063C  A0D8               	btfss	status,0,c
  2964  00063E  0637               	decf	printf@width+1,f,c
  2965  000640  5036               	movf	printf@width,w,c
  2966  000642  1037               	iorwf	printf@width+1,w,c
  2967  000644  B4D8               	btfsc	status,2,c
  2968  000646  D002               	goto	l6590
  2969  000648  D7F5               	goto	l6586
  2970  00064A  D000               	goto	l6590
  2971  00064C                     l6590:
  2972                           
  2973                           ;doprnt.c: 1438: if(flag & 0x03)
  2974  00064C  C035  F02B         	movff	printf@flag,??_printf
  2975  000650  0E03               	movlw	3
  2976  000652  162B               	andwf	??_printf,f,c
  2977  000654  B4D8               	btfsc	status,2,c
  2978  000656  D004               	goto	l6594
  2979                           
  2980                           ;doprnt.c: 1439: (putch('-') );
  2981  000658  0E2D               	movlw	45
  2982  00065A  ECF4  F011         	call	_putch
  2983  00065E  D000               	goto	l6594
  2984  000660                     l6594:
  2985                           
  2986                           ;doprnt.c: 1469: }
  2987                           ;doprnt.c: 1472: prec = c;
  2988  000660  C038  F032         	movff	printf@c,printf@prec
  2989                           
  2990                           ;doprnt.c: 1474: while(prec--) {
  2991  000664  D053               	goto	l6608
  2992                           
  2993                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2994  000666  D045               	goto	l6604
  2995  000668                     l6596:
  2996                           
  2997                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2998  000668  5032               	movf	printf@prec,w,c
  2999  00066A  0D02               	mullw	2
  3000  00066C  0E04               	movlw	low _dpowers
  3001  00066E  24F3               	addwf	prodl,w,c
  3002  000670  6EF6               	movwf	tblptrl,c
  3003  000672  0EFF               	movlw	high _dpowers
  3004  000674  20F4               	addwfc	prodh,w,c
  3005  000676  6EF7               	movwf	tblptrh,c
  3006  000678                     	if	0	;There are less than 3 active tblptr bytes
  3007  000678                     	endif
  3008  000678  0009               	tblrd		*+
  3009  00067A  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3010  00067E  000A               	tblrd		*-
  3011  000680  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3012  000684  C033  F011         	movff	printf@val,___lwdiv@dividend
  3013  000688  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3014  00068C  ECBB  F00E         	call	___lwdiv	;wreg free
  3015  000690  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  3016  000694  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  3017  000698  0E00               	movlw	0
  3018  00069A  6E1B               	movwf	___lwmod@divisor+1,c
  3019  00069C  0E0A               	movlw	10
  3020  00069E  6E1A               	movwf	___lwmod@divisor,c
  3021  0006A0  EC61  F00F         	call	___lwmod	;wreg free
  3022  0006A4  5018               	movf	?___lwmod,w,c
  3023  0006A6  0F30               	addlw	48
  3024  0006A8  6E38               	movwf	printf@c,c
  3025                           
  3026                           ;doprnt.c: 1491: break;
  3027  0006AA  D02C               	goto	l6606
  3028  0006AC                     l6598:
  3029                           
  3030                           ;doprnt.c: 1499: {
  3031                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3032  0006AC  C033  F011         	movff	printf@val,___lwdiv@dividend
  3033  0006B0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  3034  0006B4  5032               	movf	printf@prec,w,c
  3035  0006B6  0D02               	mullw	2
  3036  0006B8  0E0E               	movlw	low _hexpowers
  3037  0006BA  24F3               	addwf	prodl,w,c
  3038  0006BC  6EF6               	movwf	tblptrl,c
  3039  0006BE  0EFF               	movlw	high _hexpowers
  3040  0006C0  20F4               	addwfc	prodh,w,c
  3041  0006C2  6EF7               	movwf	tblptrh,c
  3042  0006C4                     	if	0	;There are less than 3 active tblptr bytes
  3043  0006C4                     	endif
  3044  0006C4  0009               	tblrd		*+
  3045  0006C6  CFF5 F013          	movff	tablat,___lwdiv@divisor
  3046  0006CA  000A               	tblrd		*-
  3047  0006CC  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  3048  0006D0  ECBB  F00E         	call	___lwdiv	;wreg free
  3049  0006D4  5011               	movf	?___lwdiv,w,c
  3050  0006D6  0B0F               	andlw	15
  3051  0006D8  6E2F               	movwf	printf@idx,c
  3052                           
  3053                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3054  0006DA  502F               	movf	printf@idx,w,c
  3055  0006DC  0D01               	mullw	1
  3056  0006DE  0EA0               	movlw	low STR_19
  3057  0006E0  24F3               	addwf	prodl,w,c
  3058  0006E2  6EF6               	movwf	tblptrl,c
  3059  0006E4  0EFF               	movlw	high STR_19
  3060  0006E6  20F4               	addwfc	prodh,w,c
  3061  0006E8  6EF7               	movwf	tblptrh,c
  3062  0006EA                     	if	0	;There are less than 3 active tblptr bytes
  3063  0006EA                     	endif
  3064  0006EA  0008               	tblrd		*
  3065  0006EC  CFF5 F038          	movff	tablat,printf@c
  3066                           
  3067                           ;doprnt.c: 1523: }
  3068                           
  3069                           ;doprnt.c: 1508: }
  3070                           ;doprnt.c: 1510: break;
  3071  0006F0  D009               	goto	l6606
  3072  0006F2                     l6604:
  3073  0006F2  5035               	movf	printf@flag,w,c
  3074  0006F4  0B80               	andlw	128
  3075                           
  3076                           ; Switch size 1, requested type "space"
  3077                           ; Number of cases is 2, Range of values is 0 to 128
  3078                           ; switch strategies available:
  3079                           ; Name         Instructions Cycles
  3080                           ; simple_byte            7     4 (average)
  3081                           ;	Chosen strategy is simple_byte
  3082  0006F6  0A00               	xorlw	0	; case 0
  3083  0006F8  B4D8               	btfsc	status,2,c
  3084  0006FA  D7B6               	goto	l6596
  3085  0006FC  0A80               	xorlw	128	; case 128
  3086  0006FE  B4D8               	btfsc	status,2,c
  3087  000700  D7D5               	goto	l6598
  3088  000702  D000               	goto	l6606
  3089  000704                     l6606:
  3090                           
  3091                           ;doprnt.c: 1524: (putch(c) );
  3092  000704  5038               	movf	printf@c,w,c
  3093  000706  ECF4  F011         	call	_putch
  3094  00070A  D000               	goto	l6608
  3095  00070C                     l6608:
  3096  00070C  0632               	decf	printf@prec,f,c
  3097  00070E  2832               	incf	printf@prec,w,c
  3098  000710  B4D8               	btfsc	status,2,c
  3099  000712  D002               	goto	l6610
  3100  000714  D7EE               	goto	l6604
  3101  000716  D000               	goto	l6610
  3102  000718                     l6610:
  3103  000718  C01D  FFF6         	movff	printf@f,tblptrl
  3104  00071C  C01E  FFF7         	movff	printf@f+1,tblptrh
  3105  000720  4A1D               	infsnz	printf@f,f,c
  3106  000722  2A1E               	incf	printf@f+1,f,c
  3107  000724                     	if	0	;tblptru may be non-zero
  3108  000724                     	endif
  3109  000724                     	if	0	;tblptru may be non-zero
  3110  000724                     	endif
  3111  000724  0008               	tblrd		*
  3112  000726  CFF5 F038          	movff	tablat,printf@c
  3113  00072A  5038               	movf	printf@c,w,c
  3114  00072C  B4D8               	btfsc	status,2,c
  3115  00072E  D002               	goto	l834
  3116  000730  D65A               	goto	l6484
  3117  000732  D000               	goto	l834
  3118  000734                     l834:
  3119  000734  0012               	return		;funcret
  3120  000736                     __end_of_printf:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           prodh	equ	0xFF4
  3127                           prodl	equ	0xFF3
  3128                           intcon	equ	0xFF2
  3129                           intcon2	equ	0xFF1
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postdec1	equ	0xFE5
  3133                           fsr1l	equ	0xFE1
  3134                           postinc2	equ	0xFDE
  3135                           postdec2	equ	0xFDD
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _putch *****************
  3141 ;; Defined at:
  3142 ;;		line 112 in file "Lab11_ex.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  c               1    wreg     unsigned char 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  c               1   16[COMRAM] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;		None               void
  3149 ;; Registers used:
  3150 ;;		wreg
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;Total ram usage:        1 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    3
  3163 ;; This function calls:
  3164 ;;		Nothing
  3165 ;; This function is called by:
  3166 ;;		_printf
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text2
  3171  0023E8                     __ptext2:
  3172                           	opt stack 0
  3173  0023E8                     _putch:
  3174                           	opt stack 26
  3175                           
  3176                           ;incstack = 0
  3177                           ;putch@c stored from wreg
  3178  0023E8  6E11               	movwf	putch@c,c
  3179                           
  3180                           ;Lab11_ex.c: 114: while (!TRMT);
  3181  0023EA  D000               	goto	l437
  3182  0023EC                     l437:
  3183  0023EC  A2AC               	btfss	4012,1,c	;volatile
  3184  0023EE  D7FE               	goto	l437
  3185                           
  3186                           ;Lab11_ex.c: 115: TXREG = c;
  3187  0023F0  C011  FFAD         	movff	putch@c,4013	;volatile
  3188  0023F4  0012               	return		;funcret
  3189  0023F6                     __end_of_putch:
  3190                           	opt stack 0
  3191                           tblptru	equ	0xFF8
  3192                           tblptrh	equ	0xFF7
  3193                           tblptrl	equ	0xFF6
  3194                           tablat	equ	0xFF5
  3195                           prodh	equ	0xFF4
  3196                           prodl	equ	0xFF3
  3197                           intcon	equ	0xFF2
  3198                           intcon2	equ	0xFF1
  3199                           postinc0	equ	0xFEE
  3200                           wreg	equ	0xFE8
  3201                           postdec1	equ	0xFE5
  3202                           fsr1l	equ	0xFE1
  3203                           postinc2	equ	0xFDE
  3204                           postdec2	equ	0xFDD
  3205                           fsr2h	equ	0xFDA
  3206                           fsr2l	equ	0xFD9
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _isdigit *****************
  3210 ;; Defined at:
  3211 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;  c               1    wreg     unsigned char 
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  c               1   18[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;Total ram usage:        3 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    3
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_printf
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text3
  3240  00224E                     __ptext3:
  3241                           	opt stack 0
  3242  00224E                     _isdigit:
  3243                           	opt stack 26
  3244                           
  3245                           ;incstack = 0
  3246                           ;isdigit@c stored from wreg
  3247  00224E  6E13               	movwf	isdigit@c,c
  3248  002250  0E00               	movlw	0
  3249  002252  6E12               	movwf	_isdigit$2492,c
  3250  002254  0E3A               	movlw	58
  3251  002256  6013               	cpfslt	isdigit@c,c
  3252  002258  D006               	goto	l6150
  3253  00225A  0E2F               	movlw	47
  3254  00225C  6413               	cpfsgt	isdigit@c,c
  3255  00225E  D003               	goto	l6150
  3256  002260  0E01               	movlw	1
  3257  002262  6E12               	movwf	_isdigit$2492,c
  3258  002264  D000               	goto	l6150
  3259  002266                     l6150:
  3260  002266  C012  F011         	movff	_isdigit$2492,??_isdigit
  3261  00226A  3011               	rrcf	??_isdigit,w,c
  3262  00226C  D000               	goto	l1301
  3263  00226E                     l1301:
  3264  00226E  0012               	return		;funcret
  3265  002270                     __end_of_isdigit:
  3266                           	opt stack 0
  3267                           tblptru	equ	0xFF8
  3268                           tblptrh	equ	0xFF7
  3269                           tblptrl	equ	0xFF6
  3270                           tablat	equ	0xFF5
  3271                           prodh	equ	0xFF4
  3272                           prodl	equ	0xFF3
  3273                           intcon	equ	0xFF2
  3274                           intcon2	equ	0xFF1
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postdec1	equ	0xFE5
  3278                           fsr1l	equ	0xFE1
  3279                           postinc2	equ	0xFDE
  3280                           postdec2	equ	0xFDD
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function ___lwmod *****************
  3286 ;; Defined at:
  3287 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  dividend        2   23[COMRAM] unsigned int 
  3290 ;;  divisor         2   25[COMRAM] unsigned int 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  counter         1   27[COMRAM] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  2   23[COMRAM] unsigned int 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3302 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;Total ram usage:        5 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    3
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_printf
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           	psect	text4
  3317  001EC2                     __ptext4:
  3318                           	opt stack 0
  3319  001EC2                     ___lwmod:
  3320                           	opt stack 26
  3321                           
  3322                           ;incstack = 0
  3323  001EC2  501A               	movf	___lwmod@divisor,w,c
  3324  001EC4  101B               	iorwf	___lwmod@divisor+1,w,c
  3325  001EC6  B4D8               	btfsc	status,2,c
  3326  001EC8  D01D               	goto	l1403
  3327  001ECA  0E01               	movlw	1
  3328  001ECC  6E1C               	movwf	___lwmod@counter,c
  3329  001ECE  D005               	goto	l6262
  3330  001ED0                     l6260:
  3331  001ED0  90D8               	bcf	status,0,c
  3332  001ED2  361A               	rlcf	___lwmod@divisor,f,c
  3333  001ED4  361B               	rlcf	___lwmod@divisor+1,f,c
  3334  001ED6  2A1C               	incf	___lwmod@counter,f,c
  3335  001ED8  D000               	goto	l6262
  3336  001EDA                     l6262:
  3337  001EDA  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3338  001EDC  D002               	goto	l6264
  3339  001EDE  D7F8               	goto	l6260
  3340  001EE0  D000               	goto	l6264
  3341  001EE2                     l6264:
  3342  001EE2  501A               	movf	___lwmod@divisor,w,c
  3343  001EE4  5C18               	subwf	___lwmod@dividend,w,c
  3344  001EE6  501B               	movf	___lwmod@divisor+1,w,c
  3345  001EE8  5819               	subwfb	___lwmod@dividend+1,w,c
  3346  001EEA  A0D8               	btfss	status,0,c
  3347  001EEC  D005               	goto	l6268
  3348  001EEE  501A               	movf	___lwmod@divisor,w,c
  3349  001EF0  5E18               	subwf	___lwmod@dividend,f,c
  3350  001EF2  501B               	movf	___lwmod@divisor+1,w,c
  3351  001EF4  5A19               	subwfb	___lwmod@dividend+1,f,c
  3352  001EF6  D000               	goto	l6268
  3353  001EF8                     l6268:
  3354  001EF8  90D8               	bcf	status,0,c
  3355  001EFA  321B               	rrcf	___lwmod@divisor+1,f,c
  3356  001EFC  321A               	rrcf	___lwmod@divisor,f,c
  3357  001EFE  2E1C               	decfsz	___lwmod@counter,f,c
  3358  001F00  D7F0               	goto	l6264
  3359  001F02  D000               	goto	l1403
  3360  001F04                     l1403:
  3361  001F04  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3362  001F08  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3363  001F0C  0012               	return		;funcret
  3364  001F0E                     __end_of___lwmod:
  3365                           	opt stack 0
  3366                           tblptru	equ	0xFF8
  3367                           tblptrh	equ	0xFF7
  3368                           tblptrl	equ	0xFF6
  3369                           tablat	equ	0xFF5
  3370                           prodh	equ	0xFF4
  3371                           prodl	equ	0xFF3
  3372                           intcon	equ	0xFF2
  3373                           intcon2	equ	0xFF1
  3374                           postinc0	equ	0xFEE
  3375                           wreg	equ	0xFE8
  3376                           postdec1	equ	0xFE5
  3377                           fsr1l	equ	0xFE1
  3378                           postinc2	equ	0xFDE
  3379                           postdec2	equ	0xFDD
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function ___lwdiv *****************
  3385 ;; Defined at:
  3386 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  dividend        2   16[COMRAM] unsigned int 
  3389 ;;  divisor         2   18[COMRAM] unsigned int 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  quotient        2   21[COMRAM] unsigned int 
  3392 ;;  counter         1   20[COMRAM] unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  2   16[COMRAM] unsigned int 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;Total ram usage:        7 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    3
  3409 ;; This function calls:
  3410 ;;		Nothing
  3411 ;; This function is called by:
  3412 ;;		_printf
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text5
  3417  001D76                     __ptext5:
  3418                           	opt stack 0
  3419  001D76                     ___lwdiv:
  3420                           	opt stack 26
  3421                           
  3422                           ;incstack = 0
  3423  001D76  0E00               	movlw	0
  3424  001D78  6E17               	movwf	___lwdiv@quotient+1,c
  3425  001D7A  0E00               	movlw	0
  3426  001D7C  6E16               	movwf	___lwdiv@quotient,c
  3427  001D7E  5013               	movf	___lwdiv@divisor,w,c
  3428  001D80  1014               	iorwf	___lwdiv@divisor+1,w,c
  3429  001D82  B4D8               	btfsc	status,2,c
  3430  001D84  D021               	goto	l1393
  3431  001D86  0E01               	movlw	1
  3432  001D88  6E15               	movwf	___lwdiv@counter,c
  3433  001D8A  D005               	goto	l6242
  3434  001D8C                     l6240:
  3435  001D8C  90D8               	bcf	status,0,c
  3436  001D8E  3613               	rlcf	___lwdiv@divisor,f,c
  3437  001D90  3614               	rlcf	___lwdiv@divisor+1,f,c
  3438  001D92  2A15               	incf	___lwdiv@counter,f,c
  3439  001D94  D000               	goto	l6242
  3440  001D96                     l6242:
  3441  001D96  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3442  001D98  D002               	goto	l6244
  3443  001D9A  D7F8               	goto	l6240
  3444  001D9C  D000               	goto	l6244
  3445  001D9E                     l6244:
  3446  001D9E  90D8               	bcf	status,0,c
  3447  001DA0  3616               	rlcf	___lwdiv@quotient,f,c
  3448  001DA2  3617               	rlcf	___lwdiv@quotient+1,f,c
  3449  001DA4  5013               	movf	___lwdiv@divisor,w,c
  3450  001DA6  5C11               	subwf	___lwdiv@dividend,w,c
  3451  001DA8  5014               	movf	___lwdiv@divisor+1,w,c
  3452  001DAA  5812               	subwfb	___lwdiv@dividend+1,w,c
  3453  001DAC  A0D8               	btfss	status,0,c
  3454  001DAE  D006               	goto	l6252
  3455  001DB0  5013               	movf	___lwdiv@divisor,w,c
  3456  001DB2  5E11               	subwf	___lwdiv@dividend,f,c
  3457  001DB4  5014               	movf	___lwdiv@divisor+1,w,c
  3458  001DB6  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3459  001DB8  8016               	bsf	___lwdiv@quotient,0,c
  3460  001DBA  D000               	goto	l6252
  3461  001DBC                     l6252:
  3462  001DBC  90D8               	bcf	status,0,c
  3463  001DBE  3214               	rrcf	___lwdiv@divisor+1,f,c
  3464  001DC0  3213               	rrcf	___lwdiv@divisor,f,c
  3465  001DC2  2E15               	decfsz	___lwdiv@counter,f,c
  3466  001DC4  D7EC               	goto	l6244
  3467  001DC6  D000               	goto	l1393
  3468  001DC8                     l1393:
  3469  001DC8  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3470  001DCC  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3471  001DD0  0012               	return		;funcret
  3472  001DD2                     __end_of___lwdiv:
  3473                           	opt stack 0
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           intcon	equ	0xFF2
  3481                           intcon2	equ	0xFF1
  3482                           postinc0	equ	0xFEE
  3483                           wreg	equ	0xFE8
  3484                           postdec1	equ	0xFE5
  3485                           fsr1l	equ	0xFE1
  3486                           postinc2	equ	0xFDE
  3487                           postdec2	equ	0xFDD
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _get_RPM *****************
  3493 ;; Defined at:
  3494 ;;		line 10 in file "Fan_Support.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  RPS             2   32[COMRAM] int 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  2   30[COMRAM] int 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3508 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;Total ram usage:        4 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    4
  3515 ;; This function calls:
  3516 ;;		___awdiv
  3517 ;;		___wmul
  3518 ;; This function is called by:
  3519 ;;		_main
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text6
  3524  001FA0                     __ptext6:
  3525                           	opt stack 0
  3526  001FA0                     _get_RPM:
  3527                           	opt stack 26
  3528                           
  3529                           ;Fan_Support.c: 12: int RPS = TMR3L / 2;
  3530                           
  3531                           ;incstack = 0
  3532  001FA0  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3533  001FA4  6A18               	clrf	___awdiv@dividend+1,c
  3534  001FA6  0E00               	movlw	0
  3535  001FA8  6E1A               	movwf	___awdiv@divisor+1,c
  3536  001FAA  0E02               	movlw	2
  3537  001FAC  6E19               	movwf	___awdiv@divisor,c
  3538  001FAE  EC2A  F00C         	call	___awdiv	;wreg free
  3539  001FB2  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3540  001FB6  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3541                           
  3542                           ;Fan_Support.c: 14: TMR3L = 0;
  3543  001FBA  0E00               	movlw	0
  3544  001FBC  6EB2               	movwf	4018,c	;volatile
  3545                           
  3546                           ;Fan_Support.c: 15: return (RPS * 60);
  3547  001FBE  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3548  001FC2  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3549  001FC6  0E00               	movlw	0
  3550  001FC8  6E14               	movwf	___wmul@multiplicand+1,c
  3551  001FCA  0E3C               	movlw	60
  3552  001FCC  6E13               	movwf	___wmul@multiplicand,c
  3553  001FCE  ECC9  F010         	call	___wmul	;wreg free
  3554  001FD2  C011  F01F         	movff	?___wmul,?_get_RPM
  3555  001FD6  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3556  001FDA  D000               	goto	l35
  3557  001FDC                     l35:
  3558  001FDC  0012               	return		;funcret
  3559  001FDE                     __end_of_get_RPM:
  3560                           	opt stack 0
  3561                           tblptru	equ	0xFF8
  3562                           tblptrh	equ	0xFF7
  3563                           tblptrl	equ	0xFF6
  3564                           tablat	equ	0xFF5
  3565                           prodh	equ	0xFF4
  3566                           prodl	equ	0xFF3
  3567                           intcon	equ	0xFF2
  3568                           intcon2	equ	0xFF1
  3569                           postinc0	equ	0xFEE
  3570                           wreg	equ	0xFE8
  3571                           postdec1	equ	0xFE5
  3572                           fsr1l	equ	0xFE1
  3573                           postinc2	equ	0xFDE
  3574                           postdec2	equ	0xFDD
  3575                           fsr2h	equ	0xFDA
  3576                           fsr2l	equ	0xFD9
  3577                           status	equ	0xFD8
  3578                           
  3579 ;; *************** function _Update_Screen *****************
  3580 ;; Defined at:
  3581 ;;		line 69 in file "Main_Screen.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;		None
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  neg_tempF       2    7[BANK1 ] int 
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  2  318[None  ] int 
  3588 ;; Registers used:
  3589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;Total ram usage:        4 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:   10
  3602 ;; This function calls:
  3603 ;;		___awdiv
  3604 ;;		___awmod
  3605 ;;		_drawtext
  3606 ;;		_strcpy
  3607 ;; This function is called by:
  3608 ;;		_main
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text7
  3613  00001C                     __ptext7:
  3614                           	opt stack 0
  3615  00001C                     _Update_Screen:
  3616                           	opt stack 20
  3617                           
  3618                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3619                           
  3620                           ;incstack = 0
  3621  00001C  AE42               	btfss	_DS1621_tempC,7,c
  3622  00001E  D01C               	goto	l6620
  3623                           
  3624                           ;Main_Screen.c: 72: {
  3625                           ;Main_Screen.c: 73: tempC[0] = '-';
  3626  000020  0E2D               	movlw	45
  3627  000022  0100               	movlb	0	; () banked
  3628  000024  6FEB               	movwf	_tempC& (0+255),b
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3632  000026  0E7F               	movlw	127
  3633  000028  1442               	andwf	_DS1621_tempC,w,c
  3634  00002A  6E17               	movwf	___awdiv@dividend,c
  3635  00002C  6A18               	clrf	___awdiv@dividend+1,c
  3636  00002E  0E00               	movlw	0
  3637  000030  6E1A               	movwf	___awdiv@divisor+1,c
  3638  000032  0E0A               	movlw	10
  3639  000034  6E19               	movwf	___awdiv@divisor,c
  3640  000036  EC2A  F00C         	call	___awdiv	;wreg free
  3641  00003A  5017               	movf	?___awdiv,w,c
  3642  00003C  0F30               	addlw	48
  3643  00003E  0100               	movlb	0	; () banked
  3644  000040  6FEC               	movwf	(_tempC+1)& (0+255),b
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3648  000042  0E7F               	movlw	127
  3649  000044  1442               	andwf	_DS1621_tempC,w,c
  3650  000046  6E1F               	movwf	___awmod@dividend,c
  3651  000048  6A20               	clrf	___awmod@dividend+1,c
  3652  00004A  0E00               	movlw	0
  3653  00004C  6E22               	movwf	___awmod@divisor+1,c
  3654  00004E  0E0A               	movlw	10
  3655  000050  6E21               	movwf	___awmod@divisor,c
  3656  000052  ECFA  F00C         	call	___awmod	;wreg free
  3657  000056  D01B               	goto	L2
  3658  000058                     l6620:
  3659                           
  3660                           ;Main_Screen.c: 77: else
  3661                           ;Main_Screen.c: 78: {
  3662                           ;Main_Screen.c: 79: tempC[0] = '+';
  3663  000058  0E2B               	movlw	43
  3664  00005A  0100               	movlb	0	; () banked
  3665  00005C  6FEB               	movwf	_tempC& (0+255),b
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3669  00005E  C042  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3670  000062  C043  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3671  000066  0E00               	movlw	0
  3672  000068  6E1A               	movwf	___awdiv@divisor+1,c
  3673  00006A  0E0A               	movlw	10
  3674  00006C  6E19               	movwf	___awdiv@divisor,c
  3675  00006E  EC2A  F00C         	call	___awdiv	;wreg free
  3676  000072  5017               	movf	?___awdiv,w,c
  3677  000074  0F30               	addlw	48
  3678  000076  0100               	movlb	0	; () banked
  3679  000078  6FEC               	movwf	(_tempC+1)& (0+255),b
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3683  00007A  C042  F01F         	movff	_DS1621_tempC,___awmod@dividend
  3684  00007E  C043  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3685  000082  0E00               	movlw	0
  3686  000084  6E22               	movwf	___awmod@divisor+1,c
  3687  000086  0E0A               	movlw	10
  3688  000088  6E21               	movwf	___awmod@divisor,c
  3689  00008A  ECFA  F00C         	call	___awmod	;wreg free
  3690  00008E                     L2:
  3691  00008E  501F               	movf	?___awmod,w,c
  3692  000090  0F30               	addlw	48
  3693  000092  0100               	movlb	0	; () banked
  3694  000094  6FED               	movwf	(_tempC+2)& (0+255),b
  3695  000096  D000               	goto	l6626
  3696  000098                     l6626:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;Main_Screen.c: 82: }
  3700                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3701  000098  AE45               	btfss	_DS1621_tempF+1,7,c
  3702  00009A  D029               	goto	l6636
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;Main_Screen.c: 85: {
  3706                           ;Main_Screen.c: 86: tempF[0] = '-';
  3707  00009C  0E2D               	movlw	45
  3708  00009E  0100               	movlb	0	; () banked
  3709  0000A0  6FEF               	movwf	_tempF& (0+255),b
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3713  0000A2  C044  F0FD         	movff	_DS1621_tempF,??_Update_Screen
  3714  0000A6  C045  F0FE         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3715  0000AA  0100               	movlb	0	; () banked
  3716  0000AC  1FFD               	comf	??_Update_Screen& (0+255),f,b
  3717  0000AE  1FFE               	comf	(??_Update_Screen+1)& (0+255),f,b
  3718  0000B0  4BFD               	infsnz	??_Update_Screen& (0+255),f,b
  3719  0000B2  2BFE               	incf	(??_Update_Screen+1)& (0+255),f,b
  3720  0000B4  C0FD  F128         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3721  0000B8  C0FE  F129         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3725  0000BC  C128  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3726  0000C0  C129  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3727  0000C4  0E00               	movlw	0
  3728  0000C6  6E1A               	movwf	___awdiv@divisor+1,c
  3729  0000C8  0E0A               	movlw	10
  3730  0000CA  6E19               	movwf	___awdiv@divisor,c
  3731  0000CC  EC2A  F00C         	call	___awdiv	;wreg free
  3732  0000D0  5017               	movf	?___awdiv,w,c
  3733  0000D2  0F30               	addlw	48
  3734  0000D4  0100               	movlb	0	; () banked
  3735  0000D6  6FF0               	movwf	(_tempF+1)& (0+255),b
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3739  0000D8  C128  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3740  0000DC  C129  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3741  0000E0  0E00               	movlw	0
  3742  0000E2  6E22               	movwf	___awmod@divisor+1,c
  3743  0000E4  0E0A               	movlw	10
  3744  0000E6  6E21               	movwf	___awmod@divisor,c
  3745  0000E8  ECFA  F00C         	call	___awmod	;wreg free
  3746  0000EC  D01B               	goto	L3
  3747  0000EE                     l6636:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;Main_Screen.c: 92: else
  3751                           ;Main_Screen.c: 93: {
  3752                           ;Main_Screen.c: 94: tempF[0] = '+';
  3753  0000EE  0E2B               	movlw	43
  3754  0000F0  0100               	movlb	0	; () banked
  3755  0000F2  6FEF               	movwf	_tempF& (0+255),b
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;Main_Screen.c: 95: tempF[1] = DS1621_tempF/10 + '0';
  3759  0000F4  C044  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3760  0000F8  C045  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3761  0000FC  0E00               	movlw	0
  3762  0000FE  6E1A               	movwf	___awdiv@divisor+1,c
  3763  000100  0E0A               	movlw	10
  3764  000102  6E19               	movwf	___awdiv@divisor,c
  3765  000104  EC2A  F00C         	call	___awdiv	;wreg free
  3766  000108  5017               	movf	?___awdiv,w,c
  3767  00010A  0F30               	addlw	48
  3768  00010C  0100               	movlb	0	; () banked
  3769  00010E  6FF0               	movwf	(_tempF+1)& (0+255),b
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;Main_Screen.c: 96: tempF[2] = DS1621_tempF%10 + '0';
  3773  000110  C044  F01F         	movff	_DS1621_tempF,___awmod@dividend
  3774  000114  C045  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3775  000118  0E00               	movlw	0
  3776  00011A  6E22               	movwf	___awmod@divisor+1,c
  3777  00011C  0E0A               	movlw	10
  3778  00011E  6E21               	movwf	___awmod@divisor,c
  3779  000120  ECFA  F00C         	call	___awmod	;wreg free
  3780  000124                     L3:
  3781  000124  501F               	movf	?___awmod,w,c
  3782  000126  0F30               	addlw	48
  3783  000128  0100               	movlb	0	; () banked
  3784  00012A  6FF1               	movwf	(_tempF+2)& (0+255),b
  3785  00012C  D000               	goto	l6642
  3786  00012E                     l6642:
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;Main_Screen.c: 97: }
  3790                           ;Main_Screen.c: 99: time[0] = (hour>>4) + '0';
  3791  00012E  3869               	swapf	_hour,w,c
  3792  000130  0B0F               	andlw	15
  3793  000132  0F30               	addlw	48
  3794  000134  0100               	movlb	0	; () banked
  3795  000136  6FD5               	movwf	_time& (0+255),b
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;Main_Screen.c: 100: time[1] = (hour & 0x0f)+ '0';
  3799  000138  5069               	movf	_hour,w,c
  3800  00013A  0B0F               	andlw	15
  3801  00013C  0F30               	addlw	48
  3802  00013E  0100               	movlb	0	; () banked
  3803  000140  6FD6               	movwf	(_time+1)& (0+255),b
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;Main_Screen.c: 103: time[3] = (minute>>4) + '0';
  3807  000142  386A               	swapf	_minute,w,c
  3808  000144  0B0F               	andlw	15
  3809  000146  0F30               	addlw	48
  3810  000148  0100               	movlb	0	; () banked
  3811  00014A  6FD8               	movwf	(_time+3)& (0+255),b
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;Main_Screen.c: 104: time[4] = (minute & 0x0f)+ '0'; ;
  3815  00014C  506A               	movf	_minute,w,c
  3816  00014E  0B0F               	andlw	15
  3817  000150  0F30               	addlw	48
  3818  000152  0100               	movlb	0	; () banked
  3819  000154  6FD9               	movwf	(_time+4)& (0+255),b
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;Main_Screen.c: 106: time[6] = (second>>4) + '0';
  3823  000156  385D               	swapf	_second,w,c
  3824  000158  0B0F               	andlw	15
  3825  00015A  0F30               	addlw	48
  3826  00015C  0100               	movlb	0	; () banked
  3827  00015E  6FDB               	movwf	(_time+6)& (0+255),b
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;Main_Screen.c: 107: time[7] = (second & 0x0f)+ '0'; ;
  3831  000160  505D               	movf	_second,w,c
  3832  000162  0B0F               	andlw	15
  3833  000164  0F30               	addlw	48
  3834  000166  0100               	movlb	0	; () banked
  3835  000168  6FDC               	movwf	(_time+7)& (0+255),b
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;Main_Screen.c: 109: date[0] = (month >> 4) + '0';
  3839  00016A  386B               	swapf	_month,w,c
  3840  00016C  0B0F               	andlw	15
  3841  00016E  0F30               	addlw	48
  3842  000170  0100               	movlb	0	; () banked
  3843  000172  6FCC               	movwf	_date& (0+255),b
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;Main_Screen.c: 110: date[1] = (month & 0x0f) + '0';
  3847  000174  506B               	movf	_month,w,c
  3848  000176  0B0F               	andlw	15
  3849  000178  0F30               	addlw	48
  3850  00017A  0100               	movlb	0	; () banked
  3851  00017C  6FCD               	movwf	(_date+1)& (0+255),b
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;Main_Screen.c: 111: date[3] = (day >> 4) + '0';
  3855  00017E  3867               	swapf	_day,w,c
  3856  000180  0B0F               	andlw	15
  3857  000182  0F30               	addlw	48
  3858  000184  0100               	movlb	0	; () banked
  3859  000186  6FCF               	movwf	(_date+3)& (0+255),b
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;Main_Screen.c: 112: date[4] = (day & 0x0f) + '0';
  3863  000188  5067               	movf	_day,w,c
  3864  00018A  0B0F               	andlw	15
  3865  00018C  0F30               	addlw	48
  3866  00018E  0100               	movlb	0	; () banked
  3867  000190  6FD0               	movwf	(_date+4)& (0+255),b
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;Main_Screen.c: 113: date[6] = (year >> 4) + '0';
  3871  000192  386F               	swapf	_year,w,c
  3872  000194  0B0F               	andlw	15
  3873  000196  0F30               	addlw	48
  3874  000198  0100               	movlb	0	; () banked
  3875  00019A  6FD2               	movwf	(_date+6)& (0+255),b
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;Main_Screen.c: 114: date[7] = (year & 0x0f) + '0';
  3879  00019C  506F               	movf	_year,w,c
  3880  00019E  0B0F               	andlw	15
  3881  0001A0  0F30               	addlw	48
  3882  0001A2  0100               	movlb	0	; () banked
  3883  0001A4  6FD3               	movwf	(_date+7)& (0+255),b
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;Main_Screen.c: 117: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3887  0001A6  0450               	decf	_FAN,w,c
  3888  0001A8  A4D8               	btfss	status,2,c
  3889  0001AA  D00B               	goto	l6670
  3890                           
  3891                           ; BSR set to: 0
  3892  0001AC  0EE7               	movlw	low _Fan_SW_Txt
  3893  0001AE  6E11               	movwf	strcpy@to,c
  3894  0001B0  0E00               	movlw	high _Fan_SW_Txt
  3895  0001B2  6E12               	movwf	strcpy@to+1,c
  3896  0001B4  0EED               	movlw	low STR_17
  3897  0001B6  6E13               	movwf	strcpy@from,c
  3898  0001B8  0EFF               	movlw	high STR_17
  3899  0001BA  6E14               	movwf	strcpy@from+1,c
  3900  0001BC  EC6A  F010         	call	_strcpy	;wreg free
  3901  0001C0  D00B               	goto	l6672
  3902  0001C2                     l6670:
  3903                           
  3904                           ;Main_Screen.c: 118: else strcpy(Fan_SW_Txt, "OFF");
  3905  0001C2  0EE7               	movlw	low _Fan_SW_Txt
  3906  0001C4  6E11               	movwf	strcpy@to,c
  3907  0001C6  0E00               	movlw	high _Fan_SW_Txt
  3908  0001C8  6E12               	movwf	strcpy@to+1,c
  3909  0001CA  0EF1               	movlw	low STR_18
  3910  0001CC  6E13               	movwf	strcpy@from,c
  3911  0001CE  0EFF               	movlw	high STR_18
  3912  0001D0  6E14               	movwf	strcpy@from+1,c
  3913  0001D2  EC6A  F010         	call	_strcpy	;wreg free
  3914  0001D6  D000               	goto	l6672
  3915  0001D8                     l6672:
  3916                           
  3917                           ;Main_Screen.c: 121: DC_Txt[0] = duty_cycle/100 + '0';
  3918  0001D8  C05A  F017         	movff	_duty_cycle,___awdiv@dividend
  3919  0001DC  6A18               	clrf	___awdiv@dividend+1,c
  3920  0001DE  0E00               	movlw	0
  3921  0001E0  6E1A               	movwf	___awdiv@divisor+1,c
  3922  0001E2  0E64               	movlw	100
  3923  0001E4  6E19               	movwf	___awdiv@divisor,c
  3924  0001E6  EC2A  F00C         	call	___awdiv	;wreg free
  3925  0001EA  5017               	movf	?___awdiv,w,c
  3926  0001EC  0F30               	addlw	48
  3927  0001EE  0100               	movlb	0	; () banked
  3928  0001F0  6FE3               	movwf	_DC_Txt& (0+255),b
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;Main_Screen.c: 123: DC_Txt[1] = ((duty_cycle/10) % 10) + '0';
  3932  0001F2  0E00               	movlw	0
  3933  0001F4  6E1A               	movwf	___awdiv@divisor+1,c
  3934  0001F6  0E0A               	movlw	10
  3935  0001F8  6E19               	movwf	___awdiv@divisor,c
  3936  0001FA  C05A  F017         	movff	_duty_cycle,___awdiv@dividend
  3937  0001FE  6A18               	clrf	___awdiv@dividend+1,c
  3938  000200  EC2A  F00C         	call	___awdiv	;wreg free
  3939  000204  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3940  000208  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3941  00020C  0E00               	movlw	0
  3942  00020E  6E22               	movwf	___awmod@divisor+1,c
  3943  000210  0E0A               	movlw	10
  3944  000212  6E21               	movwf	___awmod@divisor,c
  3945  000214  ECFA  F00C         	call	___awmod	;wreg free
  3946  000218  501F               	movf	?___awmod,w,c
  3947  00021A  0F30               	addlw	48
  3948  00021C  0100               	movlb	0	; () banked
  3949  00021E  6FE4               	movwf	(_DC_Txt+1)& (0+255),b
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;Main_Screen.c: 124: DC_Txt[2] = (duty_cycle % 10) + '0';
  3953  000220  C05A  F01F         	movff	_duty_cycle,___awmod@dividend
  3954  000224  6A20               	clrf	___awmod@dividend+1,c
  3955  000226  0E00               	movlw	0
  3956  000228  6E22               	movwf	___awmod@divisor+1,c
  3957  00022A  0E0A               	movlw	10
  3958  00022C  6E21               	movwf	___awmod@divisor,c
  3959  00022E  ECFA  F00C         	call	___awmod	;wreg free
  3960  000232  501F               	movf	?___awmod,w,c
  3961  000234  0F30               	addlw	48
  3962  000236  0100               	movlb	0	; () banked
  3963  000238  6FE5               	movwf	(_DC_Txt+2)& (0+255),b
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;Main_Screen.c: 127: RPM_Txt[0] = rpm/1000 + '0';
  3967  00023A  C04A  F017         	movff	_rpm,___awdiv@dividend
  3968  00023E  C04B  F018         	movff	_rpm+1,___awdiv@dividend+1
  3969  000242  0E03               	movlw	3
  3970  000244  6E1A               	movwf	___awdiv@divisor+1,c
  3971  000246  0EE8               	movlw	232
  3972  000248  6E19               	movwf	___awdiv@divisor,c
  3973  00024A  EC2A  F00C         	call	___awdiv	;wreg free
  3974  00024E  5017               	movf	?___awdiv,w,c
  3975  000250  0F30               	addlw	48
  3976  000252  0100               	movlb	0	; () banked
  3977  000254  6FDE               	movwf	_RPM_Txt& (0+255),b
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;Main_Screen.c: 129: RPM_Txt[1] = ((rpm/100) % 10) + '0';
  3981  000256  0E00               	movlw	0
  3982  000258  6E1A               	movwf	___awdiv@divisor+1,c
  3983  00025A  0E64               	movlw	100
  3984  00025C  6E19               	movwf	___awdiv@divisor,c
  3985  00025E  C04A  F017         	movff	_rpm,___awdiv@dividend
  3986  000262  C04B  F018         	movff	_rpm+1,___awdiv@dividend+1
  3987  000266  EC2A  F00C         	call	___awdiv	;wreg free
  3988  00026A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3989  00026E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3990  000272  0E00               	movlw	0
  3991  000274  6E22               	movwf	___awmod@divisor+1,c
  3992  000276  0E0A               	movlw	10
  3993  000278  6E21               	movwf	___awmod@divisor,c
  3994  00027A  ECFA  F00C         	call	___awmod	;wreg free
  3995  00027E  501F               	movf	?___awmod,w,c
  3996  000280  0F30               	addlw	48
  3997  000282  0100               	movlb	0	; () banked
  3998  000284  6FDF               	movwf	(_RPM_Txt+1)& (0+255),b
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;Main_Screen.c: 130: RPM_Txt[2] = ((rpm/10) % 10) + '0';
  4002  000286  0E00               	movlw	0
  4003  000288  6E1A               	movwf	___awdiv@divisor+1,c
  4004  00028A  0E0A               	movlw	10
  4005  00028C  6E19               	movwf	___awdiv@divisor,c
  4006  00028E  C04A  F017         	movff	_rpm,___awdiv@dividend
  4007  000292  C04B  F018         	movff	_rpm+1,___awdiv@dividend+1
  4008  000296  EC2A  F00C         	call	___awdiv	;wreg free
  4009  00029A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  4010  00029E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  4011  0002A2  0E00               	movlw	0
  4012  0002A4  6E22               	movwf	___awmod@divisor+1,c
  4013  0002A6  0E0A               	movlw	10
  4014  0002A8  6E21               	movwf	___awmod@divisor,c
  4015  0002AA  ECFA  F00C         	call	___awmod	;wreg free
  4016  0002AE  501F               	movf	?___awmod,w,c
  4017  0002B0  0F30               	addlw	48
  4018  0002B2  0100               	movlb	0	; () banked
  4019  0002B4  6FE0               	movwf	(_RPM_Txt+2)& (0+255),b
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;Main_Screen.c: 131: RPM_Txt[3] = ((rpm) % 10) + '0';
  4023  0002B6  C04A  F01F         	movff	_rpm,___awmod@dividend
  4024  0002BA  C04B  F020         	movff	_rpm+1,___awmod@dividend+1
  4025  0002BE  0E00               	movlw	0
  4026  0002C0  6E22               	movwf	___awmod@divisor+1,c
  4027  0002C2  0E0A               	movlw	10
  4028  0002C4  6E21               	movwf	___awmod@divisor,c
  4029  0002C6  ECFA  F00C         	call	___awmod	;wreg free
  4030  0002CA  501F               	movf	?___awmod,w,c
  4031  0002CC  0F30               	addlw	48
  4032  0002CE  0100               	movlb	0	; () banked
  4033  0002D0  6FE1               	movwf	(_RPM_Txt+3)& (0+255),b
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;Main_Screen.c: 133: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  4037  0002D2  0E17               	movlw	23
  4038  0002D4  6E39               	movwf	drawtext@y,c
  4039  0002D6  0EEB               	movlw	low _tempC
  4040  0002D8  6E3A               	movwf	drawtext@_text,c
  4041  0002DA  0E00               	movlw	high _tempC
  4042  0002DC  6E3B               	movwf	drawtext@_text+1,c
  4043  0002DE  0EFF               	movlw	255
  4044  0002E0  6E3D               	movwf	drawtext@color+1,c
  4045  0002E2  0EE0               	movlw	224
  4046  0002E4  6E3C               	movwf	drawtext@color,c
  4047  0002E6  0E00               	movlw	0
  4048  0002E8  6E3F               	movwf	drawtext@bg+1,c
  4049  0002EA  0E00               	movlw	0
  4050  0002EC  6E3E               	movwf	drawtext@bg,c
  4051  0002EE  0E02               	movlw	2
  4052  0002F0  6E40               	movwf	drawtext@size,c
  4053  0002F2  0E01               	movlw	1
  4054  0002F4  EC0C  F008         	call	_drawtext
  4055                           
  4056                           ;Main_Screen.c: 134: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4057  0002F8  0E17               	movlw	23
  4058  0002FA  6E39               	movwf	drawtext@y,c
  4059  0002FC  0EEF               	movlw	low _tempF
  4060  0002FE  6E3A               	movwf	drawtext@_text,c
  4061  000300  0E00               	movlw	high _tempF
  4062  000302  6E3B               	movwf	drawtext@_text+1,c
  4063  000304  0EFF               	movlw	255
  4064  000306  6E3D               	movwf	drawtext@color+1,c
  4065  000308  0EE0               	movlw	224
  4066  00030A  6E3C               	movwf	drawtext@color,c
  4067  00030C  0E00               	movlw	0
  4068  00030E  6E3F               	movwf	drawtext@bg+1,c
  4069  000310  0E00               	movlw	0
  4070  000312  6E3E               	movwf	drawtext@bg,c
  4071  000314  0E02               	movlw	2
  4072  000316  6E40               	movwf	drawtext@size,c
  4073  000318  0E46               	movlw	70
  4074  00031A  EC0C  F008         	call	_drawtext
  4075                           
  4076                           ;Main_Screen.c: 135: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4077  00031E  0E34               	movlw	52
  4078  000320  6E39               	movwf	drawtext@y,c
  4079  000322  0ED5               	movlw	low _time
  4080  000324  6E3A               	movwf	drawtext@_text,c
  4081  000326  0E00               	movlw	high _time
  4082  000328  6E3B               	movwf	drawtext@_text+1,c
  4083  00032A  0E07               	movlw	7
  4084  00032C  6E3D               	movwf	drawtext@color+1,c
  4085  00032E  683C               	setf	drawtext@color,c
  4086  000330  0E00               	movlw	0
  4087  000332  6E3F               	movwf	drawtext@bg+1,c
  4088  000334  0E00               	movlw	0
  4089  000336  6E3E               	movwf	drawtext@bg,c
  4090  000338  0E02               	movlw	2
  4091  00033A  6E40               	movwf	drawtext@size,c
  4092  00033C  0E0F               	movlw	15
  4093  00033E  EC0C  F008         	call	_drawtext
  4094                           
  4095                           ;Main_Screen.c: 136: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4096  000342  0E52               	movlw	82
  4097  000344  6E39               	movwf	drawtext@y,c
  4098  000346  0ECC               	movlw	low _date
  4099  000348  6E3A               	movwf	drawtext@_text,c
  4100  00034A  0E00               	movlw	high _date
  4101  00034C  6E3B               	movwf	drawtext@_text+1,c
  4102  00034E  0E07               	movlw	7
  4103  000350  6E3D               	movwf	drawtext@color+1,c
  4104  000352  0EE0               	movlw	224
  4105  000354  6E3C               	movwf	drawtext@color,c
  4106  000356  0E00               	movlw	0
  4107  000358  6E3F               	movwf	drawtext@bg+1,c
  4108  00035A  0E00               	movlw	0
  4109  00035C  6E3E               	movwf	drawtext@bg,c
  4110  00035E  0E02               	movlw	2
  4111  000360  6E40               	movwf	drawtext@size,c
  4112  000362  0E0F               	movlw	15
  4113  000364  EC0C  F008         	call	_drawtext
  4114                           
  4115                           ;Main_Screen.c: 138: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4116  000368  0E82               	movlw	130
  4117  00036A  6E39               	movwf	drawtext@y,c
  4118  00036C  0EE7               	movlw	low _Fan_SW_Txt
  4119  00036E  6E3A               	movwf	drawtext@_text,c
  4120  000370  0E00               	movlw	high _Fan_SW_Txt
  4121  000372  6E3B               	movwf	drawtext@_text+1,c
  4122  000374  0EF8               	movlw	248
  4123  000376  6E3D               	movwf	drawtext@color+1,c
  4124  000378  0E00               	movlw	0
  4125  00037A  6E3C               	movwf	drawtext@color,c
  4126  00037C  0E00               	movlw	0
  4127  00037E  6E3F               	movwf	drawtext@bg+1,c
  4128  000380  0E00               	movlw	0
  4129  000382  6E3E               	movwf	drawtext@bg,c
  4130  000384  0E01               	movlw	1
  4131  000386  6E40               	movwf	drawtext@size,c
  4132  000388  0E5F               	movlw	95
  4133  00038A  EC0C  F008         	call	_drawtext
  4134                           
  4135                           ;Main_Screen.c: 139: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4136  00038E  0E96               	movlw	150
  4137  000390  6E39               	movwf	drawtext@y,c
  4138  000392  0EE3               	movlw	low _DC_Txt
  4139  000394  6E3A               	movwf	drawtext@_text,c
  4140  000396  0E00               	movlw	high _DC_Txt
  4141  000398  6E3B               	movwf	drawtext@_text+1,c
  4142  00039A  0E07               	movlw	7
  4143  00039C  6E3D               	movwf	drawtext@color+1,c
  4144  00039E  0EE0               	movlw	224
  4145  0003A0  6E3C               	movwf	drawtext@color,c
  4146  0003A2  0E00               	movlw	0
  4147  0003A4  6E3F               	movwf	drawtext@bg+1,c
  4148  0003A6  0E00               	movlw	0
  4149  0003A8  6E3E               	movwf	drawtext@bg,c
  4150  0003AA  0E01               	movlw	1
  4151  0003AC  6E40               	movwf	drawtext@size,c
  4152  0003AE  0E0A               	movlw	10
  4153  0003B0  EC0C  F008         	call	_drawtext
  4154                           
  4155                           ;Main_Screen.c: 140: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4156  0003B4  0E96               	movlw	150
  4157  0003B6  6E39               	movwf	drawtext@y,c
  4158  0003B8  0EDE               	movlw	low _RPM_Txt
  4159  0003BA  6E3A               	movwf	drawtext@_text,c
  4160  0003BC  0E00               	movlw	high _RPM_Txt
  4161  0003BE  6E3B               	movwf	drawtext@_text+1,c
  4162  0003C0  0E07               	movlw	7
  4163  0003C2  6E3D               	movwf	drawtext@color+1,c
  4164  0003C4  0EE0               	movlw	224
  4165  0003C6  6E3C               	movwf	drawtext@color,c
  4166  0003C8  0E00               	movlw	0
  4167  0003CA  6E3F               	movwf	drawtext@bg+1,c
  4168  0003CC  0E00               	movlw	0
  4169  0003CE  6E3E               	movwf	drawtext@bg,c
  4170  0003D0  0E01               	movlw	1
  4171  0003D2  6E40               	movwf	drawtext@size,c
  4172  0003D4  0E5D               	movlw	93
  4173  0003D6  EC0C  F008         	call	_drawtext
  4174  0003DA  0012               	return		;funcret
  4175  0003DC                     __end_of_Update_Screen:
  4176                           	opt stack 0
  4177                           tblptru	equ	0xFF8
  4178                           tblptrh	equ	0xFF7
  4179                           tblptrl	equ	0xFF6
  4180                           tablat	equ	0xFF5
  4181                           prodh	equ	0xFF4
  4182                           prodl	equ	0xFF3
  4183                           intcon	equ	0xFF2
  4184                           intcon2	equ	0xFF1
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           postdec1	equ	0xFE5
  4188                           fsr1l	equ	0xFE1
  4189                           postinc2	equ	0xFDE
  4190                           postdec2	equ	0xFDD
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function ___awmod *****************
  4196 ;; Defined at:
  4197 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  dividend        2   30[COMRAM] int 
  4200 ;;  divisor         2   32[COMRAM] int 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  sign            1   35[COMRAM] unsigned char 
  4203 ;;  counter         1   34[COMRAM] unsigned char 
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  2   30[COMRAM] int 
  4206 ;; Registers used:
  4207 ;;		wreg, status,2, status,0
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;Total ram usage:        6 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    3
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_Update_Screen
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text8
  4228  0019F4                     __ptext8:
  4229                           	opt stack 0
  4230  0019F4                     ___awmod:
  4231                           	opt stack 26
  4232                           
  4233                           ;incstack = 0
  4234  0019F4  0E00               	movlw	0
  4235  0019F6  6E24               	movwf	___awmod@sign,c
  4236  0019F8  AE20               	btfss	___awmod@dividend+1,7,c
  4237  0019FA  D007               	goto	l6206
  4238  0019FC  6C1F               	negf	___awmod@dividend,c
  4239  0019FE  1E20               	comf	___awmod@dividend+1,f,c
  4240  001A00  B0D8               	btfsc	status,0,c
  4241  001A02  2A20               	incf	___awmod@dividend+1,f,c
  4242  001A04  0E01               	movlw	1
  4243  001A06  6E24               	movwf	___awmod@sign,c
  4244  001A08  D000               	goto	l6206
  4245  001A0A                     l6206:
  4246  001A0A  AE22               	btfss	___awmod@divisor+1,7,c
  4247  001A0C  D005               	goto	l6210
  4248  001A0E  6C21               	negf	___awmod@divisor,c
  4249  001A10  1E22               	comf	___awmod@divisor+1,f,c
  4250  001A12  B0D8               	btfsc	status,0,c
  4251  001A14  2A22               	incf	___awmod@divisor+1,f,c
  4252  001A16  D000               	goto	l6210
  4253  001A18                     l6210:
  4254  001A18  5021               	movf	___awmod@divisor,w,c
  4255  001A1A  1022               	iorwf	___awmod@divisor+1,w,c
  4256  001A1C  B4D8               	btfsc	status,2,c
  4257  001A1E  D01D               	goto	l6226
  4258  001A20  0E01               	movlw	1
  4259  001A22  6E23               	movwf	___awmod@counter,c
  4260  001A24  D005               	goto	l6216
  4261  001A26                     l6214:
  4262  001A26  90D8               	bcf	status,0,c
  4263  001A28  3621               	rlcf	___awmod@divisor,f,c
  4264  001A2A  3622               	rlcf	___awmod@divisor+1,f,c
  4265  001A2C  2A23               	incf	___awmod@counter,f,c
  4266  001A2E  D000               	goto	l6216
  4267  001A30                     l6216:
  4268  001A30  BE22               	btfsc	___awmod@divisor+1,7,c
  4269  001A32  D002               	goto	l6218
  4270  001A34  D7F8               	goto	l6214
  4271  001A36  D000               	goto	l6218
  4272  001A38                     l6218:
  4273  001A38  5021               	movf	___awmod@divisor,w,c
  4274  001A3A  5C1F               	subwf	___awmod@dividend,w,c
  4275  001A3C  5022               	movf	___awmod@divisor+1,w,c
  4276  001A3E  5820               	subwfb	___awmod@dividend+1,w,c
  4277  001A40  A0D8               	btfss	status,0,c
  4278  001A42  D005               	goto	l6222
  4279  001A44  5021               	movf	___awmod@divisor,w,c
  4280  001A46  5E1F               	subwf	___awmod@dividend,f,c
  4281  001A48  5022               	movf	___awmod@divisor+1,w,c
  4282  001A4A  5A20               	subwfb	___awmod@dividend+1,f,c
  4283  001A4C  D000               	goto	l6222
  4284  001A4E                     l6222:
  4285  001A4E  90D8               	bcf	status,0,c
  4286  001A50  3222               	rrcf	___awmod@divisor+1,f,c
  4287  001A52  3221               	rrcf	___awmod@divisor,f,c
  4288  001A54  2E23               	decfsz	___awmod@counter,f,c
  4289  001A56  D7F0               	goto	l6218
  4290  001A58  D000               	goto	l6226
  4291  001A5A                     l6226:
  4292  001A5A  5024               	movf	___awmod@sign,w,c
  4293  001A5C  B4D8               	btfsc	status,2,c
  4294  001A5E  D005               	goto	l6230
  4295  001A60  6C1F               	negf	___awmod@dividend,c
  4296  001A62  1E20               	comf	___awmod@dividend+1,f,c
  4297  001A64  B0D8               	btfsc	status,0,c
  4298  001A66  2A20               	incf	___awmod@dividend+1,f,c
  4299  001A68  D000               	goto	l6230
  4300  001A6A                     l6230:
  4301  001A6A  C01F  F01F         	movff	___awmod@dividend,?___awmod
  4302  001A6E  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  4303  001A72  D000               	goto	l1076
  4304  001A74                     l1076:
  4305  001A74  0012               	return		;funcret
  4306  001A76                     __end_of___awmod:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           intcon2	equ	0xFF1
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           postdec1	equ	0xFE5
  4319                           fsr1l	equ	0xFE1
  4320                           postinc2	equ	0xFDE
  4321                           postdec2	equ	0xFDD
  4322                           fsr2h	equ	0xFDA
  4323                           fsr2l	equ	0xFD9
  4324                           status	equ	0xFD8
  4325                           
  4326 ;; *************** function _Toggle_Fan *****************
  4327 ;; Defined at:
  4328 ;;		line 18 in file "Fan_Support.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;		None
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;		None
  4333 ;; Return value:  Size  Location     Type
  4334 ;;		None               void
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;Total ram usage:        0 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    7
  4349 ;; This function calls:
  4350 ;;		_Turn_Off_Fan
  4351 ;;		_Turn_On_Fan
  4352 ;; This function is called by:
  4353 ;;		_main
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text9
  4358  0022EC                     __ptext9:
  4359                           	opt stack 0
  4360  0022EC                     _Toggle_Fan:
  4361                           	opt stack 23
  4362                           
  4363                           ;Fan_Support.c: 20: if ( FAN == 1 )
  4364                           
  4365                           ;incstack = 0
  4366  0022EC  0450               	decf	_FAN,w,c
  4367  0022EE  A4D8               	btfss	status,2,c
  4368  0022F0  D003               	goto	l6284
  4369                           
  4370                           ;Fan_Support.c: 21: {
  4371                           ;Fan_Support.c: 22: Turn_On_Fan();
  4372  0022F2  ECDC  F011         	call	_Turn_On_Fan	;wreg free
  4373  0022F6  D000               	goto	l6284
  4374  0022F8                     l6284:
  4375                           
  4376                           ;Fan_Support.c: 23: }
  4377                           ;Fan_Support.c: 24: if ( FAN == 0 )
  4378  0022F8  5050               	movf	_FAN,w,c
  4379  0022FA  A4D8               	btfss	status,2,c
  4380  0022FC  D003               	goto	l40
  4381                           
  4382                           ;Fan_Support.c: 25: {
  4383                           ;Fan_Support.c: 26: Turn_Off_Fan();
  4384  0022FE  EC0E  F012         	call	_Turn_Off_Fan	;wreg free
  4385  002302  D000               	goto	l40
  4386  002304                     l40:
  4387  002304  0012               	return		;funcret
  4388  002306                     __end_of_Toggle_Fan:
  4389                           	opt stack 0
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           intcon	equ	0xFF2
  4397                           intcon2	equ	0xFF1
  4398                           postinc0	equ	0xFEE
  4399                           wreg	equ	0xFE8
  4400                           postdec1	equ	0xFE5
  4401                           fsr1l	equ	0xFE1
  4402                           postinc2	equ	0xFDE
  4403                           postdec2	equ	0xFDD
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function _Turn_On_Fan *****************
  4409 ;; Defined at:
  4410 ;;		line 30 in file "Fan_Support.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;		None
  4415 ;; Return value:  Size  Location     Type
  4416 ;;		None               void
  4417 ;; Registers used:
  4418 ;;		wreg, status,2, status,0, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;Total ram usage:        0 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; Hardware stack levels required when called:    6
  4431 ;; This function calls:
  4432 ;;		_do_update_pwm
  4433 ;; This function is called by:
  4434 ;;		_Toggle_Fan
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text10
  4439  0023B8                     __ptext10:
  4440                           	opt stack 0
  4441  0023B8                     _Turn_On_Fan:
  4442                           	opt stack 23
  4443                           
  4444                           ;Fan_Support.c: 32: FAN = 1;
  4445                           
  4446                           ;incstack = 0
  4447  0023B8  0E01               	movlw	1
  4448  0023BA  6E50               	movwf	_FAN,c
  4449                           
  4450                           ;Fan_Support.c: 33: do_update_pwm(duty_cycle);
  4451  0023BC  505A               	movf	_duty_cycle,w,c
  4452  0023BE  ECC9  F00B         	call	_do_update_pwm
  4453                           
  4454                           ;Fan_Support.c: 34: PORTBbits.RB5 = 1;
  4455  0023C2  8A81               	bsf	3969,5,c	;volatile
  4456                           
  4457                           ;Fan_Support.c: 35: PORTEbits.RE1 = 1;
  4458  0023C4  8284               	bsf	3972,1,c	;volatile
  4459  0023C6  0012               	return		;funcret
  4460  0023C8                     __end_of_Turn_On_Fan:
  4461                           	opt stack 0
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           prodh	equ	0xFF4
  4467                           prodl	equ	0xFF3
  4468                           intcon	equ	0xFF2
  4469                           intcon2	equ	0xFF1
  4470                           postinc0	equ	0xFEE
  4471                           wreg	equ	0xFE8
  4472                           postdec1	equ	0xFE5
  4473                           fsr1l	equ	0xFE1
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           fsr2h	equ	0xFDA
  4477                           fsr2l	equ	0xFD9
  4478                           status	equ	0xFD8
  4479                           
  4480 ;; *************** function _Turn_Off_Fan *****************
  4481 ;; Defined at:
  4482 ;;		line 38 in file "Fan_Support.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;		None
  4487 ;; Return value:  Size  Location     Type
  4488 ;;		None               void
  4489 ;; Registers used:
  4490 ;;		wreg, status,2
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;Total ram usage:        0 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    3
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_Toggle_Fan
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text11
  4511  00241C                     __ptext11:
  4512                           	opt stack 0
  4513  00241C                     _Turn_Off_Fan:
  4514                           	opt stack 26
  4515                           
  4516                           ;Fan_Support.c: 40: FAN = 0;
  4517                           
  4518                           ;incstack = 0
  4519  00241C  0E00               	movlw	0
  4520  00241E  6E50               	movwf	_FAN,c
  4521                           
  4522                           ;Fan_Support.c: 41: PORTBbits.RB5 = 0;
  4523  002420  9A81               	bcf	3969,5,c	;volatile
  4524                           
  4525                           ;Fan_Support.c: 42: PORTEbits.RE1 = 0;
  4526  002422  9284               	bcf	3972,1,c	;volatile
  4527  002424  0012               	return		;funcret
  4528  002426                     __end_of_Turn_Off_Fan:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodh	equ	0xFF4
  4535                           prodl	equ	0xFF3
  4536                           intcon	equ	0xFF2
  4537                           intcon2	equ	0xFF1
  4538                           postinc0	equ	0xFEE
  4539                           wreg	equ	0xFE8
  4540                           postdec1	equ	0xFE5
  4541                           fsr1l	equ	0xFE1
  4542                           postinc2	equ	0xFDE
  4543                           postdec2	equ	0xFDD
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8
  4547                           
  4548 ;; *************** function _Set_RPM_RGB *****************
  4549 ;; Defined at:
  4550 ;;		line 100 in file "Fan_Support.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  rpm             2   16[COMRAM] int 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;		None
  4555 ;; Return value:  Size  Location     Type
  4556 ;;		None               void
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4564 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;Total ram usage:        2 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    3
  4571 ;; This function calls:
  4572 ;;		Nothing
  4573 ;; This function is called by:
  4574 ;;		_main
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           	psect	text12
  4579  001B66                     __ptext12:
  4580                           	opt stack 0
  4581  001B66                     _Set_RPM_RGB:
  4582                           	opt stack 27
  4583                           
  4584                           ;Fan_Support.c: 102: if ( rpm == 0 )
  4585                           
  4586                           ;incstack = 0
  4587  001B66  5011               	movf	Set_RPM_RGB@rpm,w,c
  4588  001B68  1012               	iorwf	Set_RPM_RGB@rpm+1,w,c
  4589  001B6A  A4D8               	btfss	status,2,c
  4590  001B6C  D003               	goto	l6318
  4591                           
  4592                           ;Fan_Support.c: 103: {
  4593                           ;Fan_Support.c: 104: PORTDbits.RD5 = 0;
  4594  001B6E  9A83               	bcf	3971,5,c	;volatile
  4595                           
  4596                           ;Fan_Support.c: 105: PORTDbits.RD6 = 0;
  4597  001B70  9C83               	bcf	3971,6,c	;volatile
  4598  001B72  D000               	goto	l6318
  4599  001B74                     l6318:
  4600                           
  4601                           ;Fan_Support.c: 106: }
  4602                           ;Fan_Support.c: 108: if ( (rpm > 0) && (rpm < 1800) )
  4603  001B74  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4604  001B76  D010               	goto	l6324
  4605  001B78  5012               	movf	Set_RPM_RGB@rpm+1,w,c
  4606  001B7A  E103               	bnz	u4980
  4607  001B7C  0411               	decf	Set_RPM_RGB@rpm,w,c
  4608  001B7E  A0D8               	btfss	status,0,c
  4609  001B80  D00B               	goto	l6324
  4610  001B82                     u4980:
  4611  001B82  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4612  001B84  D006               	goto	l6322
  4613  001B86  0E08               	movlw	8
  4614  001B88  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4615  001B8A  0E07               	movlw	7
  4616  001B8C  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4617  001B8E  B0D8               	btfsc	status,0,c
  4618  001B90  D003               	goto	l6324
  4619  001B92                     l6322:
  4620                           
  4621                           ;Fan_Support.c: 109: {
  4622                           ;Fan_Support.c: 110: PORTDbits.RD5 = 1;
  4623  001B92  8A83               	bsf	3971,5,c	;volatile
  4624                           
  4625                           ;Fan_Support.c: 111: PORTDbits.RD6 = 0;
  4626  001B94  9C83               	bcf	3971,6,c	;volatile
  4627  001B96  D000               	goto	l6324
  4628  001B98                     l6324:
  4629                           
  4630                           ;Fan_Support.c: 112: }
  4631                           ;Fan_Support.c: 114: if ( (rpm >= 1800) && (rpm < 2700) )
  4632  001B98  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4633  001B9A  D011               	goto	l6330
  4634  001B9C  0E08               	movlw	8
  4635  001B9E  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4636  001BA0  0E07               	movlw	7
  4637  001BA2  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4638  001BA4  A0D8               	btfss	status,0,c
  4639  001BA6  D00B               	goto	l6330
  4640  001BA8  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4641  001BAA  D006               	goto	l6328
  4642  001BAC  0E8C               	movlw	140
  4643  001BAE  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4644  001BB0  0E0A               	movlw	10
  4645  001BB2  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4646  001BB4  B0D8               	btfsc	status,0,c
  4647  001BB6  D003               	goto	l6330
  4648  001BB8                     l6328:
  4649                           
  4650                           ;Fan_Support.c: 115: {
  4651                           ;Fan_Support.c: 116: PORTDbits.RD5 = 1;
  4652  001BB8  8A83               	bsf	3971,5,c	;volatile
  4653                           
  4654                           ;Fan_Support.c: 117: PORTDbits.RD6 = 1;
  4655  001BBA  8C83               	bsf	3971,6,c	;volatile
  4656  001BBC  D000               	goto	l6330
  4657  001BBE                     l6330:
  4658                           
  4659                           ;Fan_Support.c: 118: }
  4660                           ;Fan_Support.c: 120: if ( (rpm >= 2700) )
  4661  001BBE  BE12               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4662  001BC0  D009               	goto	l74
  4663  001BC2  0E8C               	movlw	140
  4664  001BC4  5C11               	subwf	Set_RPM_RGB@rpm,w,c
  4665  001BC6  0E0A               	movlw	10
  4666  001BC8  5812               	subwfb	Set_RPM_RGB@rpm+1,w,c
  4667  001BCA  A0D8               	btfss	status,0,c
  4668  001BCC  D003               	goto	l74
  4669                           
  4670                           ;Fan_Support.c: 121: {
  4671                           ;Fan_Support.c: 124: PORTDbits.RD5 = 0;
  4672  001BCE  9A83               	bcf	3971,5,c	;volatile
  4673                           
  4674                           ;Fan_Support.c: 125: PORTDbits.RD6 = 1;
  4675  001BD0  8C83               	bsf	3971,6,c	;volatile
  4676  001BD2  D000               	goto	l74
  4677  001BD4                     l74:
  4678  001BD4  0012               	return		;funcret
  4679  001BD6                     __end_of_Set_RPM_RGB:
  4680                           	opt stack 0
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           prodh	equ	0xFF4
  4686                           prodl	equ	0xFF3
  4687                           intcon	equ	0xFF2
  4688                           intcon2	equ	0xFF1
  4689                           postinc0	equ	0xFEE
  4690                           wreg	equ	0xFE8
  4691                           postdec1	equ	0xFE5
  4692                           fsr1l	equ	0xFE1
  4693                           postinc2	equ	0xFDE
  4694                           postdec2	equ	0xFDD
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function _Set_DC_RGB *****************
  4700 ;; Defined at:
  4701 ;;		line 93 in file "Fan_Support.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  duty_cycle      2   30[COMRAM] int 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  index           1   32[COMRAM] unsigned char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;		None               void
  4708 ;; Registers used:
  4709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;Total ram usage:        5 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    4
  4722 ;; This function calls:
  4723 ;;		___awdiv
  4724 ;; This function is called by:
  4725 ;;		_main
  4726 ;; This function uses a non-reentrant model
  4727 ;;
  4728                           
  4729                           	psect	text13
  4730  001C46                     __ptext13:
  4731                           	opt stack 0
  4732  001C46                     _Set_DC_RGB:
  4733                           	opt stack 26
  4734                           
  4735                           ;Fan_Support.c: 95: char index = (duty_cycle / 10 > 7 ? 7: duty_cycle / 10 );
  4736                           
  4737                           ;incstack = 0
  4738  001C46  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4739  001C4A  C020  F018         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4740  001C4E  0E00               	movlw	0
  4741  001C50  6E1A               	movwf	___awdiv@divisor+1,c
  4742  001C52  0E0A               	movlw	10
  4743  001C54  6E19               	movwf	___awdiv@divisor,c
  4744  001C56  EC2A  F00C         	call	___awdiv	;wreg free
  4745  001C5A  BE18               	btfsc	?___awdiv+1,7,c
  4746  001C5C  D006               	goto	l6306
  4747  001C5E  5018               	movf	?___awdiv+1,w,c
  4748  001C60  E113               	bnz	l6308
  4749  001C62  0E08               	movlw	8
  4750  001C64  5C17               	subwf	?___awdiv,w,c
  4751  001C66  B0D8               	btfsc	status,0,c
  4752  001C68  D00F               	goto	l6308
  4753  001C6A                     l6306:
  4754  001C6A  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4755  001C6E  C020  F018         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4756  001C72  0E00               	movlw	0
  4757  001C74  6E1A               	movwf	___awdiv@divisor+1,c
  4758  001C76  0E0A               	movlw	10
  4759  001C78  6E19               	movwf	___awdiv@divisor,c
  4760  001C7A  EC2A  F00C         	call	___awdiv	;wreg free
  4761  001C7E  C017  F022         	movff	?___awdiv,_Set_DC_RGB$405
  4762  001C82  C018  F023         	movff	?___awdiv+1,_Set_DC_RGB$405+1
  4763  001C86  D005               	goto	l6310
  4764  001C88                     l6308:
  4765  001C88  0E00               	movlw	0
  4766  001C8A  6E23               	movwf	_Set_DC_RGB$405+1,c
  4767  001C8C  0E07               	movlw	7
  4768  001C8E  6E22               	movwf	_Set_DC_RGB$405,c
  4769  001C90  D000               	goto	l6310
  4770  001C92                     l6310:
  4771  001C92  C022  F021         	movff	_Set_DC_RGB$405,Set_DC_RGB@index
  4772                           
  4773                           ;Fan_Support.c: 96: PORTA = colors[index];
  4774  001C96  5021               	movf	Set_DC_RGB@index,w,c
  4775  001C98  0D01               	mullw	1
  4776  001C9A  0EB9               	movlw	low _colors
  4777  001C9C  24F3               	addwf	prodl,w,c
  4778  001C9E  6ED9               	movwf	fsr2l,c
  4779  001CA0  0E00               	movlw	high _colors
  4780  001CA2  20F4               	addwfc	prodh,w,c
  4781  001CA4  6EDA               	movwf	fsr2h,c
  4782  001CA6  50DF               	movf	indf2,w,c
  4783  001CA8  6E80               	movwf	3968,c	;volatile
  4784  001CAA  0012               	return		;funcret
  4785  001CAC                     __end_of_Set_DC_RGB:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           intcon2	equ	0xFF1
  4795                           postinc0	equ	0xFEE
  4796                           wreg	equ	0xFE8
  4797                           postdec1	equ	0xFE5
  4798                           fsr1l	equ	0xFE1
  4799                           indf2	equ	0xFDF
  4800                           postinc2	equ	0xFDE
  4801                           postdec2	equ	0xFDD
  4802                           fsr2h	equ	0xFDA
  4803                           fsr2l	equ	0xFD9
  4804                           status	equ	0xFD8
  4805                           
  4806 ;; *************** function ___awdiv *****************
  4807 ;; Defined at:
  4808 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  dividend        2   22[COMRAM] int 
  4811 ;;  divisor         2   24[COMRAM] int 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  quotient        2   28[COMRAM] int 
  4814 ;;  sign            1   27[COMRAM] unsigned char 
  4815 ;;  counter         1   26[COMRAM] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  2   22[COMRAM] int 
  4818 ;; Registers used:
  4819 ;;		wreg, status,2, status,0
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4825 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;Total ram usage:        8 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    3
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_get_RPM
  4836 ;;		_Set_DC_RGB
  4837 ;;		_main
  4838 ;;		_Update_Screen
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text14
  4843  001854                     __ptext14:
  4844                           	opt stack 0
  4845  001854                     ___awdiv:
  4846                           	opt stack 26
  4847                           
  4848                           ;incstack = 0
  4849  001854  0E00               	movlw	0
  4850  001856  6E1C               	movwf	___awdiv@sign,c
  4851  001858  AE1A               	btfss	___awdiv@divisor+1,7,c
  4852  00185A  D007               	goto	l6162
  4853  00185C  6C19               	negf	___awdiv@divisor,c
  4854  00185E  1E1A               	comf	___awdiv@divisor+1,f,c
  4855  001860  B0D8               	btfsc	status,0,c
  4856  001862  2A1A               	incf	___awdiv@divisor+1,f,c
  4857  001864  0E01               	movlw	1
  4858  001866  6E1C               	movwf	___awdiv@sign,c
  4859  001868  D000               	goto	l6162
  4860  00186A                     l6162:
  4861  00186A  AE18               	btfss	___awdiv@dividend+1,7,c
  4862  00186C  D007               	goto	l6168
  4863  00186E  6C17               	negf	___awdiv@dividend,c
  4864  001870  1E18               	comf	___awdiv@dividend+1,f,c
  4865  001872  B0D8               	btfsc	status,0,c
  4866  001874  2A18               	incf	___awdiv@dividend+1,f,c
  4867  001876  0E01               	movlw	1
  4868  001878  1A1C               	xorwf	___awdiv@sign,f,c
  4869  00187A  D000               	goto	l6168
  4870  00187C                     l6168:
  4871  00187C  0E00               	movlw	0
  4872  00187E  6E1E               	movwf	___awdiv@quotient+1,c
  4873  001880  0E00               	movlw	0
  4874  001882  6E1D               	movwf	___awdiv@quotient,c
  4875  001884  5019               	movf	___awdiv@divisor,w,c
  4876  001886  101A               	iorwf	___awdiv@divisor+1,w,c
  4877  001888  B4D8               	btfsc	status,2,c
  4878  00188A  D021               	goto	l6190
  4879  00188C  0E01               	movlw	1
  4880  00188E  6E1B               	movwf	___awdiv@counter,c
  4881  001890  D005               	goto	l6176
  4882  001892                     l6174:
  4883  001892  90D8               	bcf	status,0,c
  4884  001894  3619               	rlcf	___awdiv@divisor,f,c
  4885  001896  361A               	rlcf	___awdiv@divisor+1,f,c
  4886  001898  2A1B               	incf	___awdiv@counter,f,c
  4887  00189A  D000               	goto	l6176
  4888  00189C                     l6176:
  4889  00189C  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4890  00189E  D002               	goto	l6178
  4891  0018A0  D7F8               	goto	l6174
  4892  0018A2  D000               	goto	l6178
  4893  0018A4                     l6178:
  4894  0018A4  90D8               	bcf	status,0,c
  4895  0018A6  361D               	rlcf	___awdiv@quotient,f,c
  4896  0018A8  361E               	rlcf	___awdiv@quotient+1,f,c
  4897  0018AA  5019               	movf	___awdiv@divisor,w,c
  4898  0018AC  5C17               	subwf	___awdiv@dividend,w,c
  4899  0018AE  501A               	movf	___awdiv@divisor+1,w,c
  4900  0018B0  5818               	subwfb	___awdiv@dividend+1,w,c
  4901  0018B2  A0D8               	btfss	status,0,c
  4902  0018B4  D006               	goto	l6186
  4903  0018B6  5019               	movf	___awdiv@divisor,w,c
  4904  0018B8  5E17               	subwf	___awdiv@dividend,f,c
  4905  0018BA  501A               	movf	___awdiv@divisor+1,w,c
  4906  0018BC  5A18               	subwfb	___awdiv@dividend+1,f,c
  4907  0018BE  801D               	bsf	___awdiv@quotient,0,c
  4908  0018C0  D000               	goto	l6186
  4909  0018C2                     l6186:
  4910  0018C2  90D8               	bcf	status,0,c
  4911  0018C4  321A               	rrcf	___awdiv@divisor+1,f,c
  4912  0018C6  3219               	rrcf	___awdiv@divisor,f,c
  4913  0018C8  2E1B               	decfsz	___awdiv@counter,f,c
  4914  0018CA  D7EC               	goto	l6178
  4915  0018CC  D000               	goto	l6190
  4916  0018CE                     l6190:
  4917  0018CE  501C               	movf	___awdiv@sign,w,c
  4918  0018D0  B4D8               	btfsc	status,2,c
  4919  0018D2  D005               	goto	l6194
  4920  0018D4  6C1D               	negf	___awdiv@quotient,c
  4921  0018D6  1E1E               	comf	___awdiv@quotient+1,f,c
  4922  0018D8  B0D8               	btfsc	status,0,c
  4923  0018DA  2A1E               	incf	___awdiv@quotient+1,f,c
  4924  0018DC  D000               	goto	l6194
  4925  0018DE                     l6194:
  4926  0018DE  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4927  0018E2  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4928  0018E6  D000               	goto	l1063
  4929  0018E8                     l1063:
  4930  0018E8  0012               	return		;funcret
  4931  0018EA                     __end_of___awdiv:
  4932                           	opt stack 0
  4933                           tblptru	equ	0xFF8
  4934                           tblptrh	equ	0xFF7
  4935                           tblptrl	equ	0xFF6
  4936                           tablat	equ	0xFF5
  4937                           prodh	equ	0xFF4
  4938                           prodl	equ	0xFF3
  4939                           intcon	equ	0xFF2
  4940                           intcon2	equ	0xFF1
  4941                           postinc0	equ	0xFEE
  4942                           wreg	equ	0xFE8
  4943                           postdec1	equ	0xFE5
  4944                           fsr1l	equ	0xFE1
  4945                           indf2	equ	0xFDF
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function _Initialize_Screen *****************
  4953 ;; Defined at:
  4954 ;;		line 34 in file "Main_Screen.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;		None
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;		None
  4959 ;; Return value:  Size  Location     Type
  4960 ;;		None               void
  4961 ;; Registers used:
  4962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;Total ram usage:        0 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:   10
  4975 ;; This function calls:
  4976 ;;		_LCD_Reset
  4977 ;;		_TFT_GreenTab_Initialize
  4978 ;;		_drawCircle
  4979 ;;		_drawtext
  4980 ;;		_fillScreen
  4981 ;;		_strcpy
  4982 ;; This function is called by:
  4983 ;;		_main
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           	psect	text15
  4988  000736                     __ptext15:
  4989                           	opt stack 0
  4990  000736                     _Initialize_Screen:
  4991                           	opt stack 20
  4992                           
  4993                           ;Main_Screen.c: 36: LCD_Reset();
  4994                           
  4995                           ;incstack = 0
  4996  000736  ECAF  F011         	call	_LCD_Reset	;wreg free
  4997                           
  4998                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4999  00073A  ECB4  F010         	call	_TFT_GreenTab_Initialize	;wreg free
  5000                           
  5001                           ;Main_Screen.c: 38: fillScreen(0x0000);
  5002  00073E  0E00               	movlw	0
  5003  000740  6E25               	movwf	fillScreen@color+1,c
  5004  000742  0E00               	movlw	0
  5005  000744  6E24               	movwf	fillScreen@color,c
  5006  000746  EC68  F011         	call	_fillScreen	;wreg free
  5007                           
  5008                           ;Main_Screen.c: 39: txt = buffer;
  5009  00074A  0E00               	movlw	low _buffer
  5010  00074C  6E4E               	movwf	_txt,c
  5011  00074E  0E01               	movlw	high _buffer
  5012  000750  6E4F               	movwf	_txt+1,c
  5013                           
  5014                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S1");
  5015  000752  C04E  F011         	movff	_txt,strcpy@to
  5016  000756  C04F  F012         	movff	_txt+1,strcpy@to+1
  5017  00075A  0E4B               	movlw	low STR_8
  5018  00075C  6E13               	movwf	strcpy@from,c
  5019  00075E  0EFF               	movlw	high STR_8
  5020  000760  6E14               	movwf	strcpy@from+1,c
  5021  000762  EC6A  F010         	call	_strcpy	;wreg free
  5022                           
  5023                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  5024  000766  0E01               	movlw	1
  5025  000768  6E39               	movwf	drawtext@y,c
  5026  00076A  C04E  F03A         	movff	_txt,drawtext@_text
  5027  00076E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5028  000772  0EFF               	movlw	255
  5029  000774  6E3D               	movwf	drawtext@color+1,c
  5030  000776  683C               	setf	drawtext@color,c
  5031  000778  0E00               	movlw	0
  5032  00077A  6E3F               	movwf	drawtext@bg+1,c
  5033  00077C  0E00               	movlw	0
  5034  00077E  6E3E               	movwf	drawtext@bg,c
  5035  000780  0E01               	movlw	1
  5036  000782  6E40               	movwf	drawtext@size,c
  5037  000784  0E01               	movlw	1
  5038  000786  EC0C  F008         	call	_drawtext
  5039                           
  5040                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  5041  00078A  C04E  F011         	movff	_txt,strcpy@to
  5042  00078E  C04F  F012         	movff	_txt+1,strcpy@to+1
  5043  000792  0ED0               	movlw	low STR_9
  5044  000794  6E13               	movwf	strcpy@from,c
  5045  000796  0EFF               	movlw	high STR_9
  5046  000798  6E14               	movwf	strcpy@from+1,c
  5047  00079A  EC6A  F010         	call	_strcpy	;wreg free
  5048                           
  5049                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  5050  00079E  0E0B               	movlw	11
  5051  0007A0  6E39               	movwf	drawtext@y,c
  5052  0007A2  C04E  F03A         	movff	_txt,drawtext@_text
  5053  0007A6  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5054  0007AA  0EF8               	movlw	248
  5055  0007AC  6E3D               	movwf	drawtext@color+1,c
  5056  0007AE  0E1F               	movlw	31
  5057  0007B0  6E3C               	movwf	drawtext@color,c
  5058  0007B2  0E00               	movlw	0
  5059  0007B4  6E3F               	movwf	drawtext@bg+1,c
  5060  0007B6  0E00               	movlw	0
  5061  0007B8  6E3E               	movwf	drawtext@bg,c
  5062  0007BA  0E01               	movlw	1
  5063  0007BC  6E40               	movwf	drawtext@size,c
  5064  0007BE  0E18               	movlw	24
  5065  0007C0  EC0C  F008         	call	_drawtext
  5066                           
  5067                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  5068  0007C4  0E00               	movlw	0
  5069  0007C6  6E1D               	movwf	drawCircle@x0+1,c
  5070  0007C8  0E28               	movlw	40
  5071  0007CA  6E1C               	movwf	drawCircle@x0,c
  5072  0007CC  0E00               	movlw	0
  5073  0007CE  6E1F               	movwf	drawCircle@y0+1,c
  5074  0007D0  0E17               	movlw	23
  5075  0007D2  6E1E               	movwf	drawCircle@y0,c
  5076  0007D4  0E00               	movlw	0
  5077  0007D6  6E21               	movwf	drawCircle@r+1,c
  5078  0007D8  0E02               	movlw	2
  5079  0007DA  6E20               	movwf	drawCircle@r,c
  5080  0007DC  0EFF               	movlw	255
  5081  0007DE  6E23               	movwf	drawCircle@color+1,c
  5082  0007E0  0EE0               	movlw	224
  5083  0007E2  6E22               	movwf	drawCircle@color,c
  5084  0007E4  ECD4  F005         	call	_drawCircle	;wreg free
  5085                           
  5086                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5087  0007E8  C04E  F011         	movff	_txt,strcpy@to
  5088  0007EC  C04F  F012         	movff	_txt+1,strcpy@to+1
  5089  0007F0  0EF9               	movlw	low STR_10
  5090  0007F2  6E13               	movwf	strcpy@from,c
  5091  0007F4  0EFF               	movlw	high STR_10
  5092  0007F6  6E14               	movwf	strcpy@from+1,c
  5093  0007F8  EC6A  F010         	call	_strcpy	;wreg free
  5094                           
  5095                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5096  0007FC  0E17               	movlw	23
  5097  0007FE  6E39               	movwf	drawtext@y,c
  5098  000800  C04E  F03A         	movff	_txt,drawtext@_text
  5099  000804  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5100  000808  0EFF               	movlw	255
  5101  00080A  6E3D               	movwf	drawtext@color+1,c
  5102  00080C  0EE0               	movlw	224
  5103  00080E  6E3C               	movwf	drawtext@color,c
  5104  000810  0E00               	movlw	0
  5105  000812  6E3F               	movwf	drawtext@bg+1,c
  5106  000814  0E00               	movlw	0
  5107  000816  6E3E               	movwf	drawtext@bg,c
  5108  000818  0E02               	movlw	2
  5109  00081A  6E40               	movwf	drawtext@size,c
  5110  00081C  0E2D               	movlw	45
  5111  00081E  EC0C  F008         	call	_drawtext
  5112                           
  5113                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5114  000822  C04E  F011         	movff	_txt,strcpy@to
  5115  000826  C04F  F012         	movff	_txt+1,strcpy@to+1
  5116  00082A  0EF3               	movlw	low (STR_18+2)
  5117  00082C  6E13               	movwf	strcpy@from,c
  5118  00082E  0EFF               	movlw	high (STR_18+2)
  5119  000830  6E14               	movwf	strcpy@from+1,c
  5120  000832  EC6A  F010         	call	_strcpy	;wreg free
  5121                           
  5122                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5123  000836  0E00               	movlw	0
  5124  000838  6E1D               	movwf	drawCircle@x0+1,c
  5125  00083A  0E6E               	movlw	110
  5126  00083C  6E1C               	movwf	drawCircle@x0,c
  5127  00083E  0E00               	movlw	0
  5128  000840  6E1F               	movwf	drawCircle@y0+1,c
  5129  000842  0E17               	movlw	23
  5130  000844  6E1E               	movwf	drawCircle@y0,c
  5131  000846  0E00               	movlw	0
  5132  000848  6E21               	movwf	drawCircle@r+1,c
  5133  00084A  0E02               	movlw	2
  5134  00084C  6E20               	movwf	drawCircle@r,c
  5135  00084E  0EFF               	movlw	255
  5136  000850  6E23               	movwf	drawCircle@color+1,c
  5137  000852  0EE0               	movlw	224
  5138  000854  6E22               	movwf	drawCircle@color,c
  5139  000856  ECD4  F005         	call	_drawCircle	;wreg free
  5140                           
  5141                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5142  00085A  0E17               	movlw	23
  5143  00085C  6E39               	movwf	drawtext@y,c
  5144  00085E  C04E  F03A         	movff	_txt,drawtext@_text
  5145  000862  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5146  000866  0EFF               	movlw	255
  5147  000868  6E3D               	movwf	drawtext@color+1,c
  5148  00086A  0EE0               	movlw	224
  5149  00086C  6E3C               	movwf	drawtext@color,c
  5150  00086E  0E00               	movlw	0
  5151  000870  6E3F               	movwf	drawtext@bg+1,c
  5152  000872  0E00               	movlw	0
  5153  000874  6E3E               	movwf	drawtext@bg,c
  5154  000876  0E02               	movlw	2
  5155  000878  6E40               	movwf	drawtext@size,c
  5156  00087A  0E73               	movlw	115
  5157  00087C  EC0C  F008         	call	_drawtext
  5158                           
  5159                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5160  000880  C04E  F011         	movff	_txt,strcpy@to
  5161  000884  C04F  F012         	movff	_txt+1,strcpy@to+1
  5162  000888  0EE3               	movlw	low STR_12
  5163  00088A  6E13               	movwf	strcpy@from,c
  5164  00088C  0EFF               	movlw	high STR_12
  5165  00088E  6E14               	movwf	strcpy@from+1,c
  5166  000890  EC6A  F010         	call	_strcpy	;wreg free
  5167                           
  5168                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5169  000894  0E28               	movlw	40
  5170  000896  6E39               	movwf	drawtext@y,c
  5171  000898  C04E  F03A         	movff	_txt,drawtext@_text
  5172  00089C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5173  0008A0  0E00               	movlw	0
  5174  0008A2  6E3D               	movwf	drawtext@color+1,c
  5175  0008A4  0E1F               	movlw	31
  5176  0008A6  6E3C               	movwf	drawtext@color,c
  5177  0008A8  0E00               	movlw	0
  5178  0008AA  6E3F               	movwf	drawtext@bg+1,c
  5179  0008AC  0E00               	movlw	0
  5180  0008AE  6E3E               	movwf	drawtext@bg,c
  5181  0008B0  0E01               	movlw	1
  5182  0008B2  6E40               	movwf	drawtext@size,c
  5183  0008B4  0E32               	movlw	50
  5184  0008B6  EC0C  F008         	call	_drawtext
  5185                           
  5186                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5187  0008BA  C04E  F011         	movff	_txt,strcpy@to
  5188  0008BE  C04F  F012         	movff	_txt+1,strcpy@to+1
  5189  0008C2  0EE8               	movlw	low STR_13
  5190  0008C4  6E13               	movwf	strcpy@from,c
  5191  0008C6  0EFF               	movlw	high STR_13
  5192  0008C8  6E14               	movwf	strcpy@from+1,c
  5193  0008CA  EC6A  F010         	call	_strcpy	;wreg free
  5194                           
  5195                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5196  0008CE  0E47               	movlw	71
  5197  0008D0  6E39               	movwf	drawtext@y,c
  5198  0008D2  C04E  F03A         	movff	_txt,drawtext@_text
  5199  0008D6  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5200  0008DA  0EF8               	movlw	248
  5201  0008DC  6E3D               	movwf	drawtext@color+1,c
  5202  0008DE  0E00               	movlw	0
  5203  0008E0  6E3C               	movwf	drawtext@color,c
  5204  0008E2  0E00               	movlw	0
  5205  0008E4  6E3F               	movwf	drawtext@bg+1,c
  5206  0008E6  0E00               	movlw	0
  5207  0008E8  6E3E               	movwf	drawtext@bg,c
  5208  0008EA  0E01               	movlw	1
  5209  0008EC  6E40               	movwf	drawtext@size,c
  5210  0008EE  0E32               	movlw	50
  5211  0008F0  EC0C  F008         	call	_drawtext
  5212                           
  5213                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5214  0008F4  C04E  F011         	movff	_txt,strcpy@to
  5215  0008F8  C04F  F012         	movff	_txt+1,strcpy@to+1
  5216  0008FC  0EDD               	movlw	low STR_14
  5217  0008FE  6E13               	movwf	strcpy@from,c
  5218  000900  0EFF               	movlw	high STR_14
  5219  000902  6E14               	movwf	strcpy@from+1,c
  5220  000904  EC6A  F010         	call	_strcpy	;wreg free
  5221                           
  5222                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5223  000908  0E78               	movlw	120
  5224  00090A  6E39               	movwf	drawtext@y,c
  5225  00090C  C04E  F03A         	movff	_txt,drawtext@_text
  5226  000910  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5227  000914  0E00               	movlw	0
  5228  000916  6E3D               	movwf	drawtext@color+1,c
  5229  000918  0E1F               	movlw	31
  5230  00091A  6E3C               	movwf	drawtext@color,c
  5231  00091C  0E00               	movlw	0
  5232  00091E  6E3F               	movwf	drawtext@bg+1,c
  5233  000920  0E00               	movlw	0
  5234  000922  6E3E               	movwf	drawtext@bg,c
  5235  000924  0E01               	movlw	1
  5236  000926  6E40               	movwf	drawtext@size,c
  5237  000928  0E55               	movlw	85
  5238  00092A  EC0C  F008         	call	_drawtext
  5239                           
  5240                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5241  00092E  C04E  F011         	movff	_txt,strcpy@to
  5242  000932  C04F  F012         	movff	_txt+1,strcpy@to+1
  5243  000936  0EFC               	movlw	low STR_15
  5244  000938  6E13               	movwf	strcpy@from,c
  5245  00093A  0EFF               	movlw	high STR_15
  5246  00093C  6E14               	movwf	strcpy@from+1,c
  5247  00093E  EC6A  F010         	call	_strcpy	;wreg free
  5248                           
  5249                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5250  000942  0E8C               	movlw	140
  5251  000944  6E39               	movwf	drawtext@y,c
  5252  000946  C04E  F03A         	movff	_txt,drawtext@_text
  5253  00094A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5254  00094E  0EFF               	movlw	255
  5255  000950  6E3D               	movwf	drawtext@color+1,c
  5256  000952  683C               	setf	drawtext@color,c
  5257  000954  0E00               	movlw	0
  5258  000956  6E3F               	movwf	drawtext@bg+1,c
  5259  000958  0E00               	movlw	0
  5260  00095A  6E3E               	movwf	drawtext@bg,c
  5261  00095C  0E01               	movlw	1
  5262  00095E  6E40               	movwf	drawtext@size,c
  5263  000960  0E0C               	movlw	12
  5264  000962  EC0C  F008         	call	_drawtext
  5265                           
  5266                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5267  000966  C04E  F011         	movff	_txt,strcpy@to
  5268  00096A  C04F  F012         	movff	_txt+1,strcpy@to+1
  5269  00096E  0EF5               	movlw	low STR_16
  5270  000970  6E13               	movwf	strcpy@from,c
  5271  000972  0EFF               	movlw	high STR_16
  5272  000974  6E14               	movwf	strcpy@from+1,c
  5273  000976  EC6A  F010         	call	_strcpy	;wreg free
  5274                           
  5275                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5276  00097A  0E8C               	movlw	140
  5277  00097C  6E39               	movwf	drawtext@y,c
  5278  00097E  C04E  F03A         	movff	_txt,drawtext@_text
  5279  000982  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5280  000986  0EFF               	movlw	255
  5281  000988  6E3D               	movwf	drawtext@color+1,c
  5282  00098A  683C               	setf	drawtext@color,c
  5283  00098C  0E00               	movlw	0
  5284  00098E  6E3F               	movwf	drawtext@bg+1,c
  5285  000990  0E00               	movlw	0
  5286  000992  6E3E               	movwf	drawtext@bg,c
  5287  000994  0E01               	movlw	1
  5288  000996  6E40               	movwf	drawtext@size,c
  5289  000998  0E5F               	movlw	95
  5290  00099A  EC0C  F008         	call	_drawtext
  5291  00099E  0012               	return		;funcret
  5292  0009A0                     __end_of_Initialize_Screen:
  5293                           	opt stack 0
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon	equ	0xFF2
  5301                           intcon2	equ	0xFF1
  5302                           postinc0	equ	0xFEE
  5303                           wreg	equ	0xFE8
  5304                           postdec1	equ	0xFE5
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _strcpy *****************
  5314 ;; Defined at:
  5315 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  to              2   16[COMRAM] PTR unsigned char 
  5318 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5319 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5320 ;;		 -> STR_18(4), STR_17(4), STR_16(4), STR_15(3), 
  5321 ;;		 -> STR_14(6), STR_13(5), STR_12(5), STR_11(2), 
  5322 ;;		 -> STR_10(3), STR_9(13), STR_8(22), 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5325 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  2   16[COMRAM] PTR unsigned char 
  5328 ;; Registers used:
  5329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5335 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;Total ram usage:        6 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    3
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_Initialize_Screen
  5346 ;;		_Update_Screen
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text16
  5351  0020D4                     __ptext16:
  5352                           	opt stack 0
  5353  0020D4                     _strcpy:
  5354                           	opt stack 26
  5355                           
  5356                           ;incstack = 0
  5357  0020D4  C011  F015         	movff	strcpy@to,strcpy@cp
  5358  0020D8  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5359  0020DC  D005               	goto	l6056
  5360  0020DE                     l6054:
  5361  0020DE  4A15               	infsnz	strcpy@cp,f,c
  5362  0020E0  2A16               	incf	strcpy@cp+1,f,c
  5363  0020E2  4A13               	infsnz	strcpy@from,f,c
  5364  0020E4  2A14               	incf	strcpy@from+1,f,c
  5365  0020E6  D000               	goto	l6056
  5366  0020E8                     l6056:
  5367  0020E8  C013  FFF6         	movff	strcpy@from,tblptrl
  5368  0020EC  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5369  0020F0                     	if	0	;tblptru may be non-zero
  5370  0020F0                     	endif
  5371  0020F0                     	if	0	;tblptru may be non-zero
  5372  0020F0                     	endif
  5373  0020F0  C015  FFD9         	movff	strcpy@cp,fsr2l
  5374  0020F4  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5375  0020F8  0008               	tblrd		*
  5376  0020FA  CFF5 FFDF          	movff	tablat,indf2
  5377  0020FE  50DF               	movf	indf2,w,c
  5378  002100  A4D8               	btfss	status,2,c
  5379  002102  D7ED               	goto	l6054
  5380                           
  5381                           ;	Return value of _strcpy is never used
  5382  002104  0012               	return		;funcret
  5383  002106                     __end_of_strcpy:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           intcon	equ	0xFF2
  5392                           intcon2	equ	0xFF1
  5393                           postinc0	equ	0xFEE
  5394                           wreg	equ	0xFE8
  5395                           postdec1	equ	0xFE5
  5396                           fsr1l	equ	0xFE1
  5397                           indf2	equ	0xFDF
  5398                           postinc2	equ	0xFDE
  5399                           postdec2	equ	0xFDD
  5400                           fsr2h	equ	0xFDA
  5401                           fsr2l	equ	0xFD9
  5402                           status	equ	0xFD8
  5403                           
  5404 ;; *************** function _fillScreen *****************
  5405 ;; Defined at:
  5406 ;;		line 620 in file "ST7735.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  color           2   35[COMRAM] unsigned int 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;		None
  5411 ;; Return value:  Size  Location     Type
  5412 ;;		None               void
  5413 ;; Registers used:
  5414 ;;		wreg, status,2, status,0, cstack
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5420 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;Total ram usage:        2 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    7
  5427 ;; This function calls:
  5428 ;;		_fillRectangle
  5429 ;; This function is called by:
  5430 ;;		_Initialize_Screen
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text17
  5435  0022D0                     __ptext17:
  5436                           	opt stack 0
  5437  0022D0                     _fillScreen:
  5438                           	opt stack 22
  5439                           
  5440                           ;ST7735.c: 622: fillRectangle(0, 0, 128, 160, color);
  5441                           
  5442                           ;incstack = 0
  5443  0022D0  0E00               	movlw	0
  5444  0022D2  6E18               	movwf	fillRectangle@y,c
  5445  0022D4  0E80               	movlw	128
  5446  0022D6  6E19               	movwf	fillRectangle@w,c
  5447  0022D8  0EA0               	movlw	160
  5448  0022DA  6E1A               	movwf	fillRectangle@h,c
  5449  0022DC  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5450  0022E0  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5451  0022E4  0E00               	movlw	0
  5452  0022E6  ECF8  F00A         	call	_fillRectangle
  5453  0022EA  0012               	return		;funcret
  5454  0022EC                     __end_of_fillScreen:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           intcon2	equ	0xFF1
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           postdec1	equ	0xFE5
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _fillRectangle *****************
  5476 ;; Defined at:
  5477 ;;		line 504 in file "ST7735.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  x               1    wreg     unsigned char 
  5480 ;;  y               1   23[COMRAM] unsigned char 
  5481 ;;  w               1   24[COMRAM] unsigned char 
  5482 ;;  h               1   25[COMRAM] unsigned char 
  5483 ;;  color           2   26[COMRAM] unsigned int 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  x               1   34[COMRAM] unsigned char 
  5486 ;;  lo              1   33[COMRAM] unsigned char 
  5487 ;;  hi              1   32[COMRAM] unsigned char 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;		None               void
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5497 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;Total ram usage:       12 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    6
  5504 ;; This function calls:
  5505 ;;		_setAddrWindow
  5506 ;;		_spiwrite
  5507 ;; This function is called by:
  5508 ;;		_fillScreen
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text18
  5513  0015F0                     __ptext18:
  5514                           	opt stack 0
  5515  0015F0                     _fillRectangle:
  5516                           	opt stack 22
  5517                           
  5518                           ;incstack = 0
  5519                           ;fillRectangle@x stored from wreg
  5520  0015F0  6E23               	movwf	fillRectangle@x,c
  5521                           
  5522                           ;ST7735.c: 506: unsigned char hi, lo;
  5523                           ;ST7735.c: 507: if((x >= 128) || (y >= 160))
  5524  0015F2  0E80               	movlw	128
  5525  0015F4  6023               	cpfslt	fillRectangle@x,c
  5526  0015F6  D069               	goto	l704
  5527  0015F8  0E9F               	movlw	159
  5528  0015FA  6418               	cpfsgt	fillRectangle@y,c
  5529  0015FC  D001               	goto	l5902
  5530                           
  5531                           ;ST7735.c: 508: return;
  5532  0015FE  D065               	goto	l704
  5533  001600                     l5902:
  5534                           
  5535                           ;ST7735.c: 509: if((x + w - 1) >= 128)
  5536  001600  0EFF               	movlw	255
  5537  001602  6E1D               	movwf	??_fillRectangle& (0+255),c
  5538  001604  0EFF               	movlw	255
  5539  001606  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5540  001608  5019               	movf	fillRectangle@w,w,c
  5541  00160A  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5542  00160E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5543  001610  261F               	addwf	??_fillRectangle+2,f,c
  5544  001612  0E00               	movlw	0
  5545  001614  2220               	addwfc	??_fillRectangle+3,f,c
  5546  001616  501D               	movf	??_fillRectangle,w,c
  5547  001618  261F               	addwf	??_fillRectangle+2,f,c
  5548  00161A  501E               	movf	??_fillRectangle+1,w,c
  5549  00161C  2220               	addwfc	??_fillRectangle+3,f,c
  5550  00161E  BE20               	btfsc	??_fillRectangle+3,7,c
  5551  001620  D00A               	goto	l705
  5552  001622  5020               	movf	??_fillRectangle+3,w,c
  5553  001624  E104               	bnz	u4520
  5554  001626  0E80               	movlw	128
  5555  001628  5C1F               	subwf	??_fillRectangle+2,w,c
  5556  00162A  A0D8               	btfss	status,0,c
  5557  00162C  D004               	goto	l705
  5558  00162E                     u4520:
  5559                           
  5560                           ;ST7735.c: 510: w = 128 - x;
  5561  00162E  5023               	movf	fillRectangle@x,w,c
  5562  001630  0800               	sublw	0
  5563  001632  0F80               	addlw	128
  5564  001634  6E19               	movwf	fillRectangle@w,c
  5565  001636                     l705:
  5566                           
  5567                           ;ST7735.c: 511: if((y + h - 1) >= 160)
  5568  001636  0EFF               	movlw	255
  5569  001638  6E1D               	movwf	??_fillRectangle& (0+255),c
  5570  00163A  0EFF               	movlw	255
  5571  00163C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5572  00163E  501A               	movf	fillRectangle@h,w,c
  5573  001640  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5574  001644  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5575  001646  261F               	addwf	??_fillRectangle+2,f,c
  5576  001648  0E00               	movlw	0
  5577  00164A  2220               	addwfc	??_fillRectangle+3,f,c
  5578  00164C  501D               	movf	??_fillRectangle,w,c
  5579  00164E  261F               	addwf	??_fillRectangle+2,f,c
  5580  001650  501E               	movf	??_fillRectangle+1,w,c
  5581  001652  2220               	addwfc	??_fillRectangle+3,f,c
  5582  001654  BE20               	btfsc	??_fillRectangle+3,7,c
  5583  001656  D00B               	goto	l5908
  5584  001658  5020               	movf	??_fillRectangle+3,w,c
  5585  00165A  E104               	bnz	u4530
  5586  00165C  0EA0               	movlw	160
  5587  00165E  5C1F               	subwf	??_fillRectangle+2,w,c
  5588  001660  A0D8               	btfss	status,0,c
  5589  001662  D005               	goto	l5908
  5590  001664                     u4530:
  5591                           
  5592                           ;ST7735.c: 512: h = 160 - y;
  5593  001664  5018               	movf	fillRectangle@y,w,c
  5594  001666  0800               	sublw	0
  5595  001668  0FA0               	addlw	160
  5596  00166A  6E1A               	movwf	fillRectangle@h,c
  5597  00166C  D000               	goto	l5908
  5598  00166E                     l5908:
  5599                           
  5600                           ;ST7735.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5601  00166E  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5602  001672  5023               	movf	fillRectangle@x,w,c
  5603  001674  2419               	addwf	fillRectangle@w,w,c
  5604  001676  6E1D               	movwf	??_fillRectangle& (0+255),c
  5605  001678  041D               	decf	??_fillRectangle,w,c
  5606  00167A  6E15               	movwf	setAddrWindow@x1,c
  5607  00167C  5018               	movf	fillRectangle@y,w,c
  5608  00167E  241A               	addwf	fillRectangle@h,w,c
  5609  001680  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5610  001682  041E               	decf	??_fillRectangle+1,w,c
  5611  001684  6E16               	movwf	setAddrWindow@y1,c
  5612  001686  5023               	movf	fillRectangle@x,w,c
  5613  001688  EC3A  F00F         	call	_setAddrWindow
  5614                           
  5615                           ;ST7735.c: 514: hi = color >> 8; lo = color;
  5616  00168C  501C               	movf	fillRectangle@color+1,w,c
  5617  00168E  6E21               	movwf	fillRectangle@hi,c
  5618  001690  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5619                           
  5620                           ;ST7735.c: 515: PORTDbits.RD3 = 1;
  5621  001694  8683               	bsf	3971,3,c	;volatile
  5622                           
  5623                           ;ST7735.c: 516: PORTDbits.RD4 = 0;
  5624  001696  9883               	bcf	3971,4,c	;volatile
  5625                           
  5626                           ;ST7735.c: 518: for(y=h; y>0; y--) {
  5627  001698  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5628  00169C                     l5920:
  5629  00169C  5018               	movf	fillRectangle@y,w,c
  5630  00169E  B4D8               	btfsc	status,2,c
  5631  0016A0  D013               	goto	l708
  5632  0016A2  D001               	goto	l707
  5633  0016A4  D011               	goto	l708
  5634  0016A6                     l707:
  5635                           
  5636                           ;ST7735.c: 519: for(x = w; x > 0; x--) {
  5637  0016A6  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5638  0016AA                     l5924:
  5639  0016AA  5023               	movf	fillRectangle@x,w,c
  5640  0016AC  B4D8               	btfsc	status,2,c
  5641  0016AE  D00A               	goto	l5934
  5642  0016B0  D001               	goto	l5928
  5643  0016B2  D008               	goto	l5934
  5644  0016B4                     l5928:
  5645                           
  5646                           ;ST7735.c: 520: spiwrite(hi);
  5647  0016B4  5021               	movf	fillRectangle@hi,w,c
  5648  0016B6  EC9B  F011         	call	_spiwrite
  5649                           
  5650                           ;ST7735.c: 521: spiwrite(lo);
  5651  0016BA  5022               	movf	fillRectangle@lo,w,c
  5652  0016BC  EC9B  F011         	call	_spiwrite
  5653  0016C0  0623               	decf	fillRectangle@x,f,c
  5654  0016C2  D7F3               	goto	l5924
  5655  0016C4                     l5934:
  5656  0016C4  0618               	decf	fillRectangle@y,f,c
  5657  0016C6  D7EA               	goto	l5920
  5658  0016C8                     l708:
  5659                           
  5660                           ;ST7735.c: 522: }
  5661                           ;ST7735.c: 523: }
  5662                           ;ST7735.c: 524: PORTDbits.RD4 = 1;
  5663  0016C8  8883               	bsf	3971,4,c	;volatile
  5664  0016CA                     l704:
  5665  0016CA  0012               	return		;funcret
  5666  0016CC                     __end_of_fillRectangle:
  5667                           	opt stack 0
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           prodh	equ	0xFF4
  5673                           prodl	equ	0xFF3
  5674                           intcon	equ	0xFF2
  5675                           intcon2	equ	0xFF1
  5676                           postinc0	equ	0xFEE
  5677                           wreg	equ	0xFE8
  5678                           postdec1	equ	0xFE5
  5679                           fsr1l	equ	0xFE1
  5680                           indf2	equ	0xFDF
  5681                           postinc2	equ	0xFDE
  5682                           postdec2	equ	0xFDD
  5683                           fsr2h	equ	0xFDA
  5684                           fsr2l	equ	0xFD9
  5685                           status	equ	0xFD8
  5686                           
  5687 ;; *************** function _drawtext *****************
  5688 ;; Defined at:
  5689 ;;		line 475 in file "ST7735.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  x               1    wreg     unsigned char 
  5692 ;;  y               1   56[COMRAM] unsigned char 
  5693 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5694 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5695 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5696 ;;		 -> buffer(33), 
  5697 ;;  color           2   59[COMRAM] unsigned int 
  5698 ;;  bg              2   61[COMRAM] unsigned int 
  5699 ;;  size            1   63[COMRAM] unsigned char 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  x               1    0[BANK1 ] unsigned char 
  5702 ;;  i               2    3[BANK1 ] unsigned int 
  5703 ;;  textsize        2    1[BANK1 ] unsigned int 
  5704 ;;  cursor_x        1    6[BANK1 ] unsigned char 
  5705 ;;  cursor_y        1    5[BANK1 ] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;		None               void
  5708 ;; Registers used:
  5709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5715 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;      Totals:         8       2       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;Total ram usage:       17 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:    9
  5722 ;; This function calls:
  5723 ;;		_drawChar
  5724 ;;		_strlen
  5725 ;; This function is called by:
  5726 ;;		_Initialize_Screen
  5727 ;;		_Update_Screen
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	text19
  5732  001018                     __ptext19:
  5733                           	opt stack 0
  5734  001018                     _drawtext:
  5735                           	opt stack 20
  5736                           
  5737                           ;incstack = 0
  5738                           ;drawtext@x stored from wreg
  5739  001018  0101               	movlb	1	; () banked
  5740  00101A  6F21               	movwf	drawtext@x& (0+255),b
  5741                           
  5742                           ; BSR set to: 1
  5743                           ;ST7735.c: 477: unsigned char cursor_x, cursor_y;
  5744                           ;ST7735.c: 478: unsigned int textsize, i;
  5745                           ;ST7735.c: 479: cursor_x = x, cursor_y = y;
  5746  00101C  C121  F127         	movff	drawtext@x,drawtext@cursor_x
  5747                           
  5748                           ; BSR set to: 1
  5749  001020  C039  F126         	movff	drawtext@y,drawtext@cursor_y
  5750                           
  5751                           ; BSR set to: 1
  5752                           ;ST7735.c: 480: textsize = strlen(_text);
  5753  001024  C03A  F011         	movff	drawtext@_text,strlen@s
  5754  001028  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5755  00102C  ECEF  F00F         	call	_strlen	;wreg free
  5756  001030  C011  F122         	movff	?_strlen,drawtext@textsize
  5757  001034  C012  F123         	movff	?_strlen+1,drawtext@textsize+1
  5758                           
  5759                           ;ST7735.c: 481: for(i = 0; i < textsize; i++){
  5760  001038  0E00               	movlw	0
  5761  00103A  0101               	movlb	1	; () banked
  5762  00103C  6F25               	movwf	(drawtext@i+1)& (0+255),b
  5763  00103E  0E00               	movlw	0
  5764  001040  6F24               	movwf	drawtext@i& (0+255),b
  5765  001042  D06A               	goto	l6092
  5766  001044                     l6066:
  5767                           
  5768                           ; BSR set to: 1
  5769                           ;ST7735.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5770  001044  506E               	movf	_wrap,w,c
  5771  001046  B4D8               	btfsc	status,2,c
  5772  001048  D03A               	goto	l6082
  5773                           
  5774                           ; BSR set to: 1
  5775  00104A  5040               	movf	drawtext@size,w,c
  5776  00104C  0D05               	mullw	5
  5777  00104E  0101               	movlb	1	; () banked
  5778  001050  5127               	movf	drawtext@cursor_x& (0+255),w,b
  5779  001052  0100               	movlb	0	; () banked
  5780  001054  6FFB               	movwf	??_drawtext& (0+255),b
  5781  001056  6BFC               	clrf	(??_drawtext+1)& (0+255),b
  5782  001058  50F3               	movf	prodl,w,c
  5783  00105A  0100               	movlb	0	; () banked
  5784  00105C  27FB               	addwf	??_drawtext& (0+255),f,b
  5785  00105E  50F4               	movf	prodh,w,c
  5786  001060  0100               	movlb	0	; () banked
  5787  001062  23FC               	addwfc	(??_drawtext+1)& (0+255),f,b
  5788  001064  0100               	movlb	0	; () banked
  5789  001066  BFFC               	btfsc	(??_drawtext+1)& (0+255),7,b
  5790  001068  D02A               	goto	l6082
  5791  00106A  0100               	movlb	0	; () banked
  5792  00106C  51FC               	movf	(??_drawtext+1)& (0+255),w,b
  5793  00106E  E105               	bnz	u4650
  5794  001070  0E81               	movlw	129
  5795  001072  0100               	movlb	0	; () banked
  5796  001074  5DFB               	subwf	??_drawtext& (0+255),w,b
  5797  001076  A0D8               	btfss	status,0,c
  5798  001078  D022               	goto	l6082
  5799  00107A                     u4650:
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;ST7735.c: 483: cursor_x = 0;
  5803  00107A  0E00               	movlw	0
  5804  00107C  0101               	movlb	1	; () banked
  5805  00107E  6F27               	movwf	drawtext@cursor_x& (0+255),b
  5806                           
  5807                           ; BSR set to: 1
  5808                           ;ST7735.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5809  001080  5040               	movf	drawtext@size,w,c
  5810  001082  0D07               	mullw	7
  5811  001084  50F3               	movf	prodl,w,c
  5812  001086  0101               	movlb	1	; () banked
  5813  001088  2526               	addwf	drawtext@cursor_y& (0+255),w,b
  5814  00108A  0F03               	addlw	3
  5815  00108C  0101               	movlb	1	; () banked
  5816  00108E  6F26               	movwf	drawtext@cursor_y& (0+255),b
  5817                           
  5818                           ; BSR set to: 1
  5819                           ;ST7735.c: 485: if(cursor_y > 160) cursor_y = 160;
  5820  001090  0EA0               	movlw	160
  5821  001092  0101               	movlb	1	; () banked
  5822  001094  6526               	cpfsgt	drawtext@cursor_y& (0+255),b
  5823  001096  D004               	goto	l6078
  5824                           
  5825                           ; BSR set to: 1
  5826  001098  0EA0               	movlw	160
  5827  00109A  0101               	movlb	1	; () banked
  5828  00109C  6F26               	movwf	drawtext@cursor_y& (0+255),b
  5829  00109E  D000               	goto	l6078
  5830  0010A0                     l6078:
  5831                           
  5832                           ; BSR set to: 1
  5833                           ;ST7735.c: 486: if(_text[i] == 0x20) goto _skip; }
  5834  0010A0  0101               	movlb	1	; () banked
  5835  0010A2  5124               	movf	drawtext@i& (0+255),w,b
  5836  0010A4  243A               	addwf	drawtext@_text,w,c
  5837  0010A6  6ED9               	movwf	fsr2l,c
  5838  0010A8  0101               	movlb	1	; () banked
  5839  0010AA  5125               	movf	(drawtext@i+1)& (0+255),w,b
  5840  0010AC  203B               	addwfc	drawtext@_text+1,w,c
  5841  0010AE  6EDA               	movwf	fsr2h,c
  5842  0010B0  0E20               	movlw	32
  5843  0010B2  18DE               	xorwf	postinc2,w,c
  5844  0010B4  B4D8               	btfsc	status,2,c
  5845  0010B6  D02C               	goto	l6090
  5846  0010B8  D002               	goto	l6082
  5847                           
  5848                           ; BSR set to: 1
  5849  0010BA  D02A               	goto	l6090
  5850                           
  5851                           ; BSR set to: 1
  5852  0010BC  D000               	goto	l6082
  5853  0010BE                     l6082:
  5854                           
  5855                           ;ST7735.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5856  0010BE  C126  F02E         	movff	drawtext@cursor_y,drawChar@y
  5857  0010C2  0101               	movlb	1	; () banked
  5858  0010C4  5124               	movf	drawtext@i& (0+255),w,b
  5859  0010C6  243A               	addwf	drawtext@_text,w,c
  5860  0010C8  6ED9               	movwf	fsr2l,c
  5861  0010CA  0101               	movlb	1	; () banked
  5862  0010CC  5125               	movf	(drawtext@i+1)& (0+255),w,b
  5863  0010CE  203B               	addwfc	drawtext@_text+1,w,c
  5864  0010D0  6EDA               	movwf	fsr2h,c
  5865  0010D2  50DF               	movf	indf2,w,c
  5866  0010D4  6E2F               	movwf	drawChar@c,c
  5867  0010D6  C03C  F030         	movff	drawtext@color,drawChar@color
  5868  0010DA  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5869  0010DE  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5870  0010E2  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5871  0010E6  C040  F034         	movff	drawtext@size,drawChar@size
  5872  0010EA  0101               	movlb	1	; () banked
  5873  0010EC  5127               	movf	drawtext@cursor_x& (0+255),w,b
  5874  0010EE  EC61  F007         	call	_drawChar
  5875                           
  5876                           ;ST7735.c: 488: cursor_x = cursor_x + size * 6;
  5877  0010F2  5040               	movf	drawtext@size,w,c
  5878  0010F4  0D06               	mullw	6
  5879  0010F6  50F3               	movf	prodl,w,c
  5880  0010F8  0101               	movlb	1	; () banked
  5881  0010FA  2527               	addwf	drawtext@cursor_x& (0+255),w,b
  5882  0010FC  0101               	movlb	1	; () banked
  5883  0010FE  6F27               	movwf	drawtext@cursor_x& (0+255),b
  5884                           
  5885                           ; BSR set to: 1
  5886                           ;ST7735.c: 489: if(cursor_x > 128) cursor_x = 128;
  5887  001100  0E80               	movlw	128
  5888  001102  0101               	movlb	1	; () banked
  5889  001104  6527               	cpfsgt	drawtext@cursor_x& (0+255),b
  5890  001106  D004               	goto	l6090
  5891                           
  5892                           ; BSR set to: 1
  5893  001108  0E80               	movlw	128
  5894  00110A  0101               	movlb	1	; () banked
  5895  00110C  6F27               	movwf	drawtext@cursor_x& (0+255),b
  5896                           
  5897                           ; BSR set to: 1
  5898  00110E  D000               	goto	l6090
  5899  001110                     l6090:
  5900                           
  5901                           ; BSR set to: 1
  5902  001110  0101               	movlb	1	; () banked
  5903  001112  4B24               	infsnz	drawtext@i& (0+255),f,b
  5904  001114  2B25               	incf	(drawtext@i+1)& (0+255),f,b
  5905  001116  D000               	goto	l6092
  5906  001118                     l6092:
  5907                           
  5908                           ; BSR set to: 1
  5909  001118  0101               	movlb	1	; () banked
  5910  00111A  5122               	movf	drawtext@textsize& (0+255),w,b
  5911  00111C  0101               	movlb	1	; () banked
  5912  00111E  5D24               	subwf	drawtext@i& (0+255),w,b
  5913  001120  0101               	movlb	1	; () banked
  5914  001122  5123               	movf	(drawtext@textsize+1)& (0+255),w,b
  5915  001124  0101               	movlb	1	; () banked
  5916  001126  5925               	subwfb	(drawtext@i+1)& (0+255),w,b
  5917  001128  A0D8               	btfss	status,0,c
  5918  00112A  D78C               	goto	l6066
  5919                           
  5920                           ; BSR set to: 1
  5921                           
  5922                           ; BSR set to: 1
  5923  00112C  0012               	return		;funcret
  5924  00112E                     __end_of_drawtext:
  5925                           	opt stack 0
  5926                           tblptru	equ	0xFF8
  5927                           tblptrh	equ	0xFF7
  5928                           tblptrl	equ	0xFF6
  5929                           tablat	equ	0xFF5
  5930                           prodh	equ	0xFF4
  5931                           prodl	equ	0xFF3
  5932                           intcon	equ	0xFF2
  5933                           intcon2	equ	0xFF1
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           postdec1	equ	0xFE5
  5937                           fsr1l	equ	0xFE1
  5938                           indf2	equ	0xFDF
  5939                           postinc2	equ	0xFDE
  5940                           postdec2	equ	0xFDD
  5941                           fsr2h	equ	0xFDA
  5942                           fsr2l	equ	0xFD9
  5943                           status	equ	0xFD8
  5944                           
  5945 ;; *************** function _strlen *****************
  5946 ;; Defined at:
  5947 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5950 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5951 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5952 ;;		 -> buffer(33), 
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5955 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5956 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5957 ;;		 -> buffer(33), 
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  2   16[COMRAM] unsigned int 
  5960 ;; Registers used:
  5961 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;Total ram usage:        6 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    3
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_drawtext
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text20
  5982  001FDE                     __ptext20:
  5983                           	opt stack 0
  5984  001FDE                     _strlen:
  5985                           	opt stack 25
  5986                           
  5987                           ; BSR set to: 1
  5988                           ;incstack = 0
  5989  001FDE  C011  F015         	movff	strlen@s,strlen@cp
  5990  001FE2  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5991  001FE6  D003               	goto	l5892
  5992  001FE8                     l5890:
  5993  001FE8  4A15               	infsnz	strlen@cp,f,c
  5994  001FEA  2A16               	incf	strlen@cp+1,f,c
  5995  001FEC  D000               	goto	l5892
  5996  001FEE                     l5892:
  5997  001FEE  C015  FFD9         	movff	strlen@cp,fsr2l
  5998  001FF2  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5999  001FF6  50DF               	movf	indf2,w,c
  6000  001FF8  A4D8               	btfss	status,2,c
  6001  001FFA  D7F6               	goto	l5890
  6002  001FFC  C011  F013         	movff	strlen@s,??_strlen
  6003  002000  C012  F014         	movff	strlen@s+1,??_strlen+1
  6004  002004  1E13               	comf	??_strlen,f,c
  6005  002006  1E14               	comf	??_strlen+1,f,c
  6006  002008  4A13               	infsnz	??_strlen,f,c
  6007  00200A  2A14               	incf	??_strlen+1,f,c
  6008  00200C  5015               	movf	strlen@cp,w,c
  6009  00200E  2413               	addwf	??_strlen,w,c
  6010  002010  6E11               	movwf	?_strlen,c
  6011  002012  5016               	movf	strlen@cp+1,w,c
  6012  002014  2014               	addwfc	??_strlen+1,w,c
  6013  002016  6E12               	movwf	?_strlen+1,c
  6014  002018  D000               	goto	l1432
  6015  00201A                     l1432:
  6016  00201A  0012               	return		;funcret
  6017  00201C                     __end_of_strlen:
  6018                           	opt stack 0
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon2	equ	0xFF1
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           postdec1	equ	0xFE5
  6030                           fsr1l	equ	0xFE1
  6031                           indf2	equ	0xFDF
  6032                           postinc2	equ	0xFDE
  6033                           postdec2	equ	0xFDD
  6034                           fsr2h	equ	0xFDA
  6035                           fsr2l	equ	0xFD9
  6036                           status	equ	0xFD8
  6037                           
  6038 ;; *************** function _drawChar *****************
  6039 ;; Defined at:
  6040 ;;		line 448 in file "ST7735.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  x               1    wreg     unsigned char 
  6043 ;;  y               1   45[COMRAM] unsigned char 
  6044 ;;  c               1   46[COMRAM] unsigned char 
  6045 ;;  color           2   47[COMRAM] unsigned int 
  6046 ;;  bg              2   49[COMRAM] unsigned int 
  6047 ;;  size            1   51[COMRAM] unsigned char 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  x               1   53[COMRAM] unsigned char 
  6050 ;;  line            1   52[COMRAM] unsigned char 
  6051 ;;  i               1   55[COMRAM] unsigned char 
  6052 ;;  j               1   54[COMRAM] unsigned char 
  6053 ;; Return value:  Size  Location     Type
  6054 ;;		None               void
  6055 ;; Registers used:
  6056 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6057 ;; Tracked objects:
  6058 ;;		On entry : 0/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6062 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;Total ram usage:       11 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:    8
  6069 ;; This function calls:
  6070 ;;		___wmul
  6071 ;;		_drawPixel
  6072 ;;		_fillRect
  6073 ;; This function is called by:
  6074 ;;		_drawtext
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	text21
  6079  000EC2                     __ptext21:
  6080                           	opt stack 0
  6081  000EC2                     _drawChar:
  6082                           	opt stack 20
  6083                           
  6084                           ;incstack = 0
  6085                           ;drawChar@x stored from wreg
  6086  000EC2  6E36               	movwf	drawChar@x,c
  6087                           
  6088                           ;ST7735.c: 450: char i, j;
  6089                           ;ST7735.c: 451: if((x >= 128) || (y >= 160))
  6090  000EC4  0E80               	movlw	128
  6091  000EC6  6036               	cpfslt	drawChar@x,c
  6092  000EC8  D0A6               	goto	l667
  6093  000ECA  0E9F               	movlw	159
  6094  000ECC  642E               	cpfsgt	drawChar@y,c
  6095  000ECE  D001               	goto	l5838
  6096                           
  6097                           ;ST7735.c: 452: return;
  6098  000ED0  D0A2               	goto	l667
  6099  000ED2                     l5838:
  6100                           
  6101                           ;ST7735.c: 453: if(size < 1) size = 1;
  6102  000ED2  5034               	movf	drawChar@size,w,c
  6103  000ED4  A4D8               	btfss	status,2,c
  6104  000ED6  D003               	goto	l5842
  6105  000ED8  0E01               	movlw	1
  6106  000EDA  6E34               	movwf	drawChar@size,c
  6107  000EDC  D000               	goto	l5842
  6108  000EDE                     l5842:
  6109                           
  6110                           ;ST7735.c: 454: if((c < ' ') || (c > '~'))
  6111  000EDE  0E1F               	movlw	31
  6112  000EE0  642F               	cpfsgt	drawChar@c,c
  6113  000EE2  D004               	goto	l5846
  6114  000EE4  0E7E               	movlw	126
  6115  000EE6  642F               	cpfsgt	drawChar@c,c
  6116  000EE8  D003               	goto	l669
  6117  000EEA  D000               	goto	l5846
  6118  000EEC                     l5846:
  6119                           
  6120                           ;ST7735.c: 455: c = '?';
  6121  000EEC  0E3F               	movlw	63
  6122  000EEE  6E2F               	movwf	drawChar@c,c
  6123  000EF0                     l669:
  6124                           
  6125                           ;ST7735.c: 456: for(i=0; i<5; i++ ) {
  6126  000EF0  0E00               	movlw	0
  6127  000EF2  6E38               	movwf	drawChar@i,c
  6128  000EF4                     l5848:
  6129  000EF4  0E04               	movlw	4
  6130  000EF6  6438               	cpfsgt	drawChar@i,c
  6131  000EF8  D001               	goto	l5852
  6132  000EFA  D08D               	goto	l667
  6133  000EFC                     l5852:
  6134                           
  6135                           ;ST7735.c: 457: unsigned char line;
  6136                           ;ST7735.c: 458: if(c < 'S')
  6137  000EFC  0E53               	movlw	83
  6138  000EFE  602F               	cpfslt	drawChar@c,c
  6139  000F00  D015               	goto	l5856
  6140                           
  6141                           ;ST7735.c: 459: line = font[(c - 32)*5 + i];
  6142  000F02  0EE0               	movlw	224
  6143  000F04  242F               	addwf	drawChar@c,w,c
  6144  000F06  6E11               	movwf	___wmul@multiplier,c
  6145  000F08  6A12               	clrf	___wmul@multiplier+1,c
  6146  000F0A  0EFF               	movlw	255
  6147  000F0C  2212               	addwfc	___wmul@multiplier+1,f,c
  6148  000F0E  0E00               	movlw	0
  6149  000F10  6E14               	movwf	___wmul@multiplicand+1,c
  6150  000F12  0E05               	movlw	5
  6151  000F14  6E13               	movwf	___wmul@multiplicand,c
  6152  000F16  ECC9  F010         	call	___wmul	;wreg free
  6153  000F1A  5038               	movf	drawChar@i,w,c
  6154  000F1C  2611               	addwf	?___wmul,f,c
  6155  000F1E  0E00               	movlw	0
  6156  000F20  2212               	addwfc	?___wmul+1,f,c
  6157  000F22  0E29               	movlw	low _font
  6158  000F24  2411               	addwf	?___wmul,w,c
  6159  000F26  6EF6               	movwf	tblptrl,c
  6160  000F28  0EFD               	movlw	high _font
  6161  000F2A  D014               	goto	L4
  6162  000F2C                     l5856:
  6163                           
  6164                           ;ST7735.c: 460: else
  6165                           ;ST7735.c: 461: line = font2[(c - 'S')*5 + i];
  6166  000F2C  0EAD               	movlw	173
  6167  000F2E  242F               	addwf	drawChar@c,w,c
  6168  000F30  6E11               	movwf	___wmul@multiplier,c
  6169  000F32  6A12               	clrf	___wmul@multiplier+1,c
  6170  000F34  0EFF               	movlw	255
  6171  000F36  2212               	addwfc	___wmul@multiplier+1,f,c
  6172  000F38  0E00               	movlw	0
  6173  000F3A  6E14               	movwf	___wmul@multiplicand+1,c
  6174  000F3C  0E05               	movlw	5
  6175  000F3E  6E13               	movwf	___wmul@multiplicand,c
  6176  000F40  ECC9  F010         	call	___wmul	;wreg free
  6177  000F44  5038               	movf	drawChar@i,w,c
  6178  000F46  2611               	addwf	?___wmul,f,c
  6179  000F48  0E00               	movlw	0
  6180  000F4A  2212               	addwfc	?___wmul+1,f,c
  6181  000F4C  0E28               	movlw	low _font2
  6182  000F4E  2411               	addwf	?___wmul,w,c
  6183  000F50  6EF6               	movwf	tblptrl,c
  6184  000F52  0EFE               	movlw	high _font2
  6185  000F54                     L4:
  6186  000F54  2012               	addwfc	?___wmul+1,w,c
  6187  000F56  6EF7               	movwf	tblptrh,c
  6188  000F58                     	if	0	;There are less than 3 active tblptr bytes
  6189  000F58                     	endif
  6190  000F58  0008               	tblrd		*
  6191  000F5A  CFF5 F035          	movff	tablat,drawChar@line
  6192  000F5E  D000               	goto	l5858
  6193  000F60                     l5858:
  6194                           
  6195                           ;ST7735.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6196  000F60  0E00               	movlw	0
  6197  000F62  6E37               	movwf	drawChar@j,c
  6198  000F64                     l5860:
  6199  000F64  0E06               	movlw	6
  6200  000F66  6437               	cpfsgt	drawChar@j,c
  6201  000F68  D001               	goto	l676
  6202  000F6A  D053               	goto	l5884
  6203  000F6C                     l676:
  6204                           
  6205                           ;ST7735.c: 463: if(line & 0x01) {
  6206  000F6C  A035               	btfss	drawChar@line,0,c
  6207  000F6E  D023               	goto	l5870
  6208                           
  6209                           ;ST7735.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6210  000F70  0434               	decf	drawChar@size,w,c
  6211  000F72  A4D8               	btfss	status,2,c
  6212  000F74  D00C               	goto	l5868
  6213  000F76  502E               	movf	drawChar@y,w,c
  6214  000F78  2437               	addwf	drawChar@j,w,c
  6215  000F7A  6E18               	movwf	drawPixel@y,c
  6216  000F7C  C030  F019         	movff	drawChar@color,drawPixel@color
  6217  000F80  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6218  000F84  5036               	movf	drawChar@x,w,c
  6219  000F86  2438               	addwf	drawChar@i,w,c
  6220  000F88  EC9C  F010         	call	_drawPixel
  6221  000F8C  D03E               	goto	l5878
  6222  000F8E                     l5868:
  6223                           
  6224                           ;ST7735.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6225  000F8E  5037               	movf	drawChar@j,w,c
  6226  000F90  0234               	mulwf	drawChar@size,c
  6227  000F92  50F3               	movf	prodl,w,c
  6228  000F94  242E               	addwf	drawChar@y,w,c
  6229  000F96  6E23               	movwf	fillRect@y,c
  6230  000F98  C034  F024         	movff	drawChar@size,fillRect@w
  6231  000F9C  C034  F025         	movff	drawChar@size,fillRect@h
  6232  000FA0  C030  F026         	movff	drawChar@color,fillRect@color
  6233  000FA4  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6234  000FA8  5038               	movf	drawChar@i,w,c
  6235  000FAA  0234               	mulwf	drawChar@size,c
  6236  000FAC  50F3               	movf	prodl,w,c
  6237  000FAE  2436               	addwf	drawChar@x,w,c
  6238  000FB0  EC87  F00F         	call	_fillRect
  6239                           
  6240                           ;ST7735.c: 466: }
  6241  000FB4  D02A               	goto	l5878
  6242  000FB6                     l5870:
  6243                           
  6244                           ;ST7735.c: 467: else if(bg != color) {
  6245  000FB6  5030               	movf	drawChar@color,w,c
  6246  000FB8  1832               	xorwf	drawChar@bg,w,c
  6247  000FBA  E104               	bnz	u4450
  6248  000FBC  5031               	movf	drawChar@color+1,w,c
  6249  000FBE  1833               	xorwf	drawChar@bg+1,w,c
  6250  000FC0  B4D8               	btfsc	status,2,c
  6251  000FC2  D023               	goto	l5878
  6252  000FC4                     u4450:
  6253                           
  6254                           ;ST7735.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6255  000FC4  0434               	decf	drawChar@size,w,c
  6256  000FC6  A4D8               	btfss	status,2,c
  6257  000FC8  D00C               	goto	l5876
  6258  000FCA  502E               	movf	drawChar@y,w,c
  6259  000FCC  2437               	addwf	drawChar@j,w,c
  6260  000FCE  6E18               	movwf	drawPixel@y,c
  6261  000FD0  C032  F019         	movff	drawChar@bg,drawPixel@color
  6262  000FD4  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6263  000FD8  5036               	movf	drawChar@x,w,c
  6264  000FDA  2438               	addwf	drawChar@i,w,c
  6265  000FDC  EC9C  F010         	call	_drawPixel
  6266  000FE0  D014               	goto	l5878
  6267  000FE2                     l5876:
  6268                           
  6269                           ;ST7735.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6270  000FE2  5037               	movf	drawChar@j,w,c
  6271  000FE4  0234               	mulwf	drawChar@size,c
  6272  000FE6  50F3               	movf	prodl,w,c
  6273  000FE8  242E               	addwf	drawChar@y,w,c
  6274  000FEA  6E23               	movwf	fillRect@y,c
  6275  000FEC  C034  F024         	movff	drawChar@size,fillRect@w
  6276  000FF0  C034  F025         	movff	drawChar@size,fillRect@h
  6277  000FF4  C032  F026         	movff	drawChar@bg,fillRect@color
  6278  000FF8  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6279  000FFC  5038               	movf	drawChar@i,w,c
  6280  000FFE  0234               	mulwf	drawChar@size,c
  6281  001000  50F3               	movf	prodl,w,c
  6282  001002  2436               	addwf	drawChar@x,w,c
  6283  001004  EC87  F00F         	call	_fillRect
  6284  001008  D000               	goto	l5878
  6285  00100A                     l5878:
  6286  00100A  2A37               	incf	drawChar@j,f,c
  6287  00100C  90D8               	bcf	status,0,c
  6288  00100E  3235               	rrcf	drawChar@line,f,c
  6289  001010  D7A9               	goto	l5860
  6290  001012                     l5884:
  6291  001012  2A38               	incf	drawChar@i,f,c
  6292  001014  D76F               	goto	l5848
  6293  001016                     l667:
  6294  001016  0012               	return		;funcret
  6295  001018                     __end_of_drawChar:
  6296                           	opt stack 0
  6297                           tblptru	equ	0xFF8
  6298                           tblptrh	equ	0xFF7
  6299                           tblptrl	equ	0xFF6
  6300                           tablat	equ	0xFF5
  6301                           prodh	equ	0xFF4
  6302                           prodl	equ	0xFF3
  6303                           intcon	equ	0xFF2
  6304                           intcon2	equ	0xFF1
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           postdec1	equ	0xFE5
  6308                           fsr1l	equ	0xFE1
  6309                           indf2	equ	0xFDF
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function _fillRect *****************
  6317 ;; Defined at:
  6318 ;;		line 438 in file "ST7735.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  x               1    wreg     unsigned char 
  6321 ;;  y               1   34[COMRAM] unsigned char 
  6322 ;;  w               1   35[COMRAM] unsigned char 
  6323 ;;  h               1   36[COMRAM] unsigned char 
  6324 ;;  color           2   37[COMRAM] unsigned int 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  x               1   42[COMRAM] unsigned char 
  6327 ;;  i               2   43[COMRAM] int 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;		None               void
  6330 ;; Registers used:
  6331 ;;		wreg, status,2, status,0, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6337 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;Total ram usage:       11 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    7
  6344 ;; This function calls:
  6345 ;;		_drawFastVLine
  6346 ;; This function is called by:
  6347 ;;		_drawChar
  6348 ;; This function uses a non-reentrant model
  6349 ;;
  6350                           
  6351                           	psect	text22
  6352  001F0E                     __ptext22:
  6353                           	opt stack 0
  6354  001F0E                     _fillRect:
  6355                           	opt stack 20
  6356                           
  6357                           ;incstack = 0
  6358                           ;fillRect@x stored from wreg
  6359  001F0E  6E2B               	movwf	fillRect@x,c
  6360                           
  6361                           ;ST7735.c: 440: signed int i;
  6362                           ;ST7735.c: 442: for (i = x; i < x + w; i++)
  6363  001F10  C02B  F02C         	movff	fillRect@x,fillRect@i
  6364  001F14  6A2D               	clrf	fillRect@i+1,c
  6365  001F16  D00E               	goto	l5488
  6366  001F18                     l5484:
  6367                           
  6368                           ;ST7735.c: 443: {
  6369                           ;ST7735.c: 444: drawFastVLine(i, y, h, color);
  6370  001F18  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6371  001F1C  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6372  001F20  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6373  001F24  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6374  001F28  502C               	movf	fillRect@i,w,c
  6375  001F2A  EC75  F00C         	call	_drawFastVLine
  6376  001F2E  4A2C               	infsnz	fillRect@i,f,c
  6377  001F30  2A2D               	incf	fillRect@i+1,f,c
  6378  001F32  D000               	goto	l5488
  6379  001F34                     l5488:
  6380  001F34  5024               	movf	fillRect@w,w,c
  6381  001F36  C02B  F028         	movff	fillRect@x,??_fillRect
  6382  001F3A  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6383  001F3C  2628               	addwf	??_fillRect,f,c
  6384  001F3E  0E00               	movlw	0
  6385  001F40  2229               	addwfc	??_fillRect+1,f,c
  6386  001F42  5028               	movf	??_fillRect,w,c
  6387  001F44  5C2C               	subwf	fillRect@i,w,c
  6388  001F46  502D               	movf	fillRect@i+1,w,c
  6389  001F48  0A80               	xorlw	128
  6390  001F4A  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6391  001F4C  5029               	movf	??_fillRect+1,w,c
  6392  001F4E  0A80               	xorlw	128
  6393  001F50  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6394  001F52  A0D8               	btfss	status,0,c
  6395  001F54  D7E1               	goto	l5484
  6396  001F56  0012               	return		;funcret
  6397  001F58                     __end_of_fillRect:
  6398                           	opt stack 0
  6399                           tblptru	equ	0xFF8
  6400                           tblptrh	equ	0xFF7
  6401                           tblptrl	equ	0xFF6
  6402                           tablat	equ	0xFF5
  6403                           prodh	equ	0xFF4
  6404                           prodl	equ	0xFF3
  6405                           intcon	equ	0xFF2
  6406                           intcon2	equ	0xFF1
  6407                           postinc0	equ	0xFEE
  6408                           wreg	equ	0xFE8
  6409                           postdec1	equ	0xFE5
  6410                           fsr1l	equ	0xFE1
  6411                           indf2	equ	0xFDF
  6412                           postinc2	equ	0xFDE
  6413                           postdec2	equ	0xFDD
  6414                           fsr2h	equ	0xFDA
  6415                           fsr2l	equ	0xFD9
  6416                           status	equ	0xFD8
  6417                           
  6418 ;; *************** function _drawFastVLine *****************
  6419 ;; Defined at:
  6420 ;;		line 417 in file "ST7735.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;  x               1    wreg     unsigned char 
  6423 ;;  y               1   23[COMRAM] unsigned char 
  6424 ;;  h               1   24[COMRAM] unsigned char 
  6425 ;;  color           2   25[COMRAM] unsigned int 
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;  x               1   33[COMRAM] unsigned char 
  6428 ;;  lo              1   32[COMRAM] unsigned char 
  6429 ;;  hi              1   31[COMRAM] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;		None               void
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6439 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;Total ram usage:       11 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    6
  6446 ;; This function calls:
  6447 ;;		_setAddrWindow
  6448 ;;		_spiwrite
  6449 ;; This function is called by:
  6450 ;;		_fillRect
  6451 ;;		_fillCircleHelper
  6452 ;;		_fillCircle
  6453 ;;		_drawRect
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text23
  6458  0018EA                     __ptext23:
  6459                           	opt stack 0
  6460  0018EA                     _drawFastVLine:
  6461                           	opt stack 20
  6462                           
  6463                           ;incstack = 0
  6464                           ;drawFastVLine@x stored from wreg
  6465  0018EA  6E22               	movwf	drawFastVLine@x,c
  6466                           
  6467                           ;ST7735.c: 419: unsigned char hi, lo;
  6468                           ;ST7735.c: 420: if((x >= 128) || (y >= 160))
  6469  0018EC  0E80               	movlw	128
  6470  0018EE  6022               	cpfslt	drawFastVLine@x,c
  6471  0018F0  D03F               	goto	l651
  6472  0018F2  0E9F               	movlw	159
  6473  0018F4  6418               	cpfsgt	drawFastVLine@y,c
  6474  0018F6  D001               	goto	l5358
  6475                           
  6476                           ;ST7735.c: 421: return;
  6477  0018F8  D03B               	goto	l651
  6478  0018FA                     l5358:
  6479                           
  6480                           ;ST7735.c: 422: if((y + h - 1) >= 160)
  6481  0018FA  0EFF               	movlw	255
  6482  0018FC  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6483  0018FE  0EFF               	movlw	255
  6484  001900  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6485  001902  5019               	movf	drawFastVLine@h,w,c
  6486  001904  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6487  001908  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6488  00190A  261E               	addwf	??_drawFastVLine+2,f,c
  6489  00190C  0E00               	movlw	0
  6490  00190E  221F               	addwfc	??_drawFastVLine+3,f,c
  6491  001910  501C               	movf	??_drawFastVLine,w,c
  6492  001912  261E               	addwf	??_drawFastVLine+2,f,c
  6493  001914  501D               	movf	??_drawFastVLine+1,w,c
  6494  001916  221F               	addwfc	??_drawFastVLine+3,f,c
  6495  001918  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6496  00191A  D00B               	goto	l5362
  6497  00191C  501F               	movf	??_drawFastVLine+3,w,c
  6498  00191E  E104               	bnz	u3860
  6499  001920  0EA0               	movlw	160
  6500  001922  5C1E               	subwf	??_drawFastVLine+2,w,c
  6501  001924  A0D8               	btfss	status,0,c
  6502  001926  D005               	goto	l5362
  6503  001928                     u3860:
  6504                           
  6505                           ;ST7735.c: 423: h = 160 - y;
  6506  001928  5018               	movf	drawFastVLine@y,w,c
  6507  00192A  0800               	sublw	0
  6508  00192C  0FA0               	addlw	160
  6509  00192E  6E19               	movwf	drawFastVLine@h,c
  6510  001930  D000               	goto	l5362
  6511  001932                     l5362:
  6512                           
  6513                           ;ST7735.c: 424: hi = color >> 8; lo = color;
  6514  001932  501B               	movf	drawFastVLine@color+1,w,c
  6515  001934  6E20               	movwf	drawFastVLine@hi,c
  6516  001936  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6517                           
  6518                           ;ST7735.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6519  00193A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6520  00193E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6521  001942  5018               	movf	drawFastVLine@y,w,c
  6522  001944  2419               	addwf	drawFastVLine@h,w,c
  6523  001946  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6524  001948  041C               	decf	??_drawFastVLine,w,c
  6525  00194A  6E16               	movwf	setAddrWindow@y1,c
  6526  00194C  5022               	movf	drawFastVLine@x,w,c
  6527  00194E  EC3A  F00F         	call	_setAddrWindow
  6528                           
  6529                           ;ST7735.c: 426: PORTDbits.RD3 = 1;
  6530  001952  8683               	bsf	3971,3,c	;volatile
  6531                           
  6532                           ;ST7735.c: 427: PORTDbits.RD4 = 0;
  6533  001954  9883               	bcf	3971,4,c	;volatile
  6534                           
  6535                           ;ST7735.c: 429: while (h--) {
  6536  001956  D007               	goto	l5374
  6537  001958                     l5372:
  6538                           
  6539                           ;ST7735.c: 430: spiwrite(hi);
  6540  001958  5020               	movf	drawFastVLine@hi,w,c
  6541  00195A  EC9B  F011         	call	_spiwrite
  6542                           
  6543                           ;ST7735.c: 431: spiwrite(lo);
  6544  00195E  5021               	movf	drawFastVLine@lo,w,c
  6545  001960  EC9B  F011         	call	_spiwrite
  6546  001964  D000               	goto	l5374
  6547  001966                     l5374:
  6548  001966  0619               	decf	drawFastVLine@h,f,c
  6549  001968  2819               	incf	drawFastVLine@h,w,c
  6550  00196A  A4D8               	btfss	status,2,c
  6551  00196C  D7F5               	goto	l5372
  6552                           
  6553                           ;ST7735.c: 432: }
  6554                           ;ST7735.c: 433: PORTDbits.RD4 = 1;
  6555  00196E  8883               	bsf	3971,4,c	;volatile
  6556  001970                     l651:
  6557  001970  0012               	return		;funcret
  6558  001972                     __end_of_drawFastVLine:
  6559                           	opt stack 0
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           intcon2	equ	0xFF1
  6568                           postinc0	equ	0xFEE
  6569                           wreg	equ	0xFE8
  6570                           postdec1	equ	0xFE5
  6571                           fsr1l	equ	0xFE1
  6572                           indf2	equ	0xFDF
  6573                           postinc2	equ	0xFDE
  6574                           postdec2	equ	0xFDD
  6575                           fsr2h	equ	0xFDA
  6576                           fsr2l	equ	0xFD9
  6577                           status	equ	0xFD8
  6578                           
  6579 ;; *************** function _drawCircle *****************
  6580 ;; Defined at:
  6581 ;;		line 529 in file "ST7735.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;  x0              2   27[COMRAM] int 
  6584 ;;  y0              2   29[COMRAM] int 
  6585 ;;  r               2   31[COMRAM] int 
  6586 ;;  color           2   33[COMRAM] unsigned int 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;  y               2   45[COMRAM] int 
  6589 ;;  x               2   43[COMRAM] int 
  6590 ;;  f               2   41[COMRAM] int 
  6591 ;;  ddF_y           2   39[COMRAM] int 
  6592 ;;  ddF_x           2   37[COMRAM] int 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;		None               void
  6595 ;; Registers used:
  6596 ;;		wreg, status,2, status,0, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6602 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;Total ram usage:       20 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    7
  6609 ;; This function calls:
  6610 ;;		_drawPixel
  6611 ;; This function is called by:
  6612 ;;		_Initialize_Screen
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615                           
  6616                           	psect	text24
  6617  000BA8                     __ptext24:
  6618                           	opt stack 0
  6619  000BA8                     _drawCircle:
  6620                           	opt stack 22
  6621                           
  6622                           ;ST7735.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6623                           ;ST7735.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6624                           
  6625                           ;incstack = 0
  6626  000BA8  C020  F024         	movff	drawCircle@r,??_drawCircle
  6627  000BAC  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6628  000BB0  1E24               	comf	??_drawCircle,f,c
  6629  000BB2  1E25               	comf	??_drawCircle+1,f,c
  6630  000BB4  4A24               	infsnz	??_drawCircle,f,c
  6631  000BB6  2A25               	incf	??_drawCircle+1,f,c
  6632  000BB8  0E01               	movlw	1
  6633  000BBA  2424               	addwf	??_drawCircle,w,c
  6634  000BBC  6E2A               	movwf	drawCircle@f,c
  6635  000BBE  0E00               	movlw	0
  6636  000BC0  2025               	addwfc	??_drawCircle+1,w,c
  6637  000BC2  6E2B               	movwf	drawCircle@f+1,c
  6638  000BC4  0E00               	movlw	0
  6639  000BC6  6E27               	movwf	drawCircle@ddF_x+1,c
  6640  000BC8  0E01               	movlw	1
  6641  000BCA  6E26               	movwf	drawCircle@ddF_x,c
  6642  000BCC  C020  F024         	movff	drawCircle@r,??_drawCircle
  6643  000BD0  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6644  000BD4  90D8               	bcf	status,0,c
  6645  000BD6  3624               	rlcf	??_drawCircle,f,c
  6646  000BD8  3625               	rlcf	??_drawCircle+1,f,c
  6647  000BDA  1E24               	comf	??_drawCircle,f,c
  6648  000BDC  1E25               	comf	??_drawCircle+1,f,c
  6649  000BDE  4A24               	infsnz	??_drawCircle,f,c
  6650  000BE0  2A25               	incf	??_drawCircle+1,f,c
  6651  000BE2  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6652  000BE6  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6653  000BEA  0E00               	movlw	0
  6654  000BEC  6E2D               	movwf	drawCircle@x+1,c
  6655  000BEE  0E00               	movlw	0
  6656  000BF0  6E2C               	movwf	drawCircle@x,c
  6657  000BF2  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6658  000BF6  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6659                           
  6660                           ;ST7735.c: 533: drawPixel(x0 , y0 + r, color);
  6661  000BFA  501E               	movf	drawCircle@y0,w,c
  6662  000BFC  2420               	addwf	drawCircle@r,w,c
  6663  000BFE  6E18               	movwf	drawPixel@y,c
  6664  000C00  C022  F019         	movff	drawCircle@color,drawPixel@color
  6665  000C04  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6666  000C08  501C               	movf	drawCircle@x0,w,c
  6667  000C0A  EC9C  F010         	call	_drawPixel
  6668                           
  6669                           ;ST7735.c: 534: drawPixel(x0 , y0 - r, color);
  6670  000C0E  5020               	movf	drawCircle@r,w,c
  6671  000C10  0800               	sublw	0
  6672  000C12  241E               	addwf	drawCircle@y0,w,c
  6673  000C14  6E18               	movwf	drawPixel@y,c
  6674  000C16  C022  F019         	movff	drawCircle@color,drawPixel@color
  6675  000C1A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6676  000C1E  501C               	movf	drawCircle@x0,w,c
  6677  000C20  EC9C  F010         	call	_drawPixel
  6678                           
  6679                           ;ST7735.c: 535: drawPixel(x0+r, y0 , color);
  6680  000C24  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6681  000C28  C022  F019         	movff	drawCircle@color,drawPixel@color
  6682  000C2C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6683  000C30  501C               	movf	drawCircle@x0,w,c
  6684  000C32  2420               	addwf	drawCircle@r,w,c
  6685  000C34  EC9C  F010         	call	_drawPixel
  6686                           
  6687                           ;ST7735.c: 536: drawPixel(x0-r, y0 , color);
  6688  000C38  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6689  000C3C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6690  000C40  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6691  000C44  5020               	movf	drawCircle@r,w,c
  6692  000C46  0800               	sublw	0
  6693  000C48  241C               	addwf	drawCircle@x0,w,c
  6694  000C4A  EC9C  F010         	call	_drawPixel
  6695                           
  6696                           ;ST7735.c: 537: while (x < y) {
  6697  000C4E  D078               	goto	l6140
  6698  000C50                     l6112:
  6699                           
  6700                           ;ST7735.c: 538: if (f >= 0) {
  6701  000C50  BE2B               	btfsc	drawCircle@f+1,7,c
  6702  000C52  D00B               	goto	l715
  6703                           
  6704                           ;ST7735.c: 539: y--;
  6705  000C54  062E               	decf	drawCircle@y,f,c
  6706  000C56  A0D8               	btfss	status,0,c
  6707  000C58  062F               	decf	drawCircle@y+1,f,c
  6708                           
  6709                           ;ST7735.c: 540: ddF_y += 2;
  6710  000C5A  0E02               	movlw	2
  6711  000C5C  2628               	addwf	drawCircle@ddF_y,f,c
  6712  000C5E  0E00               	movlw	0
  6713  000C60  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6714                           
  6715                           ;ST7735.c: 541: f += ddF_y;
  6716  000C62  5028               	movf	drawCircle@ddF_y,w,c
  6717  000C64  262A               	addwf	drawCircle@f,f,c
  6718  000C66  5029               	movf	drawCircle@ddF_y+1,w,c
  6719  000C68  222B               	addwfc	drawCircle@f+1,f,c
  6720  000C6A                     l715:
  6721                           
  6722                           ;ST7735.c: 542: }
  6723                           ;ST7735.c: 543: x++;
  6724  000C6A  4A2C               	infsnz	drawCircle@x,f,c
  6725  000C6C  2A2D               	incf	drawCircle@x+1,f,c
  6726                           
  6727                           ;ST7735.c: 544: ddF_x += 2;
  6728  000C6E  0E02               	movlw	2
  6729  000C70  2626               	addwf	drawCircle@ddF_x,f,c
  6730  000C72  0E00               	movlw	0
  6731  000C74  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6732                           
  6733                           ;ST7735.c: 545: f += ddF_x;
  6734  000C76  5026               	movf	drawCircle@ddF_x,w,c
  6735  000C78  262A               	addwf	drawCircle@f,f,c
  6736  000C7A  5027               	movf	drawCircle@ddF_x+1,w,c
  6737  000C7C  222B               	addwfc	drawCircle@f+1,f,c
  6738                           
  6739                           ;ST7735.c: 546: drawPixel(x0 + x, y0 + y, color);
  6740  000C7E  501E               	movf	drawCircle@y0,w,c
  6741  000C80  242E               	addwf	drawCircle@y,w,c
  6742  000C82  6E18               	movwf	drawPixel@y,c
  6743  000C84  C022  F019         	movff	drawCircle@color,drawPixel@color
  6744  000C88  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6745  000C8C  501C               	movf	drawCircle@x0,w,c
  6746  000C8E  242C               	addwf	drawCircle@x,w,c
  6747  000C90  EC9C  F010         	call	_drawPixel
  6748                           
  6749                           ;ST7735.c: 547: drawPixel(x0 - x, y0 + y, color);
  6750  000C94  501E               	movf	drawCircle@y0,w,c
  6751  000C96  242E               	addwf	drawCircle@y,w,c
  6752  000C98  6E18               	movwf	drawPixel@y,c
  6753  000C9A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6754  000C9E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6755  000CA2  502C               	movf	drawCircle@x,w,c
  6756  000CA4  0800               	sublw	0
  6757  000CA6  241C               	addwf	drawCircle@x0,w,c
  6758  000CA8  EC9C  F010         	call	_drawPixel
  6759                           
  6760                           ;ST7735.c: 548: drawPixel(x0 + x, y0 - y, color);
  6761  000CAC  502E               	movf	drawCircle@y,w,c
  6762  000CAE  0800               	sublw	0
  6763  000CB0  241E               	addwf	drawCircle@y0,w,c
  6764  000CB2  6E18               	movwf	drawPixel@y,c
  6765  000CB4  C022  F019         	movff	drawCircle@color,drawPixel@color
  6766  000CB8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6767  000CBC  501C               	movf	drawCircle@x0,w,c
  6768  000CBE  242C               	addwf	drawCircle@x,w,c
  6769  000CC0  EC9C  F010         	call	_drawPixel
  6770                           
  6771                           ;ST7735.c: 549: drawPixel(x0 - x, y0 - y, color);
  6772  000CC4  502E               	movf	drawCircle@y,w,c
  6773  000CC6  0800               	sublw	0
  6774  000CC8  241E               	addwf	drawCircle@y0,w,c
  6775  000CCA  6E18               	movwf	drawPixel@y,c
  6776  000CCC  C022  F019         	movff	drawCircle@color,drawPixel@color
  6777  000CD0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6778  000CD4  502C               	movf	drawCircle@x,w,c
  6779  000CD6  0800               	sublw	0
  6780  000CD8  241C               	addwf	drawCircle@x0,w,c
  6781  000CDA  EC9C  F010         	call	_drawPixel
  6782                           
  6783                           ;ST7735.c: 550: drawPixel(x0 + y, y0 + x, color);
  6784  000CDE  501E               	movf	drawCircle@y0,w,c
  6785  000CE0  242C               	addwf	drawCircle@x,w,c
  6786  000CE2  6E18               	movwf	drawPixel@y,c
  6787  000CE4  C022  F019         	movff	drawCircle@color,drawPixel@color
  6788  000CE8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6789  000CEC  501C               	movf	drawCircle@x0,w,c
  6790  000CEE  242E               	addwf	drawCircle@y,w,c
  6791  000CF0  EC9C  F010         	call	_drawPixel
  6792                           
  6793                           ;ST7735.c: 551: drawPixel(x0 - y, y0 + x, color);
  6794  000CF4  501E               	movf	drawCircle@y0,w,c
  6795  000CF6  242C               	addwf	drawCircle@x,w,c
  6796  000CF8  6E18               	movwf	drawPixel@y,c
  6797  000CFA  C022  F019         	movff	drawCircle@color,drawPixel@color
  6798  000CFE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6799  000D02  502E               	movf	drawCircle@y,w,c
  6800  000D04  0800               	sublw	0
  6801  000D06  241C               	addwf	drawCircle@x0,w,c
  6802  000D08  EC9C  F010         	call	_drawPixel
  6803                           
  6804                           ;ST7735.c: 552: drawPixel(x0 + y, y0 - x, color);
  6805  000D0C  502C               	movf	drawCircle@x,w,c
  6806  000D0E  0800               	sublw	0
  6807  000D10  241E               	addwf	drawCircle@y0,w,c
  6808  000D12  6E18               	movwf	drawPixel@y,c
  6809  000D14  C022  F019         	movff	drawCircle@color,drawPixel@color
  6810  000D18  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6811  000D1C  501C               	movf	drawCircle@x0,w,c
  6812  000D1E  242E               	addwf	drawCircle@y,w,c
  6813  000D20  EC9C  F010         	call	_drawPixel
  6814                           
  6815                           ;ST7735.c: 553: drawPixel(x0 - y, y0 - x, color);
  6816  000D24  502C               	movf	drawCircle@x,w,c
  6817  000D26  0800               	sublw	0
  6818  000D28  241E               	addwf	drawCircle@y0,w,c
  6819  000D2A  6E18               	movwf	drawPixel@y,c
  6820  000D2C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6821  000D30  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6822  000D34  502E               	movf	drawCircle@y,w,c
  6823  000D36  0800               	sublw	0
  6824  000D38  241C               	addwf	drawCircle@x0,w,c
  6825  000D3A  EC9C  F010         	call	_drawPixel
  6826  000D3E  D000               	goto	l6140
  6827  000D40                     l6140:
  6828  000D40  502E               	movf	drawCircle@y,w,c
  6829  000D42  5C2C               	subwf	drawCircle@x,w,c
  6830  000D44  502D               	movf	drawCircle@x+1,w,c
  6831  000D46  0A80               	xorlw	128
  6832  000D48  6E24               	movwf	??_drawCircle& (0+255),c
  6833  000D4A  502F               	movf	drawCircle@y+1,w,c
  6834  000D4C  0A80               	xorlw	128
  6835  000D4E  5824               	subwfb	??_drawCircle& (0+255),w,c
  6836  000D50  A0D8               	btfss	status,0,c
  6837  000D52  D77E               	goto	l6112
  6838  000D54  0012               	return		;funcret
  6839  000D56                     __end_of_drawCircle:
  6840                           	opt stack 0
  6841                           tblptru	equ	0xFF8
  6842                           tblptrh	equ	0xFF7
  6843                           tblptrl	equ	0xFF6
  6844                           tablat	equ	0xFF5
  6845                           prodh	equ	0xFF4
  6846                           prodl	equ	0xFF3
  6847                           intcon	equ	0xFF2
  6848                           intcon2	equ	0xFF1
  6849                           postinc0	equ	0xFEE
  6850                           wreg	equ	0xFE8
  6851                           postdec1	equ	0xFE5
  6852                           fsr1l	equ	0xFE1
  6853                           indf2	equ	0xFDF
  6854                           postinc2	equ	0xFDE
  6855                           postdec2	equ	0xFDD
  6856                           fsr2h	equ	0xFDA
  6857                           fsr2l	equ	0xFD9
  6858                           status	equ	0xFD8
  6859                           
  6860 ;; *************** function _drawPixel *****************
  6861 ;; Defined at:
  6862 ;;		line 408 in file "ST7735.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;  x               1    wreg     unsigned char 
  6865 ;;  y               1   23[COMRAM] unsigned char 
  6866 ;;  color           2   24[COMRAM] unsigned int 
  6867 ;; Auto vars:     Size  Location     Type
  6868 ;;  x               1   26[COMRAM] unsigned char 
  6869 ;; Return value:  Size  Location     Type
  6870 ;;		None               void
  6871 ;; Registers used:
  6872 ;;		wreg, status,2, status,0, cstack
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6878 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;Total ram usage:        4 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    6
  6885 ;; This function calls:
  6886 ;;		_setAddrWindow
  6887 ;;		_write_data
  6888 ;; This function is called by:
  6889 ;;		_drawChar
  6890 ;;		_drawCircle
  6891 ;;		_drawCircleHelper
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           	psect	text25
  6896  002138                     __ptext25:
  6897                           	opt stack 0
  6898  002138                     _drawPixel:
  6899                           	opt stack 21
  6900                           
  6901                           ;incstack = 0
  6902                           ;drawPixel@x stored from wreg
  6903  002138  6E1B               	movwf	drawPixel@x,c
  6904                           
  6905                           ;ST7735.c: 410: if((x >= 128) || (y >= 160))
  6906  00213A  0E80               	movlw	128
  6907  00213C  601B               	cpfslt	drawPixel@x,c
  6908  00213E  D013               	goto	l645
  6909  002140  0E9F               	movlw	159
  6910  002142  6418               	cpfsgt	drawPixel@y,c
  6911  002144  D001               	goto	l5476
  6912                           
  6913                           ;ST7735.c: 411: return;
  6914  002146  D00F               	goto	l645
  6915  002148                     l5476:
  6916                           
  6917                           ;ST7735.c: 412: setAddrWindow(x,y,x+1,y+1);
  6918  002148  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6919  00214C  281B               	incf	drawPixel@x,w,c
  6920  00214E  6E15               	movwf	setAddrWindow@x1,c
  6921  002150  2818               	incf	drawPixel@y,w,c
  6922  002152  6E16               	movwf	setAddrWindow@y1,c
  6923  002154  501B               	movf	drawPixel@x,w,c
  6924  002156  EC3A  F00F         	call	_setAddrWindow
  6925                           
  6926                           ;ST7735.c: 413: write_data(color >> 8);
  6927  00215A  501A               	movf	drawPixel@color+1,w,c
  6928  00215C  ECE4  F011         	call	_write_data
  6929                           
  6930                           ;ST7735.c: 414: write_data(color & 0xFF);
  6931  002160  5019               	movf	drawPixel@color,w,c
  6932  002162  ECE4  F011         	call	_write_data
  6933  002166                     l645:
  6934  002166  0012               	return		;funcret
  6935  002168                     __end_of_drawPixel:
  6936                           	opt stack 0
  6937                           tblptru	equ	0xFF8
  6938                           tblptrh	equ	0xFF7
  6939                           tblptrl	equ	0xFF6
  6940                           tablat	equ	0xFF5
  6941                           prodh	equ	0xFF4
  6942                           prodl	equ	0xFF3
  6943                           intcon	equ	0xFF2
  6944                           intcon2	equ	0xFF1
  6945                           postinc0	equ	0xFEE
  6946                           wreg	equ	0xFE8
  6947                           postdec1	equ	0xFE5
  6948                           fsr1l	equ	0xFE1
  6949                           indf2	equ	0xFDF
  6950                           postinc2	equ	0xFDE
  6951                           postdec2	equ	0xFDD
  6952                           fsr2h	equ	0xFDA
  6953                           fsr2l	equ	0xFD9
  6954                           status	equ	0xFD8
  6955                           
  6956 ;; *************** function _setAddrWindow *****************
  6957 ;; Defined at:
  6958 ;;		line 393 in file "ST7735.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;  x0              1    wreg     unsigned char 
  6961 ;;  y0              1   19[COMRAM] unsigned char 
  6962 ;;  x1              1   20[COMRAM] unsigned char 
  6963 ;;  y1              1   21[COMRAM] unsigned char 
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;  x0              1   22[COMRAM] unsigned char 
  6966 ;; Return value:  Size  Location     Type
  6967 ;;		None               void
  6968 ;; Registers used:
  6969 ;;		wreg, status,2, status,0, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6975 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;Total ram usage:        4 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    5
  6982 ;; This function calls:
  6983 ;;		_write_command
  6984 ;;		_write_data
  6985 ;; This function is called by:
  6986 ;;		_drawPixel
  6987 ;;		_drawFastVLine
  6988 ;;		_fillRectangle
  6989 ;;		_drawFastHLine
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           	psect	text26
  6994  001E74                     __ptext26:
  6995                           	opt stack 0
  6996  001E74                     _setAddrWindow:
  6997                           	opt stack 20
  6998                           
  6999                           ;incstack = 0
  7000                           ;setAddrWindow@x0 stored from wreg
  7001  001E74  6E17               	movwf	setAddrWindow@x0,c
  7002                           
  7003                           ;ST7735.c: 395: write_command(0x2A);
  7004  001E76  0E2A               	movlw	42
  7005  001E78  ECEC  F011         	call	_write_command
  7006                           
  7007                           ;ST7735.c: 396: write_data(0);
  7008  001E7C  0E00               	movlw	0
  7009  001E7E  ECE4  F011         	call	_write_data
  7010                           
  7011                           ;ST7735.c: 397: write_data(x0 + colstart);
  7012  001E82  5017               	movf	setAddrWindow@x0,w,c
  7013  001E84  2459               	addwf	_colstart,w,c
  7014  001E86  ECE4  F011         	call	_write_data
  7015                           
  7016                           ;ST7735.c: 398: write_data(0);
  7017  001E8A  0E00               	movlw	0
  7018  001E8C  ECE4  F011         	call	_write_data
  7019                           
  7020                           ;ST7735.c: 399: write_data(x1 + colstart);
  7021  001E90  5015               	movf	setAddrWindow@x1,w,c
  7022  001E92  2459               	addwf	_colstart,w,c
  7023  001E94  ECE4  F011         	call	_write_data
  7024                           
  7025                           ;ST7735.c: 400: write_command(0x2B);
  7026  001E98  0E2B               	movlw	43
  7027  001E9A  ECEC  F011         	call	_write_command
  7028                           
  7029                           ;ST7735.c: 401: write_data(0);
  7030  001E9E  0E00               	movlw	0
  7031  001EA0  ECE4  F011         	call	_write_data
  7032                           
  7033                           ;ST7735.c: 402: write_data(y0 + rowstart);
  7034  001EA4  5014               	movf	setAddrWindow@y0,w,c
  7035  001EA6  245C               	addwf	_rowstart,w,c
  7036  001EA8  ECE4  F011         	call	_write_data
  7037                           
  7038                           ;ST7735.c: 403: write_data(0);
  7039  001EAC  0E00               	movlw	0
  7040  001EAE  ECE4  F011         	call	_write_data
  7041                           
  7042                           ;ST7735.c: 404: write_data(y1 + rowstart);
  7043  001EB2  5016               	movf	setAddrWindow@y1,w,c
  7044  001EB4  245C               	addwf	_rowstart,w,c
  7045  001EB6  ECE4  F011         	call	_write_data
  7046                           
  7047                           ;ST7735.c: 405: write_command(0x2C);
  7048  001EBA  0E2C               	movlw	44
  7049  001EBC  ECEC  F011         	call	_write_command
  7050  001EC0  0012               	return		;funcret
  7051  001EC2                     __end_of_setAddrWindow:
  7052                           	opt stack 0
  7053                           tblptru	equ	0xFF8
  7054                           tblptrh	equ	0xFF7
  7055                           tblptrl	equ	0xFF6
  7056                           tablat	equ	0xFF5
  7057                           prodh	equ	0xFF4
  7058                           prodl	equ	0xFF3
  7059                           intcon	equ	0xFF2
  7060                           intcon2	equ	0xFF1
  7061                           postinc0	equ	0xFEE
  7062                           wreg	equ	0xFE8
  7063                           postdec1	equ	0xFE5
  7064                           fsr1l	equ	0xFE1
  7065                           indf2	equ	0xFDF
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function _TFT_GreenTab_Initialize *****************
  7073 ;; Defined at:
  7074 ;;		line 645 in file "ST7735.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;		None
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;		None
  7079 ;; Return value:  Size  Location     Type
  7080 ;;		None               void
  7081 ;; Registers used:
  7082 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;Total ram usage:        0 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    6
  7095 ;; This function calls:
  7096 ;;		_Rcmd1
  7097 ;;		_Rcmd2red
  7098 ;;		_Rcmd3
  7099 ;;		_write_command
  7100 ;;		_write_data
  7101 ;; This function is called by:
  7102 ;;		_Initialize_Screen
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           	psect	text27
  7107  002168                     __ptext27:
  7108                           	opt stack 0
  7109  002168                     _TFT_GreenTab_Initialize:
  7110                           	opt stack 23
  7111                           
  7112                           ;ST7735.c: 647: PORTDbits.RD4 = 1;
  7113                           
  7114                           ;incstack = 0
  7115  002168  8883               	bsf	3971,4,c	;volatile
  7116                           
  7117                           ;ST7735.c: 648: PORTDbits.RD3 = 0;
  7118  00216A  9683               	bcf	3971,3,c	;volatile
  7119                           
  7120                           ;ST7735.c: 650: SSPSTAT=0x80;
  7121  00216C  0E80               	movlw	128
  7122  00216E  6EC7               	movwf	4039,c	;volatile
  7123                           
  7124                           ;ST7735.c: 651: SSPCON1=0x30;
  7125  002170  0E30               	movlw	48
  7126  002172  6EC6               	movwf	4038,c	;volatile
  7127                           
  7128                           ;ST7735.c: 654: Rcmd1();
  7129  002174  EC97  F008         	call	_Rcmd1	;wreg free
  7130                           
  7131                           ;ST7735.c: 655: Rcmd2red();
  7132  002178  EC0E  F010         	call	_Rcmd2red	;wreg free
  7133                           
  7134                           ;ST7735.c: 656: Rcmd3();
  7135  00217C  EC9B  F009         	call	_Rcmd3	;wreg free
  7136                           
  7137                           ;ST7735.c: 657: write_command(0x36);
  7138  002180  0E36               	movlw	54
  7139  002182  ECEC  F011         	call	_write_command
  7140                           
  7141                           ;ST7735.c: 658: write_data(0xC0);
  7142  002186  0EC0               	movlw	192
  7143  002188  ECE4  F011         	call	_write_data
  7144                           
  7145                           ;ST7735.c: 659: _tft_type = 1;
  7146  00218C  0E01               	movlw	1
  7147  00218E  6E53               	movwf	__tft_type,c
  7148  002190  0012               	return		;funcret
  7149  002192                     __end_of_TFT_GreenTab_Initialize:
  7150                           	opt stack 0
  7151                           tblptru	equ	0xFF8
  7152                           tblptrh	equ	0xFF7
  7153                           tblptrl	equ	0xFF6
  7154                           tablat	equ	0xFF5
  7155                           prodh	equ	0xFF4
  7156                           prodl	equ	0xFF3
  7157                           intcon	equ	0xFF2
  7158                           intcon2	equ	0xFF1
  7159                           postinc0	equ	0xFEE
  7160                           wreg	equ	0xFE8
  7161                           postdec1	equ	0xFE5
  7162                           fsr1l	equ	0xFE1
  7163                           indf2	equ	0xFDF
  7164                           postinc2	equ	0xFDE
  7165                           postdec2	equ	0xFDD
  7166                           fsr2h	equ	0xFDA
  7167                           fsr2l	equ	0xFD9
  7168                           status	equ	0xFD8
  7169                           
  7170 ;; *************** function _Rcmd3 *****************
  7171 ;; Defined at:
  7172 ;;		line 339 in file "ST7735.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;		None
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;		None
  7177 ;; Return value:  Size  Location     Type
  7178 ;;		None               void
  7179 ;; Registers used:
  7180 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7181 ;; Tracked objects:
  7182 ;;		On entry : 0/0
  7183 ;;		On exit  : 0/0
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;Total ram usage:        0 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; Hardware stack levels required when called:    5
  7193 ;; This function calls:
  7194 ;;		_delay_ms
  7195 ;;		_write_command
  7196 ;;		_write_data
  7197 ;; This function is called by:
  7198 ;;		_TFT_GreenTab_Initialize
  7199 ;;		_TFT_BlackTab_Initialize
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           	psect	text28
  7204  001336                     __ptext28:
  7205                           	opt stack 0
  7206  001336                     _Rcmd3:
  7207                           	opt stack 23
  7208                           
  7209                           ;ST7735.c: 341: write_command(0xE0);
  7210                           
  7211                           ;incstack = 0
  7212  001336  0EE0               	movlw	224
  7213  001338  ECEC  F011         	call	_write_command
  7214                           
  7215                           ;ST7735.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x12);
  7216  00133C  0E02               	movlw	2
  7217  00133E  ECE4  F011         	call	_write_data
  7218  001342  0E1C               	movlw	28
  7219  001344  ECE4  F011         	call	_write_data
  7220  001348  0E07               	movlw	7
  7221  00134A  ECE4  F011         	call	_write_data
  7222  00134E  0E12               	movlw	18
  7223  001350  ECE4  F011         	call	_write_data
  7224                           
  7225                           ;ST7735.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2D);
  7226  001354  0E37               	movlw	55
  7227  001356  ECE4  F011         	call	_write_data
  7228  00135A  0E32               	movlw	50
  7229  00135C  ECE4  F011         	call	_write_data
  7230  001360  0E29               	movlw	41
  7231  001362  ECE4  F011         	call	_write_data
  7232  001366  0E2D               	movlw	45
  7233  001368  ECE4  F011         	call	_write_data
  7234                           
  7235                           ;ST7735.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x39);
  7236  00136C  0E29               	movlw	41
  7237  00136E  ECE4  F011         	call	_write_data
  7238  001372  0E25               	movlw	37
  7239  001374  ECE4  F011         	call	_write_data
  7240  001378  0E2B               	movlw	43
  7241  00137A  ECE4  F011         	call	_write_data
  7242  00137E  0E39               	movlw	57
  7243  001380  ECE4  F011         	call	_write_data
  7244                           
  7245                           ;ST7735.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x10);
  7246  001384  0E00               	movlw	0
  7247  001386  ECE4  F011         	call	_write_data
  7248  00138A  0E01               	movlw	1
  7249  00138C  ECE4  F011         	call	_write_data
  7250  001390  0E03               	movlw	3
  7251  001392  ECE4  F011         	call	_write_data
  7252  001396  0E10               	movlw	16
  7253  001398  ECE4  F011         	call	_write_data
  7254                           
  7255                           ;ST7735.c: 346: write_command(0xE1);
  7256  00139C  0EE1               	movlw	225
  7257  00139E  ECEC  F011         	call	_write_command
  7258                           
  7259                           ;ST7735.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x06);
  7260  0013A2  0E03               	movlw	3
  7261  0013A4  ECE4  F011         	call	_write_data
  7262  0013A8  0E1D               	movlw	29
  7263  0013AA  ECE4  F011         	call	_write_data
  7264  0013AE  0E07               	movlw	7
  7265  0013B0  ECE4  F011         	call	_write_data
  7266  0013B4  0E06               	movlw	6
  7267  0013B6  ECE4  F011         	call	_write_data
  7268                           
  7269                           ;ST7735.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2D);
  7270  0013BA  0E2E               	movlw	46
  7271  0013BC  ECE4  F011         	call	_write_data
  7272  0013C0  0E2C               	movlw	44
  7273  0013C2  ECE4  F011         	call	_write_data
  7274  0013C6  0E29               	movlw	41
  7275  0013C8  ECE4  F011         	call	_write_data
  7276  0013CC  0E2D               	movlw	45
  7277  0013CE  ECE4  F011         	call	_write_data
  7278                           
  7279                           ;ST7735.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3F);
  7280  0013D2  0E2E               	movlw	46
  7281  0013D4  ECE4  F011         	call	_write_data
  7282  0013D8  0E2E               	movlw	46
  7283  0013DA  ECE4  F011         	call	_write_data
  7284  0013DE  0E37               	movlw	55
  7285  0013E0  ECE4  F011         	call	_write_data
  7286  0013E4  0E3F               	movlw	63
  7287  0013E6  ECE4  F011         	call	_write_data
  7288                           
  7289                           ;ST7735.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x10);
  7290  0013EA  0E00               	movlw	0
  7291  0013EC  ECE4  F011         	call	_write_data
  7292  0013F0  0E00               	movlw	0
  7293  0013F2  ECE4  F011         	call	_write_data
  7294  0013F6  0E02               	movlw	2
  7295  0013F8  ECE4  F011         	call	_write_data
  7296  0013FC  0E10               	movlw	16
  7297  0013FE  ECE4  F011         	call	_write_data
  7298                           
  7299                           ;ST7735.c: 351: write_command(0x13);
  7300  001402  0E13               	movlw	19
  7301  001404  ECEC  F011         	call	_write_command
  7302                           
  7303                           ;ST7735.c: 352: delay_ms(10);
  7304  001408  0E00               	movlw	0
  7305  00140A  6E18               	movwf	delay_ms@ms+1,c
  7306  00140C  0E0A               	movlw	10
  7307  00140E  6E17               	movwf	delay_ms@ms,c
  7308  001410  ECE9  F00E         	call	_delay_ms	;wreg free
  7309                           
  7310                           ;ST7735.c: 353: write_command(0x29);
  7311  001414  0E29               	movlw	41
  7312  001416  ECEC  F011         	call	_write_command
  7313                           
  7314                           ;ST7735.c: 354: delay_ms(100);
  7315  00141A  0E00               	movlw	0
  7316  00141C  6E18               	movwf	delay_ms@ms+1,c
  7317  00141E  0E64               	movlw	100
  7318  001420  6E17               	movwf	delay_ms@ms,c
  7319  001422  ECE9  F00E         	call	_delay_ms	;wreg free
  7320  001426  0012               	return		;funcret
  7321  001428                     __end_of_Rcmd3:
  7322                           	opt stack 0
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           intcon	equ	0xFF2
  7330                           intcon2	equ	0xFF1
  7331                           postinc0	equ	0xFEE
  7332                           wreg	equ	0xFE8
  7333                           postdec1	equ	0xFE5
  7334                           fsr1l	equ	0xFE1
  7335                           indf2	equ	0xFDF
  7336                           postinc2	equ	0xFDE
  7337                           postdec2	equ	0xFDD
  7338                           fsr2h	equ	0xFDA
  7339                           fsr2l	equ	0xFD9
  7340                           status	equ	0xFD8
  7341                           
  7342 ;; *************** function _Rcmd2red *****************
  7343 ;; Defined at:
  7344 ;;		line 329 in file "ST7735.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;		None
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;		None
  7349 ;; Return value:  Size  Location     Type
  7350 ;;		None               void
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;Total ram usage:        0 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    5
  7365 ;; This function calls:
  7366 ;;		_write_command
  7367 ;;		_write_data
  7368 ;; This function is called by:
  7369 ;;		_TFT_GreenTab_Initialize
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text29
  7374  00201C                     __ptext29:
  7375                           	opt stack 0
  7376  00201C                     _Rcmd2red:
  7377                           	opt stack 23
  7378                           
  7379                           ;ST7735.c: 331: write_command(0x2A);
  7380                           
  7381                           ;incstack = 0
  7382  00201C  0E2A               	movlw	42
  7383  00201E  ECEC  F011         	call	_write_command
  7384                           
  7385                           ;ST7735.c: 332: write_data(0x00); write_data(0x00);
  7386  002022  0E00               	movlw	0
  7387  002024  ECE4  F011         	call	_write_data
  7388  002028  0E00               	movlw	0
  7389  00202A  ECE4  F011         	call	_write_data
  7390                           
  7391                           ;ST7735.c: 333: write_data(0x00); write_data(0x7F);
  7392  00202E  0E00               	movlw	0
  7393  002030  ECE4  F011         	call	_write_data
  7394  002034  0E7F               	movlw	127
  7395  002036  ECE4  F011         	call	_write_data
  7396                           
  7397                           ;ST7735.c: 334: write_command(0x2B);
  7398  00203A  0E2B               	movlw	43
  7399  00203C  ECEC  F011         	call	_write_command
  7400                           
  7401                           ;ST7735.c: 335: write_data(0x00); write_data(0x00);
  7402  002040  0E00               	movlw	0
  7403  002042  ECE4  F011         	call	_write_data
  7404  002046  0E00               	movlw	0
  7405  002048  ECE4  F011         	call	_write_data
  7406                           
  7407                           ;ST7735.c: 336: write_data(0x00); write_data(0x9F);
  7408  00204C  0E00               	movlw	0
  7409  00204E  ECE4  F011         	call	_write_data
  7410  002052  0E9F               	movlw	159
  7411  002054  ECE4  F011         	call	_write_data
  7412  002058  0012               	return		;funcret
  7413  00205A                     __end_of_Rcmd2red:
  7414                           	opt stack 0
  7415                           tblptru	equ	0xFF8
  7416                           tblptrh	equ	0xFF7
  7417                           tblptrl	equ	0xFF6
  7418                           tablat	equ	0xFF5
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           intcon	equ	0xFF2
  7422                           intcon2	equ	0xFF1
  7423                           postinc0	equ	0xFEE
  7424                           wreg	equ	0xFE8
  7425                           postdec1	equ	0xFE5
  7426                           fsr1l	equ	0xFE1
  7427                           indf2	equ	0xFDF
  7428                           postinc2	equ	0xFDE
  7429                           postdec2	equ	0xFDD
  7430                           fsr2h	equ	0xFDA
  7431                           fsr2l	equ	0xFD9
  7432                           status	equ	0xFD8
  7433                           
  7434 ;; *************** function _Rcmd1 *****************
  7435 ;; Defined at:
  7436 ;;		line 282 in file "ST7735.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;		None
  7441 ;; Return value:  Size  Location     Type
  7442 ;;		None               void
  7443 ;; Registers used:
  7444 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;Total ram usage:        0 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    5
  7457 ;; This function calls:
  7458 ;;		_delay_ms
  7459 ;;		_write_command
  7460 ;;		_write_data
  7461 ;; This function is called by:
  7462 ;;		_TFT_GreenTab_Initialize
  7463 ;;		_TFT_BlackTab_Initialize
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           	psect	text30
  7468  00112E                     __ptext30:
  7469                           	opt stack 0
  7470  00112E                     _Rcmd1:
  7471                           	opt stack 23
  7472                           
  7473                           ;ST7735.c: 284: write_command(0x01);
  7474                           
  7475                           ;incstack = 0
  7476  00112E  0E01               	movlw	1
  7477  001130  ECEC  F011         	call	_write_command
  7478                           
  7479                           ;ST7735.c: 285: delay_ms(150);
  7480  001134  0E00               	movlw	0
  7481  001136  6E18               	movwf	delay_ms@ms+1,c
  7482  001138  0E96               	movlw	150
  7483  00113A  6E17               	movwf	delay_ms@ms,c
  7484  00113C  ECE9  F00E         	call	_delay_ms	;wreg free
  7485                           
  7486                           ;ST7735.c: 286: write_command(0x11);
  7487  001140  0E11               	movlw	17
  7488  001142  ECEC  F011         	call	_write_command
  7489                           
  7490                           ;ST7735.c: 287: delay_ms(500);
  7491  001146  0E01               	movlw	1
  7492  001148  6E18               	movwf	delay_ms@ms+1,c
  7493  00114A  0EF4               	movlw	244
  7494  00114C  6E17               	movwf	delay_ms@ms,c
  7495  00114E  ECE9  F00E         	call	_delay_ms	;wreg free
  7496                           
  7497                           ;ST7735.c: 288: write_command(0xB1);
  7498  001152  0EB1               	movlw	177
  7499  001154  ECEC  F011         	call	_write_command
  7500                           
  7501                           ;ST7735.c: 289: write_data(0x01);
  7502  001158  0E01               	movlw	1
  7503  00115A  ECE4  F011         	call	_write_data
  7504                           
  7505                           ;ST7735.c: 290: write_data(0x2C);
  7506  00115E  0E2C               	movlw	44
  7507  001160  ECE4  F011         	call	_write_data
  7508                           
  7509                           ;ST7735.c: 291: write_data(0x2D);
  7510  001164  0E2D               	movlw	45
  7511  001166  ECE4  F011         	call	_write_data
  7512                           
  7513                           ;ST7735.c: 292: write_command(0xB2);
  7514  00116A  0EB2               	movlw	178
  7515  00116C  ECEC  F011         	call	_write_command
  7516                           
  7517                           ;ST7735.c: 293: write_data(0x01);
  7518  001170  0E01               	movlw	1
  7519  001172  ECE4  F011         	call	_write_data
  7520                           
  7521                           ;ST7735.c: 294: write_data(0x2C);
  7522  001176  0E2C               	movlw	44
  7523  001178  ECE4  F011         	call	_write_data
  7524                           
  7525                           ;ST7735.c: 295: write_data(0x2D);
  7526  00117C  0E2D               	movlw	45
  7527  00117E  ECE4  F011         	call	_write_data
  7528                           
  7529                           ;ST7735.c: 296: write_command(0xB3);
  7530  001182  0EB3               	movlw	179
  7531  001184  ECEC  F011         	call	_write_command
  7532                           
  7533                           ;ST7735.c: 297: write_data(0x01);
  7534  001188  0E01               	movlw	1
  7535  00118A  ECE4  F011         	call	_write_data
  7536                           
  7537                           ;ST7735.c: 298: write_data(0x2C);
  7538  00118E  0E2C               	movlw	44
  7539  001190  ECE4  F011         	call	_write_data
  7540                           
  7541                           ;ST7735.c: 299: write_data(0x2D);
  7542  001194  0E2D               	movlw	45
  7543  001196  ECE4  F011         	call	_write_data
  7544                           
  7545                           ;ST7735.c: 300: write_data(0x01);
  7546  00119A  0E01               	movlw	1
  7547  00119C  ECE4  F011         	call	_write_data
  7548                           
  7549                           ;ST7735.c: 301: write_data(0x2C);
  7550  0011A0  0E2C               	movlw	44
  7551  0011A2  ECE4  F011         	call	_write_data
  7552                           
  7553                           ;ST7735.c: 302: write_data(0x2D);
  7554  0011A6  0E2D               	movlw	45
  7555  0011A8  ECE4  F011         	call	_write_data
  7556                           
  7557                           ;ST7735.c: 303: write_command(0xB4);
  7558  0011AC  0EB4               	movlw	180
  7559  0011AE  ECEC  F011         	call	_write_command
  7560                           
  7561                           ;ST7735.c: 304: write_data(0x07);
  7562  0011B2  0E07               	movlw	7
  7563  0011B4  ECE4  F011         	call	_write_data
  7564                           
  7565                           ;ST7735.c: 305: write_command(0xC0);
  7566  0011B8  0EC0               	movlw	192
  7567  0011BA  ECEC  F011         	call	_write_command
  7568                           
  7569                           ;ST7735.c: 306: write_data(0xA2);
  7570  0011BE  0EA2               	movlw	162
  7571  0011C0  ECE4  F011         	call	_write_data
  7572                           
  7573                           ;ST7735.c: 307: write_data(0x02);
  7574  0011C4  0E02               	movlw	2
  7575  0011C6  ECE4  F011         	call	_write_data
  7576                           
  7577                           ;ST7735.c: 308: write_data(0x84);
  7578  0011CA  0E84               	movlw	132
  7579  0011CC  ECE4  F011         	call	_write_data
  7580                           
  7581                           ;ST7735.c: 309: write_command(0xC1);
  7582  0011D0  0EC1               	movlw	193
  7583  0011D2  ECEC  F011         	call	_write_command
  7584                           
  7585                           ;ST7735.c: 310: write_data(0xC5);
  7586  0011D6  0EC5               	movlw	197
  7587  0011D8  ECE4  F011         	call	_write_data
  7588                           
  7589                           ;ST7735.c: 311: write_command(0xC2);
  7590  0011DC  0EC2               	movlw	194
  7591  0011DE  ECEC  F011         	call	_write_command
  7592                           
  7593                           ;ST7735.c: 312: write_data(0x0A);
  7594  0011E2  0E0A               	movlw	10
  7595  0011E4  ECE4  F011         	call	_write_data
  7596                           
  7597                           ;ST7735.c: 313: write_data(0x00);
  7598  0011E8  0E00               	movlw	0
  7599  0011EA  ECE4  F011         	call	_write_data
  7600                           
  7601                           ;ST7735.c: 314: write_command(0xC3);
  7602  0011EE  0EC3               	movlw	195
  7603  0011F0  ECEC  F011         	call	_write_command
  7604                           
  7605                           ;ST7735.c: 315: write_data(0x8A);
  7606  0011F4  0E8A               	movlw	138
  7607  0011F6  ECE4  F011         	call	_write_data
  7608                           
  7609                           ;ST7735.c: 316: write_data(0x2A);
  7610  0011FA  0E2A               	movlw	42
  7611  0011FC  ECE4  F011         	call	_write_data
  7612                           
  7613                           ;ST7735.c: 317: write_command(0xC4);
  7614  001200  0EC4               	movlw	196
  7615  001202  ECEC  F011         	call	_write_command
  7616                           
  7617                           ;ST7735.c: 318: write_data(0x8A);
  7618  001206  0E8A               	movlw	138
  7619  001208  ECE4  F011         	call	_write_data
  7620                           
  7621                           ;ST7735.c: 319: write_data(0xEE);
  7622  00120C  0EEE               	movlw	238
  7623  00120E  ECE4  F011         	call	_write_data
  7624                           
  7625                           ;ST7735.c: 320: write_command(0xC5);
  7626  001212  0EC5               	movlw	197
  7627  001214  ECEC  F011         	call	_write_command
  7628                           
  7629                           ;ST7735.c: 321: write_data(0x0E);
  7630  001218  0E0E               	movlw	14
  7631  00121A  ECE4  F011         	call	_write_data
  7632                           
  7633                           ;ST7735.c: 322: write_command(0x20);
  7634  00121E  0E20               	movlw	32
  7635  001220  ECEC  F011         	call	_write_command
  7636                           
  7637                           ;ST7735.c: 323: write_command(0x36);
  7638  001224  0E36               	movlw	54
  7639  001226  ECEC  F011         	call	_write_command
  7640                           
  7641                           ;ST7735.c: 324: write_data(0xC8);
  7642  00122A  0EC8               	movlw	200
  7643  00122C  ECE4  F011         	call	_write_data
  7644                           
  7645                           ;ST7735.c: 325: write_command(0x3A);
  7646  001230  0E3A               	movlw	58
  7647  001232  ECEC  F011         	call	_write_command
  7648                           
  7649                           ;ST7735.c: 326: write_data(0x05);
  7650  001236  0E05               	movlw	5
  7651  001238  ECE4  F011         	call	_write_data
  7652  00123C  0012               	return		;funcret
  7653  00123E                     __end_of_Rcmd1:
  7654                           	opt stack 0
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodh	equ	0xFF4
  7660                           prodl	equ	0xFF3
  7661                           intcon	equ	0xFF2
  7662                           intcon2	equ	0xFF1
  7663                           postinc0	equ	0xFEE
  7664                           wreg	equ	0xFE8
  7665                           postdec1	equ	0xFE5
  7666                           fsr1l	equ	0xFE1
  7667                           indf2	equ	0xFDF
  7668                           postinc2	equ	0xFDE
  7669                           postdec2	equ	0xFDD
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function _write_data *****************
  7675 ;; Defined at:
  7676 ;;		line 210 in file "ST7735.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  data_           1    wreg     unsigned char 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  data_           1   18[COMRAM] unsigned char 
  7681 ;; Return value:  Size  Location     Type
  7682 ;;		None               void
  7683 ;; Registers used:
  7684 ;;		wreg, status,2, cstack
  7685 ;; Tracked objects:
  7686 ;;		On entry : 0/0
  7687 ;;		On exit  : 0/0
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;Total ram usage:        1 bytes
  7695 ;; Hardware stack levels used:    1
  7696 ;; Hardware stack levels required when called:    4
  7697 ;; This function calls:
  7698 ;;		_spiwrite
  7699 ;; This function is called by:
  7700 ;;		_Rcmd1
  7701 ;;		_Rcmd2red
  7702 ;;		_Rcmd3
  7703 ;;		_setAddrWindow
  7704 ;;		_drawPixel
  7705 ;;		_TFT_GreenTab_Initialize
  7706 ;;		_Bcmd
  7707 ;;		_setScrollDefinition
  7708 ;;		_Rcmd2green
  7709 ;;		_VerticalScroll
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text31
  7714  0023C8                     __ptext31:
  7715                           	opt stack 0
  7716  0023C8                     _write_data:
  7717                           	opt stack 20
  7718                           
  7719                           ;incstack = 0
  7720                           ;write_data@data_ stored from wreg
  7721  0023C8  6E13               	movwf	write_data@data_,c
  7722                           
  7723                           ;ST7735.c: 212: PORTDbits.RD4 = 0;
  7724  0023CA  9883               	bcf	3971,4,c	;volatile
  7725                           
  7726                           ;ST7735.c: 213: PORTDbits.RD3 = 1;
  7727  0023CC  8683               	bsf	3971,3,c	;volatile
  7728                           
  7729                           ;ST7735.c: 214: spiwrite(data_);
  7730  0023CE  5013               	movf	write_data@data_,w,c
  7731  0023D0  EC9B  F011         	call	_spiwrite
  7732                           
  7733                           ;ST7735.c: 215: PORTDbits.RD4 = 1;
  7734  0023D4  8883               	bsf	3971,4,c	;volatile
  7735  0023D6  0012               	return		;funcret
  7736  0023D8                     __end_of_write_data:
  7737                           	opt stack 0
  7738                           tblptru	equ	0xFF8
  7739                           tblptrh	equ	0xFF7
  7740                           tblptrl	equ	0xFF6
  7741                           tablat	equ	0xFF5
  7742                           prodh	equ	0xFF4
  7743                           prodl	equ	0xFF3
  7744                           intcon	equ	0xFF2
  7745                           intcon2	equ	0xFF1
  7746                           postinc0	equ	0xFEE
  7747                           wreg	equ	0xFE8
  7748                           postdec1	equ	0xFE5
  7749                           fsr1l	equ	0xFE1
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _write_command *****************
  7758 ;; Defined at:
  7759 ;;		line 199 in file "ST7735.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  cmd_            1    wreg     unsigned char 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;  cmd_            1   18[COMRAM] unsigned char 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;		None               void
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, cstack
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;Total ram usage:        1 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    4
  7780 ;; This function calls:
  7781 ;;		_spiwrite
  7782 ;; This function is called by:
  7783 ;;		_Rcmd1
  7784 ;;		_Rcmd2red
  7785 ;;		_Rcmd3
  7786 ;;		_setAddrWindow
  7787 ;;		_TFT_GreenTab_Initialize
  7788 ;;		_Bcmd
  7789 ;;		_setScrollDefinition
  7790 ;;		_Rcmd2green
  7791 ;;		_VerticalScroll
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           	psect	text32
  7796  0023D8                     __ptext32:
  7797                           	opt stack 0
  7798  0023D8                     _write_command:
  7799                           	opt stack 20
  7800                           
  7801                           ;incstack = 0
  7802                           ;write_command@cmd_ stored from wreg
  7803  0023D8  6E13               	movwf	write_command@cmd_,c
  7804                           
  7805                           ;ST7735.c: 201: PORTDbits.RD4 = 0;
  7806  0023DA  9883               	bcf	3971,4,c	;volatile
  7807                           
  7808                           ;ST7735.c: 203: PORTDbits.RD3 = 0;
  7809  0023DC  9683               	bcf	3971,3,c	;volatile
  7810                           
  7811                           ;ST7735.c: 204: spiwrite(cmd_);
  7812  0023DE  5013               	movf	write_command@cmd_,w,c
  7813  0023E0  EC9B  F011         	call	_spiwrite
  7814                           
  7815                           ;ST7735.c: 206: PORTDbits.RD4 = 1;
  7816  0023E4  8883               	bsf	3971,4,c	;volatile
  7817  0023E6  0012               	return		;funcret
  7818  0023E8                     __end_of_write_command:
  7819                           	opt stack 0
  7820                           tblptru	equ	0xFF8
  7821                           tblptrh	equ	0xFF7
  7822                           tblptrl	equ	0xFF6
  7823                           tablat	equ	0xFF5
  7824                           prodh	equ	0xFF4
  7825                           prodl	equ	0xFF3
  7826                           intcon	equ	0xFF2
  7827                           intcon2	equ	0xFF1
  7828                           postinc0	equ	0xFEE
  7829                           wreg	equ	0xFE8
  7830                           postdec1	equ	0xFE5
  7831                           fsr1l	equ	0xFE1
  7832                           indf2	equ	0xFDF
  7833                           postinc2	equ	0xFDE
  7834                           postdec2	equ	0xFDD
  7835                           fsr2h	equ	0xFDA
  7836                           fsr2l	equ	0xFD9
  7837                           status	equ	0xFD8
  7838                           
  7839 ;; *************** function _spiwrite *****************
  7840 ;; Defined at:
  7841 ;;		line 190 in file "ST7735.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  spidata         1    wreg     unsigned char 
  7844 ;; Auto vars:     Size  Location     Type
  7845 ;;  spidata         1   17[COMRAM] unsigned char 
  7846 ;;  x               1   16[COMRAM] unsigned char 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;		None               void
  7849 ;; Registers used:
  7850 ;;		wreg
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7859 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7860 ;;Total ram usage:        2 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; Hardware stack levels required when called:    3
  7863 ;; This function calls:
  7864 ;;		Nothing
  7865 ;; This function is called by:
  7866 ;;		_write_command
  7867 ;;		_write_data
  7868 ;;		_drawFastVLine
  7869 ;;		_fillRectangle
  7870 ;;		_drawFastHLine
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           	psect	text33
  7875  002336                     __ptext33:
  7876                           	opt stack 0
  7877  002336                     _spiwrite:
  7878                           	opt stack 22
  7879                           
  7880                           ;incstack = 0
  7881                           ;spiwrite@spidata stored from wreg
  7882  002336  6E12               	movwf	spiwrite@spidata,c
  7883                           
  7884                           ;ST7735.c: 192: char x;
  7885                           ;ST7735.c: 193: PIR1bits.SSPIF = 0;
  7886  002338  969E               	bcf	3998,3,c	;volatile
  7887                           
  7888                           ;ST7735.c: 194: x = SSPBUF;
  7889  00233A  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7890                           
  7891                           ;ST7735.c: 195: SSPBUF = spidata;
  7892  00233E  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7893                           
  7894                           ;ST7735.c: 196: while (!SSPSTATbits.BF);
  7895  002342  D000               	goto	l601
  7896  002344                     l601:
  7897  002344  A0C7               	btfss	4039,0,c	;volatile
  7898  002346  D7FE               	goto	l601
  7899  002348  0012               	return		;funcret
  7900  00234A                     __end_of_spiwrite:
  7901                           	opt stack 0
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           prodh	equ	0xFF4
  7907                           prodl	equ	0xFF3
  7908                           intcon	equ	0xFF2
  7909                           intcon2	equ	0xFF1
  7910                           postinc0	equ	0xFEE
  7911                           wreg	equ	0xFE8
  7912                           postdec1	equ	0xFE5
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function _LCD_Reset *****************
  7922 ;; Defined at:
  7923 ;;		line 218 in file "ST7735.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;		None
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;		None               void
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;Total ram usage:        0 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    5
  7944 ;; This function calls:
  7945 ;;		_delay_ms
  7946 ;; This function is called by:
  7947 ;;		_Initialize_Screen
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text34
  7952  00235E                     __ptext34:
  7953                           	opt stack 0
  7954  00235E                     _LCD_Reset:
  7955                           	opt stack 24
  7956                           
  7957                           ;ST7735.c: 220: PORTDbits.RD2 = 0;
  7958                           
  7959                           ;incstack = 0
  7960  00235E  9483               	bcf	3971,2,c	;volatile
  7961                           
  7962                           ;ST7735.c: 221: delay_ms(100);
  7963  002360  0E00               	movlw	0
  7964  002362  6E18               	movwf	delay_ms@ms+1,c
  7965  002364  0E64               	movlw	100
  7966  002366  6E17               	movwf	delay_ms@ms,c
  7967  002368  ECE9  F00E         	call	_delay_ms	;wreg free
  7968                           
  7969                           ;ST7735.c: 222: PORTDbits.RD2 = 1;
  7970  00236C  8483               	bsf	3971,2,c	;volatile
  7971  00236E  0012               	return		;funcret
  7972  002370                     __end_of_LCD_Reset:
  7973                           	opt stack 0
  7974                           tblptru	equ	0xFF8
  7975                           tblptrh	equ	0xFF7
  7976                           tblptrl	equ	0xFF6
  7977                           tablat	equ	0xFF5
  7978                           prodh	equ	0xFF4
  7979                           prodl	equ	0xFF3
  7980                           intcon	equ	0xFF2
  7981                           intcon2	equ	0xFF1
  7982                           postinc0	equ	0xFEE
  7983                           wreg	equ	0xFE8
  7984                           postdec1	equ	0xFE5
  7985                           fsr1l	equ	0xFE1
  7986                           indf2	equ	0xFDF
  7987                           postinc2	equ	0xFDE
  7988                           postdec2	equ	0xFDD
  7989                           fsr2h	equ	0xFDA
  7990                           fsr2l	equ	0xFD9
  7991                           status	equ	0xFD8
  7992                           
  7993 ;; *************** function _delay_ms *****************
  7994 ;; Defined at:
  7995 ;;		line 65 in file "ST7735.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  ms              2   22[COMRAM] int 
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  count           2   26[COMRAM] int 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;		None               void
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8009 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;Total ram usage:        6 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    4
  8016 ;; This function calls:
  8017 ;;		___wmul
  8018 ;; This function is called by:
  8019 ;;		_LCD_Reset
  8020 ;;		_Rcmd1
  8021 ;;		_Rcmd3
  8022 ;;		_Bcmd
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           	psect	text35
  8027  001DD2                     __ptext35:
  8028                           	opt stack 0
  8029  001DD2                     _delay_ms:
  8030                           	opt stack 23
  8031                           
  8032                           ;ST7735.c: 71: int count;
  8033                           ;ST7735.c: 72: count = 8000000/4000/16 * ms;
  8034                           
  8035                           ;incstack = 0
  8036  001DD2  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  8037  001DD6  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8038  001DDA  0E00               	movlw	0
  8039  001DDC  6E14               	movwf	___wmul@multiplicand+1,c
  8040  001DDE  0E7D               	movlw	125
  8041  001DE0  6E13               	movwf	___wmul@multiplicand,c
  8042  001DE2  ECC9  F010         	call	___wmul	;wreg free
  8043  001DE6  C011  F01B         	movff	?___wmul,delay_ms@count
  8044  001DEA  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  8045                           
  8046                           ;ST7735.c: 73: count = (0xffff - count);
  8047  001DEE  C01B  F019         	movff	delay_ms@count,??_delay_ms
  8048  001DF2  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  8049  001DF6  1E19               	comf	??_delay_ms,f,c
  8050  001DF8  1E1A               	comf	??_delay_ms+1,f,c
  8051  001DFA  4A19               	infsnz	??_delay_ms,f,c
  8052  001DFC  2A1A               	incf	??_delay_ms+1,f,c
  8053  001DFE  0EFF               	movlw	255
  8054  001E00  2419               	addwf	??_delay_ms,w,c
  8055  001E02  6E1B               	movwf	delay_ms@count,c
  8056  001E04  0EFF               	movlw	255
  8057  001E06  201A               	addwfc	??_delay_ms+1,w,c
  8058  001E08  6E1C               	movwf	delay_ms@count+1,c
  8059                           
  8060                           ;ST7735.c: 75: T0CON = 0x03;
  8061  001E0A  0E03               	movlw	3
  8062  001E0C  6ED5               	movwf	4053,c	;volatile
  8063                           
  8064                           ;ST7735.c: 77: TMR0L = count & 0x00ff;
  8065  001E0E  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  8066                           
  8067                           ;ST7735.c: 78: TMR0H = count >> 8;
  8068  001E12  501C               	movf	delay_ms@count+1,w,c
  8069  001E14  6ED7               	movwf	4055,c	;volatile
  8070                           
  8071                           ;ST7735.c: 80: INTCONbits.TMR0IF = 0;
  8072  001E16  94F2               	bcf	intcon,2,c	;volatile
  8073                           
  8074                           ;ST7735.c: 81: T0CONbits.TMR0ON = 1;
  8075  001E18  8ED5               	bsf	4053,7,c	;volatile
  8076                           
  8077                           ;ST7735.c: 83: while (INTCONbits.TMR0IF == 0);
  8078  001E1A  D000               	goto	l591
  8079  001E1C                     l591:
  8080  001E1C  A4F2               	btfss	intcon,2,c	;volatile
  8081  001E1E  D7FE               	goto	l591
  8082                           
  8083                           ;ST7735.c: 84: T0CONbits.TMR0ON = 0;
  8084  001E20  9ED5               	bcf	4053,7,c	;volatile
  8085  001E22  0012               	return		;funcret
  8086  001E24                     __end_of_delay_ms:
  8087                           	opt stack 0
  8088                           tblptru	equ	0xFF8
  8089                           tblptrh	equ	0xFF7
  8090                           tblptrl	equ	0xFF6
  8091                           tablat	equ	0xFF5
  8092                           prodh	equ	0xFF4
  8093                           prodl	equ	0xFF3
  8094                           intcon	equ	0xFF2
  8095                           intcon2	equ	0xFF1
  8096                           postinc0	equ	0xFEE
  8097                           wreg	equ	0xFE8
  8098                           postdec1	equ	0xFE5
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           postdec2	equ	0xFDD
  8103                           fsr2h	equ	0xFDA
  8104                           fsr2l	equ	0xFD9
  8105                           status	equ	0xFD8
  8106                           
  8107 ;; *************** function ___wmul *****************
  8108 ;; Defined at:
  8109 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;  multiplier      2   16[COMRAM] unsigned int 
  8112 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;  product         2   20[COMRAM] unsigned int 
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  2   16[COMRAM] unsigned int 
  8117 ;; Registers used:
  8118 ;;		wreg, status,2, status,0, prodl, prodh
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8124 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;Total ram usage:        6 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    3
  8131 ;; This function calls:
  8132 ;;		Nothing
  8133 ;; This function is called by:
  8134 ;;		_get_RPM
  8135 ;;		_main
  8136 ;;		_delay_ms
  8137 ;;		_drawChar
  8138 ;;		_printf
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text36
  8143  002192                     __ptext36:
  8144                           	opt stack 0
  8145  002192                     ___wmul:
  8146                           	opt stack 26
  8147                           
  8148                           ;incstack = 0
  8149  002192  5011               	movf	___wmul@multiplier,w,c
  8150  002194  0213               	mulwf	___wmul@multiplicand,c
  8151  002196  CFF3 F015          	movff	prodl,___wmul@product
  8152  00219A  CFF4 F016          	movff	prodh,___wmul@product+1
  8153  00219E  5011               	movf	___wmul@multiplier,w,c
  8154  0021A0  0214               	mulwf	___wmul@multiplicand+1,c
  8155  0021A2  50F3               	movf	prodl,w,c
  8156  0021A4  2616               	addwf	___wmul@product+1,f,c
  8157  0021A6  5012               	movf	___wmul@multiplier+1,w,c
  8158  0021A8  0213               	mulwf	___wmul@multiplicand,c
  8159  0021AA  50F3               	movf	prodl,w,c
  8160  0021AC  2616               	addwf	___wmul@product+1,f,c
  8161  0021AE  C015  F011         	movff	___wmul@product,?___wmul
  8162  0021B2  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8163  0021B6  D000               	goto	l870
  8164  0021B8                     l870:
  8165  0021B8  0012               	return		;funcret
  8166  0021BA                     __end_of___wmul:
  8167                           	opt stack 0
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodh	equ	0xFF4
  8173                           prodl	equ	0xFF3
  8174                           intcon	equ	0xFF2
  8175                           intcon2	equ	0xFF1
  8176                           postinc0	equ	0xFEE
  8177                           wreg	equ	0xFE8
  8178                           postdec1	equ	0xFE5
  8179                           fsr1l	equ	0xFE1
  8180                           indf2	equ	0xFDF
  8181                           postinc2	equ	0xFDE
  8182                           postdec2	equ	0xFDD
  8183                           fsr2h	equ	0xFDA
  8184                           fsr2l	equ	0xFD9
  8185                           status	equ	0xFD8
  8186                           
  8187 ;; *************** function _Increase_Speed *****************
  8188 ;; Defined at:
  8189 ;;		line 47 in file "Fan_Support.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;		None
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;		None
  8194 ;; Return value:  Size  Location     Type
  8195 ;;		None               void
  8196 ;; Registers used:
  8197 ;;		wreg, status,2, status,0, cstack
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;Total ram usage:        0 bytes
  8208 ;; Hardware stack levels used:    1
  8209 ;; Hardware stack levels required when called:    6
  8210 ;; This function calls:
  8211 ;;		_Do_Beep
  8212 ;;		_do_update_pwm
  8213 ;; This function is called by:
  8214 ;;		_main
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           	psect	text37
  8219  0021BA                     __ptext37:
  8220                           	opt stack 0
  8221  0021BA                     _Increase_Speed:
  8222                           	opt stack 24
  8223                           
  8224                           ;Fan_Support.c: 49: if ( duty_cycle == 100 )
  8225                           
  8226                           ;incstack = 0
  8227  0021BA  0E64               	movlw	100
  8228  0021BC  185A               	xorwf	_duty_cycle,w,c
  8229  0021BE  A4D8               	btfss	status,2,c
  8230  0021C0  D008               	goto	l6292
  8231                           
  8232                           ;Fan_Support.c: 50: {
  8233                           ;Fan_Support.c: 51: Do_Beep();
  8234  0021C2  ECFB  F011         	call	_Do_Beep	;wreg free
  8235                           
  8236                           ;Fan_Support.c: 52: Do_Beep();
  8237  0021C6  ECFB  F011         	call	_Do_Beep	;wreg free
  8238                           
  8239                           ;Fan_Support.c: 53: do_update_pwm(duty_cycle);
  8240  0021CA  505A               	movf	_duty_cycle,w,c
  8241  0021CC  ECC9  F00B         	call	_do_update_pwm
  8242                           
  8243                           ;Fan_Support.c: 54: }
  8244  0021D0  D006               	goto	l51
  8245  0021D2                     l6292:
  8246                           
  8247                           ;Fan_Support.c: 55: else
  8248                           ;Fan_Support.c: 56: {
  8249                           ;Fan_Support.c: 57: duty_cycle += 5;
  8250  0021D2  0E05               	movlw	5
  8251  0021D4  265A               	addwf	_duty_cycle,f,c
  8252                           
  8253                           ;Fan_Support.c: 58: do_update_pwm(duty_cycle);
  8254  0021D6  505A               	movf	_duty_cycle,w,c
  8255  0021D8  ECC9  F00B         	call	_do_update_pwm
  8256  0021DC  D000               	goto	l51
  8257  0021DE                     l51:
  8258  0021DE  0012               	return		;funcret
  8259  0021E0                     __end_of_Increase_Speed:
  8260                           	opt stack 0
  8261                           tblptru	equ	0xFF8
  8262                           tblptrh	equ	0xFF7
  8263                           tblptrl	equ	0xFF6
  8264                           tablat	equ	0xFF5
  8265                           prodh	equ	0xFF4
  8266                           prodl	equ	0xFF3
  8267                           intcon	equ	0xFF2
  8268                           intcon2	equ	0xFF1
  8269                           postinc0	equ	0xFEE
  8270                           wreg	equ	0xFE8
  8271                           postdec1	equ	0xFE5
  8272                           fsr1l	equ	0xFE1
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function _Do_Init *****************
  8281 ;; Defined at:
  8282 ;;		line 124 in file "Lab11_ex.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;		None
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;		None
  8287 ;; Return value:  Size  Location     Type
  8288 ;;		None               void
  8289 ;; Registers used:
  8290 ;;		wreg, status,2, status,0, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;Total ram usage:        0 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    7
  8303 ;; This function calls:
  8304 ;;		_DS1621_Init
  8305 ;;		_I2C_Init
  8306 ;;		_init_INTERRUPT
  8307 ;;		_init_UART
  8308 ;; This function is called by:
  8309 ;;		_main
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           	psect	text38
  8314  001E24                     __ptext38:
  8315                           	opt stack 0
  8316  001E24                     _Do_Init:
  8317                           	opt stack 23
  8318                           
  8319                           ;Lab11_ex.c: 126: init_UART();
  8320                           
  8321                           ;incstack = 0
  8322  001E24  ECA5  F011         	call	_init_UART	;wreg free
  8323                           
  8324                           ;Lab11_ex.c: 127: OSCCON=0x70;
  8325  001E28  0E70               	movlw	112
  8326  001E2A  6ED3               	movwf	4051,c	;volatile
  8327                           
  8328                           ;Lab11_ex.c: 129: ADCON1=0x0F;
  8329  001E2C  0E0F               	movlw	15
  8330  001E2E  6EC1               	movwf	4033,c	;volatile
  8331                           
  8332                           ;Lab11_ex.c: 130: TRISA = 0x00;
  8333  001E30  0E00               	movlw	0
  8334  001E32  6E92               	movwf	3986,c	;volatile
  8335                           
  8336                           ;Lab11_ex.c: 131: TRISB = 0x01;
  8337  001E34  0E01               	movlw	1
  8338  001E36  6E93               	movwf	3987,c	;volatile
  8339                           
  8340                           ;Lab11_ex.c: 132: TRISC = 0x01;
  8341  001E38  0E01               	movlw	1
  8342  001E3A  6E94               	movwf	3988,c	;volatile
  8343                           
  8344                           ;Lab11_ex.c: 133: TRISD = 0x00;
  8345  001E3C  0E00               	movlw	0
  8346  001E3E  6E95               	movwf	3989,c	;volatile
  8347                           
  8348                           ;Lab11_ex.c: 134: TRISE = 0x00;
  8349  001E40  0E00               	movlw	0
  8350  001E42  6E96               	movwf	3990,c	;volatile
  8351                           
  8352                           ;Lab11_ex.c: 136: PORTA = 0x00;
  8353  001E44  0E00               	movlw	0
  8354  001E46  6E80               	movwf	3968,c	;volatile
  8355                           
  8356                           ;Lab11_ex.c: 139: RBPU=0;
  8357  001E48  9EF1               	bcf	intcon2,7,c	;volatile
  8358                           
  8359                           ;Lab11_ex.c: 140: TMR3L = 0x00;
  8360  001E4A  0E00               	movlw	0
  8361  001E4C  6EB2               	movwf	4018,c	;volatile
  8362                           
  8363                           ;Lab11_ex.c: 141: T3CON = 0x03;
  8364  001E4E  0E03               	movlw	3
  8365  001E50  6EB1               	movwf	4017,c	;volatile
  8366                           
  8367                           ;Lab11_ex.c: 142: I2C_Init(100000);
  8368  001E52  0EA0               	movlw	160
  8369  001E54  6E11               	movwf	I2C_Init@c,c
  8370  001E56  0E86               	movlw	134
  8371  001E58  6E12               	movwf	I2C_Init@c+1,c
  8372  001E5A  0E01               	movlw	1
  8373  001E5C  6E13               	movwf	I2C_Init@c+2,c
  8374  001E5E  0E00               	movlw	0
  8375  001E60  6E14               	movwf	I2C_Init@c+3,c
  8376  001E62  EC13  F012         	call	_I2C_Init	;wreg free
  8377                           
  8378                           ;Lab11_ex.c: 144: DS1621_Init();
  8379  001E66  EC59  F011         	call	_DS1621_Init	;wreg free
  8380                           
  8381                           ;Lab11_ex.c: 145: init_INTERRUPT();
  8382  001E6A  EC83  F010         	call	_init_INTERRUPT	;wreg free
  8383                           
  8384                           ;Lab11_ex.c: 146: FAN = 0;
  8385  001E6E  0E00               	movlw	0
  8386  001E70  6E50               	movwf	_FAN,c
  8387  001E72  0012               	return		;funcret
  8388  001E74                     __end_of_Do_Init:
  8389                           	opt stack 0
  8390                           tblptru	equ	0xFF8
  8391                           tblptrh	equ	0xFF7
  8392                           tblptrl	equ	0xFF6
  8393                           tablat	equ	0xFF5
  8394                           prodh	equ	0xFF4
  8395                           prodl	equ	0xFF3
  8396                           intcon	equ	0xFF2
  8397                           intcon2	equ	0xFF1
  8398                           postinc0	equ	0xFEE
  8399                           wreg	equ	0xFE8
  8400                           postdec1	equ	0xFE5
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           fsr2h	equ	0xFDA
  8406                           fsr2l	equ	0xFD9
  8407                           status	equ	0xFD8
  8408                           
  8409 ;; *************** function _init_UART *****************
  8410 ;; Defined at:
  8411 ;;		line 118 in file "Lab11_ex.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;		None
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;		None
  8416 ;; Return value:  Size  Location     Type
  8417 ;;		None               void
  8418 ;; Registers used:
  8419 ;;		wreg, status,2, cstack
  8420 ;; Tracked objects:
  8421 ;;		On entry : 0/0
  8422 ;;		On exit  : 0/0
  8423 ;;		Unchanged: 0/0
  8424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;Total ram usage:        0 bytes
  8430 ;; Hardware stack levels used:    1
  8431 ;; Hardware stack levels required when called:    4
  8432 ;; This function calls:
  8433 ;;		_OpenUSART
  8434 ;; This function is called by:
  8435 ;;		_Do_Init
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           	psect	text39
  8440  00234A                     __ptext39:
  8441                           	opt stack 0
  8442  00234A                     _init_UART:
  8443                           	opt stack 25
  8444                           
  8445                           ;Lab11_ex.c: 120: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111
      +                          111 & 0b11111111, 25);
  8446                           
  8447                           ;incstack = 0
  8448  00234A  0E00               	movlw	0
  8449  00234C  6E12               	movwf	OpenUSART@spbrg+1,c
  8450  00234E  0E19               	movlw	25
  8451  002350  6E11               	movwf	OpenUSART@spbrg,c
  8452  002352  0E3C               	movlw	60
  8453  002354  ECEB  F00D         	call	_OpenUSART
  8454                           
  8455                           ;Lab11_ex.c: 121: OSCCON = 0x70;
  8456  002358  0E70               	movlw	112
  8457  00235A  6ED3               	movwf	4051,c	;volatile
  8458  00235C  0012               	return		;funcret
  8459  00235E                     __end_of_init_UART:
  8460                           	opt stack 0
  8461                           tblptru	equ	0xFF8
  8462                           tblptrh	equ	0xFF7
  8463                           tblptrl	equ	0xFF6
  8464                           tablat	equ	0xFF5
  8465                           prodh	equ	0xFF4
  8466                           prodl	equ	0xFF3
  8467                           intcon	equ	0xFF2
  8468                           intcon2	equ	0xFF1
  8469                           postinc0	equ	0xFEE
  8470                           wreg	equ	0xFE8
  8471                           postdec1	equ	0xFE5
  8472                           fsr1l	equ	0xFE1
  8473                           indf2	equ	0xFDF
  8474                           postinc2	equ	0xFDE
  8475                           postdec2	equ	0xFDD
  8476                           fsr2h	equ	0xFDA
  8477                           fsr2l	equ	0xFD9
  8478                           status	equ	0xFD8
  8479                           
  8480 ;; *************** function _OpenUSART *****************
  8481 ;; Defined at:
  8482 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;  config          1    wreg     unsigned char 
  8485 ;;  spbrg           2   16[COMRAM] unsigned int 
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;  config          1   18[COMRAM] unsigned char 
  8488 ;; Return value:  Size  Location     Type
  8489 ;;		None               void
  8490 ;; Registers used:
  8491 ;;		wreg, status,2
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;Total ram usage:        3 bytes
  8502 ;; Hardware stack levels used:    1
  8503 ;; Hardware stack levels required when called:    3
  8504 ;; This function calls:
  8505 ;;		Nothing
  8506 ;; This function is called by:
  8507 ;;		_init_UART
  8508 ;; This function uses a non-reentrant model
  8509 ;;
  8510                           
  8511                           	psect	text40
  8512  001BD6                     __ptext40:
  8513                           	opt stack 0
  8514  001BD6                     _OpenUSART:
  8515                           	opt stack 25
  8516                           
  8517                           ;incstack = 0
  8518                           ;OpenUSART@config stored from wreg
  8519  001BD6  6E13               	movwf	OpenUSART@config,c
  8520  001BD8  0E00               	movlw	0
  8521  001BDA  6EAC               	movwf	4012,c	;volatile
  8522  001BDC  0E00               	movlw	0
  8523  001BDE  6EAB               	movwf	4011,c	;volatile
  8524  001BE0  A013               	btfss	OpenUSART@config,0,c
  8525  001BE2  D002               	goto	l5682
  8526  001BE4  88AC               	bsf	4012,4,c	;volatile
  8527  001BE6  D000               	goto	l5682
  8528  001BE8                     l5682:
  8529  001BE8  A213               	btfss	OpenUSART@config,1,c
  8530  001BEA  D003               	goto	l5686
  8531  001BEC  8CAC               	bsf	4012,6,c	;volatile
  8532  001BEE  8CAB               	bsf	4011,6,c	;volatile
  8533  001BF0  D000               	goto	l5686
  8534  001BF2                     l5686:
  8535  001BF2  A413               	btfss	OpenUSART@config,2,c
  8536  001BF4  D002               	goto	l5690
  8537  001BF6  8EAC               	bsf	4012,7,c	;volatile
  8538  001BF8  D000               	goto	l5690
  8539  001BFA                     l5690:
  8540  001BFA  A613               	btfss	OpenUSART@config,3,c
  8541  001BFC  D002               	goto	l858
  8542  001BFE  88AB               	bsf	4011,4,c	;volatile
  8543  001C00  D002               	goto	l5694
  8544  001C02                     l858:
  8545  001C02  8AAB               	bsf	4011,5,c	;volatile
  8546  001C04  D000               	goto	l5694
  8547  001C06                     l5694:
  8548  001C06  B813               	btfsc	OpenUSART@config,4,c
  8549  001C08  84AC               	bsf	4012,2,c	;volatile
  8550  001C0A  989E               	bcf	3998,4,c	;volatile
  8551  001C0C  AA13               	btfss	OpenUSART@config,5,c
  8552  001C0E  D002               	goto	l5702
  8553  001C10  86AB               	bsf	4011,3,c	;volatile
  8554  001C12  D000               	goto	l5702
  8555  001C14                     l5702:
  8556  001C14  AC13               	btfss	OpenUSART@config,6,c
  8557  001C16  D002               	goto	l862
  8558  001C18  8A9D               	bsf	3997,5,c	;volatile
  8559  001C1A  D001               	goto	l863
  8560  001C1C                     l862:
  8561  001C1C  9A9D               	bcf	3997,5,c	;volatile
  8562  001C1E                     l863:
  8563  001C1E  9A9E               	bcf	3998,5,c	;volatile
  8564  001C20  AE13               	btfss	OpenUSART@config,7,c
  8565  001C22  D002               	goto	l864
  8566  001C24  889D               	bsf	3997,4,c	;volatile
  8567  001C26  D001               	goto	l865
  8568  001C28                     l864:
  8569  001C28  989D               	bcf	3997,4,c	;volatile
  8570  001C2A                     l865:
  8571  001C2A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8572  001C2E  5012               	movf	OpenUSART@spbrg+1,w,c
  8573  001C30  6EB0               	movwf	4016,c	;volatile
  8574  001C32  8AAC               	bsf	4012,5,c	;volatile
  8575  001C34  8EAB               	bsf	4011,7,c	;volatile
  8576  001C36  9C94               	bcf	3988,6,c	;volatile
  8577  001C38  8E94               	bsf	3988,7,c	;volatile
  8578  001C3A  B8AC               	btfsc	4012,4,c	;volatile
  8579  001C3C  BEAC               	btfsc	4012,7,c	;volatile
  8580  001C3E  D002               	goto	l867
  8581  001C40  8C94               	bsf	3988,6,c	;volatile
  8582  001C42  D000               	goto	l867
  8583  001C44                     l867:
  8584  001C44  0012               	return		;funcret
  8585  001C46                     __end_of_OpenUSART:
  8586                           	opt stack 0
  8587                           tblptru	equ	0xFF8
  8588                           tblptrh	equ	0xFF7
  8589                           tblptrl	equ	0xFF6
  8590                           tablat	equ	0xFF5
  8591                           prodh	equ	0xFF4
  8592                           prodl	equ	0xFF3
  8593                           intcon	equ	0xFF2
  8594                           intcon2	equ	0xFF1
  8595                           postinc0	equ	0xFEE
  8596                           wreg	equ	0xFE8
  8597                           postdec1	equ	0xFE5
  8598                           fsr1l	equ	0xFE1
  8599                           indf2	equ	0xFDF
  8600                           postinc2	equ	0xFDE
  8601                           postdec2	equ	0xFDD
  8602                           fsr2h	equ	0xFDA
  8603                           fsr2l	equ	0xFD9
  8604                           status	equ	0xFD8
  8605                           
  8606 ;; *************** function _init_INTERRUPT *****************
  8607 ;; Defined at:
  8608 ;;		line 14 in file "Interrupt.c"
  8609 ;; Parameters:    Size  Location     Type
  8610 ;;		None
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;		None
  8613 ;; Return value:  Size  Location     Type
  8614 ;;		None               void
  8615 ;; Registers used:
  8616 ;;		wreg, status,2
  8617 ;; Tracked objects:
  8618 ;;		On entry : 0/0
  8619 ;;		On exit  : 0/0
  8620 ;;		Unchanged: 0/0
  8621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;Total ram usage:        0 bytes
  8627 ;; Hardware stack levels used:    1
  8628 ;; Hardware stack levels required when called:    3
  8629 ;; This function calls:
  8630 ;;		Nothing
  8631 ;; This function is called by:
  8632 ;;		_Do_Init
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           	psect	text41
  8637  002106                     __ptext41:
  8638                           	opt stack 0
  8639  002106                     _init_INTERRUPT:
  8640                           	opt stack 26
  8641                           
  8642                           ;Interrupt.c: 16: INTCONbits.INT0IF = 0;
  8643                           
  8644                           ;incstack = 0
  8645  002106  92F2               	bcf	intcon,1,c	;volatile
  8646                           
  8647                           ;Interrupt.c: 17: INTCON2bits.INTEDG0 = 0;
  8648  002108  9CF1               	bcf	intcon2,6,c	;volatile
  8649                           
  8650                           ;Interrupt.c: 18: INTCONbits.INT0IE = 1;
  8651  00210A  88F2               	bsf	intcon,4,c	;volatile
  8652                           
  8653                           ;Interrupt.c: 19: TMR1H = 0;
  8654  00210C  0E00               	movlw	0
  8655  00210E  6ECF               	movwf	4047,c	;volatile
  8656                           
  8657                           ;Interrupt.c: 20: TMR1L = 0;
  8658  002110  0E00               	movlw	0
  8659  002112  6ECE               	movwf	4046,c	;volatile
  8660                           
  8661                           ;Interrupt.c: 21: PIR1bits.TMR1IF = 0;
  8662  002114  909E               	bcf	3998,0,c	;volatile
  8663                           
  8664                           ;Interrupt.c: 22: PIE1bits.TMR1IE = 1;
  8665  002116  809D               	bsf	3997,0,c	;volatile
  8666                           
  8667                           ;Interrupt.c: 23: INTCONbits.PEIE = 1;
  8668  002118  8CF2               	bsf	intcon,6,c	;volatile
  8669                           
  8670                           ;Interrupt.c: 24: INTCONbits.GIE = 1;
  8671  00211A  8EF2               	bsf	intcon,7,c	;volatile
  8672                           
  8673                           ;Interrupt.c: 25: nec_ok = 0;
  8674  00211C  0E00               	movlw	0
  8675  00211E  6E49               	movwf	_nec_ok+1,c
  8676  002120  0E00               	movlw	0
  8677  002122  6E48               	movwf	_nec_ok,c
  8678                           
  8679                           ;Interrupt.c: 26: Nec_code = 0x0;
  8680  002124  0E00               	movlw	0
  8681  002126  0100               	movlb	0	; () banked
  8682  002128  6FF3               	movwf	_Nec_code& (0+255),b
  8683  00212A  0E00               	movlw	0
  8684  00212C  6FF4               	movwf	(_Nec_code+1)& (0+255),b
  8685  00212E  0E00               	movlw	0
  8686  002130  6FF5               	movwf	(_Nec_code+2)& (0+255),b
  8687  002132  0E00               	movlw	0
  8688  002134  6FF6               	movwf	(_Nec_code+3)& (0+255),b
  8689                           
  8690                           ; BSR set to: 0
  8691  002136  0012               	return		;funcret
  8692  002138                     __end_of_init_INTERRUPT:
  8693                           	opt stack 0
  8694                           tblptru	equ	0xFF8
  8695                           tblptrh	equ	0xFF7
  8696                           tblptrl	equ	0xFF6
  8697                           tablat	equ	0xFF5
  8698                           prodh	equ	0xFF4
  8699                           prodl	equ	0xFF3
  8700                           intcon	equ	0xFF2
  8701                           intcon2	equ	0xFF1
  8702                           postinc0	equ	0xFEE
  8703                           wreg	equ	0xFE8
  8704                           postdec1	equ	0xFE5
  8705                           fsr1l	equ	0xFE1
  8706                           indf2	equ	0xFDF
  8707                           postinc2	equ	0xFDE
  8708                           postdec2	equ	0xFDD
  8709                           fsr2h	equ	0xFDA
  8710                           fsr2l	equ	0xFD9
  8711                           status	equ	0xFD8
  8712                           
  8713 ;; *************** function _I2C_Init *****************
  8714 ;; Defined at:
  8715 ;;		line 14 in file "I2C_Soft.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  c               4   16[COMRAM] unsigned long 
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;		None
  8720 ;; Return value:  Size  Location     Type
  8721 ;;		None               void
  8722 ;; Registers used:
  8723 ;;		wreg, cstack
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;Total ram usage:        4 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:    4
  8736 ;; This function calls:
  8737 ;;		_i2cHighScl
  8738 ;;		_i2cHighSda
  8739 ;; This function is called by:
  8740 ;;		_Do_Init
  8741 ;; This function uses a non-reentrant model
  8742 ;;
  8743                           
  8744                           	psect	text42
  8745  002426                     __ptext42:
  8746                           	opt stack 0
  8747  002426                     _I2C_Init:
  8748                           	opt stack 25
  8749                           
  8750                           ;I2C_Soft.c: 16: i2cHighScl();
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;incstack = 0
  8754  002426  EC02  F012         	call	_i2cHighScl	;wreg free
  8755                           
  8756                           ;I2C_Soft.c: 17: i2cHighSda();
  8757  00242A  EC2F  F012         	call	_i2cHighSda	;wreg free
  8758  00242E  0012               	return		;funcret
  8759  002430                     __end_of_I2C_Init:
  8760                           	opt stack 0
  8761                           tblptru	equ	0xFF8
  8762                           tblptrh	equ	0xFF7
  8763                           tblptrl	equ	0xFF6
  8764                           tablat	equ	0xFF5
  8765                           prodh	equ	0xFF4
  8766                           prodl	equ	0xFF3
  8767                           intcon	equ	0xFF2
  8768                           intcon2	equ	0xFF1
  8769                           postinc0	equ	0xFEE
  8770                           wreg	equ	0xFE8
  8771                           postdec1	equ	0xFE5
  8772                           fsr1l	equ	0xFE1
  8773                           indf2	equ	0xFDF
  8774                           postinc2	equ	0xFDE
  8775                           postdec2	equ	0xFDD
  8776                           fsr2h	equ	0xFDA
  8777                           fsr2l	equ	0xFD9
  8778                           status	equ	0xFD8
  8779                           
  8780 ;; *************** function _DS1621_Init *****************
  8781 ;; Defined at:
  8782 ;;		line 21 in file "I2C_Support.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;		None
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;  Device          1   21[COMRAM] unsigned char 
  8787 ;; Return value:  Size  Location     Type
  8788 ;;		None               void
  8789 ;; Registers used:
  8790 ;;		wreg, status,2, status,0, cstack
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;Total ram usage:        1 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:    6
  8803 ;; This function calls:
  8804 ;;		_I2C_Write_Cmd_Only
  8805 ;;		_I2C_Write_Cmd_Write_Data
  8806 ;; This function is called by:
  8807 ;;		_Do_Init
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text43
  8812  0022B2                     __ptext43:
  8813                           	opt stack 0
  8814  0022B2                     _DS1621_Init:
  8815                           	opt stack 23
  8816                           
  8817                           ;I2C_Support.c: 23: char Device = 0x48;
  8818                           
  8819                           ;incstack = 0
  8820  0022B2  0E48               	movlw	72
  8821  0022B4  6E16               	movwf	DS1621_Init@Device,c
  8822                           
  8823                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data(Device,0xAC,0x02);
  8824  0022B6  0EAC               	movlw	172
  8825  0022B8  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8826  0022BA  0E02               	movlw	2
  8827  0022BC  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8828  0022BE  5016               	movf	DS1621_Init@Device,w,c
  8829  0022C0  EC49  F011         	call	_I2C_Write_Cmd_Write_Data
  8830                           
  8831                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device,0xEE);
  8832  0022C4  0EEE               	movlw	238
  8833  0022C6  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8834  0022C8  5016               	movf	DS1621_Init@Device,w,c
  8835  0022CA  EC83  F011         	call	_I2C_Write_Cmd_Only
  8836  0022CE  0012               	return		;funcret
  8837  0022D0                     __end_of_DS1621_Init:
  8838                           	opt stack 0
  8839                           tblptru	equ	0xFF8
  8840                           tblptrh	equ	0xFF7
  8841                           tblptrl	equ	0xFF6
  8842                           tablat	equ	0xFF5
  8843                           prodh	equ	0xFF4
  8844                           prodl	equ	0xFF3
  8845                           intcon	equ	0xFF2
  8846                           intcon2	equ	0xFF1
  8847                           postinc0	equ	0xFEE
  8848                           wreg	equ	0xFE8
  8849                           postdec1	equ	0xFE5
  8850                           fsr1l	equ	0xFE1
  8851                           indf2	equ	0xFDF
  8852                           postinc2	equ	0xFDE
  8853                           postdec2	equ	0xFDD
  8854                           fsr2h	equ	0xFDA
  8855                           fsr2l	equ	0xFD9
  8856                           status	equ	0xFD8
  8857                           
  8858 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8859 ;; Defined at:
  8860 ;;		line 152 in file "I2C_Soft.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;  Device          1    wreg     unsigned char 
  8863 ;;  Cmd             1   18[COMRAM] unsigned char 
  8864 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8865 ;; Auto vars:     Size  Location     Type
  8866 ;;  Device          1   20[COMRAM] unsigned char 
  8867 ;; Return value:  Size  Location     Type
  8868 ;;		None               void
  8869 ;; Registers used:
  8870 ;;		wreg, status,2, status,0, cstack
  8871 ;; Tracked objects:
  8872 ;;		On entry : 0/0
  8873 ;;		On exit  : 0/0
  8874 ;;		Unchanged: 0/0
  8875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8879 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8880 ;;Total ram usage:        3 bytes
  8881 ;; Hardware stack levels used:    1
  8882 ;; Hardware stack levels required when called:    5
  8883 ;; This function calls:
  8884 ;;		_I2C_Start
  8885 ;;		_I2C_Stop
  8886 ;;		_I2C_Write
  8887 ;; This function is called by:
  8888 ;;		_DS1621_Init
  8889 ;; This function uses a non-reentrant model
  8890 ;;
  8891                           
  8892                           	psect	text44
  8893  002292                     __ptext44:
  8894                           	opt stack 0
  8895  002292                     _I2C_Write_Cmd_Write_Data:
  8896                           	opt stack 23
  8897                           
  8898                           ;incstack = 0
  8899                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8900  002292  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8901                           
  8902                           ;I2C_Soft.c: 154: I2C_Start();
  8903  002294  ECCA  F011         	call	_I2C_Start	;wreg free
  8904                           
  8905                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  8906  002298  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8907  00229A  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8908  00229C  EC2D  F010         	call	_I2C_Write
  8909                           
  8910                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  8911  0022A0  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8912  0022A2  EC2D  F010         	call	_I2C_Write
  8913                           
  8914                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  8915  0022A6  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8916  0022A8  EC2D  F010         	call	_I2C_Write
  8917                           
  8918                           ;I2C_Soft.c: 158: I2C_Stop();
  8919  0022AC  ECC1  F011         	call	_I2C_Stop	;wreg free
  8920  0022B0  0012               	return		;funcret
  8921  0022B2                     __end_of_I2C_Write_Cmd_Write_Data:
  8922                           	opt stack 0
  8923                           tblptru	equ	0xFF8
  8924                           tblptrh	equ	0xFF7
  8925                           tblptrl	equ	0xFF6
  8926                           tablat	equ	0xFF5
  8927                           prodh	equ	0xFF4
  8928                           prodl	equ	0xFF3
  8929                           intcon	equ	0xFF2
  8930                           intcon2	equ	0xFF1
  8931                           postinc0	equ	0xFEE
  8932                           wreg	equ	0xFE8
  8933                           postdec1	equ	0xFE5
  8934                           fsr1l	equ	0xFE1
  8935                           indf2	equ	0xFDF
  8936                           postinc2	equ	0xFDE
  8937                           postdec2	equ	0xFDD
  8938                           fsr2h	equ	0xFDA
  8939                           fsr2l	equ	0xFD9
  8940                           status	equ	0xFD8
  8941                           
  8942 ;; *************** function _I2C_Write_Cmd_Only *****************
  8943 ;; Defined at:
  8944 ;;		line 144 in file "I2C_Soft.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;  Device          1    wreg     unsigned char 
  8947 ;;  Cmd             1   18[COMRAM] unsigned char 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  Device          1   19[COMRAM] unsigned char 
  8950 ;; Return value:  Size  Location     Type
  8951 ;;		None               void
  8952 ;; Registers used:
  8953 ;;		wreg, status,2, status,0, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8959 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;Total ram usage:        2 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    5
  8966 ;; This function calls:
  8967 ;;		_I2C_Start
  8968 ;;		_I2C_Stop
  8969 ;;		_I2C_Write
  8970 ;; This function is called by:
  8971 ;;		_DS1621_Init
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           	psect	text45
  8976  002306                     __ptext45:
  8977                           	opt stack 0
  8978  002306                     _I2C_Write_Cmd_Only:
  8979                           	opt stack 23
  8980                           
  8981                           ;incstack = 0
  8982                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8983  002306  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8984                           
  8985                           ;I2C_Soft.c: 146: I2C_Start();
  8986  002308  ECCA  F011         	call	_I2C_Start	;wreg free
  8987                           
  8988                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  8989  00230C  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8990  00230E  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8991  002310  EC2D  F010         	call	_I2C_Write
  8992                           
  8993                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  8994  002314  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8995  002316  EC2D  F010         	call	_I2C_Write
  8996                           
  8997                           ;I2C_Soft.c: 149: I2C_Stop();
  8998  00231A  ECC1  F011         	call	_I2C_Stop	;wreg free
  8999  00231E  0012               	return		;funcret
  9000  002320                     __end_of_I2C_Write_Cmd_Only:
  9001                           	opt stack 0
  9002                           tblptru	equ	0xFF8
  9003                           tblptrh	equ	0xFF7
  9004                           tblptrl	equ	0xFF6
  9005                           tablat	equ	0xFF5
  9006                           prodh	equ	0xFF4
  9007                           prodl	equ	0xFF3
  9008                           intcon	equ	0xFF2
  9009                           intcon2	equ	0xFF1
  9010                           postinc0	equ	0xFEE
  9011                           wreg	equ	0xFE8
  9012                           postdec1	equ	0xFE5
  9013                           fsr1l	equ	0xFE1
  9014                           indf2	equ	0xFDF
  9015                           postinc2	equ	0xFDE
  9016                           postdec2	equ	0xFDD
  9017                           fsr2h	equ	0xFDA
  9018                           fsr2l	equ	0xFD9
  9019                           status	equ	0xFD8
  9020                           
  9021 ;; *************** function _Decrease_Speed *****************
  9022 ;; Defined at:
  9023 ;;		line 64 in file "Fan_Support.c"
  9024 ;; Parameters:    Size  Location     Type
  9025 ;;		None
  9026 ;; Auto vars:     Size  Location     Type
  9027 ;;		None
  9028 ;; Return value:  Size  Location     Type
  9029 ;;		None               void
  9030 ;; Registers used:
  9031 ;;		wreg, status,2, status,0, cstack
  9032 ;; Tracked objects:
  9033 ;;		On entry : 0/0
  9034 ;;		On exit  : 0/0
  9035 ;;		Unchanged: 0/0
  9036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9041 ;;Total ram usage:        0 bytes
  9042 ;; Hardware stack levels used:    1
  9043 ;; Hardware stack levels required when called:    6
  9044 ;; This function calls:
  9045 ;;		_Do_Beep
  9046 ;;		_do_update_pwm
  9047 ;; This function is called by:
  9048 ;;		_main
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           	psect	text46
  9053  002206                     __ptext46:
  9054                           	opt stack 0
  9055  002206                     _Decrease_Speed:
  9056                           	opt stack 24
  9057                           
  9058                           ;Fan_Support.c: 66: if ( duty_cycle == 0 )
  9059                           
  9060                           ;incstack = 0
  9061  002206  505A               	movf	_duty_cycle,w,c
  9062  002208  A4D8               	btfss	status,2,c
  9063  00220A  D008               	goto	l6300
  9064                           
  9065                           ;Fan_Support.c: 67: {
  9066                           ;Fan_Support.c: 68: Do_Beep();
  9067  00220C  ECFB  F011         	call	_Do_Beep	;wreg free
  9068                           
  9069                           ;Fan_Support.c: 69: Do_Beep();
  9070  002210  ECFB  F011         	call	_Do_Beep	;wreg free
  9071                           
  9072                           ;Fan_Support.c: 70: do_update_pwm(duty_cycle);
  9073  002214  505A               	movf	_duty_cycle,w,c
  9074  002216  ECC9  F00B         	call	_do_update_pwm
  9075                           
  9076                           ;Fan_Support.c: 71: }
  9077  00221A  D006               	goto	l56
  9078  00221C                     l6300:
  9079                           
  9080                           ;Fan_Support.c: 72: else
  9081                           ;Fan_Support.c: 73: {
  9082                           ;Fan_Support.c: 74: duty_cycle -= 5;
  9083  00221C  0E05               	movlw	5
  9084  00221E  5E5A               	subwf	_duty_cycle,f,c
  9085                           
  9086                           ;Fan_Support.c: 75: do_update_pwm(duty_cycle);
  9087  002220  505A               	movf	_duty_cycle,w,c
  9088  002222  ECC9  F00B         	call	_do_update_pwm
  9089  002226  D000               	goto	l56
  9090  002228                     l56:
  9091  002228  0012               	return		;funcret
  9092  00222A                     __end_of_Decrease_Speed:
  9093                           	opt stack 0
  9094                           tblptru	equ	0xFF8
  9095                           tblptrh	equ	0xFF7
  9096                           tblptrl	equ	0xFF6
  9097                           tablat	equ	0xFF5
  9098                           prodh	equ	0xFF4
  9099                           prodl	equ	0xFF3
  9100                           intcon	equ	0xFF2
  9101                           intcon2	equ	0xFF1
  9102                           postinc0	equ	0xFEE
  9103                           wreg	equ	0xFE8
  9104                           postdec1	equ	0xFE5
  9105                           fsr1l	equ	0xFE1
  9106                           indf2	equ	0xFDF
  9107                           postinc2	equ	0xFDE
  9108                           postdec2	equ	0xFDD
  9109                           fsr2h	equ	0xFDA
  9110                           fsr2l	equ	0xFD9
  9111                           status	equ	0xFD8
  9112                           
  9113 ;; *************** function _do_update_pwm *****************
  9114 ;; Defined at:
  9115 ;;		line 79 in file "Fan_Support.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;  duty_cycle      1    wreg     unsigned char 
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;  duty_cycle      1    3[BANK1 ] unsigned char 
  9120 ;;  dc_f            3    0[BANK1 ] float 
  9121 ;;  dc_I            2    4[BANK1 ] int 
  9122 ;; Return value:  Size  Location     Type
  9123 ;;		None               void
  9124 ;; Registers used:
  9125 ;;		wreg, status,2, status,0, cstack
  9126 ;; Tracked objects:
  9127 ;;		On entry : 0/0
  9128 ;;		On exit  : 0/0
  9129 ;;		Unchanged: 0/0
  9130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;      Totals:         3       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;Total ram usage:        9 bytes
  9136 ;; Hardware stack levels used:    1
  9137 ;; Hardware stack levels required when called:    5
  9138 ;; This function calls:
  9139 ;;		___ftdiv
  9140 ;;		___ftmul
  9141 ;;		___fttol
  9142 ;;		___lbtoft
  9143 ;; This function is called by:
  9144 ;;		_Turn_On_Fan
  9145 ;;		_Increase_Speed
  9146 ;;		_Decrease_Speed
  9147 ;;		_main
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           	psect	text47
  9152  001792                     __ptext47:
  9153                           	opt stack 0
  9154  001792                     _do_update_pwm:
  9155                           	opt stack 25
  9156                           
  9157                           ;incstack = 0
  9158                           ;do_update_pwm@duty_cycle stored from wreg
  9159  001792  0101               	movlb	1	; () banked
  9160  001794  6F24               	movwf	do_update_pwm@duty_cycle& (0+255),b
  9161                           
  9162                           ; BSR set to: 1
  9163                           ;Fan_Support.c: 81: float dc_f;
  9164                           ;Fan_Support.c: 82: int dc_I;
  9165                           ;Fan_Support.c: 83: PR2 = 0b00000100 ;
  9166  001796  0E04               	movlw	4
  9167  001798  6ECB               	movwf	4043,c	;volatile
  9168                           
  9169                           ;Fan_Support.c: 84: T2CON = 0b00000111 ;
  9170  00179A  0E07               	movlw	7
  9171  00179C  6ECA               	movwf	4042,c	;volatile
  9172                           
  9173                           ; BSR set to: 1
  9174                           ;Fan_Support.c: 85: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  9175  00179E  0E00               	movlw	0
  9176  0017A0  6E20               	movwf	___ftmul@f2,c
  9177  0017A2  0E80               	movlw	128
  9178  0017A4  6E21               	movwf	___ftmul@f2+1,c
  9179  0017A6  0E40               	movlw	64
  9180  0017A8  6E22               	movwf	___ftmul@f2+2,c
  9181  0017AA  0101               	movlb	1	; () banked
  9182  0017AC  5124               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  9183  0017AE  ECF0  F010         	call	___lbtoft
  9184  0017B2  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9185  0017B6  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9186  0017BA  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9187  0017BE  EC1F  F009         	call	___ftmul	;wreg free
  9188  0017C2  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9189  0017C6  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9190  0017CA  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9191  0017CE  0E00               	movlw	0
  9192  0017D0  6E2F               	movwf	___ftdiv@f2,c
  9193  0017D2  0EA0               	movlw	160
  9194  0017D4  6E30               	movwf	___ftdiv@f2+1,c
  9195  0017D6  0E41               	movlw	65
  9196  0017D8  6E31               	movwf	___ftdiv@f2+2,c
  9197  0017DA  EC87  F00A         	call	___ftdiv	;wreg free
  9198  0017DE  C02C  F121         	movff	?___ftdiv,do_update_pwm@dc_f
  9199  0017E2  C02D  F122         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9200  0017E6  C02E  F123         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9201                           
  9202                           ;Fan_Support.c: 87: dc_I = (int) dc_f;
  9203  0017EA  C121  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  9204  0017EE  C122  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9205  0017F2  C123  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9206  0017F6  EC14  F00A         	call	___fttol	;wreg free
  9207  0017FA  C011  F125         	movff	?___fttol,do_update_pwm@dc_I
  9208  0017FE  C012  F126         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9209                           
  9210                           ;Fan_Support.c: 88: if (dc_I > duty_cycle) dc_I++;
  9211  001802  0101               	movlb	1	; () banked
  9212  001804  5124               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  9213  001806  6E3B               	movwf	??_do_update_pwm& (0+255),c
  9214  001808  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  9215  00180A  0101               	movlb	1	; () banked
  9216  00180C  5125               	movf	do_update_pwm@dc_I& (0+255),w,b
  9217  00180E  5C3B               	subwf	??_do_update_pwm,w,c
  9218  001810  503C               	movf	??_do_update_pwm+1,w,c
  9219  001812  0A80               	xorlw	128
  9220  001814  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  9221  001816  0101               	movlb	1	; () banked
  9222  001818  5126               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  9223  00181A  0A80               	xorlw	128
  9224  00181C  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  9225  00181E  B0D8               	btfsc	status,0,c
  9226  001820  D004               	goto	l5644
  9227                           
  9228                           ; BSR set to: 1
  9229  001822  0101               	movlb	1	; () banked
  9230  001824  4B25               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  9231  001826  2B26               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  9232  001828  D000               	goto	l5644
  9233  00182A                     l5644:
  9234                           
  9235                           ; BSR set to: 1
  9236                           ;Fan_Support.c: 89: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9237  00182A  C125  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9238  00182E  0E03               	movlw	3
  9239  001830  163B               	andwf	??_do_update_pwm,f,c
  9240  001832  383B               	swapf	??_do_update_pwm,w,c
  9241  001834  0BF0               	andlw	240
  9242  001836  090C               	iorlw	12
  9243  001838  6EBD               	movwf	4029,c	;volatile
  9244                           
  9245                           ; BSR set to: 1
  9246                           ;Fan_Support.c: 90: CCPR1L = (dc_I) >> 2;
  9247  00183A  C125  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9248  00183E  C126  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9249  001842  343C               	rlcf	??_do_update_pwm+1,w,c
  9250  001844  323C               	rrcf	??_do_update_pwm+1,f,c
  9251  001846  323B               	rrcf	??_do_update_pwm,f,c
  9252  001848  343C               	rlcf	??_do_update_pwm+1,w,c
  9253  00184A  323C               	rrcf	??_do_update_pwm+1,f,c
  9254  00184C  323B               	rrcf	??_do_update_pwm,f,c
  9255  00184E  503B               	movf	??_do_update_pwm,w,c
  9256  001850  6EBE               	movwf	4030,c	;volatile
  9257                           
  9258                           ; BSR set to: 1
  9259  001852  0012               	return		;funcret
  9260  001854                     __end_of_do_update_pwm:
  9261                           	opt stack 0
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           intcon	equ	0xFF2
  9269                           intcon2	equ	0xFF1
  9270                           postinc0	equ	0xFEE
  9271                           wreg	equ	0xFE8
  9272                           postdec1	equ	0xFE5
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281 ;; *************** function ___lbtoft *****************
  9282 ;; Defined at:
  9283 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;  c               1    wreg     unsigned char 
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;  c               1   27[COMRAM] unsigned char 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  3   24[COMRAM] float 
  9290 ;; Registers used:
  9291 ;;		wreg, status,2, status,0, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9297 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;Total ram usage:        4 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    4
  9304 ;; This function calls:
  9305 ;;		___ftpack
  9306 ;; This function is called by:
  9307 ;;		_do_update_pwm
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           	psect	text48
  9312  0021E0                     __ptext48:
  9313                           	opt stack 0
  9314  0021E0                     ___lbtoft:
  9315                           	opt stack 25
  9316                           
  9317                           ; BSR set to: 1
  9318                           ;incstack = 0
  9319                           ;___lbtoft@c stored from wreg
  9320  0021E0  6E1C               	movwf	___lbtoft@c,c
  9321  0021E2  501C               	movf	___lbtoft@c,w,c
  9322  0021E4  6E11               	movwf	___ftpack@arg,c
  9323  0021E6  6A12               	clrf	___ftpack@arg+1,c
  9324  0021E8  6A13               	clrf	___ftpack@arg+2,c
  9325  0021EA  0E8E               	movlw	142
  9326  0021EC  6E14               	movwf	___ftpack@exp,c
  9327  0021EE  0E00               	movlw	0
  9328  0021F0  6E15               	movwf	___ftpack@sign,c
  9329  0021F2  EC66  F00B         	call	___ftpack	;wreg free
  9330  0021F6  C011  F019         	movff	?___ftpack,?___lbtoft
  9331  0021FA  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9332  0021FE  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9333  002202  D000               	goto	l1327
  9334  002204                     l1327:
  9335  002204  0012               	return		;funcret
  9336  002206                     __end_of___lbtoft:
  9337                           	opt stack 0
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           intcon2	equ	0xFF1
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           postdec1	equ	0xFE5
  9349                           fsr1l	equ	0xFE1
  9350                           indf2	equ	0xFDF
  9351                           postinc2	equ	0xFDE
  9352                           postdec2	equ	0xFDD
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8
  9356                           
  9357 ;; *************** function ___fttol *****************
  9358 ;; Defined at:
  9359 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  f1              3   16[COMRAM] float 
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  lval            4   26[COMRAM] unsigned long 
  9364 ;;  exp1            1   30[COMRAM] unsigned char 
  9365 ;;  sign1           1   25[COMRAM] unsigned char 
  9366 ;; Return value:  Size  Location     Type
  9367 ;;                  4   16[COMRAM] long 
  9368 ;; Registers used:
  9369 ;;		wreg, status,2, status,0
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9375 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9376 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9377 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9378 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;Total ram usage:       15 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:    3
  9382 ;; This function calls:
  9383 ;;		Nothing
  9384 ;; This function is called by:
  9385 ;;		_do_update_pwm
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           	psect	text49
  9390  001428                     __ptext49:
  9391                           	opt stack 0
  9392  001428                     ___fttol:
  9393                           	opt stack 26
  9394                           
  9395                           ;incstack = 0
  9396  001428  C013  F015         	movff	___fttol@f1+2,??___fttol
  9397  00142C  6A16               	clrf	(??___fttol+1)& (0+255),c
  9398  00142E  6A17               	clrf	(??___fttol+2)& (0+255),c
  9399  001430  3412               	rlcf	___fttol@f1+1,w,c
  9400  001432  3615               	rlcf	??___fttol& (0+255),f,c
  9401  001434  E301               	bnc	u4141
  9402  001436  8016               	bsf	(??___fttol+1)& (0+255),0,c
  9403  001438                     u4141:
  9404  001438  5015               	movf	??___fttol,w,c
  9405  00143A  6E1F               	movwf	___fttol@exp1,c
  9406  00143C  501F               	movf	___fttol@exp1,w,c
  9407  00143E  A4D8               	btfss	status,2,c
  9408  001440  D002               	goto	l5590
  9409  001442  D039               	goto	l5614
  9410  001444  D063               	goto	l1286
  9411  001446                     l5590:
  9412  001446  0E17               	movlw	23
  9413  001448  6E15               	movwf	??___fttol& (0+255),c
  9414  00144A  C011  F016         	movff	___fttol@f1,??___fttol+1
  9415  00144E  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  9416  001452  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  9417  001456  2815               	incf	??___fttol,w,c
  9418  001458  6E19               	movwf	(??___fttol+4)& (0+255),c
  9419  00145A  D004               	goto	u4160
  9420  00145C                     u4165:
  9421  00145C  90D8               	bcf	status,0,c
  9422  00145E  3218               	rrcf	??___fttol+3,f,c
  9423  001460  3217               	rrcf	??___fttol+2,f,c
  9424  001462  3216               	rrcf	??___fttol+1,f,c
  9425  001464                     u4160:
  9426  001464  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  9427  001466  D7FA               	goto	u4165
  9428  001468  5016               	movf	??___fttol+1,w,c
  9429  00146A  6E1A               	movwf	___fttol@sign1,c
  9430  00146C  8E12               	bsf	___fttol@f1+1,7,c
  9431  00146E  0EFF               	movlw	255
  9432  001470  1611               	andwf	___fttol@f1,f,c
  9433  001472  0EFF               	movlw	255
  9434  001474  1612               	andwf	___fttol@f1+1,f,c
  9435  001476  0E00               	movlw	0
  9436  001478  1613               	andwf	___fttol@f1+2,f,c
  9437  00147A  5011               	movf	___fttol@f1,w,c
  9438  00147C  6E1B               	movwf	___fttol@lval,c
  9439  00147E  5012               	movf	___fttol@f1+1,w,c
  9440  001480  6E1C               	movwf	___fttol@lval+1,c
  9441  001482  5013               	movf	___fttol@f1+2,w,c
  9442  001484  6E1D               	movwf	___fttol@lval+2,c
  9443  001486  6A1E               	clrf	___fttol@lval+3,c
  9444  001488  0E8E               	movlw	142
  9445  00148A  5E1F               	subwf	___fttol@exp1,f,c
  9446  00148C  AE1F               	btfss	___fttol@exp1,7,c
  9447  00148E  D010               	goto	l5612
  9448  001490  501F               	movf	___fttol@exp1,w,c
  9449  001492  0A80               	xorlw	128
  9450  001494  0F8F               	addlw	143
  9451  001496  B0D8               	btfsc	status,0,c
  9452  001498  D003               	goto	l5608
  9453  00149A  D00D               	goto	l5614
  9454  00149C  D037               	goto	l1286
  9455  00149E  D000               	goto	l5608
  9456  0014A0                     l5608:
  9457  0014A0  90D8               	bcf	status,0,c
  9458  0014A2  321E               	rrcf	___fttol@lval+3,f,c
  9459  0014A4  321D               	rrcf	___fttol@lval+2,f,c
  9460  0014A6  321C               	rrcf	___fttol@lval+1,f,c
  9461  0014A8  321B               	rrcf	___fttol@lval,f,c
  9462  0014AA  3E1F               	incfsz	___fttol@exp1,f,c
  9463  0014AC  D7F9               	goto	l5608
  9464  0014AE  D019               	goto	l5622
  9465  0014B0                     l5612:
  9466  0014B0  0E17               	movlw	23
  9467  0014B2  641F               	cpfsgt	___fttol@exp1,c
  9468  0014B4  D011               	goto	l5620
  9469  0014B6                     l5614:
  9470  0014B6  0E00               	movlw	0
  9471  0014B8  6E11               	movwf	?___fttol,c
  9472  0014BA  0E00               	movlw	0
  9473  0014BC  6E12               	movwf	?___fttol+1,c
  9474  0014BE  0E00               	movlw	0
  9475  0014C0  6E13               	movwf	?___fttol+2,c
  9476  0014C2  0E00               	movlw	0
  9477  0014C4  6E14               	movwf	?___fttol+3,c
  9478  0014C6  D022               	goto	l1286
  9479  0014C8  D007               	goto	l5620
  9480  0014CA                     l5618:
  9481  0014CA  90D8               	bcf	status,0,c
  9482  0014CC  361B               	rlcf	___fttol@lval,f,c
  9483  0014CE  361C               	rlcf	___fttol@lval+1,f,c
  9484  0014D0  361D               	rlcf	___fttol@lval+2,f,c
  9485  0014D2  361E               	rlcf	___fttol@lval+3,f,c
  9486  0014D4  061F               	decf	___fttol@exp1,f,c
  9487  0014D6  D000               	goto	l5620
  9488  0014D8                     l5620:
  9489  0014D8  501F               	movf	___fttol@exp1,w,c
  9490  0014DA  B4D8               	btfsc	status,2,c
  9491  0014DC  D002               	goto	l5622
  9492  0014DE  D7F5               	goto	l5618
  9493  0014E0  D000               	goto	l5622
  9494  0014E2                     l5622:
  9495  0014E2  501A               	movf	___fttol@sign1,w,c
  9496  0014E4  B4D8               	btfsc	status,2,c
  9497  0014E6  D009               	goto	l5626
  9498  0014E8  1E1E               	comf	___fttol@lval+3,f,c
  9499  0014EA  1E1D               	comf	___fttol@lval+2,f,c
  9500  0014EC  1E1C               	comf	___fttol@lval+1,f,c
  9501  0014EE  6C1B               	negf	___fttol@lval,c
  9502  0014F0  0E00               	movlw	0
  9503  0014F2  221C               	addwfc	___fttol@lval+1,f,c
  9504  0014F4  221D               	addwfc	___fttol@lval+2,f,c
  9505  0014F6  221E               	addwfc	___fttol@lval+3,f,c
  9506  0014F8  D000               	goto	l5626
  9507  0014FA                     l5626:
  9508  0014FA  C01B  F011         	movff	___fttol@lval,?___fttol
  9509  0014FE  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  9510  001502  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  9511  001506  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  9512  00150A  D000               	goto	l1286
  9513  00150C                     l1286:
  9514  00150C  0012               	return		;funcret
  9515  00150E                     __end_of___fttol:
  9516                           	opt stack 0
  9517                           tblptru	equ	0xFF8
  9518                           tblptrh	equ	0xFF7
  9519                           tblptrl	equ	0xFF6
  9520                           tablat	equ	0xFF5
  9521                           prodh	equ	0xFF4
  9522                           prodl	equ	0xFF3
  9523                           intcon	equ	0xFF2
  9524                           intcon2	equ	0xFF1
  9525                           postinc0	equ	0xFEE
  9526                           wreg	equ	0xFE8
  9527                           postdec1	equ	0xFE5
  9528                           fsr1l	equ	0xFE1
  9529                           indf2	equ	0xFDF
  9530                           postinc2	equ	0xFDE
  9531                           postdec2	equ	0xFDD
  9532                           fsr2h	equ	0xFDA
  9533                           fsr2l	equ	0xFD9
  9534                           status	equ	0xFD8
  9535                           
  9536 ;; *************** function ___ftmul *****************
  9537 ;; Defined at:
  9538 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9539 ;; Parameters:    Size  Location     Type
  9540 ;;  f1              3   28[COMRAM] float 
  9541 ;;  f2              3   31[COMRAM] float 
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9544 ;;  sign            1   42[COMRAM] unsigned char 
  9545 ;;  cntr            1   41[COMRAM] unsigned char 
  9546 ;;  exp             1   37[COMRAM] unsigned char 
  9547 ;; Return value:  Size  Location     Type
  9548 ;;                  3   28[COMRAM] float 
  9549 ;; Registers used:
  9550 ;;		wreg, status,2, status,0, cstack
  9551 ;; Tracked objects:
  9552 ;;		On entry : 0/0
  9553 ;;		On exit  : 0/0
  9554 ;;		Unchanged: 0/0
  9555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9556 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9559 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;Total ram usage:       15 bytes
  9561 ;; Hardware stack levels used:    1
  9562 ;; Hardware stack levels required when called:    4
  9563 ;; This function calls:
  9564 ;;		___ftpack
  9565 ;; This function is called by:
  9566 ;;		_do_update_pwm
  9567 ;; This function uses a non-reentrant model
  9568 ;;
  9569                           
  9570                           	psect	text50
  9571  00123E                     __ptext50:
  9572                           	opt stack 0
  9573  00123E                     ___ftmul:
  9574                           	opt stack 25
  9575                           
  9576                           ;incstack = 0
  9577  00123E  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9578  001242  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9579  001244  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9580  001246  341E               	rlcf	___ftmul@f1+1,w,c
  9581  001248  3623               	rlcf	??___ftmul& (0+255),f,c
  9582  00124A  E301               	bnc	u4081
  9583  00124C  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9584  00124E                     u4081:
  9585  00124E  5023               	movf	??___ftmul,w,c
  9586  001250  6E26               	movwf	___ftmul@exp,c
  9587  001252  5026               	movf	___ftmul@exp,w,c
  9588  001254  A4D8               	btfss	status,2,c
  9589  001256  D002               	goto	l5542
  9590  001258  D00E               	goto	l5544
  9591  00125A  D06C               	goto	l1265
  9592  00125C                     l5542:
  9593  00125C  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9594  001260  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9595  001262  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9596  001264  3421               	rlcf	___ftmul@f2+1,w,c
  9597  001266  3623               	rlcf	??___ftmul& (0+255),f,c
  9598  001268  E301               	bnc	u4101
  9599  00126A  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9600  00126C                     u4101:
  9601  00126C  5023               	movf	??___ftmul,w,c
  9602  00126E  6E2B               	movwf	___ftmul@sign,c
  9603  001270  502B               	movf	___ftmul@sign,w,c
  9604  001272  A4D8               	btfss	status,2,c
  9605  001274  D007               	goto	l5548
  9606  001276                     l5544:
  9607  001276  0E00               	movlw	0
  9608  001278  6E1D               	movwf	?___ftmul,c
  9609  00127A  0E00               	movlw	0
  9610  00127C  6E1E               	movwf	?___ftmul+1,c
  9611  00127E  0E00               	movlw	0
  9612  001280  6E1F               	movwf	?___ftmul+2,c
  9613  001282  D058               	goto	l1265
  9614  001284                     l5548:
  9615  001284  502B               	movf	___ftmul@sign,w,c
  9616  001286  0F7B               	addlw	123
  9617  001288  2626               	addwf	___ftmul@exp,f,c
  9618  00128A  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9619  00128E  5022               	movf	___ftmul@f2+2,w,c
  9620  001290  1A2B               	xorwf	___ftmul@sign,f,c
  9621  001292  0E80               	movlw	128
  9622  001294  162B               	andwf	___ftmul@sign,f,c
  9623  001296  8E1E               	bsf	___ftmul@f1+1,7,c
  9624  001298  8E21               	bsf	___ftmul@f2+1,7,c
  9625  00129A  0EFF               	movlw	255
  9626  00129C  1620               	andwf	___ftmul@f2,f,c
  9627  00129E  0EFF               	movlw	255
  9628  0012A0  1621               	andwf	___ftmul@f2+1,f,c
  9629  0012A2  0E00               	movlw	0
  9630  0012A4  1622               	andwf	___ftmul@f2+2,f,c
  9631  0012A6  0E00               	movlw	0
  9632  0012A8  6E27               	movwf	___ftmul@f3_as_product,c
  9633  0012AA  0E00               	movlw	0
  9634  0012AC  6E28               	movwf	___ftmul@f3_as_product+1,c
  9635  0012AE  0E00               	movlw	0
  9636  0012B0  6E29               	movwf	___ftmul@f3_as_product+2,c
  9637  0012B2  0E07               	movlw	7
  9638  0012B4  6E2A               	movwf	___ftmul@cntr,c
  9639  0012B6  D000               	goto	l5562
  9640  0012B8                     l5562:
  9641  0012B8  A01D               	btfss	___ftmul@f1,0,c
  9642  0012BA  D007               	goto	l5566
  9643  0012BC  5020               	movf	___ftmul@f2,w,c
  9644  0012BE  2627               	addwf	___ftmul@f3_as_product,f,c
  9645  0012C0  5021               	movf	___ftmul@f2+1,w,c
  9646  0012C2  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9647  0012C4  5022               	movf	___ftmul@f2+2,w,c
  9648  0012C6  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9649  0012C8  D000               	goto	l5566
  9650  0012CA                     l5566:
  9651  0012CA  90D8               	bcf	status,0,c
  9652  0012CC  321F               	rrcf	___ftmul@f1+2,f,c
  9653  0012CE  321E               	rrcf	___ftmul@f1+1,f,c
  9654  0012D0  321D               	rrcf	___ftmul@f1,f,c
  9655  0012D2  90D8               	bcf	status,0,c
  9656  0012D4  3620               	rlcf	___ftmul@f2,f,c
  9657  0012D6  3621               	rlcf	___ftmul@f2+1,f,c
  9658  0012D8  3622               	rlcf	___ftmul@f2+2,f,c
  9659  0012DA  2E2A               	decfsz	___ftmul@cntr,f,c
  9660  0012DC  D7ED               	goto	l5562
  9661  0012DE  D000               	goto	l5570
  9662  0012E0                     l5570:
  9663  0012E0  0E09               	movlw	9
  9664  0012E2  6E2A               	movwf	___ftmul@cntr,c
  9665  0012E4  D000               	goto	l5572
  9666  0012E6                     l5572:
  9667  0012E6  A01D               	btfss	___ftmul@f1,0,c
  9668  0012E8  D007               	goto	l5576
  9669  0012EA  5020               	movf	___ftmul@f2,w,c
  9670  0012EC  2627               	addwf	___ftmul@f3_as_product,f,c
  9671  0012EE  5021               	movf	___ftmul@f2+1,w,c
  9672  0012F0  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9673  0012F2  5022               	movf	___ftmul@f2+2,w,c
  9674  0012F4  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9675  0012F6  D000               	goto	l5576
  9676  0012F8                     l5576:
  9677  0012F8  90D8               	bcf	status,0,c
  9678  0012FA  321F               	rrcf	___ftmul@f1+2,f,c
  9679  0012FC  321E               	rrcf	___ftmul@f1+1,f,c
  9680  0012FE  321D               	rrcf	___ftmul@f1,f,c
  9681  001300  90D8               	bcf	status,0,c
  9682  001302  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9683  001304  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9684  001306  3227               	rrcf	___ftmul@f3_as_product,f,c
  9685  001308  2E2A               	decfsz	___ftmul@cntr,f,c
  9686  00130A  D7ED               	goto	l5572
  9687  00130C  D000               	goto	l5580
  9688  00130E                     l5580:
  9689  00130E  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9690  001312  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9691  001316  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9692  00131A  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9693  00131E  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9694  001322  EC66  F00B         	call	___ftpack	;wreg free
  9695  001326  C011  F01D         	movff	?___ftpack,?___ftmul
  9696  00132A  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9697  00132E  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9698  001332  D000               	goto	l1265
  9699  001334                     l1265:
  9700  001334  0012               	return		;funcret
  9701  001336                     __end_of___ftmul:
  9702                           	opt stack 0
  9703                           tblptru	equ	0xFF8
  9704                           tblptrh	equ	0xFF7
  9705                           tblptrl	equ	0xFF6
  9706                           tablat	equ	0xFF5
  9707                           prodh	equ	0xFF4
  9708                           prodl	equ	0xFF3
  9709                           intcon	equ	0xFF2
  9710                           intcon2	equ	0xFF1
  9711                           postinc0	equ	0xFEE
  9712                           wreg	equ	0xFE8
  9713                           postdec1	equ	0xFE5
  9714                           fsr1l	equ	0xFE1
  9715                           indf2	equ	0xFDF
  9716                           postinc2	equ	0xFDE
  9717                           postdec2	equ	0xFDD
  9718                           fsr2h	equ	0xFDA
  9719                           fsr2l	equ	0xFD9
  9720                           status	equ	0xFD8
  9721                           
  9722 ;; *************** function ___ftdiv *****************
  9723 ;; Defined at:
  9724 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;  f1              3   43[COMRAM] float 
  9727 ;;  f2              3   46[COMRAM] float 
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;  f3              3   53[COMRAM] float 
  9730 ;;  sign            1   57[COMRAM] unsigned char 
  9731 ;;  exp             1   56[COMRAM] unsigned char 
  9732 ;;  cntr            1   52[COMRAM] unsigned char 
  9733 ;; Return value:  Size  Location     Type
  9734 ;;                  3   43[COMRAM] float 
  9735 ;; Registers used:
  9736 ;;		wreg, status,2, status,0, cstack
  9737 ;; Tracked objects:
  9738 ;;		On entry : 0/0
  9739 ;;		On exit  : 0/0
  9740 ;;		Unchanged: 0/0
  9741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9742 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9743 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9745 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9746 ;;Total ram usage:       15 bytes
  9747 ;; Hardware stack levels used:    1
  9748 ;; Hardware stack levels required when called:    4
  9749 ;; This function calls:
  9750 ;;		___ftpack
  9751 ;; This function is called by:
  9752 ;;		_do_update_pwm
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           	psect	text51
  9757  00150E                     __ptext51:
  9758                           	opt stack 0
  9759  00150E                     ___ftdiv:
  9760                           	opt stack 25
  9761                           
  9762                           ;incstack = 0
  9763  00150E  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9764  001512  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9765  001514  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9766  001516  342D               	rlcf	___ftdiv@f1+1,w,c
  9767  001518  3632               	rlcf	??___ftdiv& (0+255),f,c
  9768  00151A  E301               	bnc	u4031
  9769  00151C  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9770  00151E                     u4031:
  9771  00151E  5032               	movf	??___ftdiv,w,c
  9772  001520  6E39               	movwf	___ftdiv@exp,c
  9773  001522  5039               	movf	___ftdiv@exp,w,c
  9774  001524  A4D8               	btfss	status,2,c
  9775  001526  D002               	goto	l5496
  9776  001528  D00E               	goto	l5498
  9777  00152A  D061               	goto	l1250
  9778  00152C                     l5496:
  9779  00152C  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9780  001530  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9781  001532  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9782  001534  3430               	rlcf	___ftdiv@f2+1,w,c
  9783  001536  3632               	rlcf	??___ftdiv& (0+255),f,c
  9784  001538  E301               	bnc	u4051
  9785  00153A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9786  00153C                     u4051:
  9787  00153C  5032               	movf	??___ftdiv,w,c
  9788  00153E  6E3A               	movwf	___ftdiv@sign,c
  9789  001540  503A               	movf	___ftdiv@sign,w,c
  9790  001542  A4D8               	btfss	status,2,c
  9791  001544  D007               	goto	l5502
  9792  001546                     l5498:
  9793  001546  0E00               	movlw	0
  9794  001548  6E2C               	movwf	?___ftdiv,c
  9795  00154A  0E00               	movlw	0
  9796  00154C  6E2D               	movwf	?___ftdiv+1,c
  9797  00154E  0E00               	movlw	0
  9798  001550  6E2E               	movwf	?___ftdiv+2,c
  9799  001552  D04D               	goto	l1250
  9800  001554                     l5502:
  9801  001554  0E00               	movlw	0
  9802  001556  6E36               	movwf	___ftdiv@f3,c
  9803  001558  0E00               	movlw	0
  9804  00155A  6E37               	movwf	___ftdiv@f3+1,c
  9805  00155C  0E00               	movlw	0
  9806  00155E  6E38               	movwf	___ftdiv@f3+2,c
  9807  001560  503A               	movf	___ftdiv@sign,w,c
  9808  001562  0F89               	addlw	137
  9809  001564  5E39               	subwf	___ftdiv@exp,f,c
  9810  001566  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9811  00156A  5031               	movf	___ftdiv@f2+2,w,c
  9812  00156C  1A3A               	xorwf	___ftdiv@sign,f,c
  9813  00156E  0E80               	movlw	128
  9814  001570  163A               	andwf	___ftdiv@sign,f,c
  9815  001572  8E2D               	bsf	___ftdiv@f1+1,7,c
  9816  001574  0EFF               	movlw	255
  9817  001576  162C               	andwf	___ftdiv@f1,f,c
  9818  001578  0EFF               	movlw	255
  9819  00157A  162D               	andwf	___ftdiv@f1+1,f,c
  9820  00157C  0E00               	movlw	0
  9821  00157E  162E               	andwf	___ftdiv@f1+2,f,c
  9822  001580  8E30               	bsf	___ftdiv@f2+1,7,c
  9823  001582  0EFF               	movlw	255
  9824  001584  162F               	andwf	___ftdiv@f2,f,c
  9825  001586  0EFF               	movlw	255
  9826  001588  1630               	andwf	___ftdiv@f2+1,f,c
  9827  00158A  0E00               	movlw	0
  9828  00158C  1631               	andwf	___ftdiv@f2+2,f,c
  9829  00158E  0E18               	movlw	24
  9830  001590  6E35               	movwf	___ftdiv@cntr,c
  9831  001592  D000               	goto	l5522
  9832  001594                     l5522:
  9833  001594  90D8               	bcf	status,0,c
  9834  001596  3636               	rlcf	___ftdiv@f3,f,c
  9835  001598  3637               	rlcf	___ftdiv@f3+1,f,c
  9836  00159A  3638               	rlcf	___ftdiv@f3+2,f,c
  9837  00159C  502F               	movf	___ftdiv@f2,w,c
  9838  00159E  5C2C               	subwf	___ftdiv@f1,w,c
  9839  0015A0  5030               	movf	___ftdiv@f2+1,w,c
  9840  0015A2  582D               	subwfb	___ftdiv@f1+1,w,c
  9841  0015A4  5031               	movf	___ftdiv@f2+2,w,c
  9842  0015A6  582E               	subwfb	___ftdiv@f1+2,w,c
  9843  0015A8  A0D8               	btfss	status,0,c
  9844  0015AA  D007               	goto	l1253
  9845  0015AC  502F               	movf	___ftdiv@f2,w,c
  9846  0015AE  5E2C               	subwf	___ftdiv@f1,f,c
  9847  0015B0  5030               	movf	___ftdiv@f2+1,w,c
  9848  0015B2  5A2D               	subwfb	___ftdiv@f1+1,f,c
  9849  0015B4  5031               	movf	___ftdiv@f2+2,w,c
  9850  0015B6  5A2E               	subwfb	___ftdiv@f1+2,f,c
  9851  0015B8  8036               	bsf	___ftdiv@f3,0,c
  9852  0015BA                     l1253:
  9853  0015BA  90D8               	bcf	status,0,c
  9854  0015BC  362C               	rlcf	___ftdiv@f1,f,c
  9855  0015BE  362D               	rlcf	___ftdiv@f1+1,f,c
  9856  0015C0  362E               	rlcf	___ftdiv@f1+2,f,c
  9857  0015C2  2E35               	decfsz	___ftdiv@cntr,f,c
  9858  0015C4  D7E7               	goto	l5522
  9859  0015C6  D000               	goto	l5532
  9860  0015C8                     l5532:
  9861  0015C8  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  9862  0015CC  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9863  0015D0  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9864  0015D4  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  9865  0015D8  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  9866  0015DC  EC66  F00B         	call	___ftpack	;wreg free
  9867  0015E0  C011  F02C         	movff	?___ftpack,?___ftdiv
  9868  0015E4  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  9869  0015E8  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  9870  0015EC  D000               	goto	l1250
  9871  0015EE                     l1250:
  9872  0015EE  0012               	return		;funcret
  9873  0015F0                     __end_of___ftdiv:
  9874                           	opt stack 0
  9875                           tblptru	equ	0xFF8
  9876                           tblptrh	equ	0xFF7
  9877                           tblptrl	equ	0xFF6
  9878                           tablat	equ	0xFF5
  9879                           prodh	equ	0xFF4
  9880                           prodl	equ	0xFF3
  9881                           intcon	equ	0xFF2
  9882                           intcon2	equ	0xFF1
  9883                           postinc0	equ	0xFEE
  9884                           wreg	equ	0xFE8
  9885                           postdec1	equ	0xFE5
  9886                           fsr1l	equ	0xFE1
  9887                           indf2	equ	0xFDF
  9888                           postinc2	equ	0xFDE
  9889                           postdec2	equ	0xFDD
  9890                           fsr2h	equ	0xFDA
  9891                           fsr2l	equ	0xFD9
  9892                           status	equ	0xFD8
  9893                           
  9894 ;; *************** function ___ftpack *****************
  9895 ;; Defined at:
  9896 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9897 ;; Parameters:    Size  Location     Type
  9898 ;;  arg             3   16[COMRAM] unsigned um
  9899 ;;  exp             1   19[COMRAM] unsigned char 
  9900 ;;  sign            1   20[COMRAM] unsigned char 
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;		None
  9903 ;; Return value:  Size  Location     Type
  9904 ;;                  3   16[COMRAM] float 
  9905 ;; Registers used:
  9906 ;;		wreg, status,2, status,0
  9907 ;; Tracked objects:
  9908 ;;		On entry : 0/0
  9909 ;;		On exit  : 0/0
  9910 ;;		Unchanged: 0/0
  9911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9912 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9914 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9915 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9916 ;;Total ram usage:        8 bytes
  9917 ;; Hardware stack levels used:    1
  9918 ;; Hardware stack levels required when called:    3
  9919 ;; This function calls:
  9920 ;;		Nothing
  9921 ;; This function is called by:
  9922 ;;		___ftdiv
  9923 ;;		___ftmul
  9924 ;;		___lbtoft
  9925 ;; This function uses a non-reentrant model
  9926 ;;
  9927                           
  9928                           	psect	text52
  9929  0016CC                     __ptext52:
  9930                           	opt stack 0
  9931  0016CC                     ___ftpack:
  9932                           	opt stack 25
  9933                           
  9934                           ;incstack = 0
  9935  0016CC  5014               	movf	___ftpack@exp,w,c
  9936  0016CE  B4D8               	btfsc	status,2,c
  9937  0016D0  D005               	goto	l5386
  9938  0016D2  5011               	movf	___ftpack@arg,w,c
  9939  0016D4  1012               	iorwf	___ftpack@arg+1,w,c
  9940  0016D6  1013               	iorwf	___ftpack@arg+2,w,c
  9941  0016D8  A4D8               	btfss	status,2,c
  9942  0016DA  D00E               	goto	l5392
  9943  0016DC                     l5386:
  9944  0016DC  0E00               	movlw	0
  9945  0016DE  6E11               	movwf	?___ftpack,c
  9946  0016E0  0E00               	movlw	0
  9947  0016E2  6E12               	movwf	?___ftpack+1,c
  9948  0016E4  0E00               	movlw	0
  9949  0016E6  6E13               	movwf	?___ftpack+2,c
  9950  0016E8  D053               	goto	l1178
  9951  0016EA  D006               	goto	l5392
  9952  0016EC                     l5390:
  9953  0016EC  2A14               	incf	___ftpack@exp,f,c
  9954  0016EE  90D8               	bcf	status,0,c
  9955  0016F0  3213               	rrcf	___ftpack@arg+2,f,c
  9956  0016F2  3212               	rrcf	___ftpack@arg+1,f,c
  9957  0016F4  3211               	rrcf	___ftpack@arg,f,c
  9958  0016F6  D000               	goto	l5392
  9959  0016F8                     l5392:
  9960  0016F8  0E00               	movlw	0
  9961  0016FA  1411               	andwf	___ftpack@arg,w,c
  9962  0016FC  6E16               	movwf	??___ftpack& (0+255),c
  9963  0016FE  0E00               	movlw	0
  9964  001700  1412               	andwf	___ftpack@arg+1,w,c
  9965  001702  6E17               	movwf	(??___ftpack+1)& (0+255),c
  9966  001704  0EFE               	movlw	254
  9967  001706  1413               	andwf	___ftpack@arg+2,w,c
  9968  001708  6E18               	movwf	(??___ftpack+2)& (0+255),c
  9969  00170A  5016               	movf	??___ftpack,w,c
  9970  00170C  1017               	iorwf	??___ftpack+1,w,c
  9971  00170E  1018               	iorwf	??___ftpack+2,w,c
  9972  001710  B4D8               	btfsc	status,2,c
  9973  001712  D00E               	goto	l5398
  9974  001714  D7EB               	goto	l5390
  9975  001716  D00C               	goto	l5398
  9976  001718                     l5394:
  9977  001718  2A14               	incf	___ftpack@exp,f,c
  9978  00171A  0E01               	movlw	1
  9979  00171C  2611               	addwf	___ftpack@arg,f,c
  9980  00171E  0E00               	movlw	0
  9981  001720  2212               	addwfc	___ftpack@arg+1,f,c
  9982  001722  0E00               	movlw	0
  9983  001724  2213               	addwfc	___ftpack@arg+2,f,c
  9984  001726  90D8               	bcf	status,0,c
  9985  001728  3213               	rrcf	___ftpack@arg+2,f,c
  9986  00172A  3212               	rrcf	___ftpack@arg+1,f,c
  9987  00172C  3211               	rrcf	___ftpack@arg,f,c
  9988  00172E  D000               	goto	l5398
  9989  001730                     l5398:
  9990  001730  0E00               	movlw	0
  9991  001732  1411               	andwf	___ftpack@arg,w,c
  9992  001734  6E16               	movwf	??___ftpack& (0+255),c
  9993  001736  0E00               	movlw	0
  9994  001738  1412               	andwf	___ftpack@arg+1,w,c
  9995  00173A  6E17               	movwf	(??___ftpack+1)& (0+255),c
  9996  00173C  0EFF               	movlw	255
  9997  00173E  1413               	andwf	___ftpack@arg+2,w,c
  9998  001740  6E18               	movwf	(??___ftpack+2)& (0+255),c
  9999  001742  5016               	movf	??___ftpack,w,c
 10000  001744  1017               	iorwf	??___ftpack+1,w,c
 10001  001746  1018               	iorwf	??___ftpack+2,w,c
 10002  001748  B4D8               	btfsc	status,2,c
 10003  00174A  D008               	goto	l5402
 10004  00174C  D7E5               	goto	l5394
 10005  00174E  D006               	goto	l5402
 10006  001750                     l5400:
 10007  001750  0614               	decf	___ftpack@exp,f,c
 10008  001752  90D8               	bcf	status,0,c
 10009  001754  3611               	rlcf	___ftpack@arg,f,c
 10010  001756  3612               	rlcf	___ftpack@arg+1,f,c
 10011  001758  3613               	rlcf	___ftpack@arg+2,f,c
 10012  00175A  D000               	goto	l5402
 10013  00175C                     l5402:
 10014  00175C  BE12               	btfsc	___ftpack@arg+1,7,c
 10015  00175E  D004               	goto	l1189
 10016  001760  0E02               	movlw	2
 10017  001762  6014               	cpfslt	___ftpack@exp,c
 10018  001764  D7F5               	goto	l5400
 10019  001766  D000               	goto	l1189
 10020  001768                     l1189:
 10021  001768  B014               	btfsc	___ftpack@exp,0,c
 10022  00176A  D002               	goto	l5408
 10023  00176C  9E12               	bcf	___ftpack@arg+1,7,c
 10024  00176E  D000               	goto	l5408
 10025  001770                     l5408:
 10026  001770  90D8               	bcf	status,0,c
 10027  001772  3214               	rrcf	___ftpack@exp,f,c
 10028  001774  5014               	movf	___ftpack@exp,w,c
 10029  001776  1213               	iorwf	___ftpack@arg+2,f,c
 10030  001778  5015               	movf	___ftpack@sign,w,c
 10031  00177A  B4D8               	btfsc	status,2,c
 10032  00177C  D002               	goto	l5414
 10033  00177E  8E13               	bsf	___ftpack@arg+2,7,c
 10034  001780  D000               	goto	l5414
 10035  001782                     l5414:
 10036  001782  C011  F011         	movff	___ftpack@arg,?___ftpack
 10037  001786  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 10038  00178A  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 10039  00178E  D000               	goto	l1178
 10040  001790                     l1178:
 10041  001790  0012               	return		;funcret
 10042  001792                     __end_of___ftpack:
 10043                           	opt stack 0
 10044                           tblptru	equ	0xFF8
 10045                           tblptrh	equ	0xFF7
 10046                           tblptrl	equ	0xFF6
 10047                           tablat	equ	0xFF5
 10048                           prodh	equ	0xFF4
 10049                           prodl	equ	0xFF3
 10050                           intcon	equ	0xFF2
 10051                           intcon2	equ	0xFF1
 10052                           postinc0	equ	0xFEE
 10053                           wreg	equ	0xFE8
 10054                           postdec1	equ	0xFE5
 10055                           fsr1l	equ	0xFE1
 10056                           indf2	equ	0xFDF
 10057                           postinc2	equ	0xFDE
 10058                           postdec2	equ	0xFDD
 10059                           fsr2h	equ	0xFDA
 10060                           fsr2l	equ	0xFD9
 10061                           status	equ	0xFD8
 10062                           
 10063 ;; *************** function _Do_Beep *****************
 10064 ;; Defined at:
 10065 ;;		line 32 in file "Utils.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  2   18[None  ] int 
 10072 ;; Registers used:
 10073 ;;		wreg, status,2, status,0, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;Total ram usage:        0 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    4
 10086 ;; This function calls:
 10087 ;;		_Activate_Buzzer
 10088 ;;		_Deactivate_Buzzer
 10089 ;;		_Wait_Half_Second
 10090 ;; This function is called by:
 10091 ;;		_Increase_Speed
 10092 ;;		_Decrease_Speed
 10093 ;;		_main
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096                           
 10097                           	psect	text53
 10098  0023F6                     __ptext53:
 10099                           	opt stack 0
 10100  0023F6                     _Do_Beep:
 10101                           	opt stack 25
 10102                           
 10103                           ;Utils.c: 34: Activate_Buzzer();
 10104                           
 10105                           ;incstack = 0
 10106  0023F6  ECB8  F011         	call	_Activate_Buzzer	;wreg free
 10107                           
 10108                           ;Utils.c: 35: Wait_Half_Second();
 10109  0023FA  EC15  F011         	call	_Wait_Half_Second	;wreg free
 10110                           
 10111                           ;Utils.c: 36: Deactivate_Buzzer();
 10112  0023FE  EC27  F012         	call	_Deactivate_Buzzer	;wreg free
 10113  002402  0012               	return		;funcret
 10114  002404                     __end_of_Do_Beep:
 10115                           	opt stack 0
 10116                           tblptru	equ	0xFF8
 10117                           tblptrh	equ	0xFF7
 10118                           tblptrl	equ	0xFF6
 10119                           tablat	equ	0xFF5
 10120                           prodh	equ	0xFF4
 10121                           prodl	equ	0xFF3
 10122                           intcon	equ	0xFF2
 10123                           intcon2	equ	0xFF1
 10124                           postinc0	equ	0xFEE
 10125                           wreg	equ	0xFE8
 10126                           postdec1	equ	0xFE5
 10127                           fsr1l	equ	0xFE1
 10128                           indf2	equ	0xFDF
 10129                           postinc2	equ	0xFDE
 10130                           postdec2	equ	0xFDD
 10131                           fsr2h	equ	0xFDA
 10132                           fsr2l	equ	0xFD9
 10133                           status	equ	0xFD8
 10134                           
 10135 ;; *************** function _Wait_Half_Second *****************
 10136 ;; Defined at:
 10137 ;;		line 7 in file "Utils.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;		None
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;  i               2   16[COMRAM] int 
 10142 ;; Return value:  Size  Location     Type
 10143 ;;		None               void
 10144 ;; Registers used:
 10145 ;;		wreg, status,2, status,0
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;Total ram usage:        2 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    3
 10158 ;; This function calls:
 10159 ;;		Nothing
 10160 ;; This function is called by:
 10161 ;;		_Do_Beep
 10162 ;;		_Wait_One_Sec
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           	psect	text54
 10167  00222A                     __ptext54:
 10168                           	opt stack 0
 10169  00222A                     _Wait_Half_Second:
 10170                           	opt stack 25
 10171                           
 10172                           ;Utils.c: 9: for(int i = 0; i < 8800; i++);
 10173                           
 10174                           ;incstack = 0
 10175  00222A  0E00               	movlw	0
 10176  00222C  6E12               	movwf	Wait_Half_Second@i+1,c
 10177  00222E  0E00               	movlw	0
 10178  002230  6E11               	movwf	Wait_Half_Second@i,c
 10179  002232                     l5728:
 10180  002232  BE12               	btfsc	Wait_Half_Second@i+1,7,c
 10181  002234  D008               	goto	l5732
 10182  002236  0E60               	movlw	96
 10183  002238  5C11               	subwf	Wait_Half_Second@i,w,c
 10184  00223A  0E22               	movlw	34
 10185  00223C  5812               	subwfb	Wait_Half_Second@i+1,w,c
 10186  00223E  B0D8               	btfsc	status,0,c
 10187  002240  D005               	goto	l544
 10188  002242  D001               	goto	l5732
 10189  002244  D003               	goto	l544
 10190  002246                     l5732:
 10191  002246  4A11               	infsnz	Wait_Half_Second@i,f,c
 10192  002248  2A12               	incf	Wait_Half_Second@i+1,f,c
 10193  00224A  D7F3               	goto	l5728
 10194  00224C                     l544:
 10195  00224C  0012               	return		;funcret
 10196  00224E                     __end_of_Wait_Half_Second:
 10197                           	opt stack 0
 10198                           tblptru	equ	0xFF8
 10199                           tblptrh	equ	0xFF7
 10200                           tblptrl	equ	0xFF6
 10201                           tablat	equ	0xFF5
 10202                           prodh	equ	0xFF4
 10203                           prodl	equ	0xFF3
 10204                           intcon	equ	0xFF2
 10205                           intcon2	equ	0xFF1
 10206                           postinc0	equ	0xFEE
 10207                           wreg	equ	0xFE8
 10208                           postdec1	equ	0xFE5
 10209                           fsr1l	equ	0xFE1
 10210                           indf2	equ	0xFDF
 10211                           postinc2	equ	0xFDE
 10212                           postdec2	equ	0xFDD
 10213                           fsr2h	equ	0xFDA
 10214                           fsr2l	equ	0xFD9
 10215                           status	equ	0xFD8
 10216                           
 10217 ;; *************** function _Deactivate_Buzzer *****************
 10218 ;; Defined at:
 10219 ;;		line 26 in file "Utils.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;		None
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;		None
 10224 ;; Return value:  Size  Location     Type
 10225 ;;		None               void
 10226 ;; Registers used:
 10227 ;;		wreg, status,2
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;Total ram usage:        0 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; Hardware stack levels required when called:    3
 10240 ;; This function calls:
 10241 ;;		Nothing
 10242 ;; This function is called by:
 10243 ;;		_Do_Beep
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           	psect	text55
 10248  00244E                     __ptext55:
 10249                           	opt stack 0
 10250  00244E                     _Deactivate_Buzzer:
 10251                           	opt stack 25
 10252                           
 10253                           ;Utils.c: 28: CCP2CON = 0x0;
 10254                           
 10255                           ;incstack = 0
 10256  00244E  0E00               	movlw	0
 10257  002450  6EBA               	movwf	4026,c	;volatile
 10258                           
 10259                           ;Utils.c: 29: PORTBbits.RB3 = 0;
 10260  002452  9681               	bcf	3969,3,c	;volatile
 10261  002454  0012               	return		;funcret
 10262  002456                     __end_of_Deactivate_Buzzer:
 10263                           	opt stack 0
 10264                           tblptru	equ	0xFF8
 10265                           tblptrh	equ	0xFF7
 10266                           tblptrl	equ	0xFF6
 10267                           tablat	equ	0xFF5
 10268                           prodh	equ	0xFF4
 10269                           prodl	equ	0xFF3
 10270                           intcon	equ	0xFF2
 10271                           intcon2	equ	0xFF1
 10272                           postinc0	equ	0xFEE
 10273                           wreg	equ	0xFE8
 10274                           postdec1	equ	0xFE5
 10275                           fsr1l	equ	0xFE1
 10276                           indf2	equ	0xFDF
 10277                           postinc2	equ	0xFDE
 10278                           postdec2	equ	0xFDD
 10279                           fsr2h	equ	0xFDA
 10280                           fsr2l	equ	0xFD9
 10281                           status	equ	0xFD8
 10282                           
 10283 ;; *************** function _Activate_Buzzer *****************
 10284 ;; Defined at:
 10285 ;;		line 18 in file "Utils.c"
 10286 ;; Parameters:    Size  Location     Type
 10287 ;;		None
 10288 ;; Auto vars:     Size  Location     Type
 10289 ;;		None
 10290 ;; Return value:  Size  Location     Type
 10291 ;;		None               void
 10292 ;; Registers used:
 10293 ;;		wreg, status,2
 10294 ;; Tracked objects:
 10295 ;;		On entry : 0/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10303 ;;Total ram usage:        0 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:    3
 10306 ;; This function calls:
 10307 ;;		Nothing
 10308 ;; This function is called by:
 10309 ;;		_Do_Beep
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           	psect	text56
 10314  002370                     __ptext56:
 10315                           	opt stack 0
 10316  002370                     _Activate_Buzzer:
 10317                           	opt stack 25
 10318                           
 10319                           ;Utils.c: 20: PR2 = 0b11111001;
 10320                           
 10321                           ;incstack = 0
 10322  002370  0EF9               	movlw	249
 10323  002372  6ECB               	movwf	4043,c	;volatile
 10324                           
 10325                           ;Utils.c: 21: T2CON = 0b00000101;
 10326  002374  0E05               	movlw	5
 10327  002376  6ECA               	movwf	4042,c	;volatile
 10328                           
 10329                           ;Utils.c: 22: CCPR2L = 0b01001010;
 10330  002378  0E4A               	movlw	74
 10331  00237A  6EBB               	movwf	4027,c	;volatile
 10332                           
 10333                           ;Utils.c: 23: CCP2CON = 0b00111100;
 10334  00237C  0E3C               	movlw	60
 10335  00237E  6EBA               	movwf	4026,c	;volatile
 10336  002380  0012               	return		;funcret
 10337  002382                     __end_of_Activate_Buzzer:
 10338                           	opt stack 0
 10339                           tblptru	equ	0xFF8
 10340                           tblptrh	equ	0xFF7
 10341                           tblptrl	equ	0xFF6
 10342                           tablat	equ	0xFF5
 10343                           prodh	equ	0xFF4
 10344                           prodl	equ	0xFF3
 10345                           intcon	equ	0xFF2
 10346                           intcon2	equ	0xFF1
 10347                           postinc0	equ	0xFEE
 10348                           wreg	equ	0xFE8
 10349                           postdec1	equ	0xFE5
 10350                           fsr1l	equ	0xFE1
 10351                           indf2	equ	0xFDF
 10352                           postinc2	equ	0xFDE
 10353                           postdec2	equ	0xFDD
 10354                           fsr2h	equ	0xFDA
 10355                           fsr2l	equ	0xFD9
 10356                           status	equ	0xFD8
 10357                           
 10358 ;; *************** function _DS3231_Setup_Time *****************
 10359 ;; Defined at:
 10360 ;;		line 69 in file "I2C_Support.c"
 10361 ;; Parameters:    Size  Location     Type
 10362 ;;		None
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  Address         1   19[COMRAM] unsigned char 
 10365 ;;  Device          1   18[COMRAM] unsigned char 
 10366 ;; Return value:  Size  Location     Type
 10367 ;;		None               void
 10368 ;; Registers used:
 10369 ;;		wreg, status,2, status,0, cstack
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10379 ;;Total ram usage:        2 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; Hardware stack levels required when called:    5
 10382 ;; This function calls:
 10383 ;;		_I2C_Start
 10384 ;;		_I2C_Stop
 10385 ;;		_I2C_Write
 10386 ;; This function is called by:
 10387 ;;		_main
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           	psect	text57
 10392  001CAC                     __ptext57:
 10393                           	opt stack 0
 10394  001CAC                     _DS3231_Setup_Time:
 10395                           	opt stack 25
 10396                           
 10397                           ;I2C_Support.c: 71: char Device = 0x68;
 10398                           
 10399                           ;incstack = 0
 10400  001CAC  0E68               	movlw	104
 10401  001CAE  6E13               	movwf	DS3231_Setup_Time@Device,c
 10402                           
 10403                           ;I2C_Support.c: 72: char Address = 0x00;
 10404  001CB0  0E00               	movlw	0
 10405  001CB2  6E14               	movwf	DS3231_Setup_Time@Address,c
 10406                           
 10407                           ;I2C_Support.c: 73: second = 0x00;
 10408  001CB4  0E00               	movlw	0
 10409  001CB6  6E5D               	movwf	_second,c
 10410                           
 10411                           ;I2C_Support.c: 74: minute = 0x00;
 10412  001CB8  0E00               	movlw	0
 10413  001CBA  6E6A               	movwf	_minute,c
 10414                           
 10415                           ;I2C_Support.c: 75: hour = 0x19;
 10416  001CBC  0E19               	movlw	25
 10417  001CBE  6E69               	movwf	_hour,c
 10418                           
 10419                           ;I2C_Support.c: 76: dow = 0x05;
 10420  001CC0  0E05               	movlw	5
 10421  001CC2  6E68               	movwf	_dow,c
 10422                           
 10423                           ;I2C_Support.c: 77: day = 0x04;
 10424  001CC4  0E04               	movlw	4
 10425  001CC6  6E67               	movwf	_day,c
 10426                           
 10427                           ;I2C_Support.c: 78: month = 0x11;
 10428  001CC8  0E11               	movlw	17
 10429  001CCA  6E6B               	movwf	_month,c
 10430                           
 10431                           ;I2C_Support.c: 79: year = 0x21;
 10432  001CCC  0E21               	movlw	33
 10433  001CCE  6E6F               	movwf	_year,c
 10434                           
 10435                           ;I2C_Support.c: 82: I2C_Start();
 10436  001CD0  ECCA  F011         	call	_I2C_Start	;wreg free
 10437                           
 10438                           ;I2C_Support.c: 83: I2C_Write((Device << 1) | 0);
 10439  001CD4  5013               	movf	DS3231_Setup_Time@Device,w,c
 10440  001CD6  2413               	addwf	DS3231_Setup_Time@Device,w,c
 10441  001CD8  EC2D  F010         	call	_I2C_Write
 10442                           
 10443                           ;I2C_Support.c: 84: I2C_Write(Address);
 10444  001CDC  5014               	movf	DS3231_Setup_Time@Address,w,c
 10445  001CDE  EC2D  F010         	call	_I2C_Write
 10446                           
 10447                           ;I2C_Support.c: 86: I2C_Write(second);
 10448  001CE2  505D               	movf	_second,w,c
 10449  001CE4  EC2D  F010         	call	_I2C_Write
 10450                           
 10451                           ;I2C_Support.c: 87: I2C_Write(minute);
 10452  001CE8  506A               	movf	_minute,w,c
 10453  001CEA  EC2D  F010         	call	_I2C_Write
 10454                           
 10455                           ;I2C_Support.c: 88: I2C_Write(hour);
 10456  001CEE  5069               	movf	_hour,w,c
 10457  001CF0  EC2D  F010         	call	_I2C_Write
 10458                           
 10459                           ;I2C_Support.c: 89: I2C_Write(dow);
 10460  001CF4  5068               	movf	_dow,w,c
 10461  001CF6  EC2D  F010         	call	_I2C_Write
 10462                           
 10463                           ;I2C_Support.c: 90: I2C_Write(day);
 10464  001CFA  5067               	movf	_day,w,c
 10465  001CFC  EC2D  F010         	call	_I2C_Write
 10466                           
 10467                           ;I2C_Support.c: 91: I2C_Write(month);
 10468  001D00  506B               	movf	_month,w,c
 10469  001D02  EC2D  F010         	call	_I2C_Write
 10470                           
 10471                           ;I2C_Support.c: 92: I2C_Write(year);
 10472  001D06  506F               	movf	_year,w,c
 10473  001D08  EC2D  F010         	call	_I2C_Write
 10474                           
 10475                           ;I2C_Support.c: 94: I2C_Stop();
 10476  001D0C  ECC1  F011         	call	_I2C_Stop	;wreg free
 10477  001D10  0012               	return		;funcret
 10478  001D12                     __end_of_DS3231_Setup_Time:
 10479                           	opt stack 0
 10480                           tblptru	equ	0xFF8
 10481                           tblptrh	equ	0xFF7
 10482                           tblptrl	equ	0xFF6
 10483                           tablat	equ	0xFF5
 10484                           prodh	equ	0xFF4
 10485                           prodl	equ	0xFF3
 10486                           intcon	equ	0xFF2
 10487                           intcon2	equ	0xFF1
 10488                           postinc0	equ	0xFEE
 10489                           wreg	equ	0xFE8
 10490                           postdec1	equ	0xFE5
 10491                           fsr1l	equ	0xFE1
 10492                           indf2	equ	0xFDF
 10493                           postinc2	equ	0xFDE
 10494                           postdec2	equ	0xFDD
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function _DS3231_Read_Time *****************
 10500 ;; Defined at:
 10501 ;;		line 45 in file "I2C_Support.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;  Device          1   20[COMRAM] unsigned char 
 10506 ;;  Address         1   19[COMRAM] unsigned char 
 10507 ;;  Data_Ret        1    0        unsigned char 
 10508 ;; Return value:  Size  Location     Type
 10509 ;;		None               void
 10510 ;; Registers used:
 10511 ;;		wreg, status,2, status,0, cstack
 10512 ;; Tracked objects:
 10513 ;;		On entry : 0/0
 10514 ;;		On exit  : 0/0
 10515 ;;		Unchanged: 0/0
 10516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10520 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10521 ;;Total ram usage:        2 bytes
 10522 ;; Hardware stack levels used:    1
 10523 ;; Hardware stack levels required when called:    6
 10524 ;; This function calls:
 10525 ;;		_I2C_ReStart
 10526 ;;		_I2C_Read
 10527 ;;		_I2C_Start
 10528 ;;		_I2C_Stop
 10529 ;;		_I2C_Write
 10530 ;; This function is called by:
 10531 ;;		_main
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           	psect	text58
 10536  001D12                     __ptext58:
 10537                           	opt stack 0
 10538  001D12                     _DS3231_Read_Time:
 10539                           	opt stack 24
 10540                           
 10541                           ;I2C_Support.c: 47: char Device = 0x68;
 10542                           
 10543                           ;incstack = 0
 10544  001D12  0E68               	movlw	104
 10545  001D14  6E15               	movwf	DS3231_Read_Time@Device,c
 10546                           
 10547                           ;I2C_Support.c: 48: char Address = 0x00;
 10548  001D16  0E00               	movlw	0
 10549  001D18  6E14               	movwf	DS3231_Read_Time@Address,c
 10550                           
 10551                           ;I2C_Support.c: 49: char Data_Ret;
 10552                           ;I2C_Support.c: 50: I2C_Start();
 10553  001D1A  ECCA  F011         	call	_I2C_Start	;wreg free
 10554                           
 10555                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 10556  001D1E  5015               	movf	DS3231_Read_Time@Device,w,c
 10557  001D20  2415               	addwf	DS3231_Read_Time@Device,w,c
 10558  001D22  EC2D  F010         	call	_I2C_Write
 10559                           
 10560                           ;I2C_Support.c: 52: I2C_Write(Address);
 10561  001D26  5014               	movf	DS3231_Read_Time@Address,w,c
 10562  001D28  EC2D  F010         	call	_I2C_Write
 10563                           
 10564                           ;I2C_Support.c: 53: I2C_ReStart();
 10565  001D2C  EC90  F011         	call	_I2C_ReStart	;wreg free
 10566                           
 10567                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 10568  001D30  80D8               	bsf	status,0,c
 10569  001D32  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10570  001D34  EC2D  F010         	call	_I2C_Write
 10571                           
 10572                           ;I2C_Support.c: 56: second = I2C_Read(1);
 10573  001D38  0E01               	movlw	1
 10574  001D3A  ECAC  F00F         	call	_I2C_Read
 10575  001D3E  6E5D               	movwf	_second,c
 10576                           
 10577                           ;I2C_Support.c: 57: minute = I2C_Read(1);
 10578  001D40  0E01               	movlw	1
 10579  001D42  ECAC  F00F         	call	_I2C_Read
 10580  001D46  6E6A               	movwf	_minute,c
 10581                           
 10582                           ;I2C_Support.c: 58: hour = I2C_Read(1);
 10583  001D48  0E01               	movlw	1
 10584  001D4A  ECAC  F00F         	call	_I2C_Read
 10585  001D4E  6E69               	movwf	_hour,c
 10586                           
 10587                           ;I2C_Support.c: 59: dow = I2C_Read(1);
 10588  001D50  0E01               	movlw	1
 10589  001D52  ECAC  F00F         	call	_I2C_Read
 10590  001D56  6E68               	movwf	_dow,c
 10591                           
 10592                           ;I2C_Support.c: 60: day = I2C_Read(1);
 10593  001D58  0E01               	movlw	1
 10594  001D5A  ECAC  F00F         	call	_I2C_Read
 10595  001D5E  6E67               	movwf	_day,c
 10596                           
 10597                           ;I2C_Support.c: 61: month = I2C_Read(1);
 10598  001D60  0E01               	movlw	1
 10599  001D62  ECAC  F00F         	call	_I2C_Read
 10600  001D66  6E6B               	movwf	_month,c
 10601                           
 10602                           ;I2C_Support.c: 63: year = I2C_Read(0);
 10603  001D68  0E00               	movlw	0
 10604  001D6A  ECAC  F00F         	call	_I2C_Read
 10605  001D6E  6E6F               	movwf	_year,c
 10606                           
 10607                           ;I2C_Support.c: 65: I2C_Stop();
 10608  001D70  ECC1  F011         	call	_I2C_Stop	;wreg free
 10609  001D74  0012               	return		;funcret
 10610  001D76                     __end_of_DS3231_Read_Time:
 10611                           	opt stack 0
 10612                           tblptru	equ	0xFF8
 10613                           tblptrh	equ	0xFF7
 10614                           tblptrl	equ	0xFF6
 10615                           tablat	equ	0xFF5
 10616                           prodh	equ	0xFF4
 10617                           prodl	equ	0xFF3
 10618                           intcon	equ	0xFF2
 10619                           intcon2	equ	0xFF1
 10620                           postinc0	equ	0xFEE
 10621                           wreg	equ	0xFE8
 10622                           postdec1	equ	0xFE5
 10623                           fsr1l	equ	0xFE1
 10624                           indf2	equ	0xFDF
 10625                           postinc2	equ	0xFDE
 10626                           postdec2	equ	0xFDD
 10627                           fsr2h	equ	0xFDA
 10628                           fsr2l	equ	0xFD9
 10629                           status	equ	0xFD8
 10630                           
 10631 ;; *************** function _DS1621_Read_Temp *****************
 10632 ;; Defined at:
 10633 ;;		line 29 in file "I2C_Support.c"
 10634 ;; Parameters:    Size  Location     Type
 10635 ;;		None
 10636 ;; Auto vars:     Size  Location     Type
 10637 ;;  Device          1   23[COMRAM] unsigned char 
 10638 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 10639 ;;  Cmd             1   21[COMRAM] unsigned char 
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  2   19[COMRAM] int 
 10642 ;; Registers used:
 10643 ;;		wreg, status,2, status,0, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/0
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10649 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10652 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10653 ;;Total ram usage:        5 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:    6
 10656 ;; This function calls:
 10657 ;;		_I2C_ReStart
 10658 ;;		_I2C_Read
 10659 ;;		_I2C_Start
 10660 ;;		_I2C_Stop
 10661 ;;		_I2C_Write
 10662 ;; This function is called by:
 10663 ;;		_main
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           	psect	text59
 10668  002098                     __ptext59:
 10669                           	opt stack 0
 10670  002098                     _DS1621_Read_Temp:
 10671                           	opt stack 24
 10672                           
 10673                           ;I2C_Support.c: 31: char Device = 0x48;
 10674                           
 10675                           ;incstack = 0
 10676  002098  0E48               	movlw	72
 10677  00209A  6E18               	movwf	DS1621_Read_Temp@Device,c
 10678                           
 10679                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 10680  00209C  0EAA               	movlw	170
 10681  00209E  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 10682                           
 10683                           ;I2C_Support.c: 34: char Data_Ret;
 10684                           ;I2C_Support.c: 35: I2C_Start();
 10685  0020A0  ECCA  F011         	call	_I2C_Start	;wreg free
 10686                           
 10687                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 10688  0020A4  5018               	movf	DS1621_Read_Temp@Device,w,c
 10689  0020A6  2418               	addwf	DS1621_Read_Temp@Device,w,c
 10690  0020A8  EC2D  F010         	call	_I2C_Write
 10691                           
 10692                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 10693  0020AC  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 10694  0020AE  EC2D  F010         	call	_I2C_Write
 10695                           
 10696                           ;I2C_Support.c: 38: I2C_ReStart();
 10697  0020B2  EC90  F011         	call	_I2C_ReStart	;wreg free
 10698                           
 10699                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 10700  0020B6  80D8               	bsf	status,0,c
 10701  0020B8  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 10702  0020BA  EC2D  F010         	call	_I2C_Write
 10703                           
 10704                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 10705  0020BE  0E00               	movlw	0
 10706  0020C0  ECAC  F00F         	call	_I2C_Read
 10707  0020C4  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 10708                           
 10709                           ;I2C_Support.c: 41: I2C_Stop();
 10710  0020C6  ECC1  F011         	call	_I2C_Stop	;wreg free
 10711                           
 10712                           ;I2C_Support.c: 42: return Data_Ret;
 10713  0020CA  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10714  0020CE  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10715  0020D0  D000               	goto	l187
 10716  0020D2                     l187:
 10717  0020D2  0012               	return		;funcret
 10718  0020D4                     __end_of_DS1621_Read_Temp:
 10719                           	opt stack 0
 10720                           tblptru	equ	0xFF8
 10721                           tblptrh	equ	0xFF7
 10722                           tblptrl	equ	0xFF6
 10723                           tablat	equ	0xFF5
 10724                           prodh	equ	0xFF4
 10725                           prodl	equ	0xFF3
 10726                           intcon	equ	0xFF2
 10727                           intcon2	equ	0xFF1
 10728                           postinc0	equ	0xFEE
 10729                           wreg	equ	0xFE8
 10730                           postdec1	equ	0xFE5
 10731                           fsr1l	equ	0xFE1
 10732                           indf2	equ	0xFDF
 10733                           postinc2	equ	0xFDE
 10734                           postdec2	equ	0xFDD
 10735                           fsr2h	equ	0xFDA
 10736                           fsr2l	equ	0xFD9
 10737                           status	equ	0xFD8
 10738                           
 10739 ;; *************** function _I2C_Write *****************
 10740 ;; Defined at:
 10741 ;;		line 41 in file "I2C_Soft.c"
 10742 ;; Parameters:    Size  Location     Type
 10743 ;;  outByte         1    wreg     unsigned char 
 10744 ;; Auto vars:     Size  Location     Type
 10745 ;;  outByte         1   16[COMRAM] unsigned char 
 10746 ;;  n               1   17[COMRAM] unsigned char 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;		None               void
 10749 ;; Registers used:
 10750 ;;		wreg, status,2, status,0, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10760 ;;Total ram usage:        2 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    4
 10763 ;; This function calls:
 10764 ;;		_i2cHighScl
 10765 ;;		_i2cHighSda
 10766 ;;		_i2cLowScl
 10767 ;;		_i2cLowSda
 10768 ;; This function is called by:
 10769 ;;		_I2C_Write_Cmd_Only
 10770 ;;		_I2C_Write_Cmd_Write_Data
 10771 ;;		_DS1621_Read_Temp
 10772 ;;		_DS3231_Read_Time
 10773 ;;		_DS3231_Setup_Time
 10774 ;;		_I2C_Write_Address_Read_One_Byte
 10775 ;;		_I2C_Write_Address_Write_One_Byte
 10776 ;;		_I2C_Write_Cmd_Read_One_Byte
 10777 ;; This function uses a non-reentrant model
 10778 ;;
 10779                           
 10780                           	psect	text60
 10781  00205A                     __ptext60:
 10782                           	opt stack 0
 10783  00205A                     _I2C_Write:
 10784                           	opt stack 23
 10785                           
 10786                           ;incstack = 0
 10787                           ;I2C_Write@outByte stored from wreg
 10788  00205A  6E11               	movwf	I2C_Write@outByte,c
 10789                           
 10790                           ;I2C_Soft.c: 43: unsigned char n;
 10791                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
 10792  00205C  0E00               	movlw	0
 10793  00205E  6E12               	movwf	I2C_Write@n,c
 10794  002060                     l5420:
 10795  002060  0E07               	movlw	7
 10796  002062  6412               	cpfsgt	I2C_Write@n,c
 10797  002064  D001               	goto	l107
 10798  002066  D011               	goto	l5438
 10799  002068                     l107:
 10800                           
 10801                           ;I2C_Soft.c: 45: {
 10802                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
 10803  002068  AE11               	btfss	I2C_Write@outByte,7,c
 10804  00206A  D003               	goto	l5426
 10805  00206C  EC2F  F012         	call	_i2cHighSda	;wreg free
 10806  002070  D003               	goto	l5428
 10807  002072                     l5426:
 10808                           
 10809                           ;I2C_Soft.c: 47: else i2cLowSda();
 10810  002072  EC1D  F012         	call	_i2cLowSda	;wreg free
 10811  002076  D000               	goto	l5428
 10812  002078                     l5428:
 10813                           
 10814                           ;I2C_Soft.c: 48: i2cHighScl();
 10815  002078  EC02  F012         	call	_i2cHighScl	;wreg free
 10816                           
 10817                           ;I2C_Soft.c: 49: i2cLowScl();
 10818  00207C  EC2B  F012         	call	_i2cLowScl	;wreg free
 10819                           
 10820                           ;I2C_Soft.c: 50: outByte = outByte << 1;
 10821  002080  5011               	movf	I2C_Write@outByte,w,c
 10822  002082  2411               	addwf	I2C_Write@outByte,w,c
 10823  002084  6E11               	movwf	I2C_Write@outByte,c
 10824  002086  2A12               	incf	I2C_Write@n,f,c
 10825  002088  D7EB               	goto	l5420
 10826  00208A                     l5438:
 10827                           
 10828                           ;I2C_Soft.c: 51: }
 10829                           ;I2C_Soft.c: 52: i2cHighSda();
 10830  00208A  EC2F  F012         	call	_i2cHighSda	;wreg free
 10831                           
 10832                           ;I2C_Soft.c: 53: i2cHighScl();
 10833  00208E  EC02  F012         	call	_i2cHighScl	;wreg free
 10834                           
 10835                           ;I2C_Soft.c: 54: i2cLowScl();
 10836  002092  EC2B  F012         	call	_i2cLowScl	;wreg free
 10837  002096  0012               	return		;funcret
 10838  002098                     __end_of_I2C_Write:
 10839                           	opt stack 0
 10840                           tblptru	equ	0xFF8
 10841                           tblptrh	equ	0xFF7
 10842                           tblptrl	equ	0xFF6
 10843                           tablat	equ	0xFF5
 10844                           prodh	equ	0xFF4
 10845                           prodl	equ	0xFF3
 10846                           intcon	equ	0xFF2
 10847                           intcon2	equ	0xFF1
 10848                           postinc0	equ	0xFEE
 10849                           wreg	equ	0xFE8
 10850                           postdec1	equ	0xFE5
 10851                           fsr1l	equ	0xFE1
 10852                           indf2	equ	0xFDF
 10853                           postinc2	equ	0xFDE
 10854                           postdec2	equ	0xFDD
 10855                           fsr2h	equ	0xFDA
 10856                           fsr2l	equ	0xFD9
 10857                           status	equ	0xFD8
 10858                           
 10859 ;; *************** function _I2C_Stop *****************
 10860 ;; Defined at:
 10861 ;;		line 88 in file "I2C_Soft.c"
 10862 ;; Parameters:    Size  Location     Type
 10863 ;;		None
 10864 ;; Auto vars:     Size  Location     Type
 10865 ;;		None
 10866 ;; Return value:  Size  Location     Type
 10867 ;;		None               void
 10868 ;; Registers used:
 10869 ;;		wreg, cstack
 10870 ;; Tracked objects:
 10871 ;;		On entry : 0/0
 10872 ;;		On exit  : 0/0
 10873 ;;		Unchanged: 0/0
 10874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10879 ;;Total ram usage:        0 bytes
 10880 ;; Hardware stack levels used:    1
 10881 ;; Hardware stack levels required when called:    4
 10882 ;; This function calls:
 10883 ;;		_i2cHighScl
 10884 ;;		_i2cHighSda
 10885 ;;		_i2cLowScl
 10886 ;;		_i2cLowSda
 10887 ;; This function is called by:
 10888 ;;		_I2C_Write_Cmd_Only
 10889 ;;		_I2C_Write_Cmd_Write_Data
 10890 ;;		_DS1621_Read_Temp
 10891 ;;		_DS3231_Read_Time
 10892 ;;		_DS3231_Setup_Time
 10893 ;;		_I2C_Write_Address_Read_One_Byte
 10894 ;;		_I2C_Write_Address_Write_One_Byte
 10895 ;;		_I2C_Write_Cmd_Read_One_Byte
 10896 ;; This function uses a non-reentrant model
 10897 ;;
 10898                           
 10899                           	psect	text61
 10900  002382                     __ptext61:
 10901                           	opt stack 0
 10902  002382                     _I2C_Stop:
 10903                           	opt stack 23
 10904                           
 10905                           ;I2C_Soft.c: 90: i2cLowScl();
 10906                           
 10907                           ;incstack = 0
 10908  002382  EC2B  F012         	call	_i2cLowScl	;wreg free
 10909                           
 10910                           ;I2C_Soft.c: 91: i2cLowSda();
 10911  002386  EC1D  F012         	call	_i2cLowSda	;wreg free
 10912                           
 10913                           ;I2C_Soft.c: 92: i2cHighScl();
 10914  00238A  EC02  F012         	call	_i2cHighScl	;wreg free
 10915                           
 10916                           ;I2C_Soft.c: 93: i2cHighSda();
 10917  00238E  EC2F  F012         	call	_i2cHighSda	;wreg free
 10918  002392  0012               	return		;funcret
 10919  002394                     __end_of_I2C_Stop:
 10920                           	opt stack 0
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           intcon2	equ	0xFF1
 10929                           postinc0	equ	0xFEE
 10930                           wreg	equ	0xFE8
 10931                           postdec1	equ	0xFE5
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           fsr2h	equ	0xFDA
 10937                           fsr2l	equ	0xFD9
 10938                           status	equ	0xFD8
 10939                           
 10940 ;; *************** function _I2C_Start *****************
 10941 ;; Defined at:
 10942 ;;		line 71 in file "I2C_Soft.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;		None
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;		None
 10947 ;; Return value:  Size  Location     Type
 10948 ;;		None               void
 10949 ;; Registers used:
 10950 ;;		wreg, cstack
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10960 ;;Total ram usage:        0 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; Hardware stack levels required when called:    4
 10963 ;; This function calls:
 10964 ;;		_i2cHighScl
 10965 ;;		_i2cHighSda
 10966 ;;		_i2cLowScl
 10967 ;;		_i2cLowSda
 10968 ;; This function is called by:
 10969 ;;		_I2C_Write_Cmd_Only
 10970 ;;		_I2C_Write_Cmd_Write_Data
 10971 ;;		_DS1621_Read_Temp
 10972 ;;		_DS3231_Read_Time
 10973 ;;		_DS3231_Setup_Time
 10974 ;;		_I2C_Write_Address_Read_One_Byte
 10975 ;;		_I2C_Write_Address_Write_One_Byte
 10976 ;;		_I2C_Write_Cmd_Read_One_Byte
 10977 ;; This function uses a non-reentrant model
 10978 ;;
 10979                           
 10980                           	psect	text62
 10981  002394                     __ptext62:
 10982                           	opt stack 0
 10983  002394                     _I2C_Start:
 10984                           	opt stack 23
 10985                           
 10986                           ;I2C_Soft.c: 73: i2cHighSda();
 10987                           
 10988                           ;incstack = 0
 10989  002394  EC2F  F012         	call	_i2cHighSda	;wreg free
 10990                           
 10991                           ;I2C_Soft.c: 74: i2cHighScl();
 10992  002398  EC02  F012         	call	_i2cHighScl	;wreg free
 10993                           
 10994                           ;I2C_Soft.c: 75: i2cLowSda();
 10995  00239C  EC1D  F012         	call	_i2cLowSda	;wreg free
 10996                           
 10997                           ;I2C_Soft.c: 76: i2cLowScl();
 10998  0023A0  EC2B  F012         	call	_i2cLowScl	;wreg free
 10999  0023A4  0012               	return		;funcret
 11000  0023A6                     __end_of_I2C_Start:
 11001                           	opt stack 0
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           intcon2	equ	0xFF1
 11010                           postinc0	equ	0xFEE
 11011                           wreg	equ	0xFE8
 11012                           postdec1	equ	0xFE5
 11013                           fsr1l	equ	0xFE1
 11014                           indf2	equ	0xFDF
 11015                           postinc2	equ	0xFDE
 11016                           postdec2	equ	0xFDD
 11017                           fsr2h	equ	0xFDA
 11018                           fsr2l	equ	0xFD9
 11019                           status	equ	0xFD8
 11020                           
 11021 ;; *************** function _I2C_Read *****************
 11022 ;; Defined at:
 11023 ;;		line 20 in file "I2C_Soft.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;  ack             1    wreg     unsigned char 
 11026 ;; Auto vars:     Size  Location     Type
 11027 ;;  ack             1   16[COMRAM] unsigned char 
 11028 ;;  inByte          1   18[COMRAM] unsigned char 
 11029 ;;  n               1   17[COMRAM] unsigned char 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      unsigned char 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0, cstack
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11040 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;Total ram usage:        3 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    5
 11046 ;; This function calls:
 11047 ;;		_i2cAck
 11048 ;;		_i2cHighScl
 11049 ;;		_i2cHighSda
 11050 ;;		_i2cLowScl
 11051 ;;		_i2cNack
 11052 ;; This function is called by:
 11053 ;;		_DS1621_Read_Temp
 11054 ;;		_DS3231_Read_Time
 11055 ;;		_I2C_Write_Address_Read_One_Byte
 11056 ;;		_I2C_Write_Cmd_Read_One_Byte
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text63
 11061  001F58                     __ptext63:
 11062                           	opt stack 0
 11063  001F58                     _I2C_Read:
 11064                           	opt stack 24
 11065                           
 11066                           ;incstack = 0
 11067                           ;I2C_Read@ack stored from wreg
 11068  001F58  6E11               	movwf	I2C_Read@ack,c
 11069                           
 11070                           ;I2C_Soft.c: 22: unsigned char inByte, n;
 11071                           ;I2C_Soft.c: 23: i2cHighSda();
 11072  001F5A  EC2F  F012         	call	_i2cHighSda	;wreg free
 11073                           
 11074                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
 11075  001F5E  0E00               	movlw	0
 11076  001F60  6E12               	movwf	I2C_Read@n,c
 11077  001F62                     l5966:
 11078  001F62  0E07               	movlw	7
 11079  001F64  6412               	cpfsgt	I2C_Read@n,c
 11080  001F66  D001               	goto	l5970
 11081  001F68  D00F               	goto	l5984
 11082  001F6A                     l5970:
 11083                           
 11084                           ;I2C_Soft.c: 25: {
 11085                           ;I2C_Soft.c: 26: i2cHighScl();
 11086  001F6A  EC02  F012         	call	_i2cHighScl	;wreg free
 11087                           
 11088                           ;I2C_Soft.c: 28: if (PORTDbits.RD1)
 11089  001F6E  A283               	btfss	3971,1,c	;volatile
 11090  001F70  D003               	goto	l5976
 11091                           
 11092                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
 11093  001F72  80D8               	bsf	status,0,c
 11094  001F74  3613               	rlcf	I2C_Read@inByte,f,c
 11095  001F76  D004               	goto	l5978
 11096  001F78                     l5976:
 11097                           
 11098                           ;I2C_Soft.c: 30: else
 11099                           ;I2C_Soft.c: 31: inByte = inByte << 1;
 11100  001F78  5013               	movf	I2C_Read@inByte,w,c
 11101  001F7A  2413               	addwf	I2C_Read@inByte,w,c
 11102  001F7C  6E13               	movwf	I2C_Read@inByte,c
 11103  001F7E  D000               	goto	l5978
 11104  001F80                     l5978:
 11105                           
 11106                           ;I2C_Soft.c: 32: i2cLowScl();
 11107  001F80  EC2B  F012         	call	_i2cLowScl	;wreg free
 11108  001F84  2A12               	incf	I2C_Read@n,f,c
 11109  001F86  D7ED               	goto	l5966
 11110  001F88                     l5984:
 11111                           
 11112                           ;I2C_Soft.c: 33: }
 11113                           ;I2C_Soft.c: 34: if (ack) i2cAck();
 11114  001F88  5011               	movf	I2C_Read@ack,w,c
 11115  001F8A  B4D8               	btfsc	status,2,c
 11116  001F8C  D003               	goto	l5988
 11117  001F8E  ECD3  F011         	call	_i2cAck	;wreg free
 11118  001F92  D003               	goto	l5990
 11119  001F94                     l5988:
 11120                           
 11121                           ;I2C_Soft.c: 35: else i2cNack();
 11122  001F94  EC18  F012         	call	_i2cNack	;wreg free
 11123  001F98  D000               	goto	l5990
 11124  001F9A                     l5990:
 11125                           
 11126                           ;I2C_Soft.c: 38: return(inByte);
 11127  001F9A  5013               	movf	I2C_Read@inByte,w,c
 11128  001F9C  D000               	goto	l104
 11129  001F9E                     l104:
 11130  001F9E  0012               	return		;funcret
 11131  001FA0                     __end_of_I2C_Read:
 11132                           	opt stack 0
 11133                           tblptru	equ	0xFF8
 11134                           tblptrh	equ	0xFF7
 11135                           tblptrl	equ	0xFF6
 11136                           tablat	equ	0xFF5
 11137                           prodh	equ	0xFF4
 11138                           prodl	equ	0xFF3
 11139                           intcon	equ	0xFF2
 11140                           intcon2	equ	0xFF1
 11141                           postinc0	equ	0xFEE
 11142                           wreg	equ	0xFE8
 11143                           postdec1	equ	0xFE5
 11144                           fsr1l	equ	0xFE1
 11145                           indf2	equ	0xFDF
 11146                           postinc2	equ	0xFDE
 11147                           postdec2	equ	0xFDD
 11148                           fsr2h	equ	0xFDA
 11149                           fsr2l	equ	0xFD9
 11150                           status	equ	0xFD8
 11151                           
 11152 ;; *************** function _i2cNack *****************
 11153 ;; Defined at:
 11154 ;;		line 57 in file "I2C_Soft.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;		None
 11157 ;; Auto vars:     Size  Location     Type
 11158 ;;		None
 11159 ;; Return value:  Size  Location     Type
 11160 ;;		None               void
 11161 ;; Registers used:
 11162 ;;		wreg, cstack
 11163 ;; Tracked objects:
 11164 ;;		On entry : 0/0
 11165 ;;		On exit  : 0/0
 11166 ;;		Unchanged: 0/0
 11167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;Total ram usage:        0 bytes
 11173 ;; Hardware stack levels used:    1
 11174 ;; Hardware stack levels required when called:    4
 11175 ;; This function calls:
 11176 ;;		_i2cHighScl
 11177 ;;		_i2cLowScl
 11178 ;; This function is called by:
 11179 ;;		_I2C_Read
 11180 ;; This function uses a non-reentrant model
 11181 ;;
 11182                           
 11183                           	psect	text64
 11184  002430                     __ptext64:
 11185                           	opt stack 0
 11186  002430                     _i2cNack:
 11187                           	opt stack 24
 11188                           
 11189                           ;I2C_Soft.c: 59: i2cHighScl();
 11190                           
 11191                           ;incstack = 0
 11192  002430  EC02  F012         	call	_i2cHighScl	;wreg free
 11193                           
 11194                           ;I2C_Soft.c: 60: i2cLowScl();
 11195  002434  EC2B  F012         	call	_i2cLowScl	;wreg free
 11196  002438  0012               	return		;funcret
 11197  00243A                     __end_of_i2cNack:
 11198                           	opt stack 0
 11199                           tblptru	equ	0xFF8
 11200                           tblptrh	equ	0xFF7
 11201                           tblptrl	equ	0xFF6
 11202                           tablat	equ	0xFF5
 11203                           prodh	equ	0xFF4
 11204                           prodl	equ	0xFF3
 11205                           intcon	equ	0xFF2
 11206                           intcon2	equ	0xFF1
 11207                           postinc0	equ	0xFEE
 11208                           wreg	equ	0xFE8
 11209                           postdec1	equ	0xFE5
 11210                           fsr1l	equ	0xFE1
 11211                           indf2	equ	0xFDF
 11212                           postinc2	equ	0xFDE
 11213                           postdec2	equ	0xFDD
 11214                           fsr2h	equ	0xFDA
 11215                           fsr2l	equ	0xFD9
 11216                           status	equ	0xFD8
 11217                           
 11218 ;; *************** function _i2cAck *****************
 11219 ;; Defined at:
 11220 ;;		line 63 in file "I2C_Soft.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;		None
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;		None
 11225 ;; Return value:  Size  Location     Type
 11226 ;;		None               void
 11227 ;; Registers used:
 11228 ;;		wreg, cstack
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;Total ram usage:        0 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; Hardware stack levels required when called:    4
 11241 ;; This function calls:
 11242 ;;		_i2cHighScl
 11243 ;;		_i2cHighSda
 11244 ;;		_i2cLowScl
 11245 ;;		_i2cLowSda
 11246 ;; This function is called by:
 11247 ;;		_I2C_Read
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           	psect	text65
 11252  0023A6                     __ptext65:
 11253                           	opt stack 0
 11254  0023A6                     _i2cAck:
 11255                           	opt stack 24
 11256                           
 11257                           ;I2C_Soft.c: 65: i2cLowSda();
 11258                           
 11259                           ;incstack = 0
 11260  0023A6  EC1D  F012         	call	_i2cLowSda	;wreg free
 11261                           
 11262                           ;I2C_Soft.c: 66: i2cHighScl();
 11263  0023AA  EC02  F012         	call	_i2cHighScl	;wreg free
 11264                           
 11265                           ;I2C_Soft.c: 67: i2cLowScl();
 11266  0023AE  EC2B  F012         	call	_i2cLowScl	;wreg free
 11267                           
 11268                           ;I2C_Soft.c: 68: i2cHighSda();
 11269  0023B2  EC2F  F012         	call	_i2cHighSda	;wreg free
 11270  0023B6  0012               	return		;funcret
 11271  0023B8                     __end_of_i2cAck:
 11272                           	opt stack 0
 11273                           tblptru	equ	0xFF8
 11274                           tblptrh	equ	0xFF7
 11275                           tblptrl	equ	0xFF6
 11276                           tablat	equ	0xFF5
 11277                           prodh	equ	0xFF4
 11278                           prodl	equ	0xFF3
 11279                           intcon	equ	0xFF2
 11280                           intcon2	equ	0xFF1
 11281                           postinc0	equ	0xFEE
 11282                           wreg	equ	0xFE8
 11283                           postdec1	equ	0xFE5
 11284                           fsr1l	equ	0xFE1
 11285                           indf2	equ	0xFDF
 11286                           postinc2	equ	0xFDE
 11287                           postdec2	equ	0xFDD
 11288                           fsr2h	equ	0xFDA
 11289                           fsr2l	equ	0xFD9
 11290                           status	equ	0xFD8
 11291                           
 11292 ;; *************** function _I2C_ReStart *****************
 11293 ;; Defined at:
 11294 ;;		line 79 in file "I2C_Soft.c"
 11295 ;; Parameters:    Size  Location     Type
 11296 ;;		None
 11297 ;; Auto vars:     Size  Location     Type
 11298 ;;		None
 11299 ;; Return value:  Size  Location     Type
 11300 ;;		None               void
 11301 ;; Registers used:
 11302 ;;		wreg, cstack
 11303 ;; Tracked objects:
 11304 ;;		On entry : 0/0
 11305 ;;		On exit  : 0/0
 11306 ;;		Unchanged: 0/0
 11307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;Total ram usage:        0 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; Hardware stack levels required when called:    4
 11315 ;; This function calls:
 11316 ;;		_i2cHighScl
 11317 ;;		_i2cHighSda
 11318 ;;		_i2cLowScl
 11319 ;;		_i2cLowSda
 11320 ;; This function is called by:
 11321 ;;		_DS1621_Read_Temp
 11322 ;;		_DS3231_Read_Time
 11323 ;;		_I2C_Write_Address_Read_One_Byte
 11324 ;;		_I2C_Write_Cmd_Read_One_Byte
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           	psect	text66
 11329  002320                     __ptext66:
 11330                           	opt stack 0
 11331  002320                     _I2C_ReStart:
 11332                           	opt stack 25
 11333                           
 11334                           ;I2C_Soft.c: 81: i2cLowScl();
 11335                           
 11336                           ;incstack = 0
 11337  002320  EC2B  F012         	call	_i2cLowScl	;wreg free
 11338                           
 11339                           ;I2C_Soft.c: 82: i2cHighSda();
 11340  002324  EC2F  F012         	call	_i2cHighSda	;wreg free
 11341                           
 11342                           ;I2C_Soft.c: 83: i2cHighScl();
 11343  002328  EC02  F012         	call	_i2cHighScl	;wreg free
 11344                           
 11345                           ;I2C_Soft.c: 84: i2cLowSda();
 11346  00232C  EC1D  F012         	call	_i2cLowSda	;wreg free
 11347                           
 11348                           ;I2C_Soft.c: 85: i2cLowScl();
 11349  002330  EC2B  F012         	call	_i2cLowScl	;wreg free
 11350  002334  0012               	return		;funcret
 11351  002336                     __end_of_I2C_ReStart:
 11352                           	opt stack 0
 11353                           tblptru	equ	0xFF8
 11354                           tblptrh	equ	0xFF7
 11355                           tblptrl	equ	0xFF6
 11356                           tablat	equ	0xFF5
 11357                           prodh	equ	0xFF4
 11358                           prodl	equ	0xFF3
 11359                           intcon	equ	0xFF2
 11360                           intcon2	equ	0xFF1
 11361                           postinc0	equ	0xFEE
 11362                           wreg	equ	0xFE8
 11363                           postdec1	equ	0xFE5
 11364                           fsr1l	equ	0xFE1
 11365                           indf2	equ	0xFDF
 11366                           postinc2	equ	0xFDE
 11367                           postdec2	equ	0xFDD
 11368                           fsr2h	equ	0xFDA
 11369                           fsr2l	equ	0xFD9
 11370                           status	equ	0xFD8
 11371                           
 11372 ;; *************** function _i2cLowSda *****************
 11373 ;; Defined at:
 11374 ;;		line 102 in file "I2C_Soft.c"
 11375 ;; Parameters:    Size  Location     Type
 11376 ;;		None
 11377 ;; Auto vars:     Size  Location     Type
 11378 ;;		None
 11379 ;; Return value:  Size  Location     Type
 11380 ;;		None               void
 11381 ;; Registers used:
 11382 ;;		None
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11392 ;;Total ram usage:        0 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    3
 11395 ;; This function calls:
 11396 ;;		Nothing
 11397 ;; This function is called by:
 11398 ;;		_I2C_Write
 11399 ;;		_i2cAck
 11400 ;;		_I2C_Start
 11401 ;;		_I2C_ReStart
 11402 ;;		_I2C_Stop
 11403 ;; This function uses a non-reentrant model
 11404 ;;
 11405                           
 11406                           	psect	text67
 11407  00243A                     __ptext67:
 11408                           	opt stack 0
 11409  00243A                     _i2cLowSda:
 11410                           	opt stack 23
 11411                           
 11412                           ;I2C_Soft.c: 104: PORTDbits.RD1 = 0;
 11413                           
 11414                           ;incstack = 0
 11415  00243A  9283               	bcf	3971,1,c	;volatile
 11416                           
 11417                           ;I2C_Soft.c: 105: TRISDbits.RD1 = 0;
 11418  00243C  9295               	bcf	3989,1,c	;volatile
 11419                           
 11420                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11421  00243E  D000               	nop2		;2 cycle nop
 11422  002440  D000               	nop2		;2 cycle nop
 11423  002442  0012               	return		;funcret
 11424  002444                     __end_of_i2cLowSda:
 11425                           	opt stack 0
 11426                           tblptru	equ	0xFF8
 11427                           tblptrh	equ	0xFF7
 11428                           tblptrl	equ	0xFF6
 11429                           tablat	equ	0xFF5
 11430                           prodh	equ	0xFF4
 11431                           prodl	equ	0xFF3
 11432                           intcon	equ	0xFF2
 11433                           intcon2	equ	0xFF1
 11434                           postinc0	equ	0xFEE
 11435                           wreg	equ	0xFE8
 11436                           postdec1	equ	0xFE5
 11437                           fsr1l	equ	0xFE1
 11438                           indf2	equ	0xFDF
 11439                           postinc2	equ	0xFDE
 11440                           postdec2	equ	0xFDD
 11441                           fsr2h	equ	0xFDA
 11442                           fsr2l	equ	0xFD9
 11443                           status	equ	0xFD8
 11444                           
 11445 ;; *************** function _i2cLowScl *****************
 11446 ;; Defined at:
 11447 ;;		line 115 in file "I2C_Soft.c"
 11448 ;; Parameters:    Size  Location     Type
 11449 ;;		None
 11450 ;; Auto vars:     Size  Location     Type
 11451 ;;		None
 11452 ;; Return value:  Size  Location     Type
 11453 ;;		None               void
 11454 ;; Registers used:
 11455 ;;		None
 11456 ;; Tracked objects:
 11457 ;;		On entry : 0/0
 11458 ;;		On exit  : 0/0
 11459 ;;		Unchanged: 0/0
 11460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11465 ;;Total ram usage:        0 bytes
 11466 ;; Hardware stack levels used:    1
 11467 ;; Hardware stack levels required when called:    3
 11468 ;; This function calls:
 11469 ;;		Nothing
 11470 ;; This function is called by:
 11471 ;;		_I2C_Read
 11472 ;;		_I2C_Write
 11473 ;;		_i2cNack
 11474 ;;		_i2cAck
 11475 ;;		_I2C_Start
 11476 ;;		_I2C_ReStart
 11477 ;;		_I2C_Stop
 11478 ;; This function uses a non-reentrant model
 11479 ;;
 11480                           
 11481                           	psect	text68
 11482  002456                     __ptext68:
 11483                           	opt stack 0
 11484  002456                     _i2cLowScl:
 11485                           	opt stack 23
 11486                           
 11487                           ;I2C_Soft.c: 117: PORTDbits.RD0 = 0;
 11488                           
 11489                           ;incstack = 0
 11490  002456  9083               	bcf	3971,0,c	;volatile
 11491                           
 11492                           ;I2C_Soft.c: 118: TRISDbits.RD0 = 0;
 11493  002458  9095               	bcf	3989,0,c	;volatile
 11494                           
 11495                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11496  00245A  D000               	nop2		;2 cycle nop
 11497  00245C  0012               	return		;funcret
 11498  00245E                     __end_of_i2cLowScl:
 11499                           	opt stack 0
 11500                           tblptru	equ	0xFF8
 11501                           tblptrh	equ	0xFF7
 11502                           tblptrl	equ	0xFF6
 11503                           tablat	equ	0xFF5
 11504                           prodh	equ	0xFF4
 11505                           prodl	equ	0xFF3
 11506                           intcon	equ	0xFF2
 11507                           intcon2	equ	0xFF1
 11508                           postinc0	equ	0xFEE
 11509                           wreg	equ	0xFE8
 11510                           postdec1	equ	0xFE5
 11511                           fsr1l	equ	0xFE1
 11512                           indf2	equ	0xFDF
 11513                           postinc2	equ	0xFDE
 11514                           postdec2	equ	0xFDD
 11515                           fsr2h	equ	0xFDA
 11516                           fsr2l	equ	0xFD9
 11517                           status	equ	0xFD8
 11518                           
 11519 ;; *************** function _i2cHighSda *****************
 11520 ;; Defined at:
 11521 ;;		line 96 in file "I2C_Soft.c"
 11522 ;; Parameters:    Size  Location     Type
 11523 ;;		None
 11524 ;; Auto vars:     Size  Location     Type
 11525 ;;		None
 11526 ;; Return value:  Size  Location     Type
 11527 ;;		None               void
 11528 ;; Registers used:
 11529 ;;		None
 11530 ;; Tracked objects:
 11531 ;;		On entry : 0/0
 11532 ;;		On exit  : 0/0
 11533 ;;		Unchanged: 0/0
 11534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11539 ;;Total ram usage:        0 bytes
 11540 ;; Hardware stack levels used:    1
 11541 ;; Hardware stack levels required when called:    3
 11542 ;; This function calls:
 11543 ;;		Nothing
 11544 ;; This function is called by:
 11545 ;;		_I2C_Init
 11546 ;;		_I2C_Read
 11547 ;;		_I2C_Write
 11548 ;;		_i2cAck
 11549 ;;		_I2C_Start
 11550 ;;		_I2C_ReStart
 11551 ;;		_I2C_Stop
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           	psect	text69
 11556  00245E                     __ptext69:
 11557                           	opt stack 0
 11558  00245E                     _i2cHighSda:
 11559                           	opt stack 25
 11560                           
 11561                           ;I2C_Soft.c: 98: TRISDbits.RD1 = 1;
 11562                           
 11563                           ;incstack = 0
 11564  00245E  8295               	bsf	3989,1,c	;volatile
 11565                           
 11566                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11567  002460  D000               	nop2		;2 cycle nop
 11568  002462  D000               	nop2		;2 cycle nop
 11569  002464  0012               	return		;funcret
 11570  002466                     __end_of_i2cHighSda:
 11571                           	opt stack 0
 11572                           tblptru	equ	0xFF8
 11573                           tblptrh	equ	0xFF7
 11574                           tblptrl	equ	0xFF6
 11575                           tablat	equ	0xFF5
 11576                           prodh	equ	0xFF4
 11577                           prodl	equ	0xFF3
 11578                           intcon	equ	0xFF2
 11579                           intcon2	equ	0xFF1
 11580                           postinc0	equ	0xFEE
 11581                           wreg	equ	0xFE8
 11582                           postdec1	equ	0xFE5
 11583                           fsr1l	equ	0xFE1
 11584                           indf2	equ	0xFDF
 11585                           postinc2	equ	0xFDE
 11586                           postdec2	equ	0xFDD
 11587                           fsr2h	equ	0xFDA
 11588                           fsr2l	equ	0xFD9
 11589                           status	equ	0xFD8
 11590                           
 11591 ;; *************** function _i2cHighScl *****************
 11592 ;; Defined at:
 11593 ;;		line 109 in file "I2C_Soft.c"
 11594 ;; Parameters:    Size  Location     Type
 11595 ;;		None
 11596 ;; Auto vars:     Size  Location     Type
 11597 ;;		None
 11598 ;; Return value:  Size  Location     Type
 11599 ;;		None               void
 11600 ;; Registers used:
 11601 ;;		wreg
 11602 ;; Tracked objects:
 11603 ;;		On entry : 0/0
 11604 ;;		On exit  : 0/0
 11605 ;;		Unchanged: 0/0
 11606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;Total ram usage:        0 bytes
 11612 ;; Hardware stack levels used:    1
 11613 ;; Hardware stack levels required when called:    3
 11614 ;; This function calls:
 11615 ;;		Nothing
 11616 ;; This function is called by:
 11617 ;;		_I2C_Init
 11618 ;;		_I2C_Read
 11619 ;;		_I2C_Write
 11620 ;;		_i2cNack
 11621 ;;		_i2cAck
 11622 ;;		_I2C_Start
 11623 ;;		_I2C_ReStart
 11624 ;;		_I2C_Stop
 11625 ;; This function uses a non-reentrant model
 11626 ;;
 11627                           
 11628                           	psect	text70
 11629  002404                     __ptext70:
 11630                           	opt stack 0
 11631  002404                     _i2cHighScl:
 11632                           	opt stack 25
 11633                           
 11634                           ;I2C_Soft.c: 111: TRISDbits.RD0 = 1;
 11635                           
 11636                           ;incstack = 0
 11637  002404  8095               	bsf	3989,0,c	;volatile
 11638                           
 11639                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11640  002406  0E06               	movlw	6
 11641  002408                     u5617:
 11642  002408  2EE8               	decfsz	wreg,f,c
 11643  00240A  D7FE               	goto	u5617
 11644  00240C  D000               	nop2		;nop
 11645  00240E  0012               	return		;funcret
 11646  002410                     __end_of_i2cHighScl:
 11647                           	opt stack 0
 11648                           tblptru	equ	0xFF8
 11649                           tblptrh	equ	0xFF7
 11650                           tblptrl	equ	0xFF6
 11651                           tablat	equ	0xFF5
 11652                           prodh	equ	0xFF4
 11653                           prodl	equ	0xFF3
 11654                           intcon	equ	0xFF2
 11655                           intcon2	equ	0xFF1
 11656                           postinc0	equ	0xFEE
 11657                           wreg	equ	0xFE8
 11658                           postdec1	equ	0xFE5
 11659                           fsr1l	equ	0xFE1
 11660                           indf2	equ	0xFDF
 11661                           postinc2	equ	0xFDE
 11662                           postdec2	equ	0xFDD
 11663                           fsr2h	equ	0xFDA
 11664                           fsr2l	equ	0xFD9
 11665                           status	equ	0xFD8
 11666                           
 11667 ;; *************** function _chkisr *****************
 11668 ;; Defined at:
 11669 ;;		line 29 in file "Interrupt.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;		None
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;		None
 11674 ;; Return value:  Size  Location     Type
 11675 ;;		None               void
 11676 ;; Registers used:
 11677 ;;		wreg, status,2, status,0, cstack
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11685 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11686 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;Total ram usage:       14 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; Hardware stack levels required when called:    2
 11690 ;; This function calls:
 11691 ;;		_INT0_isr
 11692 ;;		_TIMER1_isr
 11693 ;; This function is called by:
 11694 ;;		Interrupt level 2
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	intcode
 11699  000008                     __pintcode:
 11700                           	opt stack 0
 11701  000008                     _chkisr:
 11702                           	opt stack 20
 11703                           
 11704                           ;incstack = 0
 11705  000008  CFFA F003          	movff	pclath,??_chkisr
 11706  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11707  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11708  000014  ED3B  F00D         	call	int_func,f	;refresh shadow registers
 11709                           pclatu	equ	0xFFB
 11710                           pclath	equ	0xFFA
 11711                           tblptru	equ	0xFF8
 11712                           tblptrh	equ	0xFF7
 11713                           tblptrl	equ	0xFF6
 11714                           tablat	equ	0xFF5
 11715                           prodh	equ	0xFF4
 11716                           prodl	equ	0xFF3
 11717                           intcon	equ	0xFF2
 11718                           intcon2	equ	0xFF1
 11719                           postinc0	equ	0xFEE
 11720                           fsr0l	equ	0xFE9
 11721                           wreg	equ	0xFE8
 11722                           postdec1	equ	0xFE5
 11723                           fsr1l	equ	0xFE1
 11724                           indf2	equ	0xFDF
 11725                           postinc2	equ	0xFDE
 11726                           postdec2	equ	0xFDD
 11727                           fsr2h	equ	0xFDA
 11728                           fsr2l	equ	0xFD9
 11729                           status	equ	0xFD8
 11730                           
 11731                           	psect	intcode_body
 11732  001A76                     __pintcode_body:
 11733                           	opt stack 20
 11734  001A76                     int_func:
 11735                           	opt stack 20
 11736  001A76  0006               	pop		; remove dummy address from shadow register refresh
 11737  001A78  CFEA F006          	movff	fsr0h,??_chkisr+3
 11738  001A7C  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11739  001A80  CFE2 F008          	movff	fsr1h,??_chkisr+5
 11740  001A84  CFD9 F009          	movff	fsr2l,??_chkisr+6
 11741  001A88  CFDA F00A          	movff	fsr2h,??_chkisr+7
 11742  001A8C  CFF3 F00B          	movff	prodl,??_chkisr+8
 11743  001A90  CFF4 F00C          	movff	prodh,??_chkisr+9
 11744  001A94  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 11745  001A98  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 11746  001A9C  CFF8 F00F          	movff	tblptru,??_chkisr+12
 11747  001AA0  CFF5 F010          	movff	tablat,??_chkisr+13
 11748                           
 11749                           ;Interrupt.c: 31: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 11750  001AA4  A09E               	btfss	3998,0,c	;volatile
 11751  001AA6  D003               	goto	i2l4966
 11752  001AA8  EC08  F012         	call	_TIMER1_isr	;wreg free
 11753  001AAC  D000               	goto	i2l4966
 11754  001AAE                     i2l4966:
 11755                           
 11756                           ;Interrupt.c: 32: if (INTCONbits.INT0IF == 1) INT0_isr();
 11757  001AAE  A2F2               	btfss	intcon,1,c	;volatile
 11758  001AB0  D003               	goto	i2l233
 11759  001AB2  ECAB  F006         	call	_INT0_isr	;wreg free
 11760  001AB6  D000               	goto	i2l233
 11761  001AB8                     i2l233:
 11762  001AB8  C010  FFF5         	movff	??_chkisr+13,tablat
 11763  001ABC  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11764  001AC0  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11765  001AC4  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11766  001AC8  C00C  FFF4         	movff	??_chkisr+9,prodh
 11767  001ACC  C00B  FFF3         	movff	??_chkisr+8,prodl
 11768  001AD0  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11769  001AD4  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11770  001AD8  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11771  001ADC  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11772  001AE0  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11773  001AE4  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11774  001AE8  C004  FFFB         	movff	??_chkisr+1,pclatu
 11775  001AEC  C003  FFFA         	movff	??_chkisr,pclath
 11776  001AF0  0011               	retfie		f
 11777  001AF2                     __end_of_chkisr:
 11778                           	opt stack 0
 11779                           pclatu	equ	0xFFB
 11780                           pclath	equ	0xFFA
 11781                           tblptru	equ	0xFF8
 11782                           tblptrh	equ	0xFF7
 11783                           tblptrl	equ	0xFF6
 11784                           tablat	equ	0xFF5
 11785                           prodh	equ	0xFF4
 11786                           prodl	equ	0xFF3
 11787                           intcon	equ	0xFF2
 11788                           intcon2	equ	0xFF1
 11789                           postinc0	equ	0xFEE
 11790                           fsr0h	equ	0xFEA
 11791                           fsr0l	equ	0xFE9
 11792                           wreg	equ	0xFE8
 11793                           postdec1	equ	0xFE5
 11794                           fsr1h	equ	0xFE2
 11795                           fsr1l	equ	0xFE1
 11796                           indf2	equ	0xFDF
 11797                           postinc2	equ	0xFDE
 11798                           postdec2	equ	0xFDD
 11799                           fsr2h	equ	0xFDA
 11800                           fsr2l	equ	0xFD9
 11801                           status	equ	0xFD8
 11802                           
 11803 ;; *************** function _TIMER1_isr *****************
 11804 ;; Defined at:
 11805 ;;		line 35 in file "Interrupt.c"
 11806 ;; Parameters:    Size  Location     Type
 11807 ;;		None
 11808 ;; Auto vars:     Size  Location     Type
 11809 ;;		None
 11810 ;; Return value:  Size  Location     Type
 11811 ;;		None               void
 11812 ;; Registers used:
 11813 ;;		wreg, status,2
 11814 ;; Tracked objects:
 11815 ;;		On entry : 0/0
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;Total ram usage:        0 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; This function calls:
 11826 ;;		Nothing
 11827 ;; This function is called by:
 11828 ;;		_chkisr
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           	psect	text72
 11833  002410                     __ptext72:
 11834                           	opt stack 0
 11835  002410                     _TIMER1_isr:
 11836                           	opt stack 21
 11837                           
 11838                           ;Interrupt.c: 37: Nec_state = 0;
 11839                           
 11840                           ;incstack = 0
 11841  002410  0E00               	movlw	0
 11842  002412  6E52               	movwf	_Nec_state,c
 11843                           
 11844                           ;Interrupt.c: 38: INTCON2bits.INTEDG0 = 0;
 11845  002414  9CF1               	bcf	intcon2,6,c	;volatile
 11846                           
 11847                           ;Interrupt.c: 39: T1CONbits.TMR1ON = 0;
 11848  002416  90CD               	bcf	4045,0,c	;volatile
 11849                           
 11850                           ;Interrupt.c: 40: PIR1bits.TMR1IF = 0;
 11851  002418  909E               	bcf	3998,0,c	;volatile
 11852  00241A  0012               	return		;funcret
 11853  00241C                     __end_of_TIMER1_isr:
 11854                           	opt stack 0
 11855                           pclatu	equ	0xFFB
 11856                           pclath	equ	0xFFA
 11857                           tblptru	equ	0xFF8
 11858                           tblptrh	equ	0xFF7
 11859                           tblptrl	equ	0xFF6
 11860                           tablat	equ	0xFF5
 11861                           prodh	equ	0xFF4
 11862                           prodl	equ	0xFF3
 11863                           intcon	equ	0xFF2
 11864                           intcon2	equ	0xFF1
 11865                           postinc0	equ	0xFEE
 11866                           fsr0h	equ	0xFEA
 11867                           fsr0l	equ	0xFE9
 11868                           wreg	equ	0xFE8
 11869                           postdec1	equ	0xFE5
 11870                           fsr1h	equ	0xFE2
 11871                           fsr1l	equ	0xFE1
 11872                           indf2	equ	0xFDF
 11873                           postinc2	equ	0xFDE
 11874                           postdec2	equ	0xFDD
 11875                           fsr2h	equ	0xFDA
 11876                           fsr2l	equ	0xFD9
 11877                           status	equ	0xFD8
 11878                           
 11879 ;; *************** function _INT0_isr *****************
 11880 ;; Defined at:
 11881 ;;		line 49 in file "Interrupt.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;		None
 11884 ;; Auto vars:     Size  Location     Type
 11885 ;;		None
 11886 ;; Return value:  Size  Location     Type
 11887 ;;		None               void
 11888 ;; Registers used:
 11889 ;;		wreg, status,2, status,0, cstack
 11890 ;; Tracked objects:
 11891 ;;		On entry : 0/0
 11892 ;;		On exit  : 0/0
 11893 ;;		Unchanged: 0/0
 11894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;Total ram usage:        2 bytes
 11900 ;; Hardware stack levels used:    1
 11901 ;; Hardware stack levels required when called:    1
 11902 ;; This function calls:
 11903 ;;		_force_nec_state0
 11904 ;; This function is called by:
 11905 ;;		_chkisr
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           	psect	text73
 11910  000D56                     __ptext73:
 11911                           	opt stack 0
 11912  000D56                     _INT0_isr:
 11913                           	opt stack 20
 11914                           
 11915                           ;Interrupt.c: 51: INTCONbits.INT0IF = 0;
 11916                           
 11917                           ;incstack = 0
 11918  000D56  92F2               	bcf	intcon,1,c	;volatile
 11919                           
 11920                           ;Interrupt.c: 52: if (Nec_state != 0)
 11921  000D58  5052               	movf	_Nec_state,w,c
 11922  000D5A  B4D8               	btfsc	status,2,c
 11923  000D5C  D0A0               	goto	i2l4576
 11924                           
 11925                           ;Interrupt.c: 53: {
 11926                           ;Interrupt.c: 54: Time_Elapsed = (TMR1H << 8) | TMR1L;
 11927  000D5E  50CE               	movf	4046,w,c	;volatile
 11928  000D60  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 11929  000D64  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 11930  000D66  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 11931  000D6A  6A01               	clrf	??_INT0_isr,c
 11932  000D6C  1001               	iorwf	??_INT0_isr,w,c
 11933  000D6E  6E46               	movwf	_Time_Elapsed,c
 11934  000D70  5002               	movf	??_INT0_isr+1,w,c
 11935  000D72  6E47               	movwf	_Time_Elapsed+1,c
 11936                           
 11937                           ;Interrupt.c: 55: TMR1H = 0;
 11938  000D74  0E00               	movlw	0
 11939  000D76  6ECF               	movwf	4047,c	;volatile
 11940                           
 11941                           ;Interrupt.c: 56: TMR1L = 0;
 11942  000D78  0E00               	movlw	0
 11943  000D7A  6ECE               	movwf	4046,c	;volatile
 11944                           
 11945                           ;Interrupt.c: 57: }
 11946                           ;Interrupt.c: 59: switch(Nec_state)
 11947  000D7C  D090               	goto	i2l4576
 11948  000D7E                     i2l4504:
 11949                           
 11950                           ;Interrupt.c: 62: {
 11951                           ;Interrupt.c: 64: TMR1H = 0;
 11952  000D7E  0E00               	movlw	0
 11953  000D80  6ECF               	movwf	4047,c	;volatile
 11954                           
 11955                           ;Interrupt.c: 65: TMR1L = 0;
 11956  000D82  0E00               	movlw	0
 11957  000D84  6ECE               	movwf	4046,c	;volatile
 11958                           
 11959                           ;Interrupt.c: 66: PIR1bits.TMR1IF = 0;
 11960  000D86  909E               	bcf	3998,0,c	;volatile
 11961                           
 11962                           ;Interrupt.c: 67: T1CON= 0x90;
 11963  000D88  0E90               	movlw	144
 11964  000D8A  6ECD               	movwf	4045,c	;volatile
 11965                           
 11966                           ;Interrupt.c: 68: T1CONbits.TMR1ON = 1;
 11967  000D8C  80CD               	bsf	4045,0,c	;volatile
 11968                           
 11969                           ;Interrupt.c: 69: bit_count = 0;
 11970  000D8E  0E00               	movlw	0
 11971  000D90  6E58               	movwf	_bit_count,c
 11972                           
 11973                           ;Interrupt.c: 70: Nec_code = 0;
 11974  000D92  0E00               	movlw	0
 11975  000D94  0100               	movlb	0	; () banked
 11976  000D96  6FF3               	movwf	_Nec_code& (0+255),b
 11977  000D98  0E00               	movlw	0
 11978  000D9A  6FF4               	movwf	(_Nec_code+1)& (0+255),b
 11979  000D9C  0E00               	movlw	0
 11980  000D9E  6FF5               	movwf	(_Nec_code+2)& (0+255),b
 11981  000DA0  0E00               	movlw	0
 11982  000DA2  6FF6               	movwf	(_Nec_code+3)& (0+255),b
 11983                           
 11984                           ;Interrupt.c: 71: Nec_state = 1;
 11985  000DA4  0E01               	movlw	1
 11986  000DA6  6E52               	movwf	_Nec_state,c
 11987  000DA8  D078               	goto	i2l4570
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;Interrupt.c: 73: return;
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;Interrupt.c: 72: INTCON2bits.INTEDG0 = 1;
 11994  000DAA  D08A               	goto	i2l245
 11995  000DAC                     i2l4514:
 11996                           
 11997                           ;Interrupt.c: 77: {
 11998                           ;Interrupt.c: 79: if( (Time_Elapsed > 8500 ) && (Time_Elapsed < 9500))
 11999  000DAC  0E35               	movlw	53
 12000  000DAE  5C46               	subwf	_Time_Elapsed,w,c
 12001  000DB0  0E21               	movlw	33
 12002  000DB2  5847               	subwfb	_Time_Elapsed+1,w,c
 12003  000DB4  A0D8               	btfss	status,0,c
 12004  000DB6  D009               	goto	i2l4520
 12005  000DB8  0E1C               	movlw	28
 12006  000DBA  5C46               	subwf	_Time_Elapsed,w,c
 12007  000DBC  0E25               	movlw	37
 12008  000DBE  5847               	subwfb	_Time_Elapsed+1,w,c
 12009  000DC0  B0D8               	btfsc	status,0,c
 12010  000DC2  D003               	goto	i2l4520
 12011                           
 12012                           ;Interrupt.c: 80: {
 12013                           ;Interrupt.c: 81: Nec_state = 2;
 12014  000DC4  0E02               	movlw	2
 12015  000DC6  6E52               	movwf	_Nec_state,c
 12016                           
 12017                           ;Interrupt.c: 82: }
 12018  000DC8  D02A               	goto	i2l4546
 12019  000DCA                     i2l4520:
 12020                           
 12021                           ;Interrupt.c: 83: else
 12022                           ;Interrupt.c: 84: {
 12023                           ;Interrupt.c: 85: force_nec_state0();
 12024  000DCA  EC33  F012         	call	_force_nec_state0	;wreg free
 12025  000DCE  D027               	goto	i2l4546
 12026  000DD0  D026               	goto	i2l4546
 12027                           
 12028                           ;Interrupt.c: 89: return;
 12029                           
 12030                           ;Interrupt.c: 86: }
 12031                           ;Interrupt.c: 88: INTCON2bits.INTEDG0 = 0;
 12032  000DD2  D076               	goto	i2l245
 12033  000DD4                     i2l4526:
 12034                           
 12035                           ;Interrupt.c: 93: {
 12036                           ;Interrupt.c: 95: if( (Time_Elapsed > 4000 ) && (Time_Elapsed < 5000))
 12037  000DD4  0EA1               	movlw	161
 12038  000DD6  5C46               	subwf	_Time_Elapsed,w,c
 12039  000DD8  0E0F               	movlw	15
 12040  000DDA  5847               	subwfb	_Time_Elapsed+1,w,c
 12041  000DDC  A0D8               	btfss	status,0,c
 12042  000DDE  D009               	goto	i2l4532
 12043  000DE0  0E88               	movlw	136
 12044  000DE2  5C46               	subwf	_Time_Elapsed,w,c
 12045  000DE4  0E13               	movlw	19
 12046  000DE6  5847               	subwfb	_Time_Elapsed+1,w,c
 12047  000DE8  B0D8               	btfsc	status,0,c
 12048  000DEA  D003               	goto	i2l4532
 12049  000DEC                     
 12050                           ;Interrupt.c: 96: {
 12051                           ;Interrupt.c: 97: Nec_state = 3;
 12052  000DEC  0E03               	movlw	3
 12053  000DEE  6E52               	movwf	_Nec_state,c
 12054                           
 12055                           ;Interrupt.c: 98: }
 12056  000DF0  D054               	goto	i2l4570
 12057  000DF2                     i2l4532:
 12058                           
 12059                           ;Interrupt.c: 100: else
 12060                           ;Interrupt.c: 101: {
 12061                           ;Interrupt.c: 102: force_nec_state0();
 12062  000DF2  EC33  F012         	call	_force_nec_state0	;wreg free
 12063  000DF6  D051               	goto	i2l4570
 12064  000DF8  D050               	goto	i2l4570
 12065                           
 12066                           ;Interrupt.c: 105: return;
 12067                           
 12068                           ;Interrupt.c: 103: }
 12069                           ;Interrupt.c: 104: INTCON2bits.INTEDG0 = 1;
 12070  000DFA  D062               	goto	i2l245
 12071  000DFC                     i2l4538:
 12072                           
 12073                           ;Interrupt.c: 109: {
 12074                           ;Interrupt.c: 111: if( (Time_Elapsed > 400 ) && (Time_Elapsed < 700))
 12075  000DFC  0E91               	movlw	145
 12076  000DFE  5C46               	subwf	_Time_Elapsed,w,c
 12077  000E00  0E01               	movlw	1
 12078  000E02  5847               	subwfb	_Time_Elapsed+1,w,c
 12079  000E04  A0D8               	btfss	status,0,c
 12080  000E06  D008               	goto	i2l4544
 12081  000E08  0EBC               	movlw	188
 12082  000E0A  5C46               	subwf	_Time_Elapsed,w,c
 12083  000E0C  0E02               	movlw	2
 12084  000E0E  5847               	subwfb	_Time_Elapsed+1,w,c
 12085  000E10  B0D8               	btfsc	status,0,c
 12086  000E12  D002               	goto	i2l4544
 12087                           
 12088                           ;Interrupt.c: 112: {
 12089                           ;Interrupt.c: 113: Nec_state = 4;
 12090  000E14  0E04               	movlw	4
 12091  000E16  D7D7               	goto	L5
 12092  000E18                     i2l4544:
 12093                           
 12094                           ;Interrupt.c: 116: else
 12095                           ;Interrupt.c: 117: {
 12096                           ;Interrupt.c: 118: force_nec_state0();
 12097  000E18  EC33  F012         	call	_force_nec_state0	;wreg free
 12098  000E1C  D000               	goto	i2l4546
 12099  000E1E                     i2l4546:
 12100                           
 12101                           ;Interrupt.c: 119: }
 12102                           ;Interrupt.c: 120: INTCON2bits.INTEDG0 = 0;
 12103  000E1E  9CF1               	bcf	intcon2,6,c	;volatile
 12104                           
 12105                           ;Interrupt.c: 121: return;
 12106  000E20  D04F               	goto	i2l245
 12107  000E22                     i2l4550:
 12108                           
 12109                           ;Interrupt.c: 125: {
 12110                           ;Interrupt.c: 127: if( (Time_Elapsed > 400) && (Time_Elapsed < 1800))
 12111  000E22  0E91               	movlw	145
 12112  000E24  5C46               	subwf	_Time_Elapsed,w,c
 12113  000E26  0E01               	movlw	1
 12114  000E28  5847               	subwfb	_Time_Elapsed+1,w,c
 12115  000E2A  A0D8               	btfss	status,0,c
 12116  000E2C  D033               	goto	i2l4568
 12117  000E2E  0E08               	movlw	8
 12118  000E30  5C46               	subwf	_Time_Elapsed,w,c
 12119  000E32  0E07               	movlw	7
 12120  000E34  5847               	subwfb	_Time_Elapsed+1,w,c
 12121  000E36  B0D8               	btfsc	status,0,c
 12122  000E38  D02D               	goto	i2l4568
 12123                           
 12124                           ;Interrupt.c: 128: {
 12125                           ;Interrupt.c: 129: Nec_code = Nec_code << 1;
 12126  000E3A  90D8               	bcf	status,0,c
 12127  000E3C  0100               	movlb	0	; () banked
 12128  000E3E  35F3               	rlcf	_Nec_code& (0+255),w,b
 12129  000E40  0100               	movlb	0	; () banked
 12130  000E42  6FF3               	movwf	_Nec_code& (0+255),b
 12131  000E44  0100               	movlb	0	; () banked
 12132  000E46  35F4               	rlcf	(_Nec_code+1)& (0+255),w,b
 12133  000E48  0100               	movlb	0	; () banked
 12134  000E4A  6FF4               	movwf	(_Nec_code+1)& (0+255),b
 12135  000E4C  0100               	movlb	0	; () banked
 12136  000E4E  35F5               	rlcf	(_Nec_code+2)& (0+255),w,b
 12137  000E50  0100               	movlb	0	; () banked
 12138  000E52  6FF5               	movwf	(_Nec_code+2)& (0+255),b
 12139  000E54  0100               	movlb	0	; () banked
 12140  000E56  35F6               	rlcf	(_Nec_code+3)& (0+255),w,b
 12141  000E58  0100               	movlb	0	; () banked
 12142  000E5A  6FF6               	movwf	(_Nec_code+3)& (0+255),b
 12143                           
 12144                           ;Interrupt.c: 131: if( Time_Elapsed > 1000 )
 12145  000E5C  0EE9               	movlw	233
 12146  000E5E  5C46               	subwf	_Time_Elapsed,w,c
 12147  000E60  0E03               	movlw	3
 12148  000E62  5847               	subwfb	_Time_Elapsed+1,w,c
 12149  000E64  A0D8               	btfss	status,0,c
 12150  000E66  D008               	goto	i2l4558
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;Interrupt.c: 132: {
 12154                           ;Interrupt.c: 133: Nec_code += 1;
 12155  000E68  0E01               	movlw	1
 12156  000E6A  0100               	movlb	0	; () banked
 12157  000E6C  27F3               	addwf	_Nec_code& (0+255),f,b
 12158  000E6E  0E00               	movlw	0
 12159  000E70  23F4               	addwfc	(_Nec_code+1)& (0+255),f,b
 12160  000E72  23F5               	addwfc	(_Nec_code+2)& (0+255),f,b
 12161  000E74  23F6               	addwfc	(_Nec_code+3)& (0+255),f,b
 12162  000E76  D000               	goto	i2l4558
 12163  000E78                     i2l4558:
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;Interrupt.c: 134: }
 12167                           ;Interrupt.c: 136: bit_count++;
 12168  000E78  2A58               	incf	_bit_count,f,c
 12169                           
 12170                           ; BSR set to: 0
 12171                           ;Interrupt.c: 138: if( bit_count > 31 )
 12172  000E7A  0E1F               	movlw	31
 12173  000E7C  6458               	cpfsgt	_bit_count,c
 12174  000E7E  D7B6               	goto	L6
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;Interrupt.c: 139: {
 12178                           ;Interrupt.c: 140: nec_ok = 1;
 12179  000E80  0E00               	movlw	0
 12180  000E82  6E49               	movwf	_nec_ok+1,c
 12181  000E84  0E01               	movlw	1
 12182  000E86  6E48               	movwf	_nec_ok,c
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;Interrupt.c: 141: Nec_code1 = (char) ((Nec_code >> 8));
 12186  000E88  C0F4  F051         	movff	_Nec_code+1,_Nec_code1
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;Interrupt.c: 142: INTCONbits.INT0IE = 0;
 12190  000E8C  98F2               	bcf	intcon,4,c	;volatile
 12191                           
 12192                           ;Interrupt.c: 143: Nec_state = 0;
 12193  000E8E  0E00               	movlw	0
 12194  000E90  6E52               	movwf	_Nec_state,c
 12195  000E92  D7AC               	goto	L6
 12196  000E94                     i2l4568:
 12197                           
 12198                           ;Interrupt.c: 151: else
 12199                           ;Interrupt.c: 152: {
 12200                           ;Interrupt.c: 153: force_nec_state0();
 12201  000E94  EC33  F012         	call	_force_nec_state0	;wreg free
 12202  000E98  D000               	goto	i2l4570
 12203  000E9A                     i2l4570:
 12204                           
 12205                           ;Interrupt.c: 154: }
 12206                           ;Interrupt.c: 155: INTCON2bits.INTEDG0 = 1;
 12207  000E9A  8CF1               	bsf	intcon2,6,c	;volatile
 12208                           
 12209                           ;Interrupt.c: 158: }
 12210                           ;Interrupt.c: 159: }
 12211                           
 12212                           ;Interrupt.c: 157: return;
 12213  000E9C  D011               	goto	i2l245
 12214  000E9E                     i2l4576:
 12215  000E9E  5052               	movf	_Nec_state,w,c
 12216                           
 12217                           ; Switch size 1, requested type "space"
 12218                           ; Number of cases is 5, Range of values is 0 to 4
 12219                           ; switch strategies available:
 12220                           ; Name         Instructions Cycles
 12221                           ; simple_byte           16     9 (average)
 12222                           ;	Chosen strategy is simple_byte
 12223  000EA0  0A00               	xorlw	0	; case 0
 12224  000EA2  B4D8               	btfsc	status,2,c
 12225  000EA4  D76C               	goto	i2l4504
 12226  000EA6  0A01               	xorlw	1	; case 1
 12227  000EA8  B4D8               	btfsc	status,2,c
 12228  000EAA  D780               	goto	i2l4514
 12229  000EAC  0A03               	xorlw	3	; case 2
 12230  000EAE  B4D8               	btfsc	status,2,c
 12231  000EB0  D791               	goto	i2l4526
 12232  000EB2  0A01               	xorlw	1	; case 3
 12233  000EB4  B4D8               	btfsc	status,2,c
 12234  000EB6  D7A2               	goto	i2l4538
 12235  000EB8  0A07               	xorlw	7	; case 4
 12236  000EBA  B4D8               	btfsc	status,2,c
 12237  000EBC  D7B2               	goto	i2l4550
 12238  000EBE  D000               	goto	i2l245
 12239  000EC0                     i2l245:
 12240  000EC0  0012               	return		;funcret
 12241  000EC2                     __end_of_INT0_isr:
 12242                           	opt stack 0
 12243                           pclatu	equ	0xFFB
 12244                           pclath	equ	0xFFA
 12245                           tblptru	equ	0xFF8
 12246                           tblptrh	equ	0xFF7
 12247                           tblptrl	equ	0xFF6
 12248                           tablat	equ	0xFF5
 12249                           prodh	equ	0xFF4
 12250                           prodl	equ	0xFF3
 12251                           intcon	equ	0xFF2
 12252                           intcon2	equ	0xFF1
 12253                           postinc0	equ	0xFEE
 12254                           fsr0h	equ	0xFEA
 12255                           fsr0l	equ	0xFE9
 12256                           wreg	equ	0xFE8
 12257                           postdec1	equ	0xFE5
 12258                           fsr1h	equ	0xFE2
 12259                           fsr1l	equ	0xFE1
 12260                           indf2	equ	0xFDF
 12261                           postinc2	equ	0xFDE
 12262                           postdec2	equ	0xFDD
 12263                           fsr2h	equ	0xFDA
 12264                           fsr2l	equ	0xFD9
 12265                           status	equ	0xFD8
 12266                           
 12267 ;; *************** function _force_nec_state0 *****************
 12268 ;; Defined at:
 12269 ;;		line 43 in file "Interrupt.c"
 12270 ;; Parameters:    Size  Location     Type
 12271 ;;		None
 12272 ;; Auto vars:     Size  Location     Type
 12273 ;;		None
 12274 ;; Return value:  Size  Location     Type
 12275 ;;		None               void
 12276 ;; Registers used:
 12277 ;;		wreg, status,2
 12278 ;; Tracked objects:
 12279 ;;		On entry : 0/0
 12280 ;;		On exit  : 0/0
 12281 ;;		Unchanged: 0/0
 12282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;Total ram usage:        0 bytes
 12288 ;; Hardware stack levels used:    1
 12289 ;; This function calls:
 12290 ;;		Nothing
 12291 ;; This function is called by:
 12292 ;;		_INT0_isr
 12293 ;; This function uses a non-reentrant model
 12294 ;;
 12295                           
 12296                           	psect	text74
 12297  002466                     __ptext74:
 12298                           	opt stack 0
 12299  002466                     _force_nec_state0:
 12300                           	opt stack 20
 12301                           
 12302                           ;Interrupt.c: 45: Nec_state=0;
 12303                           
 12304                           ;incstack = 0
 12305  002466  0E00               	movlw	0
 12306  002468  6E52               	movwf	_Nec_state,c
 12307                           
 12308                           ;Interrupt.c: 46: T1CONbits.TMR1ON = 0;
 12309  00246A  90CD               	bcf	4045,0,c	;volatile
 12310  00246C  0012               	return		;funcret
 12311  00246E                     __end_of_force_nec_state0:
 12312                           	opt stack 0
 12313                           pclatu	equ	0xFFB
 12314                           pclath	equ	0xFFA
 12315                           tblptru	equ	0xFF8
 12316                           tblptrh	equ	0xFF7
 12317                           tblptrl	equ	0xFF6
 12318                           tablat	equ	0xFF5
 12319                           prodh	equ	0xFF4
 12320                           prodl	equ	0xFF3
 12321                           intcon	equ	0xFF2
 12322                           intcon2	equ	0xFF1
 12323                           postinc0	equ	0xFEE
 12324                           fsr0h	equ	0xFEA
 12325                           fsr0l	equ	0xFE9
 12326                           wreg	equ	0xFE8
 12327                           postdec1	equ	0xFE5
 12328                           fsr1h	equ	0xFE2
 12329                           fsr1l	equ	0xFE1
 12330                           indf2	equ	0xFDF
 12331                           postinc2	equ	0xFDE
 12332                           postdec2	equ	0xFDD
 12333                           fsr2h	equ	0xFDA
 12334                           fsr2l	equ	0xFD9
 12335                           status	equ	0xFD8
 12336                           pclatu	equ	0xFFB
 12337                           pclath	equ	0xFFA
 12338                           tblptru	equ	0xFF8
 12339                           tblptrh	equ	0xFF7
 12340                           tblptrl	equ	0xFF6
 12341                           tablat	equ	0xFF5
 12342                           prodh	equ	0xFF4
 12343                           prodl	equ	0xFF3
 12344                           intcon	equ	0xFF2
 12345                           intcon2	equ	0xFF1
 12346                           postinc0	equ	0xFEE
 12347                           fsr0h	equ	0xFEA
 12348                           fsr0l	equ	0xFE9
 12349                           wreg	equ	0xFE8
 12350                           postdec1	equ	0xFE5
 12351                           fsr1h	equ	0xFE2
 12352                           fsr1l	equ	0xFE1
 12353                           indf2	equ	0xFDF
 12354                           postinc2	equ	0xFDE
 12355                           postdec2	equ	0xFDD
 12356                           fsr2h	equ	0xFDA
 12357                           fsr2l	equ	0xFD9
 12358                           status	equ	0xFD8
 12359                           
 12360                           	psect	rparam
 12361  0000                     pclatu	equ	0xFFB
 12362                           pclath	equ	0xFFA
 12363                           tblptru	equ	0xFF8
 12364                           tblptrh	equ	0xFF7
 12365                           tblptrl	equ	0xFF6
 12366                           tablat	equ	0xFF5
 12367                           prodh	equ	0xFF4
 12368                           prodl	equ	0xFF3
 12369                           intcon	equ	0xFF2
 12370                           intcon2	equ	0xFF1
 12371                           postinc0	equ	0xFEE
 12372                           fsr0h	equ	0xFEA
 12373                           fsr0l	equ	0xFE9
 12374                           wreg	equ	0xFE8
 12375                           postdec1	equ	0xFE5
 12376                           fsr1h	equ	0xFE2
 12377                           fsr1l	equ	0xFE1
 12378                           indf2	equ	0xFDF
 12379                           postinc2	equ	0xFDE
 12380                           postdec2	equ	0xFDD
 12381                           fsr2h	equ	0xFDA
 12382                           fsr2l	equ	0xFD9
 12383                           status	equ	0xFD8


Data Sizes:
    Strings     233
    Constant    493
    Data        157
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     111
    BANK0           128      4     127
    BANK1           256     11      44
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[3]), 
		 -> STR_14(CODE[6]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[2]), 
		 -> STR_10(CODE[3]), STR_9(CODE[13]), STR_8(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_7(CODE[23]), STR_6(CODE[15]), STR_5(CODE[22]), STR_4(CODE[16]), 
		 -> STR_3(CODE[20]), STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    _Turn_On_Fan->_do_update_pwm
    _Set_DC_RGB->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Do_Beep->_Wait_Half_Second
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _Increase_Speed->_do_update_pwm
    _Decrease_Speed->_do_update_pwm

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  104092
                                             64 COMRAM     1     1      0
                                              9 BANK1      2     2      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3911
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3181
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   22353
                                              2 BANK0      2     2      0
                                              7 BANK1      2     2      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1603
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8034
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          2     0      2     316
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           5     3      2    2333
                                             30 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2135
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM     8     0      8
                                              0 BANK0      2     2      0
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0    8102
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0    8102
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     3     3      0
                                              0 BANK1      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0      68
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (3) _Wait_Half_Second                                     2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_Half_Second
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      B      2C       7       17.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      4      7F       5       99.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11A      34        0.0%
DATA                 0      0     11A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Dec 01 19:07:09 2021

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                                 l40 2304  
                               l51 21DE                                 l35 1FDC  
                               l56 2228                                 l74 1BD4  
                     ___awdiv@sign 001C               __size_of_Turn_On_Fan 0010  
              ___wmul@multiplicand 0013                    ??_Update_Screen 00FD  
                              l104 1F9E                                l107 2068  
                              l601 2344                                l187 20D2  
                              l437 23EC                                l544 224C  
                              l704 16CA                                l705 1636  
                              l715 0C6A                                l651 1970  
                              l707 16A6                                l708 16C8  
                              l645 2166                                l591 1E1C  
                              l834 0734                                l667 1016  
                              l676 0F6C                                l669 0EF0  
                              l862 1C1C                                l870 21B8  
                              l863 1C1E                                l864 1C28  
                              _FAN 0050                                l865 1C2A  
                              l858 1C02                                l867 1C44  
                              l797 04DC                  ?_Wait_Half_Second 0001  
                              _PR2 000FCB                                _day 0067  
                _Deactivate_Buzzer 244E               __size_of_I2C_ReStart 0016  
                              _dow 0068                                _nbr 00F9  
                              _rpm 004A              __size_of_Turn_Off_Fan 000A  
                              _rps 004C                                _txt 004E  
                     ___awmod@sign 0024                                prod 000FF3  
                              wreg 000FE8                 ??_Wait_Half_Second 0011  
               ?_Deactivate_Buzzer 0001                         _Fan_SW_Txt 00E7  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 2168                       ___ftdiv@cntr 0035  
                     ___ftdiv@sign 003A                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1301 226E  
                             l1063 18E8                               l1250 15EE  
                             l1403 1F04                               l1076 1A74  
                             l1253 15BA                               l1327 2204  
                             l1432 201A                               l1265 1334  
                             l1178 1790                     drawFastVLine@x 0022  
                             l1189 1768                     drawFastVLine@y 0018  
                             l1286 150C                               l1393 1DC8  
                             l5400 1750                               l6112 0C50  
                             l5402 175C                               l6210 1A18  
                             l5420 2060                               l6300 221C  
                             l6140 0D40                               l5414 1782  
                             l5502 1554                               l6054 20DE  
                             l6310 1C92                               l6230 1A6A  
                             l6222 1A4E                               l6214 1A26  
                             l6206 1A0A                               l6150 2266  
                             l5408 1770                               l6056 20E8  
                             l6216 1A30                               l6240 1D8C  
                             l5426 2072                               l5522 1594  
                             l5362 1932                               l6090 1110  
                             l6082 10BE                               l6066 1044  
                             l6162 186A                               l6306 1C6A  
                             l6330 1BBE                               l6322 1B92  
                             l6218 1A38                               l6226 1A5A  
                             l6242 1D96                               l5428 2078  
                             l5532 15C8                               l5620 14D8  
                             l5612 14B0                               l5372 1958  
                             l6092 1118                               l6308 1C88  
                             l6324 1B98                               l6252 1DBC  
                             l6244 1D9E                               l6260 1ED0  
                             l6500 0442                               l5438 208A  
                             l5390 16EC                               l5542 125C  
                             l5614 14B6                               l5622 14E2  
                             l5702 1C14                               l5374 1966  
                             l5358 18FA                               l6078 10A0  
                             l6174 1892                               l6190 18CE  
                             l6318 1B74                               l6262 1EDA  
   I2C_Write_Cmd_Write_Data@Device 0015                               l5392 16F8  
                             l5544 1276                               l5608 14A0  
                             l6176 189C                               l6168 187C  
                             l6328 1BB8                               l6264 1EE2  
                             l6512 04AE                               l5394 1718  
                             l5386 16DC                               l5570 12E0  
                             l5562 12B8                               l5626 14FA  
                             l5618 14CA                               l6194 18DE  
                             l6186 18C2                               l6178 18A4  
                             l6530 0528                               l6610 0718  
                             l5732 2246                               l5580 130E  
                             l5572 12E6                               l5548 1284  
                             l5644 182A                               l6292 21D2  
                             l5476 2148                               l5484 1F18  
                             l6284 22F8                               l6620 0058  
                             l6268 1EF8                               l6604 06F2  
                             l6524 050A                               l6508 04A6  
                             l5398 1730                               l5566 12CA  
                             l5590 1446                               l5902 1600  
                             l6606 0704                               l6542 055E  
                             l6534 0534                               l5728 2232  
                             l5496 152C                               l5576 12F8  
                             l5488 1F34                               l5920 169C  
                             l6608 070C                               l6552 0592  
                             l6544 0562                               l6560 05AA  
                             l6528 0524                               l5498 1546  
                             l5690 1BFA                               l5682 1BE8  
                             l5842 0EDE                               l6642 012E  
                             l6626 0098                               l6570 05EA  
                             l6538 0558                               l6490 0404  
                             l5860 0F64                               l5852 0EFC  
                             l5924 16AA                               l5908 166E  
                             l6636 00EE                               l6580 0614  
                             l6572 05F4                               l6548 056E  
                             l6484 03E6                               l5694 1C06  
                             l5686 1BF2                               l5870 0FB6  
                             l5846 0EEC                               l5838 0ED2  
                             l5934 16C4                               l6670 01C2  
                             l6590 064C                               l6566 05C6  
                             l6558 0598                               l6494 040E  
                             l6806 09BE                               l5856 0F2C  
                             l5848 0EF4                               l5928 16B4  
                             l6672 01D8                               l6584 062C  
                             l6496 0424                               l6488 03F6  
                             l6832 0AA8                               l5970 1F6A  
                             l5858 0F60                               l5890 1FE8  
                             l6586 0634                               l6594 0660  
                             l6578 060C                               l6850 0AF4  
                             l5876 0FE2                               l5868 0F8E  
                             l5884 1012                               l5892 1FEE  
                             l6596 0668                               l6860 0B26  
                             l5990 1F9A                               l5966 1F62  
                             l5878 100A                               l6598 06AC  
                             l6846 0ADA                               l5976 1F78  
                             l5984 1F88                               l6864 0B3A  
                             l6856 0B1C                               l5978 1F80  
                             l6882 0B7C                               l6874 0B62  
                             l5988 1F94                               l6876 0B68  
                             l6886 0B8A                               l6878 0B6E  
                             STR_1 FF16                               STR_2 FF77  
                             STR_3 FF8C                               STR_4 FFB1  
                             STR_5 FF61                               STR_6 FFC1  
                             STR_7 FF34                               STR_8 FF4B  
                             STR_9 FFD0                               u4101 126C  
                             u4031 151E                               u4051 153C  
                             u4141 1438                               u4160 1464  
                             u4081 124E                               u4165 145C  
                             u4520 162E                               u4450 0FC4  
                             u4530 1664                               u4650 107A  
                             u3860 1928                               u5617 2408  
                             u4980 1B82                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0042  
                     _DS1621_tempF 0044                ??_Deactivate_Buzzer 0011  
                             _date 00CC                               _main 09A0  
                             _font FD29                       ___ftpack@arg 0011  
                             _hour 0069                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 2430                   __end_of_I2C_Read 1FA0  
                             _time 00D5                               _year 006F  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006E  
                 __end_of_I2C_Stop 2394                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 2404  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1E74                     _Increase_Speed 21BA  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 243A                       ___param_bank 000010  
                     ___ftmul@sign 002B                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 241C                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0EC2  
        __end_of_Deactivate_Buzzer 2456                    ??_do_update_pwm 003B  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 18EA  
                  drawCircle@ddF_x 0026                              STR_10 FFF9  
                  drawCircle@ddF_y 0028                              STR_11 FFF3  
                            STR_12 FFE3                              STR_13 FFE8  
                            STR_14 FFDD                              STR_15 FFFC  
                            STR_16 FFF5                              STR_17 FFED  
                            STR_18 FFF1                              STR_19 FFA0  
                  __end_of___awmod 1A76                    __end_of___ftdiv 15F0  
                  __end_of___ftmul 1336                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                  __end_of___fttol 150E                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 1DD2  
                  __end_of___lwmod 1F0E                              i2l233 1AB8  
                            i2l245 0EC0                    ___awdiv@counter 001B  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTA 000F80                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 1FDE                              _Rcmd1 112E  
                            _Rcmd3 1336                         _i2cHighSda 245E  
                       _i2cHighScl 2404                    __end_of_dpowers FF0E  
                            _font2 FE28                              _found 005B  
                  __end_of_isdigit 2270                              _tempC 00EB  
                            _tempF 00EF                              _month 006B  
                    ___ftpack@sign 0015                              _putch 23E8  
                            main@j 012A                  __end_of_I2C_Start 23A6  
                __end_of_I2C_Write 2098                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
           __end_of_Increase_Speed 21E0                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 1972                      ??_Set_RPM_RGB 0013  
                     __end_of_main 0BA8                       __end_of_font FE28  
                 __end_of_Rcmd2red 205A                   ??_Decrease_Speed 003E  
                           ??_main 0041                      ___fttol@sign1 001A  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 2370                         _Set_DC_RGB 1C46  
        ??_TFT_GreenTab_Initialize 001D                 ??_DS3231_Read_Time 0014  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0032                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 0016                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 1792  
                 __end_of___lbtoft 2206                          ??_Do_Beep 0013  
                           _DC_Txt 00E3                             i2l4520 0DCA  
                           i2l4504 0D7E                          ??_Do_Init 0017  
                           i2l4514 0DAC                             i2l4532 0DF2  
                           i2l4550 0E22                             i2l4526 0DD4  
                           i2l4544 0E18                             i2l4570 0E9A  
                           i2l4546 0E1E                             i2l4538 0DFC  
                           i2l4558 0E78                             i2l4568 0E94  
                           i2l4576 0E9E                             i2l4966 1AAE  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00C6                   _force_nec_state0 2466  
                 __end_of_delay_ms 1E24                             _i2cAck 23A6  
                 __end_of_fillRect 1F58                   __end_of_drawChar 1018  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 2192                          ??___awdiv 001B  
                 __end_of_drawtext 112E                          ??___awmod 0023  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 0080  
                        ??___lwmod 001C                             _buffer 0100  
                           _colors 00B9                             _nec_ok 0048  
                           clear_0 1978                             clear_1 1984  
                 ___awdiv@quotient 001D                             _minute 006A  
                           _second 005D            DS3231_Setup_Time@Device 0013  
                  ___awmod@divisor 0021                          ??_get_RPM 0021  
       __size_of_Deactivate_Buzzer 0008                    ___awmod@counter 0023  
                           _printf 03DC                       drawtext@size 0040  
                           _strcpy 20D4                             _strlen 1FDE  
            ___ftmul@f3_as_product 0027                __end_of_Set_RPM_RGB 1BD6  
                       _Toggle_Fan 22EC                       __pdataCOMRAM 0067  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD28                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 22B2                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 234A                         __accesstop 0080  
          __end_of__initialization 19EA                          ?_INT0_isr 0001  
               _setup_alarm_minute 005F                 _setup_alarm_second 0060  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0011  
                    __end_of_Rcmd1 123E                      __end_of_Rcmd3 1428  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1AF2  
                     __pidataBANK1 2270                      __end_of_font2 FF04  
                __end_of_i2cLowSda 2444                  __end_of_i2cLowScl 245E  
                    __end_of_putch 23F6                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                      ?_Set_DC_RGB 001F                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1C46                            ??_putch 0011  
                       __pbssBANK0 00F3                   _setup_alarm_hour 005E  
                 _setup_alarm_time 009E                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
        __size_of_Wait_Half_Second 0024                    spiwrite@spidata 0012  
                       _alarm_date 0054                         ??_INT0_isr 0001  
                       _alarm_hour 0055                         _alarm_time 0095  
                          ?_i2cAck 0001               Set_DC_RGB@duty_cycle 001F  
               __CFG_CCP2MX$PORTBE 000000                      ??_Turn_On_Fan 003E  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                      _Set_RPM_RGB 1B66                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                          _ALARMEN 00F7                          ?___ftpack 0011  
                        ?___lbtoft 0019                         I2C_Write@n 0012  
                          ?_printf 001D                    Set_DC_RGB@index 0021  
                          ?_strcpy 0011                            ?_strlen 0011  
                      ?_Toggle_Fan 0001                  ??_Activate_Buzzer 0011  
                       _fillScreen 22D0              __end_of_Update_Screen 03DC  
                       _drawCircle 0BA8                     _init_INTERRUPT 2106  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _RPM_Txt 00DE  
            __end_of_fillRectangle 16CC                            _Do_Beep 23F6  
                        ?_drawtext 0039                  _DS3231_Setup_Time 1CAC  
                          _Do_Init 1E24           _I2C_Write_Cmd_Write_Data 2292  
       __end_of_I2C_Write_Cmd_Only 2320                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                            _i2cNack 2430  
               __end_of_TIMER1_isr 241C                 ?_DS3231_Setup_Time 0001  
                    _write_command 23D8                          _I2C_Start 2394  
                        _I2C_Write 205A                  Wait_Half_Second@i 0011  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __size_of_Set_DC_RGB 0066  
              __end_of_DS1621_Init 22D0                  __end_of_drawPixel 2168  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1972  
                          ___awdiv 1854                            ___awmod 19F4  
                          ___ftdiv 150E                    __size_of___wmul 0028  
                          ___ftmul 123E                            ___fttol 1428  
                          ___lwdiv 1D76                            ___lwmod 1EC2  
                  __size_of_chkisr 1AEA                          ?_spiwrite 0001  
                          __pcinit 1972                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 1FA0                            __ptext0 09A0  
                          __ptext1 03DC                            __ptext2 23E8  
                          __ptext3 224E                            __ptext4 1EC2  
                          __ptext5 1D76          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 1FA0                            __ptext7 001C  
                          __ptext8 19F4                            __ptext9 22EC  
                  __size_of_printf 035A                  __end_of_init_UART 235E  
              __end_of_Turn_On_Fan 23C8             __end_of_init_INTERRUPT 2138  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF16  
         __end_of_force_nec_state0 246E                          _T1CONbits 000FCD  
         DS3231_Setup_Time@Address 0014                            _dpowers FF04  
            __end_of_do_update_pwm 1854                            _isdigit 224E  
                 ___awmod@dividend 001F                         _duty_cycle 005A  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 2336  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 1D12  
                 ??_Increase_Speed 003E                         ??_drawChar 0035  
                        _LCD_Reset 235E                      _setAddrWindow 1E74  
                   __pintcode_body 1A76                         delay_ms@ms 0017  
             end_of_initialization 19EA                         ??_drawtext 00FB  
                   ?_write_command 0001                      __Lmediumconst FD28  
        __size_of_DS3231_Read_Time 0064                            int_func 1A76  
          DS3231_Read_Time@Address 0014                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         get_RPM@RPS 0021  
              __size_of_Toggle_Fan 001A                         _tempSecond 006D  
                        _RCSTAbits 000FAB                            printf@c 0038  
                          printf@f 001D                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         ??_spiwrite 0011  
                          strlen@s 0011        I2C_Write_Cmd_Write_Data@Cmd 0013  
                 drawtext@cursor_x 0127                   drawtext@cursor_y 0126  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                          _PORTEbits 000F84  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                       _setup_date 00A7                        ?_fillScreen 0024  
                       _setup_hour 0062                         _setup_time 00B0  
                       _setup_year 0066                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISCbits 000F94  
                        _TRISDbits 000F95                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 0122                         drawPixel@x 001B  
                       drawPixel@y 0018                   _Wait_Half_Second 222A  
                      _DS1621_Init 22B2                        ___ftdiv@exp 0039  
                      printf@width 0036                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 016C                     __end_of_i2cAck 23B8  
                      ___ftmul@exp 0026           DS1621_Read_Temp@Data_Ret 0017  
                      _Turn_On_Fan 23B8                 __end_of_i2cHighSda 2466  
               __end_of_i2cHighScl 2410                     __end_of___wmul 21BA  
                    delay_ms@count 001B                         _write_data 23C8  
                    __pidataCOMRAM 2444                     __end_of_chkisr 1AF2  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 2320  
                       drawtext@bg 003E                          _Nec_code1 0051  
                        _i2cLowSda 243A                          _i2cLowScl 2456  
                   _Set_DC_RGB$405 0022                     __end_of_printf 0736  
                     ??_Set_DC_RGB 0021                     __end_of_strcpy 2106  
                   __end_of_strlen 201C                          _Nec_state 0052  
              start_initialization 1972             Update_Screen@neg_tempF 0128  
       __size_of_DS3231_Setup_Time 0066            __size_of_Decrease_Speed 0024  
                  ??_write_command 0013                          _OpenUSART 1BD6  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 2370  
               __end_of_Set_DC_RGB 1CAC                           ??___wmul 0015  
                     ?_Set_RPM_RGB 0011                      ?_Turn_Off_Fan 0001  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 2098                           ??_strcpy 0015  
                         ??_strlen 0013                       ??_Toggle_Fan 003E  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                __size_of___ftpack 00C6                  __size_of___lbtoft 0026  
                      __pbssCOMRAM 0042         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00FB  
                    __pcstackBANK1 0121                        ??_LCD_Reset 001D  
                     _isdigit$2492 0012                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1D12  
                         ?_i2cNack 0001                  __size_of_drawtext 0116  
                 ___lwdiv@dividend 0011                 __end_of_Toggle_Fan 2306  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 2192  
                   ??_Turn_Off_Fan 0011                      __pmediumconst FD28  
                         ?___awdiv 0017                           ?___awmod 001F  
                         ?___ftdiv 002C                           ?___ftmul 001D  
                         ?___fttol 0011                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 2306  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 2138  
                         ?_get_RPM 001F                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 2426  
                         _I2C_Read 1F58                           _I2C_Stop 2382  
                _Initialize_Screen 0736                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 234A  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF0E                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 2382                     ___wmul@product 0015  
              ??_Initialize_Screen 0041                           _INT0_isr 0D56  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           __size_of_Update_Screen 03C0             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 0011  
                        _setup_day 0061                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
         __end_of_Wait_Half_Second 224E                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 09A0                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0035  
                       printf@prec 0032                         ?_init_UART 0001  
                   _Decrease_Speed 2206                        _INTCON2bits 000FF1  
                        copy_data0 199E                          copy_data1 19BE  
                        copy_data2 19DE                          drawtext@i 0124  
           __size_of_drawFastVLine 0088                          drawtext@x 0121  
                        drawtext@y 0039                           _Nec_code 00F3  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                 __size_of_Do_Beep 000E                       ?_DS1621_Init 0001  
                         _Rcmd2red 201C                   __size_of_Do_Init 0050  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0046                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00CA                           __Hrparam 0000  
           __size_of_do_update_pwm 00C2                 __end_of_fillScreen 22EC  
                         __Lrparam 0000                 __end_of_drawCircle 0D56  
                     ?_Turn_On_Fan 0001                   __size_of___awdiv 0096  
                 __size_of___awmod 0082                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
             __size_of_Set_RPM_RGB 0070                           ___ftpack 16CC  
                         ___lbtoft 21E0                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 003E                      _Update_Screen 001C  
                   _setup_fan_temp 006C                     _setup_fan_text 00C1  
                 __size_of_isdigit 0022                           _delay_ms 1DD2  
           __end_of_Decrease_Speed 222A                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 23B8  
                         __ptext11 241C                           __ptext20 1FDE  
                         __ptext12 1B66                           __ptext21 0EC2  
                         __ptext13 1C46                           __ptext30 112E  
                         __ptext22 1F0E                           __ptext14 1854  
                         __ptext31 23C8                           __ptext23 18EA  
                         __ptext15 0736                           __ptext40 1BD6  
                         __ptext32 23D8                           __ptext24 0BA8  
                         __ptext16 20D4                           __ptext41 2106  
                         __ptext33 2336                           __ptext25 2138  
                         __ptext17 22D0                           __ptext50 123E  
                         __ptext42 2426                           __ptext34 235E  
                         __ptext26 1E74                           __ptext18 15F0  
                         __ptext51 150E                           __ptext43 22B2  
                         __ptext35 1DD2                           __ptext27 2168  
                         __ptext19 1018                           __ptext60 205A  
                         __ptext52 16CC                           __ptext44 2292  
                         __ptext36 2192                           __ptext28 1336  
                         __ptext61 2382                           __ptext53 23F6  
                         __ptext45 2306                           __ptext37 21BA  
                         __ptext29 201C                           __ptext70 2404  
                         __ptext62 2394                           __ptext54 222A  
                         __ptext46 2206                           __ptext38 1E24  
                         __ptext63 1F58                           __ptext55 244E  
                         __ptext47 1792                           __ptext39 234A  
                         __ptext72 2410                           __ptext64 2430  
                         __ptext56 2370                           __ptext48 21E0  
                         __ptext73 0D56                           __ptext65 23A6  
                         __ptext57 1CAC                           __ptext49 1428  
                         __ptext74 2466                           __ptext66 2320  
                         __ptext58 1D12                           __ptext67 243A  
                         __ptext59 2098                           __ptext68 2456  
                         __ptext69 245E                           _fillRect 1F0E  
                         _drawChar 0EC2               __end_of_Turn_Off_Fan 2426  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 1018                         strcpy@from 0013  
                    _fillRectangle 15F0           __end_of_DS1621_Read_Temp 20D4  
                 ?_Activate_Buzzer 0001                      __size_of_main 0208  
          __size_of_Increase_Speed 0026                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 18EA  
                        printf@idx 002F                           _spiwrite 2336  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 005C           __end_of_DS3231_Read_Time 1D76  
       __size_of_Initialize_Screen 026A                     ?_Update_Screen 0001  
                       _INTCONbits 000FF2                      _do_update_pwm 1792  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                  ?_Decrease_Speed 0001                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   ___lwmod@dividend 0018  
            __end_of_write_command 23E8                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 0124                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 2410                      fillRect@color 0026  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0063  
                     _setup_second 0065              __end_of_setAddrWindow 1EC2  
               fillRectangle@color 001B                  do_update_pwm@dc_I 0125  
                do_update_pwm@dc_f 0121                      drawChar@color 0030  
                      _setup_month 0064                     Set_RPM_RGB@rpm 0011  
               __end_of_write_data 23D8          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
