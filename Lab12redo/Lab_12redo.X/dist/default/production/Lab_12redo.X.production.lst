

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 02 20:56:53 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	text102,global,reloc=2,class=CODE,delta=1
   121                           	psect	text103,global,reloc=2,class=CODE,delta=1
   122                           	psect	text104,global,reloc=2,class=CODE,delta=1
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	text107,global,reloc=2,class=CODE,delta=1
   126                           	psect	text108,global,reloc=2,class=CODE,delta=1
   127                           	psect	text109,global,reloc=2,class=CODE,delta=1
   128                           	psect	text110,global,reloc=2,class=CODE,delta=1
   129                           	psect	text111,global,reloc=2,class=CODE,delta=1
   130                           	psect	text112,global,reloc=2,class=CODE,delta=1
   131                           	psect	text113,global,reloc=2,class=CODE,delta=1
   132                           	psect	text114,global,reloc=2,class=CODE,delta=1
   133                           	psect	text115,global,reloc=2,class=CODE,delta=1
   134                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   135                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1
   143                           	psect	text124,global,reloc=2,class=CODE,delta=1
   144                           	psect	text125,global,reloc=2,class=CODE,delta=1
   145                           	psect	text126,global,reloc=2,class=CODE,delta=1
   146                           	psect	text127,global,reloc=2,class=CODE,delta=1
   147                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   148                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   149  0000                     
   150                           	psect	idataCOMRAM
   151  004E3A                     __pidataCOMRAM:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _heater_set_temp
   155  004E3A  4B                 	db	75
   156                           
   157                           	psect	idataBANK0
   158  0045D2                     __pidataBANK0:
   159                           	opt stack 0
   160                           
   161                           ;initializer for _colors
   162  0045D2  00                 	db	0
   163  0045D3  02                 	db	2
   164  0045D4  04                 	db	4
   165  0045D5  06                 	db	6
   166  0045D6  10                 	db	16
   167  0045D7  12                 	db	18
   168  0045D8  14                 	db	20
   169  0045D9  16                 	db	22
   170                           
   171                           ;initializer for _day
   172  0045DA  04                 	db	4
   173                           
   174                           ;initializer for _dow
   175  0045DB  03                 	db	3
   176                           
   177                           ;initializer for _hour
   178  0045DC  02                 	db	2
   179                           
   180                           ;initializer for _minute
   181  0045DD  01                 	db	1
   182                           
   183                           ;initializer for _month
   184  0045DE  05                 	db	5
   185                           
   186                           ;initializer for _tempSecond
   187  0045DF  FF                 	db	255
   188                           
   189                           ;initializer for _wrap
   190  0045E0  01                 	db	1
   191                           
   192                           ;initializer for _year
   193  0045E1  06                 	db	6
   194                           
   195                           ;initializer for _date
   196  0045E2  30                 	db	48
   197  0045E3  30                 	db	48
   198  0045E4  2F                 	db	47
   199  0045E5  30                 	db	48
   200  0045E6  30                 	db	48
   201  0045E7  2F                 	db	47
   202  0045E8  30                 	db	48
   203  0045E9  30                 	db	48
   204  0045EA  00                 	db	0
   205                           
   206                           ;initializer for _time
   207  0045EB  30                 	db	48
   208  0045EC  30                 	db	48
   209  0045ED  3A                 	db	58
   210  0045EE  30                 	db	48
   211  0045EF  30                 	db	48
   212  0045F0  3A                 	db	58
   213  0045F1  30                 	db	48
   214  0045F2  30                 	db	48
   215  0045F3  00                 	db	0
   216                           
   217                           ;initializer for _Volt_Txt
   218  0045F4  30                 	db	48
   219  0045F5  2E                 	db	46
   220  0045F6  30                 	db	48
   221  0045F7  30                 	db	48
   222  0045F8  56                 	db	86
   223  0045F9  00                 	db	0
   224                           
   225                           ;initializer for _Heater_Set_Temp_Txt
   226  0045FA  30                 	db	48
   227  0045FB  37                 	db	55
   228  0045FC  35                 	db	53
   229  0045FD  46                 	db	70
   230  0045FE  00                 	db	0
   231                           
   232                           ;initializer for _RPM_Txt
   233  0045FF  30                 	db	48
   234  004600  30                 	db	48
   235  004601  30                 	db	48
   236  004602  30                 	db	48
   237  004603  00                 	db	0
   238                           
   239                           ;initializer for _setup_heater_set_text
   240  004604  30                 	db	48
   241  004605  37                 	db	55
   242  004606  35                 	db	53
   243  004607  46                 	db	70
   244  004608  00                 	db	0
   245                           
   246                           ;initializer for _Alarm_SW_Txt
   247  004609  4F                 	db	79
   248  00460A  46                 	db	70
   249  00460B  46                 	db	70
   250  00460C  00                 	db	0
   251                           
   252                           ;initializer for _DC_Txt
   253  00460D  30                 	db	48
   254  00460E  30                 	db	48
   255  00460F  30                 	db	48
   256  004610  00                 	db	0
   257                           
   258                           ;initializer for _Heater_SW_Txt
   259  004611  4F                 	db	79
   260  004612  46                 	db	70
   261  004613  46                 	db	70
   262  004614  00                 	db	0
   263                           
   264                           ;initializer for _tempC
   265  004615  2B                 	db	43
   266  004616  32                 	db	50
   267  004617  35                 	db	53
   268  004618  00                 	db	0
   269                           
   270                           ;initializer for _tempF
   271  004619  2B                 	db	43
   272  00461A  37                 	db	55
   273  00461B  37                 	db	55
   274  00461C  00                 	db	0
   275                           
   276                           ;initializer for _RTC_ALARM_Txt
   277  00461D  30                 	db	48
   278  00461E  00                 	db	0
   279                           
   280                           	psect	idataBANK1
   281  004426                     __pidataBANK1:
   282                           	opt stack 0
   283                           
   284                           ;initializer for _buffer
   285  004426  20                 	db	32
   286  004427  45                 	db	69
   287  004428  43                 	db	67
   288  004429  45                 	db	69
   289  00442A  33                 	db	51
   290  00442B  33                 	db	51
   291  00442C  30                 	db	48
   292  00442D  31                 	db	49
   293  00442E  4C                 	db	76
   294  00442F  20                 	db	32
   295  004430  46                 	db	70
   296  004431  27                 	db	39
   297  004432  32                 	db	50
   298  004433  31                 	db	49
   299  004434  20                 	db	32
   300  004435  46                 	db	70
   301  004436  69                 	db	105
   302  004437  6E                 	db	110
   303  004438  61                 	db	97
   304  004439  6C                 	db	108
   305  00443A  00                 	db	0
   306  00443B  00                 	db	0
   307  00443C  00                 	db	0
   308  00443D  00                 	db	0
   309  00443E  00                 	db	0
   310  00443F  00                 	db	0
   311  004440  00                 	db	0
   312  004441  00                 	db	0
   313  004442  00                 	db	0
   314  004443  00                 	db	0
   315  004444  00                 	db	0
   316                           
   317                           ;initializer for _array1
   318  004445  A2                 	db	162
   319  004446  62                 	db	98
   320  004447  E2                 	db	226
   321  004448  22                 	db	34
   322  004449  02                 	db	2
   323  00444A  C2                 	db	194
   324  00444B  E0                 	db	224
   325  00444C  A8                 	db	168
   326  00444D  90                 	db	144
   327  00444E  68                 	db	104
   328  00444F  98                 	db	152
   329  004450  B0                 	db	176
   330  004451  30                 	db	48
   331  004452  18                 	db	24
   332  004453  7A                 	db	122
   333  004454  10                 	db	16
   334  004455  38                 	db	56
   335  004456  5A                 	db	90
   336  004457  42                 	db	66
   337  004458  4A                 	db	74
   338  004459  52                 	db	82
   339                           
   340                           ;initializer for _alarm_time
   341  00445A  30                 	db	48
   342  00445B  30                 	db	48
   343  00445C  3A                 	db	58
   344  00445D  30                 	db	48
   345  00445E  30                 	db	48
   346  00445F  3A                 	db	58
   347  004460  30                 	db	48
   348  004461  30                 	db	48
   349  004462  00                 	db	0
   350                           
   351                           ;initializer for _setup_alarm_time
   352  004463  30                 	db	48
   353  004464  30                 	db	48
   354  004465  3A                 	db	58
   355  004466  30                 	db	48
   356  004467  30                 	db	48
   357  004468  3A                 	db	58
   358  004469  30                 	db	48
   359  00446A  30                 	db	48
   360  00446B  00                 	db	0
   361                           
   362                           ;initializer for _setup_date
   363  00446C  30                 	db	48
   364  00446D  31                 	db	49
   365  00446E  2F                 	db	47
   366  00446F  30                 	db	48
   367  004470  31                 	db	49
   368  004471  2F                 	db	47
   369  004472  30                 	db	48
   370  004473  30                 	db	48
   371  004474  00                 	db	0
   372                           
   373                           ;initializer for _setup_time
   374  004475  30                 	db	48
   375  004476  30                 	db	48
   376  004477  3A                 	db	58
   377  004478  30                 	db	48
   378  004479  30                 	db	48
   379  00447A  3A                 	db	58
   380  00447B  30                 	db	48
   381  00447C  30                 	db	48
   382  00447D  00                 	db	0
   383                           
   384                           	psect	mediumconst
   385  00FC7A                     __pmediumconst:
   386                           	opt stack 0
   387  00FC7A  00                 	db	0
   388  00FC7B                     _font:
   389                           	opt stack 0
   390  00FC7B  00                 	db	0
   391  00FC7C  00                 	db	0
   392  00FC7D  00                 	db	0
   393  00FC7E  00                 	db	0
   394  00FC7F  00                 	db	0
   395  00FC80  00                 	db	0
   396  00FC81  00                 	db	0
   397  00FC82  5F                 	db	95
   398  00FC83  00                 	db	0
   399  00FC84  00                 	db	0
   400  00FC85  00                 	db	0
   401  00FC86  07                 	db	7
   402  00FC87  00                 	db	0
   403  00FC88  07                 	db	7
   404  00FC89  00                 	db	0
   405  00FC8A  14                 	db	20
   406  00FC8B  7F                 	db	127
   407  00FC8C  14                 	db	20
   408  00FC8D  7F                 	db	127
   409  00FC8E  14                 	db	20
   410  00FC8F  24                 	db	36
   411  00FC90  2A                 	db	42
   412  00FC91  7F                 	db	127
   413  00FC92  2A                 	db	42
   414  00FC93  12                 	db	18
   415  00FC94  23                 	db	35
   416  00FC95  13                 	db	19
   417  00FC96  08                 	db	8
   418  00FC97  64                 	db	100
   419  00FC98  62                 	db	98
   420  00FC99  36                 	db	54
   421  00FC9A  49                 	db	73
   422  00FC9B  56                 	db	86
   423  00FC9C  20                 	db	32
   424  00FC9D  50                 	db	80
   425  00FC9E  00                 	db	0
   426  00FC9F  08                 	db	8
   427  00FCA0  07                 	db	7
   428  00FCA1  03                 	db	3
   429  00FCA2  00                 	db	0
   430  00FCA3  00                 	db	0
   431  00FCA4  1C                 	db	28
   432  00FCA5  22                 	db	34
   433  00FCA6  41                 	db	65
   434  00FCA7  00                 	db	0
   435  00FCA8  00                 	db	0
   436  00FCA9  41                 	db	65
   437  00FCAA  22                 	db	34
   438  00FCAB  1C                 	db	28
   439  00FCAC  00                 	db	0
   440  00FCAD  2A                 	db	42
   441  00FCAE  1C                 	db	28
   442  00FCAF  7F                 	db	127
   443  00FCB0  1C                 	db	28
   444  00FCB1  2A                 	db	42
   445  00FCB2  08                 	db	8
   446  00FCB3  08                 	db	8
   447  00FCB4  3E                 	db	62
   448  00FCB5  08                 	db	8
   449  00FCB6  08                 	db	8
   450  00FCB7  00                 	db	0
   451  00FCB8  80                 	db	128
   452  00FCB9  70                 	db	112
   453  00FCBA  30                 	db	48
   454  00FCBB  00                 	db	0
   455  00FCBC  08                 	db	8
   456  00FCBD  08                 	db	8
   457  00FCBE  08                 	db	8
   458  00FCBF  08                 	db	8
   459  00FCC0  08                 	db	8
   460  00FCC1  00                 	db	0
   461  00FCC2  00                 	db	0
   462  00FCC3  60                 	db	96
   463  00FCC4  60                 	db	96
   464  00FCC5  00                 	db	0
   465  00FCC6  20                 	db	32
   466  00FCC7  10                 	db	16
   467  00FCC8  08                 	db	8
   468  00FCC9  04                 	db	4
   469  00FCCA  02                 	db	2
   470  00FCCB  3E                 	db	62
   471  00FCCC  51                 	db	81
   472  00FCCD  49                 	db	73
   473  00FCCE  45                 	db	69
   474  00FCCF  3E                 	db	62
   475  00FCD0  00                 	db	0
   476  00FCD1  42                 	db	66
   477  00FCD2  7F                 	db	127
   478  00FCD3  40                 	db	64
   479  00FCD4  00                 	db	0
   480  00FCD5  72                 	db	114
   481  00FCD6  49                 	db	73
   482  00FCD7  49                 	db	73
   483  00FCD8  49                 	db	73
   484  00FCD9  46                 	db	70
   485  00FCDA  21                 	db	33
   486  00FCDB  41                 	db	65
   487  00FCDC  49                 	db	73
   488  00FCDD  4D                 	db	77
   489  00FCDE  33                 	db	51
   490  00FCDF  18                 	db	24
   491  00FCE0  14                 	db	20
   492  00FCE1  12                 	db	18
   493  00FCE2  7F                 	db	127
   494  00FCE3  10                 	db	16
   495  00FCE4  27                 	db	39
   496  00FCE5  45                 	db	69
   497  00FCE6  45                 	db	69
   498  00FCE7  45                 	db	69
   499  00FCE8  39                 	db	57
   500  00FCE9  3C                 	db	60
   501  00FCEA  4A                 	db	74
   502  00FCEB  49                 	db	73
   503  00FCEC  49                 	db	73
   504  00FCED  31                 	db	49
   505  00FCEE  41                 	db	65
   506  00FCEF  21                 	db	33
   507  00FCF0  11                 	db	17
   508  00FCF1  09                 	db	9
   509  00FCF2  07                 	db	7
   510  00FCF3  36                 	db	54
   511  00FCF4  49                 	db	73
   512  00FCF5  49                 	db	73
   513  00FCF6  49                 	db	73
   514  00FCF7  36                 	db	54
   515  00FCF8  46                 	db	70
   516  00FCF9  49                 	db	73
   517  00FCFA  49                 	db	73
   518  00FCFB  29                 	db	41
   519  00FCFC  1E                 	db	30
   520  00FCFD  00                 	db	0
   521  00FCFE  00                 	db	0
   522  00FCFF  14                 	db	20
   523  00FD00  00                 	db	0
   524  00FD01  00                 	db	0
   525  00FD02  00                 	db	0
   526  00FD03  40                 	db	64
   527  00FD04  34                 	db	52
   528  00FD05  00                 	db	0
   529  00FD06  00                 	db	0
   530  00FD07  00                 	db	0
   531  00FD08  08                 	db	8
   532  00FD09  14                 	db	20
   533  00FD0A  22                 	db	34
   534  00FD0B  41                 	db	65
   535  00FD0C  14                 	db	20
   536  00FD0D  14                 	db	20
   537  00FD0E  14                 	db	20
   538  00FD0F  14                 	db	20
   539  00FD10  14                 	db	20
   540  00FD11  00                 	db	0
   541  00FD12  41                 	db	65
   542  00FD13  22                 	db	34
   543  00FD14  14                 	db	20
   544  00FD15  08                 	db	8
   545  00FD16  02                 	db	2
   546  00FD17  01                 	db	1
   547  00FD18  59                 	db	89
   548  00FD19  09                 	db	9
   549  00FD1A  06                 	db	6
   550  00FD1B  3E                 	db	62
   551  00FD1C  41                 	db	65
   552  00FD1D  5D                 	db	93
   553  00FD1E  59                 	db	89
   554  00FD1F  4E                 	db	78
   555  00FD20  7C                 	db	124
   556  00FD21  12                 	db	18
   557  00FD22  11                 	db	17
   558  00FD23  12                 	db	18
   559  00FD24  7C                 	db	124
   560  00FD25  7F                 	db	127
   561  00FD26  49                 	db	73
   562  00FD27  49                 	db	73
   563  00FD28  49                 	db	73
   564  00FD29  36                 	db	54
   565  00FD2A  3E                 	db	62
   566  00FD2B  41                 	db	65
   567  00FD2C  41                 	db	65
   568  00FD2D  41                 	db	65
   569  00FD2E  22                 	db	34
   570  00FD2F  7F                 	db	127
   571  00FD30  41                 	db	65
   572  00FD31  41                 	db	65
   573  00FD32  41                 	db	65
   574  00FD33  3E                 	db	62
   575  00FD34  7F                 	db	127
   576  00FD35  49                 	db	73
   577  00FD36  49                 	db	73
   578  00FD37  49                 	db	73
   579  00FD38  41                 	db	65
   580  00FD39  7F                 	db	127
   581  00FD3A  09                 	db	9
   582  00FD3B  09                 	db	9
   583  00FD3C  09                 	db	9
   584  00FD3D  01                 	db	1
   585  00FD3E  3E                 	db	62
   586  00FD3F  41                 	db	65
   587  00FD40  41                 	db	65
   588  00FD41  51                 	db	81
   589  00FD42  73                 	db	115
   590  00FD43  7F                 	db	127
   591  00FD44  08                 	db	8
   592  00FD45  08                 	db	8
   593  00FD46  08                 	db	8
   594  00FD47  7F                 	db	127
   595  00FD48  00                 	db	0
   596  00FD49  41                 	db	65
   597  00FD4A  7F                 	db	127
   598  00FD4B  41                 	db	65
   599  00FD4C  00                 	db	0
   600  00FD4D  20                 	db	32
   601  00FD4E  40                 	db	64
   602  00FD4F  41                 	db	65
   603  00FD50  3F                 	db	63
   604  00FD51  01                 	db	1
   605  00FD52  7F                 	db	127
   606  00FD53  08                 	db	8
   607  00FD54  14                 	db	20
   608  00FD55  22                 	db	34
   609  00FD56  41                 	db	65
   610  00FD57  7F                 	db	127
   611  00FD58  40                 	db	64
   612  00FD59  40                 	db	64
   613  00FD5A  40                 	db	64
   614  00FD5B  40                 	db	64
   615  00FD5C  7F                 	db	127
   616  00FD5D  02                 	db	2
   617  00FD5E  1C                 	db	28
   618  00FD5F  02                 	db	2
   619  00FD60  7F                 	db	127
   620  00FD61  7F                 	db	127
   621  00FD62  04                 	db	4
   622  00FD63  08                 	db	8
   623  00FD64  10                 	db	16
   624  00FD65  7F                 	db	127
   625  00FD66  3E                 	db	62
   626  00FD67  41                 	db	65
   627  00FD68  41                 	db	65
   628  00FD69  41                 	db	65
   629  00FD6A  3E                 	db	62
   630  00FD6B  7F                 	db	127
   631  00FD6C  09                 	db	9
   632  00FD6D  09                 	db	9
   633  00FD6E  09                 	db	9
   634  00FD6F  06                 	db	6
   635  00FD70  3E                 	db	62
   636  00FD71  41                 	db	65
   637  00FD72  51                 	db	81
   638  00FD73  21                 	db	33
   639  00FD74  5E                 	db	94
   640  00FD75  7F                 	db	127
   641  00FD76  09                 	db	9
   642  00FD77  19                 	db	25
   643  00FD78  29                 	db	41
   644  00FD79  46                 	db	70
   645  00FD7A                     __end_of_font:
   646                           	opt stack 0
   647  00FD7A                     _font2:
   648                           	opt stack 0
   649  00FD7A  26                 	db	38
   650  00FD7B  49                 	db	73
   651  00FD7C  49                 	db	73
   652  00FD7D  49                 	db	73
   653  00FD7E  32                 	db	50
   654  00FD7F  03                 	db	3
   655  00FD80  01                 	db	1
   656  00FD81  7F                 	db	127
   657  00FD82  01                 	db	1
   658  00FD83  03                 	db	3
   659  00FD84  3F                 	db	63
   660  00FD85  40                 	db	64
   661  00FD86  40                 	db	64
   662  00FD87  40                 	db	64
   663  00FD88  3F                 	db	63
   664  00FD89  1F                 	db	31
   665  00FD8A  20                 	db	32
   666  00FD8B  40                 	db	64
   667  00FD8C  20                 	db	32
   668  00FD8D  1F                 	db	31
   669  00FD8E  3F                 	db	63
   670  00FD8F  40                 	db	64
   671  00FD90  38                 	db	56
   672  00FD91  40                 	db	64
   673  00FD92  3F                 	db	63
   674  00FD93  63                 	db	99
   675  00FD94  14                 	db	20
   676  00FD95  08                 	db	8
   677  00FD96  14                 	db	20
   678  00FD97  63                 	db	99
   679  00FD98  03                 	db	3
   680  00FD99  04                 	db	4
   681  00FD9A  78                 	db	120
   682  00FD9B  04                 	db	4
   683  00FD9C  03                 	db	3
   684  00FD9D  61                 	db	97
   685  00FD9E  59                 	db	89
   686  00FD9F  49                 	db	73
   687  00FDA0  4D                 	db	77
   688  00FDA1  43                 	db	67
   689  00FDA2  00                 	db	0
   690  00FDA3  7F                 	db	127
   691  00FDA4  41                 	db	65
   692  00FDA5  41                 	db	65
   693  00FDA6  41                 	db	65
   694  00FDA7  02                 	db	2
   695  00FDA8  04                 	db	4
   696  00FDA9  08                 	db	8
   697  00FDAA  10                 	db	16
   698  00FDAB  20                 	db	32
   699  00FDAC  00                 	db	0
   700  00FDAD  41                 	db	65
   701  00FDAE  41                 	db	65
   702  00FDAF  41                 	db	65
   703  00FDB0  7F                 	db	127
   704  00FDB1  04                 	db	4
   705  00FDB2  02                 	db	2
   706  00FDB3  01                 	db	1
   707  00FDB4  02                 	db	2
   708  00FDB5  04                 	db	4
   709  00FDB6  40                 	db	64
   710  00FDB7  40                 	db	64
   711  00FDB8  40                 	db	64
   712  00FDB9  40                 	db	64
   713  00FDBA  40                 	db	64
   714  00FDBB  00                 	db	0
   715  00FDBC  03                 	db	3
   716  00FDBD  07                 	db	7
   717  00FDBE  08                 	db	8
   718  00FDBF  00                 	db	0
   719  00FDC0  20                 	db	32
   720  00FDC1  54                 	db	84
   721  00FDC2  54                 	db	84
   722  00FDC3  78                 	db	120
   723  00FDC4  40                 	db	64
   724  00FDC5  7F                 	db	127
   725  00FDC6  28                 	db	40
   726  00FDC7  44                 	db	68
   727  00FDC8  44                 	db	68
   728  00FDC9  38                 	db	56
   729  00FDCA  38                 	db	56
   730  00FDCB  44                 	db	68
   731  00FDCC  44                 	db	68
   732  00FDCD  44                 	db	68
   733  00FDCE  28                 	db	40
   734  00FDCF  38                 	db	56
   735  00FDD0  44                 	db	68
   736  00FDD1  44                 	db	68
   737  00FDD2  28                 	db	40
   738  00FDD3  7F                 	db	127
   739  00FDD4  38                 	db	56
   740  00FDD5  54                 	db	84
   741  00FDD6  54                 	db	84
   742  00FDD7  54                 	db	84
   743  00FDD8  18                 	db	24
   744  00FDD9  00                 	db	0
   745  00FDDA  08                 	db	8
   746  00FDDB  7E                 	db	126
   747  00FDDC  09                 	db	9
   748  00FDDD  02                 	db	2
   749  00FDDE  18                 	db	24
   750  00FDDF  A4                 	db	164
   751  00FDE0  A4                 	db	164
   752  00FDE1  9C                 	db	156
   753  00FDE2  78                 	db	120
   754  00FDE3  7F                 	db	127
   755  00FDE4  08                 	db	8
   756  00FDE5  04                 	db	4
   757  00FDE6  04                 	db	4
   758  00FDE7  78                 	db	120
   759  00FDE8  00                 	db	0
   760  00FDE9  44                 	db	68
   761  00FDEA  7D                 	db	125
   762  00FDEB  40                 	db	64
   763  00FDEC  00                 	db	0
   764  00FDED  20                 	db	32
   765  00FDEE  40                 	db	64
   766  00FDEF  40                 	db	64
   767  00FDF0  3D                 	db	61
   768  00FDF1  00                 	db	0
   769  00FDF2  7F                 	db	127
   770  00FDF3  10                 	db	16
   771  00FDF4  28                 	db	40
   772  00FDF5  44                 	db	68
   773  00FDF6  00                 	db	0
   774  00FDF7  00                 	db	0
   775  00FDF8  41                 	db	65
   776  00FDF9  7F                 	db	127
   777  00FDFA  40                 	db	64
   778  00FDFB  00                 	db	0
   779  00FDFC  7C                 	db	124
   780  00FDFD  04                 	db	4
   781  00FDFE  78                 	db	120
   782  00FDFF  04                 	db	4
   783  00FE00  78                 	db	120
   784  00FE01  7C                 	db	124
   785  00FE02  08                 	db	8
   786  00FE03  04                 	db	4
   787  00FE04  04                 	db	4
   788  00FE05  78                 	db	120
   789  00FE06  38                 	db	56
   790  00FE07  44                 	db	68
   791  00FE08  44                 	db	68
   792  00FE09  44                 	db	68
   793  00FE0A  38                 	db	56
   794  00FE0B  FC                 	db	252
   795  00FE0C  18                 	db	24
   796  00FE0D  24                 	db	36
   797  00FE0E  24                 	db	36
   798  00FE0F  18                 	db	24
   799  00FE10  18                 	db	24
   800  00FE11  24                 	db	36
   801  00FE12  24                 	db	36
   802  00FE13  18                 	db	24
   803  00FE14  FC                 	db	252
   804  00FE15  7C                 	db	124
   805  00FE16  08                 	db	8
   806  00FE17  04                 	db	4
   807  00FE18  04                 	db	4
   808  00FE19  08                 	db	8
   809  00FE1A  48                 	db	72
   810  00FE1B  54                 	db	84
   811  00FE1C  54                 	db	84
   812  00FE1D  54                 	db	84
   813  00FE1E  24                 	db	36
   814  00FE1F  04                 	db	4
   815  00FE20  04                 	db	4
   816  00FE21  3F                 	db	63
   817  00FE22  44                 	db	68
   818  00FE23  24                 	db	36
   819  00FE24  3C                 	db	60
   820  00FE25  40                 	db	64
   821  00FE26  40                 	db	64
   822  00FE27  20                 	db	32
   823  00FE28  7C                 	db	124
   824  00FE29  1C                 	db	28
   825  00FE2A  20                 	db	32
   826  00FE2B  40                 	db	64
   827  00FE2C  20                 	db	32
   828  00FE2D  1C                 	db	28
   829  00FE2E  3C                 	db	60
   830  00FE2F  40                 	db	64
   831  00FE30  30                 	db	48
   832  00FE31  40                 	db	64
   833  00FE32  3C                 	db	60
   834  00FE33  44                 	db	68
   835  00FE34  28                 	db	40
   836  00FE35  10                 	db	16
   837  00FE36  28                 	db	40
   838  00FE37  44                 	db	68
   839  00FE38  4C                 	db	76
   840  00FE39  90                 	db	144
   841  00FE3A  90                 	db	144
   842  00FE3B  90                 	db	144
   843  00FE3C  7C                 	db	124
   844  00FE3D  44                 	db	68
   845  00FE3E  64                 	db	100
   846  00FE3F  54                 	db	84
   847  00FE40  4C                 	db	76
   848  00FE41  44                 	db	68
   849  00FE42  00                 	db	0
   850  00FE43  08                 	db	8
   851  00FE44  36                 	db	54
   852  00FE45  41                 	db	65
   853  00FE46  00                 	db	0
   854  00FE47  00                 	db	0
   855  00FE48  00                 	db	0
   856  00FE49  77                 	db	119
   857  00FE4A  00                 	db	0
   858  00FE4B  00                 	db	0
   859  00FE4C  00                 	db	0
   860  00FE4D  41                 	db	65
   861  00FE4E  36                 	db	54
   862  00FE4F  08                 	db	8
   863  00FE50  00                 	db	0
   864  00FE51  02                 	db	2
   865  00FE52  01                 	db	1
   866  00FE53  02                 	db	2
   867  00FE54  04                 	db	4
   868  00FE55  02                 	db	2
   869  00FE56                     __end_of_font2:
   870                           	opt stack 0
   871  00FE56                     _dpowers:
   872                           	opt stack 0
   873  00FE56  0001               	dw	1
   874  00FE58  000A               	dw	10
   875  00FE5A  0064               	dw	100
   876  00FE5C  03E8               	dw	1000
   877  00FE5E  2710               	dw	10000
   878  00FE60                     __end_of_dpowers:
   879                           	opt stack 0
   880  00FE60                     _hexpowers:
   881                           	opt stack 0
   882  00FE60  0001               	dw	1
   883  00FE62  0010               	dw	16
   884  00FE64  0100               	dw	256
   885  00FE66  1000               	dw	4096
   886  00FE68                     __end_of_hexpowers:
   887                           	opt stack 0
   888  0000                     _ADCON0	set	4034
   889  0000                     _ADCON0bits	set	4034
   890  0000                     _ADCON1	set	4033
   891  0000                     _ADCON2	set	4032
   892  0000                     _ADRESH	set	4036
   893  0000                     _ADRESL	set	4035
   894  0000                     _CCP1CON	set	4029
   895  0000                     _CCP2CON	set	4026
   896  0000                     _CCPR1L	set	4030
   897  0000                     _CCPR2L	set	4027
   898  0000                     _INTCON2bits	set	4081
   899  0000                     _INTCON3bits	set	4080
   900  0000                     _INTCONbits	set	4082
   901  0000                     _OSCCON	set	4051
   902  0000                     _PIE1bits	set	3997
   903  0000                     _PIR1bits	set	3998
   904  0000                     _PORTA	set	3968
   905  0000                     _PORTBbits	set	3969
   906  0000                     _PORTDbits	set	3971
   907  0000                     _PORTE	set	3972
   908  0000                     _PORTEbits	set	3972
   909  0000                     _PR2	set	4043
   910  0000                     _RCSTA	set	4011
   911  0000                     _RCSTAbits	set	4011
   912  0000                     _SPBRG	set	4015
   913  0000                     _SPBRGH	set	4016
   914  0000                     _SSPBUF	set	4041
   915  0000                     _SSPCON1	set	4038
   916  0000                     _SSPSTAT	set	4039
   917  0000                     _SSPSTATbits	set	4039
   918  0000                     _T0CON	set	4053
   919  0000                     _T0CONbits	set	4053
   920  0000                     _T1CON	set	4045
   921  0000                     _T1CONbits	set	4045
   922  0000                     _T2CON	set	4042
   923  0000                     _T3CON	set	4017
   924  0000                     _TMR0H	set	4055
   925  0000                     _TMR0L	set	4054
   926  0000                     _TMR1H	set	4047
   927  0000                     _TMR1L	set	4046
   928  0000                     _TMR3L	set	4018
   929  0000                     _TRISA	set	3986
   930  0000                     _TRISB	set	3987
   931  0000                     _TRISC	set	3988
   932  0000                     _TRISCbits	set	3988
   933  0000                     _TRISD	set	3989
   934  0000                     _TRISDbits	set	3989
   935  0000                     _TRISE	set	3990
   936  0000                     _TXREG	set	4013
   937  0000                     _TXSTA	set	4012
   938  0000                     _TXSTAbits	set	4012
   939  0000                     _RBPU	set	32655
   940  0000                     _TRMT	set	32097
   941  00FE68                     STR_1:
   942  00FE68  49                 	db	73	;'I'
   943  00FE69  4E                 	db	78	;'N'
   944  00FE6A  54                 	db	84	;'T'
   945  00FE6B  32                 	db	50	;'2'
   946  00FE6C  20                 	db	32
   947  00FE6D  69                 	db	105	;'i'
   948  00FE6E  6E                 	db	110	;'n'
   949  00FE6F  74                 	db	116	;'t'
   950  00FE70  65                 	db	101	;'e'
   951  00FE71  72                 	db	114	;'r'
   952  00FE72  72                 	db	114	;'r'
   953  00FE73  75                 	db	117	;'u'
   954  00FE74  70                 	db	112	;'p'
   955  00FE75  74                 	db	116	;'t'
   956  00FE76  20                 	db	32
   957  00FE77  70                 	db	112	;'p'
   958  00FE78  69                 	db	105	;'i'
   959  00FE79  6E                 	db	110	;'n'
   960  00FE7A  20                 	db	32
   961  00FE7B  64                 	db	100	;'d'
   962  00FE7C  65                 	db	101	;'e'
   963  00FE7D  74                 	db	116	;'t'
   964  00FE7E  65                 	db	101	;'e'
   965  00FE7F  63                 	db	99	;'c'
   966  00FE80  74                 	db	116	;'t'
   967  00FE81  65                 	db	101	;'e'
   968  00FE82  64                 	db	100	;'d'
   969  00FE83  20                 	db	32
   970  00FE84  25                 	db	37
   971  00FE85  64                 	db	100	;'d'
   972  00FE86  0D                 	db	13
   973  00FE87  0A                 	db	10
   974  00FE88  00                 	db	0
   975  00FE89                     STR_2:
   976  00FE89  25                 	db	37
   977  00FE8A  30                 	db	48	;'0'
   978  00FE8B  32                 	db	50	;'2'
   979  00FE8C  78                 	db	120	;'x'
   980  00FE8D  3A                 	db	58	;':'
   981  00FE8E  25                 	db	37
   982  00FE8F  30                 	db	48	;'0'
   983  00FE90  32                 	db	50	;'2'
   984  00FE91  78                 	db	120	;'x'
   985  00FE92  3A                 	db	58	;':'
   986  00FE93  25                 	db	37
   987  00FE94  30                 	db	48	;'0'
   988  00FE95  32                 	db	50	;'2'
   989  00FE96  78                 	db	120	;'x'
   990  00FE97  20                 	db	32
   991  00FE98  25                 	db	37
   992  00FE99  30                 	db	48	;'0'
   993  00FE9A  32                 	db	50	;'2'
   994  00FE9B  78                 	db	120	;'x'
   995  00FE9C  2F                 	db	47
   996  00FE9D  25                 	db	37
   997  00FE9E  30                 	db	48	;'0'
   998  00FE9F  32                 	db	50	;'2'
   999  00FEA0  78                 	db	120	;'x'
  1000  00FEA1  2F                 	db	47
  1001  00FEA2  25                 	db	37
  1002  00FEA3  30                 	db	48	;'0'
  1003  00FEA4  32                 	db	50	;'2'
  1004  00FEA5  78                 	db	120	;'x'
  1005  00FEA6  00                 	db	0
  1006  00FEA7                     STR_4:
  1007  00FEA7  61                 	db	97	;'a'
  1008  00FEA8  6C                 	db	108	;'l'
  1009  00FEA9  61                 	db	97	;'a'
  1010  00FEAA  72                 	db	114	;'r'
  1011  00FEAB  6D                 	db	109	;'m'
  1012  00FEAC  20                 	db	32
  1013  00FEAD  3D                 	db	61	;'='
  1014  00FEAE  20                 	db	32
  1015  00FEAF  25                 	db	37
  1016  00FEB0  64                 	db	100	;'d'
  1017  00FEB1  20                 	db	32
  1018  00FEB2  48                 	db	72	;'H'
  1019  00FEB3  65                 	db	101	;'e'
  1020  00FEB4  61                 	db	97	;'a'
  1021  00FEB5  74                 	db	116	;'t'
  1022  00FEB6  65                 	db	101	;'e'
  1023  00FEB7  72                 	db	114	;'r'
  1024  00FEB8  20                 	db	32
  1025  00FEB9  3D                 	db	61	;'='
  1026  00FEBA  20                 	db	32
  1027  00FEBB  25                 	db	37
  1028  00FEBC  64                 	db	100	;'d'
  1029  00FEBD  20                 	db	32
  1030  00FEBE  00                 	db	0
  1031  00FEBF                     STR_38:
  1032  00FEBF  43                 	db	67	;'C'
  1033  00FEC0  61                 	db	97	;'a'
  1034  00FEC1  6E                 	db	110	;'n'
  1035  00FEC2  6E                 	db	110	;'n'
  1036  00FEC3  6F                 	db	111	;'o'
  1037  00FEC4  74                 	db	116	;'t'
  1038  00FEC5  20                 	db	32
  1039  00FEC6  66                 	db	102	;'f'
  1040  00FEC7  69                 	db	105	;'i'
  1041  00FEC8  6E                 	db	110	;'n'
  1042  00FEC9  64                 	db	100	;'d'
  1043  00FECA  20                 	db	32
  1044  00FECB  62                 	db	98	;'b'
  1045  00FECC  75                 	db	117	;'u'
  1046  00FECD  74                 	db	116	;'t'
  1047  00FECE  74                 	db	116	;'t'
  1048  00FECF  6F                 	db	111	;'o'
  1049  00FED0  6E                 	db	110	;'n'
  1050  00FED1  20                 	db	32
  1051  00FED2  0D                 	db	13
  1052  00FED3  0A                 	db	10
  1053  00FED4  00                 	db	0
  1054  00FED5                     STR_6:
  1055  00FED5  20                 	db	32
  1056  00FED6  45                 	db	69	;'E'
  1057  00FED7  43                 	db	67	;'C'
  1058  00FED8  45                 	db	69	;'E'
  1059  00FED9  33                 	db	51	;'3'
  1060  00FEDA  33                 	db	51	;'3'
  1061  00FEDB  30                 	db	48	;'0'
  1062  00FEDC  31                 	db	49	;'1'
  1063  00FEDD  4C                 	db	76	;'L'
  1064  00FEDE  20                 	db	32
  1065  00FEDF  46                 	db	70	;'F'
  1066  00FEE0  27                 	db	39
  1067  00FEE1  32                 	db	50	;'2'
  1068  00FEE2  31                 	db	49	;'1'
  1069  00FEE3  20                 	db	32
  1070  00FEE4  46                 	db	70	;'F'
  1071  00FEE5  69                 	db	105	;'i'
  1072  00FEE6  6E                 	db	110	;'n'
  1073  00FEE7  61                 	db	97	;'a'
  1074  00FEE8  6C                 	db	108	;'l'
  1075  00FEE9  00                 	db	0
  1076  00FEEA  00                 	db	0
  1077  00FEEB                     STR_33:
  1078  00FEEB  45                 	db	69	;'E'
  1079  00FEEC  43                 	db	67	;'C'
  1080  00FEED  45                 	db	69	;'E'
  1081  00FEEE  33                 	db	51	;'3'
  1082  00FEEF  33                 	db	51	;'3'
  1083  00FEF0  30                 	db	48	;'0'
  1084  00FEF1  31                 	db	49	;'1'
  1085  00FEF2  4C                 	db	76	;'L'
  1086  00FEF3  20                 	db	32
  1087  00FEF4  46                 	db	70	;'F'
  1088  00FEF5  3B                 	db	59	;';'
  1089  00FEF6  32                 	db	50	;'2'
  1090  00FEF7  31                 	db	49	;'1'
  1091  00FEF8  20                 	db	32
  1092  00FEF9  46                 	db	70	;'F'
  1093  00FEFA  69                 	db	105	;'i'
  1094  00FEFB  6E                 	db	110	;'n'
  1095  00FEFC  61                 	db	97	;'a'
  1096  00FEFD  6C                 	db	108	;'l'
  1097  00FEFE  00                 	db	0
  1098  00FEFF  00                 	db	0
  1099  00FF00                     STR_3:
  1100  00FF00  20                 	db	32
  1101  00FF01  54                 	db	84	;'T'
  1102  00FF02  65                 	db	101	;'e'
  1103  00FF03  6D                 	db	109	;'m'
  1104  00FF04  70                 	db	112	;'p'
  1105  00FF05  20                 	db	32
  1106  00FF06  3D                 	db	61	;'='
  1107  00FF07  20                 	db	32
  1108  00FF08  25                 	db	37
  1109  00FF09  64                 	db	100	;'d'
  1110  00FF0A  20                 	db	32
  1111  00FF0B  43                 	db	67	;'C'
  1112  00FF0C  20                 	db	32
  1113  00FF0D  3D                 	db	61	;'='
  1114  00FF0E  20                 	db	32
  1115  00FF0F  25                 	db	37
  1116  00FF10  64                 	db	100	;'d'
  1117  00FF11  20                 	db	32
  1118  00FF12  46                 	db	70	;'F'
  1119  00FF13  20                 	db	32
  1120  00FF14  00                 	db	0
  1121  00FF15                     STR_24:
  1122  00FF15  45                 	db	69	;'E'
  1123  00FF16  43                 	db	67	;'C'
  1124  00FF17  45                 	db	69	;'E'
  1125  00FF18  33                 	db	51	;'3'
  1126  00FF19  33                 	db	51	;'3'
  1127  00FF1A  30                 	db	48	;'0'
  1128  00FF1B  31                 	db	49	;'1'
  1129  00FF1C  4C                 	db	76	;'L'
  1130  00FF1D  20                 	db	32
  1131  00FF1E  46                 	db	70	;'F'
  1132  00FF1F  27                 	db	39
  1133  00FF20  32                 	db	50	;'2'
  1134  00FF21  31                 	db	49	;'1'
  1135  00FF22  20                 	db	32
  1136  00FF23  46                 	db	70	;'F'
  1137  00FF24  69                 	db	105	;'i'
  1138  00FF25  6E                 	db	110	;'n'
  1139  00FF26  61                 	db	97	;'a'
  1140  00FF27  6C                 	db	108	;'l'
  1141  00FF28  00                 	db	0
  1142  00FF29                     STR_5:
  1143  00FF29  52                 	db	82	;'R'
  1144  00FF2A  50                 	db	80	;'P'
  1145  00FF2B  4D                 	db	77	;'M'
  1146  00FF2C  20                 	db	32
  1147  00FF2D  3D                 	db	61	;'='
  1148  00FF2E  20                 	db	32
  1149  00FF2F  25                 	db	37
  1150  00FF30  64                 	db	100	;'d'
  1151  00FF31  20                 	db	32
  1152  00FF32  20                 	db	32
  1153  00FF33  64                 	db	100	;'d'
  1154  00FF34  63                 	db	99	;'c'
  1155  00FF35  20                 	db	32
  1156  00FF36  3D                 	db	61	;'='
  1157  00FF37  20                 	db	32
  1158  00FF38  25                 	db	37
  1159  00FF39  64                 	db	100	;'d'
  1160  00FF3A  0D                 	db	13
  1161  00FF3B  0A                 	db	10
  1162  00FF3C  00                 	db	0
  1163  00FF3D                     STR_39:
  1164  00FF3D  30                 	db	48	;'0'
  1165  00FF3E  31                 	db	49	;'1'
  1166  00FF3F  32                 	db	50	;'2'
  1167  00FF40  33                 	db	51	;'3'
  1168  00FF41  34                 	db	52	;'4'
  1169  00FF42  35                 	db	53	;'5'
  1170  00FF43  36                 	db	54	;'6'
  1171  00FF44  37                 	db	55	;'7'
  1172  00FF45  38                 	db	56	;'8'
  1173  00FF46  39                 	db	57	;'9'
  1174  00FF47  61                 	db	97	;'a'
  1175  00FF48  62                 	db	98	;'b'
  1176  00FF49  63                 	db	99	;'c'
  1177  00FF4A  64                 	db	100	;'d'
  1178  00FF4B  65                 	db	101	;'e'
  1179  00FF4C  66                 	db	102	;'f'
  1180  00FF4D  00                 	db	0
  1181  00FF4E                     STR_37:
  1182  00FF4E  4E                 	db	78	;'N'
  1183  00FF4F  45                 	db	69	;'E'
  1184  00FF50  43                 	db	67	;'C'
  1185  00FF51  5F                 	db	95	;'_'
  1186  00FF52  43                 	db	67	;'C'
  1187  00FF53  6F                 	db	111	;'o'
  1188  00FF54  64                 	db	100	;'d'
  1189  00FF55  65                 	db	101	;'e'
  1190  00FF56  20                 	db	32
  1191  00FF57  3D                 	db	61	;'='
  1192  00FF58  20                 	db	32
  1193  00FF59  25                 	db	37
  1194  00FF5A  78                 	db	120	;'x'
  1195  00FF5B  0D                 	db	13
  1196  00FF5C  0A                 	db	10
  1197  00FF5D  00                 	db	0
  1198  00FF5E                     STR_32:
  1199  00FF5E  53                 	db	83	;'S'
  1200  00FF5F  65                 	db	101	;'e'
  1201  00FF60  74                 	db	116	;'t'
  1202  00FF61  20                 	db	32
  1203  00FF62  48                 	db	72	;'H'
  1204  00FF63  65                 	db	101	;'e'
  1205  00FF64  61                 	db	97	;'a'
  1206  00FF65  74                 	db	116	;'t'
  1207  00FF66  65                 	db	101	;'e'
  1208  00FF67  72                 	db	114	;'r'
  1209  00FF68  20                 	db	32
  1210  00FF69  54                 	db	84	;'T'
  1211  00FF6A  65                 	db	101	;'e'
  1212  00FF6B  6D                 	db	109	;'m'
  1213  00FF6C  70                 	db	112	;'p'
  1214  00FF6D  00                 	db	0
  1215  00FF6E                     STR_7:
  1216  00FF6E  54                 	db	84	;'T'
  1217  00FF6F  65                 	db	101	;'e'
  1218  00FF70  6D                 	db	109	;'m'
  1219  00FF71  70                 	db	112	;'p'
  1220  00FF72  65                 	db	101	;'e'
  1221  00FF73  72                 	db	114	;'r'
  1222  00FF74  61                 	db	97	;'a'
  1223  00FF75  74                 	db	116	;'t'
  1224  00FF76  75                 	db	117	;'u'
  1225  00FF77  72                 	db	114	;'r'
  1226  00FF78  65                 	db	101	;'e'
  1227  00FF79  3A                 	db	58	;':'
  1228  00FF7A  00                 	db	0
  1229  00FF7B                     STR_14:
  1230  00FF7B  48                 	db	72	;'H'
  1231  00FF7C  54                 	db	84	;'T'
  1232  00FF7D  52                 	db	82	;'R'
  1233  00FF7E  20                 	db	32
  1234  00FF7F  53                 	db	83	;'S'
  1235  00FF80  65                 	db	101	;'e'
  1236  00FF81  74                 	db	116	;'t'
  1237  00FF82  20                 	db	32
  1238  00FF83  54                 	db	84	;'T'
  1239  00FF84  65                 	db	101	;'e'
  1240  00FF85  6D                 	db	109	;'m'
  1241  00FF86  70                 	db	112	;'p'
  1242  00FF87  00                 	db	0
  1243  00FF88                     STR_34:
  1244  00FF88  54                 	db	84	;'T'
  1245  00FF89  69                 	db	105	;'i'
  1246  00FF8A  6D                 	db	109	;'m'
  1247  00FF8B  65                 	db	101	;'e'
  1248  00FF8C  20                 	db	32
  1249  00FF8D  53                 	db	83	;'S'
  1250  00FF8E  65                 	db	101	;'e'
  1251  00FF8F  74                 	db	116	;'t'
  1252  00FF90  75                 	db	117	;'u'
  1253  00FF91  70                 	db	112	;'p'
  1254  00FF92  00                 	db	0
  1255  00FF93  00                 	db	0
  1256  00FF94                     STR_30:
  1257  00FF94  20                 	db	32
  1258  00FF95  20                 	db	32
  1259  00FF96  48                 	db	72	;'H'
  1260  00FF97  65                 	db	101	;'e'
  1261  00FF98  61                 	db	97	;'a'
  1262  00FF99  74                 	db	116	;'t'
  1263  00FF9A  65                 	db	101	;'e'
  1264  00FF9B  72                 	db	114	;'r'
  1265  00FF9C  00                 	db	0
  1266  00FF9D  20                 	db	32
  1267  00FF9E  00                 	db	0
  1268  00FF9F                     STR_28:
  1269  00FF9F  25                 	db	37
  1270  00FFA0  78                 	db	120	;'x'
  1271  00FFA1  3A                 	db	58	;':'
  1272  00FFA2  25                 	db	37
  1273  00FFA3  78                 	db	120	;'x'
  1274  00FFA4  3A                 	db	58	;':'
  1275  00FFA5  25                 	db	37
  1276  00FFA6  78                 	db	120	;'x'
  1277  00FFA7  0D                 	db	13
  1278  00FFA8  0A                 	db	10
  1279  00FFA9  00                 	db	0
  1280  00FFAA                     STR_12:
  1281  00FFAA  41                 	db	65	;'A'
  1282  00FFAB  6C                 	db	108	;'l'
  1283  00FFAC  61                 	db	97	;'a'
  1284  00FFAD  72                 	db	114	;'r'
  1285  00FFAE  6D                 	db	109	;'m'
  1286  00FFAF  20                 	db	32
  1287  00FFB0  54                 	db	84	;'T'
  1288  00FFB1  69                 	db	105	;'i'
  1289  00FFB2  6D                 	db	109	;'m'
  1290  00FFB3  65                 	db	101	;'e'
  1291  00FFB4  00                 	db	0
  1292  00FFB5                     STR_31:
  1293  00FFB5  20                 	db	32
  1294  00FFB6  20                 	db	32
  1295  00FFB7  53                 	db	83	;'S'
  1296  00FFB8  65                 	db	101	;'e'
  1297  00FFB9  74                 	db	116	;'t'
  1298  00FFBA  75                 	db	117	;'u'
  1299  00FFBB  70                 	db	112	;'p'
  1300  00FFBC  00                 	db	0
  1301  00FFBD  20                 	db	32
  1302  00FFBE  00                 	db	0
  1303  00FFBF                     STR_13:
  1304  00FFBF  41                 	db	65	;'A'
  1305  00FFC0  6C                 	db	108	;'l'
  1306  00FFC1  61                 	db	97	;'a'
  1307  00FFC2  72                 	db	114	;'r'
  1308  00FFC3  6D                 	db	109	;'m'
  1309  00FFC4  20                 	db	32
  1310  00FFC5  53                 	db	83	;'S'
  1311  00FFC6  57                 	db	87	;'W'
  1312  00FFC7  00                 	db	0
  1313  00FFC8                     STR_25:
  1314  00FFC8  20                 	db	32
  1315  00FFC9  20                 	db	32
  1316  00FFCA  41                 	db	65	;'A'
  1317  00FFCB  6C                 	db	108	;'l'
  1318  00FFCC  61                 	db	97	;'a'
  1319  00FFCD  72                 	db	114	;'r'
  1320  00FFCE  6D                 	db	109	;'m'
  1321  00FFCF  00                 	db	0
  1322  00FFD0                     STR_26:
  1323  00FFD0  20                 	db	32
  1324  00FFD1  20                 	db	32
  1325  00FFD2  53                 	db	83	;'S'
  1326  00FFD3  65                 	db	101	;'e'
  1327  00FFD4  74                 	db	116	;'t'
  1328  00FFD5  75                 	db	117	;'u'
  1329  00FFD6  70                 	db	112	;'p'
  1330  00FFD7  00                 	db	0
  1331  00FFD8                     STR_15:
  1332  00FFD8  48                 	db	72	;'H'
  1333  00FFD9  54                 	db	84	;'T'
  1334  00FFDA  52                 	db	82	;'R'
  1335  00FFDB  20                 	db	32
  1336  00FFDC  53                 	db	83	;'S'
  1337  00FFDD  57                 	db	87	;'W'
  1338  00FFDE  00                 	db	0
  1339  00FFDF                     STR_11:
  1340  00FFDF  44                 	db	68	;'D'
  1341  00FFE0  61                 	db	97	;'a'
  1342  00FFE1  74                 	db	116	;'t'
  1343  00FFE2  65                 	db	101	;'e'
  1344  00FFE3  00                 	db	0
  1345  00FFE4                     STR_18:
  1346  00FFE4  56                 	db	86	;'V'
  1347  00FFE5  6F                 	db	111	;'o'
  1348  00FFE6  6C                 	db	108	;'l'
  1349  00FFE7  74                 	db	116	;'t'
  1350  00FFE8  00                 	db	0
  1351  00FFE9                     STR_20:
  1352  00FFE9  4F                 	db	79	;'O'
  1353  00FFEA  4E                 	db	78	;'N'
  1354  00FFEB  20                 	db	32
  1355  00FFEC  00                 	db	0
  1356  00FFED                     STR_21:
  1357  00FFED  4F                 	db	79	;'O'
  1358  00FFEE  46                 	db	70	;'F'
  1359  00FFEF  46                 	db	70	;'F'
  1360  00FFF0  00                 	db	0
  1361  00FFF1                     STR_19:
  1362  00FFF1  52                 	db	82	;'R'
  1363  00FFF2  50                 	db	80	;'P'
  1364  00FFF3  4D                 	db	77	;'M'
  1365  00FFF4  00                 	db	0
  1366  00FFF5                     STR_8:
  1367  00FFF5  43                 	db	67	;'C'
  1368  00FFF6  2F                 	db	47
  1369  00FFF7  00                 	db	0
  1370  00FFF8                     STR_16:
  1371  00FFF8  44                 	db	68	;'D'
  1372  00FFF9  43                 	db	67	;'C'
  1373  00FFFA  00                 	db	0
  1374  00FFFB                     STR_17:
  1375  00FFFB  52                 	db	82	;'R'
  1376  00FFFC  4D                 	db	77	;'M'
  1377  00FFFD  00                 	db	0
  1378  0000                     
  1379                           ; #config settings
  1380  00FFFE  00                 	db	0	; dummy byte at the end
  1381  0000                     
  1382                           	psect	cinit
  1383  003FB6                     __pcinit:
  1384                           	opt stack 0
  1385  003FB6                     start_initialization:
  1386                           	opt stack 0
  1387  003FB6                     __initialization:
  1388                           	opt stack 0
  1389                           
  1390                           ; Clear objects allocated to BANK0 (22 bytes)
  1391  003FB6  EE00  F0EA         	lfsr	0,__pbssBANK0
  1392  003FBA  0E16               	movlw	22
  1393  003FBC                     clear_0:
  1394  003FBC  6AEE               	clrf	postinc0,c
  1395  003FBE  06E8               	decf	wreg,f,c
  1396  003FC0  E1FD               	bnz	clear_0
  1397                           
  1398                           ; Clear objects allocated to COMRAM (42 bytes)
  1399  003FC2  EE00  F02D         	lfsr	0,__pbssCOMRAM
  1400  003FC6  0E2A               	movlw	42
  1401  003FC8                     clear_1:
  1402  003FC8  6AEE               	clrf	postinc0,c
  1403  003FCA  06E8               	decf	wreg,f,c
  1404  003FCC  E1FD               	bnz	clear_1
  1405                           
  1406                           ; Initialize objects allocated to BANK1 (88 bytes)
  1407                           ; load TBLPTR registers with __pidataBANK1
  1408  003FCE  0E26               	movlw	low __pidataBANK1
  1409  003FD0  6EF6               	movwf	tblptrl,c
  1410  003FD2  0E44               	movlw	high __pidataBANK1
  1411  003FD4  6EF7               	movwf	tblptrh,c
  1412  003FD6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1413  003FD8  6EF8               	movwf	tblptru,c
  1414  003FDA  EE01  F000         	lfsr	0,__pdataBANK1
  1415  003FDE  EE10 F058          	lfsr	1,88
  1416  003FE2                     copy_data0:
  1417  003FE2  0009               	tblrd		*+
  1418  003FE4  CFF5 FFEE          	movff	tablat,postinc0
  1419  003FE8  50E5               	movf	postdec1,w,c
  1420  003FEA  50E1               	movf	fsr1l,w,c
  1421  003FEC  E1FA               	bnz	copy_data0
  1422                           
  1423                           ; Initialize objects allocated to BANK0 (77 bytes)
  1424                           ; load TBLPTR registers with __pidataBANK0
  1425  003FEE  0ED2               	movlw	low __pidataBANK0
  1426  003FF0  6EF6               	movwf	tblptrl,c
  1427  003FF2  0E45               	movlw	high __pidataBANK0
  1428  003FF4  6EF7               	movwf	tblptrh,c
  1429  003FF6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1430  003FF8  6EF8               	movwf	tblptru,c
  1431  003FFA  EE00  F080         	lfsr	0,__pdataBANK0
  1432  003FFE  EE10 F04D          	lfsr	1,77
  1433  004002                     copy_data1:
  1434  004002  0009               	tblrd		*+
  1435  004004  CFF5 FFEE          	movff	tablat,postinc0
  1436  004008  50E5               	movf	postdec1,w,c
  1437  00400A  50E1               	movf	fsr1l,w,c
  1438  00400C  E1FA               	bnz	copy_data1
  1439                           
  1440                           ; Initialize objects allocated to COMRAM (1 bytes)
  1441                           ; load TBLPTR registers with __pidataCOMRAM
  1442  00400E  0E3A               	movlw	low __pidataCOMRAM
  1443  004010  6EF6               	movwf	tblptrl,c
  1444  004012  0E4E               	movlw	high __pidataCOMRAM
  1445  004014  6EF7               	movwf	tblptrh,c
  1446  004016  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1447  004018  6EF8               	movwf	tblptru,c
  1448  00401A  0009               	tblrd		*+	;fetch initializer
  1449  00401C  CFF5 F057          	movff	tablat,__pdataCOMRAM
  1450  004020                     end_of_initialization:
  1451                           	opt stack 0
  1452  004020                     __end_of__initialization:
  1453                           	opt stack 0
  1454  004020  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1455  004022  6EF8               	movwf	tblptru,c
  1456  004024  0100               	movlb	0
  1457  004026  EF06  F00D         	goto	_main	;jump to C main() function
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           postdec1	equ	0xFE5
  1465                           fsr1l	equ	0xFE1
  1466                           
  1467                           	psect	bssCOMRAM
  1468  00002D                     __pbssCOMRAM:
  1469                           	opt stack 0
  1470  00002D                     _Nec_code:
  1471                           	opt stack 0
  1472  00002D                     	ds	4
  1473  000031                     _volt:
  1474                           	opt stack 0
  1475  000031                     	ds	3
  1476  000034                     _DS1621_tempF:
  1477                           	opt stack 0
  1478  000034                     	ds	2
  1479  000036                     _MATCHED:
  1480                           	opt stack 0
  1481  000036                     	ds	2
  1482  000038                     _Time_Elapsed:
  1483                           	opt stack 0
  1484  000038                     	ds	2
  1485  00003A                     _alarm_mode:
  1486                           	opt stack 0
  1487  00003A                     	ds	2
  1488  00003C                     _color:
  1489                           	opt stack 0
  1490  00003C                     	ds	2
  1491  00003E                     _nec_ok:
  1492                           	opt stack 0
  1493  00003E                     	ds	2
  1494  000040                     _rps:
  1495                           	opt stack 0
  1496  000040                     	ds	2
  1497  000042                     _txt:
  1498                           	opt stack 0
  1499  000042                     	ds	2
  1500  000044                     _FAN:
  1501                           	opt stack 0
  1502  000044                     	ds	1
  1503  000045                     _HEATER:
  1504                           	opt stack 0
  1505  000045                     	ds	1
  1506  000046                     _INT1_flag:
  1507                           	opt stack 0
  1508  000046                     	ds	1
  1509  000047                     _In_Alarm_Time_Setup:
  1510                           	opt stack 0
  1511  000047                     	ds	1
  1512  000048                     _In_Heater_Temp_Setup:
  1513                           	opt stack 0
  1514  000048                     	ds	1
  1515  000049                     _In_Time_Setup:
  1516                           	opt stack 0
  1517  000049                     	ds	1
  1518  00004A                     _Nec_code1:
  1519                           	opt stack 0
  1520  00004A                     	ds	1
  1521  00004B                     _Nec_state:
  1522                           	opt stack 0
  1523  00004B                     	ds	1
  1524  00004C                     _Select_Alarm_Field:
  1525                           	opt stack 0
  1526  00004C                     	ds	1
  1527  00004D                     _Select_Heater_Temp_Field:
  1528                           	opt stack 0
  1529  00004D                     	ds	1
  1530  00004E                     __tft_type:
  1531                           	opt stack 0
  1532  00004E                     	ds	1
  1533  00004F                     _alarm_date:
  1534                           	opt stack 0
  1535  00004F                     	ds	1
  1536  000050                     _alarm_hour:
  1537                           	opt stack 0
  1538  000050                     	ds	1
  1539  000051                     _alarm_minute:
  1540                           	opt stack 0
  1541  000051                     	ds	1
  1542  000052                     _alarm_second:
  1543                           	opt stack 0
  1544  000052                     	ds	1
  1545  000053                     _bit_count:
  1546                           	opt stack 0
  1547  000053                     	ds	1
  1548  000054                     _colstart:
  1549                           	opt stack 0
  1550  000054                     	ds	1
  1551  000055                     _duty_cycle:
  1552                           	opt stack 0
  1553  000055                     	ds	1
  1554  000056                     _rowstart:
  1555                           	opt stack 0
  1556  000056                     	ds	1
  1557                           tblptru	equ	0xFF8
  1558                           tblptrh	equ	0xFF7
  1559                           tblptrl	equ	0xFF6
  1560                           tablat	equ	0xFF5
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           postdec1	equ	0xFE5
  1564                           fsr1l	equ	0xFE1
  1565                           
  1566                           	psect	dataCOMRAM
  1567  000057                     __pdataCOMRAM:
  1568                           	opt stack 0
  1569  000057                     _heater_set_temp:
  1570                           	opt stack 0
  1571  000057                     	ds	1
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postdec1	equ	0xFE5
  1579                           fsr1l	equ	0xFE1
  1580                           
  1581                           	psect	bssBANK0
  1582  0000EA                     __pbssBANK0:
  1583                           	opt stack 0
  1584  0000EA                     _ALARMEN:
  1585                           	opt stack 0
  1586  0000EA                     	ds	2
  1587  0000EC                     _DS1621_tempC:
  1588                           	opt stack 0
  1589  0000EC                     	ds	2
  1590  0000EE                     _nbr:
  1591                           	opt stack 0
  1592  0000EE                     	ds	2
  1593  0000F0                     _rpm:
  1594                           	opt stack 0
  1595  0000F0                     	ds	2
  1596  0000F2                     _INT2_flag:
  1597                           	opt stack 0
  1598  0000F2                     	ds	1
  1599  0000F3                     _Select_Field:
  1600                           	opt stack 0
  1601  0000F3                     	ds	1
  1602  0000F4                     _found:
  1603                           	opt stack 0
  1604  0000F4                     	ds	1
  1605  0000F5                     _second:
  1606                           	opt stack 0
  1607  0000F5                     	ds	1
  1608  0000F6                     _setup_alarm_hour:
  1609                           	opt stack 0
  1610  0000F6                     	ds	1
  1611  0000F7                     _setup_alarm_minute:
  1612                           	opt stack 0
  1613  0000F7                     	ds	1
  1614  0000F8                     _setup_alarm_second:
  1615                           	opt stack 0
  1616  0000F8                     	ds	1
  1617  0000F9                     _setup_day:
  1618                           	opt stack 0
  1619  0000F9                     	ds	1
  1620  0000FA                     _setup_heater_set_temp:
  1621                           	opt stack 0
  1622  0000FA                     	ds	1
  1623  0000FB                     _setup_hour:
  1624                           	opt stack 0
  1625  0000FB                     	ds	1
  1626  0000FC                     _setup_minute:
  1627                           	opt stack 0
  1628  0000FC                     	ds	1
  1629  0000FD                     _setup_month:
  1630                           	opt stack 0
  1631  0000FD                     	ds	1
  1632  0000FE                     _setup_second:
  1633                           	opt stack 0
  1634  0000FE                     	ds	1
  1635  0000FF                     _setup_year:
  1636                           	opt stack 0
  1637  0000FF                     	ds	1
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           postdec1	equ	0xFE5
  1645                           fsr1l	equ	0xFE1
  1646                           
  1647                           	psect	dataBANK0
  1648  000080                     __pdataBANK0:
  1649                           	opt stack 0
  1650  000080                     _colors:
  1651                           	opt stack 0
  1652  000080                     	ds	8
  1653  000088                     _day:
  1654                           	opt stack 0
  1655  000088                     	ds	1
  1656  000089                     _dow:
  1657                           	opt stack 0
  1658  000089                     	ds	1
  1659  00008A                     _hour:
  1660                           	opt stack 0
  1661  00008A                     	ds	1
  1662  00008B                     _minute:
  1663                           	opt stack 0
  1664  00008B                     	ds	1
  1665  00008C                     _month:
  1666                           	opt stack 0
  1667  00008C                     	ds	1
  1668  00008D                     _tempSecond:
  1669                           	opt stack 0
  1670  00008D                     	ds	1
  1671  00008E                     _wrap:
  1672                           	opt stack 0
  1673  00008E                     	ds	1
  1674  00008F                     _year:
  1675                           	opt stack 0
  1676  00008F                     	ds	1
  1677  000090                     _date:
  1678                           	opt stack 0
  1679  000090                     	ds	9
  1680  000099                     _time:
  1681                           	opt stack 0
  1682  000099                     	ds	9
  1683  0000A2                     _Volt_Txt:
  1684                           	opt stack 0
  1685  0000A2                     	ds	6
  1686  0000A8                     _Heater_Set_Temp_Txt:
  1687                           	opt stack 0
  1688  0000A8                     	ds	5
  1689  0000AD                     _RPM_Txt:
  1690                           	opt stack 0
  1691  0000AD                     	ds	5
  1692  0000B2                     _setup_heater_set_text:
  1693                           	opt stack 0
  1694  0000B2                     	ds	5
  1695  0000B7                     _Alarm_SW_Txt:
  1696                           	opt stack 0
  1697  0000B7                     	ds	4
  1698  0000BB                     _DC_Txt:
  1699                           	opt stack 0
  1700  0000BB                     	ds	4
  1701  0000BF                     _Heater_SW_Txt:
  1702                           	opt stack 0
  1703  0000BF                     	ds	4
  1704  0000C3                     _tempC:
  1705                           	opt stack 0
  1706  0000C3                     	ds	4
  1707  0000C7                     _tempF:
  1708                           	opt stack 0
  1709  0000C7                     	ds	4
  1710  0000CB                     _RTC_ALARM_Txt:
  1711                           	opt stack 0
  1712  0000CB                     	ds	2
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1l	equ	0xFE1
  1721                           
  1722                           	psect	dataBANK1
  1723  000100                     __pdataBANK1:
  1724                           	opt stack 0
  1725  000100                     _buffer:
  1726                           	opt stack 0
  1727  000100                     	ds	31
  1728  00011F                     _array1:
  1729                           	opt stack 0
  1730  00011F                     	ds	21
  1731  000134                     _alarm_time:
  1732                           	opt stack 0
  1733  000134                     	ds	9
  1734  00013D                     _setup_alarm_time:
  1735                           	opt stack 0
  1736  00013D                     	ds	9
  1737  000146                     _setup_date:
  1738                           	opt stack 0
  1739  000146                     	ds	9
  1740  00014F                     _setup_time:
  1741                           	opt stack 0
  1742  00014F                     	ds	9
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1l	equ	0xFE1
  1751                           
  1752                           	psect	cstackBANK1
  1753  000158                     __pcstackBANK1:
  1754                           	opt stack 0
  1755  000158                     ??_printf:
  1756  000158                     ?___ftdiv:
  1757                           	opt stack 0
  1758  000158                     ?___fttol:
  1759                           	opt stack 0
  1760  000158                     Update_Setup_Screen_Cursor_Forward@field:
  1761                           	opt stack 0
  1762  000158                     Update_Setup_Screen_Cursor_Backward@field:
  1763                           	opt stack 0
  1764  000158                     drawChar@y:
  1765                           	opt stack 0
  1766  000158                     drawCircle@ddF_x:
  1767                           	opt stack 0
  1768  000158                     ___ftdiv@f1:
  1769                           	opt stack 0
  1770  000158                     ___fttol@f1:
  1771                           	opt stack 0
  1772                           
  1773                           ; 3 bytes @ 0x0
  1774  000158                     	ds	1
  1775  000159                     Update_Setup_Screen_Cursor_Forward@yinc:
  1776                           	opt stack 0
  1777  000159                     Update_Setup_Screen_Cursor_Backward@yinc:
  1778                           	opt stack 0
  1779  000159                     drawChar@c:
  1780                           	opt stack 0
  1781                           
  1782                           ; 1 bytes @ 0x1
  1783  000159                     	ds	1
  1784  00015A                     Update_Setup_Screen_Cursor_Forward@xinc:
  1785                           	opt stack 0
  1786  00015A                     Update_Setup_Screen_Cursor_Backward@xinc:
  1787                           	opt stack 0
  1788  00015A                     drawChar@color:
  1789                           	opt stack 0
  1790  00015A                     drawCircle@ddF_y:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x2
  1794  00015A                     	ds	1
  1795  00015B                     ___ftdiv@f2:
  1796                           	opt stack 0
  1797                           
  1798                           ; 3 bytes @ 0x3
  1799  00015B                     	ds	1
  1800  00015C                     ??___fttol:
  1801  00015C                     printf@idx:
  1802                           	opt stack 0
  1803  00015C                     drawChar@bg:
  1804                           	opt stack 0
  1805  00015C                     drawCircle@f:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x4
  1809  00015C                     	ds	1
  1810  00015D                     printf@ap:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x5
  1814  00015D                     	ds	1
  1815  00015E                     ??___ftdiv:
  1816  00015E                     drawChar@size:
  1817                           	opt stack 0
  1818  00015E                     drawCircle@x:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x6
  1822  00015E                     	ds	1
  1823  00015F                     drawChar@line:
  1824                           	opt stack 0
  1825  00015F                     printf@prec:
  1826                           	opt stack 0
  1827                           
  1828                           ; 1 bytes @ 0x7
  1829  00015F                     	ds	1
  1830  000160                     drawChar@x:
  1831                           	opt stack 0
  1832  000160                     drawCircle@y:
  1833                           	opt stack 0
  1834  000160                     printf@val:
  1835                           	opt stack 0
  1836                           
  1837                           ; 2 bytes @ 0x8
  1838  000160                     	ds	1
  1839  000161                     drawChar@j:
  1840                           	opt stack 0
  1841  000161                     ___ftdiv@cntr:
  1842                           	opt stack 0
  1843  000161                     ___fttol@sign1:
  1844                           	opt stack 0
  1845                           
  1846                           ; 1 bytes @ 0x9
  1847  000161                     	ds	1
  1848  000162                     drawChar@i:
  1849                           	opt stack 0
  1850  000162                     printf@flag:
  1851                           	opt stack 0
  1852  000162                     ___ftdiv@f3:
  1853                           	opt stack 0
  1854  000162                     ___fttol@lval:
  1855                           	opt stack 0
  1856                           
  1857                           ; 4 bytes @ 0xA
  1858  000162                     	ds	1
  1859  000163                     drawtext@y:
  1860                           	opt stack 0
  1861  000163                     printf@width:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0xB
  1865  000163                     	ds	1
  1866  000164                     drawtext@_text:
  1867                           	opt stack 0
  1868                           
  1869                           ; 2 bytes @ 0xC
  1870  000164                     	ds	1
  1871  000165                     printf@c:
  1872                           	opt stack 0
  1873  000165                     ___ftdiv@exp:
  1874                           	opt stack 0
  1875                           
  1876                           ; 1 bytes @ 0xD
  1877  000165                     	ds	1
  1878  000166                     ___ftdiv@sign:
  1879                           	opt stack 0
  1880  000166                     ___fttol@exp1:
  1881                           	opt stack 0
  1882  000166                     drawtext@color:
  1883                           	opt stack 0
  1884                           
  1885                           ; 2 bytes @ 0xE
  1886  000166                     	ds	1
  1887  000167                     ??_do_update_pwm:
  1888  000167                     ?___awmod:
  1889                           	opt stack 0
  1890  000167                     ?_read_volt:
  1891                           	opt stack 0
  1892  000167                     ___awmod@dividend:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0xF
  1896  000167                     	ds	1
  1897  000168                     drawtext@bg:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x10
  1901  000168                     	ds	1
  1902  000169                     ___awmod@divisor:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x11
  1906  000169                     	ds	1
  1907  00016A                     drawtext@size:
  1908                           	opt stack 0
  1909  00016A                     do_update_pwm@dc_f:
  1910                           	opt stack 0
  1911  00016A                     read_volt@volt:
  1912                           	opt stack 0
  1913                           
  1914                           ; 3 bytes @ 0x12
  1915  00016A                     	ds	1
  1916  00016B                     ??_drawtext:
  1917  00016B                     ?___awdiv:
  1918                           	opt stack 0
  1919  00016B                     ___awdiv@dividend:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0x13
  1923  00016B                     	ds	2
  1924  00016D                     do_update_pwm@duty_cycle:
  1925                           	opt stack 0
  1926  00016D                     drawtext@x:
  1927                           	opt stack 0
  1928  00016D                     read_volt@step:
  1929                           	opt stack 0
  1930  00016D                     ___awdiv@divisor:
  1931                           	opt stack 0
  1932                           
  1933                           ; 2 bytes @ 0x15
  1934  00016D                     	ds	1
  1935  00016E                     do_update_pwm@dc_I:
  1936                           	opt stack 0
  1937  00016E                     drawtext@textsize:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x16
  1941  00016E                     	ds	1
  1942  00016F                     ___awdiv@counter:
  1943                           	opt stack 0
  1944                           
  1945                           ; 1 bytes @ 0x17
  1946  00016F                     	ds	1
  1947  000170                     ___awdiv@sign:
  1948                           	opt stack 0
  1949  000170                     drawtext@i:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0x18
  1953  000170                     	ds	1
  1954  000171                     ___awdiv@quotient:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x19
  1958  000171                     	ds	1
  1959  000172                     drawtext@cursor_y:
  1960                           	opt stack 0
  1961                           
  1962                           ; 1 bytes @ 0x1A
  1963  000172                     	ds	1
  1964  000173                     ?_dec_2_bcd:
  1965                           	opt stack 0
  1966  000173                     ?_get_RPM:
  1967                           	opt stack 0
  1968  000173                     drawtext@cursor_x:
  1969                           	opt stack 0
  1970                           
  1971                           ; 1 bytes @ 0x1B
  1972  000173                     	ds	1
  1973  000174                     ??_Update_Screen:
  1974  000174                     Update_Setup_Heater_Screen@dc_char1:
  1975                           	opt stack 0
  1976                           
  1977                           ; 1 bytes @ 0x1C
  1978  000174                     	ds	1
  1979  000175                     ??_dec_2_bcd:
  1980  000175                     Update_Setup_Heater_Screen@dc_char2:
  1981                           	opt stack 0
  1982  000175                     get_RPM@RPS:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x1D
  1986  000175                     	ds	1
  1987  000176                     Update_Setup_Heater_Screen@dc_char3:
  1988                           	opt stack 0
  1989  000176                     _Update_Screen$3217:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x1E
  1993  000176                     	ds	1
  1994  000177                     ??_Do_Setup_Heater_Temp:
  1995  000177                     dec_2_bcd@bcd:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0x1F
  1999  000177                     	ds	1
  2000  000178                     Update_Screen@neg_tempF:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x20
  2004  000178                     	ds	1
  2005  000179                     dec_2_bcd@dec:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x21
  2009  000179                     	ds	1
  2010  00017A                     DS3231_Write_Time@Device:
  2011                           	opt stack 0
  2012  00017A                     DS3231_Write_Alarm_Time@Device:
  2013                           	opt stack 0
  2014  00017A                     Update_Screen@neg_DS1621_tempC:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x22
  2018  00017A                     	ds	1
  2019  00017B                     DS3231_Write_Time@Address:
  2020                           	opt stack 0
  2021  00017B                     DS3231_Write_Alarm_Time@Address:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x23
  2025  00017B                     	ds	1
  2026  00017C                     ??_main:
  2027                           
  2028                           ; 0 bytes @ 0x24
  2029  00017C                     	ds	2
  2030                           tblptru	equ	0xFF8
  2031                           tblptrh	equ	0xFF7
  2032                           tblptrl	equ	0xFF6
  2033                           tablat	equ	0xFF5
  2034                           postinc0	equ	0xFEE
  2035                           wreg	equ	0xFE8
  2036                           postdec1	equ	0xFE5
  2037                           fsr1l	equ	0xFE1
  2038                           
  2039                           	psect	cstackBANK0
  2040  0000CD                     __pcstackBANK0:
  2041                           	opt stack 0
  2042  0000CD                     ??_bcd_2_dec:
  2043  0000CD                     ??_isdigit:
  2044  0000CD                     ?_get_full_ADC:
  2045                           	opt stack 0
  2046  0000CD                     ?_strlen:
  2047                           	opt stack 0
  2048  0000CD                     ?_get_duty_cycle:
  2049                           	opt stack 0
  2050  0000CD                     ?___wmul:
  2051                           	opt stack 0
  2052  0000CD                     ?___lwdiv:
  2053                           	opt stack 0
  2054  0000CD                     ?___ftpack:
  2055                           	opt stack 0
  2056  0000CD                     I2C_Read@ack:
  2057                           	opt stack 0
  2058  0000CD                     I2C_Write@outByte:
  2059                           	opt stack 0
  2060  0000CD                     putch@c:
  2061                           	opt stack 0
  2062  0000CD                     spiwrite@x:
  2063                           	opt stack 0
  2064  0000CD                     get_duty_cycle@temp:
  2065                           	opt stack 0
  2066  0000CD                     Wait_One_Sec@k:
  2067                           	opt stack 0
  2068  0000CD                     Set_RPM_RGB@rpm:
  2069                           	opt stack 0
  2070  0000CD                     OpenUSART@spbrg:
  2071                           	opt stack 0
  2072  0000CD                     ___wmul@multiplier:
  2073                           	opt stack 0
  2074  0000CD                     ___lwdiv@dividend:
  2075                           	opt stack 0
  2076  0000CD                     strcpy@to:
  2077                           	opt stack 0
  2078  0000CD                     strlen@s:
  2079                           	opt stack 0
  2080  0000CD                     ___ftpack@arg:
  2081                           	opt stack 0
  2082  0000CD                     ___ftge@ff1:
  2083                           	opt stack 0
  2084  0000CD                     I2C_Init@c:
  2085                           	opt stack 0
  2086                           
  2087                           ; 4 bytes @ 0x0
  2088  0000CD                     	ds	1
  2089  0000CE                     I2C_Read@n:
  2090                           	opt stack 0
  2091  0000CE                     I2C_Write@n:
  2092                           	opt stack 0
  2093  0000CE                     spiwrite@spidata:
  2094                           	opt stack 0
  2095  0000CE                     _isdigit$2867:
  2096                           	opt stack 0
  2097                           
  2098                           ; 1 bytes @ 0x1
  2099  0000CE                     	ds	1
  2100  0000CF                     ??_get_full_ADC:
  2101  0000CF                     ??_strlen:
  2102  0000CF                     I2C_Read@inByte:
  2103                           	opt stack 0
  2104  0000CF                     I2C_Write_Address_Write_One_Byte@Address:
  2105                           	opt stack 0
  2106  0000CF                     I2C_Write_Cmd_Only@Cmd:
  2107                           	opt stack 0
  2108  0000CF                     I2C_Write_Cmd_Write_Data@Cmd:
  2109                           	opt stack 0
  2110  0000CF                     Set_RGB_Color@color:
  2111                           	opt stack 0
  2112  0000CF                     write_command@cmd_:
  2113                           	opt stack 0
  2114  0000CF                     write_data@data_:
  2115                           	opt stack 0
  2116  0000CF                     OpenUSART@config:
  2117                           	opt stack 0
  2118  0000CF                     isdigit@c:
  2119                           	opt stack 0
  2120  0000CF                     get_duty_cycle@set_temp:
  2121                           	opt stack 0
  2122  0000CF                     bcd_2_dec@dec:
  2123                           	opt stack 0
  2124  0000CF                     ___wmul@multiplicand:
  2125                           	opt stack 0
  2126  0000CF                     ___lwdiv@divisor:
  2127                           	opt stack 0
  2128  0000CF                     strcpy@from:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x2
  2132  0000CF                     	ds	1
  2133  0000D0                     ?_DS1621_Read_Temp:
  2134                           	opt stack 0
  2135  0000D0                     I2C_Write_Address_Read_One_Byte@Address:
  2136                           	opt stack 0
  2137  0000D0                     I2C_Write_Address_Write_One_Byte@Data_Out:
  2138                           	opt stack 0
  2139  0000D0                     I2C_Write_Cmd_Only@Device:
  2140                           	opt stack 0
  2141  0000D0                     I2C_Write_Cmd_Write_Data@Data_Out:
  2142                           	opt stack 0
  2143  0000D0                     DS3231_Read_Time@Address:
  2144                           	opt stack 0
  2145  0000D0                     DS3231_Read_Alarm_Time@Address:
  2146                           	opt stack 0
  2147  0000D0                     setAddrWindow@y0:
  2148                           	opt stack 0
  2149  0000D0                     ___ftpack@exp:
  2150                           	opt stack 0
  2151  0000D0                     ___ftge@ff2:
  2152                           	opt stack 0
  2153                           
  2154                           ; 3 bytes @ 0x3
  2155  0000D0                     	ds	1
  2156  0000D1                     ??_get_duty_cycle:
  2157  0000D1                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  2158                           	opt stack 0
  2159  0000D1                     I2C_Write_Address_Write_One_Byte@Device:
  2160                           	opt stack 0
  2161  0000D1                     I2C_Write_Cmd_Write_Data@Device:
  2162                           	opt stack 0
  2163  0000D1                     DS3231_Read_Time@Device:
  2164                           	opt stack 0
  2165  0000D1                     DS3231_Read_Alarm_Time@Device:
  2166                           	opt stack 0
  2167  0000D1                     bcd_2_dec@bcd:
  2168                           	opt stack 0
  2169  0000D1                     setAddrWindow@x1:
  2170                           	opt stack 0
  2171  0000D1                     ___ftpack@sign:
  2172                           	opt stack 0
  2173  0000D1                     ___lwdiv@counter:
  2174                           	opt stack 0
  2175  0000D1                     get_full_ADC@result:
  2176                           	opt stack 0
  2177  0000D1                     ___wmul@product:
  2178                           	opt stack 0
  2179  0000D1                     strcpy@cp:
  2180                           	opt stack 0
  2181  0000D1                     strlen@cp:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x4
  2185  0000D1                     	ds	1
  2186  0000D2                     ??___ftpack:
  2187  0000D2                     I2C_Write_Address_Read_One_Byte@Device:
  2188                           	opt stack 0
  2189  0000D2                     DS1621_Init@Device:
  2190                           	opt stack 0
  2191  0000D2                     DS1621_Read_Temp@Cmd:
  2192                           	opt stack 0
  2193  0000D2                     setAddrWindow@y1:
  2194                           	opt stack 0
  2195  0000D2                     ___lwdiv@quotient:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x5
  2199  0000D2                     	ds	1
  2200  0000D3                     ??___ftge:
  2201  0000D3                     DS1621_Read_Temp@Data_Ret:
  2202                           	opt stack 0
  2203  0000D3                     DS3231_Init@Address_7:
  2204                           	opt stack 0
  2205  0000D3                     setAddrWindow@x0:
  2206                           	opt stack 0
  2207  0000D3                     get_duty_cycle@dc:
  2208                           	opt stack 0
  2209  0000D3                     delay_ms@ms:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x6
  2213  0000D3                     	ds	1
  2214  0000D4                     ?___lwmod:
  2215                           	opt stack 0
  2216  0000D4                     DS1621_Read_Temp@Device:
  2217                           	opt stack 0
  2218  0000D4                     DS3231_Init@Address_E:
  2219                           	opt stack 0
  2220  0000D4                     drawPixel@y:
  2221                           	opt stack 0
  2222  0000D4                     drawFastVLine@y:
  2223                           	opt stack 0
  2224  0000D4                     fillRectangle@y:
  2225                           	opt stack 0
  2226  0000D4                     ___lwmod@dividend:
  2227                           	opt stack 0
  2228                           
  2229                           ; 2 bytes @ 0x7
  2230  0000D4                     	ds	1
  2231  0000D5                     ??_delay_ms:
  2232  0000D5                     ?___awtoft:
  2233                           	opt stack 0
  2234  0000D5                     ?___lbtoft:
  2235                           	opt stack 0
  2236  0000D5                     DS3231_Init@control_E:
  2237                           	opt stack 0
  2238  0000D5                     drawFastVLine@h:
  2239                           	opt stack 0
  2240  0000D5                     fillRectangle@w:
  2241                           	opt stack 0
  2242  0000D5                     drawPixel@color:
  2243                           	opt stack 0
  2244  0000D5                     ___awtoft@c:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x8
  2248  0000D5                     	ds	1
  2249  0000D6                     DS3231_Init@Device:
  2250                           	opt stack 0
  2251  0000D6                     fillRectangle@h:
  2252                           	opt stack 0
  2253  0000D6                     drawFastVLine@color:
  2254                           	opt stack 0
  2255  0000D6                     ___lwmod@divisor:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x9
  2259  0000D6                     	ds	1
  2260  0000D7                     DS3231_Turn_Off_Alarm@Address_E:
  2261                           	opt stack 0
  2262  0000D7                     DS3231_Turn_On_Alarm@Address_E:
  2263                           	opt stack 0
  2264  0000D7                     drawPixel@x:
  2265                           	opt stack 0
  2266  0000D7                     delay_ms@count:
  2267                           	opt stack 0
  2268  0000D7                     fillRectangle@color:
  2269                           	opt stack 0
  2270                           
  2271                           ; 2 bytes @ 0xA
  2272  0000D7                     	ds	1
  2273  0000D8                     ??_drawFastVLine:
  2274  0000D8                     DS3231_Turn_Off_Alarm@Address_F:
  2275                           	opt stack 0
  2276  0000D8                     DS3231_Turn_On_Alarm@Address_F:
  2277                           	opt stack 0
  2278  0000D8                     ___awtoft@sign:
  2279                           	opt stack 0
  2280  0000D8                     ___lbtoft@c:
  2281                           	opt stack 0
  2282  0000D8                     ___lwmod@counter:
  2283                           	opt stack 0
  2284  0000D8                     drawCircle@x0:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0xB
  2288  0000D8                     	ds	1
  2289  0000D9                     ??_fillRectangle:
  2290  0000D9                     ?_printf:
  2291                           	opt stack 0
  2292  0000D9                     ?___ftmul:
  2293                           	opt stack 0
  2294  0000D9                     DS3231_Turn_Off_Alarm@control_E:
  2295                           	opt stack 0
  2296  0000D9                     DS3231_Turn_On_Alarm@control_E:
  2297                           	opt stack 0
  2298  0000D9                     printf@f:
  2299                           	opt stack 0
  2300  0000D9                     ___ftmul@f1:
  2301                           	opt stack 0
  2302                           
  2303                           ; 3 bytes @ 0xC
  2304  0000D9                     	ds	1
  2305  0000DA                     DS3231_Turn_Off_Alarm@control_F:
  2306                           	opt stack 0
  2307  0000DA                     DS3231_Turn_On_Alarm@control_F:
  2308                           	opt stack 0
  2309  0000DA                     drawCircle@y0:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0xD
  2313  0000DA                     	ds	1
  2314  0000DB                     DS3231_Turn_Off_Alarm@Device:
  2315                           	opt stack 0
  2316  0000DB                     DS3231_Turn_On_Alarm@Device:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0xE
  2320  0000DB                     	ds	1
  2321  0000DC                     drawFastVLine@hi:
  2322                           	opt stack 0
  2323  0000DC                     drawCircle@r:
  2324                           	opt stack 0
  2325  0000DC                     ___ftmul@f2:
  2326                           	opt stack 0
  2327                           
  2328                           ; 3 bytes @ 0xF
  2329  0000DC                     	ds	1
  2330  0000DD                     drawFastVLine@lo:
  2331                           	opt stack 0
  2332  0000DD                     fillRectangle@hi:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x10
  2336  0000DD                     	ds	1
  2337  0000DE                     drawFastVLine@x:
  2338                           	opt stack 0
  2339  0000DE                     fillRectangle@lo:
  2340                           	opt stack 0
  2341  0000DE                     drawCircle@color:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x11
  2345  0000DE                     	ds	1
  2346  0000DF                     ??___ftmul:
  2347  0000DF                     fillRect@y:
  2348                           	opt stack 0
  2349  0000DF                     fillRectangle@x:
  2350                           	opt stack 0
  2351                           
  2352                           ; 1 bytes @ 0x12
  2353  0000DF                     	ds	1
  2354  0000E0                     ??_drawCircle:
  2355  0000E0                     fillRect@w:
  2356                           	opt stack 0
  2357  0000E0                     fillScreen@color:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x13
  2361  0000E0                     	ds	1
  2362  0000E1                     fillRect@h:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x14
  2366  0000E1                     	ds	1
  2367  0000E2                     ___ftmul@exp:
  2368                           	opt stack 0
  2369  0000E2                     fillRect@color:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0x15
  2373  0000E2                     	ds	1
  2374  0000E3                     ___ftmul@f3_as_product:
  2375                           	opt stack 0
  2376                           
  2377                           ; 3 bytes @ 0x16
  2378  0000E3                     	ds	1
  2379  0000E4                     ??_fillRect:
  2380                           
  2381                           ; 0 bytes @ 0x17
  2382  0000E4                     	ds	2
  2383  0000E6                     ___ftmul@cntr:
  2384                           	opt stack 0
  2385                           
  2386                           ; 1 bytes @ 0x19
  2387  0000E6                     	ds	1
  2388  0000E7                     fillRect@x:
  2389                           	opt stack 0
  2390  0000E7                     ___ftmul@sign:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x1A
  2394  0000E7                     	ds	1
  2395  0000E8                     ___awmod@counter:
  2396                           	opt stack 0
  2397  0000E8                     check_for_button_input@j:
  2398                           	opt stack 0
  2399  0000E8                     fillRect@i:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x1B
  2403  0000E8                     	ds	1
  2404  0000E9                     ___awmod@sign:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x1C
  2408  0000E9                     	ds	1
  2409  0000EA                     tblptru	equ	0xFF8
  2410                           tblptrh	equ	0xFF7
  2411                           tblptrl	equ	0xFF6
  2412                           tablat	equ	0xFF5
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           postdec1	equ	0xFE5
  2416                           fsr1l	equ	0xFE1
  2417                           
  2418                           ; 0 bytes @ 0x1D
  2419                           
  2420                           	psect	cstackCOMRAM
  2421  000001                     __pcstackCOMRAM:
  2422                           	opt stack 0
  2423  000001                     ??_INT0_isr:
  2424  000001                     ??i2_isdigit:
  2425  000001                     ?i2___wmul:
  2426                           	opt stack 0
  2427  000001                     ?i2___lwdiv:
  2428                           	opt stack 0
  2429  000001                     i2putch@c:
  2430                           	opt stack 0
  2431  000001                     i2___wmul@multiplier:
  2432                           	opt stack 0
  2433  000001                     i2___lwdiv@dividend:
  2434                           	opt stack 0
  2435                           
  2436                           ; 2 bytes @ 0x0
  2437  000001                     	ds	1
  2438  000002                     i2_isdigit$2867:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x1
  2442  000002                     	ds	1
  2443  000003                     i2isdigit@c:
  2444                           	opt stack 0
  2445  000003                     i2___wmul@multiplicand:
  2446                           	opt stack 0
  2447  000003                     i2___lwdiv@divisor:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0x2
  2451  000003                     	ds	2
  2452  000005                     i2___wmul@product:
  2453                           	opt stack 0
  2454  000005                     i2___lwdiv@quotient:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0x4
  2458  000005                     	ds	2
  2459  000007                     i2___lwdiv@counter:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0x6
  2463  000007                     	ds	1
  2464  000008                     ?i2___lwmod:
  2465                           	opt stack 0
  2466  000008                     i2___lwmod@dividend:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x7
  2470  000008                     	ds	2
  2471  00000A                     i2___lwmod@divisor:
  2472                           	opt stack 0
  2473                           
  2474                           ; 2 bytes @ 0x9
  2475  00000A                     	ds	2
  2476  00000C                     i2___lwmod@counter:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0xB
  2480  00000C                     	ds	1
  2481  00000D                     ?i2_printf:
  2482                           	opt stack 0
  2483  00000D                     i2printf@f:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0xC
  2487  00000D                     	ds	4
  2488  000011                     ??i2_printf:
  2489                           
  2490                           ; 0 bytes @ 0x10
  2491  000011                     	ds	4
  2492  000015                     i2printf@idx:
  2493                           	opt stack 0
  2494                           
  2495                           ; 1 bytes @ 0x14
  2496  000015                     	ds	1
  2497  000016                     i2printf@ap:
  2498                           	opt stack 0
  2499                           
  2500                           ; 2 bytes @ 0x15
  2501  000016                     	ds	2
  2502  000018                     i2printf@prec:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x17
  2506  000018                     	ds	1
  2507  000019                     i2printf@val:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x18
  2511  000019                     	ds	2
  2512  00001B                     i2printf@flag:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0x1A
  2516  00001B                     	ds	1
  2517  00001C                     i2printf@width:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x1B
  2521  00001C                     	ds	2
  2522  00001E                     i2printf@c:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x1D
  2526  00001E                     	ds	1
  2527  00001F                     ??_chkisr:
  2528                           
  2529                           ; 0 bytes @ 0x1E
  2530  00001F                     	ds	14
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           postinc0	equ	0xFEE
  2536                           wreg	equ	0xFE8
  2537                           postdec1	equ	0xFE5
  2538                           fsr1l	equ	0xFE1
  2539                           
  2540 ;;
  2541 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2542 ;;
  2543 ;; *************** function _main *****************
  2544 ;; Defined at:
  2545 ;;		line 130 in file "Main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;		None               void
  2552 ;; Registers used:
  2553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;Total ram usage:        2 bytes
  2564 ;; Hardware stack levels required when called:   14
  2565 ;; This function calls:
  2566 ;;		_DS1621_Read_Temp
  2567 ;;		_DS3231_Read_Alarm_Time
  2568 ;;		_DS3231_Read_Time
  2569 ;;		_DS3231_Turn_Off_Alarm
  2570 ;;		_Do_Beep_Bad
  2571 ;;		_Do_Beep_Good
  2572 ;;		_Do_Init
  2573 ;;		_Do_Setup_Alarm_Time
  2574 ;;		_Do_Setup_Heater_Temp
  2575 ;;		_Do_Setup_Time
  2576 ;;		_Initialize_Screen
  2577 ;;		_Monitor_Heater
  2578 ;;		_Set_RPM_RGB
  2579 ;;		_Test_Alarm
  2580 ;;		_Toggle_Heater
  2581 ;;		_Update_Screen
  2582 ;;		___awdiv
  2583 ;;		___wmul
  2584 ;;		_check_for_button_input
  2585 ;;		_get_RPM
  2586 ;;		_printf
  2587 ;;		_read_volt
  2588 ;; This function is called by:
  2589 ;;		Startup code after reset
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text0
  2594  001A0C                     __ptext0:
  2595                           	opt stack 0
  2596  001A0C                     _main:
  2597                           	opt stack 17
  2598                           
  2599                           ;Main.c: 132: Do_Init();
  2600                           
  2601                           ;incstack = 0
  2602  001A0C  ECA0  F01F         	call	_Do_Init	;wreg free
  2603                           
  2604                           ;Main.c: 133: Initialize_Screen();
  2605  001A10  ECCE  F003         	call	_Initialize_Screen	;wreg free
  2606                           
  2607                           ;Main.c: 134: DS3231_Turn_Off_Alarm();
  2608  001A14  ECB9  F020         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2609                           
  2610                           ;Main.c: 135: DS3231_Read_Alarm_Time();
  2611  001A18  EC97  F022         	call	_DS3231_Read_Alarm_Time	;wreg free
  2612                           
  2613                           ;Main.c: 137: tempSecond = 0xff;
  2614  001A1C  0100               	movlb	0	; () banked
  2615  001A1E  698D               	setf	_tempSecond& (0+255),b
  2616  001A20  D000               	goto	l10495
  2617  001A22                     l10495:
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;Main.c: 139: {
  2621                           ;Main.c: 140: DS3231_Read_Time();
  2622  001A22  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
  2623                           
  2624                           ;Main.c: 141: Set_RPM_RGB(rpm);
  2625  001A26  C0F0  F0CD         	movff	_rpm,Set_RPM_RGB@rpm
  2626  001A2A  C0F1  F0CE         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2627  001A2E  ECC2  F01D         	call	_Set_RPM_RGB	;wreg free
  2628                           
  2629                           ;Main.c: 143: if(tempSecond != second)
  2630  001A32  0100               	movlb	0	; () banked
  2631  001A34  51F5               	movf	_second& (0+255),w,b
  2632  001A36  0100               	movlb	0	; () banked
  2633  001A38  198D               	xorwf	_tempSecond& (0+255),w,b
  2634  001A3A  B4D8               	btfsc	status,2,c
  2635  001A3C  D0B4               	goto	l10527
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;Main.c: 144: {
  2639                           ;Main.c: 145: tempSecond = second;
  2640  001A3E  C0F5  F08D         	movff	_second,_tempSecond
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;Main.c: 146: rpm = get_RPM();
  2644  001A42  ECA5  F023         	call	_get_RPM	;wreg free
  2645  001A46  C173  F0F0         	movff	?_get_RPM,_rpm
  2646  001A4A  C174  F0F1         	movff	?_get_RPM+1,_rpm+1
  2647                           
  2648                           ;Main.c: 147: volt = read_volt();
  2649  001A4E  EC4D  F020         	call	_read_volt	;wreg free
  2650  001A52  C167  F031         	movff	?_read_volt,_volt
  2651  001A56  C168  F032         	movff	?_read_volt+1,_volt+1
  2652  001A5A  C169  F033         	movff	?_read_volt+2,_volt+2
  2653                           
  2654                           ;Main.c: 148: DS1621_tempC = DS1621_Read_Temp();
  2655  001A5E  EC5C  F023         	call	_DS1621_Read_Temp	;wreg free
  2656  001A62  C0D0  F0EC         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2657  001A66  C0D1  F0ED         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2658                           
  2659                           ;Main.c: 149: if ((DS1621_tempC & 0x80) == 0x80) DS1621_tempC = - (0x80 - DS1621_tempC &
      +                           0x7f);
  2660  001A6A  0100               	movlb	0	; () banked
  2661  001A6C  AFEC               	btfss	_DS1621_tempC& (0+255),7,b
  2662  001A6E  D01D               	goto	l10511
  2663                           
  2664                           ; BSR set to: 0
  2665  001A70  C0EC  F17C         	movff	_DS1621_tempC,??_main
  2666  001A74  C0ED  F17D         	movff	_DS1621_tempC+1,??_main+1
  2667  001A78  0101               	movlb	1	; () banked
  2668  001A7A  1F7C               	comf	??_main& (0+255),f,b
  2669  001A7C  1F7D               	comf	(??_main+1)& (0+255),f,b
  2670  001A7E  4B7C               	infsnz	??_main& (0+255),f,b
  2671  001A80  2B7D               	incf	(??_main+1)& (0+255),f,b
  2672  001A82  0E80               	movlw	128
  2673  001A84  0101               	movlb	1	; () banked
  2674  001A86  277C               	addwf	??_main& (0+255),f,b
  2675  001A88  0E00               	movlw	0
  2676  001A8A  237D               	addwfc	(??_main+1)& (0+255),f,b
  2677  001A8C  0E7F               	movlw	127
  2678  001A8E  0101               	movlb	1	; () banked
  2679  001A90  177C               	andwf	??_main& (0+255),f,b
  2680  001A92  0E00               	movlw	0
  2681  001A94  177D               	andwf	(??_main+1)& (0+255),f,b
  2682  001A96  0101               	movlb	1	; () banked
  2683  001A98  1F7C               	comf	??_main& (0+255),f,b
  2684  001A9A  1F7D               	comf	(??_main+1)& (0+255),f,b
  2685  001A9C  4B7C               	infsnz	??_main& (0+255),f,b
  2686  001A9E  2B7D               	incf	(??_main+1)& (0+255),f,b
  2687  001AA0  C17C  F0EC         	movff	??_main,_DS1621_tempC
  2688  001AA4  C17D  F0ED         	movff	??_main+1,_DS1621_tempC+1
  2689  001AA8  D000               	goto	l10511
  2690  001AAA                     l10511:
  2691                           
  2692                           ;Main.c: 150: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2693  001AAA  C0EC  F0CD         	movff	_DS1621_tempC,___wmul@multiplier
  2694  001AAE  C0ED  F0CE         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2695  001AB2  0E00               	movlw	0
  2696  001AB4  0100               	movlb	0	; () banked
  2697  001AB6  6FD0               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2698  001AB8  0E09               	movlw	9
  2699  001ABA  6FCF               	movwf	___wmul@multiplicand& (0+255),b
  2700  001ABC  EC45  F024         	call	___wmul	;wreg free
  2701  001AC0  C0CD  F16B         	movff	?___wmul,___awdiv@dividend
  2702  001AC4  C0CE  F16C         	movff	?___wmul+1,___awdiv@dividend+1
  2703  001AC8  0E00               	movlw	0
  2704  001ACA  0101               	movlb	1	; () banked
  2705  001ACC  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  2706  001ACE  0E05               	movlw	5
  2707  001AD0  6F6D               	movwf	___awdiv@divisor& (0+255),b
  2708  001AD2  ECBE  F019         	call	___awdiv	;wreg free
  2709  001AD6  0E20               	movlw	32
  2710  001AD8  0101               	movlb	1	; () banked
  2711  001ADA  256B               	addwf	?___awdiv& (0+255),w,b
  2712  001ADC  6E34               	movwf	_DS1621_tempF,c
  2713  001ADE  0E00               	movlw	0
  2714  001AE0  0101               	movlb	1	; () banked
  2715  001AE2  216C               	addwfc	(?___awdiv+1)& (0+255),w,b
  2716  001AE4  6E35               	movwf	_DS1621_tempF+1,c
  2717                           
  2718                           ; BSR set to: 1
  2719                           ;Main.c: 152: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2720  001AE6  0E89               	movlw	low STR_2
  2721  001AE8  0100               	movlb	0	; () banked
  2722  001AEA  6FD9               	movwf	printf@f& (0+255),b
  2723  001AEC  0EFE               	movlw	high STR_2
  2724  001AEE  0100               	movlb	0	; () banked
  2725  001AF0  6FDA               	movwf	(printf@f+1)& (0+255),b
  2726  001AF2  C08A  F0DB         	movff	_hour,?_printf+2
  2727  001AF6  0100               	movlb	0	; () banked
  2728  001AF8  6BDC               	clrf	(?_printf+3)& (0+255),b
  2729  001AFA  C08B  F0DD         	movff	_minute,?_printf+4
  2730  001AFE  0100               	movlb	0	; () banked
  2731  001B00  6BDE               	clrf	(?_printf+5)& (0+255),b
  2732  001B02  C0F5  F0DF         	movff	_second,?_printf+6
  2733  001B06  0100               	movlb	0	; () banked
  2734  001B08  6BE0               	clrf	(?_printf+7)& (0+255),b
  2735  001B0A  C08C  F0E1         	movff	_month,?_printf+8
  2736  001B0E  0100               	movlb	0	; () banked
  2737  001B10  6BE2               	clrf	(?_printf+9)& (0+255),b
  2738  001B12  C088  F0E3         	movff	_day,?_printf+10
  2739  001B16  0100               	movlb	0	; () banked
  2740  001B18  6BE4               	clrf	(?_printf+11)& (0+255),b
  2741  001B1A  C08F  F0E5         	movff	_year,?_printf+12
  2742  001B1E  0100               	movlb	0	; () banked
  2743  001B20  6BE6               	clrf	(?_printf+13)& (0+255),b
  2744  001B22  ECEB  F005         	call	_printf	;wreg free
  2745                           
  2746                           ;Main.c: 153: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2747  001B26  0E00               	movlw	low STR_3
  2748  001B28  0100               	movlb	0	; () banked
  2749  001B2A  6FD9               	movwf	printf@f& (0+255),b
  2750  001B2C  0EFF               	movlw	high STR_3
  2751  001B2E  0100               	movlb	0	; () banked
  2752  001B30  6FDA               	movwf	(printf@f+1)& (0+255),b
  2753  001B32  C0EC  F0DB         	movff	_DS1621_tempC,?_printf+2
  2754  001B36  C0ED  F0DC         	movff	_DS1621_tempC+1,?_printf+3
  2755  001B3A  C034  F0DD         	movff	_DS1621_tempF,?_printf+4
  2756  001B3E  C035  F0DE         	movff	_DS1621_tempF+1,?_printf+5
  2757  001B42  ECEB  F005         	call	_printf	;wreg free
  2758                           
  2759                           ;Main.c: 154: printf ("alarm = %d Heater = %d ", PORTBbits.RB4, HEATER);
  2760  001B46  0EA7               	movlw	low STR_4
  2761  001B48  0100               	movlb	0	; () banked
  2762  001B4A  6FD9               	movwf	printf@f& (0+255),b
  2763  001B4C  0EFE               	movlw	high STR_4
  2764  001B4E  0100               	movlb	0	; () banked
  2765  001B50  6FDA               	movwf	(printf@f+1)& (0+255),b
  2766  001B52  A881               	btfss	3969,4,c	;volatile
  2767  001B54  D004               	goto	u8160
  2768  001B56  0101               	movlb	1	; () banked
  2769  001B58  6B7C               	clrf	??_main& (0+255),b
  2770  001B5A  2B7C               	incf	??_main& (0+255),f,b
  2771  001B5C  D002               	goto	u8168
  2772  001B5E                     u8160:
  2773  001B5E  0101               	movlb	1	; () banked
  2774  001B60  6B7C               	clrf	??_main& (0+255),b
  2775  001B62                     u8168:
  2776  001B62  0101               	movlb	1	; () banked
  2777  001B64  517C               	movf	??_main& (0+255),w,b
  2778  001B66  0100               	movlb	0	; () banked
  2779  001B68  6FDB               	movwf	(?_printf+2)& (0+255),b
  2780  001B6A  6BDC               	clrf	(?_printf+3)& (0+255),b
  2781  001B6C  C045  F0DD         	movff	_HEATER,?_printf+4
  2782  001B70  0100               	movlb	0	; () banked
  2783  001B72  6BDE               	clrf	(?_printf+5)& (0+255),b
  2784  001B74  ECEB  F005         	call	_printf	;wreg free
  2785                           
  2786                           ;Main.c: 155: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2787  001B78  0E29               	movlw	low STR_5
  2788  001B7A  0100               	movlb	0	; () banked
  2789  001B7C  6FD9               	movwf	printf@f& (0+255),b
  2790  001B7E  0EFF               	movlw	high STR_5
  2791  001B80  0100               	movlb	0	; () banked
  2792  001B82  6FDA               	movwf	(printf@f+1)& (0+255),b
  2793  001B84  C0F0  F0DB         	movff	_rpm,?_printf+2
  2794  001B88  C0F1  F0DC         	movff	_rpm+1,?_printf+3
  2795  001B8C  C055  F0DD         	movff	_duty_cycle,?_printf+4
  2796  001B90  0100               	movlb	0	; () banked
  2797  001B92  6BDE               	clrf	(?_printf+5)& (0+255),b
  2798  001B94  ECEB  F005         	call	_printf	;wreg free
  2799                           
  2800                           ;Main.c: 157: Monitor_Heater();
  2801  001B98  EC94  F024         	call	_Monitor_Heater	;wreg free
  2802                           
  2803                           ;Main.c: 158: Test_Alarm();
  2804  001B9C  EC52  F011         	call	_Test_Alarm	;wreg free
  2805                           
  2806                           ;Main.c: 159: Update_Screen();
  2807  001BA0  EC0E  F000         	call	_Update_Screen	;wreg free
  2808  001BA4  D000               	goto	l10527
  2809  001BA6                     l10527:
  2810                           
  2811                           ;Main.c: 160: }
  2812                           ;Main.c: 162: if (check_for_button_input() == 1)
  2813  001BA6  ECCD  F01C         	call	_check_for_button_input	;wreg free
  2814  001BAA  06E8               	decf	wreg,f,c
  2815  001BAC  A4D8               	btfss	status,2,c
  2816  001BAE  D02C               	goto	l10553
  2817                           
  2818                           ;Main.c: 163: {
  2819                           ;Main.c: 165: nec_ok = 0;
  2820  001BB0  0E00               	movlw	0
  2821  001BB2  6E3F               	movwf	_nec_ok+1,c
  2822  001BB4  0E00               	movlw	0
  2823  001BB6  6E3E               	movwf	_nec_ok,c
  2824                           
  2825                           ;Main.c: 166: switch (found)
  2826  001BB8  D017               	goto	l10551
  2827  001BBA                     l10531:
  2828                           
  2829                           ;Main.c: 169: Do_Beep_Good();
  2830  001BBA  EC0A  F026         	call	_Do_Beep_Good	;wreg free
  2831                           
  2832                           ;Main.c: 170: Do_Setup_Time();
  2833  001BBE  ECE6  F017         	call	_Do_Setup_Time	;wreg free
  2834                           
  2835                           ;Main.c: 171: break;
  2836  001BC2  D022               	goto	l10553
  2837  001BC4                     l10535:
  2838                           
  2839                           ;Main.c: 174: Do_Beep_Good();
  2840  001BC4  EC0A  F026         	call	_Do_Beep_Good	;wreg free
  2841                           
  2842                           ;Main.c: 175: Do_Setup_Alarm_Time();
  2843  001BC8  EC8D  F01A         	call	_Do_Setup_Alarm_Time	;wreg free
  2844                           
  2845                           ;Main.c: 176: break;
  2846  001BCC  D01D               	goto	l10553
  2847  001BCE                     l10539:
  2848                           
  2849                           ;Main.c: 179: Do_Beep_Good();
  2850  001BCE  EC0A  F026         	call	_Do_Beep_Good	;wreg free
  2851                           
  2852                           ;Main.c: 180: Do_Setup_Heater_Temp();
  2853  001BD2  EC74  F01D         	call	_Do_Setup_Heater_Temp	;wreg free
  2854                           
  2855                           ;Main.c: 181: break;
  2856  001BD6  D018               	goto	l10553
  2857  001BD8                     l10543:
  2858                           
  2859                           ;Main.c: 184: Do_Beep_Good();
  2860  001BD8  EC0A  F026         	call	_Do_Beep_Good	;wreg free
  2861                           
  2862                           ;Main.c: 185: Toggle_Heater();
  2863  001BDC  EC6C  F026         	call	_Toggle_Heater	;wreg free
  2864                           
  2865                           ;Main.c: 186: break;
  2866  001BE0  D013               	goto	l10553
  2867  001BE2                     l10547:
  2868                           
  2869                           ;Main.c: 189: Do_Beep_Bad();
  2870  001BE2  EC16  F026         	call	_Do_Beep_Bad	;wreg free
  2871                           
  2872                           ;Main.c: 191: }
  2873                           
  2874                           ;Main.c: 190: break;
  2875  001BE6  D010               	goto	l10553
  2876  001BE8                     l10551:
  2877  001BE8  0100               	movlb	0	; () banked
  2878  001BEA  51F4               	movf	_found& (0+255),w,b
  2879                           
  2880                           ; Switch size 1, requested type "space"
  2881                           ; Number of cases is 4, Range of values is 0 to 5
  2882                           ; switch strategies available:
  2883                           ; Name         Instructions Cycles
  2884                           ; simple_byte           13     7 (average)
  2885                           ;	Chosen strategy is simple_byte
  2886  001BEC  0A00               	xorlw	0	; case 0
  2887  001BEE  B4D8               	btfsc	status,2,c
  2888  001BF0  D7E4               	goto	l10531
  2889  001BF2  0A01               	xorlw	1	; case 1
  2890  001BF4  B4D8               	btfsc	status,2,c
  2891  001BF6  D7E6               	goto	l10535
  2892  001BF8  0A03               	xorlw	3	; case 2
  2893  001BFA  B4D8               	btfsc	status,2,c
  2894  001BFC  D7E8               	goto	l10539
  2895  001BFE  0A07               	xorlw	7	; case 5
  2896  001C00  B4D8               	btfsc	status,2,c
  2897  001C02  D7EA               	goto	l10543
  2898  001C04  D7EE               	goto	l10547
  2899                           
  2900                           ; BSR set to: 0
  2901  001C06  D000               	goto	l10553
  2902  001C08                     l10553:
  2903                           
  2904                           ;Main.c: 192: }
  2905                           ;Main.c: 202: if (INT2_flag == 1)
  2906  001C08  0100               	movlb	0	; () banked
  2907  001C0A  05F2               	decf	_INT2_flag& (0+255),w,b
  2908  001C0C  A4D8               	btfss	status,2,c
  2909  001C0E  D709               	goto	l10495
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;Main.c: 203: {
  2913                           ;Main.c: 205: INT2_flag = 0;
  2914  001C10  0E00               	movlw	0
  2915  001C12  0100               	movlb	0	; () banked
  2916  001C14  6FF2               	movwf	_INT2_flag& (0+255),b
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;Main.c: 206: ALARMEN = (!ALARMEN);
  2920  001C16  0100               	movlb	0	; () banked
  2921  001C18  51EA               	movf	_ALARMEN& (0+255),w,b
  2922  001C1A  0100               	movlb	0	; () banked
  2923  001C1C  11EB               	iorwf	(_ALARMEN+1)& (0+255),w,b
  2924  001C1E  A4D8               	btfss	status,2,c
  2925  001C20  D002               	goto	u8190
  2926  001C22  0E01               	movlw	1
  2927  001C24  D001               	goto	u8200
  2928  001C26                     u8190:
  2929  001C26  0E00               	movlw	0
  2930  001C28                     u8200:
  2931  001C28  0100               	movlb	0	; () banked
  2932  001C2A  6FEA               	movwf	_ALARMEN& (0+255),b
  2933  001C2C  6BEB               	clrf	(_ALARMEN+1)& (0+255),b
  2934                           
  2935                           ; BSR set to: 0
  2936                           
  2937                           ; BSR set to: 0
  2938  001C2E  D6F9               	goto	l10495
  2939                           
  2940                           ; BSR set to: 0
  2941                           
  2942                           ; BSR set to: 0
  2943  001C30  EF0C  F000         	goto	start
  2944  001C34                     __end_of_main:
  2945                           	opt stack 0
  2946                           tblptru	equ	0xFF8
  2947                           tblptrh	equ	0xFF7
  2948                           tblptrl	equ	0xFF6
  2949                           tablat	equ	0xFF5
  2950                           postinc0	equ	0xFEE
  2951                           wreg	equ	0xFE8
  2952                           postdec1	equ	0xFE5
  2953                           fsr1l	equ	0xFE1
  2954                           status	equ	0xFD8
  2955                           
  2956 ;; *************** function _get_RPM *****************
  2957 ;; Defined at:
  2958 ;;		line 55 in file "Fan_Support.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;		None
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  RPS             2   29[BANK1 ] int 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  2   27[BANK1 ] int 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2972 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;Total ram usage:        4 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    5
  2979 ;; This function calls:
  2980 ;;		___awdiv
  2981 ;;		___wmul
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text1
  2988  00474A                     __ptext1:
  2989                           	opt stack 0
  2990  00474A                     _get_RPM:
  2991                           	opt stack 25
  2992                           
  2993                           ;Fan_Support.c: 58: int RPS = TMR3L / 2;
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;incstack = 0
  2997  00474A  CFB2 F16B          	movff	4018,___awdiv@dividend	;volatile
  2998  00474E  0101               	movlb	1	; () banked
  2999  004750  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  3000  004752  0E00               	movlw	0
  3001  004754  0101               	movlb	1	; () banked
  3002  004756  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3003  004758  0E02               	movlw	2
  3004  00475A  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3005  00475C  ECBE  F019         	call	___awdiv	;wreg free
  3006  004760  C16B  F175         	movff	?___awdiv,get_RPM@RPS
  3007  004764  C16C  F176         	movff	?___awdiv+1,get_RPM@RPS+1
  3008                           
  3009                           ;Fan_Support.c: 60: TMR3L = 0;
  3010  004768  0E00               	movlw	0
  3011  00476A  6EB2               	movwf	4018,c	;volatile
  3012                           
  3013                           ;Fan_Support.c: 61: return (RPS * 60);
  3014  00476C  C175  F0CD         	movff	get_RPM@RPS,___wmul@multiplier
  3015  004770  C176  F0CE         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3016  004774  0E00               	movlw	0
  3017  004776  0100               	movlb	0	; () banked
  3018  004778  6FD0               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3019  00477A  0E3C               	movlw	60
  3020  00477C  6FCF               	movwf	___wmul@multiplicand& (0+255),b
  3021  00477E  EC45  F024         	call	___wmul	;wreg free
  3022  004782  C0CD  F173         	movff	?___wmul,?_get_RPM
  3023  004786  C0CE  F174         	movff	?___wmul+1,?_get_RPM+1
  3024  00478A  D000               	goto	l36
  3025  00478C                     l36:
  3026  00478C  0012               	return		;funcret
  3027  00478E                     __end_of_get_RPM:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           postinc0	equ	0xFEE
  3034                           wreg	equ	0xFE8
  3035                           postdec1	equ	0xFE5
  3036                           fsr1l	equ	0xFE1
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _Update_Screen *****************
  3040 ;; Defined at:
  3041 ;;		line 77 in file "Main_Screen.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  neg_tempF       2   32[BANK1 ] int 
  3046 ;;  neg_DS1621_t    1   34[BANK1 ] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  2  366[None  ] int 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:        7 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:   11
  3063 ;; This function calls:
  3064 ;;		___awdiv
  3065 ;;		___awmod
  3066 ;;		___ftmul
  3067 ;;		___fttol
  3068 ;;		_drawtext
  3069 ;;		_strcpy
  3070 ;; This function is called by:
  3071 ;;		_main
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text2
  3076  00001C                     __ptext2:
  3077                           	opt stack 0
  3078  00001C                     _Update_Screen:
  3079                           	opt stack 19
  3080                           
  3081                           ;Main_Screen.c: 79: if ((DS1621_tempC & 0x80) == 0x80)
  3082                           
  3083                           ;incstack = 0
  3084  00001C  0100               	movlb	0	; () banked
  3085  00001E  AFEC               	btfss	_DS1621_tempC& (0+255),7,b
  3086  000020  D026               	goto	l10095
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;Main_Screen.c: 80: {
  3090                           ;Main_Screen.c: 81: tempC[0] = '-';
  3091  000022  0E2D               	movlw	45
  3092  000024  0100               	movlb	0	; () banked
  3093  000026  6FC3               	movwf	_tempC& (0+255),b
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;Main_Screen.c: 82: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  3097  000028  0100               	movlb	0	; () banked
  3098  00002A  51EC               	movf	_DS1621_tempC& (0+255),w,b
  3099  00002C  0B7F               	andlw	127
  3100  00002E  0800               	sublw	0
  3101  000030  0F80               	addlw	128
  3102  000032  0101               	movlb	1	; () banked
  3103  000034  6F7A               	movwf	Update_Screen@neg_DS1621_tempC& (0+255),b
  3104                           
  3105                           ; BSR set to: 1
  3106                           ;Main_Screen.c: 83: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  3107  000036  C17A  F16B         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  3108  00003A  0101               	movlb	1	; () banked
  3109  00003C  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  3110  00003E  0E00               	movlw	0
  3111  000040  0101               	movlb	1	; () banked
  3112  000042  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3113  000044  0E0A               	movlw	10
  3114  000046  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3115  000048  ECBE  F019         	call	___awdiv	;wreg free
  3116  00004C  0101               	movlb	1	; () banked
  3117  00004E  516B               	movf	?___awdiv& (0+255),w,b
  3118  000050  0F30               	addlw	48
  3119  000052  0100               	movlb	0	; () banked
  3120  000054  6FC4               	movwf	(_tempC+1)& (0+255),b
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;Main_Screen.c: 84: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  3124  000056  C17A  F167         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  3125  00005A  0101               	movlb	1	; () banked
  3126  00005C  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  3127  00005E  0E00               	movlw	0
  3128  000060  0101               	movlb	1	; () banked
  3129  000062  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3130  000064  0E0A               	movlw	10
  3131  000066  6F69               	movwf	___awmod@divisor& (0+255),b
  3132  000068  EC73  F01C         	call	___awmod	;wreg free
  3133  00006C  D01E               	goto	L1
  3134  00006E                     l10095:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;Main_Screen.c: 86: else
  3138                           ;Main_Screen.c: 87: {
  3139                           ;Main_Screen.c: 88: tempC[0] = '+';
  3140  00006E  0E2B               	movlw	43
  3141  000070  0100               	movlb	0	; () banked
  3142  000072  6FC3               	movwf	_tempC& (0+255),b
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;Main_Screen.c: 89: tempC[1] = DS1621_tempC/10 + '0';
  3146  000074  C0EC  F16B         	movff	_DS1621_tempC,___awdiv@dividend
  3147  000078  C0ED  F16C         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3148  00007C  0E00               	movlw	0
  3149  00007E  0101               	movlb	1	; () banked
  3150  000080  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3151  000082  0E0A               	movlw	10
  3152  000084  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3153  000086  ECBE  F019         	call	___awdiv	;wreg free
  3154  00008A  0101               	movlb	1	; () banked
  3155  00008C  516B               	movf	?___awdiv& (0+255),w,b
  3156  00008E  0F30               	addlw	48
  3157  000090  0100               	movlb	0	; () banked
  3158  000092  6FC4               	movwf	(_tempC+1)& (0+255),b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;Main_Screen.c: 90: tempC[2] = DS1621_tempC%10 + '0';
  3162  000094  C0EC  F167         	movff	_DS1621_tempC,___awmod@dividend
  3163  000098  C0ED  F168         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3164  00009C  0E00               	movlw	0
  3165  00009E  0101               	movlb	1	; () banked
  3166  0000A0  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3167  0000A2  0E0A               	movlw	10
  3168  0000A4  6F69               	movwf	___awmod@divisor& (0+255),b
  3169  0000A6  EC73  F01C         	call	___awmod	;wreg free
  3170  0000AA                     L1:
  3171  0000AA  0101               	movlb	1	; () banked
  3172  0000AC  5167               	movf	?___awmod& (0+255),w,b
  3173  0000AE  0F30               	addlw	48
  3174  0000B0  0100               	movlb	0	; () banked
  3175  0000B2  6FC5               	movwf	(_tempC+2)& (0+255),b
  3176  0000B4  D000               	goto	l10101
  3177  0000B6                     l10101:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;Main_Screen.c: 91: }
  3181                           ;Main_Screen.c: 93: if (DS1621_tempF < 0)
  3182  0000B6  AE35               	btfss	_DS1621_tempF+1,7,c
  3183  0000B8  D036               	goto	l10111
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;Main_Screen.c: 94: {
  3187                           ;Main_Screen.c: 95: tempF[0] = '-';
  3188  0000BA  0E2D               	movlw	45
  3189  0000BC  0100               	movlb	0	; () banked
  3190  0000BE  6FC7               	movwf	_tempF& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;Main_Screen.c: 96: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  3194  0000C0  0E7F               	movlw	127
  3195  0000C2  1434               	andwf	_DS1621_tempF,w,c
  3196  0000C4  0101               	movlb	1	; () banked
  3197  0000C6  6F74               	movwf	??_Update_Screen& (0+255),b
  3198  0000C8  0E00               	movlw	0
  3199  0000CA  1435               	andwf	_DS1621_tempF+1,w,c
  3200  0000CC  0101               	movlb	1	; () banked
  3201  0000CE  6F75               	movwf	(??_Update_Screen+1)& (0+255),b
  3202  0000D0  0101               	movlb	1	; () banked
  3203  0000D2  1F74               	comf	??_Update_Screen& (0+255),f,b
  3204  0000D4  1F75               	comf	(??_Update_Screen+1)& (0+255),f,b
  3205  0000D6  4B74               	infsnz	??_Update_Screen& (0+255),f,b
  3206  0000D8  2B75               	incf	(??_Update_Screen+1)& (0+255),f,b
  3207  0000DA  0E80               	movlw	128
  3208  0000DC  0101               	movlb	1	; () banked
  3209  0000DE  2574               	addwf	??_Update_Screen& (0+255),w,b
  3210  0000E0  0101               	movlb	1	; () banked
  3211  0000E2  6F78               	movwf	Update_Screen@neg_tempF& (0+255),b
  3212  0000E4  0E00               	movlw	0
  3213  0000E6  0101               	movlb	1	; () banked
  3214  0000E8  2175               	addwfc	(??_Update_Screen+1)& (0+255),w,b
  3215  0000EA  0101               	movlb	1	; () banked
  3216  0000EC  6F79               	movwf	(Update_Screen@neg_tempF+1)& (0+255),b
  3217                           
  3218                           ; BSR set to: 1
  3219                           ;Main_Screen.c: 97: tempF[1] = neg_tempF/10 + '0';
  3220  0000EE  C178  F16B         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3221  0000F2  C179  F16C         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3222  0000F6  0E00               	movlw	0
  3223  0000F8  0101               	movlb	1	; () banked
  3224  0000FA  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3225  0000FC  0E0A               	movlw	10
  3226  0000FE  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3227  000100  ECBE  F019         	call	___awdiv	;wreg free
  3228  000104  0101               	movlb	1	; () banked
  3229  000106  516B               	movf	?___awdiv& (0+255),w,b
  3230  000108  0F30               	addlw	48
  3231  00010A  0100               	movlb	0	; () banked
  3232  00010C  6FC8               	movwf	(_tempF+1)& (0+255),b
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;Main_Screen.c: 98: tempF[2] = neg_tempF%10 + '0';
  3236  00010E  C178  F167         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3237  000112  C179  F168         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3238  000116  0E00               	movlw	0
  3239  000118  0101               	movlb	1	; () banked
  3240  00011A  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3241  00011C  0E0A               	movlw	10
  3242  00011E  6F69               	movwf	___awmod@divisor& (0+255),b
  3243  000120  EC73  F01C         	call	___awmod	;wreg free
  3244  000124  D01E               	goto	L2
  3245  000126                     l10111:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;Main_Screen.c: 100: else
  3249                           ;Main_Screen.c: 101: {
  3250                           ;Main_Screen.c: 102: tempF[0] = '+';
  3251  000126  0E2B               	movlw	43
  3252  000128  0100               	movlb	0	; () banked
  3253  00012A  6FC7               	movwf	_tempF& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;Main_Screen.c: 103: tempF[1] = DS1621_tempF/10 + '0';
  3257  00012C  C034  F16B         	movff	_DS1621_tempF,___awdiv@dividend
  3258  000130  C035  F16C         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3259  000134  0E00               	movlw	0
  3260  000136  0101               	movlb	1	; () banked
  3261  000138  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3262  00013A  0E0A               	movlw	10
  3263  00013C  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3264  00013E  ECBE  F019         	call	___awdiv	;wreg free
  3265  000142  0101               	movlb	1	; () banked
  3266  000144  516B               	movf	?___awdiv& (0+255),w,b
  3267  000146  0F30               	addlw	48
  3268  000148  0100               	movlb	0	; () banked
  3269  00014A  6FC8               	movwf	(_tempF+1)& (0+255),b
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;Main_Screen.c: 104: tempF[2] = DS1621_tempF%10 + '0';
  3273  00014C  C034  F167         	movff	_DS1621_tempF,___awmod@dividend
  3274  000150  C035  F168         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3275  000154  0E00               	movlw	0
  3276  000156  0101               	movlb	1	; () banked
  3277  000158  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3278  00015A  0E0A               	movlw	10
  3279  00015C  6F69               	movwf	___awmod@divisor& (0+255),b
  3280  00015E  EC73  F01C         	call	___awmod	;wreg free
  3281  000162                     L2:
  3282  000162  0101               	movlb	1	; () banked
  3283  000164  5167               	movf	?___awmod& (0+255),w,b
  3284  000166  0F30               	addlw	48
  3285  000168  0100               	movlb	0	; () banked
  3286  00016A  6FC9               	movwf	(_tempF+2)& (0+255),b
  3287  00016C  D000               	goto	l10117
  3288  00016E                     l10117:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;Main_Screen.c: 105: }
  3292                           ;Main_Screen.c: 107: time[0] = (hour>>4) + '0';
  3293  00016E  0100               	movlb	0	; () banked
  3294  000170  398A               	swapf	_hour& (0+255),w,b
  3295  000172  0B0F               	andlw	15
  3296  000174  0F30               	addlw	48
  3297  000176  0100               	movlb	0	; () banked
  3298  000178  6F99               	movwf	_time& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;Main_Screen.c: 108: time[1] = (hour & 0x0f)+ '0';
  3302  00017A  0100               	movlb	0	; () banked
  3303  00017C  518A               	movf	_hour& (0+255),w,b
  3304  00017E  0B0F               	andlw	15
  3305  000180  0F30               	addlw	48
  3306  000182  0100               	movlb	0	; () banked
  3307  000184  6F9A               	movwf	(_time+1)& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;Main_Screen.c: 109: time[3] = (minute>>4) + '0';
  3311  000186  0100               	movlb	0	; () banked
  3312  000188  398B               	swapf	_minute& (0+255),w,b
  3313  00018A  0B0F               	andlw	15
  3314  00018C  0F30               	addlw	48
  3315  00018E  0100               	movlb	0	; () banked
  3316  000190  6F9C               	movwf	(_time+3)& (0+255),b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;Main_Screen.c: 110: time[4] = (minute & 0x0f)+ '0';
  3320  000192  0100               	movlb	0	; () banked
  3321  000194  518B               	movf	_minute& (0+255),w,b
  3322  000196  0B0F               	andlw	15
  3323  000198  0F30               	addlw	48
  3324  00019A  0100               	movlb	0	; () banked
  3325  00019C  6F9D               	movwf	(_time+4)& (0+255),b
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;Main_Screen.c: 111: time[6] = (second>>4) + '0';
  3329  00019E  0100               	movlb	0	; () banked
  3330  0001A0  39F5               	swapf	_second& (0+255),w,b
  3331  0001A2  0B0F               	andlw	15
  3332  0001A4  0F30               	addlw	48
  3333  0001A6  0100               	movlb	0	; () banked
  3334  0001A8  6F9F               	movwf	(_time+6)& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;Main_Screen.c: 112: time[7] = (second & 0x0f)+ '0';
  3338  0001AA  0100               	movlb	0	; () banked
  3339  0001AC  51F5               	movf	_second& (0+255),w,b
  3340  0001AE  0B0F               	andlw	15
  3341  0001B0  0F30               	addlw	48
  3342  0001B2  0100               	movlb	0	; () banked
  3343  0001B4  6FA0               	movwf	(_time+7)& (0+255),b
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;Main_Screen.c: 113: date[0] = (month>>4) + '0';
  3347  0001B6  0100               	movlb	0	; () banked
  3348  0001B8  398C               	swapf	_month& (0+255),w,b
  3349  0001BA  0B0F               	andlw	15
  3350  0001BC  0F30               	addlw	48
  3351  0001BE  0100               	movlb	0	; () banked
  3352  0001C0  6F90               	movwf	_date& (0+255),b
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;Main_Screen.c: 114: date[1] = (month & 0x0f)+ '0';
  3356  0001C2  0100               	movlb	0	; () banked
  3357  0001C4  518C               	movf	_month& (0+255),w,b
  3358  0001C6  0B0F               	andlw	15
  3359  0001C8  0F30               	addlw	48
  3360  0001CA  0100               	movlb	0	; () banked
  3361  0001CC  6F91               	movwf	(_date+1)& (0+255),b
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;Main_Screen.c: 115: date[3] = (day>>4) + '0';
  3365  0001CE  0100               	movlb	0	; () banked
  3366  0001D0  3988               	swapf	_day& (0+255),w,b
  3367  0001D2  0B0F               	andlw	15
  3368  0001D4  0F30               	addlw	48
  3369  0001D6  0100               	movlb	0	; () banked
  3370  0001D8  6F93               	movwf	(_date+3)& (0+255),b
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;Main_Screen.c: 116: date[4] = (day & 0x0f)+ '0';
  3374  0001DA  0100               	movlb	0	; () banked
  3375  0001DC  5188               	movf	_day& (0+255),w,b
  3376  0001DE  0B0F               	andlw	15
  3377  0001E0  0F30               	addlw	48
  3378  0001E2  0100               	movlb	0	; () banked
  3379  0001E4  6F94               	movwf	(_date+4)& (0+255),b
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;Main_Screen.c: 117: date[6] = (year>>4) + '0';
  3383  0001E6  0100               	movlb	0	; () banked
  3384  0001E8  398F               	swapf	_year& (0+255),w,b
  3385  0001EA  0B0F               	andlw	15
  3386  0001EC  0F30               	addlw	48
  3387  0001EE  0100               	movlb	0	; () banked
  3388  0001F0  6F96               	movwf	(_date+6)& (0+255),b
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;Main_Screen.c: 118: date[7] = (year & 0x0f)+ '0';
  3392  0001F2  0100               	movlb	0	; () banked
  3393  0001F4  518F               	movf	_year& (0+255),w,b
  3394  0001F6  0B0F               	andlw	15
  3395  0001F8  0F30               	addlw	48
  3396  0001FA  0100               	movlb	0	; () banked
  3397  0001FC  6F97               	movwf	(_date+7)& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;Main_Screen.c: 119: alarm_time[0] = (alarm_hour>>4) + '0';
  3401  0001FE  3850               	swapf	_alarm_hour,w,c
  3402  000200  0B0F               	andlw	15
  3403  000202  0F30               	addlw	48
  3404  000204  0101               	movlb	1	; () banked
  3405  000206  6F34               	movwf	_alarm_time& (0+255),b
  3406                           
  3407                           ; BSR set to: 1
  3408                           ;Main_Screen.c: 120: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  3409  000208  5050               	movf	_alarm_hour,w,c
  3410  00020A  0B0F               	andlw	15
  3411  00020C  0F30               	addlw	48
  3412  00020E  0101               	movlb	1	; () banked
  3413  000210  6F35               	movwf	(_alarm_time+1)& (0+255),b
  3414                           
  3415                           ; BSR set to: 1
  3416                           ;Main_Screen.c: 121: alarm_time[3] = (alarm_minute>>4) + '0';
  3417  000212  3851               	swapf	_alarm_minute,w,c
  3418  000214  0B0F               	andlw	15
  3419  000216  0F30               	addlw	48
  3420  000218  0101               	movlb	1	; () banked
  3421  00021A  6F37               	movwf	(_alarm_time+3)& (0+255),b
  3422                           
  3423                           ; BSR set to: 1
  3424                           ;Main_Screen.c: 122: alarm_time[4] = (alarm_minute & 0x0f)+ '0';
  3425  00021C  5051               	movf	_alarm_minute,w,c
  3426  00021E  0B0F               	andlw	15
  3427  000220  0F30               	addlw	48
  3428  000222  0101               	movlb	1	; () banked
  3429  000224  6F38               	movwf	(_alarm_time+4)& (0+255),b
  3430                           
  3431                           ; BSR set to: 1
  3432                           ;Main_Screen.c: 123: alarm_time[6] = (alarm_second>>4) + '0';
  3433  000226  3852               	swapf	_alarm_second,w,c
  3434  000228  0B0F               	andlw	15
  3435  00022A  0F30               	addlw	48
  3436  00022C  0101               	movlb	1	; () banked
  3437  00022E  6F3A               	movwf	(_alarm_time+6)& (0+255),b
  3438                           
  3439                           ; BSR set to: 1
  3440                           ;Main_Screen.c: 124: alarm_time[7] = (alarm_second & 0x0f)+ '0';
  3441  000230  5052               	movf	_alarm_second,w,c
  3442  000232  0B0F               	andlw	15
  3443  000234  0F30               	addlw	48
  3444  000236  0101               	movlb	1	; () banked
  3445  000238  6F3B               	movwf	(_alarm_time+7)& (0+255),b
  3446                           
  3447                           ; BSR set to: 1
  3448                           ;Main_Screen.c: 126: if (ALARMEN == 1)
  3449  00023A  0100               	movlb	0	; () banked
  3450  00023C  05EA               	decf	_ALARMEN& (0+255),w,b
  3451  00023E  0100               	movlb	0	; () banked
  3452  000240  11EB               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3453  000242  A4D8               	btfss	status,2,c
  3454  000244  D00F               	goto	l10157
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;Main_Screen.c: 127: {
  3458                           ;Main_Screen.c: 128: strcpy(Alarm_SW_Txt, "ON ");
  3459  000246  0EB7               	movlw	low _Alarm_SW_Txt
  3460  000248  0100               	movlb	0	; () banked
  3461  00024A  6FCD               	movwf	strcpy@to& (0+255),b
  3462  00024C  0E00               	movlw	high _Alarm_SW_Txt
  3463  00024E  0100               	movlb	0	; () banked
  3464  000250  6FCE               	movwf	(strcpy@to+1)& (0+255),b
  3465  000252  0EE9               	movlw	low STR_20
  3466  000254  0100               	movlb	0	; () banked
  3467  000256  6FCF               	movwf	strcpy@from& (0+255),b
  3468  000258  0EFF               	movlw	high STR_20
  3469  00025A  0100               	movlb	0	; () banked
  3470  00025C  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  3471  00025E  EC61  F024         	call	_strcpy	;wreg free
  3472                           
  3473                           ;Main_Screen.c: 129: }
  3474  000262  D00F               	goto	l10159
  3475  000264                     l10157:
  3476                           
  3477                           ;Main_Screen.c: 130: else
  3478                           ;Main_Screen.c: 131: {
  3479                           ;Main_Screen.c: 132: strcpy(Alarm_SW_Txt, "OFF");
  3480  000264  0EB7               	movlw	low _Alarm_SW_Txt
  3481  000266  0100               	movlb	0	; () banked
  3482  000268  6FCD               	movwf	strcpy@to& (0+255),b
  3483  00026A  0E00               	movlw	high _Alarm_SW_Txt
  3484  00026C  0100               	movlb	0	; () banked
  3485  00026E  6FCE               	movwf	(strcpy@to+1)& (0+255),b
  3486  000270  0EED               	movlw	low STR_21
  3487  000272  0100               	movlb	0	; () banked
  3488  000274  6FCF               	movwf	strcpy@from& (0+255),b
  3489  000276  0EFF               	movlw	high STR_21
  3490  000278  0100               	movlb	0	; () banked
  3491  00027A  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  3492  00027C  EC61  F024         	call	_strcpy	;wreg free
  3493  000280  D000               	goto	l10159
  3494  000282                     l10159:
  3495                           
  3496                           ;Main_Screen.c: 133: }
  3497                           ;Main_Screen.c: 135: Heater_Set_Temp_Txt[0] = heater_set_temp/100 + '0';
  3498  000282  C057  F16B         	movff	_heater_set_temp,___awdiv@dividend
  3499  000286  0101               	movlb	1	; () banked
  3500  000288  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  3501  00028A  0E00               	movlw	0
  3502  00028C  0101               	movlb	1	; () banked
  3503  00028E  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3504  000290  0E64               	movlw	100
  3505  000292  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3506  000294  ECBE  F019         	call	___awdiv	;wreg free
  3507  000298  0101               	movlb	1	; () banked
  3508  00029A  516B               	movf	?___awdiv& (0+255),w,b
  3509  00029C  0F30               	addlw	48
  3510  00029E  0100               	movlb	0	; () banked
  3511  0002A0  6FA8               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;Main_Screen.c: 136: Heater_Set_Temp_Txt[1] = (heater_set_temp%100)/10 + '0';
  3515  0002A2  0E00               	movlw	0
  3516  0002A4  0101               	movlb	1	; () banked
  3517  0002A6  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3518  0002A8  0E64               	movlw	100
  3519  0002AA  6F69               	movwf	___awmod@divisor& (0+255),b
  3520  0002AC  C057  F167         	movff	_heater_set_temp,___awmod@dividend
  3521  0002B0  0101               	movlb	1	; () banked
  3522  0002B2  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  3523  0002B4  EC73  F01C         	call	___awmod	;wreg free
  3524  0002B8  C167  F16B         	movff	?___awmod,___awdiv@dividend
  3525  0002BC  C168  F16C         	movff	?___awmod+1,___awdiv@dividend+1
  3526  0002C0  0E00               	movlw	0
  3527  0002C2  0101               	movlb	1	; () banked
  3528  0002C4  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3529  0002C6  0E0A               	movlw	10
  3530  0002C8  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3531  0002CA  ECBE  F019         	call	___awdiv	;wreg free
  3532  0002CE  0101               	movlb	1	; () banked
  3533  0002D0  516B               	movf	?___awdiv& (0+255),w,b
  3534  0002D2  0F30               	addlw	48
  3535  0002D4  0100               	movlb	0	; () banked
  3536  0002D6  6FA9               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;Main_Screen.c: 137: Heater_Set_Temp_Txt[2] = heater_set_temp%10 + '0';
  3540  0002D8  C057  F167         	movff	_heater_set_temp,___awmod@dividend
  3541  0002DC  0101               	movlb	1	; () banked
  3542  0002DE  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  3543  0002E0  0E00               	movlw	0
  3544  0002E2  0101               	movlb	1	; () banked
  3545  0002E4  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3546  0002E6  0E0A               	movlw	10
  3547  0002E8  6F69               	movwf	___awmod@divisor& (0+255),b
  3548  0002EA  EC73  F01C         	call	___awmod	;wreg free
  3549  0002EE  0101               	movlb	1	; () banked
  3550  0002F0  5167               	movf	?___awmod& (0+255),w,b
  3551  0002F2  0F30               	addlw	48
  3552  0002F4  0100               	movlb	0	; () banked
  3553  0002F6  6FAA               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;Main_Screen.c: 139: if (HEATER == 1)
  3557  0002F8  0445               	decf	_HEATER,w,c
  3558  0002FA  A4D8               	btfss	status,2,c
  3559  0002FC  D00F               	goto	l10169
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;Main_Screen.c: 140: {
  3563                           ;Main_Screen.c: 141: strcpy(Heater_SW_Txt, "ON ");
  3564  0002FE  0EBF               	movlw	low _Heater_SW_Txt
  3565  000300  0100               	movlb	0	; () banked
  3566  000302  6FCD               	movwf	strcpy@to& (0+255),b
  3567  000304  0E00               	movlw	high _Heater_SW_Txt
  3568  000306  0100               	movlb	0	; () banked
  3569  000308  6FCE               	movwf	(strcpy@to+1)& (0+255),b
  3570  00030A  0EE9               	movlw	low STR_20
  3571  00030C  0100               	movlb	0	; () banked
  3572  00030E  6FCF               	movwf	strcpy@from& (0+255),b
  3573  000310  0EFF               	movlw	high STR_20
  3574  000312  0100               	movlb	0	; () banked
  3575  000314  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  3576  000316  EC61  F024         	call	_strcpy	;wreg free
  3577                           
  3578                           ;Main_Screen.c: 142: }
  3579  00031A  D00F               	goto	l10171
  3580  00031C                     l10169:
  3581                           
  3582                           ;Main_Screen.c: 143: else
  3583                           ;Main_Screen.c: 144: {
  3584                           ;Main_Screen.c: 145: strcpy(Heater_SW_Txt, "OFF");
  3585  00031C  0EBF               	movlw	low _Heater_SW_Txt
  3586  00031E  0100               	movlb	0	; () banked
  3587  000320  6FCD               	movwf	strcpy@to& (0+255),b
  3588  000322  0E00               	movlw	high _Heater_SW_Txt
  3589  000324  0100               	movlb	0	; () banked
  3590  000326  6FCE               	movwf	(strcpy@to+1)& (0+255),b
  3591  000328  0EED               	movlw	low STR_21
  3592  00032A  0100               	movlb	0	; () banked
  3593  00032C  6FCF               	movwf	strcpy@from& (0+255),b
  3594  00032E  0EFF               	movlw	high STR_21
  3595  000330  0100               	movlb	0	; () banked
  3596  000332  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  3597  000334  EC61  F024         	call	_strcpy	;wreg free
  3598  000338  D000               	goto	l10171
  3599  00033A                     l10171:
  3600                           
  3601                           ;Main_Screen.c: 146: }
  3602                           ;Main_Screen.c: 148: if (PORTBbits.RB4 == 0) RTC_ALARM_Txt[0] = '1';
  3603  00033A  B881               	btfsc	3969,4,c	;volatile
  3604  00033C  D002               	goto	l10175
  3605  00033E  0E31               	movlw	49
  3606  000340  D001               	goto	L3
  3607  000342                     l10175:
  3608                           
  3609                           ;Main_Screen.c: 149: else RTC_ALARM_Txt[0] = '0';
  3610  000342  0E30               	movlw	48
  3611  000344                     L3:
  3612  000344  0100               	movlb	0	; () banked
  3613  000346  6FCB               	movwf	_RTC_ALARM_Txt& (0+255),b
  3614  000348  D000               	goto	l10177
  3615  00034A                     l10177:
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;Main_Screen.c: 152: DC_Txt[0] = duty_cycle/100 + '0';
  3619  00034A  C055  F16B         	movff	_duty_cycle,___awdiv@dividend
  3620  00034E  0101               	movlb	1	; () banked
  3621  000350  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  3622  000352  0E00               	movlw	0
  3623  000354  0101               	movlb	1	; () banked
  3624  000356  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3625  000358  0E64               	movlw	100
  3626  00035A  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3627  00035C  ECBE  F019         	call	___awdiv	;wreg free
  3628  000360  0101               	movlb	1	; () banked
  3629  000362  516B               	movf	?___awdiv& (0+255),w,b
  3630  000364  0F30               	addlw	48
  3631  000366  0100               	movlb	0	; () banked
  3632  000368  6FBB               	movwf	_DC_Txt& (0+255),b
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;Main_Screen.c: 153: DC_Txt[1] = (duty_cycle%100)/10 + '0';
  3636  00036A  0E00               	movlw	0
  3637  00036C  0101               	movlb	1	; () banked
  3638  00036E  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3639  000370  0E64               	movlw	100
  3640  000372  6F69               	movwf	___awmod@divisor& (0+255),b
  3641  000374  C055  F167         	movff	_duty_cycle,___awmod@dividend
  3642  000378  0101               	movlb	1	; () banked
  3643  00037A  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  3644  00037C  EC73  F01C         	call	___awmod	;wreg free
  3645  000380  C167  F16B         	movff	?___awmod,___awdiv@dividend
  3646  000384  C168  F16C         	movff	?___awmod+1,___awdiv@dividend+1
  3647  000388  0E00               	movlw	0
  3648  00038A  0101               	movlb	1	; () banked
  3649  00038C  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3650  00038E  0E0A               	movlw	10
  3651  000390  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3652  000392  ECBE  F019         	call	___awdiv	;wreg free
  3653  000396  0101               	movlb	1	; () banked
  3654  000398  516B               	movf	?___awdiv& (0+255),w,b
  3655  00039A  0F30               	addlw	48
  3656  00039C  0100               	movlb	0	; () banked
  3657  00039E  6FBC               	movwf	(_DC_Txt+1)& (0+255),b
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;Main_Screen.c: 154: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  3661  0003A0  0E00               	movlw	0
  3662  0003A2  0101               	movlb	1	; () banked
  3663  0003A4  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3664  0003A6  0E64               	movlw	100
  3665  0003A8  6F69               	movwf	___awmod@divisor& (0+255),b
  3666  0003AA  C055  F167         	movff	_duty_cycle,___awmod@dividend
  3667  0003AE  0101               	movlb	1	; () banked
  3668  0003B0  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  3669  0003B2  EC73  F01C         	call	___awmod	;wreg free
  3670  0003B6  C167  F176         	movff	?___awmod,_Update_Screen$3217
  3671  0003BA  C168  F177         	movff	?___awmod+1,_Update_Screen$3217+1
  3672                           
  3673                           ;Main_Screen.c: 154: DC_Txt[2] = (duty_cycle%100)%10 + '0';
  3674  0003BE  C176  F167         	movff	_Update_Screen$3217,___awmod@dividend
  3675  0003C2  C177  F168         	movff	_Update_Screen$3217+1,___awmod@dividend+1
  3676  0003C6  0E00               	movlw	0
  3677  0003C8  0101               	movlb	1	; () banked
  3678  0003CA  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3679  0003CC  0E0A               	movlw	10
  3680  0003CE  6F69               	movwf	___awmod@divisor& (0+255),b
  3681  0003D0  EC73  F01C         	call	___awmod	;wreg free
  3682  0003D4  0101               	movlb	1	; () banked
  3683  0003D6  5167               	movf	?___awmod& (0+255),w,b
  3684  0003D8  0F30               	addlw	48
  3685  0003DA  0100               	movlb	0	; () banked
  3686  0003DC  6FBD               	movwf	(_DC_Txt+2)& (0+255),b
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;Main_Screen.c: 156: Volt_Txt[0] = ((int) volt ) + '0';
  3690  0003DE  C031  F158         	movff	_volt,___fttol@f1
  3691  0003E2  C032  F159         	movff	_volt+1,___fttol@f1+1
  3692  0003E6  C033  F15A         	movff	_volt+2,___fttol@f1+2
  3693  0003EA  EC7F  F014         	call	___fttol	;wreg free
  3694  0003EE  0101               	movlb	1	; () banked
  3695  0003F0  5158               	movf	?___fttol& (0+255),w,b
  3696  0003F2  0F30               	addlw	48
  3697  0003F4  0100               	movlb	0	; () banked
  3698  0003F6  6FA2               	movwf	_Volt_Txt& (0+255),b
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;Main_Screen.c: 157: Volt_Txt[2] = ((int) (volt*10)%10) + '0';
  3702  0003F8  0E00               	movlw	0
  3703  0003FA  0100               	movlb	0	; () banked
  3704  0003FC  6FDC               	movwf	___ftmul@f2& (0+255),b
  3705  0003FE  0E20               	movlw	32
  3706  000400  0100               	movlb	0	; () banked
  3707  000402  6FDD               	movwf	(___ftmul@f2+1)& (0+255),b
  3708  000404  0E41               	movlw	65
  3709  000406  0100               	movlb	0	; () banked
  3710  000408  6FDE               	movwf	(___ftmul@f2+2)& (0+255),b
  3711  00040A  C031  F0D9         	movff	_volt,___ftmul@f1
  3712  00040E  C032  F0DA         	movff	_volt+1,___ftmul@f1+1
  3713  000412  C033  F0DB         	movff	_volt+2,___ftmul@f1+2
  3714  000416  ECF8  F00F         	call	___ftmul	;wreg free
  3715  00041A  C0D9  F158         	movff	?___ftmul,___fttol@f1
  3716  00041E  C0DA  F159         	movff	?___ftmul+1,___fttol@f1+1
  3717  000422  C0DB  F15A         	movff	?___ftmul+2,___fttol@f1+2
  3718  000426  EC7F  F014         	call	___fttol	;wreg free
  3719  00042A  C158  F167         	movff	?___fttol,___awmod@dividend
  3720  00042E  C159  F168         	movff	?___fttol+1,___awmod@dividend+1
  3721  000432  0E00               	movlw	0
  3722  000434  0101               	movlb	1	; () banked
  3723  000436  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3724  000438  0E0A               	movlw	10
  3725  00043A  6F69               	movwf	___awmod@divisor& (0+255),b
  3726  00043C  EC73  F01C         	call	___awmod	;wreg free
  3727  000440  0101               	movlb	1	; () banked
  3728  000442  5167               	movf	?___awmod& (0+255),w,b
  3729  000444  0F30               	addlw	48
  3730  000446  0100               	movlb	0	; () banked
  3731  000448  6FA4               	movwf	(_Volt_Txt+2)& (0+255),b
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;Main_Screen.c: 158: Volt_Txt[3] = ((int) (volt*100)%10) + '0';
  3735  00044A  0E00               	movlw	0
  3736  00044C  0100               	movlb	0	; () banked
  3737  00044E  6FDC               	movwf	___ftmul@f2& (0+255),b
  3738  000450  0EC8               	movlw	200
  3739  000452  0100               	movlb	0	; () banked
  3740  000454  6FDD               	movwf	(___ftmul@f2+1)& (0+255),b
  3741  000456  0E42               	movlw	66
  3742  000458  0100               	movlb	0	; () banked
  3743  00045A  6FDE               	movwf	(___ftmul@f2+2)& (0+255),b
  3744  00045C  C031  F0D9         	movff	_volt,___ftmul@f1
  3745  000460  C032  F0DA         	movff	_volt+1,___ftmul@f1+1
  3746  000464  C033  F0DB         	movff	_volt+2,___ftmul@f1+2
  3747  000468  ECF8  F00F         	call	___ftmul	;wreg free
  3748  00046C  C0D9  F158         	movff	?___ftmul,___fttol@f1
  3749  000470  C0DA  F159         	movff	?___ftmul+1,___fttol@f1+1
  3750  000474  C0DB  F15A         	movff	?___ftmul+2,___fttol@f1+2
  3751  000478  EC7F  F014         	call	___fttol	;wreg free
  3752  00047C  C158  F167         	movff	?___fttol,___awmod@dividend
  3753  000480  C159  F168         	movff	?___fttol+1,___awmod@dividend+1
  3754  000484  0E00               	movlw	0
  3755  000486  0101               	movlb	1	; () banked
  3756  000488  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3757  00048A  0E0A               	movlw	10
  3758  00048C  6F69               	movwf	___awmod@divisor& (0+255),b
  3759  00048E  EC73  F01C         	call	___awmod	;wreg free
  3760  000492  0101               	movlb	1	; () banked
  3761  000494  5167               	movf	?___awmod& (0+255),w,b
  3762  000496  0F30               	addlw	48
  3763  000498  0100               	movlb	0	; () banked
  3764  00049A  6FA5               	movwf	(_Volt_Txt+3)& (0+255),b
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;Main_Screen.c: 160: RPM_Txt[0] = rpm/1000 + '0';
  3768  00049C  C0F0  F16B         	movff	_rpm,___awdiv@dividend
  3769  0004A0  C0F1  F16C         	movff	_rpm+1,___awdiv@dividend+1
  3770  0004A4  0E03               	movlw	3
  3771  0004A6  0101               	movlb	1	; () banked
  3772  0004A8  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3773  0004AA  0EE8               	movlw	232
  3774  0004AC  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3775  0004AE  ECBE  F019         	call	___awdiv	;wreg free
  3776  0004B2  0101               	movlb	1	; () banked
  3777  0004B4  516B               	movf	?___awdiv& (0+255),w,b
  3778  0004B6  0F30               	addlw	48
  3779  0004B8  0100               	movlb	0	; () banked
  3780  0004BA  6FAD               	movwf	_RPM_Txt& (0+255),b
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;Main_Screen.c: 161: RPM_Txt[1] = (rpm%1000)/100 + '0';
  3784  0004BC  0E03               	movlw	3
  3785  0004BE  0101               	movlb	1	; () banked
  3786  0004C0  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3787  0004C2  0EE8               	movlw	232
  3788  0004C4  6F69               	movwf	___awmod@divisor& (0+255),b
  3789  0004C6  C0F0  F167         	movff	_rpm,___awmod@dividend
  3790  0004CA  C0F1  F168         	movff	_rpm+1,___awmod@dividend+1
  3791  0004CE  EC73  F01C         	call	___awmod	;wreg free
  3792  0004D2  C167  F16B         	movff	?___awmod,___awdiv@dividend
  3793  0004D6  C168  F16C         	movff	?___awmod+1,___awdiv@dividend+1
  3794  0004DA  0E00               	movlw	0
  3795  0004DC  0101               	movlb	1	; () banked
  3796  0004DE  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3797  0004E0  0E64               	movlw	100
  3798  0004E2  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3799  0004E4  ECBE  F019         	call	___awdiv	;wreg free
  3800  0004E8  0101               	movlb	1	; () banked
  3801  0004EA  516B               	movf	?___awdiv& (0+255),w,b
  3802  0004EC  0F30               	addlw	48
  3803  0004EE  0100               	movlb	0	; () banked
  3804  0004F0  6FAE               	movwf	(_RPM_Txt+1)& (0+255),b
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;Main_Screen.c: 162: RPM_Txt[2] = (rpm%100)/10 + '0';
  3808  0004F2  0E00               	movlw	0
  3809  0004F4  0101               	movlb	1	; () banked
  3810  0004F6  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3811  0004F8  0E64               	movlw	100
  3812  0004FA  6F69               	movwf	___awmod@divisor& (0+255),b
  3813  0004FC  C0F0  F167         	movff	_rpm,___awmod@dividend
  3814  000500  C0F1  F168         	movff	_rpm+1,___awmod@dividend+1
  3815  000504  EC73  F01C         	call	___awmod	;wreg free
  3816  000508  C167  F16B         	movff	?___awmod,___awdiv@dividend
  3817  00050C  C168  F16C         	movff	?___awmod+1,___awdiv@dividend+1
  3818  000510  0E00               	movlw	0
  3819  000512  0101               	movlb	1	; () banked
  3820  000514  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  3821  000516  0E0A               	movlw	10
  3822  000518  6F6D               	movwf	___awdiv@divisor& (0+255),b
  3823  00051A  ECBE  F019         	call	___awdiv	;wreg free
  3824  00051E  0101               	movlb	1	; () banked
  3825  000520  516B               	movf	?___awdiv& (0+255),w,b
  3826  000522  0F30               	addlw	48
  3827  000524  0100               	movlb	0	; () banked
  3828  000526  6FAF               	movwf	(_RPM_Txt+2)& (0+255),b
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;Main_Screen.c: 163: RPM_Txt[3] = (rpm % 10) + '0';
  3832  000528  C0F0  F167         	movff	_rpm,___awmod@dividend
  3833  00052C  C0F1  F168         	movff	_rpm+1,___awmod@dividend+1
  3834  000530  0E00               	movlw	0
  3835  000532  0101               	movlb	1	; () banked
  3836  000534  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  3837  000536  0E0A               	movlw	10
  3838  000538  6F69               	movwf	___awmod@divisor& (0+255),b
  3839  00053A  EC73  F01C         	call	___awmod	;wreg free
  3840  00053E  0101               	movlb	1	; () banked
  3841  000540  5167               	movf	?___awmod& (0+255),w,b
  3842  000542  0F30               	addlw	48
  3843  000544  0100               	movlb	0	; () banked
  3844  000546  6FB0               	movwf	(_RPM_Txt+3)& (0+255),b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;Main_Screen.c: 165: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3848  000548  0E17               	movlw	23
  3849  00054A  0101               	movlb	1	; () banked
  3850  00054C  6F63               	movwf	drawtext@y& (0+255),b
  3851  00054E  0EC3               	movlw	low _tempC
  3852  000550  0101               	movlb	1	; () banked
  3853  000552  6F64               	movwf	drawtext@_text& (0+255),b
  3854  000554  0E00               	movlw	high _tempC
  3855  000556  0101               	movlb	1	; () banked
  3856  000558  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  3857  00055A  0EFF               	movlw	255
  3858  00055C  0101               	movlb	1	; () banked
  3859  00055E  6F67               	movwf	(drawtext@color+1)& (0+255),b
  3860  000560  0EE0               	movlw	224
  3861  000562  6F66               	movwf	drawtext@color& (0+255),b
  3862  000564  0E00               	movlw	0
  3863  000566  0101               	movlb	1	; () banked
  3864  000568  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  3865  00056A  0E00               	movlw	0
  3866  00056C  6F68               	movwf	drawtext@bg& (0+255),b
  3867  00056E  0E02               	movlw	2
  3868  000570  0101               	movlb	1	; () banked
  3869  000572  6F6A               	movwf	drawtext@size& (0+255),b
  3870  000574  0E01               	movlw	1
  3871  000576  EC18  F015         	call	_drawtext
  3872                           
  3873                           ;Main_Screen.c: 166: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3874  00057A  0E17               	movlw	23
  3875  00057C  0101               	movlb	1	; () banked
  3876  00057E  6F63               	movwf	drawtext@y& (0+255),b
  3877  000580  0EC7               	movlw	low _tempF
  3878  000582  0101               	movlb	1	; () banked
  3879  000584  6F64               	movwf	drawtext@_text& (0+255),b
  3880  000586  0E00               	movlw	high _tempF
  3881  000588  0101               	movlb	1	; () banked
  3882  00058A  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  3883  00058C  0EFF               	movlw	255
  3884  00058E  0101               	movlb	1	; () banked
  3885  000590  6F67               	movwf	(drawtext@color+1)& (0+255),b
  3886  000592  0EE0               	movlw	224
  3887  000594  6F66               	movwf	drawtext@color& (0+255),b
  3888  000596  0E00               	movlw	0
  3889  000598  0101               	movlb	1	; () banked
  3890  00059A  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  3891  00059C  0E00               	movlw	0
  3892  00059E  6F68               	movwf	drawtext@bg& (0+255),b
  3893  0005A0  0E02               	movlw	2
  3894  0005A2  0101               	movlb	1	; () banked
  3895  0005A4  6F6A               	movwf	drawtext@size& (0+255),b
  3896  0005A6  0E46               	movlw	70
  3897  0005A8  EC18  F015         	call	_drawtext
  3898                           
  3899                           ;Main_Screen.c: 167: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3900  0005AC  0E34               	movlw	52
  3901  0005AE  0101               	movlb	1	; () banked
  3902  0005B0  6F63               	movwf	drawtext@y& (0+255),b
  3903  0005B2  0E99               	movlw	low _time
  3904  0005B4  0101               	movlb	1	; () banked
  3905  0005B6  6F64               	movwf	drawtext@_text& (0+255),b
  3906  0005B8  0E00               	movlw	high _time
  3907  0005BA  0101               	movlb	1	; () banked
  3908  0005BC  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  3909  0005BE  0E07               	movlw	7
  3910  0005C0  0101               	movlb	1	; () banked
  3911  0005C2  6F67               	movwf	(drawtext@color+1)& (0+255),b
  3912  0005C4  6966               	setf	drawtext@color& (0+255),b
  3913  0005C6  0E00               	movlw	0
  3914  0005C8  0101               	movlb	1	; () banked
  3915  0005CA  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  3916  0005CC  0E00               	movlw	0
  3917  0005CE  6F68               	movwf	drawtext@bg& (0+255),b
  3918  0005D0  0E02               	movlw	2
  3919  0005D2  0101               	movlb	1	; () banked
  3920  0005D4  6F6A               	movwf	drawtext@size& (0+255),b
  3921  0005D6  0E0F               	movlw	15
  3922  0005D8  EC18  F015         	call	_drawtext
  3923                           
  3924                           ;Main_Screen.c: 168: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3925  0005DC  0E52               	movlw	82
  3926  0005DE  0101               	movlb	1	; () banked
  3927  0005E0  6F63               	movwf	drawtext@y& (0+255),b
  3928  0005E2  0E90               	movlw	low _date
  3929  0005E4  0101               	movlb	1	; () banked
  3930  0005E6  6F64               	movwf	drawtext@_text& (0+255),b
  3931  0005E8  0E00               	movlw	high _date
  3932  0005EA  0101               	movlb	1	; () banked
  3933  0005EC  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  3934  0005EE  0E07               	movlw	7
  3935  0005F0  0101               	movlb	1	; () banked
  3936  0005F2  6F67               	movwf	(drawtext@color+1)& (0+255),b
  3937  0005F4  0EE0               	movlw	224
  3938  0005F6  6F66               	movwf	drawtext@color& (0+255),b
  3939  0005F8  0E00               	movlw	0
  3940  0005FA  0101               	movlb	1	; () banked
  3941  0005FC  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  3942  0005FE  0E00               	movlw	0
  3943  000600  6F68               	movwf	drawtext@bg& (0+255),b
  3944  000602  0E02               	movlw	2
  3945  000604  0101               	movlb	1	; () banked
  3946  000606  6F6A               	movwf	drawtext@size& (0+255),b
  3947  000608  0E0F               	movlw	15
  3948  00060A  EC18  F015         	call	_drawtext
  3949                           
  3950                           ;Main_Screen.c: 169: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  3951  00060E  0E6E               	movlw	110
  3952  000610  0101               	movlb	1	; () banked
  3953  000612  6F63               	movwf	drawtext@y& (0+255),b
  3954  000614  0E34               	movlw	low _alarm_time
  3955  000616  0101               	movlb	1	; () banked
  3956  000618  6F64               	movwf	drawtext@_text& (0+255),b
  3957  00061A  0E01               	movlw	high _alarm_time
  3958  00061C  0101               	movlb	1	; () banked
  3959  00061E  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  3960  000620  0E07               	movlw	7
  3961  000622  0101               	movlb	1	; () banked
  3962  000624  6F67               	movwf	(drawtext@color+1)& (0+255),b
  3963  000626  6966               	setf	drawtext@color& (0+255),b
  3964  000628  0E00               	movlw	0
  3965  00062A  0101               	movlb	1	; () banked
  3966  00062C  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  3967  00062E  0E00               	movlw	0
  3968  000630  6F68               	movwf	drawtext@bg& (0+255),b
  3969  000632  0E01               	movlw	1
  3970  000634  0101               	movlb	1	; () banked
  3971  000636  6F6A               	movwf	drawtext@size& (0+255),b
  3972  000638  0E0A               	movlw	10
  3973  00063A  EC18  F015         	call	_drawtext
  3974                           
  3975                           ;Main_Screen.c: 170: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  3976  00063E  0E6E               	movlw	110
  3977  000640  0101               	movlb	1	; () banked
  3978  000642  6F63               	movwf	drawtext@y& (0+255),b
  3979  000644  0EB7               	movlw	low _Alarm_SW_Txt
  3980  000646  0101               	movlb	1	; () banked
  3981  000648  6F64               	movwf	drawtext@_text& (0+255),b
  3982  00064A  0E00               	movlw	high _Alarm_SW_Txt
  3983  00064C  0101               	movlb	1	; () banked
  3984  00064E  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  3985  000650  0E07               	movlw	7
  3986  000652  0101               	movlb	1	; () banked
  3987  000654  6F67               	movwf	(drawtext@color+1)& (0+255),b
  3988  000656  6966               	setf	drawtext@color& (0+255),b
  3989  000658  0E00               	movlw	0
  3990  00065A  0101               	movlb	1	; () banked
  3991  00065C  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  3992  00065E  0E00               	movlw	0
  3993  000660  6F68               	movwf	drawtext@bg& (0+255),b
  3994  000662  0E01               	movlw	1
  3995  000664  0101               	movlb	1	; () banked
  3996  000666  6F6A               	movwf	drawtext@size& (0+255),b
  3997  000668  0E5F               	movlw	95
  3998  00066A  EC18  F015         	call	_drawtext
  3999                           
  4000                           ;Main_Screen.c: 171: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0xF800, 0x0000, 1);
  4001  00066E  0E82               	movlw	130
  4002  000670  0101               	movlb	1	; () banked
  4003  000672  6F63               	movwf	drawtext@y& (0+255),b
  4004  000674  0EA8               	movlw	low _Heater_Set_Temp_Txt
  4005  000676  0101               	movlb	1	; () banked
  4006  000678  6F64               	movwf	drawtext@_text& (0+255),b
  4007  00067A  0E00               	movlw	high _Heater_Set_Temp_Txt
  4008  00067C  0101               	movlb	1	; () banked
  4009  00067E  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  4010  000680  0EF8               	movlw	248
  4011  000682  0101               	movlb	1	; () banked
  4012  000684  6F67               	movwf	(drawtext@color+1)& (0+255),b
  4013  000686  0E00               	movlw	0
  4014  000688  6F66               	movwf	drawtext@color& (0+255),b
  4015  00068A  0E00               	movlw	0
  4016  00068C  0101               	movlb	1	; () banked
  4017  00068E  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  4018  000690  0E00               	movlw	0
  4019  000692  6F68               	movwf	drawtext@bg& (0+255),b
  4020  000694  0E01               	movlw	1
  4021  000696  0101               	movlb	1	; () banked
  4022  000698  6F6A               	movwf	drawtext@size& (0+255),b
  4023  00069A  0E23               	movlw	35
  4024  00069C  EC18  F015         	call	_drawtext
  4025                           
  4026                           ;Main_Screen.c: 172: drawtext(95, 130, Heater_SW_Txt, 0xF800 , 0x0000 , 1);
  4027  0006A0  0E82               	movlw	130
  4028  0006A2  0101               	movlb	1	; () banked
  4029  0006A4  6F63               	movwf	drawtext@y& (0+255),b
  4030  0006A6  0EBF               	movlw	low _Heater_SW_Txt
  4031  0006A8  0101               	movlb	1	; () banked
  4032  0006AA  6F64               	movwf	drawtext@_text& (0+255),b
  4033  0006AC  0E00               	movlw	high _Heater_SW_Txt
  4034  0006AE  0101               	movlb	1	; () banked
  4035  0006B0  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  4036  0006B2  0EF8               	movlw	248
  4037  0006B4  0101               	movlb	1	; () banked
  4038  0006B6  6F67               	movwf	(drawtext@color+1)& (0+255),b
  4039  0006B8  0E00               	movlw	0
  4040  0006BA  6F66               	movwf	drawtext@color& (0+255),b
  4041  0006BC  0E00               	movlw	0
  4042  0006BE  0101               	movlb	1	; () banked
  4043  0006C0  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  4044  0006C2  0E00               	movlw	0
  4045  0006C4  6F68               	movwf	drawtext@bg& (0+255),b
  4046  0006C6  0E01               	movlw	1
  4047  0006C8  0101               	movlb	1	; () banked
  4048  0006CA  6F6A               	movwf	drawtext@size& (0+255),b
  4049  0006CC  0E5F               	movlw	95
  4050  0006CE  EC18  F015         	call	_drawtext
  4051                           
  4052                           ;Main_Screen.c: 173: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4053  0006D2  0E96               	movlw	150
  4054  0006D4  0101               	movlb	1	; () banked
  4055  0006D6  6F63               	movwf	drawtext@y& (0+255),b
  4056  0006D8  0EBB               	movlw	low _DC_Txt
  4057  0006DA  0101               	movlb	1	; () banked
  4058  0006DC  6F64               	movwf	drawtext@_text& (0+255),b
  4059  0006DE  0E00               	movlw	high _DC_Txt
  4060  0006E0  0101               	movlb	1	; () banked
  4061  0006E2  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  4062  0006E4  0E07               	movlw	7
  4063  0006E6  0101               	movlb	1	; () banked
  4064  0006E8  6F67               	movwf	(drawtext@color+1)& (0+255),b
  4065  0006EA  0EE0               	movlw	224
  4066  0006EC  6F66               	movwf	drawtext@color& (0+255),b
  4067  0006EE  0E00               	movlw	0
  4068  0006F0  0101               	movlb	1	; () banked
  4069  0006F2  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  4070  0006F4  0E00               	movlw	0
  4071  0006F6  6F68               	movwf	drawtext@bg& (0+255),b
  4072  0006F8  0E01               	movlw	1
  4073  0006FA  0101               	movlb	1	; () banked
  4074  0006FC  6F6A               	movwf	drawtext@size& (0+255),b
  4075  0006FE  0E0A               	movlw	10
  4076  000700  EC18  F015         	call	_drawtext
  4077                           
  4078                           ;Main_Screen.c: 174: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  4079  000704  0E96               	movlw	150
  4080  000706  0101               	movlb	1	; () banked
  4081  000708  6F63               	movwf	drawtext@y& (0+255),b
  4082  00070A  0ECB               	movlw	low _RTC_ALARM_Txt
  4083  00070C  0101               	movlb	1	; () banked
  4084  00070E  6F64               	movwf	drawtext@_text& (0+255),b
  4085  000710  0E00               	movlw	high _RTC_ALARM_Txt
  4086  000712  0101               	movlb	1	; () banked
  4087  000714  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  4088  000716  0E07               	movlw	7
  4089  000718  0101               	movlb	1	; () banked
  4090  00071A  6F67               	movwf	(drawtext@color+1)& (0+255),b
  4091  00071C  0EE0               	movlw	224
  4092  00071E  6F66               	movwf	drawtext@color& (0+255),b
  4093  000720  0E00               	movlw	0
  4094  000722  0101               	movlb	1	; () banked
  4095  000724  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  4096  000726  0E00               	movlw	0
  4097  000728  6F68               	movwf	drawtext@bg& (0+255),b
  4098  00072A  0E01               	movlw	1
  4099  00072C  0101               	movlb	1	; () banked
  4100  00072E  6F6A               	movwf	drawtext@size& (0+255),b
  4101  000730  0E23               	movlw	35
  4102  000732  EC18  F015         	call	_drawtext
  4103                           
  4104                           ;Main_Screen.c: 175: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4105  000736  0E96               	movlw	150
  4106  000738  0101               	movlb	1	; () banked
  4107  00073A  6F63               	movwf	drawtext@y& (0+255),b
  4108  00073C  0EA2               	movlw	low _Volt_Txt
  4109  00073E  0101               	movlb	1	; () banked
  4110  000740  6F64               	movwf	drawtext@_text& (0+255),b
  4111  000742  0E00               	movlw	high _Volt_Txt
  4112  000744  0101               	movlb	1	; () banked
  4113  000746  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  4114  000748  0E07               	movlw	7
  4115  00074A  0101               	movlb	1	; () banked
  4116  00074C  6F67               	movwf	(drawtext@color+1)& (0+255),b
  4117  00074E  0EE0               	movlw	224
  4118  000750  6F66               	movwf	drawtext@color& (0+255),b
  4119  000752  0E00               	movlw	0
  4120  000754  0101               	movlb	1	; () banked
  4121  000756  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  4122  000758  0E00               	movlw	0
  4123  00075A  6F68               	movwf	drawtext@bg& (0+255),b
  4124  00075C  0E01               	movlw	1
  4125  00075E  0101               	movlb	1	; () banked
  4126  000760  6F6A               	movwf	drawtext@size& (0+255),b
  4127  000762  0E32               	movlw	50
  4128  000764  EC18  F015         	call	_drawtext
  4129                           
  4130                           ;Main_Screen.c: 176: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4131  000768  0E96               	movlw	150
  4132  00076A  0101               	movlb	1	; () banked
  4133  00076C  6F63               	movwf	drawtext@y& (0+255),b
  4134  00076E  0EAD               	movlw	low _RPM_Txt
  4135  000770  0101               	movlb	1	; () banked
  4136  000772  6F64               	movwf	drawtext@_text& (0+255),b
  4137  000774  0E00               	movlw	high _RPM_Txt
  4138  000776  0101               	movlb	1	; () banked
  4139  000778  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  4140  00077A  0E07               	movlw	7
  4141  00077C  0101               	movlb	1	; () banked
  4142  00077E  6F67               	movwf	(drawtext@color+1)& (0+255),b
  4143  000780  0EE0               	movlw	224
  4144  000782  6F66               	movwf	drawtext@color& (0+255),b
  4145  000784  0E00               	movlw	0
  4146  000786  0101               	movlb	1	; () banked
  4147  000788  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  4148  00078A  0E00               	movlw	0
  4149  00078C  6F68               	movwf	drawtext@bg& (0+255),b
  4150  00078E  0E01               	movlw	1
  4151  000790  0101               	movlb	1	; () banked
  4152  000792  6F6A               	movwf	drawtext@size& (0+255),b
  4153  000794  0E5D               	movlw	93
  4154  000796  EC18  F015         	call	_drawtext
  4155  00079A  0012               	return		;funcret
  4156  00079C                     __end_of_Update_Screen:
  4157                           	opt stack 0
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           postdec1	equ	0xFE5
  4165                           fsr1l	equ	0xFE1
  4166                           status	equ	0xFD8
  4167                           
  4168 ;; *************** function _Toggle_Heater *****************
  4169 ;; Defined at:
  4170 ;;		line 47 in file "Fan_Support.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;		None               void
  4177 ;; Registers used:
  4178 ;;		wreg, status,2
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    4
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_main
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text3
  4199  004CD8                     __ptext3:
  4200                           	opt stack 0
  4201  004CD8                     _Toggle_Heater:
  4202                           	opt stack 26
  4203                           
  4204                           ;Fan_Support.c: 50: HEATER = (!HEATER);
  4205                           
  4206                           ;incstack = 0
  4207  004CD8  5045               	movf	_HEATER,w,c
  4208  004CDA  A4D8               	btfss	status,2,c
  4209  004CDC  D002               	goto	u7520
  4210  004CDE  0E01               	movlw	1
  4211  004CE0  D001               	goto	u7530
  4212  004CE2                     u7520:
  4213  004CE2  0E00               	movlw	0
  4214  004CE4                     u7530:
  4215  004CE4  6E45               	movwf	_HEATER,c
  4216                           
  4217                           ;Fan_Support.c: 51: PORTEbits.RE1 = !PORTEbits.RE1;
  4218  004CE6  7284               	btg	3972,1,c	;volatile
  4219  004CE8  0012               	return		;funcret
  4220  004CEA                     __end_of_Toggle_Heater:
  4221                           	opt stack 0
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           postinc0	equ	0xFEE
  4227                           wreg	equ	0xFE8
  4228                           postdec1	equ	0xFE5
  4229                           fsr1l	equ	0xFE1
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function _Test_Alarm *****************
  4233 ;; Defined at:
  4234 ;;		line 213 in file "Main.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;		None
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;		None
  4239 ;; Return value:  Size  Location     Type
  4240 ;;		None               void
  4241 ;; Registers used:
  4242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;Total ram usage:        0 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:   10
  4255 ;; This function calls:
  4256 ;;		_Activate_Buzzer_4KHz
  4257 ;;		_DS3231_Turn_Off_Alarm
  4258 ;;		_DS3231_Turn_On_Alarm
  4259 ;;		_Deactivate_Buzzer
  4260 ;;		_Set_RGB_Color
  4261 ;;		___ftge
  4262 ;;		_do_update_pwm
  4263 ;;		_read_volt
  4264 ;; This function is called by:
  4265 ;;		_main
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text4
  4270  0022A4                     __ptext4:
  4271                           	opt stack 0
  4272  0022A4                     _Test_Alarm:
  4273                           	opt stack 20
  4274                           
  4275                           ;Main.c: 215: if (alarm_mode == 0 && ALARMEN == 0)
  4276                           
  4277                           ;incstack = 0
  4278  0022A4  503A               	movf	_alarm_mode,w,c
  4279  0022A6  103B               	iorwf	_alarm_mode+1,w,c
  4280  0022A8  A4D8               	btfss	status,2,c
  4281  0022AA  D016               	goto	l10027
  4282  0022AC  0100               	movlb	0	; () banked
  4283  0022AE  51EA               	movf	_ALARMEN& (0+255),w,b
  4284  0022B0  0100               	movlb	0	; () banked
  4285  0022B2  11EB               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4286  0022B4  A4D8               	btfss	status,2,c
  4287  0022B6  D010               	goto	l10027
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;Main.c: 216: {
  4291                           ;Main.c: 217: DS3231_Turn_Off_Alarm();
  4292  0022B8  ECB9  F020         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4293                           
  4294                           ;Main.c: 218: alarm_mode = 0;
  4295  0022BC  0E00               	movlw	0
  4296  0022BE  6E3B               	movwf	_alarm_mode+1,c
  4297  0022C0  0E00               	movlw	0
  4298  0022C2  6E3A               	movwf	_alarm_mode,c
  4299                           
  4300                           ;Main.c: 219: Set_RGB_Color(0);
  4301  0022C4  0E00               	movlw	0
  4302  0022C6  ECA9  F025         	call	_Set_RGB_Color
  4303                           
  4304                           ;Main.c: 220: Deactivate_Buzzer();
  4305  0022CA  EC09  F027         	call	_Deactivate_Buzzer	;wreg free
  4306                           
  4307                           ;Main.c: 221: MATCHED = 0;
  4308  0022CE  0E00               	movlw	0
  4309  0022D0  6E37               	movwf	_MATCHED+1,c
  4310  0022D2  0E00               	movlw	0
  4311  0022D4  6E36               	movwf	_MATCHED,c
  4312  0022D6  D000               	goto	l10027
  4313  0022D8                     l10027:
  4314                           
  4315                           ;Main.c: 222: }
  4316                           ;Main.c: 223: if(alarm_mode == 0 && ALARMEN == 1)
  4317  0022D8  503A               	movf	_alarm_mode,w,c
  4318  0022DA  103B               	iorwf	_alarm_mode+1,w,c
  4319  0022DC  A4D8               	btfss	status,2,c
  4320  0022DE  D011               	goto	l10037
  4321  0022E0  0100               	movlb	0	; () banked
  4322  0022E2  05EA               	decf	_ALARMEN& (0+255),w,b
  4323  0022E4  0100               	movlb	0	; () banked
  4324  0022E6  11EB               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4325  0022E8  A4D8               	btfss	status,2,c
  4326  0022EA  D00B               	goto	l10037
  4327                           
  4328                           ; BSR set to: 0
  4329                           ;Main.c: 224: {
  4330                           ;Main.c: 225: DS3231_Turn_On_Alarm();
  4331  0022EC  EC83  F020         	call	_DS3231_Turn_On_Alarm	;wreg free
  4332                           
  4333                           ;Main.c: 226: alarm_mode = 1;
  4334  0022F0  0E00               	movlw	0
  4335  0022F2  6E3B               	movwf	_alarm_mode+1,c
  4336  0022F4  0E01               	movlw	1
  4337  0022F6  6E3A               	movwf	_alarm_mode,c
  4338                           
  4339                           ;Main.c: 227: MATCHED = 0;
  4340  0022F8  0E00               	movlw	0
  4341  0022FA  6E37               	movwf	_MATCHED+1,c
  4342  0022FC  0E00               	movlw	0
  4343  0022FE  6E36               	movwf	_MATCHED,c
  4344  002300  D000               	goto	l10037
  4345  002302                     l10037:
  4346                           
  4347                           ;Main.c: 229: }
  4348                           ;Main.c: 230: if(alarm_mode == 1 && ALARMEN == 0)
  4349  002302  043A               	decf	_alarm_mode,w,c
  4350  002304  103B               	iorwf	_alarm_mode+1,w,c
  4351  002306  A4D8               	btfss	status,2,c
  4352  002308  D016               	goto	l10051
  4353  00230A  0100               	movlb	0	; () banked
  4354  00230C  51EA               	movf	_ALARMEN& (0+255),w,b
  4355  00230E  0100               	movlb	0	; () banked
  4356  002310  11EB               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4357  002312  A4D8               	btfss	status,2,c
  4358  002314  D010               	goto	l10051
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;Main.c: 231: {
  4362                           ;Main.c: 232: DS3231_Turn_Off_Alarm();
  4363  002316  ECB9  F020         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4364                           
  4365                           ;Main.c: 233: alarm_mode = 0;
  4366  00231A  0E00               	movlw	0
  4367  00231C  6E3B               	movwf	_alarm_mode+1,c
  4368  00231E  0E00               	movlw	0
  4369  002320  6E3A               	movwf	_alarm_mode,c
  4370                           
  4371                           ;Main.c: 234: Set_RGB_Color(0);
  4372  002322  0E00               	movlw	0
  4373  002324  ECA9  F025         	call	_Set_RGB_Color
  4374                           
  4375                           ;Main.c: 235: Deactivate_Buzzer();
  4376  002328  EC09  F027         	call	_Deactivate_Buzzer	;wreg free
  4377                           
  4378                           ;Main.c: 236: MATCHED = 0;
  4379  00232C  0E00               	movlw	0
  4380  00232E  6E37               	movwf	_MATCHED+1,c
  4381  002330  0E00               	movlw	0
  4382  002332  6E36               	movwf	_MATCHED,c
  4383  002334  D000               	goto	l10051
  4384  002336                     l10051:
  4385                           
  4386                           ;Main.c: 238: }
  4387                           ;Main.c: 239: if(alarm_mode == 1 && ALARMEN == 1)
  4388  002336  043A               	decf	_alarm_mode,w,c
  4389  002338  103B               	iorwf	_alarm_mode+1,w,c
  4390  00233A  A4D8               	btfss	status,2,c
  4391  00233C  D056               	goto	l550
  4392  00233E  0100               	movlb	0	; () banked
  4393  002340  05EA               	decf	_ALARMEN& (0+255),w,b
  4394  002342  0100               	movlb	0	; () banked
  4395  002344  11EB               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4396  002346  A4D8               	btfss	status,2,c
  4397  002348  D050               	goto	l550
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;Main.c: 240: {
  4401                           ;Main.c: 241: if(PORTBbits.RB4 == 0)
  4402  00234A  B881               	btfsc	3969,4,c	;volatile
  4403  00234C  D007               	goto	l10061
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;Main.c: 242: {
  4407                           ;Main.c: 243: MATCHED = 1;
  4408  00234E  0E00               	movlw	0
  4409  002350  6E37               	movwf	_MATCHED+1,c
  4410  002352  0E01               	movlw	1
  4411  002354  6E36               	movwf	_MATCHED,c
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;Main.c: 244: Activate_Buzzer_4KHz();
  4415  002356  EC75  F026         	call	_Activate_Buzzer_4KHz	;wreg free
  4416  00235A  D000               	goto	l10061
  4417  00235C                     l10061:
  4418                           
  4419                           ;Main.c: 245: }
  4420                           ;Main.c: 246: if (MATCHED == 1)
  4421  00235C  0436               	decf	_MATCHED,w,c
  4422  00235E  1037               	iorwf	_MATCHED+1,w,c
  4423  002360  A4D8               	btfss	status,2,c
  4424  002362  D043               	goto	l550
  4425                           
  4426                           ;Main.c: 247: {
  4427                           ;Main.c: 248: Set_RGB_Color(color++);
  4428  002364  503C               	movf	_color,w,c
  4429  002366  ECA9  F025         	call	_Set_RGB_Color
  4430  00236A  4A3C               	infsnz	_color,f,c
  4431  00236C  2A3D               	incf	_color+1,f,c
  4432                           
  4433                           ;Main.c: 249: if(color > 7) color = 0;
  4434  00236E  BE3D               	btfsc	_color+1,7,c
  4435  002370  D00B               	goto	l10071
  4436  002372  503D               	movf	_color+1,w,c
  4437  002374  E104               	bnz	u7700
  4438  002376  0E08               	movlw	8
  4439  002378  5C3C               	subwf	_color,w,c
  4440  00237A  A0D8               	btfss	status,0,c
  4441  00237C  D005               	goto	l10071
  4442  00237E                     u7700:
  4443  00237E  0E00               	movlw	0
  4444  002380  6E3D               	movwf	_color+1,c
  4445  002382  0E00               	movlw	0
  4446  002384  6E3C               	movwf	_color,c
  4447  002386  D000               	goto	l10071
  4448  002388                     l10071:
  4449                           
  4450                           ;Main.c: 250: volt = read_volt();
  4451  002388  EC4D  F020         	call	_read_volt	;wreg free
  4452  00238C  C167  F031         	movff	?_read_volt,_volt
  4453  002390  C168  F032         	movff	?_read_volt+1,_volt+1
  4454  002394  C169  F033         	movff	?_read_volt+2,_volt+2
  4455                           
  4456                           ;Main.c: 251: if(volt > 3)
  4457  002398  0E00               	movlw	0
  4458  00239A  0100               	movlb	0	; () banked
  4459  00239C  6FCD               	movwf	___ftge@ff1& (0+255),b
  4460  00239E  0E40               	movlw	64
  4461  0023A0  0100               	movlb	0	; () banked
  4462  0023A2  6FCE               	movwf	(___ftge@ff1+1)& (0+255),b
  4463  0023A4  0E40               	movlw	64
  4464  0023A6  0100               	movlb	0	; () banked
  4465  0023A8  6FCF               	movwf	(___ftge@ff1+2)& (0+255),b
  4466  0023AA  C031  F0D0         	movff	_volt,___ftge@ff2
  4467  0023AE  C032  F0D1         	movff	_volt+1,___ftge@ff2+1
  4468  0023B2  C033  F0D2         	movff	_volt+2,___ftge@ff2+2
  4469  0023B6  EC26  F01A         	call	___ftge	;wreg free
  4470  0023BA  0100               	movlb	0	; () banked
  4471  0023BC  B0D8               	btfsc	status,0,c
  4472  0023BE  D015               	goto	l550
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;Main.c: 252: {
  4476                           ;Main.c: 253: MATCHED = 0;
  4477  0023C0  0E00               	movlw	0
  4478  0023C2  6E37               	movwf	_MATCHED+1,c
  4479  0023C4  0E00               	movlw	0
  4480  0023C6  6E36               	movwf	_MATCHED,c
  4481                           
  4482                           ;Main.c: 254: color = 0;
  4483  0023C8  0E00               	movlw	0
  4484  0023CA  6E3D               	movwf	_color+1,c
  4485  0023CC  0E00               	movlw	0
  4486  0023CE  6E3C               	movwf	_color,c
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;Main.c: 255: Set_RGB_Color(color);
  4490  0023D0  503C               	movf	_color,w,c
  4491  0023D2  ECA9  F025         	call	_Set_RGB_Color
  4492                           
  4493                           ;Main.c: 256: Deactivate_Buzzer();
  4494  0023D6  EC09  F027         	call	_Deactivate_Buzzer	;wreg free
  4495                           
  4496                           ;Main.c: 257: do_update_pwm(duty_cycle);
  4497  0023DA  5055               	movf	_duty_cycle,w,c
  4498  0023DC  ECE2  F018         	call	_do_update_pwm
  4499                           
  4500                           ;Main.c: 258: alarm_mode = 0;
  4501  0023E0  0E00               	movlw	0
  4502  0023E2  6E3B               	movwf	_alarm_mode+1,c
  4503  0023E4  0E00               	movlw	0
  4504  0023E6  6E3A               	movwf	_alarm_mode,c
  4505  0023E8  D000               	goto	l550
  4506  0023EA                     l550:
  4507  0023EA  0012               	return		;funcret
  4508  0023EC                     __end_of_Test_Alarm:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           tblptrh	equ	0xFF7
  4512                           tblptrl	equ	0xFF6
  4513                           tablat	equ	0xFF5
  4514                           postinc0	equ	0xFEE
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           fsr1l	equ	0xFE1
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _read_volt *****************
  4521 ;; Defined at:
  4522 ;;		line 158 in file "utils.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  volt            3   18[BANK1 ] float 
  4527 ;;  step            2   21[BANK1 ] int 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  3   15[BANK1 ] float 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4537 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;Total ram usage:        8 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    6
  4544 ;; This function calls:
  4545 ;;		___awtoft
  4546 ;;		___ftdiv
  4547 ;;		___wmul
  4548 ;;		_get_full_ADC
  4549 ;; This function is called by:
  4550 ;;		_main
  4551 ;;		_Test_Alarm
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text5
  4556  00409A                     __ptext5:
  4557                           	opt stack 0
  4558  00409A                     _read_volt:
  4559                           	opt stack 24
  4560                           
  4561                           ;utils.c: 161: int step = get_full_ADC();
  4562                           
  4563                           ;incstack = 0
  4564  00409A  EC7C  F024         	call	_get_full_ADC	;wreg free
  4565  00409E  C0CD  F16D         	movff	?_get_full_ADC,read_volt@step
  4566  0040A2  C0CE  F16E         	movff	?_get_full_ADC+1,read_volt@step+1
  4567                           
  4568                           ;utils.c: 162: float volt = step * 5 / 1024.0;
  4569  0040A6  C16D  F0CD         	movff	read_volt@step,___wmul@multiplier
  4570  0040AA  C16E  F0CE         	movff	read_volt@step+1,___wmul@multiplier+1
  4571  0040AE  0E00               	movlw	0
  4572  0040B0  0100               	movlb	0	; () banked
  4573  0040B2  6FD0               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4574  0040B4  0E05               	movlw	5
  4575  0040B6  6FCF               	movwf	___wmul@multiplicand& (0+255),b
  4576  0040B8  EC45  F024         	call	___wmul	;wreg free
  4577  0040BC  C0CD  F0D5         	movff	?___wmul,___awtoft@c
  4578  0040C0  C0CE  F0D6         	movff	?___wmul+1,___awtoft@c+1
  4579  0040C4  EC81  F023         	call	___awtoft	;wreg free
  4580  0040C8  C0D5  F158         	movff	?___awtoft,___ftdiv@f1
  4581  0040CC  C0D6  F159         	movff	?___awtoft+1,___ftdiv@f1+1
  4582  0040D0  C0D7  F15A         	movff	?___awtoft+2,___ftdiv@f1+2
  4583  0040D4  0E00               	movlw	0
  4584  0040D6  0101               	movlb	1	; () banked
  4585  0040D8  6F5B               	movwf	___ftdiv@f2& (0+255),b
  4586  0040DA  0E80               	movlw	128
  4587  0040DC  0101               	movlb	1	; () banked
  4588  0040DE  6F5C               	movwf	(___ftdiv@f2+1)& (0+255),b
  4589  0040E0  0E44               	movlw	68
  4590  0040E2  0101               	movlb	1	; () banked
  4591  0040E4  6F5D               	movwf	(___ftdiv@f2+2)& (0+255),b
  4592  0040E6  ECDE  F013         	call	___ftdiv	;wreg free
  4593  0040EA  C158  F16A         	movff	?___ftdiv,read_volt@volt
  4594  0040EE  C159  F16B         	movff	?___ftdiv+1,read_volt@volt+1
  4595  0040F2  C15A  F16C         	movff	?___ftdiv+2,read_volt@volt+2
  4596                           
  4597                           ;utils.c: 163: return volt;
  4598  0040F6  C16A  F167         	movff	read_volt@volt,?_read_volt
  4599  0040FA  C16B  F168         	movff	read_volt@volt+1,?_read_volt+1
  4600  0040FE  C16C  F169         	movff	read_volt@volt+2,?_read_volt+2
  4601  004102  D000               	goto	l1141
  4602  004104                     l1141:
  4603  004104  0012               	return		;funcret
  4604  004106                     __end_of_read_volt:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           postinc0	equ	0xFEE
  4611                           wreg	equ	0xFE8
  4612                           postdec1	equ	0xFE5
  4613                           fsr1l	equ	0xFE1
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _get_full_ADC *****************
  4617 ;; Defined at:
  4618 ;;		line 166 in file "utils.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  result          2    4[BANK0 ] int 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  2    0[BANK0 ] unsigned int 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4632 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;Total ram usage:        6 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    4
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_read_volt
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text6
  4647  0048F8                     __ptext6:
  4648                           	opt stack 0
  4649  0048F8                     _get_full_ADC:
  4650                           	opt stack 25
  4651                           
  4652                           ;utils.c: 168: int result;
  4653                           ;utils.c: 169: ADCON0bits.GO=1;
  4654                           
  4655                           ;incstack = 0
  4656  0048F8  82C2               	bsf	4034,1,c	;volatile
  4657                           
  4658                           ;utils.c: 170: while(ADCON0bits.DONE==1);
  4659  0048FA  D000               	goto	l1144
  4660  0048FC                     l1144:
  4661  0048FC  B2C2               	btfsc	4034,1,c	;volatile
  4662  0048FE  D7FE               	goto	l1144
  4663                           
  4664                           ;utils.c: 171: result = (ADRESH * 0x100) + ADRESL;
  4665  004900  50C4               	movf	4036,w,c	;volatile
  4666  004902  0100               	movlb	0	; () banked
  4667  004904  6FD0               	movwf	(??_get_full_ADC+1)& (0+255),b
  4668  004906  6BCF               	clrf	??_get_full_ADC& (0+255),b
  4669  004908  50C3               	movf	4035,w,c	;volatile
  4670  00490A  0100               	movlb	0	; () banked
  4671  00490C  25CF               	addwf	??_get_full_ADC& (0+255),w,b
  4672  00490E  0100               	movlb	0	; () banked
  4673  004910  6FD1               	movwf	get_full_ADC@result& (0+255),b
  4674  004912  0E00               	movlw	0
  4675  004914  0100               	movlb	0	; () banked
  4676  004916  21D0               	addwfc	(??_get_full_ADC+1)& (0+255),w,b
  4677  004918  0100               	movlb	0	; () banked
  4678  00491A  6FD2               	movwf	(get_full_ADC@result+1)& (0+255),b
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;utils.c: 173: return result;
  4682  00491C  C0D1  F0CD         	movff	get_full_ADC@result,?_get_full_ADC
  4683  004920  C0D2  F0CE         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  4684  004924  D000               	goto	l1147
  4685  004926                     l1147:
  4686                           
  4687                           ; BSR set to: 0
  4688  004926  0012               	return		;funcret
  4689  004928                     __end_of_get_full_ADC:
  4690                           	opt stack 0
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           fsr1l	equ	0xFE1
  4699                           status	equ	0xFD8
  4700                           
  4701 ;; *************** function ___awtoft *****************
  4702 ;; Defined at:
  4703 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  c               2    8[BANK0 ] int 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  sign            1   11[BANK0 ] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  3    8[BANK0 ] float 
  4710 ;; Registers used:
  4711 ;;		wreg, status,2, status,0, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4717 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;Total ram usage:        4 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    5
  4724 ;; This function calls:
  4725 ;;		___ftpack
  4726 ;; This function is called by:
  4727 ;;		_read_volt
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text7
  4732  004702                     __ptext7:
  4733                           	opt stack 0
  4734  004702                     ___awtoft:
  4735                           	opt stack 24
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;incstack = 0
  4739  004702  0E00               	movlw	0
  4740  004704  0100               	movlb	0	; () banked
  4741  004706  6FD8               	movwf	___awtoft@sign& (0+255),b
  4742                           
  4743                           ; BSR set to: 0
  4744  004708  0100               	movlb	0	; () banked
  4745  00470A  AFD6               	btfss	(___awtoft@c+1)& (0+255),7,b
  4746  00470C  D009               	goto	l9465
  4747                           
  4748                           ; BSR set to: 0
  4749  00470E  0100               	movlb	0	; () banked
  4750  004710  6DD5               	negf	___awtoft@c& (0+255),b
  4751  004712  1FD6               	comf	(___awtoft@c+1)& (0+255),f,b
  4752  004714  B0D8               	btfsc	status,0,c
  4753  004716  2BD6               	incf	(___awtoft@c+1)& (0+255),f,b
  4754                           
  4755                           ; BSR set to: 0
  4756  004718  0E01               	movlw	1
  4757  00471A  0100               	movlb	0	; () banked
  4758  00471C  6FD8               	movwf	___awtoft@sign& (0+255),b
  4759  00471E  D000               	goto	l9465
  4760  004720                     l9465:
  4761                           
  4762                           ; BSR set to: 0
  4763  004720  C0D5  F0CD         	movff	___awtoft@c,___ftpack@arg
  4764  004724  C0D6  F0CE         	movff	___awtoft@c+1,___ftpack@arg+1
  4765  004728  0100               	movlb	0	; () banked
  4766  00472A  6BCF               	clrf	(___ftpack@arg+2)& (0+255),b
  4767  00472C  0E8E               	movlw	142
  4768  00472E  0100               	movlb	0	; () banked
  4769  004730  6FD0               	movwf	___ftpack@exp& (0+255),b
  4770  004732  C0D8  F0D1         	movff	___awtoft@sign,___ftpack@sign
  4771  004736  EC3F  F016         	call	___ftpack	;wreg free
  4772  00473A  C0CD  F0D5         	movff	?___ftpack,?___awtoft
  4773  00473E  C0CE  F0D6         	movff	?___ftpack+1,?___awtoft+1
  4774  004742  C0CF  F0D7         	movff	?___ftpack+2,?___awtoft+2
  4775  004746  D000               	goto	l1689
  4776  004748                     l1689:
  4777  004748  0012               	return		;funcret
  4778  00474A                     __end_of___awtoft:
  4779                           	opt stack 0
  4780                           tblptru	equ	0xFF8
  4781                           tblptrh	equ	0xFF7
  4782                           tblptrl	equ	0xFF6
  4783                           tablat	equ	0xFF5
  4784                           postinc0	equ	0xFEE
  4785                           wreg	equ	0xFE8
  4786                           postdec1	equ	0xFE5
  4787                           fsr1l	equ	0xFE1
  4788                           status	equ	0xFD8
  4789                           
  4790 ;; *************** function ___ftge *****************
  4791 ;; Defined at:
  4792 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  ff1             3    0[BANK0 ] float 
  4795 ;;  ff2             3    3[BANK0 ] float 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;		None               void
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4807 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;Total ram usage:        9 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    4
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_Test_Alarm
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text8
  4822  00344C                     __ptext8:
  4823                           	opt stack 0
  4824  00344C                     ___ftge:
  4825                           	opt stack 25
  4826                           
  4827                           ;incstack = 0
  4828  00344C  0100               	movlb	0	; () banked
  4829  00344E  AFCF               	btfss	(___ftge@ff1+2)& (0+255),7,b
  4830  003450  D01E               	goto	l9903
  4831                           
  4832                           ; BSR set to: 0
  4833  003452  C0CD  F0D3         	movff	___ftge@ff1,??___ftge
  4834  003456  C0CE  F0D4         	movff	___ftge@ff1+1,??___ftge+1
  4835  00345A  C0CF  F0D5         	movff	___ftge@ff1+2,??___ftge+2
  4836  00345E  0100               	movlb	0	; () banked
  4837  003460  1FD3               	comf	??___ftge& (0+255),f,b
  4838  003462  1FD4               	comf	(??___ftge+1)& (0+255),f,b
  4839  003464  1FD5               	comf	(??___ftge+2)& (0+255),f,b
  4840  003466  2BD3               	incf	??___ftge& (0+255),f,b
  4841  003468  0E00               	movlw	0
  4842  00346A  23D4               	addwfc	(??___ftge+1)& (0+255),f,b
  4843  00346C  23D5               	addwfc	(??___ftge+2)& (0+255),f,b
  4844  00346E  0E00               	movlw	0
  4845  003470  0100               	movlb	0	; () banked
  4846  003472  25D3               	addwf	??___ftge& (0+255),w,b
  4847  003474  0100               	movlb	0	; () banked
  4848  003476  6FCD               	movwf	___ftge@ff1& (0+255),b
  4849  003478  0E00               	movlw	0
  4850  00347A  0100               	movlb	0	; () banked
  4851  00347C  21D4               	addwfc	(??___ftge+1)& (0+255),w,b
  4852  00347E  0100               	movlb	0	; () banked
  4853  003480  6FCE               	movwf	(___ftge@ff1+1)& (0+255),b
  4854  003482  0E80               	movlw	128
  4855  003484  0100               	movlb	0	; () banked
  4856  003486  21D5               	addwfc	(??___ftge+2)& (0+255),w,b
  4857  003488  0100               	movlb	0	; () banked
  4858  00348A  6FCF               	movwf	(___ftge@ff1+2)& (0+255),b
  4859  00348C  D000               	goto	l9903
  4860  00348E                     l9903:
  4861                           
  4862                           ; BSR set to: 0
  4863  00348E  0100               	movlb	0	; () banked
  4864  003490  AFD2               	btfss	(___ftge@ff2+2)& (0+255),7,b
  4865  003492  D01E               	goto	l9907
  4866                           
  4867                           ; BSR set to: 0
  4868  003494  C0D0  F0D3         	movff	___ftge@ff2,??___ftge
  4869  003498  C0D1  F0D4         	movff	___ftge@ff2+1,??___ftge+1
  4870  00349C  C0D2  F0D5         	movff	___ftge@ff2+2,??___ftge+2
  4871  0034A0  0100               	movlb	0	; () banked
  4872  0034A2  1FD3               	comf	??___ftge& (0+255),f,b
  4873  0034A4  1FD4               	comf	(??___ftge+1)& (0+255),f,b
  4874  0034A6  1FD5               	comf	(??___ftge+2)& (0+255),f,b
  4875  0034A8  2BD3               	incf	??___ftge& (0+255),f,b
  4876  0034AA  0E00               	movlw	0
  4877  0034AC  23D4               	addwfc	(??___ftge+1)& (0+255),f,b
  4878  0034AE  23D5               	addwfc	(??___ftge+2)& (0+255),f,b
  4879  0034B0  0E00               	movlw	0
  4880  0034B2  0100               	movlb	0	; () banked
  4881  0034B4  25D3               	addwf	??___ftge& (0+255),w,b
  4882  0034B6  0100               	movlb	0	; () banked
  4883  0034B8  6FD0               	movwf	___ftge@ff2& (0+255),b
  4884  0034BA  0E00               	movlw	0
  4885  0034BC  0100               	movlb	0	; () banked
  4886  0034BE  21D4               	addwfc	(??___ftge+1)& (0+255),w,b
  4887  0034C0  0100               	movlb	0	; () banked
  4888  0034C2  6FD1               	movwf	(___ftge@ff2+1)& (0+255),b
  4889  0034C4  0E80               	movlw	128
  4890  0034C6  0100               	movlb	0	; () banked
  4891  0034C8  21D5               	addwfc	(??___ftge+2)& (0+255),w,b
  4892  0034CA  0100               	movlb	0	; () banked
  4893  0034CC  6FD2               	movwf	(___ftge@ff2+2)& (0+255),b
  4894  0034CE  D000               	goto	l9907
  4895  0034D0                     l9907:
  4896                           
  4897                           ; BSR set to: 0
  4898  0034D0  0E00               	movlw	0
  4899  0034D2  0100               	movlb	0	; () banked
  4900  0034D4  1BCD               	xorwf	___ftge@ff1& (0+255),f,b
  4901  0034D6  0E00               	movlw	0
  4902  0034D8  0100               	movlb	0	; () banked
  4903  0034DA  1BCE               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  4904  0034DC  0E80               	movlw	128
  4905  0034DE  0100               	movlb	0	; () banked
  4906  0034E0  1BCF               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  4907                           
  4908                           ; BSR set to: 0
  4909  0034E2  0E00               	movlw	0
  4910  0034E4  0100               	movlb	0	; () banked
  4911  0034E6  1BD0               	xorwf	___ftge@ff2& (0+255),f,b
  4912  0034E8  0E00               	movlw	0
  4913  0034EA  0100               	movlb	0	; () banked
  4914  0034EC  1BD1               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  4915  0034EE  0E80               	movlw	128
  4916  0034F0  0100               	movlb	0	; () banked
  4917  0034F2  1BD2               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  4918  0034F4  0100               	movlb	0	; () banked
  4919  0034F6  51D0               	movf	___ftge@ff2& (0+255),w,b
  4920  0034F8  0100               	movlb	0	; () banked
  4921  0034FA  5DCD               	subwf	___ftge@ff1& (0+255),w,b
  4922  0034FC  0100               	movlb	0	; () banked
  4923  0034FE  51D1               	movf	(___ftge@ff2+1)& (0+255),w,b
  4924  003500  0100               	movlb	0	; () banked
  4925  003502  59CE               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  4926  003504  0100               	movlb	0	; () banked
  4927  003506  51D2               	movf	(___ftge@ff2+2)& (0+255),w,b
  4928  003508  0100               	movlb	0	; () banked
  4929  00350A  59CF               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  4930  00350C  B0D8               	btfsc	status,0,c
  4931  00350E  D002               	goto	l9913
  4932                           
  4933                           ; BSR set to: 0
  4934  003510  90D8               	bcf	status,0,c
  4935  003512  D002               	goto	l1860
  4936  003514                     l9913:
  4937                           
  4938                           ; BSR set to: 0
  4939  003514  80D8               	bsf	status,0,c
  4940                           
  4941                           ; BSR set to: 0
  4942  003516  D000               	goto	l1860
  4943  003518                     l1860:
  4944                           
  4945                           ; BSR set to: 0
  4946  003518  0012               	return		;funcret
  4947  00351A                     __end_of___ftge:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           postdec1	equ	0xFE5
  4956                           fsr1l	equ	0xFE1
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4960 ;; Defined at:
  4961 ;;		line 210 in file "I2C_Support.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  Device          1   14[BANK0 ] unsigned char 
  4966 ;;  control_F       1   13[BANK0 ] unsigned char 
  4967 ;;  control_E       1   12[BANK0 ] unsigned char 
  4968 ;;  Address_F       1   11[BANK0 ] unsigned char 
  4969 ;;  Address_E       1   10[BANK0 ] unsigned char 
  4970 ;; Return value:  Size  Location     Type
  4971 ;;		None               void
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, status,0, cstack
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;Total ram usage:        5 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    9
  4986 ;; This function calls:
  4987 ;;		_DS3231_Init
  4988 ;;		_I2C_Write_Address_Read_One_Byte
  4989 ;;		_I2C_Write_Address_Write_One_Byte
  4990 ;; This function is called by:
  4991 ;;		_Test_Alarm
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text9
  4996  004106                     __ptext9:
  4997                           	opt stack 0
  4998  004106                     _DS3231_Turn_On_Alarm:
  4999                           	opt stack 20
  5000                           
  5001                           ;I2C_Support.c: 212: char Device = 0x68;
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;incstack = 0
  5005  004106  0E68               	movlw	104
  5006  004108  0100               	movlb	0	; () banked
  5007  00410A  6FDB               	movwf	DS3231_Turn_On_Alarm@Device& (0+255),b
  5008                           
  5009                           ;I2C_Support.c: 213: char Address_E = 0x0E;
  5010  00410C  0E0E               	movlw	14
  5011  00410E  0100               	movlb	0	; () banked
  5012  004110  6FD7               	movwf	DS3231_Turn_On_Alarm@Address_E& (0+255),b
  5013                           
  5014                           ;I2C_Support.c: 214: char Address_F = 0x0F;
  5015  004112  0E0F               	movlw	15
  5016  004114  0100               	movlb	0	; () banked
  5017  004116  6FD8               	movwf	DS3231_Turn_On_Alarm@Address_F& (0+255),b
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;I2C_Support.c: 215: char control_E;
  5021                           ;I2C_Support.c: 216: char control_F;
  5022                           ;I2C_Support.c: 218: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5023  004118  C0D7  F0D0         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5024  00411C  0100               	movlb	0	; () banked
  5025  00411E  51DB               	movf	DS3231_Turn_On_Alarm@Device& (0+255),w,b
  5026  004120  EC08  F024         	call	_I2C_Write_Address_Read_One_Byte
  5027  004124  0100               	movlb	0	; () banked
  5028  004126  6FD9               	movwf	DS3231_Turn_On_Alarm@control_E& (0+255),b
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;I2C_Support.c: 219: control_E = control_E | 0x01;
  5032  004128  0100               	movlb	0	; () banked
  5033  00412A  51D9               	movf	DS3231_Turn_On_Alarm@control_E& (0+255),w,b
  5034  00412C  0901               	iorlw	1
  5035  00412E  0100               	movlb	0	; () banked
  5036  004130  6FD9               	movwf	DS3231_Turn_On_Alarm@control_E& (0+255),b
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;I2C_Support.c: 220: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5040  004132  C0D7  F0CF         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5041  004136  C0D9  F0D0         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5042  00413A  0100               	movlb	0	; () banked
  5043  00413C  51DB               	movf	DS3231_Turn_On_Alarm@Device& (0+255),w,b
  5044  00413E  EC19  F025         	call	_I2C_Write_Address_Write_One_Byte
  5045                           
  5046                           ;I2C_Support.c: 222: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  5047  004142  C0D8  F0D0         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  5048  004146  0100               	movlb	0	; () banked
  5049  004148  51DB               	movf	DS3231_Turn_On_Alarm@Device& (0+255),w,b
  5050  00414A  EC08  F024         	call	_I2C_Write_Address_Read_One_Byte
  5051  00414E  0100               	movlb	0	; () banked
  5052  004150  6FDA               	movwf	DS3231_Turn_On_Alarm@control_F& (0+255),b
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;I2C_Support.c: 223: control_F = control_F & 0xFE;
  5056  004152  0100               	movlb	0	; () banked
  5057  004154  51DA               	movf	DS3231_Turn_On_Alarm@control_F& (0+255),w,b
  5058  004156  0BFE               	andlw	254
  5059  004158  0100               	movlb	0	; () banked
  5060  00415A  6FDA               	movwf	DS3231_Turn_On_Alarm@control_F& (0+255),b
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;I2C_Support.c: 224: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  5064  00415C  C0D8  F0CF         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  5065  004160  C0DA  F0D0         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  5066  004164  0100               	movlb	0	; () banked
  5067  004166  51DB               	movf	DS3231_Turn_On_Alarm@Device& (0+255),w,b
  5068  004168  EC19  F025         	call	_I2C_Write_Address_Write_One_Byte
  5069                           
  5070                           ;I2C_Support.c: 225: DS3231_Init();
  5071  00416C  EC53  F019         	call	_DS3231_Init	;wreg free
  5072  004170  0012               	return		;funcret
  5073  004172                     __end_of_DS3231_Turn_On_Alarm:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           postdec1	equ	0xFE5
  5082                           fsr1l	equ	0xFE1
  5083                           status	equ	0xFD8
  5084                           
  5085 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  5086 ;; Defined at:
  5087 ;;		line 193 in file "I2C_Support.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;		None
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  Device          1   14[BANK0 ] unsigned char 
  5092 ;;  control_F       1   13[BANK0 ] unsigned char 
  5093 ;;  control_E       1   12[BANK0 ] unsigned char 
  5094 ;;  Address_F       1   11[BANK0 ] unsigned char 
  5095 ;;  Address_E       1   10[BANK0 ] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;		None               void
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;Total ram usage:        5 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    9
  5112 ;; This function calls:
  5113 ;;		_DS3231_Init
  5114 ;;		_I2C_Write_Address_Read_One_Byte
  5115 ;;		_I2C_Write_Address_Write_One_Byte
  5116 ;; This function is called by:
  5117 ;;		_main
  5118 ;;		_Test_Alarm
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text10
  5123  004172                     __ptext10:
  5124                           	opt stack 0
  5125  004172                     _DS3231_Turn_Off_Alarm:
  5126                           	opt stack 20
  5127                           
  5128                           ;I2C_Support.c: 195: char Device = 0x68;
  5129                           
  5130                           ;incstack = 0
  5131  004172  0E68               	movlw	104
  5132  004174  0100               	movlb	0	; () banked
  5133  004176  6FDB               	movwf	DS3231_Turn_Off_Alarm@Device& (0+255),b
  5134                           
  5135                           ;I2C_Support.c: 196: char Address_E = 0x0E;
  5136  004178  0E0E               	movlw	14
  5137  00417A  0100               	movlb	0	; () banked
  5138  00417C  6FD7               	movwf	DS3231_Turn_Off_Alarm@Address_E& (0+255),b
  5139                           
  5140                           ;I2C_Support.c: 197: char Address_F = 0x0F;
  5141  00417E  0E0F               	movlw	15
  5142  004180  0100               	movlb	0	; () banked
  5143  004182  6FD8               	movwf	DS3231_Turn_Off_Alarm@Address_F& (0+255),b
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;I2C_Support.c: 198: char control_E;
  5147                           ;I2C_Support.c: 199: char control_F;
  5148                           ;I2C_Support.c: 201: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5149  004184  C0D7  F0D0         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5150  004188  0100               	movlb	0	; () banked
  5151  00418A  51DB               	movf	DS3231_Turn_Off_Alarm@Device& (0+255),w,b
  5152  00418C  EC08  F024         	call	_I2C_Write_Address_Read_One_Byte
  5153  004190  0100               	movlb	0	; () banked
  5154  004192  6FD9               	movwf	DS3231_Turn_Off_Alarm@control_E& (0+255),b
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;I2C_Support.c: 202: control_E = control_E & 0xFE;
  5158  004194  0100               	movlb	0	; () banked
  5159  004196  51D9               	movf	DS3231_Turn_Off_Alarm@control_E& (0+255),w,b
  5160  004198  0BFE               	andlw	254
  5161  00419A  0100               	movlb	0	; () banked
  5162  00419C  6FD9               	movwf	DS3231_Turn_Off_Alarm@control_E& (0+255),b
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;I2C_Support.c: 203: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5166  00419E  C0D7  F0CF         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5167  0041A2  C0D9  F0D0         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5168  0041A6  0100               	movlb	0	; () banked
  5169  0041A8  51DB               	movf	DS3231_Turn_Off_Alarm@Device& (0+255),w,b
  5170  0041AA  EC19  F025         	call	_I2C_Write_Address_Write_One_Byte
  5171                           
  5172                           ;I2C_Support.c: 204: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  5173  0041AE  C0D8  F0D0         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  5174  0041B2  0100               	movlb	0	; () banked
  5175  0041B4  51DB               	movf	DS3231_Turn_Off_Alarm@Device& (0+255),w,b
  5176  0041B6  EC08  F024         	call	_I2C_Write_Address_Read_One_Byte
  5177  0041BA  0100               	movlb	0	; () banked
  5178  0041BC  6FDA               	movwf	DS3231_Turn_Off_Alarm@control_F& (0+255),b
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;I2C_Support.c: 205: control_F = control_F & 0xFE;
  5182  0041BE  0100               	movlb	0	; () banked
  5183  0041C0  51DA               	movf	DS3231_Turn_Off_Alarm@control_F& (0+255),w,b
  5184  0041C2  0BFE               	andlw	254
  5185  0041C4  0100               	movlb	0	; () banked
  5186  0041C6  6FDA               	movwf	DS3231_Turn_Off_Alarm@control_F& (0+255),b
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;I2C_Support.c: 206: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  5190  0041C8  C0D8  F0CF         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  5191  0041CC  C0DA  F0D0         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  5192  0041D0  0100               	movlb	0	; () banked
  5193  0041D2  51DB               	movf	DS3231_Turn_Off_Alarm@Device& (0+255),w,b
  5194  0041D4  EC19  F025         	call	_I2C_Write_Address_Write_One_Byte
  5195                           
  5196                           ;I2C_Support.c: 207: DS3231_Init();
  5197  0041D8  EC53  F019         	call	_DS3231_Init	;wreg free
  5198  0041DC  0012               	return		;funcret
  5199  0041DE                     __end_of_DS3231_Turn_Off_Alarm:
  5200                           	opt stack 0
  5201                           tblptru	equ	0xFF8
  5202                           tblptrh	equ	0xFF7
  5203                           tblptrl	equ	0xFF6
  5204                           tablat	equ	0xFF5
  5205                           postinc0	equ	0xFEE
  5206                           wreg	equ	0xFE8
  5207                           postdec1	equ	0xFE5
  5208                           fsr1l	equ	0xFE1
  5209                           status	equ	0xFD8
  5210                           
  5211 ;; *************** function _Activate_Buzzer_4KHz *****************
  5212 ;; Defined at:
  5213 ;;		line 122 in file "utils.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;		None
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;		None
  5218 ;; Return value:  Size  Location     Type
  5219 ;;		None               void
  5220 ;; Registers used:
  5221 ;;		wreg, status,2
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;Total ram usage:        0 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    4
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_Test_Alarm
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           	psect	text11
  5242  004CEA                     __ptext11:
  5243                           	opt stack 0
  5244  004CEA                     _Activate_Buzzer_4KHz:
  5245                           	opt stack 25
  5246                           
  5247                           ;utils.c: 125: PR2 = 0b01111100;
  5248                           
  5249                           ;incstack = 0
  5250  004CEA  0E7C               	movlw	124
  5251  004CEC  6ECB               	movwf	4043,c	;volatile
  5252                           
  5253                           ;utils.c: 126: T2CON = 0b00000101;
  5254  004CEE  0E05               	movlw	5
  5255  004CF0  6ECA               	movwf	4042,c	;volatile
  5256                           
  5257                           ;utils.c: 127: CCPR2L = 0b00111110;
  5258  004CF2  0E3E               	movlw	62
  5259  004CF4  6EBB               	movwf	4027,c	;volatile
  5260                           
  5261                           ;utils.c: 128: CCP2CON = 0b00011100;
  5262  004CF6  0E1C               	movlw	28
  5263  004CF8  6EBA               	movwf	4026,c	;volatile
  5264  004CFA  0012               	return		;funcret
  5265  004CFC                     __end_of_Activate_Buzzer_4KHz:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           postinc0	equ	0xFEE
  5272                           wreg	equ	0xFE8
  5273                           postdec1	equ	0xFE5
  5274                           fsr1l	equ	0xFE1
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function _Set_RPM_RGB *****************
  5278 ;; Defined at:
  5279 ;;		line 185 in file "utils.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  rpm             2    0[BANK0 ] int 
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;		None               void
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5293 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;Total ram usage:        2 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    4
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_main
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text12
  5308  003B84                     __ptext12:
  5309                           	opt stack 0
  5310  003B84                     _Set_RPM_RGB:
  5311                           	opt stack 26
  5312                           
  5313                           ;utils.c: 187: if ( rpm == 0 )
  5314                           
  5315                           ;incstack = 0
  5316  003B84  0100               	movlb	0	; () banked
  5317  003B86  51CD               	movf	Set_RPM_RGB@rpm& (0+255),w,b
  5318  003B88  0100               	movlb	0	; () banked
  5319  003B8A  11CE               	iorwf	(Set_RPM_RGB@rpm+1)& (0+255),w,b
  5320  003B8C  A4D8               	btfss	status,2,c
  5321  003B8E  D003               	goto	l9997
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;utils.c: 188: {
  5325                           ;utils.c: 189: PORTDbits.RD5 = 0;
  5326  003B90  9A83               	bcf	3971,5,c	;volatile
  5327                           
  5328                           ;utils.c: 190: PORTDbits.RD6 = 0;
  5329  003B92  9C83               	bcf	3971,6,c	;volatile
  5330  003B94  D000               	goto	l9997
  5331  003B96                     l9997:
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;utils.c: 191: }
  5335                           ;utils.c: 193: if ( (rpm > 0) && (rpm < 1800) )
  5336  003B96  0100               	movlb	0	; () banked
  5337  003B98  BFCE               	btfsc	(Set_RPM_RGB@rpm+1)& (0+255),7,b
  5338  003B9A  D015               	goto	l10003
  5339  003B9C  0100               	movlb	0	; () banked
  5340  003B9E  51CE               	movf	(Set_RPM_RGB@rpm+1)& (0+255),w,b
  5341  003BA0  E104               	bnz	u7550
  5342  003BA2  0100               	movlb	0	; () banked
  5343  003BA4  05CD               	decf	Set_RPM_RGB@rpm& (0+255),w,b
  5344  003BA6  A0D8               	btfss	status,0,c
  5345  003BA8  D00E               	goto	l10003
  5346  003BAA                     u7550:
  5347                           
  5348                           ; BSR set to: 0
  5349  003BAA  0100               	movlb	0	; () banked
  5350  003BAC  BFCE               	btfsc	(Set_RPM_RGB@rpm+1)& (0+255),7,b
  5351  003BAE  D008               	goto	l10001
  5352  003BB0  0E08               	movlw	8
  5353  003BB2  0100               	movlb	0	; () banked
  5354  003BB4  5DCD               	subwf	Set_RPM_RGB@rpm& (0+255),w,b
  5355  003BB6  0E07               	movlw	7
  5356  003BB8  0100               	movlb	0	; () banked
  5357  003BBA  59CE               	subwfb	(Set_RPM_RGB@rpm+1)& (0+255),w,b
  5358  003BBC  B0D8               	btfsc	status,0,c
  5359  003BBE  D003               	goto	l10003
  5360  003BC0                     l10001:
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;utils.c: 194: {
  5364                           ;utils.c: 195: PORTDbits.RD5 = 1;
  5365  003BC0  8A83               	bsf	3971,5,c	;volatile
  5366                           
  5367                           ;utils.c: 196: PORTDbits.RD6 = 0;
  5368  003BC2  9C83               	bcf	3971,6,c	;volatile
  5369  003BC4  D000               	goto	l10003
  5370  003BC6                     l10003:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;utils.c: 197: }
  5374                           ;utils.c: 199: if ( (rpm >= 1800) && (rpm < 2700) )
  5375  003BC6  0100               	movlb	0	; () banked
  5376  003BC8  BFCE               	btfsc	(Set_RPM_RGB@rpm+1)& (0+255),7,b
  5377  003BCA  D016               	goto	l10009
  5378  003BCC  0E08               	movlw	8
  5379  003BCE  0100               	movlb	0	; () banked
  5380  003BD0  5DCD               	subwf	Set_RPM_RGB@rpm& (0+255),w,b
  5381  003BD2  0E07               	movlw	7
  5382  003BD4  0100               	movlb	0	; () banked
  5383  003BD6  59CE               	subwfb	(Set_RPM_RGB@rpm+1)& (0+255),w,b
  5384  003BD8  A0D8               	btfss	status,0,c
  5385  003BDA  D00E               	goto	l10009
  5386                           
  5387                           ; BSR set to: 0
  5388  003BDC  0100               	movlb	0	; () banked
  5389  003BDE  BFCE               	btfsc	(Set_RPM_RGB@rpm+1)& (0+255),7,b
  5390  003BE0  D008               	goto	l10007
  5391  003BE2  0E8C               	movlw	140
  5392  003BE4  0100               	movlb	0	; () banked
  5393  003BE6  5DCD               	subwf	Set_RPM_RGB@rpm& (0+255),w,b
  5394  003BE8  0E0A               	movlw	10
  5395  003BEA  0100               	movlb	0	; () banked
  5396  003BEC  59CE               	subwfb	(Set_RPM_RGB@rpm+1)& (0+255),w,b
  5397  003BEE  B0D8               	btfsc	status,0,c
  5398  003BF0  D003               	goto	l10009
  5399  003BF2                     l10007:
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;utils.c: 200: {
  5403                           ;utils.c: 201: PORTDbits.RD5 = 1;
  5404  003BF2  8A83               	bsf	3971,5,c	;volatile
  5405                           
  5406                           ;utils.c: 202: PORTDbits.RD6 = 1;
  5407  003BF4  8C83               	bsf	3971,6,c	;volatile
  5408  003BF6  D000               	goto	l10009
  5409  003BF8                     l10009:
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;utils.c: 203: }
  5413                           ;utils.c: 205: if ( (rpm >= 2700) )
  5414  003BF8  0100               	movlb	0	; () banked
  5415  003BFA  BFCE               	btfsc	(Set_RPM_RGB@rpm+1)& (0+255),7,b
  5416  003BFC  D00B               	goto	l1157
  5417  003BFE  0E8C               	movlw	140
  5418  003C00  0100               	movlb	0	; () banked
  5419  003C02  5DCD               	subwf	Set_RPM_RGB@rpm& (0+255),w,b
  5420  003C04  0E0A               	movlw	10
  5421  003C06  0100               	movlb	0	; () banked
  5422  003C08  59CE               	subwfb	(Set_RPM_RGB@rpm+1)& (0+255),w,b
  5423  003C0A  A0D8               	btfss	status,0,c
  5424  003C0C  D003               	goto	l1157
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;utils.c: 206: {
  5428                           ;utils.c: 209: PORTDbits.RD5 = 0;
  5429  003C0E  9A83               	bcf	3971,5,c	;volatile
  5430                           
  5431                           ;utils.c: 210: PORTDbits.RD6 = 1;
  5432  003C10  8C83               	bsf	3971,6,c	;volatile
  5433  003C12  D000               	goto	l1157
  5434  003C14                     l1157:
  5435                           
  5436                           ; BSR set to: 0
  5437  003C14  0012               	return		;funcret
  5438  003C16                     __end_of_Set_RPM_RGB:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           postinc0	equ	0xFEE
  5445                           wreg	equ	0xFE8
  5446                           postdec1	equ	0xFE5
  5447                           fsr1l	equ	0xFE1
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _Monitor_Heater *****************
  5451 ;; Defined at:
  5452 ;;		line 36 in file "Fan_Support.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;		None
  5457 ;; Return value:  Size  Location     Type
  5458 ;;		None               void
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:        0 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    7
  5473 ;; This function calls:
  5474 ;;		_do_update_pwm
  5475 ;;		_get_duty_cycle
  5476 ;; This function is called by:
  5477 ;;		_main
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text13
  5482  004928                     __ptext13:
  5483                           	opt stack 0
  5484  004928                     _Monitor_Heater:
  5485                           	opt stack 23
  5486                           
  5487                           ;Fan_Support.c: 38: duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;incstack = 0
  5491  004928  C034  F0CD         	movff	_DS1621_tempF,get_duty_cycle@temp
  5492  00492C  C035  F0CE         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5493  004930  C057  F0CF         	movff	_heater_set_temp,get_duty_cycle@set_temp
  5494  004934  0100               	movlb	0	; () banked
  5495  004936  6BD0               	clrf	(get_duty_cycle@set_temp+1)& (0+255),b
  5496  004938  EC53  F01E         	call	_get_duty_cycle	;wreg free
  5497  00493C  0100               	movlb	0	; () banked
  5498  00493E  51CD               	movf	?_get_duty_cycle& (0+255),w,b
  5499  004940  6E55               	movwf	_duty_cycle,c
  5500                           
  5501                           ;Fan_Support.c: 39: do_update_pwm(duty_cycle);
  5502  004942  5055               	movf	_duty_cycle,w,c
  5503  004944  ECE2  F018         	call	_do_update_pwm
  5504                           
  5505                           ;Fan_Support.c: 40: if (HEATER == 1)
  5506  004948  0445               	decf	_HEATER,w,c
  5507  00494A  A4D8               	btfss	status,2,c
  5508  00494C  D002               	goto	l28
  5509                           
  5510                           ;Fan_Support.c: 41: {
  5511                           ;Fan_Support.c: 42: PORTBbits.RB5 = 1;
  5512  00494E  8A81               	bsf	3969,5,c	;volatile
  5513                           
  5514                           ;Fan_Support.c: 43: }
  5515  004950  D002               	goto	l30
  5516  004952                     l28:
  5517                           
  5518                           ;Fan_Support.c: 44: else PORTBbits.RB5 = 0;
  5519  004952  9A81               	bcf	3969,5,c	;volatile
  5520  004954  D000               	goto	l30
  5521  004956                     l30:
  5522  004956  0012               	return		;funcret
  5523  004958                     __end_of_Monitor_Heater:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           postinc0	equ	0xFEE
  5530                           wreg	equ	0xFE8
  5531                           postdec1	equ	0xFE5
  5532                           fsr1l	equ	0xFE1
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _get_duty_cycle *****************
  5536 ;; Defined at:
  5537 ;;		line 13 in file "Fan_Support.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  temp            2    0[BANK0 ] int 
  5540 ;;  set_temp        2    2[BANK0 ] int 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  dc              2    6[BANK0 ] int 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  2    0[BANK0 ] int 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;Total ram usage:        8 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    4
  5559 ;; This function calls:
  5560 ;;		Nothing
  5561 ;; This function is called by:
  5562 ;;		_Monitor_Heater
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text14
  5567  003CA6                     __ptext14:
  5568                           	opt stack 0
  5569  003CA6                     _get_duty_cycle:
  5570                           	opt stack 25
  5571                           
  5572                           ;Fan_Support.c: 18: if (temp > set_temp)
  5573                           
  5574                           ;incstack = 0
  5575  003CA6  0100               	movlb	0	; () banked
  5576  003CA8  51CD               	movf	get_duty_cycle@temp& (0+255),w,b
  5577  003CAA  0100               	movlb	0	; () banked
  5578  003CAC  5DCF               	subwf	get_duty_cycle@set_temp& (0+255),w,b
  5579  003CAE  0100               	movlb	0	; () banked
  5580  003CB0  51D0               	movf	(get_duty_cycle@set_temp+1)& (0+255),w,b
  5581  003CB2  0A80               	xorlw	128
  5582  003CB4  0100               	movlb	0	; () banked
  5583  003CB6  6FD1               	movwf	??_get_duty_cycle& (0+255),b
  5584  003CB8  0100               	movlb	0	; () banked
  5585  003CBA  51CE               	movf	(get_duty_cycle@temp+1)& (0+255),w,b
  5586  003CBC  0A80               	xorlw	128
  5587  003CBE  0100               	movlb	0	; () banked
  5588  003CC0  59D1               	subwfb	??_get_duty_cycle& (0+255),w,b
  5589  003CC2  B0D8               	btfsc	status,0,c
  5590  003CC4  D006               	goto	l9477
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;Fan_Support.c: 19: {
  5594                           ;Fan_Support.c: 20: return 0;
  5595  003CC6  0E00               	movlw	0
  5596  003CC8  0100               	movlb	0	; () banked
  5597  003CCA  6FCE               	movwf	(?_get_duty_cycle+1)& (0+255),b
  5598  003CCC  0E00               	movlw	0
  5599  003CCE  D02A               	goto	L4
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;Fan_Support.c: 21: }
  5603                           
  5604                           ; BSR set to: 0
  5605  003CD0  D030               	goto	l22
  5606  003CD2                     l9477:
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;Fan_Support.c: 22: else
  5610                           ;Fan_Support.c: 23: {
  5611                           ;Fan_Support.c: 24: int dc = 2 * (set_temp - temp);
  5612  003CD2  C0CD  F0D1         	movff	get_duty_cycle@temp,??_get_duty_cycle
  5613  003CD6  C0CE  F0D2         	movff	get_duty_cycle@temp+1,??_get_duty_cycle+1
  5614  003CDA  0100               	movlb	0	; () banked
  5615  003CDC  1FD1               	comf	??_get_duty_cycle& (0+255),f,b
  5616  003CDE  1FD2               	comf	(??_get_duty_cycle+1)& (0+255),f,b
  5617  003CE0  4BD1               	infsnz	??_get_duty_cycle& (0+255),f,b
  5618  003CE2  2BD2               	incf	(??_get_duty_cycle+1)& (0+255),f,b
  5619  003CE4  0100               	movlb	0	; () banked
  5620  003CE6  51CF               	movf	get_duty_cycle@set_temp& (0+255),w,b
  5621  003CE8  0100               	movlb	0	; () banked
  5622  003CEA  27D1               	addwf	??_get_duty_cycle& (0+255),f,b
  5623  003CEC  0100               	movlb	0	; () banked
  5624  003CEE  51D0               	movf	(get_duty_cycle@set_temp+1)& (0+255),w,b
  5625  003CF0  0100               	movlb	0	; () banked
  5626  003CF2  23D2               	addwfc	(??_get_duty_cycle+1)& (0+255),f,b
  5627  003CF4  90D8               	bcf	status,0,c
  5628  003CF6  0100               	movlb	0	; () banked
  5629  003CF8  35D1               	rlcf	??_get_duty_cycle& (0+255),w,b
  5630  003CFA  0100               	movlb	0	; () banked
  5631  003CFC  6FD3               	movwf	get_duty_cycle@dc& (0+255),b
  5632  003CFE  0100               	movlb	0	; () banked
  5633  003D00  35D2               	rlcf	(??_get_duty_cycle+1)& (0+255),w,b
  5634  003D02  0100               	movlb	0	; () banked
  5635  003D04  6FD4               	movwf	(get_duty_cycle@dc+1)& (0+255),b
  5636                           
  5637                           ;Fan_Support.c: 25: if (dc > 100)
  5638  003D06  0100               	movlb	0	; () banked
  5639  003D08  BFD4               	btfsc	(get_duty_cycle@dc+1)& (0+255),7,b
  5640  003D0A  D00E               	goto	l24
  5641  003D0C  0100               	movlb	0	; () banked
  5642  003D0E  51D4               	movf	(get_duty_cycle@dc+1)& (0+255),w,b
  5643  003D10  E105               	bnz	u7190
  5644  003D12  0E65               	movlw	101
  5645  003D14  0100               	movlb	0	; () banked
  5646  003D16  5DD3               	subwf	get_duty_cycle@dc& (0+255),w,b
  5647  003D18  A0D8               	btfss	status,0,c
  5648  003D1A  D006               	goto	l24
  5649  003D1C                     u7190:
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;Fan_Support.c: 26: {
  5653                           ;Fan_Support.c: 27: return 100;
  5654  003D1C  0E00               	movlw	0
  5655  003D1E  0100               	movlb	0	; () banked
  5656  003D20  6FCE               	movwf	(?_get_duty_cycle+1)& (0+255),b
  5657  003D22  0E64               	movlw	100
  5658  003D24                     L4:
  5659  003D24  6FCD               	movwf	?_get_duty_cycle& (0+255),b
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;Fan_Support.c: 28: }
  5663                           
  5664                           ; BSR set to: 0
  5665  003D26  D005               	goto	l22
  5666  003D28                     l24:
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;Fan_Support.c: 29: else
  5670                           ;Fan_Support.c: 30: {
  5671                           ;Fan_Support.c: 31: return dc;
  5672  003D28  C0D3  F0CD         	movff	get_duty_cycle@dc,?_get_duty_cycle
  5673  003D2C  C0D4  F0CE         	movff	get_duty_cycle@dc+1,?_get_duty_cycle+1
  5674                           
  5675                           ; BSR set to: 0
  5676  003D30  D000               	goto	l22
  5677  003D32                     l22:
  5678                           
  5679                           ; BSR set to: 0
  5680  003D32  0012               	return		;funcret
  5681  003D34                     __end_of_get_duty_cycle:
  5682                           	opt stack 0
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           postinc0	equ	0xFEE
  5688                           wreg	equ	0xFE8
  5689                           postdec1	equ	0xFE5
  5690                           fsr1l	equ	0xFE1
  5691                           status	equ	0xFD8
  5692                           
  5693 ;; *************** function _Do_Setup_Time *****************
  5694 ;; Defined at:
  5695 ;;		line 33 in file "Setup_Time.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;		None
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;		None
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  2  372[None  ] int 
  5702 ;; Registers used:
  5703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5713 ;;Total ram usage:        0 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:   13
  5716 ;; This function calls:
  5717 ;;		_DS3231_Read_Time
  5718 ;;		_Decrease_Time
  5719 ;;		_Do_Beep_Bad
  5720 ;;		_Do_Beep_Good
  5721 ;;		_Do_Save_New_Time
  5722 ;;		_Exit_Time_Setup
  5723 ;;		_Go_Next_Field
  5724 ;;		_Go_Prev_Field
  5725 ;;		_Increase_Time
  5726 ;;		_Initialize_Setup_Time_Screen
  5727 ;;		_Update_Setup_Time_Screen
  5728 ;;		_bcd_2_dec
  5729 ;;		_check_for_button_input
  5730 ;; This function is called by:
  5731 ;;		_main
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text15
  5736  002FCC                     __ptext15:
  5737                           	opt stack 0
  5738  002FCC                     _Do_Setup_Time:
  5739                           	opt stack 17
  5740                           
  5741                           ;Setup_Time.c: 36: Select_Field = 0;
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;incstack = 0
  5745  002FCC  0E00               	movlw	0
  5746  002FCE  0100               	movlb	0	; () banked
  5747  002FD0  6FF3               	movwf	_Select_Field& (0+255),b
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;Setup_Time.c: 38: DS3231_Read_Time();
  5751  002FD2  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
  5752                           
  5753                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  5754  002FD6  0100               	movlb	0	; () banked
  5755  002FD8  51F5               	movf	_second& (0+255),w,b
  5756  002FDA  EC27  F024         	call	_bcd_2_dec
  5757  002FDE  0100               	movlb	0	; () banked
  5758  002FE0  6FFE               	movwf	_setup_second& (0+255),b
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  5762  002FE2  0100               	movlb	0	; () banked
  5763  002FE4  518B               	movf	_minute& (0+255),w,b
  5764  002FE6  EC27  F024         	call	_bcd_2_dec
  5765  002FEA  0100               	movlb	0	; () banked
  5766  002FEC  6FFC               	movwf	_setup_minute& (0+255),b
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  5770  002FEE  0100               	movlb	0	; () banked
  5771  002FF0  518A               	movf	_hour& (0+255),w,b
  5772  002FF2  EC27  F024         	call	_bcd_2_dec
  5773  002FF6  0100               	movlb	0	; () banked
  5774  002FF8  6FFB               	movwf	_setup_hour& (0+255),b
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  5778  002FFA  0100               	movlb	0	; () banked
  5779  002FFC  5188               	movf	_day& (0+255),w,b
  5780  002FFE  EC27  F024         	call	_bcd_2_dec
  5781  003002  0100               	movlb	0	; () banked
  5782  003004  6FF9               	movwf	_setup_day& (0+255),b
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  5786  003006  0100               	movlb	0	; () banked
  5787  003008  518C               	movf	_month& (0+255),w,b
  5788  00300A  EC27  F024         	call	_bcd_2_dec
  5789  00300E  0100               	movlb	0	; () banked
  5790  003010  6FFD               	movwf	_setup_month& (0+255),b
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  5794  003012  0100               	movlb	0	; () banked
  5795  003014  518F               	movf	_year& (0+255),w,b
  5796  003016  EC27  F024         	call	_bcd_2_dec
  5797  00301A  0100               	movlb	0	; () banked
  5798  00301C  6FFF               	movwf	_setup_year& (0+255),b
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  5802  00301E  ECF6  F011         	call	_Initialize_Setup_Time_Screen	;wreg free
  5803                           
  5804                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  5805  003022  EC1A  F00E         	call	_Update_Setup_Time_Screen	;wreg free
  5806                           
  5807                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  5808  003026  0E01               	movlw	1
  5809  003028  6E49               	movwf	_In_Time_Setup,c
  5810                           
  5811                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  5812  00302A  D04D               	goto	l10285
  5813  00302C                     l10245:
  5814                           
  5815                           ;Setup_Time.c: 51: {
  5816                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  5817  00302C  ECCD  F01C         	call	_check_for_button_input	;wreg free
  5818  003030  06E8               	decf	wreg,f,c
  5819  003032  A4D8               	btfss	status,2,c
  5820  003034  D048               	goto	l10285
  5821                           
  5822                           ;Setup_Time.c: 53: {
  5823                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  5824  003036  0E02               	movlw	2
  5825  003038  0100               	movlb	0	; () banked
  5826  00303A  65F4               	cpfsgt	_found& (0+255),b
  5827  00303C  D041               	goto	l10283
  5828                           
  5829                           ; BSR set to: 0
  5830  00303E  0E09               	movlw	9
  5831  003040  0100               	movlb	0	; () banked
  5832  003042  61F4               	cpfslt	_found& (0+255),b
  5833  003044  D03D               	goto	l10283
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;Setup_Time.c: 56: {
  5837                           ;Setup_Time.c: 57: Do_Beep_Good();
  5838  003046  EC0A  F026         	call	_Do_Beep_Good	;wreg free
  5839                           
  5840                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  5841  00304A  0E03               	movlw	3
  5842  00304C  0100               	movlb	0	; () banked
  5843  00304E  19F4               	xorwf	_found& (0+255),w,b
  5844  003050  A4D8               	btfss	status,2,c
  5845  003052  D003               	goto	l10257
  5846                           
  5847                           ; BSR set to: 0
  5848  003054  EC89  F025         	call	_Go_Prev_Field	;wreg free
  5849  003058  D000               	goto	l10257
  5850  00305A                     l10257:
  5851                           
  5852                           ;Setup_Time.c: 59: if (found == 3) Go_Prev_Field();
  5853  00305A  0E03               	movlw	3
  5854  00305C  0100               	movlb	0	; () banked
  5855  00305E  19F4               	xorwf	_found& (0+255),w,b
  5856  003060  A4D8               	btfss	status,2,c
  5857  003062  D003               	goto	l10261
  5858                           
  5859                           ; BSR set to: 0
  5860  003064  EC89  F025         	call	_Go_Prev_Field	;wreg free
  5861  003068  D000               	goto	l10261
  5862  00306A                     l10261:
  5863                           
  5864                           ;Setup_Time.c: 60: if (found == 4) Go_Next_Field();
  5865  00306A  0E04               	movlw	4
  5866  00306C  0100               	movlb	0	; () banked
  5867  00306E  19F4               	xorwf	_found& (0+255),w,b
  5868  003070  A4D8               	btfss	status,2,c
  5869  003072  D003               	goto	l10265
  5870                           
  5871                           ; BSR set to: 0
  5872  003074  EC99  F025         	call	_Go_Next_Field	;wreg free
  5873  003078  D000               	goto	l10265
  5874  00307A                     l10265:
  5875                           
  5876                           ;Setup_Time.c: 61: if (found == 5) Do_Save_New_Time();
  5877  00307A  0E05               	movlw	5
  5878  00307C  0100               	movlb	0	; () banked
  5879  00307E  19F4               	xorwf	_found& (0+255),w,b
  5880  003080  A4D8               	btfss	status,2,c
  5881  003082  D003               	goto	l10269
  5882                           
  5883                           ; BSR set to: 0
  5884  003084  EC7E  F026         	call	_Do_Save_New_Time	;wreg free
  5885  003088  D000               	goto	l10269
  5886  00308A                     l10269:
  5887                           
  5888                           ;Setup_Time.c: 62: if (found == 6) Decrease_Time();
  5889  00308A  0E06               	movlw	6
  5890  00308C  0100               	movlb	0	; () banked
  5891  00308E  19F4               	xorwf	_found& (0+255),w,b
  5892  003090  A4D8               	btfss	status,2,c
  5893  003092  D003               	goto	l10273
  5894                           
  5895                           ; BSR set to: 0
  5896  003094  EC21  F01D         	call	_Decrease_Time	;wreg free
  5897  003098  D000               	goto	l10273
  5898  00309A                     l10273:
  5899                           
  5900                           ;Setup_Time.c: 63: if (found == 7) Increase_Time();
  5901  00309A  0E07               	movlw	7
  5902  00309C  0100               	movlb	0	; () banked
  5903  00309E  19F4               	xorwf	_found& (0+255),w,b
  5904  0030A0  A4D8               	btfss	status,2,c
  5905  0030A2  D003               	goto	l10277
  5906                           
  5907                           ; BSR set to: 0
  5908  0030A4  EC18  F01C         	call	_Increase_Time	;wreg free
  5909  0030A8  D000               	goto	l10277
  5910  0030AA                     l10277:
  5911                           
  5912                           ;Setup_Time.c: 64: if (found == 8) Exit_Time_Setup();
  5913  0030AA  0E08               	movlw	8
  5914  0030AC  0100               	movlb	0	; () banked
  5915  0030AE  19F4               	xorwf	_found& (0+255),w,b
  5916  0030B0  A4D8               	btfss	status,2,c
  5917  0030B2  D003               	goto	l10281
  5918                           
  5919                           ; BSR set to: 0
  5920  0030B4  ECC5  F026         	call	_Exit_Time_Setup	;wreg free
  5921  0030B8  D000               	goto	l10281
  5922  0030BA                     l10281:
  5923                           
  5924                           ;Setup_Time.c: 66: found = 0xff;
  5925  0030BA  0100               	movlb	0	; () banked
  5926  0030BC  69F4               	setf	_found& (0+255),b
  5927                           
  5928                           ;Setup_Time.c: 67: }
  5929  0030BE  D003               	goto	l10285
  5930  0030C0                     l10283:
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;Setup_Time.c: 68: else
  5934                           ;Setup_Time.c: 69: {
  5935                           ;Setup_Time.c: 70: Do_Beep_Bad();
  5936  0030C0  EC16  F026         	call	_Do_Beep_Bad	;wreg free
  5937  0030C4  D000               	goto	l10285
  5938  0030C6                     l10285:
  5939  0030C6  0449               	decf	_In_Time_Setup,w,c
  5940  0030C8  B4D8               	btfsc	status,2,c
  5941  0030CA  D7B0               	goto	l10245
  5942  0030CC  0012               	return		;funcret
  5943  0030CE                     __end_of_Do_Setup_Time:
  5944                           	opt stack 0
  5945                           tblptru	equ	0xFF8
  5946                           tblptrh	equ	0xFF7
  5947                           tblptrl	equ	0xFF6
  5948                           tablat	equ	0xFF5
  5949                           postinc0	equ	0xFEE
  5950                           wreg	equ	0xFE8
  5951                           postdec1	equ	0xFE5
  5952                           fsr1l	equ	0xFE1
  5953                           status	equ	0xFD8
  5954                           
  5955 ;; *************** function _Initialize_Setup_Time_Screen *****************
  5956 ;; Defined at:
  5957 ;;		line 193 in file "Setup_Time.c"
  5958 ;; Parameters:    Size  Location     Type
  5959 ;;		None
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;		None
  5962 ;; Return value:  Size  Location     Type
  5963 ;;		None               void
  5964 ;; Registers used:
  5965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;Total ram usage:        0 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:   11
  5978 ;; This function calls:
  5979 ;;		_drawtext
  5980 ;;		_fillRect
  5981 ;;		_fillScreen
  5982 ;;		_strcpy
  5983 ;; This function is called by:
  5984 ;;		_Do_Setup_Time
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           	psect	text16
  5989  0023EC                     __ptext16:
  5990                           	opt stack 0
  5991  0023EC                     _Initialize_Setup_Time_Screen:
  5992                           	opt stack 18
  5993                           
  5994                           ;Setup_Time.c: 195: fillScreen(0x0000);
  5995                           
  5996                           ;incstack = 0
  5997  0023EC  0E00               	movlw	0
  5998  0023EE  0100               	movlb	0	; () banked
  5999  0023F0  6FE1               	movwf	(fillScreen@color+1)& (0+255),b
  6000  0023F2  0E00               	movlw	0
  6001  0023F4  6FE0               	movwf	fillScreen@color& (0+255),b
  6002  0023F6  EC67  F025         	call	_fillScreen	;wreg free
  6003                           
  6004                           ;Setup_Time.c: 197: strcpy(txt, "ECE3301L F;21 Final\0");
  6005  0023FA  C042  F0CD         	movff	_txt,strcpy@to
  6006  0023FE  C043  F0CE         	movff	_txt+1,strcpy@to+1
  6007  002402  0EEB               	movlw	low STR_33
  6008  002404  0100               	movlb	0	; () banked
  6009  002406  6FCF               	movwf	strcpy@from& (0+255),b
  6010  002408  0EFE               	movlw	high STR_33
  6011  00240A  0100               	movlb	0	; () banked
  6012  00240C  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  6013  00240E  EC61  F024         	call	_strcpy	;wreg free
  6014                           
  6015                           ;Setup_Time.c: 198: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6016  002412  0E01               	movlw	1
  6017  002414  0101               	movlb	1	; () banked
  6018  002416  6F63               	movwf	drawtext@y& (0+255),b
  6019  002418  C042  F164         	movff	_txt,drawtext@_text
  6020  00241C  C043  F165         	movff	_txt+1,drawtext@_text+1
  6021  002420  0EFF               	movlw	255
  6022  002422  0101               	movlb	1	; () banked
  6023  002424  6F67               	movwf	(drawtext@color+1)& (0+255),b
  6024  002426  6966               	setf	drawtext@color& (0+255),b
  6025  002428  0E00               	movlw	0
  6026  00242A  0101               	movlb	1	; () banked
  6027  00242C  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  6028  00242E  0E00               	movlw	0
  6029  002430  6F68               	movwf	drawtext@bg& (0+255),b
  6030  002432  0E01               	movlw	1
  6031  002434  0101               	movlb	1	; () banked
  6032  002436  6F6A               	movwf	drawtext@size& (0+255),b
  6033  002438  0E01               	movlw	1
  6034  00243A  EC18  F015         	call	_drawtext
  6035                           
  6036                           ;Setup_Time.c: 201: strcpy(txt, "Time Setup\0");
  6037  00243E  C042  F0CD         	movff	_txt,strcpy@to
  6038  002442  C043  F0CE         	movff	_txt+1,strcpy@to+1
  6039  002446  0E88               	movlw	low STR_34
  6040  002448  0100               	movlb	0	; () banked
  6041  00244A  6FCF               	movwf	strcpy@from& (0+255),b
  6042  00244C  0EFF               	movlw	high STR_34
  6043  00244E  0100               	movlb	0	; () banked
  6044  002450  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  6045  002452  EC61  F024         	call	_strcpy	;wreg free
  6046                           
  6047                           ;Setup_Time.c: 202: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  6048  002456  0E10               	movlw	16
  6049  002458  0101               	movlb	1	; () banked
  6050  00245A  6F63               	movwf	drawtext@y& (0+255),b
  6051  00245C  C042  F164         	movff	_txt,drawtext@_text
  6052  002460  C043  F165         	movff	_txt+1,drawtext@_text+1
  6053  002464  0EF8               	movlw	248
  6054  002466  0101               	movlb	1	; () banked
  6055  002468  6F67               	movwf	(drawtext@color+1)& (0+255),b
  6056  00246A  0E1F               	movlw	31
  6057  00246C  6F66               	movwf	drawtext@color& (0+255),b
  6058  00246E  0E00               	movlw	0
  6059  002470  0101               	movlb	1	; () banked
  6060  002472  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  6061  002474  0E00               	movlw	0
  6062  002476  6F68               	movwf	drawtext@bg& (0+255),b
  6063  002478  0E02               	movlw	2
  6064  00247A  0101               	movlb	1	; () banked
  6065  00247C  6F6A               	movwf	drawtext@size& (0+255),b
  6066  00247E  0E04               	movlw	4
  6067  002480  EC18  F015         	call	_drawtext
  6068                           
  6069                           ;Setup_Time.c: 204: strcpy(txt, "Time");
  6070  002484  C042  F0CD         	movff	_txt,strcpy@to
  6071  002488  C043  F0CE         	movff	_txt+1,strcpy@to+1
  6072  00248C  0EB0               	movlw	low (STR_12+6)
  6073  00248E  0100               	movlb	0	; () banked
  6074  002490  6FCF               	movwf	strcpy@from& (0+255),b
  6075  002492  0EFF               	movlw	high (STR_12+6)
  6076  002494  0100               	movlb	0	; () banked
  6077  002496  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  6078  002498  EC61  F024         	call	_strcpy	;wreg free
  6079                           
  6080                           ;Setup_Time.c: 205: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  6081  00249C  0E28               	movlw	40
  6082  00249E  0101               	movlb	1	; () banked
  6083  0024A0  6F63               	movwf	drawtext@y& (0+255),b
  6084  0024A2  C042  F164         	movff	_txt,drawtext@_text
  6085  0024A6  C043  F165         	movff	_txt+1,drawtext@_text+1
  6086  0024AA  0E00               	movlw	0
  6087  0024AC  0101               	movlb	1	; () banked
  6088  0024AE  6F67               	movwf	(drawtext@color+1)& (0+255),b
  6089  0024B0  0E1F               	movlw	31
  6090  0024B2  6F66               	movwf	drawtext@color& (0+255),b
  6091  0024B4  0E00               	movlw	0
  6092  0024B6  0101               	movlb	1	; () banked
  6093  0024B8  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  6094  0024BA  0E00               	movlw	0
  6095  0024BC  6F68               	movwf	drawtext@bg& (0+255),b
  6096  0024BE  0E01               	movlw	1
  6097  0024C0  0101               	movlb	1	; () banked
  6098  0024C2  6F6A               	movwf	drawtext@size& (0+255),b
  6099  0024C4  0E32               	movlw	50
  6100  0024C6  EC18  F015         	call	_drawtext
  6101                           
  6102                           ;Setup_Time.c: 207: fillRect(15-1, 52+16, 25,2,0x07FF);
  6103  0024CA  0E44               	movlw	68
  6104  0024CC  0100               	movlb	0	; () banked
  6105  0024CE  6FDF               	movwf	fillRect@y& (0+255),b
  6106  0024D0  0E19               	movlw	25
  6107  0024D2  0100               	movlb	0	; () banked
  6108  0024D4  6FE0               	movwf	fillRect@w& (0+255),b
  6109  0024D6  0E02               	movlw	2
  6110  0024D8  0100               	movlb	0	; () banked
  6111  0024DA  6FE1               	movwf	fillRect@h& (0+255),b
  6112  0024DC  0E07               	movlw	7
  6113  0024DE  0100               	movlb	0	; () banked
  6114  0024E0  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  6115  0024E2  69E2               	setf	fillRect@color& (0+255),b
  6116  0024E4  0E0E               	movlw	14
  6117  0024E6  EC25  F021         	call	_fillRect
  6118                           
  6119                           ;Setup_Time.c: 208: strcpy(txt, "Date");
  6120  0024EA  C042  F0CD         	movff	_txt,strcpy@to
  6121  0024EE  C043  F0CE         	movff	_txt+1,strcpy@to+1
  6122  0024F2  0EDF               	movlw	low STR_11
  6123  0024F4  0100               	movlb	0	; () banked
  6124  0024F6  6FCF               	movwf	strcpy@from& (0+255),b
  6125  0024F8  0EFF               	movlw	high STR_11
  6126  0024FA  0100               	movlb	0	; () banked
  6127  0024FC  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  6128  0024FE  EC61  F024         	call	_strcpy	;wreg free
  6129                           
  6130                           ;Setup_Time.c: 209: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  6131  002502  0E47               	movlw	71
  6132  002504  0101               	movlb	1	; () banked
  6133  002506  6F63               	movwf	drawtext@y& (0+255),b
  6134  002508  C042  F164         	movff	_txt,drawtext@_text
  6135  00250C  C043  F165         	movff	_txt+1,drawtext@_text+1
  6136  002510  0EF8               	movlw	248
  6137  002512  0101               	movlb	1	; () banked
  6138  002514  6F67               	movwf	(drawtext@color+1)& (0+255),b
  6139  002516  0E00               	movlw	0
  6140  002518  6F66               	movwf	drawtext@color& (0+255),b
  6141  00251A  0E00               	movlw	0
  6142  00251C  0101               	movlb	1	; () banked
  6143  00251E  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  6144  002520  0E00               	movlw	0
  6145  002522  6F68               	movwf	drawtext@bg& (0+255),b
  6146  002524  0E01               	movlw	1
  6147  002526  0101               	movlb	1	; () banked
  6148  002528  6F6A               	movwf	drawtext@size& (0+255),b
  6149  00252A  0E32               	movlw	50
  6150  00252C  EC18  F015         	call	_drawtext
  6151  002530  0012               	return		;funcret
  6152  002532                     __end_of_Initialize_Setup_Time_Screen:
  6153                           	opt stack 0
  6154                           tblptru	equ	0xFF8
  6155                           tblptrh	equ	0xFF7
  6156                           tblptrl	equ	0xFF6
  6157                           tablat	equ	0xFF5
  6158                           postinc0	equ	0xFEE
  6159                           wreg	equ	0xFE8
  6160                           postdec1	equ	0xFE5
  6161                           fsr1l	equ	0xFE1
  6162                           status	equ	0xFD8
  6163                           
  6164 ;; *************** function _Increase_Time *****************
  6165 ;; Defined at:
  6166 ;;		line 76 in file "Setup_Time.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;		None               void
  6173 ;; Registers used:
  6174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;Total ram usage:        0 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:   12
  6187 ;; This function calls:
  6188 ;;		_Update_Setup_Time_Screen
  6189 ;; This function is called by:
  6190 ;;		_Do_Setup_Time
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text17
  6195  003830                     __ptext17:
  6196                           	opt stack 0
  6197  003830                     _Increase_Time:
  6198                           	opt stack 17
  6199                           
  6200                           ;Setup_Time.c: 78: switch (Select_Field)
  6201                           
  6202                           ;incstack = 0
  6203  003830  D042               	goto	l9889
  6204  003832                     l9851:
  6205                           
  6206                           ;Setup_Time.c: 81: setup_hour++;
  6207  003832  0100               	movlb	0	; () banked
  6208  003834  2BFB               	incf	_setup_hour& (0+255),f,b
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;Setup_Time.c: 82: if (setup_hour == 24) setup_hour = 0;
  6212  003836  0E18               	movlw	24
  6213  003838  0100               	movlb	0	; () banked
  6214  00383A  19FB               	xorwf	_setup_hour& (0+255),w,b
  6215  00383C  A4D8               	btfss	status,2,c
  6216  00383E  D050               	goto	l9891
  6217                           
  6218                           ; BSR set to: 0
  6219  003840  0E00               	movlw	0
  6220  003842  0100               	movlb	0	; () banked
  6221  003844  6FFB               	movwf	_setup_hour& (0+255),b
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;Setup_Time.c: 83: break;
  6225  003846  D04C               	goto	l9891
  6226  003848                     l9857:
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;Setup_Time.c: 86: setup_minute++;
  6230  003848  0100               	movlb	0	; () banked
  6231  00384A  2BFC               	incf	_setup_minute& (0+255),f,b
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;Setup_Time.c: 87: if (setup_minute == 60) setup_minute = 0;
  6235  00384C  0E3C               	movlw	60
  6236  00384E  0100               	movlb	0	; () banked
  6237  003850  19FC               	xorwf	_setup_minute& (0+255),w,b
  6238  003852  A4D8               	btfss	status,2,c
  6239  003854  D045               	goto	l9891
  6240                           
  6241                           ; BSR set to: 0
  6242  003856  0E00               	movlw	0
  6243  003858  0100               	movlb	0	; () banked
  6244  00385A  6FFC               	movwf	_setup_minute& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;Setup_Time.c: 88: break;
  6248  00385C  D041               	goto	l9891
  6249  00385E                     l9863:
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;Setup_Time.c: 92: setup_second++;
  6253  00385E  0100               	movlb	0	; () banked
  6254  003860  2BFE               	incf	_setup_second& (0+255),f,b
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;Setup_Time.c: 93: if (setup_second == 60) setup_second = 0;
  6258  003862  0E3C               	movlw	60
  6259  003864  0100               	movlb	0	; () banked
  6260  003866  19FE               	xorwf	_setup_second& (0+255),w,b
  6261  003868  A4D8               	btfss	status,2,c
  6262  00386A  D03A               	goto	l9891
  6263                           
  6264                           ; BSR set to: 0
  6265  00386C  0E00               	movlw	0
  6266  00386E  0100               	movlb	0	; () banked
  6267  003870  6FFE               	movwf	_setup_second& (0+255),b
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;Setup_Time.c: 94: break;
  6271  003872  D036               	goto	l9891
  6272  003874                     l9869:
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;Setup_Time.c: 98: setup_month++;
  6276  003874  0100               	movlb	0	; () banked
  6277  003876  2BFD               	incf	_setup_month& (0+255),f,b
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;Setup_Time.c: 99: if (setup_month == 12) setup_month = 0;
  6281  003878  0E0C               	movlw	12
  6282  00387A  0100               	movlb	0	; () banked
  6283  00387C  19FD               	xorwf	_setup_month& (0+255),w,b
  6284  00387E  A4D8               	btfss	status,2,c
  6285  003880  D02F               	goto	l9891
  6286                           
  6287                           ; BSR set to: 0
  6288  003882  0E00               	movlw	0
  6289  003884  0100               	movlb	0	; () banked
  6290  003886  6FFD               	movwf	_setup_month& (0+255),b
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;Setup_Time.c: 100: break;
  6294  003888  D02B               	goto	l9891
  6295  00388A                     l9875:
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;Setup_Time.c: 104: setup_day++;
  6299  00388A  0100               	movlb	0	; () banked
  6300  00388C  2BF9               	incf	_setup_day& (0+255),f,b
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;Setup_Time.c: 105: if (setup_day == 31) setup_day = 0;
  6304  00388E  0E1F               	movlw	31
  6305  003890  0100               	movlb	0	; () banked
  6306  003892  19F9               	xorwf	_setup_day& (0+255),w,b
  6307  003894  A4D8               	btfss	status,2,c
  6308  003896  D024               	goto	l9891
  6309                           
  6310                           ; BSR set to: 0
  6311  003898  0E00               	movlw	0
  6312  00389A  0100               	movlb	0	; () banked
  6313  00389C  6FF9               	movwf	_setup_day& (0+255),b
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;Setup_Time.c: 106: break;
  6317  00389E  D020               	goto	l9891
  6318  0038A0                     l9881:
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;Setup_Time.c: 110: setup_year++;
  6322  0038A0  0100               	movlb	0	; () banked
  6323  0038A2  2BFF               	incf	_setup_year& (0+255),f,b
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;Setup_Time.c: 111: if (setup_year == 100) setup_year = 0;
  6327  0038A4  0E64               	movlw	100
  6328  0038A6  0100               	movlb	0	; () banked
  6329  0038A8  19FF               	xorwf	_setup_year& (0+255),w,b
  6330  0038AA  A4D8               	btfss	status,2,c
  6331  0038AC  D019               	goto	l9891
  6332                           
  6333                           ; BSR set to: 0
  6334  0038AE  0E00               	movlw	0
  6335  0038B0  0100               	movlb	0	; () banked
  6336  0038B2  6FFF               	movwf	_setup_year& (0+255),b
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;Setup_Time.c: 117: }
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;Setup_Time.c: 116: break;
  6343                           
  6344                           ;Setup_Time.c: 115: default:
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;Setup_Time.c: 112: break;
  6348  0038B4  D015               	goto	l9891
  6349  0038B6                     l9889:
  6350  0038B6  0100               	movlb	0	; () banked
  6351  0038B8  51F3               	movf	_Select_Field& (0+255),w,b
  6352                           
  6353                           ; Switch size 1, requested type "space"
  6354                           ; Number of cases is 6, Range of values is 0 to 5
  6355                           ; switch strategies available:
  6356                           ; Name         Instructions Cycles
  6357                           ; simple_byte           19    10 (average)
  6358                           ;	Chosen strategy is simple_byte
  6359  0038BA  0A00               	xorlw	0	; case 0
  6360  0038BC  B4D8               	btfsc	status,2,c
  6361  0038BE  D7B9               	goto	l9851
  6362  0038C0  0A01               	xorlw	1	; case 1
  6363  0038C2  B4D8               	btfsc	status,2,c
  6364  0038C4  D7C1               	goto	l9857
  6365  0038C6  0A03               	xorlw	3	; case 2
  6366  0038C8  B4D8               	btfsc	status,2,c
  6367  0038CA  D7C9               	goto	l9863
  6368  0038CC  0A01               	xorlw	1	; case 3
  6369  0038CE  B4D8               	btfsc	status,2,c
  6370  0038D0  D7D1               	goto	l9869
  6371  0038D2  0A07               	xorlw	7	; case 4
  6372  0038D4  B4D8               	btfsc	status,2,c
  6373  0038D6  D7D9               	goto	l9875
  6374  0038D8  0A01               	xorlw	1	; case 5
  6375  0038DA  B4D8               	btfsc	status,2,c
  6376  0038DC  D7E1               	goto	l9881
  6377  0038DE  D000               	goto	l9891
  6378  0038E0                     l9891:
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;Setup_Time.c: 118: Update_Setup_Time_Screen();
  6382  0038E0  EC1A  F00E         	call	_Update_Setup_Time_Screen	;wreg free
  6383  0038E4  0012               	return		;funcret
  6384  0038E6                     __end_of_Increase_Time:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           postinc0	equ	0xFEE
  6391                           wreg	equ	0xFE8
  6392                           postdec1	equ	0xFE5
  6393                           fsr1l	equ	0xFE1
  6394                           status	equ	0xFD8
  6395                           
  6396 ;; *************** function _Go_Prev_Field *****************
  6397 ;; Defined at:
  6398 ;;		line 172 in file "Setup_Time.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;		None               void
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;Total ram usage:        0 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:   10
  6419 ;; This function calls:
  6420 ;;		_Update_Setup_Screen_Cursor_Backward
  6421 ;; This function is called by:
  6422 ;;		_Do_Setup_Time
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text18
  6427  004B12                     __ptext18:
  6428                           	opt stack 0
  6429  004B12                     _Go_Prev_Field:
  6430                           	opt stack 19
  6431                           
  6432                           ;Setup_Time.c: 174: if (Select_Field == 0) Select_Field = 5;
  6433                           
  6434                           ;incstack = 0
  6435  004B12  0100               	movlb	0	; () banked
  6436  004B14  51F3               	movf	_Select_Field& (0+255),w,b
  6437  004B16  A4D8               	btfss	status,2,c
  6438  004B18  D004               	goto	l9791
  6439                           
  6440                           ; BSR set to: 0
  6441  004B1A  0E05               	movlw	5
  6442  004B1C  0100               	movlb	0	; () banked
  6443  004B1E  6FF3               	movwf	_Select_Field& (0+255),b
  6444  004B20  D003               	goto	l9793
  6445  004B22                     l9791:
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;Setup_Time.c: 175: else Select_Field--;
  6449  004B22  0100               	movlb	0	; () banked
  6450  004B24  07F3               	decf	_Select_Field& (0+255),f,b
  6451  004B26  D000               	goto	l9793
  6452  004B28                     l9793:
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;Setup_Time.c: 176: Update_Setup_Screen_Cursor_Backward(Select_Field);
  6456  004B28  0100               	movlb	0	; () banked
  6457  004B2A  51F3               	movf	_Select_Field& (0+255),w,b
  6458  004B2C  ECE6  F00B         	call	_Update_Setup_Screen_Cursor_Backward
  6459  004B30  0012               	return		;funcret
  6460  004B32                     __end_of_Go_Prev_Field:
  6461                           	opt stack 0
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           postinc0	equ	0xFEE
  6467                           wreg	equ	0xFE8
  6468                           postdec1	equ	0xFE5
  6469                           fsr1l	equ	0xFE1
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function _Go_Next_Field *****************
  6473 ;; Defined at:
  6474 ;;		line 163 in file "Setup_Time.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;Total ram usage:        0 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:   10
  6495 ;; This function calls:
  6496 ;;		_Update_Setup_Screen_Cursor_Forward
  6497 ;; This function is called by:
  6498 ;;		_Do_Setup_Time
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           	psect	text19
  6503  004B32                     __ptext19:
  6504                           	opt stack 0
  6505  004B32                     _Go_Next_Field:
  6506                           	opt stack 19
  6507                           
  6508                           ;Setup_Time.c: 166: Select_Field++;
  6509                           
  6510                           ;incstack = 0
  6511  004B32  0100               	movlb	0	; () banked
  6512  004B34  2BF3               	incf	_Select_Field& (0+255),f,b
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;Setup_Time.c: 167: if (Select_Field == 6) Select_Field = 0;
  6516  004B36  0E06               	movlw	6
  6517  004B38  0100               	movlb	0	; () banked
  6518  004B3A  19F3               	xorwf	_Select_Field& (0+255),w,b
  6519  004B3C  A4D8               	btfss	status,2,c
  6520  004B3E  D004               	goto	l9801
  6521                           
  6522                           ; BSR set to: 0
  6523  004B40  0E00               	movlw	0
  6524  004B42  0100               	movlb	0	; () banked
  6525  004B44  6FF3               	movwf	_Select_Field& (0+255),b
  6526  004B46  D000               	goto	l9801
  6527  004B48                     l9801:
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;Setup_Time.c: 168: Update_Setup_Screen_Cursor_Forward(Select_Field);
  6531  004B48  0100               	movlb	0	; () banked
  6532  004B4A  51F3               	movf	_Select_Field& (0+255),w,b
  6533  004B4C  ECC2  F00A         	call	_Update_Setup_Screen_Cursor_Forward
  6534  004B50  0012               	return		;funcret
  6535  004B52                     __end_of_Go_Next_Field:
  6536                           	opt stack 0
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           postinc0	equ	0xFEE
  6542                           wreg	equ	0xFE8
  6543                           postdec1	equ	0xFE5
  6544                           fsr1l	equ	0xFE1
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _Exit_Time_Setup *****************
  6548 ;; Defined at:
  6549 ;;		line 187 in file "Setup_Time.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;		None               void
  6556 ;; Registers used:
  6557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:   12
  6570 ;; This function calls:
  6571 ;;		_DS3231_Read_Time
  6572 ;;		_Initialize_Screen
  6573 ;; This function is called by:
  6574 ;;		_Do_Setup_Time
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text20
  6579  004D8A                     __ptext20:
  6580                           	opt stack 0
  6581  004D8A                     _Exit_Time_Setup:
  6582                           	opt stack 17
  6583                           
  6584                           ;Setup_Time.c: 189: DS3231_Read_Time();
  6585                           
  6586                           ;incstack = 0
  6587  004D8A  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
  6588                           
  6589                           ;Setup_Time.c: 190: Initialize_Screen();
  6590  004D8E  ECCE  F003         	call	_Initialize_Screen	;wreg free
  6591                           
  6592                           ;Setup_Time.c: 191: In_Time_Setup = 0;
  6593  004D92  0E00               	movlw	0
  6594  004D94  6E49               	movwf	_In_Time_Setup,c
  6595  004D96  0012               	return		;funcret
  6596  004D98                     __end_of_Exit_Time_Setup:
  6597                           	opt stack 0
  6598                           tblptru	equ	0xFF8
  6599                           tblptrh	equ	0xFF7
  6600                           tblptrl	equ	0xFF6
  6601                           tablat	equ	0xFF5
  6602                           postinc0	equ	0xFEE
  6603                           wreg	equ	0xFE8
  6604                           postdec1	equ	0xFE5
  6605                           fsr1l	equ	0xFE1
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _Do_Save_New_Time *****************
  6609 ;; Defined at:
  6610 ;;		line 179 in file "Setup_Time.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;		None               void
  6617 ;; Registers used:
  6618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:   12
  6631 ;; This function calls:
  6632 ;;		_DS3231_Read_Time
  6633 ;;		_DS3231_Write_Time
  6634 ;;		_Initialize_Screen
  6635 ;; This function is called by:
  6636 ;;		_Do_Setup_Time
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           	psect	text21
  6641  004CFC                     __ptext21:
  6642                           	opt stack 0
  6643  004CFC                     _Do_Save_New_Time:
  6644                           	opt stack 17
  6645                           
  6646                           ;Setup_Time.c: 181: DS3231_Write_Time();
  6647                           
  6648                           ;incstack = 0
  6649  004CFC  ECF3  F01A         	call	_DS3231_Write_Time	;wreg free
  6650                           
  6651                           ;Setup_Time.c: 182: DS3231_Read_Time();
  6652  004D00  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
  6653                           
  6654                           ;Setup_Time.c: 183: Initialize_Screen();
  6655  004D04  ECCE  F003         	call	_Initialize_Screen	;wreg free
  6656                           
  6657                           ;Setup_Time.c: 184: In_Time_Setup = 0;
  6658  004D08  0E00               	movlw	0
  6659  004D0A  6E49               	movwf	_In_Time_Setup,c
  6660  004D0C  0012               	return		;funcret
  6661  004D0E                     __end_of_Do_Save_New_Time:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           postinc0	equ	0xFEE
  6668                           wreg	equ	0xFE8
  6669                           postdec1	equ	0xFE5
  6670                           fsr1l	equ	0xFE1
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _DS3231_Write_Time *****************
  6674 ;; Defined at:
  6675 ;;		line 90 in file "I2C_Support.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;		None
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;  Address         1   35[BANK1 ] unsigned char 
  6680 ;;  Device          1   34[BANK1 ] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;		None               void
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;Total ram usage:        2 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    6
  6697 ;; This function calls:
  6698 ;;		_I2C_Start
  6699 ;;		_I2C_Stop
  6700 ;;		_I2C_Write
  6701 ;;		_dec_2_bcd
  6702 ;; This function is called by:
  6703 ;;		_Do_Save_New_Time
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text22
  6708  0035E6                     __ptext22:
  6709                           	opt stack 0
  6710  0035E6                     _DS3231_Write_Time:
  6711                           	opt stack 22
  6712                           
  6713                           ;I2C_Support.c: 92: char Device = 0x68;
  6714                           
  6715                           ;incstack = 0
  6716  0035E6  0E68               	movlw	104
  6717  0035E8  0101               	movlb	1	; () banked
  6718  0035EA  6F7A               	movwf	DS3231_Write_Time@Device& (0+255),b
  6719                           
  6720                           ;I2C_Support.c: 93: char Address = 0x00;
  6721  0035EC  0E00               	movlw	0
  6722  0035EE  0101               	movlb	1	; () banked
  6723  0035F0  6F7B               	movwf	DS3231_Write_Time@Address& (0+255),b
  6724                           
  6725                           ; BSR set to: 1
  6726                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  6727  0035F2  0100               	movlb	0	; () banked
  6728  0035F4  51FE               	movf	_setup_second& (0+255),w,b
  6729  0035F6  EC15  F020         	call	_dec_2_bcd
  6730  0035FA  0101               	movlb	1	; () banked
  6731  0035FC  5173               	movf	?_dec_2_bcd& (0+255),w,b
  6732  0035FE  0100               	movlb	0	; () banked
  6733  003600  6FF5               	movwf	_second& (0+255),b
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  6737  003602  0100               	movlb	0	; () banked
  6738  003604  51FC               	movf	_setup_minute& (0+255),w,b
  6739  003606  EC15  F020         	call	_dec_2_bcd
  6740  00360A  0101               	movlb	1	; () banked
  6741  00360C  5173               	movf	?_dec_2_bcd& (0+255),w,b
  6742  00360E  0100               	movlb	0	; () banked
  6743  003610  6F8B               	movwf	_minute& (0+255),b
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  6747  003612  0100               	movlb	0	; () banked
  6748  003614  51FB               	movf	_setup_hour& (0+255),w,b
  6749  003616  EC15  F020         	call	_dec_2_bcd
  6750  00361A  0101               	movlb	1	; () banked
  6751  00361C  5173               	movf	?_dec_2_bcd& (0+255),w,b
  6752  00361E  0100               	movlb	0	; () banked
  6753  003620  6F8A               	movwf	_hour& (0+255),b
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;I2C_Support.c: 97: dow = 0x01;
  6757  003622  0E01               	movlw	1
  6758  003624  0100               	movlb	0	; () banked
  6759  003626  6F89               	movwf	_dow& (0+255),b
  6760                           
  6761                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  6762  003628  0100               	movlb	0	; () banked
  6763  00362A  51F9               	movf	_setup_day& (0+255),w,b
  6764  00362C  EC15  F020         	call	_dec_2_bcd
  6765  003630  0101               	movlb	1	; () banked
  6766  003632  5173               	movf	?_dec_2_bcd& (0+255),w,b
  6767  003634  0100               	movlb	0	; () banked
  6768  003636  6F88               	movwf	_day& (0+255),b
  6769                           
  6770                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  6771  003638  0100               	movlb	0	; () banked
  6772  00363A  51FD               	movf	_setup_month& (0+255),w,b
  6773  00363C  EC15  F020         	call	_dec_2_bcd
  6774  003640  0101               	movlb	1	; () banked
  6775  003642  5173               	movf	?_dec_2_bcd& (0+255),w,b
  6776  003644  0100               	movlb	0	; () banked
  6777  003646  6F8C               	movwf	_month& (0+255),b
  6778                           
  6779                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  6780  003648  0100               	movlb	0	; () banked
  6781  00364A  51FF               	movf	_setup_year& (0+255),w,b
  6782  00364C  EC15  F020         	call	_dec_2_bcd
  6783  003650  0101               	movlb	1	; () banked
  6784  003652  5173               	movf	?_dec_2_bcd& (0+255),w,b
  6785  003654  0100               	movlb	0	; () banked
  6786  003656  6F8F               	movwf	_year& (0+255),b
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;I2C_Support.c: 101: I2C_Start();
  6790  003658  ECAB  F026         	call	_I2C_Start	;wreg free
  6791                           
  6792                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  6793  00365C  0101               	movlb	1	; () banked
  6794  00365E  517A               	movf	DS3231_Write_Time@Device& (0+255),w,b
  6795  003660  257A               	addwf	DS3231_Write_Time@Device& (0+255),w,b
  6796  003662  EC10  F023         	call	_I2C_Write
  6797                           
  6798                           ;I2C_Support.c: 103: I2C_Write(Address);
  6799  003666  0101               	movlb	1	; () banked
  6800  003668  517B               	movf	DS3231_Write_Time@Address& (0+255),w,b
  6801  00366A  EC10  F023         	call	_I2C_Write
  6802                           
  6803                           ;I2C_Support.c: 104: I2C_Write(second);
  6804  00366E  0100               	movlb	0	; () banked
  6805  003670  51F5               	movf	_second& (0+255),w,b
  6806  003672  EC10  F023         	call	_I2C_Write
  6807                           
  6808                           ;I2C_Support.c: 105: I2C_Write(minute);
  6809  003676  0100               	movlb	0	; () banked
  6810  003678  518B               	movf	_minute& (0+255),w,b
  6811  00367A  EC10  F023         	call	_I2C_Write
  6812                           
  6813                           ;I2C_Support.c: 106: I2C_Write(hour);
  6814  00367E  0100               	movlb	0	; () banked
  6815  003680  518A               	movf	_hour& (0+255),w,b
  6816  003682  EC10  F023         	call	_I2C_Write
  6817                           
  6818                           ;I2C_Support.c: 107: I2C_Write(dow);
  6819  003686  0100               	movlb	0	; () banked
  6820  003688  5189               	movf	_dow& (0+255),w,b
  6821  00368A  EC10  F023         	call	_I2C_Write
  6822                           
  6823                           ;I2C_Support.c: 108: I2C_Write(day);
  6824  00368E  0100               	movlb	0	; () banked
  6825  003690  5188               	movf	_day& (0+255),w,b
  6826  003692  EC10  F023         	call	_I2C_Write
  6827                           
  6828                           ;I2C_Support.c: 109: I2C_Write(month);
  6829  003696  0100               	movlb	0	; () banked
  6830  003698  518C               	movf	_month& (0+255),w,b
  6831  00369A  EC10  F023         	call	_I2C_Write
  6832                           
  6833                           ;I2C_Support.c: 110: I2C_Write(year);
  6834  00369E  0100               	movlb	0	; () banked
  6835  0036A0  518F               	movf	_year& (0+255),w,b
  6836  0036A2  EC10  F023         	call	_I2C_Write
  6837                           
  6838                           ;I2C_Support.c: 111: I2C_Stop();
  6839  0036A6  ECA2  F026         	call	_I2C_Stop	;wreg free
  6840  0036AA  0012               	return		;funcret
  6841  0036AC                     __end_of_DS3231_Write_Time:
  6842                           	opt stack 0
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           postinc0	equ	0xFEE
  6848                           wreg	equ	0xFE8
  6849                           postdec1	equ	0xFE5
  6850                           fsr1l	equ	0xFE1
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function _Decrease_Time *****************
  6854 ;; Defined at:
  6855 ;;		line 121 in file "Setup_Time.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;		None               void
  6862 ;; Registers used:
  6863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;Total ram usage:        0 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:   12
  6876 ;; This function calls:
  6877 ;;		_Update_Setup_Time_Screen
  6878 ;; This function is called by:
  6879 ;;		_Do_Setup_Time
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text23
  6884  003A42                     __ptext23:
  6885                           	opt stack 0
  6886  003A42                     _Decrease_Time:
  6887                           	opt stack 17
  6888                           
  6889                           ;Setup_Time.c: 123: switch (Select_Field)
  6890                           
  6891                           ;incstack = 0
  6892  003A42  D03A               	goto	l9845
  6893  003A44                     l9811:
  6894                           
  6895                           ;Setup_Time.c: 126: if (setup_hour == 0) setup_hour = 23;
  6896  003A44  0100               	movlb	0	; () banked
  6897  003A46  51FB               	movf	_setup_hour& (0+255),w,b
  6898  003A48  A4D8               	btfss	status,2,c
  6899  003A4A  D004               	goto	l9815
  6900                           
  6901                           ; BSR set to: 0
  6902  003A4C  0E17               	movlw	23
  6903  003A4E  0100               	movlb	0	; () banked
  6904  003A50  6FFB               	movwf	_setup_hour& (0+255),b
  6905  003A52  D047               	goto	l9847
  6906  003A54                     l9815:
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;Setup_Time.c: 127: else --setup_hour;
  6910  003A54  0100               	movlb	0	; () banked
  6911  003A56  07FB               	decf	_setup_hour& (0+255),f,b
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;Setup_Time.c: 129: break;
  6915  003A58  D044               	goto	l9847
  6916  003A5A                     l9817:
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;Setup_Time.c: 131: if (setup_minute == 0) setup_minute = 59;
  6920  003A5A  0100               	movlb	0	; () banked
  6921  003A5C  51FC               	movf	_setup_minute& (0+255),w,b
  6922  003A5E  A4D8               	btfss	status,2,c
  6923  003A60  D004               	goto	l9821
  6924                           
  6925                           ; BSR set to: 0
  6926  003A62  0E3B               	movlw	59
  6927  003A64  0100               	movlb	0	; () banked
  6928  003A66  6FFC               	movwf	_setup_minute& (0+255),b
  6929  003A68  D03C               	goto	l9847
  6930  003A6A                     l9821:
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;Setup_Time.c: 132: else --setup_minute;
  6934  003A6A  0100               	movlb	0	; () banked
  6935  003A6C  07FC               	decf	_setup_minute& (0+255),f,b
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;Setup_Time.c: 134: break;
  6939  003A6E  D039               	goto	l9847
  6940  003A70                     l9823:
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;Setup_Time.c: 136: if (setup_second == 0) setup_second = 59;
  6944  003A70  0100               	movlb	0	; () banked
  6945  003A72  51FE               	movf	_setup_second& (0+255),w,b
  6946  003A74  A4D8               	btfss	status,2,c
  6947  003A76  D004               	goto	l9827
  6948                           
  6949                           ; BSR set to: 0
  6950  003A78  0E3B               	movlw	59
  6951  003A7A  0100               	movlb	0	; () banked
  6952  003A7C  6FFE               	movwf	_setup_second& (0+255),b
  6953  003A7E  D031               	goto	l9847
  6954  003A80                     l9827:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;Setup_Time.c: 137: else
  6958                           ;Setup_Time.c: 138: --setup_second;
  6959  003A80  0100               	movlb	0	; () banked
  6960  003A82  07FE               	decf	_setup_second& (0+255),f,b
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;Setup_Time.c: 140: break;
  6964  003A84  D02E               	goto	l9847
  6965  003A86                     l9829:
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;Setup_Time.c: 142: if (setup_month == 0) setup_month = 12;
  6969  003A86  0100               	movlb	0	; () banked
  6970  003A88  51FD               	movf	_setup_month& (0+255),w,b
  6971  003A8A  A4D8               	btfss	status,2,c
  6972  003A8C  D004               	goto	l9833
  6973                           
  6974                           ; BSR set to: 0
  6975  003A8E  0E0C               	movlw	12
  6976  003A90  0100               	movlb	0	; () banked
  6977  003A92  6FFD               	movwf	_setup_month& (0+255),b
  6978  003A94  D026               	goto	l9847
  6979  003A96                     l9833:
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;Setup_Time.c: 143: else
  6983                           ;Setup_Time.c: 144: --setup_month;
  6984  003A96  0100               	movlb	0	; () banked
  6985  003A98  07FD               	decf	_setup_month& (0+255),f,b
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;Setup_Time.c: 146: break;
  6989  003A9A  D023               	goto	l9847
  6990  003A9C                     l9835:
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;Setup_Time.c: 148: if (setup_day == 0) setup_day = 31;
  6994  003A9C  0100               	movlb	0	; () banked
  6995  003A9E  51F9               	movf	_setup_day& (0+255),w,b
  6996  003AA0  A4D8               	btfss	status,2,c
  6997  003AA2  D004               	goto	l9839
  6998                           
  6999                           ; BSR set to: 0
  7000  003AA4  0E1F               	movlw	31
  7001  003AA6  0100               	movlb	0	; () banked
  7002  003AA8  6FF9               	movwf	_setup_day& (0+255),b
  7003  003AAA  D01B               	goto	l9847
  7004  003AAC                     l9839:
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;Setup_Time.c: 149: else
  7008                           ;Setup_Time.c: 150: --setup_day;
  7009  003AAC  0100               	movlb	0	; () banked
  7010  003AAE  07F9               	decf	_setup_day& (0+255),f,b
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;Setup_Time.c: 152: break;
  7014  003AB0  D018               	goto	l9847
  7015  003AB2                     l9841:
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;Setup_Time.c: 154: --setup_year;
  7019  003AB2  0100               	movlb	0	; () banked
  7020  003AB4  07FF               	decf	_setup_year& (0+255),f,b
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;Setup_Time.c: 159: }
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;Setup_Time.c: 158: break;
  7027                           
  7028                           ;Setup_Time.c: 157: default:
  7029                           
  7030                           ;Setup_Time.c: 156: break;
  7031  003AB6  D015               	goto	l9847
  7032  003AB8                     l9845:
  7033  003AB8  0100               	movlb	0	; () banked
  7034  003ABA  51F3               	movf	_Select_Field& (0+255),w,b
  7035                           
  7036                           ; Switch size 1, requested type "space"
  7037                           ; Number of cases is 6, Range of values is 0 to 5
  7038                           ; switch strategies available:
  7039                           ; Name         Instructions Cycles
  7040                           ; simple_byte           19    10 (average)
  7041                           ;	Chosen strategy is simple_byte
  7042  003ABC  0A00               	xorlw	0	; case 0
  7043  003ABE  B4D8               	btfsc	status,2,c
  7044  003AC0  D7C1               	goto	l9811
  7045  003AC2  0A01               	xorlw	1	; case 1
  7046  003AC4  B4D8               	btfsc	status,2,c
  7047  003AC6  D7C9               	goto	l9817
  7048  003AC8  0A03               	xorlw	3	; case 2
  7049  003ACA  B4D8               	btfsc	status,2,c
  7050  003ACC  D7D1               	goto	l9823
  7051  003ACE  0A01               	xorlw	1	; case 3
  7052  003AD0  B4D8               	btfsc	status,2,c
  7053  003AD2  D7D9               	goto	l9829
  7054  003AD4  0A07               	xorlw	7	; case 4
  7055  003AD6  B4D8               	btfsc	status,2,c
  7056  003AD8  D7E1               	goto	l9835
  7057  003ADA  0A01               	xorlw	1	; case 5
  7058  003ADC  B4D8               	btfsc	status,2,c
  7059  003ADE  D7E9               	goto	l9841
  7060  003AE0  D000               	goto	l9847
  7061  003AE2                     l9847:
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;Setup_Time.c: 160: Update_Setup_Time_Screen();
  7065  003AE2  EC1A  F00E         	call	_Update_Setup_Time_Screen	;wreg free
  7066  003AE6  0012               	return		;funcret
  7067  003AE8                     __end_of_Decrease_Time:
  7068                           	opt stack 0
  7069                           tblptru	equ	0xFF8
  7070                           tblptrh	equ	0xFF7
  7071                           tblptrl	equ	0xFF6
  7072                           tablat	equ	0xFF5
  7073                           postinc0	equ	0xFEE
  7074                           wreg	equ	0xFE8
  7075                           postdec1	equ	0xFE5
  7076                           fsr1l	equ	0xFE1
  7077                           status	equ	0xFD8
  7078                           
  7079 ;; *************** function _Update_Setup_Time_Screen *****************
  7080 ;; Defined at:
  7081 ;;		line 212 in file "Setup_Time.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;		None               void
  7088 ;; Registers used:
  7089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;Total ram usage:        0 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:   11
  7102 ;; This function calls:
  7103 ;;		___awdiv
  7104 ;;		___awmod
  7105 ;;		_drawtext
  7106 ;; This function is called by:
  7107 ;;		_Do_Setup_Time
  7108 ;;		_Increase_Time
  7109 ;;		_Decrease_Time
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text24
  7114  001C34                     __ptext24:
  7115                           	opt stack 0
  7116  001C34                     _Update_Setup_Time_Screen:
  7117                           	opt stack 18
  7118                           
  7119                           ;Setup_Time.c: 214: setup_time[0] = (setup_hour/10) + '0';
  7120                           
  7121                           ;incstack = 0
  7122  001C34  C0FB  F16B         	movff	_setup_hour,___awdiv@dividend
  7123  001C38  0101               	movlb	1	; () banked
  7124  001C3A  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  7125  001C3C  0E00               	movlw	0
  7126  001C3E  0101               	movlb	1	; () banked
  7127  001C40  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  7128  001C42  0E0A               	movlw	10
  7129  001C44  6F6D               	movwf	___awdiv@divisor& (0+255),b
  7130  001C46  ECBE  F019         	call	___awdiv	;wreg free
  7131  001C4A  0101               	movlb	1	; () banked
  7132  001C4C  516B               	movf	?___awdiv& (0+255),w,b
  7133  001C4E  0F30               	addlw	48
  7134  001C50  0101               	movlb	1	; () banked
  7135  001C52  6F4F               	movwf	_setup_time& (0+255),b
  7136                           
  7137                           ;Setup_Time.c: 215: setup_time[1] = (setup_hour%10) + '0';
  7138  001C54  C0FB  F167         	movff	_setup_hour,___awmod@dividend
  7139  001C58  0101               	movlb	1	; () banked
  7140  001C5A  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  7141  001C5C  0E00               	movlw	0
  7142  001C5E  0101               	movlb	1	; () banked
  7143  001C60  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  7144  001C62  0E0A               	movlw	10
  7145  001C64  6F69               	movwf	___awmod@divisor& (0+255),b
  7146  001C66  EC73  F01C         	call	___awmod	;wreg free
  7147  001C6A  0101               	movlb	1	; () banked
  7148  001C6C  5167               	movf	?___awmod& (0+255),w,b
  7149  001C6E  0F30               	addlw	48
  7150  001C70  0101               	movlb	1	; () banked
  7151  001C72  6F50               	movwf	(_setup_time+1)& (0+255),b
  7152                           
  7153                           ;Setup_Time.c: 217: setup_time[3] = (setup_minute/10) + '0';
  7154  001C74  C0FC  F16B         	movff	_setup_minute,___awdiv@dividend
  7155  001C78  0101               	movlb	1	; () banked
  7156  001C7A  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  7157  001C7C  0E00               	movlw	0
  7158  001C7E  0101               	movlb	1	; () banked
  7159  001C80  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  7160  001C82  0E0A               	movlw	10
  7161  001C84  6F6D               	movwf	___awdiv@divisor& (0+255),b
  7162  001C86  ECBE  F019         	call	___awdiv	;wreg free
  7163  001C8A  0101               	movlb	1	; () banked
  7164  001C8C  516B               	movf	?___awdiv& (0+255),w,b
  7165  001C8E  0F30               	addlw	48
  7166  001C90  0101               	movlb	1	; () banked
  7167  001C92  6F52               	movwf	(_setup_time+3)& (0+255),b
  7168                           
  7169                           ;Setup_Time.c: 218: setup_time[4] = (setup_minute%10) + '0';
  7170  001C94  C0FC  F167         	movff	_setup_minute,___awmod@dividend
  7171  001C98  0101               	movlb	1	; () banked
  7172  001C9A  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  7173  001C9C  0E00               	movlw	0
  7174  001C9E  0101               	movlb	1	; () banked
  7175  001CA0  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  7176  001CA2  0E0A               	movlw	10
  7177  001CA4  6F69               	movwf	___awmod@divisor& (0+255),b
  7178  001CA6  EC73  F01C         	call	___awmod	;wreg free
  7179  001CAA  0101               	movlb	1	; () banked
  7180  001CAC  5167               	movf	?___awmod& (0+255),w,b
  7181  001CAE  0F30               	addlw	48
  7182  001CB0  0101               	movlb	1	; () banked
  7183  001CB2  6F53               	movwf	(_setup_time+4)& (0+255),b
  7184                           
  7185                           ;Setup_Time.c: 220: setup_time[6] = (setup_second/10) + '0';
  7186  001CB4  C0FE  F16B         	movff	_setup_second,___awdiv@dividend
  7187  001CB8  0101               	movlb	1	; () banked
  7188  001CBA  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  7189  001CBC  0E00               	movlw	0
  7190  001CBE  0101               	movlb	1	; () banked
  7191  001CC0  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  7192  001CC2  0E0A               	movlw	10
  7193  001CC4  6F6D               	movwf	___awdiv@divisor& (0+255),b
  7194  001CC6  ECBE  F019         	call	___awdiv	;wreg free
  7195  001CCA  0101               	movlb	1	; () banked
  7196  001CCC  516B               	movf	?___awdiv& (0+255),w,b
  7197  001CCE  0F30               	addlw	48
  7198  001CD0  0101               	movlb	1	; () banked
  7199  001CD2  6F55               	movwf	(_setup_time+6)& (0+255),b
  7200                           
  7201                           ;Setup_Time.c: 221: setup_time[7] = (setup_second%10) + '0';
  7202  001CD4  C0FE  F167         	movff	_setup_second,___awmod@dividend
  7203  001CD8  0101               	movlb	1	; () banked
  7204  001CDA  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  7205  001CDC  0E00               	movlw	0
  7206  001CDE  0101               	movlb	1	; () banked
  7207  001CE0  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  7208  001CE2  0E0A               	movlw	10
  7209  001CE4  6F69               	movwf	___awmod@divisor& (0+255),b
  7210  001CE6  EC73  F01C         	call	___awmod	;wreg free
  7211  001CEA  0101               	movlb	1	; () banked
  7212  001CEC  5167               	movf	?___awmod& (0+255),w,b
  7213  001CEE  0F30               	addlw	48
  7214  001CF0  0101               	movlb	1	; () banked
  7215  001CF2  6F56               	movwf	(_setup_time+7)& (0+255),b
  7216                           
  7217                           ;Setup_Time.c: 223: setup_date[0] = (setup_month/10) + '0';
  7218  001CF4  C0FD  F16B         	movff	_setup_month,___awdiv@dividend
  7219  001CF8  0101               	movlb	1	; () banked
  7220  001CFA  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  7221  001CFC  0E00               	movlw	0
  7222  001CFE  0101               	movlb	1	; () banked
  7223  001D00  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  7224  001D02  0E0A               	movlw	10
  7225  001D04  6F6D               	movwf	___awdiv@divisor& (0+255),b
  7226  001D06  ECBE  F019         	call	___awdiv	;wreg free
  7227  001D0A  0101               	movlb	1	; () banked
  7228  001D0C  516B               	movf	?___awdiv& (0+255),w,b
  7229  001D0E  0F30               	addlw	48
  7230  001D10  0101               	movlb	1	; () banked
  7231  001D12  6F46               	movwf	_setup_date& (0+255),b
  7232                           
  7233                           ;Setup_Time.c: 224: setup_date[1] = (setup_month%10) + '0';
  7234  001D14  C0FD  F167         	movff	_setup_month,___awmod@dividend
  7235  001D18  0101               	movlb	1	; () banked
  7236  001D1A  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  7237  001D1C  0E00               	movlw	0
  7238  001D1E  0101               	movlb	1	; () banked
  7239  001D20  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  7240  001D22  0E0A               	movlw	10
  7241  001D24  6F69               	movwf	___awmod@divisor& (0+255),b
  7242  001D26  EC73  F01C         	call	___awmod	;wreg free
  7243  001D2A  0101               	movlb	1	; () banked
  7244  001D2C  5167               	movf	?___awmod& (0+255),w,b
  7245  001D2E  0F30               	addlw	48
  7246  001D30  0101               	movlb	1	; () banked
  7247  001D32  6F47               	movwf	(_setup_date+1)& (0+255),b
  7248                           
  7249                           ;Setup_Time.c: 226: setup_date[3] = (setup_day/10) + '0';
  7250  001D34  C0F9  F16B         	movff	_setup_day,___awdiv@dividend
  7251  001D38  0101               	movlb	1	; () banked
  7252  001D3A  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  7253  001D3C  0E00               	movlw	0
  7254  001D3E  0101               	movlb	1	; () banked
  7255  001D40  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  7256  001D42  0E0A               	movlw	10
  7257  001D44  6F6D               	movwf	___awdiv@divisor& (0+255),b
  7258  001D46  ECBE  F019         	call	___awdiv	;wreg free
  7259  001D4A  0101               	movlb	1	; () banked
  7260  001D4C  516B               	movf	?___awdiv& (0+255),w,b
  7261  001D4E  0F30               	addlw	48
  7262  001D50  0101               	movlb	1	; () banked
  7263  001D52  6F49               	movwf	(_setup_date+3)& (0+255),b
  7264                           
  7265                           ;Setup_Time.c: 227: setup_date[4] = (setup_day%10) + '0';
  7266  001D54  C0F9  F167         	movff	_setup_day,___awmod@dividend
  7267  001D58  0101               	movlb	1	; () banked
  7268  001D5A  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  7269  001D5C  0E00               	movlw	0
  7270  001D5E  0101               	movlb	1	; () banked
  7271  001D60  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  7272  001D62  0E0A               	movlw	10
  7273  001D64  6F69               	movwf	___awmod@divisor& (0+255),b
  7274  001D66  EC73  F01C         	call	___awmod	;wreg free
  7275  001D6A  0101               	movlb	1	; () banked
  7276  001D6C  5167               	movf	?___awmod& (0+255),w,b
  7277  001D6E  0F30               	addlw	48
  7278  001D70  0101               	movlb	1	; () banked
  7279  001D72  6F4A               	movwf	(_setup_date+4)& (0+255),b
  7280                           
  7281                           ;Setup_Time.c: 229: setup_date[6] = (setup_year/10) + '0';
  7282  001D74  C0FF  F16B         	movff	_setup_year,___awdiv@dividend
  7283  001D78  0101               	movlb	1	; () banked
  7284  001D7A  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  7285  001D7C  0E00               	movlw	0
  7286  001D7E  0101               	movlb	1	; () banked
  7287  001D80  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  7288  001D82  0E0A               	movlw	10
  7289  001D84  6F6D               	movwf	___awdiv@divisor& (0+255),b
  7290  001D86  ECBE  F019         	call	___awdiv	;wreg free
  7291  001D8A  0101               	movlb	1	; () banked
  7292  001D8C  516B               	movf	?___awdiv& (0+255),w,b
  7293  001D8E  0F30               	addlw	48
  7294  001D90  0101               	movlb	1	; () banked
  7295  001D92  6F4C               	movwf	(_setup_date+6)& (0+255),b
  7296                           
  7297                           ;Setup_Time.c: 230: setup_date[7] = (setup_year%10) + '0';
  7298  001D94  C0FF  F167         	movff	_setup_year,___awmod@dividend
  7299  001D98  0101               	movlb	1	; () banked
  7300  001D9A  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  7301  001D9C  0E00               	movlw	0
  7302  001D9E  0101               	movlb	1	; () banked
  7303  001DA0  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  7304  001DA2  0E0A               	movlw	10
  7305  001DA4  6F69               	movwf	___awmod@divisor& (0+255),b
  7306  001DA6  EC73  F01C         	call	___awmod	;wreg free
  7307  001DAA  0101               	movlb	1	; () banked
  7308  001DAC  5167               	movf	?___awmod& (0+255),w,b
  7309  001DAE  0F30               	addlw	48
  7310  001DB0  0101               	movlb	1	; () banked
  7311  001DB2  6F4D               	movwf	(_setup_date+7)& (0+255),b
  7312                           
  7313                           ; BSR set to: 1
  7314                           ;Setup_Time.c: 232: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  7315  001DB4  0E34               	movlw	52
  7316  001DB6  0101               	movlb	1	; () banked
  7317  001DB8  6F63               	movwf	drawtext@y& (0+255),b
  7318  001DBA  0E4F               	movlw	low _setup_time
  7319  001DBC  0101               	movlb	1	; () banked
  7320  001DBE  6F64               	movwf	drawtext@_text& (0+255),b
  7321  001DC0  0E01               	movlw	high _setup_time
  7322  001DC2  0101               	movlb	1	; () banked
  7323  001DC4  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  7324  001DC6  0E07               	movlw	7
  7325  001DC8  0101               	movlb	1	; () banked
  7326  001DCA  6F67               	movwf	(drawtext@color+1)& (0+255),b
  7327  001DCC  6966               	setf	drawtext@color& (0+255),b
  7328  001DCE  0E00               	movlw	0
  7329  001DD0  0101               	movlb	1	; () banked
  7330  001DD2  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  7331  001DD4  0E00               	movlw	0
  7332  001DD6  6F68               	movwf	drawtext@bg& (0+255),b
  7333  001DD8  0E02               	movlw	2
  7334  001DDA  0101               	movlb	1	; () banked
  7335  001DDC  6F6A               	movwf	drawtext@size& (0+255),b
  7336  001DDE  0E0F               	movlw	15
  7337  001DE0  EC18  F015         	call	_drawtext
  7338                           
  7339                           ;Setup_Time.c: 233: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  7340  001DE4  0E52               	movlw	82
  7341  001DE6  0101               	movlb	1	; () banked
  7342  001DE8  6F63               	movwf	drawtext@y& (0+255),b
  7343  001DEA  0E46               	movlw	low _setup_date
  7344  001DEC  0101               	movlb	1	; () banked
  7345  001DEE  6F64               	movwf	drawtext@_text& (0+255),b
  7346  001DF0  0E01               	movlw	high _setup_date
  7347  001DF2  0101               	movlb	1	; () banked
  7348  001DF4  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  7349  001DF6  0E07               	movlw	7
  7350  001DF8  0101               	movlb	1	; () banked
  7351  001DFA  6F67               	movwf	(drawtext@color+1)& (0+255),b
  7352  001DFC  0EE0               	movlw	224
  7353  001DFE  6F66               	movwf	drawtext@color& (0+255),b
  7354  001E00  0E00               	movlw	0
  7355  001E02  0101               	movlb	1	; () banked
  7356  001E04  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  7357  001E06  0E00               	movlw	0
  7358  001E08  6F68               	movwf	drawtext@bg& (0+255),b
  7359  001E0A  0E02               	movlw	2
  7360  001E0C  0101               	movlb	1	; () banked
  7361  001E0E  6F6A               	movwf	drawtext@size& (0+255),b
  7362  001E10  0E0F               	movlw	15
  7363  001E12  EC18  F015         	call	_drawtext
  7364  001E16  0012               	return		;funcret
  7365  001E18                     __end_of_Update_Setup_Time_Screen:
  7366                           	opt stack 0
  7367                           tblptru	equ	0xFF8
  7368                           tblptrh	equ	0xFF7
  7369                           tblptrl	equ	0xFF6
  7370                           tablat	equ	0xFF5
  7371                           postinc0	equ	0xFEE
  7372                           wreg	equ	0xFE8
  7373                           postdec1	equ	0xFE5
  7374                           fsr1l	equ	0xFE1
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function _Do_Setup_Heater_Temp *****************
  7378 ;; Defined at:
  7379 ;;		line 24 in file "Setup_Heater_Temp.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;		None
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;		None
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  2  376[None  ] int 
  7386 ;; Registers used:
  7387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;Total ram usage:        2 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:   13
  7400 ;; This function calls:
  7401 ;;		_Decrease_Heater_Temp
  7402 ;;		_Do_Beep_Bad
  7403 ;;		_Do_Beep_Good
  7404 ;;		_Do_Save_New_Heater_Temp
  7405 ;;		_Exit_Setup_Heater_Temp
  7406 ;;		_Increase_Heater_Temp
  7407 ;;		_Initialize_Setup_Heater_Screen
  7408 ;;		_Update_Setup_Heater_Screen
  7409 ;;		_check_for_button_input
  7410 ;; This function is called by:
  7411 ;;		_main
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           	psect	text25
  7416  003AE8                     __ptext25:
  7417                           	opt stack 0
  7418  003AE8                     _Do_Setup_Heater_Temp:
  7419                           	opt stack 17
  7420                           
  7421                           ;Setup_Heater_Temp.c: 27: In_Heater_Temp_Setup = 1;
  7422                           
  7423                           ;incstack = 0
  7424  003AE8  0E01               	movlw	1
  7425  003AEA  6E48               	movwf	_In_Heater_Temp_Setup,c
  7426                           
  7427                           ;Setup_Heater_Temp.c: 28: setup_heater_set_temp = heater_set_temp;
  7428  003AEC  C057  F0FA         	movff	_heater_set_temp,_setup_heater_set_temp
  7429                           
  7430                           ;Setup_Heater_Temp.c: 29: Initialize_Setup_Heater_Screen();
  7431  003AF0  ECAD  F015         	call	_Initialize_Setup_Heater_Screen	;wreg free
  7432                           
  7433                           ;Setup_Heater_Temp.c: 30: Update_Setup_Heater_Screen();
  7434  003AF4  EC56  F01B         	call	_Update_Setup_Heater_Screen	;wreg free
  7435                           
  7436                           ;Setup_Heater_Temp.c: 32: while (In_Heater_Temp_Setup == 1)
  7437  003AF8  D041               	goto	l10383
  7438  003AFA                     l10353:
  7439                           
  7440                           ;Setup_Heater_Temp.c: 33: {
  7441                           ;Setup_Heater_Temp.c: 34: if (check_for_button_input() == 1)
  7442  003AFA  0E01               	movlw	1
  7443  003AFC  0101               	movlb	1	; () banked
  7444  003AFE  6F77               	movwf	??_Do_Setup_Heater_Temp& (0+255),b
  7445  003B00  0E00               	movlw	0
  7446  003B02  0101               	movlb	1	; () banked
  7447  003B04  6F78               	movwf	(??_Do_Setup_Heater_Temp+1)& (0+255),b
  7448  003B06  ECCD  F01C         	call	_check_for_button_input	;wreg free
  7449  003B0A  0101               	movlb	1	; () banked
  7450  003B0C  1977               	xorwf	??_Do_Setup_Heater_Temp& (0+255),w,b
  7451  003B0E  1178               	iorwf	(??_Do_Setup_Heater_Temp+1)& (0+255),w,b
  7452  003B10  A4D8               	btfss	status,2,c
  7453  003B12  D034               	goto	l10383
  7454                           
  7455                           ; BSR set to: 1
  7456                           ;Setup_Heater_Temp.c: 35: {
  7457                           ;Setup_Heater_Temp.c: 36: nec_ok = 0;
  7458  003B14  0E00               	movlw	0
  7459  003B16  6E3F               	movwf	_nec_ok+1,c
  7460  003B18  0E00               	movlw	0
  7461  003B1A  6E3E               	movwf	_nec_ok,c
  7462                           
  7463                           ; BSR set to: 1
  7464                           ;Setup_Heater_Temp.c: 37: if (found >= 5 && found <= 8)
  7465  003B1C  0E04               	movlw	4
  7466  003B1E  0100               	movlb	0	; () banked
  7467  003B20  65F4               	cpfsgt	_found& (0+255),b
  7468  003B22  D029               	goto	l10381
  7469                           
  7470                           ; BSR set to: 0
  7471  003B24  0E09               	movlw	9
  7472  003B26  0100               	movlb	0	; () banked
  7473  003B28  61F4               	cpfslt	_found& (0+255),b
  7474  003B2A  D025               	goto	l10381
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;Setup_Heater_Temp.c: 38: {
  7478                           ;Setup_Heater_Temp.c: 39: Do_Beep_Good();
  7479  003B2C  EC0A  F026         	call	_Do_Beep_Good	;wreg free
  7480                           
  7481                           ;Setup_Heater_Temp.c: 41: if (found == 5) Do_Save_New_Heater_Temp();
  7482  003B30  0E05               	movlw	5
  7483  003B32  0100               	movlb	0	; () banked
  7484  003B34  19F4               	xorwf	_found& (0+255),w,b
  7485  003B36  A4D8               	btfss	status,2,c
  7486  003B38  D003               	goto	l10367
  7487                           
  7488                           ; BSR set to: 0
  7489  003B3A  EC87  F026         	call	_Do_Save_New_Heater_Temp	;wreg free
  7490  003B3E  D000               	goto	l10367
  7491  003B40                     l10367:
  7492                           
  7493                           ;Setup_Heater_Temp.c: 42: if (found == 6) Decrease_Heater_Temp();
  7494  003B40  0E06               	movlw	6
  7495  003B42  0100               	movlb	0	; () banked
  7496  003B44  19F4               	xorwf	_found& (0+255),w,b
  7497  003B46  A4D8               	btfss	status,2,c
  7498  003B48  D003               	goto	l10371
  7499                           
  7500                           ; BSR set to: 0
  7501  003B4A  ECE5  F025         	call	_Decrease_Heater_Temp	;wreg free
  7502  003B4E  D000               	goto	l10371
  7503  003B50                     l10371:
  7504                           
  7505                           ;Setup_Heater_Temp.c: 43: if (found == 7) Increase_Heater_Temp();
  7506  003B50  0E07               	movlw	7
  7507  003B52  0100               	movlb	0	; () banked
  7508  003B54  19F4               	xorwf	_found& (0+255),w,b
  7509  003B56  A4D8               	btfss	status,2,c
  7510  003B58  D003               	goto	l10375
  7511                           
  7512                           ; BSR set to: 0
  7513  003B5A  ECD8  F025         	call	_Increase_Heater_Temp	;wreg free
  7514  003B5E  D000               	goto	l10375
  7515  003B60                     l10375:
  7516                           
  7517                           ;Setup_Heater_Temp.c: 44: if (found == 8) Exit_Setup_Heater_Temp();
  7518  003B60  0E08               	movlw	8
  7519  003B62  0100               	movlb	0	; () banked
  7520  003B64  19F4               	xorwf	_found& (0+255),w,b
  7521  003B66  A4D8               	btfss	status,2,c
  7522  003B68  D003               	goto	l10379
  7523                           
  7524                           ; BSR set to: 0
  7525  003B6A  ECCC  F026         	call	_Exit_Setup_Heater_Temp	;wreg free
  7526  003B6E  D000               	goto	l10379
  7527  003B70                     l10379:
  7528                           
  7529                           ;Setup_Heater_Temp.c: 46: found = 0xff;
  7530  003B70  0100               	movlb	0	; () banked
  7531  003B72  69F4               	setf	_found& (0+255),b
  7532                           
  7533                           ;Setup_Heater_Temp.c: 47: }
  7534  003B74  D003               	goto	l10383
  7535  003B76                     l10381:
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;Setup_Heater_Temp.c: 48: else
  7539                           ;Setup_Heater_Temp.c: 49: {
  7540                           ;Setup_Heater_Temp.c: 50: Do_Beep_Bad();
  7541  003B76  EC16  F026         	call	_Do_Beep_Bad	;wreg free
  7542  003B7A  D000               	goto	l10383
  7543  003B7C                     l10383:
  7544  003B7C  0448               	decf	_In_Heater_Temp_Setup,w,c
  7545  003B7E  B4D8               	btfsc	status,2,c
  7546  003B80  D7BC               	goto	l10353
  7547  003B82  0012               	return		;funcret
  7548  003B84                     __end_of_Do_Setup_Heater_Temp:
  7549                           	opt stack 0
  7550                           tblptru	equ	0xFF8
  7551                           tblptrh	equ	0xFF7
  7552                           tblptrl	equ	0xFF6
  7553                           tablat	equ	0xFF5
  7554                           postinc0	equ	0xFEE
  7555                           wreg	equ	0xFE8
  7556                           postdec1	equ	0xFE5
  7557                           fsr1l	equ	0xFE1
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  7561 ;; Defined at:
  7562 ;;		line 94 in file "Setup_Heater_Temp.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;		None
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;		None
  7567 ;; Return value:  Size  Location     Type
  7568 ;;		None               void
  7569 ;; Registers used:
  7570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;Total ram usage:        0 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:   11
  7583 ;; This function calls:
  7584 ;;		_drawtext
  7585 ;;		_fillScreen
  7586 ;;		_strcpy
  7587 ;; This function is called by:
  7588 ;;		_Do_Setup_Heater_Temp
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text26
  7593  002B5A                     __ptext26:
  7594                           	opt stack 0
  7595  002B5A                     _Initialize_Setup_Heater_Screen:
  7596                           	opt stack 18
  7597                           
  7598                           ;Setup_Heater_Temp.c: 96: fillScreen(0x0000);
  7599                           
  7600                           ;incstack = 0
  7601  002B5A  0E00               	movlw	0
  7602  002B5C  0100               	movlb	0	; () banked
  7603  002B5E  6FE1               	movwf	(fillScreen@color+1)& (0+255),b
  7604  002B60  0E00               	movlw	0
  7605  002B62  6FE0               	movwf	fillScreen@color& (0+255),b
  7606  002B64  EC67  F025         	call	_fillScreen	;wreg free
  7607                           
  7608                           ;Setup_Heater_Temp.c: 98: strcpy(txt, "ECE3301L F'21 Final\0");
  7609  002B68  C042  F0CD         	movff	_txt,strcpy@to
  7610  002B6C  C043  F0CE         	movff	_txt+1,strcpy@to+1
  7611  002B70  0ED6               	movlw	low (STR_6+1)
  7612  002B72  0100               	movlb	0	; () banked
  7613  002B74  6FCF               	movwf	strcpy@from& (0+255),b
  7614  002B76  0EFE               	movlw	high (STR_6+1)
  7615  002B78  0100               	movlb	0	; () banked
  7616  002B7A  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  7617  002B7C  EC61  F024         	call	_strcpy	;wreg free
  7618                           
  7619                           ;Setup_Heater_Temp.c: 99: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7620  002B80  0E01               	movlw	1
  7621  002B82  0101               	movlb	1	; () banked
  7622  002B84  6F63               	movwf	drawtext@y& (0+255),b
  7623  002B86  C042  F164         	movff	_txt,drawtext@_text
  7624  002B8A  C043  F165         	movff	_txt+1,drawtext@_text+1
  7625  002B8E  0EFF               	movlw	255
  7626  002B90  0101               	movlb	1	; () banked
  7627  002B92  6F67               	movwf	(drawtext@color+1)& (0+255),b
  7628  002B94  6966               	setf	drawtext@color& (0+255),b
  7629  002B96  0E00               	movlw	0
  7630  002B98  0101               	movlb	1	; () banked
  7631  002B9A  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  7632  002B9C  0E00               	movlw	0
  7633  002B9E  6F68               	movwf	drawtext@bg& (0+255),b
  7634  002BA0  0E01               	movlw	1
  7635  002BA2  0101               	movlb	1	; () banked
  7636  002BA4  6F6A               	movwf	drawtext@size& (0+255),b
  7637  002BA6  0E01               	movlw	1
  7638  002BA8  EC18  F015         	call	_drawtext
  7639                           
  7640                           ;Setup_Heater_Temp.c: 101: strcpy(txt, "  Heater\0 ");
  7641  002BAC  C042  F0CD         	movff	_txt,strcpy@to
  7642  002BB0  C043  F0CE         	movff	_txt+1,strcpy@to+1
  7643  002BB4  0E94               	movlw	low STR_30
  7644  002BB6  0100               	movlb	0	; () banked
  7645  002BB8  6FCF               	movwf	strcpy@from& (0+255),b
  7646  002BBA  0EFF               	movlw	high STR_30
  7647  002BBC  0100               	movlb	0	; () banked
  7648  002BBE  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  7649  002BC0  EC61  F024         	call	_strcpy	;wreg free
  7650                           
  7651                           ;Setup_Heater_Temp.c: 102: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  7652  002BC4  0E1A               	movlw	26
  7653  002BC6  0101               	movlb	1	; () banked
  7654  002BC8  6F63               	movwf	drawtext@y& (0+255),b
  7655  002BCA  C042  F164         	movff	_txt,drawtext@_text
  7656  002BCE  C043  F165         	movff	_txt+1,drawtext@_text+1
  7657  002BD2  0EFF               	movlw	255
  7658  002BD4  0101               	movlb	1	; () banked
  7659  002BD6  6F67               	movwf	(drawtext@color+1)& (0+255),b
  7660  002BD8  0EE0               	movlw	224
  7661  002BDA  6F66               	movwf	drawtext@color& (0+255),b
  7662  002BDC  0E00               	movlw	0
  7663  002BDE  0101               	movlb	1	; () banked
  7664  002BE0  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  7665  002BE2  0E00               	movlw	0
  7666  002BE4  6F68               	movwf	drawtext@bg& (0+255),b
  7667  002BE6  0E02               	movlw	2
  7668  002BE8  0101               	movlb	1	; () banked
  7669  002BEA  6F6A               	movwf	drawtext@size& (0+255),b
  7670  002BEC  0E01               	movlw	1
  7671  002BEE  EC18  F015         	call	_drawtext
  7672                           
  7673                           ;Setup_Heater_Temp.c: 103: strcpy(txt, "  Setup\0 ");
  7674  002BF2  C042  F0CD         	movff	_txt,strcpy@to
  7675  002BF6  C043  F0CE         	movff	_txt+1,strcpy@to+1
  7676  002BFA  0EB5               	movlw	low STR_31
  7677  002BFC  0100               	movlb	0	; () banked
  7678  002BFE  6FCF               	movwf	strcpy@from& (0+255),b
  7679  002C00  0EFF               	movlw	high STR_31
  7680  002C02  0100               	movlb	0	; () banked
  7681  002C04  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  7682  002C06  EC61  F024         	call	_strcpy	;wreg free
  7683                           
  7684                           ;Setup_Heater_Temp.c: 104: drawtext(1 , 1+40, txt, 0xFFE0, 0x0000, 2);
  7685  002C0A  0E29               	movlw	41
  7686  002C0C  0101               	movlb	1	; () banked
  7687  002C0E  6F63               	movwf	drawtext@y& (0+255),b
  7688  002C10  C042  F164         	movff	_txt,drawtext@_text
  7689  002C14  C043  F165         	movff	_txt+1,drawtext@_text+1
  7690  002C18  0EFF               	movlw	255
  7691  002C1A  0101               	movlb	1	; () banked
  7692  002C1C  6F67               	movwf	(drawtext@color+1)& (0+255),b
  7693  002C1E  0EE0               	movlw	224
  7694  002C20  6F66               	movwf	drawtext@color& (0+255),b
  7695  002C22  0E00               	movlw	0
  7696  002C24  0101               	movlb	1	; () banked
  7697  002C26  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  7698  002C28  0E00               	movlw	0
  7699  002C2A  6F68               	movwf	drawtext@bg& (0+255),b
  7700  002C2C  0E02               	movlw	2
  7701  002C2E  0101               	movlb	1	; () banked
  7702  002C30  6F6A               	movwf	drawtext@size& (0+255),b
  7703  002C32  0E01               	movlw	1
  7704  002C34  EC18  F015         	call	_drawtext
  7705                           
  7706                           ;Setup_Heater_Temp.c: 105: strcpy(txt, "Set Heater Temp");
  7707  002C38  C042  F0CD         	movff	_txt,strcpy@to
  7708  002C3C  C043  F0CE         	movff	_txt+1,strcpy@to+1
  7709  002C40  0E5E               	movlw	low STR_32
  7710  002C42  0100               	movlb	0	; () banked
  7711  002C44  6FCF               	movwf	strcpy@from& (0+255),b
  7712  002C46  0EFF               	movlw	high STR_32
  7713  002C48  0100               	movlb	0	; () banked
  7714  002C4A  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  7715  002C4C  EC61  F024         	call	_strcpy	;wreg free
  7716                           
  7717                           ;Setup_Heater_Temp.c: 106: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  7718  002C50  0E3C               	movlw	60
  7719  002C52  0101               	movlb	1	; () banked
  7720  002C54  6F63               	movwf	drawtext@y& (0+255),b
  7721  002C56  C042  F164         	movff	_txt,drawtext@_text
  7722  002C5A  C043  F165         	movff	_txt+1,drawtext@_text+1
  7723  002C5E  0E07               	movlw	7
  7724  002C60  0101               	movlb	1	; () banked
  7725  002C62  6F67               	movwf	(drawtext@color+1)& (0+255),b
  7726  002C64  6966               	setf	drawtext@color& (0+255),b
  7727  002C66  0E00               	movlw	0
  7728  002C68  0101               	movlb	1	; () banked
  7729  002C6A  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  7730  002C6C  0E00               	movlw	0
  7731  002C6E  6F68               	movwf	drawtext@bg& (0+255),b
  7732  002C70  0E01               	movlw	1
  7733  002C72  0101               	movlb	1	; () banked
  7734  002C74  6F6A               	movwf	drawtext@size& (0+255),b
  7735  002C76  0E0F               	movlw	15
  7736  002C78  EC18  F015         	call	_drawtext
  7737  002C7C  0012               	return		;funcret
  7738  002C7E                     __end_of_Initialize_Setup_Heater_Screen:
  7739                           	opt stack 0
  7740                           tblptru	equ	0xFF8
  7741                           tblptrh	equ	0xFF7
  7742                           tblptrl	equ	0xFF6
  7743                           tablat	equ	0xFF5
  7744                           postinc0	equ	0xFEE
  7745                           wreg	equ	0xFE8
  7746                           postdec1	equ	0xFE5
  7747                           fsr1l	equ	0xFE1
  7748                           status	equ	0xFD8
  7749                           
  7750 ;; *************** function _Increase_Heater_Temp *****************
  7751 ;; Defined at:
  7752 ;;		line 56 in file "Setup_Heater_Temp.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;		None
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;		None
  7757 ;; Return value:  Size  Location     Type
  7758 ;;		None               void
  7759 ;; Registers used:
  7760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;Total ram usage:        0 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:   12
  7773 ;; This function calls:
  7774 ;;		_Update_Setup_Heater_Screen
  7775 ;; This function is called by:
  7776 ;;		_Do_Setup_Heater_Temp
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           	psect	text27
  7781  004BB0                     __ptext27:
  7782                           	opt stack 0
  7783  004BB0                     _Increase_Heater_Temp:
  7784                           	opt stack 17
  7785                           
  7786                           ;Setup_Heater_Temp.c: 60: setup_heater_set_temp++;
  7787                           
  7788                           ;incstack = 0
  7789  004BB0  0100               	movlb	0	; () banked
  7790  004BB2  2BFA               	incf	_setup_heater_set_temp& (0+255),f,b
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;Setup_Heater_Temp.c: 61: if (setup_heater_set_temp > 110) setup_heater_set_temp = 110;
  7794  004BB4  0E6E               	movlw	110
  7795  004BB6  0100               	movlb	0	; () banked
  7796  004BB8  65FA               	cpfsgt	_setup_heater_set_temp& (0+255),b
  7797  004BBA  D004               	goto	l9761
  7798                           
  7799                           ; BSR set to: 0
  7800  004BBC  0E6E               	movlw	110
  7801  004BBE  0100               	movlb	0	; () banked
  7802  004BC0  6FFA               	movwf	_setup_heater_set_temp& (0+255),b
  7803  004BC2  D000               	goto	l9761
  7804  004BC4                     l9761:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;Setup_Heater_Temp.c: 62: Update_Setup_Heater_Screen();
  7808  004BC4  EC56  F01B         	call	_Update_Setup_Heater_Screen	;wreg free
  7809  004BC8  0012               	return		;funcret
  7810  004BCA                     __end_of_Increase_Heater_Temp:
  7811                           	opt stack 0
  7812                           tblptru	equ	0xFF8
  7813                           tblptrh	equ	0xFF7
  7814                           tblptrl	equ	0xFF6
  7815                           tablat	equ	0xFF5
  7816                           postinc0	equ	0xFEE
  7817                           wreg	equ	0xFE8
  7818                           postdec1	equ	0xFE5
  7819                           fsr1l	equ	0xFE1
  7820                           status	equ	0xFD8
  7821                           
  7822 ;; *************** function _Exit_Setup_Heater_Temp *****************
  7823 ;; Defined at:
  7824 ;;		line 79 in file "Setup_Heater_Temp.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;		None
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;		None
  7829 ;; Return value:  Size  Location     Type
  7830 ;;		None               void
  7831 ;; Registers used:
  7832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;Total ram usage:        0 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:   12
  7845 ;; This function calls:
  7846 ;;		_DS3231_Read_Time
  7847 ;;		_Initialize_Screen
  7848 ;; This function is called by:
  7849 ;;		_Do_Setup_Heater_Temp
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text28
  7854  004D98                     __ptext28:
  7855                           	opt stack 0
  7856  004D98                     _Exit_Setup_Heater_Temp:
  7857                           	opt stack 17
  7858                           
  7859                           ;Setup_Heater_Temp.c: 81: DS3231_Read_Time();
  7860                           
  7861                           ;incstack = 0
  7862  004D98  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
  7863                           
  7864                           ;Setup_Heater_Temp.c: 82: Initialize_Screen();
  7865  004D9C  ECCE  F003         	call	_Initialize_Screen	;wreg free
  7866                           
  7867                           ;Setup_Heater_Temp.c: 83: In_Heater_Temp_Setup = 0;
  7868  004DA0  0E00               	movlw	0
  7869  004DA2  6E48               	movwf	_In_Heater_Temp_Setup,c
  7870  004DA4  0012               	return		;funcret
  7871  004DA6                     __end_of_Exit_Setup_Heater_Temp:
  7872                           	opt stack 0
  7873                           tblptru	equ	0xFF8
  7874                           tblptrh	equ	0xFF7
  7875                           tblptrl	equ	0xFF6
  7876                           tablat	equ	0xFF5
  7877                           postinc0	equ	0xFEE
  7878                           wreg	equ	0xFE8
  7879                           postdec1	equ	0xFE5
  7880                           fsr1l	equ	0xFE1
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _Do_Save_New_Heater_Temp *****************
  7884 ;; Defined at:
  7885 ;;		line 86 in file "Setup_Heater_Temp.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;		None
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;		None
  7890 ;; Return value:  Size  Location     Type
  7891 ;;		None               void
  7892 ;; Registers used:
  7893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;Total ram usage:        0 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:   12
  7906 ;; This function calls:
  7907 ;;		_DS3231_Read_Time
  7908 ;;		_Initialize_Screen
  7909 ;; This function is called by:
  7910 ;;		_Do_Setup_Heater_Temp
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           	psect	text29
  7915  004D0E                     __ptext29:
  7916                           	opt stack 0
  7917  004D0E                     _Do_Save_New_Heater_Temp:
  7918                           	opt stack 17
  7919                           
  7920                           ;Setup_Heater_Temp.c: 88: heater_set_temp = setup_heater_set_temp;
  7921                           
  7922                           ;incstack = 0
  7923  004D0E  C0FA  F057         	movff	_setup_heater_set_temp,_heater_set_temp
  7924                           
  7925                           ;Setup_Heater_Temp.c: 89: DS3231_Read_Time();
  7926  004D12  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
  7927                           
  7928                           ;Setup_Heater_Temp.c: 90: Initialize_Screen();
  7929  004D16  ECCE  F003         	call	_Initialize_Screen	;wreg free
  7930                           
  7931                           ;Setup_Heater_Temp.c: 91: In_Heater_Temp_Setup = 0;
  7932  004D1A  0E00               	movlw	0
  7933  004D1C  6E48               	movwf	_In_Heater_Temp_Setup,c
  7934  004D1E  0012               	return		;funcret
  7935  004D20                     __end_of_Do_Save_New_Heater_Temp:
  7936                           	opt stack 0
  7937                           tblptru	equ	0xFF8
  7938                           tblptrh	equ	0xFF7
  7939                           tblptrl	equ	0xFF6
  7940                           tablat	equ	0xFF5
  7941                           postinc0	equ	0xFEE
  7942                           wreg	equ	0xFE8
  7943                           postdec1	equ	0xFE5
  7944                           fsr1l	equ	0xFE1
  7945                           status	equ	0xFD8
  7946                           
  7947 ;; *************** function _Decrease_Heater_Temp *****************
  7948 ;; Defined at:
  7949 ;;		line 66 in file "Setup_Heater_Temp.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;		None
  7952 ;; Auto vars:     Size  Location     Type
  7953 ;;		None
  7954 ;; Return value:  Size  Location     Type
  7955 ;;		None               void
  7956 ;; Registers used:
  7957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7958 ;; Tracked objects:
  7959 ;;		On entry : 0/0
  7960 ;;		On exit  : 0/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;Total ram usage:        0 bytes
  7968 ;; Hardware stack levels used:    1
  7969 ;; Hardware stack levels required when called:   12
  7970 ;; This function calls:
  7971 ;;		_Update_Setup_Heater_Screen
  7972 ;; This function is called by:
  7973 ;;		_Do_Setup_Heater_Temp
  7974 ;; This function uses a non-reentrant model
  7975 ;;
  7976                           
  7977                           	psect	text30
  7978  004BCA                     __ptext30:
  7979                           	opt stack 0
  7980  004BCA                     _Decrease_Heater_Temp:
  7981                           	opt stack 17
  7982                           
  7983                           ;Setup_Heater_Temp.c: 71: --setup_heater_set_temp;
  7984                           
  7985                           ;incstack = 0
  7986  004BCA  0100               	movlb	0	; () banked
  7987  004BCC  07FA               	decf	_setup_heater_set_temp& (0+255),f,b
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;Setup_Heater_Temp.c: 72: if (setup_heater_set_temp < 50) setup_heater_set_temp = 50;
  7991  004BCE  0E32               	movlw	50
  7992  004BD0  0100               	movlb	0	; () banked
  7993  004BD2  61FA               	cpfslt	_setup_heater_set_temp& (0+255),b
  7994  004BD4  D004               	goto	l9753
  7995                           
  7996                           ; BSR set to: 0
  7997  004BD6  0E32               	movlw	50
  7998  004BD8  0100               	movlb	0	; () banked
  7999  004BDA  6FFA               	movwf	_setup_heater_set_temp& (0+255),b
  8000  004BDC  D000               	goto	l9753
  8001  004BDE                     l9753:
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;Setup_Heater_Temp.c: 74: Update_Setup_Heater_Screen();
  8005  004BDE  EC56  F01B         	call	_Update_Setup_Heater_Screen	;wreg free
  8006  004BE2  0012               	return		;funcret
  8007  004BE4                     __end_of_Decrease_Heater_Temp:
  8008                           	opt stack 0
  8009                           tblptru	equ	0xFF8
  8010                           tblptrh	equ	0xFF7
  8011                           tblptrl	equ	0xFF6
  8012                           tablat	equ	0xFF5
  8013                           postinc0	equ	0xFEE
  8014                           wreg	equ	0xFE8
  8015                           postdec1	equ	0xFE5
  8016                           fsr1l	equ	0xFE1
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function _Update_Setup_Heater_Screen *****************
  8020 ;; Defined at:
  8021 ;;		line 109 in file "Setup_Heater_Temp.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;		None
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  dc_char3        1   30[BANK1 ] unsigned char 
  8026 ;;  dc_char2        1   29[BANK1 ] unsigned char 
  8027 ;;  dc_char1        1   28[BANK1 ] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;		None               void
  8030 ;; Registers used:
  8031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;Total ram usage:        3 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:   11
  8044 ;; This function calls:
  8045 ;;		___awdiv
  8046 ;;		___awmod
  8047 ;;		_drawtext
  8048 ;; This function is called by:
  8049 ;;		_Do_Setup_Heater_Temp
  8050 ;;		_Increase_Heater_Temp
  8051 ;;		_Decrease_Heater_Temp
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text31
  8056  0036AC                     __ptext31:
  8057                           	opt stack 0
  8058  0036AC                     _Update_Setup_Heater_Screen:
  8059                           	opt stack 18
  8060                           
  8061                           ;Setup_Heater_Temp.c: 111: char dc_char1 = setup_heater_set_temp/100;
  8062                           
  8063                           ;incstack = 0
  8064  0036AC  C0FA  F16B         	movff	_setup_heater_set_temp,___awdiv@dividend
  8065  0036B0  0101               	movlb	1	; () banked
  8066  0036B2  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
  8067  0036B4  0E00               	movlw	0
  8068  0036B6  0101               	movlb	1	; () banked
  8069  0036B8  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  8070  0036BA  0E64               	movlw	100
  8071  0036BC  6F6D               	movwf	___awdiv@divisor& (0+255),b
  8072  0036BE  ECBE  F019         	call	___awdiv	;wreg free
  8073  0036C2  0101               	movlb	1	; () banked
  8074  0036C4  516B               	movf	?___awdiv& (0+255),w,b
  8075  0036C6  0101               	movlb	1	; () banked
  8076  0036C8  6F74               	movwf	Update_Setup_Heater_Screen@dc_char1& (0+255),b
  8077                           
  8078                           ;Setup_Heater_Temp.c: 112: char dc_char2 = (setup_heater_set_temp % 100) / 10;
  8079  0036CA  0E00               	movlw	0
  8080  0036CC  0101               	movlb	1	; () banked
  8081  0036CE  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  8082  0036D0  0E64               	movlw	100
  8083  0036D2  6F69               	movwf	___awmod@divisor& (0+255),b
  8084  0036D4  C0FA  F167         	movff	_setup_heater_set_temp,___awmod@dividend
  8085  0036D8  0101               	movlb	1	; () banked
  8086  0036DA  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  8087  0036DC  EC73  F01C         	call	___awmod	;wreg free
  8088  0036E0  C167  F16B         	movff	?___awmod,___awdiv@dividend
  8089  0036E4  C168  F16C         	movff	?___awmod+1,___awdiv@dividend+1
  8090  0036E8  0E00               	movlw	0
  8091  0036EA  0101               	movlb	1	; () banked
  8092  0036EC  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
  8093  0036EE  0E0A               	movlw	10
  8094  0036F0  6F6D               	movwf	___awdiv@divisor& (0+255),b
  8095  0036F2  ECBE  F019         	call	___awdiv	;wreg free
  8096  0036F6  0101               	movlb	1	; () banked
  8097  0036F8  516B               	movf	?___awdiv& (0+255),w,b
  8098  0036FA  0101               	movlb	1	; () banked
  8099  0036FC  6F75               	movwf	Update_Setup_Heater_Screen@dc_char2& (0+255),b
  8100                           
  8101                           ;Setup_Heater_Temp.c: 113: char dc_char3 = setup_heater_set_temp % 10;
  8102  0036FE  C0FA  F167         	movff	_setup_heater_set_temp,___awmod@dividend
  8103  003702  0101               	movlb	1	; () banked
  8104  003704  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
  8105  003706  0E00               	movlw	0
  8106  003708  0101               	movlb	1	; () banked
  8107  00370A  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
  8108  00370C  0E0A               	movlw	10
  8109  00370E  6F69               	movwf	___awmod@divisor& (0+255),b
  8110  003710  EC73  F01C         	call	___awmod	;wreg free
  8111  003714  0101               	movlb	1	; () banked
  8112  003716  5167               	movf	?___awmod& (0+255),w,b
  8113  003718  0101               	movlb	1	; () banked
  8114  00371A  6F76               	movwf	Update_Setup_Heater_Screen@dc_char3& (0+255),b
  8115                           
  8116                           ; BSR set to: 1
  8117                           ;Setup_Heater_Temp.c: 114: setup_heater_set_text[0] = dc_char1 + '0';
  8118  00371C  0101               	movlb	1	; () banked
  8119  00371E  5174               	movf	Update_Setup_Heater_Screen@dc_char1& (0+255),w,b
  8120  003720  0F30               	addlw	48
  8121  003722  0100               	movlb	0	; () banked
  8122  003724  6FB2               	movwf	_setup_heater_set_text& (0+255),b
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;Setup_Heater_Temp.c: 115: setup_heater_set_text[1] = dc_char2 + '0';
  8126  003726  0101               	movlb	1	; () banked
  8127  003728  5175               	movf	Update_Setup_Heater_Screen@dc_char2& (0+255),w,b
  8128  00372A  0F30               	addlw	48
  8129  00372C  0100               	movlb	0	; () banked
  8130  00372E  6FB3               	movwf	(_setup_heater_set_text+1)& (0+255),b
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;Setup_Heater_Temp.c: 116: setup_heater_set_text[2] = dc_char3 + '0';
  8134  003730  0101               	movlb	1	; () banked
  8135  003732  5176               	movf	Update_Setup_Heater_Screen@dc_char3& (0+255),w,b
  8136  003734  0F30               	addlw	48
  8137  003736  0100               	movlb	0	; () banked
  8138  003738  6FB4               	movwf	(_setup_heater_set_text+2)& (0+255),b
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;Setup_Heater_Temp.c: 117: drawtext(40, 74 ,setup_heater_set_text, 0xF800, 0x0000, 2);
  8142  00373A  0E4A               	movlw	74
  8143  00373C  0101               	movlb	1	; () banked
  8144  00373E  6F63               	movwf	drawtext@y& (0+255),b
  8145  003740  0EB2               	movlw	low _setup_heater_set_text
  8146  003742  0101               	movlb	1	; () banked
  8147  003744  6F64               	movwf	drawtext@_text& (0+255),b
  8148  003746  0E00               	movlw	high _setup_heater_set_text
  8149  003748  0101               	movlb	1	; () banked
  8150  00374A  6F65               	movwf	(drawtext@_text+1)& (0+255),b
  8151  00374C  0EF8               	movlw	248
  8152  00374E  0101               	movlb	1	; () banked
  8153  003750  6F67               	movwf	(drawtext@color+1)& (0+255),b
  8154  003752  0E00               	movlw	0
  8155  003754  6F66               	movwf	drawtext@color& (0+255),b
  8156  003756  0E00               	movlw	0
  8157  003758  0101               	movlb	1	; () banked
  8158  00375A  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  8159  00375C  0E00               	movlw	0
  8160  00375E  6F68               	movwf	drawtext@bg& (0+255),b
  8161  003760  0E02               	movlw	2
  8162  003762  0101               	movlb	1	; () banked
  8163  003764  6F6A               	movwf	drawtext@size& (0+255),b
  8164  003766  0E28               	movlw	40
  8165  003768  EC18  F015         	call	_drawtext
  8166  00376C  0012               	return		;funcret
  8167  00376E                     __end_of_Update_Setup_Heater_Screen:
  8168                           	opt stack 0
  8169                           tblptru	equ	0xFF8
  8170                           tblptrh	equ	0xFF7
  8171                           tblptrl	equ	0xFF6
  8172                           tablat	equ	0xFF5
  8173                           postinc0	equ	0xFEE
  8174                           wreg	equ	0xFE8
  8175                           postdec1	equ	0xFE5
  8176                           fsr1l	equ	0xFE1
  8177                           status	equ	0xFD8
  8178                           
  8179 ;; *************** function _Do_Setup_Alarm_Time *****************
  8180 ;; Defined at:
  8181 ;;		line 24 in file "Setup_Alarm_Time.c"
  8182 ;; Parameters:    Size  Location     Type
  8183 ;;		None
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;		None
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  2  374[None  ] int 
  8188 ;; Registers used:
  8189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8190 ;; Tracked objects:
  8191 ;;		On entry : 0/0
  8192 ;;		On exit  : 0/0
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;Total ram usage:        0 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; Hardware stack levels required when called:   13
  8202 ;; This function calls:
  8203 ;;		_DS3231_Read_Alarm_Time
  8204 ;;		_Decrease_Alarm_Time
  8205 ;;		_Do_Beep_Bad
  8206 ;;		_Do_Beep_Good
  8207 ;;		_Do_Save_New_Alarm_Time
  8208 ;;		_Exit_Setup_Alarm_Time
  8209 ;;		_Go_Next_Alarm_Field
  8210 ;;		_Go_Prev_Alarm_Field
  8211 ;;		_Increase_Alarm_Time
  8212 ;;		_Initialize_Setup_Alarm_Time_Screen
  8213 ;;		_Update_Setup_Alarm_Time_Screen
  8214 ;;		_bcd_2_dec
  8215 ;;		_check_for_button_input
  8216 ;; This function is called by:
  8217 ;;		_main
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text32
  8222  00351A                     __ptext32:
  8223                           	opt stack 0
  8224  00351A                     _Do_Setup_Alarm_Time:
  8225                           	opt stack 17
  8226                           
  8227                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  8228                           
  8229                           ;incstack = 0
  8230  00351A  0E00               	movlw	0
  8231  00351C  6E4C               	movwf	_Select_Alarm_Field,c
  8232                           
  8233                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  8234  00351E  0E01               	movlw	1
  8235  003520  6E47               	movwf	_In_Alarm_Time_Setup,c
  8236                           
  8237                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  8238  003522  EC97  F022         	call	_DS3231_Read_Alarm_Time	;wreg free
  8239                           
  8240                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  8241  003526  5052               	movf	_alarm_second,w,c
  8242  003528  EC27  F024         	call	_bcd_2_dec
  8243  00352C  6E52               	movwf	_alarm_second,c
  8244                           
  8245                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  8246  00352E  5051               	movf	_alarm_minute,w,c
  8247  003530  EC27  F024         	call	_bcd_2_dec
  8248  003534  6E51               	movwf	_alarm_minute,c
  8249                           
  8250                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  8251  003536  5050               	movf	_alarm_hour,w,c
  8252  003538  EC27  F024         	call	_bcd_2_dec
  8253  00353C  6E50               	movwf	_alarm_hour,c
  8254                           
  8255                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  8256  00353E  C052  F0F8         	movff	_alarm_second,_setup_alarm_second
  8257                           
  8258                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  8259  003542  C051  F0F7         	movff	_alarm_minute,_setup_alarm_minute
  8260                           
  8261                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  8262  003546  C050  F0F6         	movff	_alarm_hour,_setup_alarm_hour
  8263                           
  8264                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  8265  00354A  EC99  F012         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8266                           
  8267                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  8268  00354E  ECCF  F016         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8269                           
  8270                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  8271  003552  D045               	goto	l10343
  8272  003554                     l10307:
  8273                           
  8274                           ;Setup_Alarm_Time.c: 38: {
  8275                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  8276  003554  ECCD  F01C         	call	_check_for_button_input	;wreg free
  8277  003558  06E8               	decf	wreg,f,c
  8278  00355A  A4D8               	btfss	status,2,c
  8279  00355C  D040               	goto	l10343
  8280                           
  8281                           ;Setup_Alarm_Time.c: 40: {
  8282                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  8283  00355E  0E02               	movlw	2
  8284  003560  0100               	movlb	0	; () banked
  8285  003562  65F4               	cpfsgt	_found& (0+255),b
  8286  003564  D039               	goto	l10341
  8287                           
  8288                           ; BSR set to: 0
  8289  003566  0E09               	movlw	9
  8290  003568  0100               	movlb	0	; () banked
  8291  00356A  61F4               	cpfslt	_found& (0+255),b
  8292  00356C  D035               	goto	l10341
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;Setup_Alarm_Time.c: 42: {
  8296                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  8297  00356E  EC0A  F026         	call	_Do_Beep_Good	;wreg free
  8298                           
  8299                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  8300  003572  0E03               	movlw	3
  8301  003574  0100               	movlb	0	; () banked
  8302  003576  19F4               	xorwf	_found& (0+255),w,b
  8303  003578  A4D8               	btfss	status,2,c
  8304  00357A  D003               	goto	l10319
  8305                           
  8306                           ; BSR set to: 0
  8307  00357C  ECF2  F025         	call	_Go_Prev_Alarm_Field	;wreg free
  8308  003580  D000               	goto	l10319
  8309  003582                     l10319:
  8310                           
  8311                           ;Setup_Alarm_Time.c: 45: if (found == 4) Go_Next_Alarm_Field();
  8312  003582  0E04               	movlw	4
  8313  003584  0100               	movlb	0	; () banked
  8314  003586  19F4               	xorwf	_found& (0+255),w,b
  8315  003588  A4D8               	btfss	status,2,c
  8316  00358A  D003               	goto	l10323
  8317                           
  8318                           ; BSR set to: 0
  8319  00358C  ECFE  F025         	call	_Go_Next_Alarm_Field	;wreg free
  8320  003590  D000               	goto	l10323
  8321  003592                     l10323:
  8322                           
  8323                           ;Setup_Alarm_Time.c: 46: if (found == 5) Do_Save_New_Alarm_Time();
  8324  003592  0E05               	movlw	5
  8325  003594  0100               	movlb	0	; () banked
  8326  003596  19F4               	xorwf	_found& (0+255),w,b
  8327  003598  A4D8               	btfss	status,2,c
  8328  00359A  D003               	goto	l10327
  8329                           
  8330                           ; BSR set to: 0
  8331  00359C  EC22  F026         	call	_Do_Save_New_Alarm_Time	;wreg free
  8332  0035A0  D000               	goto	l10327
  8333  0035A2                     l10327:
  8334                           
  8335                           ;Setup_Alarm_Time.c: 47: if (found == 6) Decrease_Alarm_Time();
  8336  0035A2  0E06               	movlw	6
  8337  0035A4  0100               	movlb	0	; () banked
  8338  0035A6  19F4               	xorwf	_found& (0+255),w,b
  8339  0035A8  A4D8               	btfss	status,2,c
  8340  0035AA  D003               	goto	l10331
  8341                           
  8342                           ; BSR set to: 0
  8343  0035AC  EC3F  F022         	call	_Decrease_Alarm_Time	;wreg free
  8344  0035B0  D000               	goto	l10331
  8345  0035B2                     l10331:
  8346                           
  8347                           ;Setup_Alarm_Time.c: 48: if (found == 7) Increase_Alarm_Time();
  8348  0035B2  0E07               	movlw	7
  8349  0035B4  0100               	movlb	0	; () banked
  8350  0035B6  19F4               	xorwf	_found& (0+255),w,b
  8351  0035B8  A4D8               	btfss	status,2,c
  8352  0035BA  D003               	goto	l10335
  8353                           
  8354                           ; BSR set to: 0
  8355  0035BC  EC57  F021         	call	_Increase_Alarm_Time	;wreg free
  8356  0035C0  D000               	goto	l10335
  8357  0035C2                     l10335:
  8358                           
  8359                           ;Setup_Alarm_Time.c: 49: if (found == 8) Exit_Setup_Alarm_Time();
  8360  0035C2  0E08               	movlw	8
  8361  0035C4  0100               	movlb	0	; () banked
  8362  0035C6  19F4               	xorwf	_found& (0+255),w,b
  8363  0035C8  A4D8               	btfss	status,2,c
  8364  0035CA  D003               	goto	l10339
  8365                           
  8366                           ; BSR set to: 0
  8367  0035CC  ECD3  F026         	call	_Exit_Setup_Alarm_Time	;wreg free
  8368  0035D0  D000               	goto	l10339
  8369  0035D2                     l10339:
  8370                           
  8371                           ;Setup_Alarm_Time.c: 50: found = 0xff;
  8372  0035D2  0100               	movlb	0	; () banked
  8373  0035D4  69F4               	setf	_found& (0+255),b
  8374                           
  8375                           ;Setup_Alarm_Time.c: 51: }
  8376  0035D6  D003               	goto	l10343
  8377  0035D8                     l10341:
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;Setup_Alarm_Time.c: 52: else
  8381                           ;Setup_Alarm_Time.c: 53: {
  8382                           ;Setup_Alarm_Time.c: 54: Do_Beep_Bad();
  8383  0035D8  EC16  F026         	call	_Do_Beep_Bad	;wreg free
  8384  0035DC  D000               	goto	l10343
  8385  0035DE                     l10343:
  8386  0035DE  0447               	decf	_In_Alarm_Time_Setup,w,c
  8387  0035E0  B4D8               	btfsc	status,2,c
  8388  0035E2  D7B8               	goto	l10307
  8389  0035E4  0012               	return		;funcret
  8390  0035E6                     __end_of_Do_Setup_Alarm_Time:
  8391                           	opt stack 0
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           postinc0	equ	0xFEE
  8397                           wreg	equ	0xFE8
  8398                           postdec1	equ	0xFE5
  8399                           fsr1l	equ	0xFE1
  8400                           status	equ	0xFD8
  8401                           
  8402 ;; *************** function _check_for_button_input *****************
  8403 ;; Defined at:
  8404 ;;		line 16 in file "utils.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;		None
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  j               2   27[BANK0 ] int 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      unsigned char 
  8411 ;; Registers used:
  8412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8421 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;Total ram usage:        3 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    6
  8425 ;; This function calls:
  8426 ;;		_printf
  8427 ;; This function is called by:
  8428 ;;		_main
  8429 ;;		_Do_Setup_Alarm_Time
  8430 ;;		_Do_Setup_Heater_Temp
  8431 ;;		_Do_Setup_Time
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           	psect	text33
  8436  00399A                     __ptext33:
  8437                           	opt stack 0
  8438  00399A                     _check_for_button_input:
  8439                           	opt stack 24
  8440                           
  8441                           ;utils.c: 18: if (nec_ok == 1)
  8442                           
  8443                           ;incstack = 0
  8444  00399A  043E               	decf	_nec_ok,w,c
  8445  00399C  103F               	iorwf	_nec_ok+1,w,c
  8446  00399E  A4D8               	btfss	status,2,c
  8447  0039A0  D04F               	goto	l1095
  8448                           
  8449                           ;utils.c: 19: {
  8450                           ;utils.c: 20: nec_ok = 0;
  8451  0039A2  0E00               	movlw	0
  8452  0039A4  6E3F               	movwf	_nec_ok+1,c
  8453  0039A6  0E00               	movlw	0
  8454  0039A8  6E3E               	movwf	_nec_ok,c
  8455                           
  8456                           ;utils.c: 22: printf ("NEC_Code = %x\r\n", Nec_code1);
  8457  0039AA  0E4E               	movlw	low STR_37
  8458  0039AC  0100               	movlb	0	; () banked
  8459  0039AE  6FD9               	movwf	printf@f& (0+255),b
  8460  0039B0  0EFF               	movlw	high STR_37
  8461  0039B2  0100               	movlb	0	; () banked
  8462  0039B4  6FDA               	movwf	(printf@f+1)& (0+255),b
  8463  0039B6  C04A  F0DB         	movff	_Nec_code1,?_printf+2
  8464  0039BA  0100               	movlb	0	; () banked
  8465  0039BC  6BDC               	clrf	(?_printf+3)& (0+255),b
  8466  0039BE  ECEB  F005         	call	_printf	;wreg free
  8467                           
  8468                           ;utils.c: 23: INTCONbits.INT0IE = 1;
  8469  0039C2  88F2               	bsf	intcon,4,c	;volatile
  8470                           
  8471                           ;utils.c: 24: INTCON2bits.INTEDG0 = 0;
  8472  0039C4  9CF1               	bcf	intcon2,6,c	;volatile
  8473                           
  8474                           ;utils.c: 26: found = 0xff;
  8475  0039C6  0100               	movlb	0	; () banked
  8476  0039C8  69F4               	setf	_found& (0+255),b
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;utils.c: 27: for (int j=0; j< 21; j++)
  8480  0039CA  0E00               	movlw	0
  8481  0039CC  0100               	movlb	0	; () banked
  8482  0039CE  6FE9               	movwf	(check_for_button_input@j+1)& (0+255),b
  8483  0039D0  0E00               	movlw	0
  8484  0039D2  6FE8               	movwf	check_for_button_input@j& (0+255),b
  8485  0039D4                     l9575:
  8486                           
  8487                           ; BSR set to: 0
  8488  0039D4  0100               	movlb	0	; () banked
  8489  0039D6  BFE9               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  8490  0039D8  D00A               	goto	l9579
  8491  0039DA  0100               	movlb	0	; () banked
  8492  0039DC  51E9               	movf	(check_for_button_input@j+1)& (0+255),w,b
  8493  0039DE  E120               	bnz	l9589
  8494  0039E0  0E15               	movlw	21
  8495  0039E2  0100               	movlb	0	; () banked
  8496  0039E4  5DE8               	subwf	check_for_button_input@j& (0+255),w,b
  8497  0039E6  B0D8               	btfsc	status,0,c
  8498  0039E8  D01B               	goto	l9589
  8499  0039EA  D001               	goto	l9579
  8500                           
  8501                           ; BSR set to: 0
  8502  0039EC  D019               	goto	l9589
  8503  0039EE                     l9579:
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;utils.c: 28: {
  8507                           ;utils.c: 29: if (Nec_code1 == array1[j])
  8508  0039EE  0E1F               	movlw	low _array1
  8509  0039F0  0100               	movlb	0	; () banked
  8510  0039F2  25E8               	addwf	check_for_button_input@j& (0+255),w,b
  8511  0039F4  6ED9               	movwf	fsr2l,c
  8512  0039F6  0E01               	movlw	high _array1
  8513  0039F8  0100               	movlb	0	; () banked
  8514  0039FA  21E9               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  8515  0039FC  6EDA               	movwf	fsr2h,c
  8516  0039FE  504A               	movf	_Nec_code1,w,c
  8517  003A00  18DE               	xorwf	postinc2,w,c
  8518  003A02  A4D8               	btfss	status,2,c
  8519  003A04  D008               	goto	l9585
  8520                           
  8521                           ; BSR set to: 0
  8522                           ;utils.c: 30: {
  8523                           ;utils.c: 31: found = j;
  8524  003A06  C0E8  F0F4         	movff	check_for_button_input@j,_found
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;utils.c: 32: j = 21;
  8528  003A0A  0E00               	movlw	0
  8529  003A0C  0100               	movlb	0	; () banked
  8530  003A0E  6FE9               	movwf	(check_for_button_input@j+1)& (0+255),b
  8531  003A10  0E15               	movlw	21
  8532  003A12  6FE8               	movwf	check_for_button_input@j& (0+255),b
  8533  003A14  D000               	goto	l9585
  8534  003A16                     l9585:
  8535                           
  8536                           ; BSR set to: 0
  8537  003A16  0100               	movlb	0	; () banked
  8538  003A18  4BE8               	infsnz	check_for_button_input@j& (0+255),f,b
  8539  003A1A  2BE9               	incf	(check_for_button_input@j+1)& (0+255),f,b
  8540  003A1C  D7DB               	goto	l9575
  8541                           
  8542                           ; BSR set to: 0
  8543  003A1E  D000               	goto	l9589
  8544  003A20                     l9589:
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;utils.c: 33: }
  8548                           ;utils.c: 34: }
  8549                           ;utils.c: 36: if (found == 0xff)
  8550  003A20  0100               	movlb	0	; () banked
  8551  003A22  29F4               	incf	_found& (0+255),w,b
  8552  003A24  A4D8               	btfss	status,2,c
  8553  003A26  D00A               	goto	l9599
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;utils.c: 37: {
  8557                           ;utils.c: 38: printf ("Cannot find button \r\n");
  8558  003A28  0EBF               	movlw	low STR_38
  8559  003A2A  0100               	movlb	0	; () banked
  8560  003A2C  6FD9               	movwf	printf@f& (0+255),b
  8561  003A2E  0EFE               	movlw	high STR_38
  8562  003A30  0100               	movlb	0	; () banked
  8563  003A32  6FDA               	movwf	(printf@f+1)& (0+255),b
  8564  003A34  ECEB  F005         	call	_printf	;wreg free
  8565                           
  8566                           ;utils.c: 39: return (0);
  8567  003A38  0E00               	movlw	0
  8568                           
  8569                           ;utils.c: 40: }
  8570  003A3A  D002               	goto	l1095
  8571  003A3C                     l9599:
  8572                           
  8573                           ;utils.c: 41: else
  8574                           ;utils.c: 42: {
  8575                           ;utils.c: 43: return (1);
  8576  003A3C  0E01               	movlw	1
  8577  003A3E  D000               	goto	l1095
  8578  003A40                     l1095:
  8579  003A40  0012               	return		;funcret
  8580  003A42                     __end_of_check_for_button_input:
  8581                           	opt stack 0
  8582                           tblptru	equ	0xFF8
  8583                           tblptrh	equ	0xFF7
  8584                           tblptrl	equ	0xFF6
  8585                           tablat	equ	0xFF5
  8586                           intcon	equ	0xFF2
  8587                           intcon2	equ	0xFF1
  8588                           postinc0	equ	0xFEE
  8589                           wreg	equ	0xFE8
  8590                           postdec1	equ	0xFE5
  8591                           fsr1l	equ	0xFE1
  8592                           postinc2	equ	0xFDE
  8593                           fsr2h	equ	0xFDA
  8594                           fsr2l	equ	0xFD9
  8595                           status	equ	0xFD8
  8596                           
  8597 ;; *************** function _bcd_2_dec *****************
  8598 ;; Defined at:
  8599 ;;		line 48 in file "utils.c"
  8600 ;; Parameters:    Size  Location     Type
  8601 ;;  bcd             1    wreg     unsigned char 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;  bcd             1    4[BANK0 ] unsigned char 
  8604 ;;  dec             2    2[BANK0 ] int 
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  1    wreg      unsigned char 
  8607 ;; Registers used:
  8608 ;;		wreg, status,2, status,0, prodl, prodh
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;Total ram usage:        5 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    4
  8621 ;; This function calls:
  8622 ;;		Nothing
  8623 ;; This function is called by:
  8624 ;;		_Do_Setup_Alarm_Time
  8625 ;;		_Do_Setup_Time
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           	psect	text34
  8630  00484E                     __ptext34:
  8631                           	opt stack 0
  8632  00484E                     _bcd_2_dec:
  8633                           	opt stack 25
  8634                           
  8635                           ;incstack = 0
  8636                           ;bcd_2_dec@bcd stored from wreg
  8637  00484E  0100               	movlb	0	; () banked
  8638  004850  6FD1               	movwf	bcd_2_dec@bcd& (0+255),b
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;utils.c: 50: int dec;
  8642                           ;utils.c: 51: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  8643  004852  C0D1  F0CD         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8644  004856  0E0F               	movlw	15
  8645  004858  0100               	movlb	0	; () banked
  8646  00485A  17CD               	andwf	??_bcd_2_dec& (0+255),f,b
  8647  00485C  C0D1  F0CE         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8648  004860  0100               	movlb	0	; () banked
  8649  004862  3BCE               	swapf	(??_bcd_2_dec+1)& (0+255),f,b
  8650  004864  0E0F               	movlw	15
  8651  004866  17CE               	andwf	(??_bcd_2_dec+1)& (0+255),f,b
  8652  004868  0100               	movlb	0	; () banked
  8653  00486A  51CE               	movf	(??_bcd_2_dec+1)& (0+255),w,b
  8654  00486C  0D0A               	mullw	10
  8655  00486E  0100               	movlb	0	; () banked
  8656  004870  51CD               	movf	??_bcd_2_dec& (0+255),w,b
  8657  004872  24F3               	addwf	prodl,w,c
  8658  004874  0100               	movlb	0	; () banked
  8659  004876  6FCF               	movwf	bcd_2_dec@dec& (0+255),b
  8660  004878  0100               	movlb	0	; () banked
  8661  00487A  0E00               	movlw	0
  8662  00487C  20F4               	addwfc	prodh,w,c
  8663  00487E  0100               	movlb	0	; () banked
  8664  004880  6FD0               	movwf	(bcd_2_dec@dec+1)& (0+255),b
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;utils.c: 52: return dec;
  8668  004882  0100               	movlb	0	; () banked
  8669  004884  51CF               	movf	bcd_2_dec@dec& (0+255),w,b
  8670  004886  D000               	goto	l1099
  8671  004888                     l1099:
  8672                           
  8673                           ; BSR set to: 0
  8674  004888  0012               	return		;funcret
  8675  00488A                     __end_of_bcd_2_dec:
  8676                           	opt stack 0
  8677                           tblptru	equ	0xFF8
  8678                           tblptrh	equ	0xFF7
  8679                           tblptrl	equ	0xFF6
  8680                           tablat	equ	0xFF5
  8681                           prodh	equ	0xFF4
  8682                           prodl	equ	0xFF3
  8683                           intcon	equ	0xFF2
  8684                           intcon2	equ	0xFF1
  8685                           postinc0	equ	0xFEE
  8686                           wreg	equ	0xFE8
  8687                           postdec1	equ	0xFE5
  8688                           fsr1l	equ	0xFE1
  8689                           postinc2	equ	0xFDE
  8690                           fsr2h	equ	0xFDA
  8691                           fsr2l	equ	0xFD9
  8692                           status	equ	0xFD8
  8693                           
  8694 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8695 ;; Defined at:
  8696 ;;		line 149 in file "Setup_Alarm_Time.c"
  8697 ;; Parameters:    Size  Location     Type
  8698 ;;		None
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;		None
  8701 ;; Return value:  Size  Location     Type
  8702 ;;		None               void
  8703 ;; Registers used:
  8704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8705 ;; Tracked objects:
  8706 ;;		On entry : 0/0
  8707 ;;		On exit  : 0/0
  8708 ;;		Unchanged: 0/0
  8709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;Total ram usage:        0 bytes
  8715 ;; Hardware stack levels used:    1
  8716 ;; Hardware stack levels required when called:   11
  8717 ;; This function calls:
  8718 ;;		_drawtext
  8719 ;;		_fillRect
  8720 ;;		_fillScreen
  8721 ;;		_strcpy
  8722 ;; This function is called by:
  8723 ;;		_Do_Setup_Alarm_Time
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text35
  8728  002532                     __ptext35:
  8729                           	opt stack 0
  8730  002532                     _Initialize_Setup_Alarm_Time_Screen:
  8731                           	opt stack 18
  8732                           
  8733                           ;Setup_Alarm_Time.c: 151: fillScreen(0x0000);
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;incstack = 0
  8737  002532  0E00               	movlw	0
  8738  002534  0100               	movlb	0	; () banked
  8739  002536  6FE1               	movwf	(fillScreen@color+1)& (0+255),b
  8740  002538  0E00               	movlw	0
  8741  00253A  6FE0               	movwf	fillScreen@color& (0+255),b
  8742  00253C  EC67  F025         	call	_fillScreen	;wreg free
  8743                           
  8744                           ;Setup_Alarm_Time.c: 153: strcpy(txt, "ECE3301L F'21 Final");
  8745  002540  C042  F0CD         	movff	_txt,strcpy@to
  8746  002544  C043  F0CE         	movff	_txt+1,strcpy@to+1
  8747  002548  0E15               	movlw	low STR_24
  8748  00254A  0100               	movlb	0	; () banked
  8749  00254C  6FCF               	movwf	strcpy@from& (0+255),b
  8750  00254E  0EFF               	movlw	high STR_24
  8751  002550  0100               	movlb	0	; () banked
  8752  002552  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  8753  002554  EC61  F024         	call	_strcpy	;wreg free
  8754                           
  8755                           ;Setup_Alarm_Time.c: 154: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8756  002558  0E01               	movlw	1
  8757  00255A  0101               	movlb	1	; () banked
  8758  00255C  6F63               	movwf	drawtext@y& (0+255),b
  8759  00255E  C042  F164         	movff	_txt,drawtext@_text
  8760  002562  C043  F165         	movff	_txt+1,drawtext@_text+1
  8761  002566  0EFF               	movlw	255
  8762  002568  0101               	movlb	1	; () banked
  8763  00256A  6F67               	movwf	(drawtext@color+1)& (0+255),b
  8764  00256C  6966               	setf	drawtext@color& (0+255),b
  8765  00256E  0E00               	movlw	0
  8766  002570  0101               	movlb	1	; () banked
  8767  002572  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  8768  002574  0E00               	movlw	0
  8769  002576  6F68               	movwf	drawtext@bg& (0+255),b
  8770  002578  0E01               	movlw	1
  8771  00257A  0101               	movlb	1	; () banked
  8772  00257C  6F6A               	movwf	drawtext@size& (0+255),b
  8773  00257E  0E01               	movlw	1
  8774  002580  EC18  F015         	call	_drawtext
  8775                           
  8776                           ;Setup_Alarm_Time.c: 157: strcpy(txt, "  Alarm");
  8777  002584  C042  F0CD         	movff	_txt,strcpy@to
  8778  002588  C043  F0CE         	movff	_txt+1,strcpy@to+1
  8779  00258C  0EC8               	movlw	low STR_25
  8780  00258E  0100               	movlb	0	; () banked
  8781  002590  6FCF               	movwf	strcpy@from& (0+255),b
  8782  002592  0EFF               	movlw	high STR_25
  8783  002594  0100               	movlb	0	; () banked
  8784  002596  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  8785  002598  EC61  F024         	call	_strcpy	;wreg free
  8786                           
  8787                           ;Setup_Alarm_Time.c: 158: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  8788  00259C  0E0B               	movlw	11
  8789  00259E  0101               	movlb	1	; () banked
  8790  0025A0  6F63               	movwf	drawtext@y& (0+255),b
  8791  0025A2  C042  F164         	movff	_txt,drawtext@_text
  8792  0025A6  C043  F165         	movff	_txt+1,drawtext@_text+1
  8793  0025AA  0EF8               	movlw	248
  8794  0025AC  0101               	movlb	1	; () banked
  8795  0025AE  6F67               	movwf	(drawtext@color+1)& (0+255),b
  8796  0025B0  0E1F               	movlw	31
  8797  0025B2  6F66               	movwf	drawtext@color& (0+255),b
  8798  0025B4  0E00               	movlw	0
  8799  0025B6  0101               	movlb	1	; () banked
  8800  0025B8  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  8801  0025BA  0E00               	movlw	0
  8802  0025BC  6F68               	movwf	drawtext@bg& (0+255),b
  8803  0025BE  0E02               	movlw	2
  8804  0025C0  0101               	movlb	1	; () banked
  8805  0025C2  6F6A               	movwf	drawtext@size& (0+255),b
  8806  0025C4  0E06               	movlw	6
  8807  0025C6  EC18  F015         	call	_drawtext
  8808                           
  8809                           ;Setup_Alarm_Time.c: 159: strcpy(txt, "  Setup");
  8810  0025CA  C042  F0CD         	movff	_txt,strcpy@to
  8811  0025CE  C043  F0CE         	movff	_txt+1,strcpy@to+1
  8812  0025D2  0ED0               	movlw	low STR_26
  8813  0025D4  0100               	movlb	0	; () banked
  8814  0025D6  6FCF               	movwf	strcpy@from& (0+255),b
  8815  0025D8  0EFF               	movlw	high STR_26
  8816  0025DA  0100               	movlb	0	; () banked
  8817  0025DC  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  8818  0025DE  EC61  F024         	call	_strcpy	;wreg free
  8819                           
  8820                           ;Setup_Alarm_Time.c: 160: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  8821  0025E2  0E1A               	movlw	26
  8822  0025E4  0101               	movlb	1	; () banked
  8823  0025E6  6F63               	movwf	drawtext@y& (0+255),b
  8824  0025E8  C042  F164         	movff	_txt,drawtext@_text
  8825  0025EC  C043  F165         	movff	_txt+1,drawtext@_text+1
  8826  0025F0  0EF8               	movlw	248
  8827  0025F2  0101               	movlb	1	; () banked
  8828  0025F4  6F67               	movwf	(drawtext@color+1)& (0+255),b
  8829  0025F6  0E1F               	movlw	31
  8830  0025F8  6F66               	movwf	drawtext@color& (0+255),b
  8831  0025FA  0E00               	movlw	0
  8832  0025FC  0101               	movlb	1	; () banked
  8833  0025FE  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  8834  002600  0E00               	movlw	0
  8835  002602  6F68               	movwf	drawtext@bg& (0+255),b
  8836  002604  0E02               	movlw	2
  8837  002606  0101               	movlb	1	; () banked
  8838  002608  6F6A               	movwf	drawtext@size& (0+255),b
  8839  00260A  0E06               	movlw	6
  8840  00260C  EC18  F015         	call	_drawtext
  8841                           
  8842                           ;Setup_Alarm_Time.c: 162: strcpy(txt, "Time");
  8843  002610  C042  F0CD         	movff	_txt,strcpy@to
  8844  002614  C043  F0CE         	movff	_txt+1,strcpy@to+1
  8845  002618  0EB0               	movlw	low (STR_12+6)
  8846  00261A  0100               	movlb	0	; () banked
  8847  00261C  6FCF               	movwf	strcpy@from& (0+255),b
  8848  00261E  0EFF               	movlw	high (STR_12+6)
  8849  002620  0100               	movlb	0	; () banked
  8850  002622  6FD0               	movwf	(strcpy@from+1)& (0+255),b
  8851  002624  EC61  F024         	call	_strcpy	;wreg free
  8852                           
  8853                           ;Setup_Alarm_Time.c: 163: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8854  002628  0E28               	movlw	40
  8855  00262A  0101               	movlb	1	; () banked
  8856  00262C  6F63               	movwf	drawtext@y& (0+255),b
  8857  00262E  C042  F164         	movff	_txt,drawtext@_text
  8858  002632  C043  F165         	movff	_txt+1,drawtext@_text+1
  8859  002636  0E00               	movlw	0
  8860  002638  0101               	movlb	1	; () banked
  8861  00263A  6F67               	movwf	(drawtext@color+1)& (0+255),b
  8862  00263C  0E1F               	movlw	31
  8863  00263E  6F66               	movwf	drawtext@color& (0+255),b
  8864  002640  0E00               	movlw	0
  8865  002642  0101               	movlb	1	; () banked
  8866  002644  6F69               	movwf	(drawtext@bg+1)& (0+255),b
  8867  002646  0E00               	movlw	0
  8868  002648  6F68               	movwf	drawtext@bg& (0+255),b
  8869  00264A  0E01               	movlw	1
  8870  00264C  0101               	movlb	1	; () banked
  8871  00264E  6F6A               	movwf	drawtext@size& (0+255),b
  8872  002650  0E32               	movlw	50
  8873  002652  EC18  F015         	call	_drawtext
  8874                           
  8875                           ;Setup_Alarm_Time.c: 164: fillRect(15-1, 52+16, 25,2,0x07FF);
  8876  002656  0E44               	movlw	68
  8877  002658  0100               	movlb	0	; () banked
  8878  00265A  6FDF               	movwf	fillRect@y& (0+255),b
  8879  00265C  0E19               	movlw	25
  8880  00265E  0100               	movlb	0	; () banked
  8881  002660  6FE0               	movwf	fillRect@w& (0+255),b
  8882  002662  0E02               	movlw	2
  8883  002664  0100               	movlb	0	; () banked
  8884  002666  6FE1               	movwf	fillRect@h& (0+255),b
  8885  002668  0E07               	movlw	7
  8886  00266A  0100               	movlb	0	; () banked
  8887  00266C  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  8888  00266E  69E2               	setf	fillRect@color& (0+255),b
  8889  002670  0E0E               	movlw	14
  8890  002672  EC25  F021         	call	_fillRect
  8891  002676  0012               	return		;funcret
  8892  002678                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  8893                           	opt stack 0
  8894                           tblptru	equ	0xFF8
  8895                           tblptrh	equ	0xFF7
  8896                           tblptrl	equ	0xFF6
  8897                           tablat	equ	0xFF5
  8898                           prodh	equ	0xFF4
  8899                           prodl	equ	0xFF3
  8900                           intcon	equ	0xFF2
  8901                           intcon2	equ	0xFF1
  8902                           postinc0	equ	0xFEE
  8903                           wreg	equ	0xFE8
  8904                           postdec1	equ	0xFE5
  8905                           fsr1l	equ	0xFE1
  8906                           postinc2	equ	0xFDE
  8907                           fsr2h	equ	0xFDA
  8908                           fsr2l	equ	0xFD9
  8909                           status	equ	0xFD8
  8910                           
  8911 ;; *************** function _Increase_Alarm_Time *****************
  8912 ;; Defined at:
  8913 ;;		line 60 in file "Setup_Alarm_Time.c"
  8914 ;; Parameters:    Size  Location     Type
  8915 ;;		None
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;		None
  8918 ;; Return value:  Size  Location     Type
  8919 ;;		None               void
  8920 ;; Registers used:
  8921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;Total ram usage:        0 bytes
  8932 ;; Hardware stack levels used:    1
  8933 ;; Hardware stack levels required when called:   12
  8934 ;; This function calls:
  8935 ;;		_Update_Setup_Alarm_Time_Screen
  8936 ;; This function is called by:
  8937 ;;		_Do_Setup_Alarm_Time
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           	psect	text36
  8942  0042AE                     __ptext36:
  8943                           	opt stack 0
  8944  0042AE                     _Increase_Alarm_Time:
  8945                           	opt stack 17
  8946                           
  8947                           ;Setup_Alarm_Time.c: 62: switch (Select_Alarm_Field)
  8948                           
  8949                           ;incstack = 0
  8950  0042AE  D021               	goto	l9711
  8951  0042B0                     l9691:
  8952                           
  8953                           ;Setup_Alarm_Time.c: 65: setup_alarm_hour++;
  8954  0042B0  0100               	movlb	0	; () banked
  8955  0042B2  2BF6               	incf	_setup_alarm_hour& (0+255),f,b
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;Setup_Alarm_Time.c: 66: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  8959  0042B4  0E18               	movlw	24
  8960  0042B6  0100               	movlb	0	; () banked
  8961  0042B8  19F6               	xorwf	_setup_alarm_hour& (0+255),w,b
  8962  0042BA  A4D8               	btfss	status,2,c
  8963  0042BC  D025               	goto	l9713
  8964                           
  8965                           ; BSR set to: 0
  8966  0042BE  0E00               	movlw	0
  8967  0042C0  0100               	movlb	0	; () banked
  8968  0042C2  6FF6               	movwf	_setup_alarm_hour& (0+255),b
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;Setup_Alarm_Time.c: 67: break;
  8972  0042C4  D021               	goto	l9713
  8973  0042C6                     l9697:
  8974                           
  8975                           ;Setup_Alarm_Time.c: 70: setup_alarm_minute++;
  8976  0042C6  0100               	movlb	0	; () banked
  8977  0042C8  2BF7               	incf	_setup_alarm_minute& (0+255),f,b
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;Setup_Alarm_Time.c: 71: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  8981  0042CA  0E3C               	movlw	60
  8982  0042CC  0100               	movlb	0	; () banked
  8983  0042CE  19F7               	xorwf	_setup_alarm_minute& (0+255),w,b
  8984  0042D0  A4D8               	btfss	status,2,c
  8985  0042D2  D01A               	goto	l9713
  8986                           
  8987                           ; BSR set to: 0
  8988  0042D4  0E00               	movlw	0
  8989  0042D6  0100               	movlb	0	; () banked
  8990  0042D8  6FF7               	movwf	_setup_alarm_minute& (0+255),b
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;Setup_Alarm_Time.c: 72: break;
  8994  0042DA  D016               	goto	l9713
  8995  0042DC                     l9703:
  8996                           
  8997                           ;Setup_Alarm_Time.c: 76: setup_alarm_second++;
  8998  0042DC  0100               	movlb	0	; () banked
  8999  0042DE  2BF8               	incf	_setup_alarm_second& (0+255),f,b
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;Setup_Alarm_Time.c: 77: if (setup_alarm_second == 60) setup_alarm_second = 0;
  9003  0042E0  0E3C               	movlw	60
  9004  0042E2  0100               	movlb	0	; () banked
  9005  0042E4  19F8               	xorwf	_setup_alarm_second& (0+255),w,b
  9006  0042E6  A4D8               	btfss	status,2,c
  9007  0042E8  D00F               	goto	l9713
  9008                           
  9009                           ; BSR set to: 0
  9010  0042EA  0E00               	movlw	0
  9011  0042EC  0100               	movlb	0	; () banked
  9012  0042EE  6FF8               	movwf	_setup_alarm_second& (0+255),b
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;Setup_Alarm_Time.c: 83: }
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;Setup_Alarm_Time.c: 82: break;
  9019                           
  9020                           ;Setup_Alarm_Time.c: 81: default:
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;Setup_Alarm_Time.c: 78: break;
  9024  0042F0  D00B               	goto	l9713
  9025  0042F2                     l9711:
  9026  0042F2  504C               	movf	_Select_Alarm_Field,w,c
  9027                           
  9028                           ; Switch size 1, requested type "space"
  9029                           ; Number of cases is 3, Range of values is 0 to 2
  9030                           ; switch strategies available:
  9031                           ; Name         Instructions Cycles
  9032                           ; simple_byte           10     6 (average)
  9033                           ;	Chosen strategy is simple_byte
  9034  0042F4  0A00               	xorlw	0	; case 0
  9035  0042F6  B4D8               	btfsc	status,2,c
  9036  0042F8  D7DB               	goto	l9691
  9037  0042FA  0A01               	xorlw	1	; case 1
  9038  0042FC  B4D8               	btfsc	status,2,c
  9039  0042FE  D7E3               	goto	l9697
  9040  004300  0A03               	xorlw	3	; case 2
  9041  004302  B4D8               	btfsc	status,2,c
  9042  004304  D7EB               	goto	l9703
  9043  004306  D000               	goto	l9713
  9044  004308                     l9713:
  9045                           
  9046                           ;Setup_Alarm_Time.c: 84: Update_Setup_Alarm_Time_Screen();
  9047  004308  ECCF  F016         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9048  00430C  0012               	return		;funcret
  9049  00430E                     __end_of_Increase_Alarm_Time:
  9050                           	opt stack 0
  9051                           tblptru	equ	0xFF8
  9052                           tblptrh	equ	0xFF7
  9053                           tblptrl	equ	0xFF6
  9054                           tablat	equ	0xFF5
  9055                           prodh	equ	0xFF4
  9056                           prodl	equ	0xFF3
  9057                           intcon	equ	0xFF2
  9058                           intcon2	equ	0xFF1
  9059                           postinc0	equ	0xFEE
  9060                           wreg	equ	0xFE8
  9061                           postdec1	equ	0xFE5
  9062                           fsr1l	equ	0xFE1
  9063                           postinc2	equ	0xFDE
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068 ;; *************** function _Go_Prev_Alarm_Field *****************
  9069 ;; Defined at:
  9070 ;;		line 126 in file "Setup_Alarm_Time.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;		None
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;		None
  9075 ;; Return value:  Size  Location     Type
  9076 ;;		None               void
  9077 ;; Registers used:
  9078 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;Total ram usage:        0 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:   10
  9091 ;; This function calls:
  9092 ;;		_Update_Setup_Screen_Cursor_Backward
  9093 ;; This function is called by:
  9094 ;;		_Do_Setup_Alarm_Time
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           	psect	text37
  9099  004BE4                     __ptext37:
  9100                           	opt stack 0
  9101  004BE4                     _Go_Prev_Alarm_Field:
  9102                           	opt stack 19
  9103                           
  9104                           ;Setup_Alarm_Time.c: 128: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  9105                           
  9106                           ;incstack = 0
  9107  004BE4  504C               	movf	_Select_Alarm_Field,w,c
  9108  004BE6  A4D8               	btfss	status,2,c
  9109  004BE8  D003               	goto	l9645
  9110  004BEA  0E02               	movlw	2
  9111  004BEC  6E4C               	movwf	_Select_Alarm_Field,c
  9112  004BEE  D002               	goto	l9647
  9113  004BF0                     l9645:
  9114                           
  9115                           ;Setup_Alarm_Time.c: 129: else Select_Alarm_Field--;
  9116  004BF0  064C               	decf	_Select_Alarm_Field,f,c
  9117  004BF2  D000               	goto	l9647
  9118  004BF4                     l9647:
  9119                           
  9120                           ;Setup_Alarm_Time.c: 130: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  9121  004BF4  504C               	movf	_Select_Alarm_Field,w,c
  9122  004BF6  ECE6  F00B         	call	_Update_Setup_Screen_Cursor_Backward
  9123  004BFA  0012               	return		;funcret
  9124  004BFC                     __end_of_Go_Prev_Alarm_Field:
  9125                           	opt stack 0
  9126                           tblptru	equ	0xFF8
  9127                           tblptrh	equ	0xFF7
  9128                           tblptrl	equ	0xFF6
  9129                           tablat	equ	0xFF5
  9130                           prodh	equ	0xFF4
  9131                           prodl	equ	0xFF3
  9132                           intcon	equ	0xFF2
  9133                           intcon2	equ	0xFF1
  9134                           postinc0	equ	0xFEE
  9135                           wreg	equ	0xFE8
  9136                           postdec1	equ	0xFE5
  9137                           fsr1l	equ	0xFE1
  9138                           postinc2	equ	0xFDE
  9139                           fsr2h	equ	0xFDA
  9140                           fsr2l	equ	0xFD9
  9141                           status	equ	0xFD8
  9142                           
  9143 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  9144 ;; Defined at:
  9145 ;;		line 275 in file "Setup_Time.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;  field           1    wreg     unsigned char 
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;  field           1    0[BANK1 ] unsigned char 
  9150 ;;  xinc            1    2[BANK1 ] unsigned char 
  9151 ;;  yinc            1    1[BANK1 ] unsigned char 
  9152 ;; Return value:  Size  Location     Type
  9153 ;;		None               void
  9154 ;; Registers used:
  9155 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;Total ram usage:        3 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    9
  9168 ;; This function calls:
  9169 ;;		_fillRect
  9170 ;; This function is called by:
  9171 ;;		_Go_Prev_Alarm_Field
  9172 ;;		_Go_Prev_Field
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           	psect	text38
  9177  0017CC                     __ptext38:
  9178                           	opt stack 0
  9179  0017CC                     _Update_Setup_Screen_Cursor_Backward:
  9180                           	opt stack 19
  9181                           
  9182                           ;incstack = 0
  9183                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  9184  0017CC  0101               	movlb	1	; () banked
  9185  0017CE  6F58               	movwf	Update_Setup_Screen_Cursor_Backward@field& (0+255),b
  9186                           
  9187                           ; BSR set to: 1
  9188                           ;Setup_Time.c: 277: char xinc = 36;
  9189  0017D0  0E24               	movlw	36
  9190  0017D2  0101               	movlb	1	; () banked
  9191  0017D4  6F5A               	movwf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),b
  9192                           
  9193                           ;Setup_Time.c: 278: char yinc = 30;
  9194  0017D6  0E1E               	movlw	30
  9195  0017D8  0101               	movlb	1	; () banked
  9196  0017DA  6F59               	movwf	Update_Setup_Screen_Cursor_Backward@yinc& (0+255),b
  9197                           
  9198                           ;Setup_Time.c: 279: switch (field)
  9199  0017DC  D101               	goto	l9417
  9200  0017DE                     l9395:
  9201                           
  9202                           ; BSR set to: 1
  9203                           ;Setup_Time.c: 282: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9204  0017DE  0E44               	movlw	68
  9205  0017E0  0100               	movlb	0	; () banked
  9206  0017E2  6FDF               	movwf	fillRect@y& (0+255),b
  9207  0017E4  0E19               	movlw	25
  9208  0017E6  0100               	movlb	0	; () banked
  9209  0017E8  6FE0               	movwf	fillRect@w& (0+255),b
  9210  0017EA  0E02               	movlw	2
  9211  0017EC  0100               	movlb	0	; () banked
  9212  0017EE  6FE1               	movwf	fillRect@h& (0+255),b
  9213  0017F0  0E00               	movlw	0
  9214  0017F2  0100               	movlb	0	; () banked
  9215  0017F4  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9216  0017F6  0E00               	movlw	0
  9217  0017F8  6FE2               	movwf	fillRect@color& (0+255),b
  9218  0017FA  0101               	movlb	1	; () banked
  9219  0017FC  515A               	movf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),w,b
  9220  0017FE  0F0E               	addlw	14
  9221  001800  EC25  F021         	call	_fillRect
  9222                           
  9223                           ;Setup_Time.c: 283: fillRect(15-1, 52+16, 25,2,0x07FF);
  9224  001804  0E44               	movlw	68
  9225  001806  0100               	movlb	0	; () banked
  9226  001808  6FDF               	movwf	fillRect@y& (0+255),b
  9227  00180A  0E19               	movlw	25
  9228  00180C  0100               	movlb	0	; () banked
  9229  00180E  6FE0               	movwf	fillRect@w& (0+255),b
  9230  001810  0E02               	movlw	2
  9231  001812  0100               	movlb	0	; () banked
  9232  001814  6FE1               	movwf	fillRect@h& (0+255),b
  9233  001816  0E07               	movlw	7
  9234  001818  0100               	movlb	0	; () banked
  9235  00181A  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9236  00181C  69E2               	setf	fillRect@color& (0+255),b
  9237  00181E  0E0E               	movlw	14
  9238  001820  EC25  F021         	call	_fillRect
  9239                           
  9240                           ;Setup_Time.c: 284: break;
  9241  001824  D0F2               	goto	l1025
  9242  001826                     l9397:
  9243                           
  9244                           ;Setup_Time.c: 287: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9245  001826  0E44               	movlw	68
  9246  001828  0100               	movlb	0	; () banked
  9247  00182A  6FDF               	movwf	fillRect@y& (0+255),b
  9248  00182C  0E19               	movlw	25
  9249  00182E  0100               	movlb	0	; () banked
  9250  001830  6FE0               	movwf	fillRect@w& (0+255),b
  9251  001832  0E02               	movlw	2
  9252  001834  0100               	movlb	0	; () banked
  9253  001836  6FE1               	movwf	fillRect@h& (0+255),b
  9254  001838  0E00               	movlw	0
  9255  00183A  0100               	movlb	0	; () banked
  9256  00183C  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9257  00183E  0E00               	movlw	0
  9258  001840  6FE2               	movwf	fillRect@color& (0+255),b
  9259  001842  0101               	movlb	1	; () banked
  9260  001844  515A               	movf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),w,b
  9261  001846  0D02               	mullw	2
  9262  001848  50F3               	movf	prodl,w,c
  9263  00184A  0F0E               	addlw	14
  9264  00184C  EC25  F021         	call	_fillRect
  9265                           
  9266                           ;Setup_Time.c: 288: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9267  001850  0E44               	movlw	68
  9268  001852  0100               	movlb	0	; () banked
  9269  001854  6FDF               	movwf	fillRect@y& (0+255),b
  9270  001856  0E19               	movlw	25
  9271  001858  0100               	movlb	0	; () banked
  9272  00185A  6FE0               	movwf	fillRect@w& (0+255),b
  9273  00185C  0E02               	movlw	2
  9274  00185E  0100               	movlb	0	; () banked
  9275  001860  6FE1               	movwf	fillRect@h& (0+255),b
  9276  001862  0E07               	movlw	7
  9277  001864  0100               	movlb	0	; () banked
  9278  001866  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9279  001868  69E2               	setf	fillRect@color& (0+255),b
  9280  00186A  0101               	movlb	1	; () banked
  9281  00186C  515A               	movf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),w,b
  9282  00186E  0F0E               	addlw	14
  9283  001870  EC25  F021         	call	_fillRect
  9284                           
  9285                           ;Setup_Time.c: 289: break;
  9286  001874  D0CA               	goto	l1025
  9287  001876                     l9401:
  9288                           
  9289                           ;Setup_Time.c: 292: fillRect(15-1, 52+16, 25,2,0x0000);
  9290  001876  0E44               	movlw	68
  9291  001878  0100               	movlb	0	; () banked
  9292  00187A  6FDF               	movwf	fillRect@y& (0+255),b
  9293  00187C  0E19               	movlw	25
  9294  00187E  0100               	movlb	0	; () banked
  9295  001880  6FE0               	movwf	fillRect@w& (0+255),b
  9296  001882  0E02               	movlw	2
  9297  001884  0100               	movlb	0	; () banked
  9298  001886  6FE1               	movwf	fillRect@h& (0+255),b
  9299  001888  0E00               	movlw	0
  9300  00188A  0100               	movlb	0	; () banked
  9301  00188C  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9302  00188E  0E00               	movlw	0
  9303  001890  6FE2               	movwf	fillRect@color& (0+255),b
  9304  001892  0E0E               	movlw	14
  9305  001894  EC25  F021         	call	_fillRect
  9306                           
  9307                           ;Setup_Time.c: 293: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9308  001898  0101               	movlb	1	; () banked
  9309  00189A  5159               	movf	Update_Setup_Screen_Cursor_Backward@yinc& (0+255),w,b
  9310  00189C  0F44               	addlw	68
  9311  00189E  0100               	movlb	0	; () banked
  9312  0018A0  6FDF               	movwf	fillRect@y& (0+255),b
  9313  0018A2  0E19               	movlw	25
  9314  0018A4  0100               	movlb	0	; () banked
  9315  0018A6  6FE0               	movwf	fillRect@w& (0+255),b
  9316  0018A8  0E02               	movlw	2
  9317  0018AA  0100               	movlb	0	; () banked
  9318  0018AC  6FE1               	movwf	fillRect@h& (0+255),b
  9319  0018AE  0E00               	movlw	0
  9320  0018B0  0100               	movlb	0	; () banked
  9321  0018B2  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9322  0018B4  0E00               	movlw	0
  9323  0018B6  6FE2               	movwf	fillRect@color& (0+255),b
  9324  0018B8  0E0E               	movlw	14
  9325  0018BA  EC25  F021         	call	_fillRect
  9326                           
  9327                           ;Setup_Time.c: 294: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9328  0018BE  0E44               	movlw	68
  9329  0018C0  0100               	movlb	0	; () banked
  9330  0018C2  6FDF               	movwf	fillRect@y& (0+255),b
  9331  0018C4  0E19               	movlw	25
  9332  0018C6  0100               	movlb	0	; () banked
  9333  0018C8  6FE0               	movwf	fillRect@w& (0+255),b
  9334  0018CA  0E02               	movlw	2
  9335  0018CC  0100               	movlb	0	; () banked
  9336  0018CE  6FE1               	movwf	fillRect@h& (0+255),b
  9337  0018D0  0E07               	movlw	7
  9338  0018D2  0100               	movlb	0	; () banked
  9339  0018D4  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9340  0018D6  69E2               	setf	fillRect@color& (0+255),b
  9341  0018D8  0101               	movlb	1	; () banked
  9342  0018DA  515A               	movf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),w,b
  9343  0018DC  0D02               	mullw	2
  9344  0018DE  50F3               	movf	prodl,w,c
  9345  0018E0  0F0E               	addlw	14
  9346  0018E2  EC25  F021         	call	_fillRect
  9347                           
  9348                           ;Setup_Time.c: 295: break;
  9349  0018E6  D091               	goto	l1025
  9350  0018E8                     l9405:
  9351                           
  9352                           ;Setup_Time.c: 298: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9353  0018E8  0101               	movlb	1	; () banked
  9354  0018EA  5159               	movf	Update_Setup_Screen_Cursor_Backward@yinc& (0+255),w,b
  9355  0018EC  0F44               	addlw	68
  9356  0018EE  0100               	movlb	0	; () banked
  9357  0018F0  6FDF               	movwf	fillRect@y& (0+255),b
  9358  0018F2  0E19               	movlw	25
  9359  0018F4  0100               	movlb	0	; () banked
  9360  0018F6  6FE0               	movwf	fillRect@w& (0+255),b
  9361  0018F8  0E02               	movlw	2
  9362  0018FA  0100               	movlb	0	; () banked
  9363  0018FC  6FE1               	movwf	fillRect@h& (0+255),b
  9364  0018FE  0E00               	movlw	0
  9365  001900  0100               	movlb	0	; () banked
  9366  001902  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9367  001904  0E00               	movlw	0
  9368  001906  6FE2               	movwf	fillRect@color& (0+255),b
  9369  001908  0101               	movlb	1	; () banked
  9370  00190A  515A               	movf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),w,b
  9371  00190C  0F0E               	addlw	14
  9372  00190E  EC25  F021         	call	_fillRect
  9373                           
  9374                           ;Setup_Time.c: 299: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9375  001912  0101               	movlb	1	; () banked
  9376  001914  5159               	movf	Update_Setup_Screen_Cursor_Backward@yinc& (0+255),w,b
  9377  001916  0F44               	addlw	68
  9378  001918  0100               	movlb	0	; () banked
  9379  00191A  6FDF               	movwf	fillRect@y& (0+255),b
  9380  00191C  0E19               	movlw	25
  9381  00191E  0100               	movlb	0	; () banked
  9382  001920  6FE0               	movwf	fillRect@w& (0+255),b
  9383  001922  0E02               	movlw	2
  9384  001924  0100               	movlb	0	; () banked
  9385  001926  6FE1               	movwf	fillRect@h& (0+255),b
  9386  001928  0E07               	movlw	7
  9387  00192A  0100               	movlb	0	; () banked
  9388  00192C  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9389  00192E  69E2               	setf	fillRect@color& (0+255),b
  9390  001930  0E0E               	movlw	14
  9391  001932  EC25  F021         	call	_fillRect
  9392                           
  9393                           ;Setup_Time.c: 300: break;
  9394  001936  D069               	goto	l1025
  9395  001938                     l9407:
  9396                           
  9397                           ;Setup_Time.c: 303: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9398  001938  0101               	movlb	1	; () banked
  9399  00193A  5159               	movf	Update_Setup_Screen_Cursor_Backward@yinc& (0+255),w,b
  9400  00193C  0F44               	addlw	68
  9401  00193E  0100               	movlb	0	; () banked
  9402  001940  6FDF               	movwf	fillRect@y& (0+255),b
  9403  001942  0E19               	movlw	25
  9404  001944  0100               	movlb	0	; () banked
  9405  001946  6FE0               	movwf	fillRect@w& (0+255),b
  9406  001948  0E02               	movlw	2
  9407  00194A  0100               	movlb	0	; () banked
  9408  00194C  6FE1               	movwf	fillRect@h& (0+255),b
  9409  00194E  0E00               	movlw	0
  9410  001950  0100               	movlb	0	; () banked
  9411  001952  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9412  001954  0E00               	movlw	0
  9413  001956  6FE2               	movwf	fillRect@color& (0+255),b
  9414  001958  0101               	movlb	1	; () banked
  9415  00195A  515A               	movf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),w,b
  9416  00195C  0D02               	mullw	2
  9417  00195E  50F3               	movf	prodl,w,c
  9418  001960  0F0E               	addlw	14
  9419  001962  EC25  F021         	call	_fillRect
  9420                           
  9421                           ;Setup_Time.c: 304: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9422  001966  0101               	movlb	1	; () banked
  9423  001968  5159               	movf	Update_Setup_Screen_Cursor_Backward@yinc& (0+255),w,b
  9424  00196A  0F44               	addlw	68
  9425  00196C  0100               	movlb	0	; () banked
  9426  00196E  6FDF               	movwf	fillRect@y& (0+255),b
  9427  001970  0E19               	movlw	25
  9428  001972  0100               	movlb	0	; () banked
  9429  001974  6FE0               	movwf	fillRect@w& (0+255),b
  9430  001976  0E02               	movlw	2
  9431  001978  0100               	movlb	0	; () banked
  9432  00197A  6FE1               	movwf	fillRect@h& (0+255),b
  9433  00197C  0E07               	movlw	7
  9434  00197E  0100               	movlb	0	; () banked
  9435  001980  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9436  001982  69E2               	setf	fillRect@color& (0+255),b
  9437  001984  0101               	movlb	1	; () banked
  9438  001986  515A               	movf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),w,b
  9439  001988  0F0E               	addlw	14
  9440  00198A  EC25  F021         	call	_fillRect
  9441                           
  9442                           ;Setup_Time.c: 305: break;
  9443  00198E  D03D               	goto	l1025
  9444  001990                     l9411:
  9445                           
  9446                           ;Setup_Time.c: 308: fillRect(15-1, 52+16, 25,2,0x0000);
  9447  001990  0E44               	movlw	68
  9448  001992  0100               	movlb	0	; () banked
  9449  001994  6FDF               	movwf	fillRect@y& (0+255),b
  9450  001996  0E19               	movlw	25
  9451  001998  0100               	movlb	0	; () banked
  9452  00199A  6FE0               	movwf	fillRect@w& (0+255),b
  9453  00199C  0E02               	movlw	2
  9454  00199E  0100               	movlb	0	; () banked
  9455  0019A0  6FE1               	movwf	fillRect@h& (0+255),b
  9456  0019A2  0E00               	movlw	0
  9457  0019A4  0100               	movlb	0	; () banked
  9458  0019A6  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9459  0019A8  0E00               	movlw	0
  9460  0019AA  6FE2               	movwf	fillRect@color& (0+255),b
  9461  0019AC  0E0E               	movlw	14
  9462  0019AE  EC25  F021         	call	_fillRect
  9463                           
  9464                           ;Setup_Time.c: 309: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9465  0019B2  0101               	movlb	1	; () banked
  9466  0019B4  5159               	movf	Update_Setup_Screen_Cursor_Backward@yinc& (0+255),w,b
  9467  0019B6  0F44               	addlw	68
  9468  0019B8  0100               	movlb	0	; () banked
  9469  0019BA  6FDF               	movwf	fillRect@y& (0+255),b
  9470  0019BC  0E19               	movlw	25
  9471  0019BE  0100               	movlb	0	; () banked
  9472  0019C0  6FE0               	movwf	fillRect@w& (0+255),b
  9473  0019C2  0E02               	movlw	2
  9474  0019C4  0100               	movlb	0	; () banked
  9475  0019C6  6FE1               	movwf	fillRect@h& (0+255),b
  9476  0019C8  0E07               	movlw	7
  9477  0019CA  0100               	movlb	0	; () banked
  9478  0019CC  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9479  0019CE  69E2               	setf	fillRect@color& (0+255),b
  9480  0019D0  0101               	movlb	1	; () banked
  9481  0019D2  515A               	movf	Update_Setup_Screen_Cursor_Backward@xinc& (0+255),w,b
  9482  0019D4  0D02               	mullw	2
  9483  0019D6  50F3               	movf	prodl,w,c
  9484  0019D8  0F0E               	addlw	14
  9485  0019DA  EC25  F021         	call	_fillRect
  9486                           
  9487                           ;Setup_Time.c: 311: }
  9488                           
  9489                           ;Setup_Time.c: 310: break;
  9490  0019DE  D015               	goto	l1025
  9491  0019E0                     l9417:
  9492  0019E0  0101               	movlb	1	; () banked
  9493  0019E2  5158               	movf	Update_Setup_Screen_Cursor_Backward@field& (0+255),w,b
  9494                           
  9495                           ; Switch size 1, requested type "space"
  9496                           ; Number of cases is 6, Range of values is 0 to 5
  9497                           ; switch strategies available:
  9498                           ; Name         Instructions Cycles
  9499                           ; simple_byte           19    10 (average)
  9500                           ;	Chosen strategy is simple_byte
  9501  0019E4  0A00               	xorlw	0	; case 0
  9502  0019E6  B4D8               	btfsc	status,2,c
  9503  0019E8  D6FA               	goto	l9395
  9504  0019EA  0A01               	xorlw	1	; case 1
  9505  0019EC  B4D8               	btfsc	status,2,c
  9506  0019EE  D71B               	goto	l9397
  9507  0019F0  0A03               	xorlw	3	; case 2
  9508  0019F2  B4D8               	btfsc	status,2,c
  9509  0019F4  D740               	goto	l9401
  9510  0019F6  0A01               	xorlw	1	; case 3
  9511  0019F8  B4D8               	btfsc	status,2,c
  9512  0019FA  D776               	goto	l9405
  9513  0019FC  0A07               	xorlw	7	; case 4
  9514  0019FE  B4D8               	btfsc	status,2,c
  9515  001A00  D79B               	goto	l9407
  9516  001A02  0A01               	xorlw	1	; case 5
  9517  001A04  B4D8               	btfsc	status,2,c
  9518  001A06  D7C4               	goto	l9411
  9519  001A08  D000               	goto	l1025
  9520  001A0A                     l1025:
  9521  001A0A  0012               	return		;funcret
  9522  001A0C                     __end_of_Update_Setup_Screen_Cursor_Backward:
  9523                           	opt stack 0
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           intcon	equ	0xFF2
  9531                           intcon2	equ	0xFF1
  9532                           postinc0	equ	0xFEE
  9533                           wreg	equ	0xFE8
  9534                           postdec1	equ	0xFE5
  9535                           fsr1l	equ	0xFE1
  9536                           postinc2	equ	0xFDE
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541 ;; *************** function _Go_Next_Alarm_Field *****************
  9542 ;; Defined at:
  9543 ;;		line 117 in file "Setup_Alarm_Time.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;		None
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;		None
  9548 ;; Return value:  Size  Location     Type
  9549 ;;		None               void
  9550 ;; Registers used:
  9551 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;Total ram usage:        0 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:   10
  9564 ;; This function calls:
  9565 ;;		_Update_Setup_Screen_Cursor_Forward
  9566 ;; This function is called by:
  9567 ;;		_Do_Setup_Alarm_Time
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           	psect	text39
  9572  004BFC                     __ptext39:
  9573                           	opt stack 0
  9574  004BFC                     _Go_Next_Alarm_Field:
  9575                           	opt stack 19
  9576                           
  9577                           ;Setup_Alarm_Time.c: 120: Select_Alarm_Field++;
  9578                           
  9579                           ;incstack = 0
  9580  004BFC  2A4C               	incf	_Select_Alarm_Field,f,c
  9581                           
  9582                           ;Setup_Alarm_Time.c: 121: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  9583  004BFE  0E03               	movlw	3
  9584  004C00  184C               	xorwf	_Select_Alarm_Field,w,c
  9585  004C02  A4D8               	btfss	status,2,c
  9586  004C04  D003               	goto	l9655
  9587  004C06  0E00               	movlw	0
  9588  004C08  6E4C               	movwf	_Select_Alarm_Field,c
  9589  004C0A  D000               	goto	l9655
  9590  004C0C                     l9655:
  9591                           
  9592                           ;Setup_Alarm_Time.c: 122: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  9593  004C0C  504C               	movf	_Select_Alarm_Field,w,c
  9594  004C0E  ECC2  F00A         	call	_Update_Setup_Screen_Cursor_Forward
  9595  004C12  0012               	return		;funcret
  9596  004C14                     __end_of_Go_Next_Alarm_Field:
  9597                           	opt stack 0
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           intcon	equ	0xFF2
  9605                           intcon2	equ	0xFF1
  9606                           postinc0	equ	0xFEE
  9607                           wreg	equ	0xFE8
  9608                           postdec1	equ	0xFE5
  9609                           fsr1l	equ	0xFE1
  9610                           postinc2	equ	0xFDE
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  9616 ;; Defined at:
  9617 ;;		line 236 in file "Setup_Time.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  field           1    wreg     unsigned char 
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;  field           1    0[BANK1 ] unsigned char 
  9622 ;;  xinc            1    2[BANK1 ] unsigned char 
  9623 ;;  yinc            1    1[BANK1 ] unsigned char 
  9624 ;; Return value:  Size  Location     Type
  9625 ;;		None               void
  9626 ;; Registers used:
  9627 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9628 ;; Tracked objects:
  9629 ;;		On entry : 0/0
  9630 ;;		On exit  : 0/0
  9631 ;;		Unchanged: 0/0
  9632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9637 ;;Total ram usage:        3 bytes
  9638 ;; Hardware stack levels used:    1
  9639 ;; Hardware stack levels required when called:    9
  9640 ;; This function calls:
  9641 ;;		_fillRect
  9642 ;; This function is called by:
  9643 ;;		_Go_Next_Alarm_Field
  9644 ;;		_Go_Next_Field
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           	psect	text40
  9649  001584                     __ptext40:
  9650                           	opt stack 0
  9651  001584                     _Update_Setup_Screen_Cursor_Forward:
  9652                           	opt stack 19
  9653                           
  9654                           ;incstack = 0
  9655                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9656  001584  0101               	movlb	1	; () banked
  9657  001586  6F58               	movwf	Update_Setup_Screen_Cursor_Forward@field& (0+255),b
  9658                           
  9659                           ; BSR set to: 1
  9660                           ;Setup_Time.c: 238: char xinc = 36;
  9661  001588  0E24               	movlw	36
  9662  00158A  0101               	movlb	1	; () banked
  9663  00158C  6F5A               	movwf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),b
  9664                           
  9665                           ;Setup_Time.c: 239: char yinc = 30;
  9666  00158E  0E1E               	movlw	30
  9667  001590  0101               	movlb	1	; () banked
  9668  001592  6F59               	movwf	Update_Setup_Screen_Cursor_Forward@yinc& (0+255),b
  9669                           
  9670                           ;Setup_Time.c: 240: switch (field)
  9671  001594  D105               	goto	l9391
  9672  001596                     l9369:
  9673                           
  9674                           ; BSR set to: 1
  9675                           ;Setup_Time.c: 243: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9676  001596  0101               	movlb	1	; () banked
  9677  001598  5159               	movf	Update_Setup_Screen_Cursor_Forward@yinc& (0+255),w,b
  9678  00159A  0F44               	addlw	68
  9679  00159C  0100               	movlb	0	; () banked
  9680  00159E  6FDF               	movwf	fillRect@y& (0+255),b
  9681  0015A0  0E19               	movlw	25
  9682  0015A2  0100               	movlb	0	; () banked
  9683  0015A4  6FE0               	movwf	fillRect@w& (0+255),b
  9684  0015A6  0E02               	movlw	2
  9685  0015A8  0100               	movlb	0	; () banked
  9686  0015AA  6FE1               	movwf	fillRect@h& (0+255),b
  9687  0015AC  0E00               	movlw	0
  9688  0015AE  0100               	movlb	0	; () banked
  9689  0015B0  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9690  0015B2  0E00               	movlw	0
  9691  0015B4  6FE2               	movwf	fillRect@color& (0+255),b
  9692  0015B6  0101               	movlb	1	; () banked
  9693  0015B8  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9694  0015BA  0D02               	mullw	2
  9695  0015BC  50F3               	movf	prodl,w,c
  9696  0015BE  0F0E               	addlw	14
  9697  0015C0  EC25  F021         	call	_fillRect
  9698                           
  9699                           ;Setup_Time.c: 244: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9700  0015C4  0E44               	movlw	68
  9701  0015C6  0100               	movlb	0	; () banked
  9702  0015C8  6FDF               	movwf	fillRect@y& (0+255),b
  9703  0015CA  0E19               	movlw	25
  9704  0015CC  0100               	movlb	0	; () banked
  9705  0015CE  6FE0               	movwf	fillRect@w& (0+255),b
  9706  0015D0  0E02               	movlw	2
  9707  0015D2  0100               	movlb	0	; () banked
  9708  0015D4  6FE1               	movwf	fillRect@h& (0+255),b
  9709  0015D6  0E00               	movlw	0
  9710  0015D8  0100               	movlb	0	; () banked
  9711  0015DA  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9712  0015DC  0E00               	movlw	0
  9713  0015DE  6FE2               	movwf	fillRect@color& (0+255),b
  9714  0015E0  0101               	movlb	1	; () banked
  9715  0015E2  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9716  0015E4  0D02               	mullw	2
  9717  0015E6  50F3               	movf	prodl,w,c
  9718  0015E8  0F0E               	addlw	14
  9719  0015EA  EC25  F021         	call	_fillRect
  9720                           
  9721                           ;Setup_Time.c: 245: fillRect(15-1, 52+16, 25,2,0x07FF);
  9722  0015EE  0E44               	movlw	68
  9723  0015F0  0100               	movlb	0	; () banked
  9724  0015F2  6FDF               	movwf	fillRect@y& (0+255),b
  9725  0015F4  0E19               	movlw	25
  9726  0015F6  0100               	movlb	0	; () banked
  9727  0015F8  6FE0               	movwf	fillRect@w& (0+255),b
  9728  0015FA  0E02               	movlw	2
  9729  0015FC  0100               	movlb	0	; () banked
  9730  0015FE  6FE1               	movwf	fillRect@h& (0+255),b
  9731  001600  0E07               	movlw	7
  9732  001602  0100               	movlb	0	; () banked
  9733  001604  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9734  001606  69E2               	setf	fillRect@color& (0+255),b
  9735  001608  0E0E               	movlw	14
  9736  00160A  EC25  F021         	call	_fillRect
  9737                           
  9738                           ;Setup_Time.c: 246: break;
  9739  00160E  D0DD               	goto	l1014
  9740  001610                     l9373:
  9741                           
  9742                           ;Setup_Time.c: 249: fillRect(15-1, 52+16, 25,2,0x0000);
  9743  001610  0E44               	movlw	68
  9744  001612  0100               	movlb	0	; () banked
  9745  001614  6FDF               	movwf	fillRect@y& (0+255),b
  9746  001616  0E19               	movlw	25
  9747  001618  0100               	movlb	0	; () banked
  9748  00161A  6FE0               	movwf	fillRect@w& (0+255),b
  9749  00161C  0E02               	movlw	2
  9750  00161E  0100               	movlb	0	; () banked
  9751  001620  6FE1               	movwf	fillRect@h& (0+255),b
  9752  001622  0E00               	movlw	0
  9753  001624  0100               	movlb	0	; () banked
  9754  001626  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9755  001628  0E00               	movlw	0
  9756  00162A  6FE2               	movwf	fillRect@color& (0+255),b
  9757  00162C  0E0E               	movlw	14
  9758  00162E  EC25  F021         	call	_fillRect
  9759                           
  9760                           ;Setup_Time.c: 250: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9761  001632  0E44               	movlw	68
  9762  001634  0100               	movlb	0	; () banked
  9763  001636  6FDF               	movwf	fillRect@y& (0+255),b
  9764  001638  0E19               	movlw	25
  9765  00163A  0100               	movlb	0	; () banked
  9766  00163C  6FE0               	movwf	fillRect@w& (0+255),b
  9767  00163E  0E02               	movlw	2
  9768  001640  0100               	movlb	0	; () banked
  9769  001642  6FE1               	movwf	fillRect@h& (0+255),b
  9770  001644  0E07               	movlw	7
  9771  001646  0100               	movlb	0	; () banked
  9772  001648  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9773  00164A  69E2               	setf	fillRect@color& (0+255),b
  9774  00164C  0101               	movlb	1	; () banked
  9775  00164E  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9776  001650  0F0E               	addlw	14
  9777  001652  EC25  F021         	call	_fillRect
  9778                           
  9779                           ;Setup_Time.c: 251: break;
  9780  001656  D0B9               	goto	l1014
  9781  001658                     l9375:
  9782                           
  9783                           ;Setup_Time.c: 254: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9784  001658  0E44               	movlw	68
  9785  00165A  0100               	movlb	0	; () banked
  9786  00165C  6FDF               	movwf	fillRect@y& (0+255),b
  9787  00165E  0E19               	movlw	25
  9788  001660  0100               	movlb	0	; () banked
  9789  001662  6FE0               	movwf	fillRect@w& (0+255),b
  9790  001664  0E02               	movlw	2
  9791  001666  0100               	movlb	0	; () banked
  9792  001668  6FE1               	movwf	fillRect@h& (0+255),b
  9793  00166A  0E00               	movlw	0
  9794  00166C  0100               	movlb	0	; () banked
  9795  00166E  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9796  001670  0E00               	movlw	0
  9797  001672  6FE2               	movwf	fillRect@color& (0+255),b
  9798  001674  0101               	movlb	1	; () banked
  9799  001676  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9800  001678  0F0E               	addlw	14
  9801  00167A  EC25  F021         	call	_fillRect
  9802                           
  9803                           ;Setup_Time.c: 255: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9804  00167E  0E44               	movlw	68
  9805  001680  0100               	movlb	0	; () banked
  9806  001682  6FDF               	movwf	fillRect@y& (0+255),b
  9807  001684  0E19               	movlw	25
  9808  001686  0100               	movlb	0	; () banked
  9809  001688  6FE0               	movwf	fillRect@w& (0+255),b
  9810  00168A  0E02               	movlw	2
  9811  00168C  0100               	movlb	0	; () banked
  9812  00168E  6FE1               	movwf	fillRect@h& (0+255),b
  9813  001690  0E07               	movlw	7
  9814  001692  0100               	movlb	0	; () banked
  9815  001694  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9816  001696  69E2               	setf	fillRect@color& (0+255),b
  9817  001698  0101               	movlb	1	; () banked
  9818  00169A  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9819  00169C  0D02               	mullw	2
  9820  00169E  50F3               	movf	prodl,w,c
  9821  0016A0  0F0E               	addlw	14
  9822  0016A2  EC25  F021         	call	_fillRect
  9823                           
  9824                           ;Setup_Time.c: 256: break;
  9825  0016A6  D091               	goto	l1014
  9826  0016A8                     l9379:
  9827                           
  9828                           ;Setup_Time.c: 259: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9829  0016A8  0E44               	movlw	68
  9830  0016AA  0100               	movlb	0	; () banked
  9831  0016AC  6FDF               	movwf	fillRect@y& (0+255),b
  9832  0016AE  0E19               	movlw	25
  9833  0016B0  0100               	movlb	0	; () banked
  9834  0016B2  6FE0               	movwf	fillRect@w& (0+255),b
  9835  0016B4  0E02               	movlw	2
  9836  0016B6  0100               	movlb	0	; () banked
  9837  0016B8  6FE1               	movwf	fillRect@h& (0+255),b
  9838  0016BA  0E00               	movlw	0
  9839  0016BC  0100               	movlb	0	; () banked
  9840  0016BE  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9841  0016C0  0E00               	movlw	0
  9842  0016C2  6FE2               	movwf	fillRect@color& (0+255),b
  9843  0016C4  0101               	movlb	1	; () banked
  9844  0016C6  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9845  0016C8  0D02               	mullw	2
  9846  0016CA  50F3               	movf	prodl,w,c
  9847  0016CC  0F0E               	addlw	14
  9848  0016CE  EC25  F021         	call	_fillRect
  9849                           
  9850                           ;Setup_Time.c: 260: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9851  0016D2  0101               	movlb	1	; () banked
  9852  0016D4  5159               	movf	Update_Setup_Screen_Cursor_Forward@yinc& (0+255),w,b
  9853  0016D6  0F44               	addlw	68
  9854  0016D8  0100               	movlb	0	; () banked
  9855  0016DA  6FDF               	movwf	fillRect@y& (0+255),b
  9856  0016DC  0E19               	movlw	25
  9857  0016DE  0100               	movlb	0	; () banked
  9858  0016E0  6FE0               	movwf	fillRect@w& (0+255),b
  9859  0016E2  0E02               	movlw	2
  9860  0016E4  0100               	movlb	0	; () banked
  9861  0016E6  6FE1               	movwf	fillRect@h& (0+255),b
  9862  0016E8  0E07               	movlw	7
  9863  0016EA  0100               	movlb	0	; () banked
  9864  0016EC  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9865  0016EE  69E2               	setf	fillRect@color& (0+255),b
  9866  0016F0  0E0E               	movlw	14
  9867  0016F2  EC25  F021         	call	_fillRect
  9868                           
  9869                           ;Setup_Time.c: 261: break;
  9870  0016F6  D069               	goto	l1014
  9871  0016F8                     l9383:
  9872                           
  9873                           ;Setup_Time.c: 264: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9874  0016F8  0101               	movlb	1	; () banked
  9875  0016FA  5159               	movf	Update_Setup_Screen_Cursor_Forward@yinc& (0+255),w,b
  9876  0016FC  0F44               	addlw	68
  9877  0016FE  0100               	movlb	0	; () banked
  9878  001700  6FDF               	movwf	fillRect@y& (0+255),b
  9879  001702  0E19               	movlw	25
  9880  001704  0100               	movlb	0	; () banked
  9881  001706  6FE0               	movwf	fillRect@w& (0+255),b
  9882  001708  0E02               	movlw	2
  9883  00170A  0100               	movlb	0	; () banked
  9884  00170C  6FE1               	movwf	fillRect@h& (0+255),b
  9885  00170E  0E00               	movlw	0
  9886  001710  0100               	movlb	0	; () banked
  9887  001712  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9888  001714  0E00               	movlw	0
  9889  001716  6FE2               	movwf	fillRect@color& (0+255),b
  9890  001718  0E0E               	movlw	14
  9891  00171A  EC25  F021         	call	_fillRect
  9892                           
  9893                           ;Setup_Time.c: 265: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9894  00171E  0101               	movlb	1	; () banked
  9895  001720  5159               	movf	Update_Setup_Screen_Cursor_Forward@yinc& (0+255),w,b
  9896  001722  0F44               	addlw	68
  9897  001724  0100               	movlb	0	; () banked
  9898  001726  6FDF               	movwf	fillRect@y& (0+255),b
  9899  001728  0E19               	movlw	25
  9900  00172A  0100               	movlb	0	; () banked
  9901  00172C  6FE0               	movwf	fillRect@w& (0+255),b
  9902  00172E  0E02               	movlw	2
  9903  001730  0100               	movlb	0	; () banked
  9904  001732  6FE1               	movwf	fillRect@h& (0+255),b
  9905  001734  0E07               	movlw	7
  9906  001736  0100               	movlb	0	; () banked
  9907  001738  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9908  00173A  69E2               	setf	fillRect@color& (0+255),b
  9909  00173C  0101               	movlb	1	; () banked
  9910  00173E  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9911  001740  0F0E               	addlw	14
  9912  001742  EC25  F021         	call	_fillRect
  9913                           
  9914                           ;Setup_Time.c: 266: break;
  9915  001746  D041               	goto	l1014
  9916  001748                     l9385:
  9917                           
  9918                           ;Setup_Time.c: 269: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9919  001748  0101               	movlb	1	; () banked
  9920  00174A  5159               	movf	Update_Setup_Screen_Cursor_Forward@yinc& (0+255),w,b
  9921  00174C  0F44               	addlw	68
  9922  00174E  0100               	movlb	0	; () banked
  9923  001750  6FDF               	movwf	fillRect@y& (0+255),b
  9924  001752  0E19               	movlw	25
  9925  001754  0100               	movlb	0	; () banked
  9926  001756  6FE0               	movwf	fillRect@w& (0+255),b
  9927  001758  0E02               	movlw	2
  9928  00175A  0100               	movlb	0	; () banked
  9929  00175C  6FE1               	movwf	fillRect@h& (0+255),b
  9930  00175E  0E00               	movlw	0
  9931  001760  0100               	movlb	0	; () banked
  9932  001762  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9933  001764  0E00               	movlw	0
  9934  001766  6FE2               	movwf	fillRect@color& (0+255),b
  9935  001768  0101               	movlb	1	; () banked
  9936  00176A  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9937  00176C  0F0E               	addlw	14
  9938  00176E  EC25  F021         	call	_fillRect
  9939                           
  9940                           ;Setup_Time.c: 270: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9941  001772  0101               	movlb	1	; () banked
  9942  001774  5159               	movf	Update_Setup_Screen_Cursor_Forward@yinc& (0+255),w,b
  9943  001776  0F44               	addlw	68
  9944  001778  0100               	movlb	0	; () banked
  9945  00177A  6FDF               	movwf	fillRect@y& (0+255),b
  9946  00177C  0E19               	movlw	25
  9947  00177E  0100               	movlb	0	; () banked
  9948  001780  6FE0               	movwf	fillRect@w& (0+255),b
  9949  001782  0E02               	movlw	2
  9950  001784  0100               	movlb	0	; () banked
  9951  001786  6FE1               	movwf	fillRect@h& (0+255),b
  9952  001788  0E07               	movlw	7
  9953  00178A  0100               	movlb	0	; () banked
  9954  00178C  6FE3               	movwf	(fillRect@color+1)& (0+255),b
  9955  00178E  69E2               	setf	fillRect@color& (0+255),b
  9956  001790  0101               	movlb	1	; () banked
  9957  001792  515A               	movf	Update_Setup_Screen_Cursor_Forward@xinc& (0+255),w,b
  9958  001794  0D02               	mullw	2
  9959  001796  50F3               	movf	prodl,w,c
  9960  001798  0F0E               	addlw	14
  9961  00179A  EC25  F021         	call	_fillRect
  9962                           
  9963                           ;Setup_Time.c: 272: }
  9964                           
  9965                           ;Setup_Time.c: 271: break;
  9966  00179E  D015               	goto	l1014
  9967  0017A0                     l9391:
  9968  0017A0  0101               	movlb	1	; () banked
  9969  0017A2  5158               	movf	Update_Setup_Screen_Cursor_Forward@field& (0+255),w,b
  9970                           
  9971                           ; Switch size 1, requested type "space"
  9972                           ; Number of cases is 6, Range of values is 0 to 5
  9973                           ; switch strategies available:
  9974                           ; Name         Instructions Cycles
  9975                           ; simple_byte           19    10 (average)
  9976                           ;	Chosen strategy is simple_byte
  9977  0017A4  0A00               	xorlw	0	; case 0
  9978  0017A6  B4D8               	btfsc	status,2,c
  9979  0017A8  D6F6               	goto	l9369
  9980  0017AA  0A01               	xorlw	1	; case 1
  9981  0017AC  B4D8               	btfsc	status,2,c
  9982  0017AE  D730               	goto	l9373
  9983  0017B0  0A03               	xorlw	3	; case 2
  9984  0017B2  B4D8               	btfsc	status,2,c
  9985  0017B4  D751               	goto	l9375
  9986  0017B6  0A01               	xorlw	1	; case 3
  9987  0017B8  B4D8               	btfsc	status,2,c
  9988  0017BA  D776               	goto	l9379
  9989  0017BC  0A07               	xorlw	7	; case 4
  9990  0017BE  B4D8               	btfsc	status,2,c
  9991  0017C0  D79B               	goto	l9383
  9992  0017C2  0A01               	xorlw	1	; case 5
  9993  0017C4  B4D8               	btfsc	status,2,c
  9994  0017C6  D7C0               	goto	l9385
  9995  0017C8  D000               	goto	l1014
  9996  0017CA                     l1014:
  9997  0017CA  0012               	return		;funcret
  9998  0017CC                     __end_of_Update_Setup_Screen_Cursor_Forward:
  9999                           	opt stack 0
 10000                           tblptru	equ	0xFF8
 10001                           tblptrh	equ	0xFF7
 10002                           tblptrl	equ	0xFF6
 10003                           tablat	equ	0xFF5
 10004                           prodh	equ	0xFF4
 10005                           prodl	equ	0xFF3
 10006                           intcon	equ	0xFF2
 10007                           intcon2	equ	0xFF1
 10008                           postinc0	equ	0xFEE
 10009                           wreg	equ	0xFE8
 10010                           postdec1	equ	0xFE5
 10011                           fsr1l	equ	0xFE1
 10012                           postinc2	equ	0xFDE
 10013                           fsr2h	equ	0xFDA
 10014                           fsr2l	equ	0xFD9
 10015                           status	equ	0xFD8
 10016                           
 10017 ;; *************** function _Exit_Setup_Alarm_Time *****************
 10018 ;; Defined at:
 10019 ;;		line 133 in file "Setup_Alarm_Time.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;		None
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;		None
 10024 ;; Return value:  Size  Location     Type
 10025 ;;		None               void
 10026 ;; Registers used:
 10027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;Total ram usage:        0 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:   12
 10040 ;; This function calls:
 10041 ;;		_DS3231_Read_Time
 10042 ;;		_Initialize_Screen
 10043 ;; This function is called by:
 10044 ;;		_Do_Setup_Alarm_Time
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           	psect	text41
 10049  004DA6                     __ptext41:
 10050                           	opt stack 0
 10051  004DA6                     _Exit_Setup_Alarm_Time:
 10052                           	opt stack 17
 10053                           
 10054                           ;Setup_Alarm_Time.c: 135: DS3231_Read_Time();
 10055                           
 10056                           ;incstack = 0
 10057  004DA6  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
 10058                           
 10059                           ;Setup_Alarm_Time.c: 136: Initialize_Screen();
 10060  004DAA  ECCE  F003         	call	_Initialize_Screen	;wreg free
 10061                           
 10062                           ;Setup_Alarm_Time.c: 137: In_Alarm_Time_Setup = 0;
 10063  004DAE  0E00               	movlw	0
 10064  004DB0  6E47               	movwf	_In_Alarm_Time_Setup,c
 10065  004DB2  0012               	return		;funcret
 10066  004DB4                     __end_of_Exit_Setup_Alarm_Time:
 10067                           	opt stack 0
 10068                           tblptru	equ	0xFF8
 10069                           tblptrh	equ	0xFF7
 10070                           tblptrl	equ	0xFF6
 10071                           tablat	equ	0xFF5
 10072                           prodh	equ	0xFF4
 10073                           prodl	equ	0xFF3
 10074                           intcon	equ	0xFF2
 10075                           intcon2	equ	0xFF1
 10076                           postinc0	equ	0xFEE
 10077                           wreg	equ	0xFE8
 10078                           postdec1	equ	0xFE5
 10079                           fsr1l	equ	0xFE1
 10080                           postinc2	equ	0xFDE
 10081                           fsr2h	equ	0xFDA
 10082                           fsr2l	equ	0xFD9
 10083                           status	equ	0xFD8
 10084                           
 10085 ;; *************** function _Do_Save_New_Alarm_Time *****************
 10086 ;; Defined at:
 10087 ;;		line 140 in file "Setup_Alarm_Time.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;		None
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;		None
 10092 ;; Return value:  Size  Location     Type
 10093 ;;		None               void
 10094 ;; Registers used:
 10095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;Total ram usage:        0 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:   12
 10108 ;; This function calls:
 10109 ;;		_DS3231_Read_Alarm_Time
 10110 ;;		_DS3231_Read_Time
 10111 ;;		_DS3231_Write_Alarm_Time
 10112 ;;		_Initialize_Screen
 10113 ;; This function is called by:
 10114 ;;		_Do_Setup_Alarm_Time
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           	psect	text42
 10119  004C44                     __ptext42:
 10120                           	opt stack 0
 10121  004C44                     _Do_Save_New_Alarm_Time:
 10122                           	opt stack 17
 10123                           
 10124                           ;Setup_Alarm_Time.c: 142: DS3231_Write_Alarm_Time();
 10125                           
 10126                           ;incstack = 0
 10127  004C44  EC9A  F01E         	call	_DS3231_Write_Alarm_Time	;wreg free
 10128                           
 10129                           ;Setup_Alarm_Time.c: 143: DS3231_Read_Alarm_Time();
 10130  004C48  EC97  F022         	call	_DS3231_Read_Alarm_Time	;wreg free
 10131                           
 10132                           ;Setup_Alarm_Time.c: 144: DS3231_Read_Time();
 10133  004C4C  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
 10134                           
 10135                           ;Setup_Alarm_Time.c: 145: Initialize_Screen();
 10136  004C50  ECCE  F003         	call	_Initialize_Screen	;wreg free
 10137                           
 10138                           ;Setup_Alarm_Time.c: 146: In_Alarm_Time_Setup = 0;
 10139  004C54  0E00               	movlw	0
 10140  004C56  6E47               	movwf	_In_Alarm_Time_Setup,c
 10141  004C58  0012               	return		;funcret
 10142  004C5A                     __end_of_Do_Save_New_Alarm_Time:
 10143                           	opt stack 0
 10144                           tblptru	equ	0xFF8
 10145                           tblptrh	equ	0xFF7
 10146                           tblptrl	equ	0xFF6
 10147                           tablat	equ	0xFF5
 10148                           prodh	equ	0xFF4
 10149                           prodl	equ	0xFF3
 10150                           intcon	equ	0xFF2
 10151                           intcon2	equ	0xFF1
 10152                           postinc0	equ	0xFEE
 10153                           wreg	equ	0xFE8
 10154                           postdec1	equ	0xFE5
 10155                           fsr1l	equ	0xFE1
 10156                           postinc2	equ	0xFDE
 10157                           fsr2h	equ	0xFDA
 10158                           fsr2l	equ	0xFD9
 10159                           status	equ	0xFD8
 10160                           
 10161 ;; *************** function _Initialize_Screen *****************
 10162 ;; Defined at:
 10163 ;;		line 36 in file "Main_Screen.c"
 10164 ;; Parameters:    Size  Location     Type
 10165 ;;		None
 10166 ;; Auto vars:     Size  Location     Type
 10167 ;;		None
 10168 ;; Return value:  Size  Location     Type
 10169 ;;                  2  342[None  ] int 
 10170 ;; Registers used:
 10171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10172 ;; Tracked objects:
 10173 ;;		On entry : 0/0
 10174 ;;		On exit  : 0/0
 10175 ;;		Unchanged: 0/0
 10176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10181 ;;Total ram usage:        0 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; Hardware stack levels required when called:   11
 10184 ;; This function calls:
 10185 ;;		_LCD_Reset
 10186 ;;		_TFT_GreenTab_Initialize
 10187 ;;		_drawCircle
 10188 ;;		_drawtext
 10189 ;;		_fillScreen
 10190 ;;		_strcpy
 10191 ;; This function is called by:
 10192 ;;		_main
 10193 ;;		_Exit_Setup_Alarm_Time
 10194 ;;		_Do_Save_New_Alarm_Time
 10195 ;;		_Exit_Setup_Heater_Temp
 10196 ;;		_Do_Save_New_Heater_Temp
 10197 ;;		_Do_Save_New_Time
 10198 ;;		_Exit_Time_Setup
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           	psect	text43
 10203  00079C                     __ptext43:
 10204                           	opt stack 0
 10205  00079C                     _Initialize_Screen:
 10206                           	opt stack 19
 10207                           
 10208                           ;Main_Screen.c: 38: LCD_Reset();
 10209                           
 10210                           ;incstack = 0
 10211  00079C  EC4E  F026         	call	_LCD_Reset	;wreg free
 10212                           
 10213                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
 10214  0007A0  ECDB  F024         	call	_TFT_GreenTab_Initialize	;wreg free
 10215                           
 10216                           ;Main_Screen.c: 40: fillScreen(0x0000);
 10217  0007A4  0E00               	movlw	0
 10218  0007A6  0100               	movlb	0	; () banked
 10219  0007A8  6FE1               	movwf	(fillScreen@color+1)& (0+255),b
 10220  0007AA  0E00               	movlw	0
 10221  0007AC  6FE0               	movwf	fillScreen@color& (0+255),b
 10222  0007AE  EC67  F025         	call	_fillScreen	;wreg free
 10223                           
 10224                           ;Main_Screen.c: 42: strcpy(txt, " ECE3301L F'21 Final\0");
 10225  0007B2  C042  F0CD         	movff	_txt,strcpy@to
 10226  0007B6  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10227  0007BA  0ED5               	movlw	low STR_6
 10228  0007BC  0100               	movlb	0	; () banked
 10229  0007BE  6FCF               	movwf	strcpy@from& (0+255),b
 10230  0007C0  0EFE               	movlw	high STR_6
 10231  0007C2  0100               	movlb	0	; () banked
 10232  0007C4  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10233  0007C6  EC61  F024         	call	_strcpy	;wreg free
 10234                           
 10235                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10236  0007CA  0E01               	movlw	1
 10237  0007CC  0101               	movlb	1	; () banked
 10238  0007CE  6F63               	movwf	drawtext@y& (0+255),b
 10239  0007D0  C042  F164         	movff	_txt,drawtext@_text
 10240  0007D4  C043  F165         	movff	_txt+1,drawtext@_text+1
 10241  0007D8  0EFF               	movlw	255
 10242  0007DA  0101               	movlb	1	; () banked
 10243  0007DC  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10244  0007DE  6966               	setf	drawtext@color& (0+255),b
 10245  0007E0  0E00               	movlw	0
 10246  0007E2  0101               	movlb	1	; () banked
 10247  0007E4  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10248  0007E6  0E00               	movlw	0
 10249  0007E8  6F68               	movwf	drawtext@bg& (0+255),b
 10250  0007EA  0E01               	movlw	1
 10251  0007EC  0101               	movlb	1	; () banked
 10252  0007EE  6F6A               	movwf	drawtext@size& (0+255),b
 10253  0007F0  0E01               	movlw	1
 10254  0007F2  EC18  F015         	call	_drawtext
 10255                           
 10256                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
 10257  0007F6  C042  F0CD         	movff	_txt,strcpy@to
 10258  0007FA  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10259  0007FE  0E6E               	movlw	low STR_7
 10260  000800  0100               	movlb	0	; () banked
 10261  000802  6FCF               	movwf	strcpy@from& (0+255),b
 10262  000804  0EFF               	movlw	high STR_7
 10263  000806  0100               	movlb	0	; () banked
 10264  000808  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10265  00080A  EC61  F024         	call	_strcpy	;wreg free
 10266                           
 10267                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 10268  00080E  0E0B               	movlw	11
 10269  000810  0101               	movlb	1	; () banked
 10270  000812  6F63               	movwf	drawtext@y& (0+255),b
 10271  000814  C042  F164         	movff	_txt,drawtext@_text
 10272  000818  C043  F165         	movff	_txt+1,drawtext@_text+1
 10273  00081C  0EF8               	movlw	248
 10274  00081E  0101               	movlb	1	; () banked
 10275  000820  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10276  000822  0E1F               	movlw	31
 10277  000824  6F66               	movwf	drawtext@color& (0+255),b
 10278  000826  0E00               	movlw	0
 10279  000828  0101               	movlb	1	; () banked
 10280  00082A  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10281  00082C  0E00               	movlw	0
 10282  00082E  6F68               	movwf	drawtext@bg& (0+255),b
 10283  000830  0E01               	movlw	1
 10284  000832  0101               	movlb	1	; () banked
 10285  000834  6F6A               	movwf	drawtext@size& (0+255),b
 10286  000836  0E18               	movlw	24
 10287  000838  EC18  F015         	call	_drawtext
 10288                           
 10289                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
 10290  00083C  0E00               	movlw	0
 10291  00083E  0100               	movlb	0	; () banked
 10292  000840  6FD9               	movwf	(drawCircle@x0+1)& (0+255),b
 10293  000842  0E28               	movlw	40
 10294  000844  6FD8               	movwf	drawCircle@x0& (0+255),b
 10295  000846  0E00               	movlw	0
 10296  000848  0100               	movlb	0	; () banked
 10297  00084A  6FDB               	movwf	(drawCircle@y0+1)& (0+255),b
 10298  00084C  0E17               	movlw	23
 10299  00084E  6FDA               	movwf	drawCircle@y0& (0+255),b
 10300  000850  0E00               	movlw	0
 10301  000852  0100               	movlb	0	; () banked
 10302  000854  6FDD               	movwf	(drawCircle@r+1)& (0+255),b
 10303  000856  0E02               	movlw	2
 10304  000858  6FDC               	movwf	drawCircle@r& (0+255),b
 10305  00085A  0EFF               	movlw	255
 10306  00085C  0100               	movlb	0	; () banked
 10307  00085E  6FDF               	movwf	(drawCircle@color+1)& (0+255),b
 10308  000860  0EE0               	movlw	224
 10309  000862  6FDE               	movwf	drawCircle@color& (0+255),b
 10310  000864  EC9B  F009         	call	_drawCircle	;wreg free
 10311                           
 10312                           ;Main_Screen.c: 48: strcpy(txt, "C/");
 10313  000868  C042  F0CD         	movff	_txt,strcpy@to
 10314  00086C  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10315  000870  0EF5               	movlw	low STR_8
 10316  000872  0100               	movlb	0	; () banked
 10317  000874  6FCF               	movwf	strcpy@from& (0+255),b
 10318  000876  0EFF               	movlw	high STR_8
 10319  000878  0100               	movlb	0	; () banked
 10320  00087A  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10321  00087C  EC61  F024         	call	_strcpy	;wreg free
 10322                           
 10323                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
 10324  000880  0E17               	movlw	23
 10325  000882  0101               	movlb	1	; () banked
 10326  000884  6F63               	movwf	drawtext@y& (0+255),b
 10327  000886  C042  F164         	movff	_txt,drawtext@_text
 10328  00088A  C043  F165         	movff	_txt+1,drawtext@_text+1
 10329  00088E  0EFF               	movlw	255
 10330  000890  0101               	movlb	1	; () banked
 10331  000892  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10332  000894  0EE0               	movlw	224
 10333  000896  6F66               	movwf	drawtext@color& (0+255),b
 10334  000898  0E00               	movlw	0
 10335  00089A  0101               	movlb	1	; () banked
 10336  00089C  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10337  00089E  0E00               	movlw	0
 10338  0008A0  6F68               	movwf	drawtext@bg& (0+255),b
 10339  0008A2  0E02               	movlw	2
 10340  0008A4  0101               	movlb	1	; () banked
 10341  0008A6  6F6A               	movwf	drawtext@size& (0+255),b
 10342  0008A8  0E2D               	movlw	45
 10343  0008AA  EC18  F015         	call	_drawtext
 10344                           
 10345                           ;Main_Screen.c: 50: strcpy(txt, "F");
 10346  0008AE  C042  F0CD         	movff	_txt,strcpy@to
 10347  0008B2  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10348  0008B6  0EEF               	movlw	low (STR_21+2)
 10349  0008B8  0100               	movlb	0	; () banked
 10350  0008BA  6FCF               	movwf	strcpy@from& (0+255),b
 10351  0008BC  0EFF               	movlw	high (STR_21+2)
 10352  0008BE  0100               	movlb	0	; () banked
 10353  0008C0  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10354  0008C2  EC61  F024         	call	_strcpy	;wreg free
 10355                           
 10356                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
 10357  0008C6  0E00               	movlw	0
 10358  0008C8  0100               	movlb	0	; () banked
 10359  0008CA  6FD9               	movwf	(drawCircle@x0+1)& (0+255),b
 10360  0008CC  0E6E               	movlw	110
 10361  0008CE  6FD8               	movwf	drawCircle@x0& (0+255),b
 10362  0008D0  0E00               	movlw	0
 10363  0008D2  0100               	movlb	0	; () banked
 10364  0008D4  6FDB               	movwf	(drawCircle@y0+1)& (0+255),b
 10365  0008D6  0E17               	movlw	23
 10366  0008D8  6FDA               	movwf	drawCircle@y0& (0+255),b
 10367  0008DA  0E00               	movlw	0
 10368  0008DC  0100               	movlb	0	; () banked
 10369  0008DE  6FDD               	movwf	(drawCircle@r+1)& (0+255),b
 10370  0008E0  0E02               	movlw	2
 10371  0008E2  6FDC               	movwf	drawCircle@r& (0+255),b
 10372  0008E4  0EFF               	movlw	255
 10373  0008E6  0100               	movlb	0	; () banked
 10374  0008E8  6FDF               	movwf	(drawCircle@color+1)& (0+255),b
 10375  0008EA  0EE0               	movlw	224
 10376  0008EC  6FDE               	movwf	drawCircle@color& (0+255),b
 10377  0008EE  EC9B  F009         	call	_drawCircle	;wreg free
 10378                           
 10379                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
 10380  0008F2  0E17               	movlw	23
 10381  0008F4  0101               	movlb	1	; () banked
 10382  0008F6  6F63               	movwf	drawtext@y& (0+255),b
 10383  0008F8  C042  F164         	movff	_txt,drawtext@_text
 10384  0008FC  C043  F165         	movff	_txt+1,drawtext@_text+1
 10385  000900  0EFF               	movlw	255
 10386  000902  0101               	movlb	1	; () banked
 10387  000904  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10388  000906  0EE0               	movlw	224
 10389  000908  6F66               	movwf	drawtext@color& (0+255),b
 10390  00090A  0E00               	movlw	0
 10391  00090C  0101               	movlb	1	; () banked
 10392  00090E  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10393  000910  0E00               	movlw	0
 10394  000912  6F68               	movwf	drawtext@bg& (0+255),b
 10395  000914  0E02               	movlw	2
 10396  000916  0101               	movlb	1	; () banked
 10397  000918  6F6A               	movwf	drawtext@size& (0+255),b
 10398  00091A  0E73               	movlw	115
 10399  00091C  EC18  F015         	call	_drawtext
 10400                           
 10401                           ;Main_Screen.c: 53: strcpy(txt, "Time");
 10402  000920  C042  F0CD         	movff	_txt,strcpy@to
 10403  000924  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10404  000928  0EB0               	movlw	low (STR_12+6)
 10405  00092A  0100               	movlb	0	; () banked
 10406  00092C  6FCF               	movwf	strcpy@from& (0+255),b
 10407  00092E  0EFF               	movlw	high (STR_12+6)
 10408  000930  0100               	movlb	0	; () banked
 10409  000932  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10410  000934  EC61  F024         	call	_strcpy	;wreg free
 10411                           
 10412                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10413  000938  0E28               	movlw	40
 10414  00093A  0101               	movlb	1	; () banked
 10415  00093C  6F63               	movwf	drawtext@y& (0+255),b
 10416  00093E  C042  F164         	movff	_txt,drawtext@_text
 10417  000942  C043  F165         	movff	_txt+1,drawtext@_text+1
 10418  000946  0E00               	movlw	0
 10419  000948  0101               	movlb	1	; () banked
 10420  00094A  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10421  00094C  0E1F               	movlw	31
 10422  00094E  6F66               	movwf	drawtext@color& (0+255),b
 10423  000950  0E00               	movlw	0
 10424  000952  0101               	movlb	1	; () banked
 10425  000954  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10426  000956  0E00               	movlw	0
 10427  000958  6F68               	movwf	drawtext@bg& (0+255),b
 10428  00095A  0E01               	movlw	1
 10429  00095C  0101               	movlb	1	; () banked
 10430  00095E  6F6A               	movwf	drawtext@size& (0+255),b
 10431  000960  0E32               	movlw	50
 10432  000962  EC18  F015         	call	_drawtext
 10433                           
 10434                           ;Main_Screen.c: 55: strcpy(txt, "Date");
 10435  000966  C042  F0CD         	movff	_txt,strcpy@to
 10436  00096A  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10437  00096E  0EDF               	movlw	low STR_11
 10438  000970  0100               	movlb	0	; () banked
 10439  000972  6FCF               	movwf	strcpy@from& (0+255),b
 10440  000974  0EFF               	movlw	high STR_11
 10441  000976  0100               	movlb	0	; () banked
 10442  000978  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10443  00097A  EC61  F024         	call	_strcpy	;wreg free
 10444                           
 10445                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 10446  00097E  0E47               	movlw	71
 10447  000980  0101               	movlb	1	; () banked
 10448  000982  6F63               	movwf	drawtext@y& (0+255),b
 10449  000984  C042  F164         	movff	_txt,drawtext@_text
 10450  000988  C043  F165         	movff	_txt+1,drawtext@_text+1
 10451  00098C  0EF8               	movlw	248
 10452  00098E  0101               	movlb	1	; () banked
 10453  000990  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10454  000992  0E00               	movlw	0
 10455  000994  6F66               	movwf	drawtext@color& (0+255),b
 10456  000996  0E00               	movlw	0
 10457  000998  0101               	movlb	1	; () banked
 10458  00099A  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10459  00099C  0E00               	movlw	0
 10460  00099E  6F68               	movwf	drawtext@bg& (0+255),b
 10461  0009A0  0E01               	movlw	1
 10462  0009A2  0101               	movlb	1	; () banked
 10463  0009A4  6F6A               	movwf	drawtext@size& (0+255),b
 10464  0009A6  0E32               	movlw	50
 10465  0009A8  EC18  F015         	call	_drawtext
 10466                           
 10467                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
 10468  0009AC  C042  F0CD         	movff	_txt,strcpy@to
 10469  0009B0  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10470  0009B4  0EAA               	movlw	low STR_12
 10471  0009B6  0100               	movlb	0	; () banked
 10472  0009B8  6FCF               	movwf	strcpy@from& (0+255),b
 10473  0009BA  0EFF               	movlw	high STR_12
 10474  0009BC  0100               	movlb	0	; () banked
 10475  0009BE  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10476  0009C0  EC61  F024         	call	_strcpy	;wreg free
 10477                           
 10478                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10479  0009C4  0E64               	movlw	100
 10480  0009C6  0101               	movlb	1	; () banked
 10481  0009C8  6F63               	movwf	drawtext@y& (0+255),b
 10482  0009CA  C042  F164         	movff	_txt,drawtext@_text
 10483  0009CE  C043  F165         	movff	_txt+1,drawtext@_text+1
 10484  0009D2  0EFF               	movlw	255
 10485  0009D4  0101               	movlb	1	; () banked
 10486  0009D6  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10487  0009D8  0EE0               	movlw	224
 10488  0009DA  6F66               	movwf	drawtext@color& (0+255),b
 10489  0009DC  0E00               	movlw	0
 10490  0009DE  0101               	movlb	1	; () banked
 10491  0009E0  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10492  0009E2  0E00               	movlw	0
 10493  0009E4  6F68               	movwf	drawtext@bg& (0+255),b
 10494  0009E6  0E01               	movlw	1
 10495  0009E8  0101               	movlb	1	; () banked
 10496  0009EA  6F6A               	movwf	drawtext@size& (0+255),b
 10497  0009EC  0E04               	movlw	4
 10498  0009EE  EC18  F015         	call	_drawtext
 10499                           
 10500                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
 10501  0009F2  C042  F0CD         	movff	_txt,strcpy@to
 10502  0009F6  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10503  0009FA  0EBF               	movlw	low STR_13
 10504  0009FC  0100               	movlb	0	; () banked
 10505  0009FE  6FCF               	movwf	strcpy@from& (0+255),b
 10506  000A00  0EFF               	movlw	high STR_13
 10507  000A02  0100               	movlb	0	; () banked
 10508  000A04  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10509  000A06  EC61  F024         	call	_strcpy	;wreg free
 10510                           
 10511                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10512  000A0A  0E64               	movlw	100
 10513  000A0C  0101               	movlb	1	; () banked
 10514  000A0E  6F63               	movwf	drawtext@y& (0+255),b
 10515  000A10  C042  F164         	movff	_txt,drawtext@_text
 10516  000A14  C043  F165         	movff	_txt+1,drawtext@_text+1
 10517  000A18  0EFF               	movlw	255
 10518  000A1A  0101               	movlb	1	; () banked
 10519  000A1C  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10520  000A1E  0EE0               	movlw	224
 10521  000A20  6F66               	movwf	drawtext@color& (0+255),b
 10522  000A22  0E00               	movlw	0
 10523  000A24  0101               	movlb	1	; () banked
 10524  000A26  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10525  000A28  0E00               	movlw	0
 10526  000A2A  6F68               	movwf	drawtext@bg& (0+255),b
 10527  000A2C  0E01               	movlw	1
 10528  000A2E  0101               	movlb	1	; () banked
 10529  000A30  6F6A               	movwf	drawtext@size& (0+255),b
 10530  000A32  0E4D               	movlw	77
 10531  000A34  EC18  F015         	call	_drawtext
 10532                           
 10533                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
 10534  000A38  C042  F0CD         	movff	_txt,strcpy@to
 10535  000A3C  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10536  000A40  0E7B               	movlw	low STR_14
 10537  000A42  0100               	movlb	0	; () banked
 10538  000A44  6FCF               	movwf	strcpy@from& (0+255),b
 10539  000A46  0EFF               	movlw	high STR_14
 10540  000A48  0100               	movlb	0	; () banked
 10541  000A4A  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10542  000A4C  EC61  F024         	call	_strcpy	;wreg free
 10543                           
 10544                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10545  000A50  0E78               	movlw	120
 10546  000A52  0101               	movlb	1	; () banked
 10547  000A54  6F63               	movwf	drawtext@y& (0+255),b
 10548  000A56  C042  F164         	movff	_txt,drawtext@_text
 10549  000A5A  C043  F165         	movff	_txt+1,drawtext@_text+1
 10550  000A5E  0E00               	movlw	0
 10551  000A60  0101               	movlb	1	; () banked
 10552  000A62  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10553  000A64  0E1F               	movlw	31
 10554  000A66  6F66               	movwf	drawtext@color& (0+255),b
 10555  000A68  0E00               	movlw	0
 10556  000A6A  0101               	movlb	1	; () banked
 10557  000A6C  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10558  000A6E  0E00               	movlw	0
 10559  000A70  6F68               	movwf	drawtext@bg& (0+255),b
 10560  000A72  0E01               	movlw	1
 10561  000A74  0101               	movlb	1	; () banked
 10562  000A76  6F6A               	movwf	drawtext@size& (0+255),b
 10563  000A78  0E06               	movlw	6
 10564  000A7A  EC18  F015         	call	_drawtext
 10565                           
 10566                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
 10567  000A7E  C042  F0CD         	movff	_txt,strcpy@to
 10568  000A82  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10569  000A86  0ED8               	movlw	low STR_15
 10570  000A88  0100               	movlb	0	; () banked
 10571  000A8A  6FCF               	movwf	strcpy@from& (0+255),b
 10572  000A8C  0EFF               	movlw	high STR_15
 10573  000A8E  0100               	movlb	0	; () banked
 10574  000A90  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10575  000A92  EC61  F024         	call	_strcpy	;wreg free
 10576                           
 10577                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 10578  000A96  0E78               	movlw	120
 10579  000A98  0101               	movlb	1	; () banked
 10580  000A9A  6F63               	movwf	drawtext@y& (0+255),b
 10581  000A9C  C042  F164         	movff	_txt,drawtext@_text
 10582  000AA0  C043  F165         	movff	_txt+1,drawtext@_text+1
 10583  000AA4  0E00               	movlw	0
 10584  000AA6  0101               	movlb	1	; () banked
 10585  000AA8  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10586  000AAA  0E1F               	movlw	31
 10587  000AAC  6F66               	movwf	drawtext@color& (0+255),b
 10588  000AAE  0E00               	movlw	0
 10589  000AB0  0101               	movlb	1	; () banked
 10590  000AB2  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10591  000AB4  0E00               	movlw	0
 10592  000AB6  6F68               	movwf	drawtext@bg& (0+255),b
 10593  000AB8  0E01               	movlw	1
 10594  000ABA  0101               	movlb	1	; () banked
 10595  000ABC  6F6A               	movwf	drawtext@size& (0+255),b
 10596  000ABE  0E55               	movlw	85
 10597  000AC0  EC18  F015         	call	_drawtext
 10598                           
 10599                           ;Main_Screen.c: 65: strcpy(txt, "DC");
 10600  000AC4  C042  F0CD         	movff	_txt,strcpy@to
 10601  000AC8  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10602  000ACC  0EF8               	movlw	low STR_16
 10603  000ACE  0100               	movlb	0	; () banked
 10604  000AD0  6FCF               	movwf	strcpy@from& (0+255),b
 10605  000AD2  0EFF               	movlw	high STR_16
 10606  000AD4  0100               	movlb	0	; () banked
 10607  000AD6  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10608  000AD8  EC61  F024         	call	_strcpy	;wreg free
 10609                           
 10610                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10611  000ADC  0E8C               	movlw	140
 10612  000ADE  0101               	movlb	1	; () banked
 10613  000AE0  6F63               	movwf	drawtext@y& (0+255),b
 10614  000AE2  C042  F164         	movff	_txt,drawtext@_text
 10615  000AE6  C043  F165         	movff	_txt+1,drawtext@_text+1
 10616  000AEA  0EFF               	movlw	255
 10617  000AEC  0101               	movlb	1	; () banked
 10618  000AEE  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10619  000AF0  6966               	setf	drawtext@color& (0+255),b
 10620  000AF2  0E00               	movlw	0
 10621  000AF4  0101               	movlb	1	; () banked
 10622  000AF6  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10623  000AF8  0E00               	movlw	0
 10624  000AFA  6F68               	movwf	drawtext@bg& (0+255),b
 10625  000AFC  0E01               	movlw	1
 10626  000AFE  0101               	movlb	1	; () banked
 10627  000B00  6F6A               	movwf	drawtext@size& (0+255),b
 10628  000B02  0E0C               	movlw	12
 10629  000B04  EC18  F015         	call	_drawtext
 10630                           
 10631                           ;Main_Screen.c: 67: strcpy(txt, "RM");
 10632  000B08  C042  F0CD         	movff	_txt,strcpy@to
 10633  000B0C  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10634  000B10  0EFB               	movlw	low STR_17
 10635  000B12  0100               	movlb	0	; () banked
 10636  000B14  6FCF               	movwf	strcpy@from& (0+255),b
 10637  000B16  0EFF               	movlw	high STR_17
 10638  000B18  0100               	movlb	0	; () banked
 10639  000B1A  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10640  000B1C  EC61  F024         	call	_strcpy	;wreg free
 10641                           
 10642                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10643  000B20  0E8C               	movlw	140
 10644  000B22  0101               	movlb	1	; () banked
 10645  000B24  6F63               	movwf	drawtext@y& (0+255),b
 10646  000B26  C042  F164         	movff	_txt,drawtext@_text
 10647  000B2A  C043  F165         	movff	_txt+1,drawtext@_text+1
 10648  000B2E  0EFF               	movlw	255
 10649  000B30  0101               	movlb	1	; () banked
 10650  000B32  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10651  000B34  6966               	setf	drawtext@color& (0+255),b
 10652  000B36  0E00               	movlw	0
 10653  000B38  0101               	movlb	1	; () banked
 10654  000B3A  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10655  000B3C  0E00               	movlw	0
 10656  000B3E  6F68               	movwf	drawtext@bg& (0+255),b
 10657  000B40  0E01               	movlw	1
 10658  000B42  0101               	movlb	1	; () banked
 10659  000B44  6F6A               	movwf	drawtext@size& (0+255),b
 10660  000B46  0E21               	movlw	33
 10661  000B48  EC18  F015         	call	_drawtext
 10662                           
 10663                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
 10664  000B4C  C042  F0CD         	movff	_txt,strcpy@to
 10665  000B50  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10666  000B54  0EE4               	movlw	low STR_18
 10667  000B56  0100               	movlb	0	; () banked
 10668  000B58  6FCF               	movwf	strcpy@from& (0+255),b
 10669  000B5A  0EFF               	movlw	high STR_18
 10670  000B5C  0100               	movlb	0	; () banked
 10671  000B5E  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10672  000B60  EC61  F024         	call	_strcpy	;wreg free
 10673                           
 10674                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 10675  000B64  0E8C               	movlw	140
 10676  000B66  0101               	movlb	1	; () banked
 10677  000B68  6F63               	movwf	drawtext@y& (0+255),b
 10678  000B6A  C042  F164         	movff	_txt,drawtext@_text
 10679  000B6E  C043  F165         	movff	_txt+1,drawtext@_text+1
 10680  000B72  0EFF               	movlw	255
 10681  000B74  0101               	movlb	1	; () banked
 10682  000B76  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10683  000B78  6966               	setf	drawtext@color& (0+255),b
 10684  000B7A  0E00               	movlw	0
 10685  000B7C  0101               	movlb	1	; () banked
 10686  000B7E  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10687  000B80  0E00               	movlw	0
 10688  000B82  6F68               	movwf	drawtext@bg& (0+255),b
 10689  000B84  0E01               	movlw	1
 10690  000B86  0101               	movlb	1	; () banked
 10691  000B88  6F6A               	movwf	drawtext@size& (0+255),b
 10692  000B8A  0E32               	movlw	50
 10693  000B8C  EC18  F015         	call	_drawtext
 10694                           
 10695                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
 10696  000B90  C042  F0CD         	movff	_txt,strcpy@to
 10697  000B94  C043  F0CE         	movff	_txt+1,strcpy@to+1
 10698  000B98  0EF1               	movlw	low STR_19
 10699  000B9A  0100               	movlb	0	; () banked
 10700  000B9C  6FCF               	movwf	strcpy@from& (0+255),b
 10701  000B9E  0EFF               	movlw	high STR_19
 10702  000BA0  0100               	movlb	0	; () banked
 10703  000BA2  6FD0               	movwf	(strcpy@from+1)& (0+255),b
 10704  000BA4  EC61  F024         	call	_strcpy	;wreg free
 10705                           
 10706                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 10707  000BA8  0E8C               	movlw	140
 10708  000BAA  0101               	movlb	1	; () banked
 10709  000BAC  6F63               	movwf	drawtext@y& (0+255),b
 10710  000BAE  C042  F164         	movff	_txt,drawtext@_text
 10711  000BB2  C043  F165         	movff	_txt+1,drawtext@_text+1
 10712  000BB6  0EFF               	movlw	255
 10713  000BB8  0101               	movlb	1	; () banked
 10714  000BBA  6F67               	movwf	(drawtext@color+1)& (0+255),b
 10715  000BBC  6966               	setf	drawtext@color& (0+255),b
 10716  000BBE  0E00               	movlw	0
 10717  000BC0  0101               	movlb	1	; () banked
 10718  000BC2  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 10719  000BC4  0E00               	movlw	0
 10720  000BC6  6F68               	movwf	drawtext@bg& (0+255),b
 10721  000BC8  0E01               	movlw	1
 10722  000BCA  0101               	movlb	1	; () banked
 10723  000BCC  6F6A               	movwf	drawtext@size& (0+255),b
 10724  000BCE  0E5F               	movlw	95
 10725  000BD0  EC18  F015         	call	_drawtext
 10726  000BD4  0012               	return		;funcret
 10727  000BD6                     __end_of_Initialize_Screen:
 10728                           	opt stack 0
 10729                           tblptru	equ	0xFF8
 10730                           tblptrh	equ	0xFF7
 10731                           tblptrl	equ	0xFF6
 10732                           tablat	equ	0xFF5
 10733                           prodh	equ	0xFF4
 10734                           prodl	equ	0xFF3
 10735                           intcon	equ	0xFF2
 10736                           intcon2	equ	0xFF1
 10737                           postinc0	equ	0xFEE
 10738                           wreg	equ	0xFE8
 10739                           postdec1	equ	0xFE5
 10740                           fsr1l	equ	0xFE1
 10741                           postinc2	equ	0xFDE
 10742                           fsr2h	equ	0xFDA
 10743                           fsr2l	equ	0xFD9
 10744                           status	equ	0xFD8
 10745                           
 10746 ;; *************** function _strcpy *****************
 10747 ;; Defined at:
 10748 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10751 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10752 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10753 ;;		 -> STR_36(5), STR_35(5), STR_34(12), STR_33(21), 
 10754 ;;		 -> STR_32(16), STR_31(10), STR_30(11), STR_29(21), 
 10755 ;;		 -> STR_27(5), STR_26(8), STR_25(8), STR_24(20), 
 10756 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_20(4), 
 10757 ;;		 -> STR_19(4), STR_18(5), STR_17(3), STR_16(3), 
 10758 ;;		 -> STR_15(7), STR_14(13), STR_13(9), STR_12(11), 
 10759 ;;		 -> STR_11(5), STR_10(5), STR_9(2), STR_8(3), 
 10760 ;;		 -> STR_7(13), STR_6(22), 
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10763 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  2    0[BANK0 ] PTR unsigned char 
 10766 ;; Registers used:
 10767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10773 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;Total ram usage:        6 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    4
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_Initialize_Screen
 10784 ;;		_Update_Screen
 10785 ;;		_Initialize_Setup_Alarm_Time_Screen
 10786 ;;		_Initialize_Setup_Heater_Screen
 10787 ;;		_Initialize_Setup_Time_Screen
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text44
 10792  0048C2                     __ptext44:
 10793                           	opt stack 0
 10794  0048C2                     _strcpy:
 10795                           	opt stack 25
 10796                           
 10797                           ;incstack = 0
 10798  0048C2  C0CD  F0D1         	movff	strcpy@to,strcpy@cp
 10799  0048C6  C0CE  F0D2         	movff	strcpy@to+1,strcpy@cp+1
 10800  0048CA  D007               	goto	l8855
 10801  0048CC                     l8853:
 10802  0048CC  0100               	movlb	0	; () banked
 10803  0048CE  4BD1               	infsnz	strcpy@cp& (0+255),f,b
 10804  0048D0  2BD2               	incf	(strcpy@cp+1)& (0+255),f,b
 10805  0048D2  0100               	movlb	0	; () banked
 10806  0048D4  4BCF               	infsnz	strcpy@from& (0+255),f,b
 10807  0048D6  2BD0               	incf	(strcpy@from+1)& (0+255),f,b
 10808  0048D8  D000               	goto	l8855
 10809  0048DA                     l8855:
 10810  0048DA  C0CF  FFF6         	movff	strcpy@from,tblptrl
 10811  0048DE  C0D0  FFF7         	movff	strcpy@from+1,tblptrh
 10812  0048E2                     	if	0	;tblptru may be non-zero
 10813  0048E2                     	endif
 10814  0048E2                     	if	0	;tblptru may be non-zero
 10815  0048E2                     	endif
 10816  0048E2  C0D1  FFD9         	movff	strcpy@cp,fsr2l
 10817  0048E6  C0D2  FFDA         	movff	strcpy@cp+1,fsr2h
 10818  0048EA  0008               	tblrd		*
 10819  0048EC  CFF5 FFDF          	movff	tablat,indf2
 10820  0048F0  50DF               	movf	indf2,w,c
 10821  0048F2  A4D8               	btfss	status,2,c
 10822  0048F4  D7EB               	goto	l8853
 10823                           
 10824                           ;	Return value of _strcpy is never used
 10825  0048F6  0012               	return		;funcret
 10826  0048F8                     __end_of_strcpy:
 10827                           	opt stack 0
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           intcon2	equ	0xFF1
 10836                           postinc0	equ	0xFEE
 10837                           wreg	equ	0xFE8
 10838                           postdec1	equ	0xFE5
 10839                           fsr1l	equ	0xFE1
 10840                           indf2	equ	0xFDF
 10841                           postinc2	equ	0xFDE
 10842                           fsr2h	equ	0xFDA
 10843                           fsr2l	equ	0xFD9
 10844                           status	equ	0xFD8
 10845                           
 10846 ;; *************** function _fillScreen *****************
 10847 ;; Defined at:
 10848 ;;		line 619 in file "ST7735.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  color           2   19[BANK0 ] unsigned int 
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;		None
 10853 ;; Return value:  Size  Location     Type
 10854 ;;		None               void
 10855 ;; Registers used:
 10856 ;;		wreg, status,2, status,0, cstack
 10857 ;; Tracked objects:
 10858 ;;		On entry : 0/0
 10859 ;;		On exit  : 0/0
 10860 ;;		Unchanged: 0/0
 10861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10865 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;Total ram usage:        2 bytes
 10867 ;; Hardware stack levels used:    1
 10868 ;; Hardware stack levels required when called:    8
 10869 ;; This function calls:
 10870 ;;		_fillRectangle
 10871 ;; This function is called by:
 10872 ;;		_Initialize_Screen
 10873 ;;		_Initialize_Setup_Alarm_Time_Screen
 10874 ;;		_Initialize_Setup_Heater_Screen
 10875 ;;		_Initialize_Setup_Time_Screen
 10876 ;; This function uses a non-reentrant model
 10877 ;;
 10878                           
 10879                           	psect	text45
 10880  004ACE                     __ptext45:
 10881                           	opt stack 0
 10882  004ACE                     _fillScreen:
 10883                           	opt stack 21
 10884                           
 10885                           ;ST7735.c: 621: fillRectangle(0, 0, 128, 160, color);
 10886                           
 10887                           ;incstack = 0
 10888  004ACE  0E00               	movlw	0
 10889  004AD0  0100               	movlb	0	; () banked
 10890  004AD2  6FD4               	movwf	fillRectangle@y& (0+255),b
 10891  004AD4  0E80               	movlw	128
 10892  004AD6  0100               	movlb	0	; () banked
 10893  004AD8  6FD5               	movwf	fillRectangle@w& (0+255),b
 10894  004ADA  0EA0               	movlw	160
 10895  004ADC  0100               	movlb	0	; () banked
 10896  004ADE  6FD6               	movwf	fillRectangle@h& (0+255),b
 10897  004AE0  C0E0  F0D7         	movff	fillScreen@color,fillRectangle@color
 10898  004AE4  C0E1  F0D8         	movff	fillScreen@color+1,fillRectangle@color+1
 10899  004AE8  0E00               	movlw	0
 10900  004AEA  EC3C  F013         	call	_fillRectangle
 10901  004AEE  0012               	return		;funcret
 10902  004AF0                     __end_of_fillScreen:
 10903                           	opt stack 0
 10904                           tblptru	equ	0xFF8
 10905                           tblptrh	equ	0xFF7
 10906                           tblptrl	equ	0xFF6
 10907                           tablat	equ	0xFF5
 10908                           prodh	equ	0xFF4
 10909                           prodl	equ	0xFF3
 10910                           intcon	equ	0xFF2
 10911                           intcon2	equ	0xFF1
 10912                           postinc0	equ	0xFEE
 10913                           wreg	equ	0xFE8
 10914                           postdec1	equ	0xFE5
 10915                           fsr1l	equ	0xFE1
 10916                           indf2	equ	0xFDF
 10917                           postinc2	equ	0xFDE
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922 ;; *************** function _fillRectangle *****************
 10923 ;; Defined at:
 10924 ;;		line 503 in file "ST7735.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;  x               1    wreg     unsigned char 
 10927 ;;  y               1    7[BANK0 ] unsigned char 
 10928 ;;  w               1    8[BANK0 ] unsigned char 
 10929 ;;  h               1    9[BANK0 ] unsigned char 
 10930 ;;  color           2   10[BANK0 ] unsigned int 
 10931 ;; Auto vars:     Size  Location     Type
 10932 ;;  x               1   18[BANK0 ] unsigned char 
 10933 ;;  lo              1   17[BANK0 ] unsigned char 
 10934 ;;  hi              1   16[BANK0 ] unsigned char 
 10935 ;; Return value:  Size  Location     Type
 10936 ;;		None               void
 10937 ;; Registers used:
 10938 ;;		wreg, status,2, status,0, cstack
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10944 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10945 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10946 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10947 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10948 ;;Total ram usage:       12 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    7
 10951 ;; This function calls:
 10952 ;;		_setAddrWindow
 10953 ;;		_spiwrite
 10954 ;; This function is called by:
 10955 ;;		_fillScreen
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           	psect	text46
 10960  002678                     __ptext46:
 10961                           	opt stack 0
 10962  002678                     _fillRectangle:
 10963                           	opt stack 21
 10964                           
 10965                           ;incstack = 0
 10966                           ;fillRectangle@x stored from wreg
 10967  002678  0100               	movlb	0	; () banked
 10968  00267A  6FDF               	movwf	fillRectangle@x& (0+255),b
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;ST7735.c: 505: unsigned char hi, lo;
 10972                           ;ST7735.c: 506: if((x >= 128) || (y >= 160))
 10973  00267C  0E80               	movlw	128
 10974  00267E  0100               	movlb	0	; () banked
 10975  002680  61DF               	cpfslt	fillRectangle@x& (0+255),b
 10976  002682  D09B               	goto	l1305
 10977                           
 10978                           ; BSR set to: 0
 10979  002684  0E9F               	movlw	159
 10980  002686  0100               	movlb	0	; () banked
 10981  002688  65D4               	cpfsgt	fillRectangle@y& (0+255),b
 10982  00268A  D001               	goto	l8437
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;ST7735.c: 507: return;
 10986  00268C  D096               	goto	l1305
 10987  00268E                     l8437:
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;ST7735.c: 508: if((x + w - 1) >= 128)
 10991  00268E  0EFF               	movlw	255
 10992  002690  0100               	movlb	0	; () banked
 10993  002692  6FD9               	movwf	??_fillRectangle& (0+255),b
 10994  002694  0EFF               	movlw	255
 10995  002696  0100               	movlb	0	; () banked
 10996  002698  6FDA               	movwf	(??_fillRectangle+1)& (0+255),b
 10997  00269A  0100               	movlb	0	; () banked
 10998  00269C  51D5               	movf	fillRectangle@w& (0+255),w,b
 10999  00269E  C0DF  F0DB         	movff	fillRectangle@x,??_fillRectangle+2
 11000  0026A2  0100               	movlb	0	; () banked
 11001  0026A4  6BDC               	clrf	(??_fillRectangle+3)& (0+255),b
 11002  0026A6  0100               	movlb	0	; () banked
 11003  0026A8  27DB               	addwf	(??_fillRectangle+2)& (0+255),f,b
 11004  0026AA  0E00               	movlw	0
 11005  0026AC  23DC               	addwfc	(??_fillRectangle+3)& (0+255),f,b
 11006  0026AE  0100               	movlb	0	; () banked
 11007  0026B0  51D9               	movf	??_fillRectangle& (0+255),w,b
 11008  0026B2  0100               	movlb	0	; () banked
 11009  0026B4  27DB               	addwf	(??_fillRectangle+2)& (0+255),f,b
 11010  0026B6  0100               	movlb	0	; () banked
 11011  0026B8  51DA               	movf	(??_fillRectangle+1)& (0+255),w,b
 11012  0026BA  0100               	movlb	0	; () banked
 11013  0026BC  23DC               	addwfc	(??_fillRectangle+3)& (0+255),f,b
 11014  0026BE  0100               	movlb	0	; () banked
 11015  0026C0  BFDC               	btfsc	(??_fillRectangle+3)& (0+255),7,b
 11016  0026C2  D00E               	goto	l1306
 11017  0026C4  0100               	movlb	0	; () banked
 11018  0026C6  51DC               	movf	(??_fillRectangle+3)& (0+255),w,b
 11019  0026C8  E105               	bnz	u6180
 11020  0026CA  0E80               	movlw	128
 11021  0026CC  0100               	movlb	0	; () banked
 11022  0026CE  5DDB               	subwf	(??_fillRectangle+2)& (0+255),w,b
 11023  0026D0  A0D8               	btfss	status,0,c
 11024  0026D2  D006               	goto	l1306
 11025  0026D4                     u6180:
 11026                           
 11027                           ; BSR set to: 0
 11028                           ;ST7735.c: 509: w = 128 - x;
 11029  0026D4  0100               	movlb	0	; () banked
 11030  0026D6  51DF               	movf	fillRectangle@x& (0+255),w,b
 11031  0026D8  0800               	sublw	0
 11032  0026DA  0F80               	addlw	128
 11033  0026DC  0100               	movlb	0	; () banked
 11034  0026DE  6FD5               	movwf	fillRectangle@w& (0+255),b
 11035  0026E0                     l1306:
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;ST7735.c: 510: if((y + h - 1) >= 160)
 11039  0026E0  0EFF               	movlw	255
 11040  0026E2  0100               	movlb	0	; () banked
 11041  0026E4  6FD9               	movwf	??_fillRectangle& (0+255),b
 11042  0026E6  0EFF               	movlw	255
 11043  0026E8  0100               	movlb	0	; () banked
 11044  0026EA  6FDA               	movwf	(??_fillRectangle+1)& (0+255),b
 11045  0026EC  0100               	movlb	0	; () banked
 11046  0026EE  51D6               	movf	fillRectangle@h& (0+255),w,b
 11047  0026F0  C0D4  F0DB         	movff	fillRectangle@y,??_fillRectangle+2
 11048  0026F4  0100               	movlb	0	; () banked
 11049  0026F6  6BDC               	clrf	(??_fillRectangle+3)& (0+255),b
 11050  0026F8  0100               	movlb	0	; () banked
 11051  0026FA  27DB               	addwf	(??_fillRectangle+2)& (0+255),f,b
 11052  0026FC  0E00               	movlw	0
 11053  0026FE  23DC               	addwfc	(??_fillRectangle+3)& (0+255),f,b
 11054  002700  0100               	movlb	0	; () banked
 11055  002702  51D9               	movf	??_fillRectangle& (0+255),w,b
 11056  002704  0100               	movlb	0	; () banked
 11057  002706  27DB               	addwf	(??_fillRectangle+2)& (0+255),f,b
 11058  002708  0100               	movlb	0	; () banked
 11059  00270A  51DA               	movf	(??_fillRectangle+1)& (0+255),w,b
 11060  00270C  0100               	movlb	0	; () banked
 11061  00270E  23DC               	addwfc	(??_fillRectangle+3)& (0+255),f,b
 11062  002710  0100               	movlb	0	; () banked
 11063  002712  BFDC               	btfsc	(??_fillRectangle+3)& (0+255),7,b
 11064  002714  D00F               	goto	l8443
 11065  002716  0100               	movlb	0	; () banked
 11066  002718  51DC               	movf	(??_fillRectangle+3)& (0+255),w,b
 11067  00271A  E105               	bnz	u6190
 11068  00271C  0EA0               	movlw	160
 11069  00271E  0100               	movlb	0	; () banked
 11070  002720  5DDB               	subwf	(??_fillRectangle+2)& (0+255),w,b
 11071  002722  A0D8               	btfss	status,0,c
 11072  002724  D007               	goto	l8443
 11073  002726                     u6190:
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;ST7735.c: 511: h = 160 - y;
 11077  002726  0100               	movlb	0	; () banked
 11078  002728  51D4               	movf	fillRectangle@y& (0+255),w,b
 11079  00272A  0800               	sublw	0
 11080  00272C  0FA0               	addlw	160
 11081  00272E  0100               	movlb	0	; () banked
 11082  002730  6FD6               	movwf	fillRectangle@h& (0+255),b
 11083  002732  D000               	goto	l8443
 11084  002734                     l8443:
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;ST7735.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
 11088  002734  C0D4  F0D0         	movff	fillRectangle@y,setAddrWindow@y0
 11089  002738  0100               	movlb	0	; () banked
 11090  00273A  51DF               	movf	fillRectangle@x& (0+255),w,b
 11091  00273C  0100               	movlb	0	; () banked
 11092  00273E  25D5               	addwf	fillRectangle@w& (0+255),w,b
 11093  002740  0100               	movlb	0	; () banked
 11094  002742  6FD9               	movwf	??_fillRectangle& (0+255),b
 11095  002744  0100               	movlb	0	; () banked
 11096  002746  05D9               	decf	??_fillRectangle& (0+255),w,b
 11097  002748  0100               	movlb	0	; () banked
 11098  00274A  6FD1               	movwf	setAddrWindow@x1& (0+255),b
 11099  00274C  0100               	movlb	0	; () banked
 11100  00274E  51D4               	movf	fillRectangle@y& (0+255),w,b
 11101  002750  0100               	movlb	0	; () banked
 11102  002752  25D6               	addwf	fillRectangle@h& (0+255),w,b
 11103  002754  0100               	movlb	0	; () banked
 11104  002756  6FDA               	movwf	(??_fillRectangle+1)& (0+255),b
 11105  002758  0100               	movlb	0	; () banked
 11106  00275A  05DA               	decf	(??_fillRectangle+1)& (0+255),w,b
 11107  00275C  0100               	movlb	0	; () banked
 11108  00275E  6FD2               	movwf	setAddrWindow@y1& (0+255),b
 11109  002760  0100               	movlb	0	; () banked
 11110  002762  51DF               	movf	fillRectangle@x& (0+255),w,b
 11111  002764  EC6B  F022         	call	_setAddrWindow
 11112                           
 11113                           ;ST7735.c: 513: hi = color >> 8; lo = color;
 11114  002768  0100               	movlb	0	; () banked
 11115  00276A  51D8               	movf	(fillRectangle@color+1)& (0+255),w,b
 11116  00276C  0100               	movlb	0	; () banked
 11117  00276E  6FDD               	movwf	fillRectangle@hi& (0+255),b
 11118                           
 11119                           ; BSR set to: 0
 11120  002770  C0D7  F0DE         	movff	fillRectangle@color,fillRectangle@lo
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;ST7735.c: 514: PORTDbits.RD3 = 1;
 11124  002774  8683               	bsf	3971,3,c	;volatile
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;ST7735.c: 515: PORTDbits.RD4 = 0;
 11128  002776  9883               	bcf	3971,4,c	;volatile
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;ST7735.c: 517: for(y=h; y>0; y--) {
 11132  002778  C0D6  F0D4         	movff	fillRectangle@h,fillRectangle@y
 11133  00277C                     l8455:
 11134                           
 11135                           ; BSR set to: 0
 11136  00277C  0100               	movlb	0	; () banked
 11137  00277E  51D4               	movf	fillRectangle@y& (0+255),w,b
 11138  002780  0100               	movlb	0	; () banked
 11139  002782  B4D8               	btfsc	status,2,c
 11140  002784  D019               	goto	l1309
 11141  002786  D001               	goto	l1308
 11142                           
 11143                           ; BSR set to: 0
 11144  002788  D017               	goto	l1309
 11145  00278A                     l1308:
 11146                           
 11147                           ; BSR set to: 0
 11148                           ;ST7735.c: 518: for(x = w; x > 0; x--) {
 11149  00278A  C0D5  F0DF         	movff	fillRectangle@w,fillRectangle@x
 11150  00278E                     l8459:
 11151                           
 11152                           ; BSR set to: 0
 11153  00278E  0100               	movlb	0	; () banked
 11154  002790  51DF               	movf	fillRectangle@x& (0+255),w,b
 11155  002792  0100               	movlb	0	; () banked
 11156  002794  B4D8               	btfsc	status,2,c
 11157  002796  D00D               	goto	l8469
 11158  002798  D001               	goto	l8463
 11159                           
 11160                           ; BSR set to: 0
 11161  00279A  D00B               	goto	l8469
 11162  00279C                     l8463:
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;ST7735.c: 519: spiwrite(hi);
 11166  00279C  0100               	movlb	0	; () banked
 11167  00279E  51DD               	movf	fillRectangle@hi& (0+255),w,b
 11168  0027A0  EC2D  F026         	call	_spiwrite
 11169                           
 11170                           ;ST7735.c: 520: spiwrite(lo);
 11171  0027A4  0100               	movlb	0	; () banked
 11172  0027A6  51DE               	movf	fillRectangle@lo& (0+255),w,b
 11173  0027A8  EC2D  F026         	call	_spiwrite
 11174  0027AC  0100               	movlb	0	; () banked
 11175  0027AE  07DF               	decf	fillRectangle@x& (0+255),f,b
 11176  0027B0  D7EE               	goto	l8459
 11177  0027B2                     l8469:
 11178                           
 11179                           ; BSR set to: 0
 11180  0027B2  0100               	movlb	0	; () banked
 11181  0027B4  07D4               	decf	fillRectangle@y& (0+255),f,b
 11182  0027B6  D7E2               	goto	l8455
 11183  0027B8                     l1309:
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;ST7735.c: 521: }
 11187                           ;ST7735.c: 522: }
 11188                           ;ST7735.c: 523: PORTDbits.RD4 = 1;
 11189  0027B8  8883               	bsf	3971,4,c	;volatile
 11190  0027BA                     l1305:
 11191                           
 11192                           ; BSR set to: 0
 11193  0027BA  0012               	return		;funcret
 11194  0027BC                     __end_of_fillRectangle:
 11195                           	opt stack 0
 11196                           tblptru	equ	0xFF8
 11197                           tblptrh	equ	0xFF7
 11198                           tblptrl	equ	0xFF6
 11199                           tablat	equ	0xFF5
 11200                           prodh	equ	0xFF4
 11201                           prodl	equ	0xFF3
 11202                           intcon	equ	0xFF2
 11203                           intcon2	equ	0xFF1
 11204                           postinc0	equ	0xFEE
 11205                           wreg	equ	0xFE8
 11206                           postdec1	equ	0xFE5
 11207                           fsr1l	equ	0xFE1
 11208                           indf2	equ	0xFDF
 11209                           postinc2	equ	0xFDE
 11210                           fsr2h	equ	0xFDA
 11211                           fsr2l	equ	0xFD9
 11212                           status	equ	0xFD8
 11213                           
 11214 ;; *************** function _drawCircle *****************
 11215 ;; Defined at:
 11216 ;;		line 528 in file "ST7735.c"
 11217 ;; Parameters:    Size  Location     Type
 11218 ;;  x0              2   11[BANK0 ] int 
 11219 ;;  y0              2   13[BANK0 ] int 
 11220 ;;  r               2   15[BANK0 ] int 
 11221 ;;  color           2   17[BANK0 ] unsigned int 
 11222 ;; Auto vars:     Size  Location     Type
 11223 ;;  y               2    8[BANK1 ] int 
 11224 ;;  x               2    6[BANK1 ] int 
 11225 ;;  f               2    4[BANK1 ] int 
 11226 ;;  ddF_y           2    2[BANK1 ] int 
 11227 ;;  ddF_x           2    0[BANK1 ] int 
 11228 ;; Return value:  Size  Location     Type
 11229 ;;		None               void
 11230 ;; Registers used:
 11231 ;;		wreg, status,2, status,0, cstack
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11237 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11238 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Totals:         0      10      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;Total ram usage:       20 bytes
 11242 ;; Hardware stack levels used:    1
 11243 ;; Hardware stack levels required when called:    8
 11244 ;; This function calls:
 11245 ;;		_drawPixel
 11246 ;; This function is called by:
 11247 ;;		_Initialize_Screen
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           	psect	text47
 11252  001336                     __ptext47:
 11253                           	opt stack 0
 11254  001336                     _drawCircle:
 11255                           	opt stack 21
 11256                           
 11257                           ;ST7735.c: 530: signed int f, ddF_x, ddF_y, x, y;
 11258                           ;ST7735.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;incstack = 0
 11262  001336  C0DC  F0E0         	movff	drawCircle@r,??_drawCircle
 11263  00133A  C0DD  F0E1         	movff	drawCircle@r+1,??_drawCircle+1
 11264  00133E  0100               	movlb	0	; () banked
 11265  001340  1FE0               	comf	??_drawCircle& (0+255),f,b
 11266  001342  1FE1               	comf	(??_drawCircle+1)& (0+255),f,b
 11267  001344  4BE0               	infsnz	??_drawCircle& (0+255),f,b
 11268  001346  2BE1               	incf	(??_drawCircle+1)& (0+255),f,b
 11269  001348  0E01               	movlw	1
 11270  00134A  0100               	movlb	0	; () banked
 11271  00134C  25E0               	addwf	??_drawCircle& (0+255),w,b
 11272  00134E  0101               	movlb	1	; () banked
 11273  001350  6F5C               	movwf	drawCircle@f& (0+255),b
 11274  001352  0E00               	movlw	0
 11275  001354  0100               	movlb	0	; () banked
 11276  001356  21E1               	addwfc	(??_drawCircle+1)& (0+255),w,b
 11277  001358  0101               	movlb	1	; () banked
 11278  00135A  6F5D               	movwf	(drawCircle@f+1)& (0+255),b
 11279                           
 11280                           ; BSR set to: 1
 11281  00135C  0E00               	movlw	0
 11282  00135E  0101               	movlb	1	; () banked
 11283  001360  6F59               	movwf	(drawCircle@ddF_x+1)& (0+255),b
 11284  001362  0E01               	movlw	1
 11285  001364  6F58               	movwf	drawCircle@ddF_x& (0+255),b
 11286                           
 11287                           ; BSR set to: 1
 11288  001366  C0DC  F0E0         	movff	drawCircle@r,??_drawCircle
 11289  00136A  C0DD  F0E1         	movff	drawCircle@r+1,??_drawCircle+1
 11290  00136E  90D8               	bcf	status,0,c
 11291  001370  0100               	movlb	0	; () banked
 11292  001372  37E0               	rlcf	??_drawCircle& (0+255),f,b
 11293  001374  37E1               	rlcf	(??_drawCircle+1)& (0+255),f,b
 11294  001376  0100               	movlb	0	; () banked
 11295  001378  1FE0               	comf	??_drawCircle& (0+255),f,b
 11296  00137A  1FE1               	comf	(??_drawCircle+1)& (0+255),f,b
 11297  00137C  4BE0               	infsnz	??_drawCircle& (0+255),f,b
 11298  00137E  2BE1               	incf	(??_drawCircle+1)& (0+255),f,b
 11299  001380  C0E0  F15A         	movff	??_drawCircle,drawCircle@ddF_y
 11300  001384  C0E1  F15B         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 11301                           
 11302                           ; BSR set to: 0
 11303  001388  0E00               	movlw	0
 11304  00138A  0101               	movlb	1	; () banked
 11305  00138C  6F5F               	movwf	(drawCircle@x+1)& (0+255),b
 11306  00138E  0E00               	movlw	0
 11307  001390  6F5E               	movwf	drawCircle@x& (0+255),b
 11308                           
 11309                           ; BSR set to: 1
 11310  001392  C0DC  F160         	movff	drawCircle@r,drawCircle@y
 11311  001396  C0DD  F161         	movff	drawCircle@r+1,drawCircle@y+1
 11312                           
 11313                           ; BSR set to: 1
 11314                           ;ST7735.c: 532: drawPixel(x0 , y0 + r, color);
 11315  00139A  0100               	movlb	0	; () banked
 11316  00139C  51DA               	movf	drawCircle@y0& (0+255),w,b
 11317  00139E  0100               	movlb	0	; () banked
 11318  0013A0  25DC               	addwf	drawCircle@r& (0+255),w,b
 11319  0013A2  0100               	movlb	0	; () banked
 11320  0013A4  6FD4               	movwf	drawPixel@y& (0+255),b
 11321  0013A6  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11322  0013AA  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11323  0013AE  0100               	movlb	0	; () banked
 11324  0013B0  51D8               	movf	drawCircle@x0& (0+255),w,b
 11325  0013B2  ECC7  F023         	call	_drawPixel
 11326                           
 11327                           ;ST7735.c: 533: drawPixel(x0 , y0 - r, color);
 11328  0013B6  0100               	movlb	0	; () banked
 11329  0013B8  51DC               	movf	drawCircle@r& (0+255),w,b
 11330  0013BA  0800               	sublw	0
 11331  0013BC  0100               	movlb	0	; () banked
 11332  0013BE  25DA               	addwf	drawCircle@y0& (0+255),w,b
 11333  0013C0  0100               	movlb	0	; () banked
 11334  0013C2  6FD4               	movwf	drawPixel@y& (0+255),b
 11335  0013C4  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11336  0013C8  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11337  0013CC  0100               	movlb	0	; () banked
 11338  0013CE  51D8               	movf	drawCircle@x0& (0+255),w,b
 11339  0013D0  ECC7  F023         	call	_drawPixel
 11340                           
 11341                           ;ST7735.c: 534: drawPixel(x0+r, y0 , color);
 11342  0013D4  C0DA  F0D4         	movff	drawCircle@y0,drawPixel@y
 11343  0013D8  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11344  0013DC  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11345  0013E0  0100               	movlb	0	; () banked
 11346  0013E2  51D8               	movf	drawCircle@x0& (0+255),w,b
 11347  0013E4  0100               	movlb	0	; () banked
 11348  0013E6  25DC               	addwf	drawCircle@r& (0+255),w,b
 11349  0013E8  ECC7  F023         	call	_drawPixel
 11350                           
 11351                           ;ST7735.c: 535: drawPixel(x0-r, y0 , color);
 11352  0013EC  C0DA  F0D4         	movff	drawCircle@y0,drawPixel@y
 11353  0013F0  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11354  0013F4  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11355  0013F8  0100               	movlb	0	; () banked
 11356  0013FA  51DC               	movf	drawCircle@r& (0+255),w,b
 11357  0013FC  0800               	sublw	0
 11358  0013FE  0100               	movlb	0	; () banked
 11359  001400  25D8               	addwf	drawCircle@x0& (0+255),w,b
 11360  001402  ECC7  F023         	call	_drawPixel
 11361                           
 11362                           ;ST7735.c: 536: while (x < y) {
 11363  001406  D0AD               	goto	l8939
 11364  001408                     l8911:
 11365                           
 11366                           ;ST7735.c: 537: if (f >= 0) {
 11367  001408  0101               	movlb	1	; () banked
 11368  00140A  BF5D               	btfsc	(drawCircle@f+1)& (0+255),7,b
 11369  00140C  D011               	goto	l1316
 11370                           
 11371                           ; BSR set to: 1
 11372                           ;ST7735.c: 538: y--;
 11373  00140E  0101               	movlb	1	; () banked
 11374  001410  0760               	decf	drawCircle@y& (0+255),f,b
 11375  001412  A0D8               	btfss	status,0,c
 11376  001414  0761               	decf	(drawCircle@y+1)& (0+255),f,b
 11377                           
 11378                           ; BSR set to: 1
 11379                           ;ST7735.c: 539: ddF_y += 2;
 11380  001416  0E02               	movlw	2
 11381  001418  0101               	movlb	1	; () banked
 11382  00141A  275A               	addwf	drawCircle@ddF_y& (0+255),f,b
 11383  00141C  0E00               	movlw	0
 11384  00141E  235B               	addwfc	(drawCircle@ddF_y+1)& (0+255),f,b
 11385                           
 11386                           ; BSR set to: 1
 11387                           ;ST7735.c: 540: f += ddF_y;
 11388  001420  0101               	movlb	1	; () banked
 11389  001422  515A               	movf	drawCircle@ddF_y& (0+255),w,b
 11390  001424  0101               	movlb	1	; () banked
 11391  001426  275C               	addwf	drawCircle@f& (0+255),f,b
 11392  001428  0101               	movlb	1	; () banked
 11393  00142A  515B               	movf	(drawCircle@ddF_y+1)& (0+255),w,b
 11394  00142C  0101               	movlb	1	; () banked
 11395  00142E  235D               	addwfc	(drawCircle@f+1)& (0+255),f,b
 11396  001430                     l1316:
 11397                           
 11398                           ; BSR set to: 1
 11399                           ;ST7735.c: 541: }
 11400                           ;ST7735.c: 542: x++;
 11401  001430  0101               	movlb	1	; () banked
 11402  001432  4B5E               	infsnz	drawCircle@x& (0+255),f,b
 11403  001434  2B5F               	incf	(drawCircle@x+1)& (0+255),f,b
 11404                           
 11405                           ; BSR set to: 1
 11406                           ;ST7735.c: 543: ddF_x += 2;
 11407  001436  0E02               	movlw	2
 11408  001438  0101               	movlb	1	; () banked
 11409  00143A  2758               	addwf	drawCircle@ddF_x& (0+255),f,b
 11410  00143C  0E00               	movlw	0
 11411  00143E  2359               	addwfc	(drawCircle@ddF_x+1)& (0+255),f,b
 11412                           
 11413                           ; BSR set to: 1
 11414                           ;ST7735.c: 544: f += ddF_x;
 11415  001440  0101               	movlb	1	; () banked
 11416  001442  5158               	movf	drawCircle@ddF_x& (0+255),w,b
 11417  001444  0101               	movlb	1	; () banked
 11418  001446  275C               	addwf	drawCircle@f& (0+255),f,b
 11419  001448  0101               	movlb	1	; () banked
 11420  00144A  5159               	movf	(drawCircle@ddF_x+1)& (0+255),w,b
 11421  00144C  0101               	movlb	1	; () banked
 11422  00144E  235D               	addwfc	(drawCircle@f+1)& (0+255),f,b
 11423                           
 11424                           ; BSR set to: 1
 11425                           ;ST7735.c: 545: drawPixel(x0 + x, y0 + y, color);
 11426  001450  0100               	movlb	0	; () banked
 11427  001452  51DA               	movf	drawCircle@y0& (0+255),w,b
 11428  001454  0101               	movlb	1	; () banked
 11429  001456  2560               	addwf	drawCircle@y& (0+255),w,b
 11430  001458  0100               	movlb	0	; () banked
 11431  00145A  6FD4               	movwf	drawPixel@y& (0+255),b
 11432  00145C  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11433  001460  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11434  001464  0100               	movlb	0	; () banked
 11435  001466  51D8               	movf	drawCircle@x0& (0+255),w,b
 11436  001468  0101               	movlb	1	; () banked
 11437  00146A  255E               	addwf	drawCircle@x& (0+255),w,b
 11438  00146C  ECC7  F023         	call	_drawPixel
 11439                           
 11440                           ;ST7735.c: 546: drawPixel(x0 - x, y0 + y, color);
 11441  001470  0100               	movlb	0	; () banked
 11442  001472  51DA               	movf	drawCircle@y0& (0+255),w,b
 11443  001474  0101               	movlb	1	; () banked
 11444  001476  2560               	addwf	drawCircle@y& (0+255),w,b
 11445  001478  0100               	movlb	0	; () banked
 11446  00147A  6FD4               	movwf	drawPixel@y& (0+255),b
 11447  00147C  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11448  001480  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11449  001484  0101               	movlb	1	; () banked
 11450  001486  515E               	movf	drawCircle@x& (0+255),w,b
 11451  001488  0800               	sublw	0
 11452  00148A  0100               	movlb	0	; () banked
 11453  00148C  25D8               	addwf	drawCircle@x0& (0+255),w,b
 11454  00148E  ECC7  F023         	call	_drawPixel
 11455                           
 11456                           ;ST7735.c: 547: drawPixel(x0 + x, y0 - y, color);
 11457  001492  0101               	movlb	1	; () banked
 11458  001494  5160               	movf	drawCircle@y& (0+255),w,b
 11459  001496  0800               	sublw	0
 11460  001498  0100               	movlb	0	; () banked
 11461  00149A  25DA               	addwf	drawCircle@y0& (0+255),w,b
 11462  00149C  0100               	movlb	0	; () banked
 11463  00149E  6FD4               	movwf	drawPixel@y& (0+255),b
 11464  0014A0  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11465  0014A4  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11466  0014A8  0100               	movlb	0	; () banked
 11467  0014AA  51D8               	movf	drawCircle@x0& (0+255),w,b
 11468  0014AC  0101               	movlb	1	; () banked
 11469  0014AE  255E               	addwf	drawCircle@x& (0+255),w,b
 11470  0014B0  ECC7  F023         	call	_drawPixel
 11471                           
 11472                           ;ST7735.c: 548: drawPixel(x0 - x, y0 - y, color);
 11473  0014B4  0101               	movlb	1	; () banked
 11474  0014B6  5160               	movf	drawCircle@y& (0+255),w,b
 11475  0014B8  0800               	sublw	0
 11476  0014BA  0100               	movlb	0	; () banked
 11477  0014BC  25DA               	addwf	drawCircle@y0& (0+255),w,b
 11478  0014BE  0100               	movlb	0	; () banked
 11479  0014C0  6FD4               	movwf	drawPixel@y& (0+255),b
 11480  0014C2  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11481  0014C6  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11482  0014CA  0101               	movlb	1	; () banked
 11483  0014CC  515E               	movf	drawCircle@x& (0+255),w,b
 11484  0014CE  0800               	sublw	0
 11485  0014D0  0100               	movlb	0	; () banked
 11486  0014D2  25D8               	addwf	drawCircle@x0& (0+255),w,b
 11487  0014D4  ECC7  F023         	call	_drawPixel
 11488                           
 11489                           ;ST7735.c: 549: drawPixel(x0 + y, y0 + x, color);
 11490  0014D8  0100               	movlb	0	; () banked
 11491  0014DA  51DA               	movf	drawCircle@y0& (0+255),w,b
 11492  0014DC  0101               	movlb	1	; () banked
 11493  0014DE  255E               	addwf	drawCircle@x& (0+255),w,b
 11494  0014E0  0100               	movlb	0	; () banked
 11495  0014E2  6FD4               	movwf	drawPixel@y& (0+255),b
 11496  0014E4  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11497  0014E8  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11498  0014EC  0100               	movlb	0	; () banked
 11499  0014EE  51D8               	movf	drawCircle@x0& (0+255),w,b
 11500  0014F0  0101               	movlb	1	; () banked
 11501  0014F2  2560               	addwf	drawCircle@y& (0+255),w,b
 11502  0014F4  ECC7  F023         	call	_drawPixel
 11503                           
 11504                           ;ST7735.c: 550: drawPixel(x0 - y, y0 + x, color);
 11505  0014F8  0100               	movlb	0	; () banked
 11506  0014FA  51DA               	movf	drawCircle@y0& (0+255),w,b
 11507  0014FC  0101               	movlb	1	; () banked
 11508  0014FE  255E               	addwf	drawCircle@x& (0+255),w,b
 11509  001500  0100               	movlb	0	; () banked
 11510  001502  6FD4               	movwf	drawPixel@y& (0+255),b
 11511  001504  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11512  001508  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11513  00150C  0101               	movlb	1	; () banked
 11514  00150E  5160               	movf	drawCircle@y& (0+255),w,b
 11515  001510  0800               	sublw	0
 11516  001512  0100               	movlb	0	; () banked
 11517  001514  25D8               	addwf	drawCircle@x0& (0+255),w,b
 11518  001516  ECC7  F023         	call	_drawPixel
 11519                           
 11520                           ;ST7735.c: 551: drawPixel(x0 + y, y0 - x, color);
 11521  00151A  0101               	movlb	1	; () banked
 11522  00151C  515E               	movf	drawCircle@x& (0+255),w,b
 11523  00151E  0800               	sublw	0
 11524  001520  0100               	movlb	0	; () banked
 11525  001522  25DA               	addwf	drawCircle@y0& (0+255),w,b
 11526  001524  0100               	movlb	0	; () banked
 11527  001526  6FD4               	movwf	drawPixel@y& (0+255),b
 11528  001528  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11529  00152C  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11530  001530  0100               	movlb	0	; () banked
 11531  001532  51D8               	movf	drawCircle@x0& (0+255),w,b
 11532  001534  0101               	movlb	1	; () banked
 11533  001536  2560               	addwf	drawCircle@y& (0+255),w,b
 11534  001538  ECC7  F023         	call	_drawPixel
 11535                           
 11536                           ;ST7735.c: 552: drawPixel(x0 - y, y0 - x, color);
 11537  00153C  0101               	movlb	1	; () banked
 11538  00153E  515E               	movf	drawCircle@x& (0+255),w,b
 11539  001540  0800               	sublw	0
 11540  001542  0100               	movlb	0	; () banked
 11541  001544  25DA               	addwf	drawCircle@y0& (0+255),w,b
 11542  001546  0100               	movlb	0	; () banked
 11543  001548  6FD4               	movwf	drawPixel@y& (0+255),b
 11544  00154A  C0DE  F0D5         	movff	drawCircle@color,drawPixel@color
 11545  00154E  C0DF  F0D6         	movff	drawCircle@color+1,drawPixel@color+1
 11546  001552  0101               	movlb	1	; () banked
 11547  001554  5160               	movf	drawCircle@y& (0+255),w,b
 11548  001556  0800               	sublw	0
 11549  001558  0100               	movlb	0	; () banked
 11550  00155A  25D8               	addwf	drawCircle@x0& (0+255),w,b
 11551  00155C  ECC7  F023         	call	_drawPixel
 11552  001560  D000               	goto	l8939
 11553  001562                     l8939:
 11554  001562  0101               	movlb	1	; () banked
 11555  001564  5160               	movf	drawCircle@y& (0+255),w,b
 11556  001566  0101               	movlb	1	; () banked
 11557  001568  5D5E               	subwf	drawCircle@x& (0+255),w,b
 11558  00156A  0101               	movlb	1	; () banked
 11559  00156C  515F               	movf	(drawCircle@x+1)& (0+255),w,b
 11560  00156E  0A80               	xorlw	128
 11561  001570  0100               	movlb	0	; () banked
 11562  001572  6FE0               	movwf	??_drawCircle& (0+255),b
 11563  001574  0101               	movlb	1	; () banked
 11564  001576  5161               	movf	(drawCircle@y+1)& (0+255),w,b
 11565  001578  0A80               	xorlw	128
 11566  00157A  0100               	movlb	0	; () banked
 11567  00157C  59E0               	subwfb	??_drawCircle& (0+255),w,b
 11568  00157E  A0D8               	btfss	status,0,c
 11569  001580  D743               	goto	l8911
 11570                           
 11571                           ; BSR set to: 0
 11572                           
 11573                           ; BSR set to: 0
 11574  001582  0012               	return		;funcret
 11575  001584                     __end_of_drawCircle:
 11576                           	opt stack 0
 11577                           tblptru	equ	0xFF8
 11578                           tblptrh	equ	0xFF7
 11579                           tblptrl	equ	0xFF6
 11580                           tablat	equ	0xFF5
 11581                           prodh	equ	0xFF4
 11582                           prodl	equ	0xFF3
 11583                           intcon	equ	0xFF2
 11584                           intcon2	equ	0xFF1
 11585                           postinc0	equ	0xFEE
 11586                           wreg	equ	0xFE8
 11587                           postdec1	equ	0xFE5
 11588                           fsr1l	equ	0xFE1
 11589                           indf2	equ	0xFDF
 11590                           postinc2	equ	0xFDE
 11591                           fsr2h	equ	0xFDA
 11592                           fsr2l	equ	0xFD9
 11593                           status	equ	0xFD8
 11594                           
 11595 ;; *************** function _TFT_GreenTab_Initialize *****************
 11596 ;; Defined at:
 11597 ;;		line 644 in file "ST7735.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;		None
 11600 ;; Auto vars:     Size  Location     Type
 11601 ;;		None
 11602 ;; Return value:  Size  Location     Type
 11603 ;;		None               void
 11604 ;; Registers used:
 11605 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11606 ;; Tracked objects:
 11607 ;;		On entry : 0/0
 11608 ;;		On exit  : 0/0
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;Total ram usage:        0 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; Hardware stack levels required when called:    7
 11618 ;; This function calls:
 11619 ;;		_Rcmd1
 11620 ;;		_Rcmd2red
 11621 ;;		_Rcmd3
 11622 ;;		_write_command
 11623 ;;		_write_data
 11624 ;; This function is called by:
 11625 ;;		_Initialize_Screen
 11626 ;; This function uses a non-reentrant model
 11627 ;;
 11628                           
 11629                           	psect	text48
 11630  0049B6                     __ptext48:
 11631                           	opt stack 0
 11632  0049B6                     _TFT_GreenTab_Initialize:
 11633                           	opt stack 22
 11634                           
 11635                           ;ST7735.c: 646: PORTDbits.RD4 = 1;
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;incstack = 0
 11639  0049B6  8883               	bsf	3971,4,c	;volatile
 11640                           
 11641                           ;ST7735.c: 647: PORTDbits.RD3 = 0;
 11642  0049B8  9683               	bcf	3971,3,c	;volatile
 11643                           
 11644                           ;ST7735.c: 649: SSPSTAT=0x80;
 11645  0049BA  0E80               	movlw	128
 11646  0049BC  6EC7               	movwf	4039,c	;volatile
 11647                           
 11648                           ;ST7735.c: 650: SSPCON1=0x30;
 11649  0049BE  0E30               	movlw	48
 11650  0049C0  6EC6               	movwf	4038,c	;volatile
 11651                           
 11652                           ;ST7735.c: 653: Rcmd1();
 11653  0049C2  EC5C  F017         	call	_Rcmd1	;wreg free
 11654                           
 11655                           ;ST7735.c: 654: Rcmd2red();
 11656  0049C6  ECE9  F023         	call	_Rcmd2red	;wreg free
 11657                           
 11658                           ;ST7735.c: 655: Rcmd3();
 11659  0049CA  EC67  F018         	call	_Rcmd3	;wreg free
 11660                           
 11661                           ;ST7735.c: 656: write_command(0x36);
 11662  0049CE  0E36               	movlw	54
 11663  0049D0  EC62  F026         	call	_write_command
 11664                           
 11665                           ;ST7735.c: 657: write_data(0xC0);
 11666  0049D4  0EC0               	movlw	192
 11667  0049D6  EC58  F026         	call	_write_data
 11668                           
 11669                           ;ST7735.c: 658: _tft_type = 1;
 11670  0049DA  0E01               	movlw	1
 11671  0049DC  6E4E               	movwf	__tft_type,c
 11672  0049DE  0012               	return		;funcret
 11673  0049E0                     __end_of_TFT_GreenTab_Initialize:
 11674                           	opt stack 0
 11675                           tblptru	equ	0xFF8
 11676                           tblptrh	equ	0xFF7
 11677                           tblptrl	equ	0xFF6
 11678                           tablat	equ	0xFF5
 11679                           prodh	equ	0xFF4
 11680                           prodl	equ	0xFF3
 11681                           intcon	equ	0xFF2
 11682                           intcon2	equ	0xFF1
 11683                           postinc0	equ	0xFEE
 11684                           wreg	equ	0xFE8
 11685                           postdec1	equ	0xFE5
 11686                           fsr1l	equ	0xFE1
 11687                           indf2	equ	0xFDF
 11688                           postinc2	equ	0xFDE
 11689                           fsr2h	equ	0xFDA
 11690                           fsr2l	equ	0xFD9
 11691                           status	equ	0xFD8
 11692                           
 11693 ;; *************** function _Rcmd3 *****************
 11694 ;; Defined at:
 11695 ;;		line 338 in file "ST7735.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;		None
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;		None
 11700 ;; Return value:  Size  Location     Type
 11701 ;;		None               void
 11702 ;; Registers used:
 11703 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11704 ;; Tracked objects:
 11705 ;;		On entry : 0/0
 11706 ;;		On exit  : 0/0
 11707 ;;		Unchanged: 0/0
 11708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11713 ;;Total ram usage:        0 bytes
 11714 ;; Hardware stack levels used:    1
 11715 ;; Hardware stack levels required when called:    6
 11716 ;; This function calls:
 11717 ;;		_delay_ms
 11718 ;;		_write_command
 11719 ;;		_write_data
 11720 ;; This function is called by:
 11721 ;;		_TFT_GreenTab_Initialize
 11722 ;;		_TFT_BlackTab_Initialize
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           	psect	text49
 11727  0030CE                     __ptext49:
 11728                           	opt stack 0
 11729  0030CE                     _Rcmd3:
 11730                           	opt stack 22
 11731                           
 11732                           ;ST7735.c: 340: write_command(0xE0);
 11733                           
 11734                           ;incstack = 0
 11735  0030CE  0EE0               	movlw	224
 11736  0030D0  EC62  F026         	call	_write_command
 11737                           
 11738                           ;ST7735.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x12);
 11739  0030D4  0E02               	movlw	2
 11740  0030D6  EC58  F026         	call	_write_data
 11741  0030DA  0E1C               	movlw	28
 11742  0030DC  EC58  F026         	call	_write_data
 11743  0030E0  0E07               	movlw	7
 11744  0030E2  EC58  F026         	call	_write_data
 11745  0030E6  0E12               	movlw	18
 11746  0030E8  EC58  F026         	call	_write_data
 11747                           
 11748                           ;ST7735.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2D);
 11749  0030EC  0E37               	movlw	55
 11750  0030EE  EC58  F026         	call	_write_data
 11751  0030F2  0E32               	movlw	50
 11752  0030F4  EC58  F026         	call	_write_data
 11753  0030F8  0E29               	movlw	41
 11754  0030FA  EC58  F026         	call	_write_data
 11755  0030FE  0E2D               	movlw	45
 11756  003100  EC58  F026         	call	_write_data
 11757                           
 11758                           ;ST7735.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x39);
 11759  003104  0E29               	movlw	41
 11760  003106  EC58  F026         	call	_write_data
 11761  00310A  0E25               	movlw	37
 11762  00310C  EC58  F026         	call	_write_data
 11763  003110  0E2B               	movlw	43
 11764  003112  EC58  F026         	call	_write_data
 11765  003116  0E39               	movlw	57
 11766  003118  EC58  F026         	call	_write_data
 11767                           
 11768                           ;ST7735.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x10);
 11769  00311C  0E00               	movlw	0
 11770  00311E  EC58  F026         	call	_write_data
 11771  003122  0E01               	movlw	1
 11772  003124  EC58  F026         	call	_write_data
 11773  003128  0E03               	movlw	3
 11774  00312A  EC58  F026         	call	_write_data
 11775  00312E  0E10               	movlw	16
 11776  003130  EC58  F026         	call	_write_data
 11777                           
 11778                           ;ST7735.c: 345: write_command(0xE1);
 11779  003134  0EE1               	movlw	225
 11780  003136  EC62  F026         	call	_write_command
 11781                           
 11782                           ;ST7735.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x06);
 11783  00313A  0E03               	movlw	3
 11784  00313C  EC58  F026         	call	_write_data
 11785  003140  0E1D               	movlw	29
 11786  003142  EC58  F026         	call	_write_data
 11787  003146  0E07               	movlw	7
 11788  003148  EC58  F026         	call	_write_data
 11789  00314C  0E06               	movlw	6
 11790  00314E  EC58  F026         	call	_write_data
 11791                           
 11792                           ;ST7735.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2D);
 11793  003152  0E2E               	movlw	46
 11794  003154  EC58  F026         	call	_write_data
 11795  003158  0E2C               	movlw	44
 11796  00315A  EC58  F026         	call	_write_data
 11797  00315E  0E29               	movlw	41
 11798  003160  EC58  F026         	call	_write_data
 11799  003164  0E2D               	movlw	45
 11800  003166  EC58  F026         	call	_write_data
 11801                           
 11802                           ;ST7735.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3F);
 11803  00316A  0E2E               	movlw	46
 11804  00316C  EC58  F026         	call	_write_data
 11805  003170  0E2E               	movlw	46
 11806  003172  EC58  F026         	call	_write_data
 11807  003176  0E37               	movlw	55
 11808  003178  EC58  F026         	call	_write_data
 11809  00317C  0E3F               	movlw	63
 11810  00317E  EC58  F026         	call	_write_data
 11811                           
 11812                           ;ST7735.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x10);
 11813  003182  0E00               	movlw	0
 11814  003184  EC58  F026         	call	_write_data
 11815  003188  0E00               	movlw	0
 11816  00318A  EC58  F026         	call	_write_data
 11817  00318E  0E02               	movlw	2
 11818  003190  EC58  F026         	call	_write_data
 11819  003194  0E10               	movlw	16
 11820  003196  EC58  F026         	call	_write_data
 11821                           
 11822                           ;ST7735.c: 350: write_command(0x13);
 11823  00319A  0E13               	movlw	19
 11824  00319C  EC62  F026         	call	_write_command
 11825                           
 11826                           ;ST7735.c: 351: delay_ms(10);
 11827  0031A0  0E00               	movlw	0
 11828  0031A2  0100               	movlb	0	; () banked
 11829  0031A4  6FD4               	movwf	(delay_ms@ms+1)& (0+255),b
 11830  0031A6  0E0A               	movlw	10
 11831  0031A8  6FD3               	movwf	delay_ms@ms& (0+255),b
 11832  0031AA  EC87  F021         	call	_delay_ms	;wreg free
 11833                           
 11834                           ;ST7735.c: 352: write_command(0x29);
 11835  0031AE  0E29               	movlw	41
 11836  0031B0  EC62  F026         	call	_write_command
 11837                           
 11838                           ;ST7735.c: 353: delay_ms(100);
 11839  0031B4  0E00               	movlw	0
 11840  0031B6  0100               	movlb	0	; () banked
 11841  0031B8  6FD4               	movwf	(delay_ms@ms+1)& (0+255),b
 11842  0031BA  0E64               	movlw	100
 11843  0031BC  6FD3               	movwf	delay_ms@ms& (0+255),b
 11844  0031BE  EC87  F021         	call	_delay_ms	;wreg free
 11845  0031C2  0012               	return		;funcret
 11846  0031C4                     __end_of_Rcmd3:
 11847                           	opt stack 0
 11848                           tblptru	equ	0xFF8
 11849                           tblptrh	equ	0xFF7
 11850                           tblptrl	equ	0xFF6
 11851                           tablat	equ	0xFF5
 11852                           prodh	equ	0xFF4
 11853                           prodl	equ	0xFF3
 11854                           intcon	equ	0xFF2
 11855                           intcon2	equ	0xFF1
 11856                           postinc0	equ	0xFEE
 11857                           wreg	equ	0xFE8
 11858                           postdec1	equ	0xFE5
 11859                           fsr1l	equ	0xFE1
 11860                           indf2	equ	0xFDF
 11861                           postinc2	equ	0xFDE
 11862                           fsr2h	equ	0xFDA
 11863                           fsr2l	equ	0xFD9
 11864                           status	equ	0xFD8
 11865                           
 11866 ;; *************** function _Rcmd2red *****************
 11867 ;; Defined at:
 11868 ;;		line 328 in file "ST7735.c"
 11869 ;; Parameters:    Size  Location     Type
 11870 ;;		None
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;		None
 11873 ;; Return value:  Size  Location     Type
 11874 ;;		None               void
 11875 ;; Registers used:
 11876 ;;		wreg, status,2, cstack
 11877 ;; Tracked objects:
 11878 ;;		On entry : 0/0
 11879 ;;		On exit  : 0/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11886 ;;Total ram usage:        0 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    6
 11889 ;; This function calls:
 11890 ;;		_write_command
 11891 ;;		_write_data
 11892 ;; This function is called by:
 11893 ;;		_TFT_GreenTab_Initialize
 11894 ;; This function uses a non-reentrant model
 11895 ;;
 11896                           
 11897                           	psect	text50
 11898  0047D2                     __ptext50:
 11899                           	opt stack 0
 11900  0047D2                     _Rcmd2red:
 11901                           	opt stack 22
 11902                           
 11903                           ;ST7735.c: 330: write_command(0x2A);
 11904                           
 11905                           ;incstack = 0
 11906  0047D2  0E2A               	movlw	42
 11907  0047D4  EC62  F026         	call	_write_command
 11908                           
 11909                           ;ST7735.c: 331: write_data(0x00); write_data(0x00);
 11910  0047D8  0E00               	movlw	0
 11911  0047DA  EC58  F026         	call	_write_data
 11912  0047DE  0E00               	movlw	0
 11913  0047E0  EC58  F026         	call	_write_data
 11914                           
 11915                           ;ST7735.c: 332: write_data(0x00); write_data(0x7F);
 11916  0047E4  0E00               	movlw	0
 11917  0047E6  EC58  F026         	call	_write_data
 11918  0047EA  0E7F               	movlw	127
 11919  0047EC  EC58  F026         	call	_write_data
 11920                           
 11921                           ;ST7735.c: 333: write_command(0x2B);
 11922  0047F0  0E2B               	movlw	43
 11923  0047F2  EC62  F026         	call	_write_command
 11924                           
 11925                           ;ST7735.c: 334: write_data(0x00); write_data(0x00);
 11926  0047F6  0E00               	movlw	0
 11927  0047F8  EC58  F026         	call	_write_data
 11928  0047FC  0E00               	movlw	0
 11929  0047FE  EC58  F026         	call	_write_data
 11930                           
 11931                           ;ST7735.c: 335: write_data(0x00); write_data(0x9F);
 11932  004802  0E00               	movlw	0
 11933  004804  EC58  F026         	call	_write_data
 11934  004808  0E9F               	movlw	159
 11935  00480A  EC58  F026         	call	_write_data
 11936  00480E  0012               	return		;funcret
 11937  004810                     __end_of_Rcmd2red:
 11938                           	opt stack 0
 11939                           tblptru	equ	0xFF8
 11940                           tblptrh	equ	0xFF7
 11941                           tblptrl	equ	0xFF6
 11942                           tablat	equ	0xFF5
 11943                           prodh	equ	0xFF4
 11944                           prodl	equ	0xFF3
 11945                           intcon	equ	0xFF2
 11946                           intcon2	equ	0xFF1
 11947                           postinc0	equ	0xFEE
 11948                           wreg	equ	0xFE8
 11949                           postdec1	equ	0xFE5
 11950                           fsr1l	equ	0xFE1
 11951                           indf2	equ	0xFDF
 11952                           postinc2	equ	0xFDE
 11953                           fsr2h	equ	0xFDA
 11954                           fsr2l	equ	0xFD9
 11955                           status	equ	0xFD8
 11956                           
 11957 ;; *************** function _Rcmd1 *****************
 11958 ;; Defined at:
 11959 ;;		line 281 in file "ST7735.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;		None
 11962 ;; Auto vars:     Size  Location     Type
 11963 ;;		None
 11964 ;; Return value:  Size  Location     Type
 11965 ;;		None               void
 11966 ;; Registers used:
 11967 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11968 ;; Tracked objects:
 11969 ;;		On entry : 0/0
 11970 ;;		On exit  : 0/0
 11971 ;;		Unchanged: 0/0
 11972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11977 ;;Total ram usage:        0 bytes
 11978 ;; Hardware stack levels used:    1
 11979 ;; Hardware stack levels required when called:    6
 11980 ;; This function calls:
 11981 ;;		_delay_ms
 11982 ;;		_write_command
 11983 ;;		_write_data
 11984 ;; This function is called by:
 11985 ;;		_TFT_GreenTab_Initialize
 11986 ;;		_TFT_BlackTab_Initialize
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           	psect	text51
 11991  002EB8                     __ptext51:
 11992                           	opt stack 0
 11993  002EB8                     _Rcmd1:
 11994                           	opt stack 22
 11995                           
 11996                           ;ST7735.c: 283: write_command(0x01);
 11997                           
 11998                           ;incstack = 0
 11999  002EB8  0E01               	movlw	1
 12000  002EBA  EC62  F026         	call	_write_command
 12001                           
 12002                           ;ST7735.c: 284: delay_ms(150);
 12003  002EBE  0E00               	movlw	0
 12004  002EC0  0100               	movlb	0	; () banked
 12005  002EC2  6FD4               	movwf	(delay_ms@ms+1)& (0+255),b
 12006  002EC4  0E96               	movlw	150
 12007  002EC6  6FD3               	movwf	delay_ms@ms& (0+255),b
 12008  002EC8  EC87  F021         	call	_delay_ms	;wreg free
 12009                           
 12010                           ;ST7735.c: 285: write_command(0x11);
 12011  002ECC  0E11               	movlw	17
 12012  002ECE  EC62  F026         	call	_write_command
 12013                           
 12014                           ;ST7735.c: 286: delay_ms(500);
 12015  002ED2  0E01               	movlw	1
 12016  002ED4  0100               	movlb	0	; () banked
 12017  002ED6  6FD4               	movwf	(delay_ms@ms+1)& (0+255),b
 12018  002ED8  0EF4               	movlw	244
 12019  002EDA  6FD3               	movwf	delay_ms@ms& (0+255),b
 12020  002EDC  EC87  F021         	call	_delay_ms	;wreg free
 12021                           
 12022                           ;ST7735.c: 287: write_command(0xB1);
 12023  002EE0  0EB1               	movlw	177
 12024  002EE2  EC62  F026         	call	_write_command
 12025                           
 12026                           ;ST7735.c: 288: write_data(0x01);
 12027  002EE6  0E01               	movlw	1
 12028  002EE8  EC58  F026         	call	_write_data
 12029                           
 12030                           ;ST7735.c: 289: write_data(0x2C);
 12031  002EEC  0E2C               	movlw	44
 12032  002EEE  EC58  F026         	call	_write_data
 12033                           
 12034                           ;ST7735.c: 290: write_data(0x2D);
 12035  002EF2  0E2D               	movlw	45
 12036  002EF4  EC58  F026         	call	_write_data
 12037                           
 12038                           ;ST7735.c: 291: write_command(0xB2);
 12039  002EF8  0EB2               	movlw	178
 12040  002EFA  EC62  F026         	call	_write_command
 12041                           
 12042                           ;ST7735.c: 292: write_data(0x01);
 12043  002EFE  0E01               	movlw	1
 12044  002F00  EC58  F026         	call	_write_data
 12045                           
 12046                           ;ST7735.c: 293: write_data(0x2C);
 12047  002F04  0E2C               	movlw	44
 12048  002F06  EC58  F026         	call	_write_data
 12049                           
 12050                           ;ST7735.c: 294: write_data(0x2D);
 12051  002F0A  0E2D               	movlw	45
 12052  002F0C  EC58  F026         	call	_write_data
 12053                           
 12054                           ;ST7735.c: 295: write_command(0xB3);
 12055  002F10  0EB3               	movlw	179
 12056  002F12  EC62  F026         	call	_write_command
 12057                           
 12058                           ;ST7735.c: 296: write_data(0x01);
 12059  002F16  0E01               	movlw	1
 12060  002F18  EC58  F026         	call	_write_data
 12061                           
 12062                           ;ST7735.c: 297: write_data(0x2C);
 12063  002F1C  0E2C               	movlw	44
 12064  002F1E  EC58  F026         	call	_write_data
 12065                           
 12066                           ;ST7735.c: 298: write_data(0x2D);
 12067  002F22  0E2D               	movlw	45
 12068  002F24  EC58  F026         	call	_write_data
 12069                           
 12070                           ;ST7735.c: 299: write_data(0x01);
 12071  002F28  0E01               	movlw	1
 12072  002F2A  EC58  F026         	call	_write_data
 12073                           
 12074                           ;ST7735.c: 300: write_data(0x2C);
 12075  002F2E  0E2C               	movlw	44
 12076  002F30  EC58  F026         	call	_write_data
 12077                           
 12078                           ;ST7735.c: 301: write_data(0x2D);
 12079  002F34  0E2D               	movlw	45
 12080  002F36  EC58  F026         	call	_write_data
 12081                           
 12082                           ;ST7735.c: 302: write_command(0xB4);
 12083  002F3A  0EB4               	movlw	180
 12084  002F3C  EC62  F026         	call	_write_command
 12085                           
 12086                           ;ST7735.c: 303: write_data(0x07);
 12087  002F40  0E07               	movlw	7
 12088  002F42  EC58  F026         	call	_write_data
 12089                           
 12090                           ;ST7735.c: 304: write_command(0xC0);
 12091  002F46  0EC0               	movlw	192
 12092  002F48  EC62  F026         	call	_write_command
 12093                           
 12094                           ;ST7735.c: 305: write_data(0xA2);
 12095  002F4C  0EA2               	movlw	162
 12096  002F4E  EC58  F026         	call	_write_data
 12097                           
 12098                           ;ST7735.c: 306: write_data(0x02);
 12099  002F52  0E02               	movlw	2
 12100  002F54  EC58  F026         	call	_write_data
 12101                           
 12102                           ;ST7735.c: 307: write_data(0x84);
 12103  002F58  0E84               	movlw	132
 12104  002F5A  EC58  F026         	call	_write_data
 12105                           
 12106                           ;ST7735.c: 308: write_command(0xC1);
 12107  002F5E  0EC1               	movlw	193
 12108  002F60  EC62  F026         	call	_write_command
 12109                           
 12110                           ;ST7735.c: 309: write_data(0xC5);
 12111  002F64  0EC5               	movlw	197
 12112  002F66  EC58  F026         	call	_write_data
 12113                           
 12114                           ;ST7735.c: 310: write_command(0xC2);
 12115  002F6A  0EC2               	movlw	194
 12116  002F6C  EC62  F026         	call	_write_command
 12117                           
 12118                           ;ST7735.c: 311: write_data(0x0A);
 12119  002F70  0E0A               	movlw	10
 12120  002F72  EC58  F026         	call	_write_data
 12121                           
 12122                           ;ST7735.c: 312: write_data(0x00);
 12123  002F76  0E00               	movlw	0
 12124  002F78  EC58  F026         	call	_write_data
 12125                           
 12126                           ;ST7735.c: 313: write_command(0xC3);
 12127  002F7C  0EC3               	movlw	195
 12128  002F7E  EC62  F026         	call	_write_command
 12129                           
 12130                           ;ST7735.c: 314: write_data(0x8A);
 12131  002F82  0E8A               	movlw	138
 12132  002F84  EC58  F026         	call	_write_data
 12133                           
 12134                           ;ST7735.c: 315: write_data(0x2A);
 12135  002F88  0E2A               	movlw	42
 12136  002F8A  EC58  F026         	call	_write_data
 12137                           
 12138                           ;ST7735.c: 316: write_command(0xC4);
 12139  002F8E  0EC4               	movlw	196
 12140  002F90  EC62  F026         	call	_write_command
 12141                           
 12142                           ;ST7735.c: 317: write_data(0x8A);
 12143  002F94  0E8A               	movlw	138
 12144  002F96  EC58  F026         	call	_write_data
 12145                           
 12146                           ;ST7735.c: 318: write_data(0xEE);
 12147  002F9A  0EEE               	movlw	238
 12148  002F9C  EC58  F026         	call	_write_data
 12149                           
 12150                           ;ST7735.c: 319: write_command(0xC5);
 12151  002FA0  0EC5               	movlw	197
 12152  002FA2  EC62  F026         	call	_write_command
 12153                           
 12154                           ;ST7735.c: 320: write_data(0x0E);
 12155  002FA6  0E0E               	movlw	14
 12156  002FA8  EC58  F026         	call	_write_data
 12157                           
 12158                           ;ST7735.c: 321: write_command(0x20);
 12159  002FAC  0E20               	movlw	32
 12160  002FAE  EC62  F026         	call	_write_command
 12161                           
 12162                           ;ST7735.c: 322: write_command(0x36);
 12163  002FB2  0E36               	movlw	54
 12164  002FB4  EC62  F026         	call	_write_command
 12165                           
 12166                           ;ST7735.c: 323: write_data(0xC8);
 12167  002FB8  0EC8               	movlw	200
 12168  002FBA  EC58  F026         	call	_write_data
 12169                           
 12170                           ;ST7735.c: 324: write_command(0x3A);
 12171  002FBE  0E3A               	movlw	58
 12172  002FC0  EC62  F026         	call	_write_command
 12173                           
 12174                           ;ST7735.c: 325: write_data(0x05);
 12175  002FC4  0E05               	movlw	5
 12176  002FC6  EC58  F026         	call	_write_data
 12177  002FCA  0012               	return		;funcret
 12178  002FCC                     __end_of_Rcmd1:
 12179                           	opt stack 0
 12180                           tblptru	equ	0xFF8
 12181                           tblptrh	equ	0xFF7
 12182                           tblptrl	equ	0xFF6
 12183                           tablat	equ	0xFF5
 12184                           prodh	equ	0xFF4
 12185                           prodl	equ	0xFF3
 12186                           intcon	equ	0xFF2
 12187                           intcon2	equ	0xFF1
 12188                           postinc0	equ	0xFEE
 12189                           wreg	equ	0xFE8
 12190                           postdec1	equ	0xFE5
 12191                           fsr1l	equ	0xFE1
 12192                           indf2	equ	0xFDF
 12193                           postinc2	equ	0xFDE
 12194                           fsr2h	equ	0xFDA
 12195                           fsr2l	equ	0xFD9
 12196                           status	equ	0xFD8
 12197                           
 12198 ;; *************** function _LCD_Reset *****************
 12199 ;; Defined at:
 12200 ;;		line 217 in file "ST7735.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;		None
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;		None
 12205 ;; Return value:  Size  Location     Type
 12206 ;;		None               void
 12207 ;; Registers used:
 12208 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12218 ;;Total ram usage:        0 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    6
 12221 ;; This function calls:
 12222 ;;		_delay_ms
 12223 ;; This function is called by:
 12224 ;;		_Initialize_Screen
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           	psect	text52
 12229  004C9C                     __ptext52:
 12230                           	opt stack 0
 12231  004C9C                     _LCD_Reset:
 12232                           	opt stack 23
 12233                           
 12234                           ;ST7735.c: 219: PORTDbits.RD2 = 0;
 12235                           
 12236                           ;incstack = 0
 12237  004C9C  9483               	bcf	3971,2,c	;volatile
 12238                           
 12239                           ;ST7735.c: 220: delay_ms(100);
 12240  004C9E  0E00               	movlw	0
 12241  004CA0  0100               	movlb	0	; () banked
 12242  004CA2  6FD4               	movwf	(delay_ms@ms+1)& (0+255),b
 12243  004CA4  0E64               	movlw	100
 12244  004CA6  6FD3               	movwf	delay_ms@ms& (0+255),b
 12245  004CA8  EC87  F021         	call	_delay_ms	;wreg free
 12246                           
 12247                           ;ST7735.c: 221: PORTDbits.RD2 = 1;
 12248  004CAC  8483               	bsf	3971,2,c	;volatile
 12249  004CAE  0012               	return		;funcret
 12250  004CB0                     __end_of_LCD_Reset:
 12251                           	opt stack 0
 12252                           tblptru	equ	0xFF8
 12253                           tblptrh	equ	0xFF7
 12254                           tblptrl	equ	0xFF6
 12255                           tablat	equ	0xFF5
 12256                           prodh	equ	0xFF4
 12257                           prodl	equ	0xFF3
 12258                           intcon	equ	0xFF2
 12259                           intcon2	equ	0xFF1
 12260                           postinc0	equ	0xFEE
 12261                           wreg	equ	0xFE8
 12262                           postdec1	equ	0xFE5
 12263                           fsr1l	equ	0xFE1
 12264                           indf2	equ	0xFDF
 12265                           postinc2	equ	0xFDE
 12266                           fsr2h	equ	0xFDA
 12267                           fsr2l	equ	0xFD9
 12268                           status	equ	0xFD8
 12269                           
 12270 ;; *************** function _delay_ms *****************
 12271 ;; Defined at:
 12272 ;;		line 64 in file "ST7735.c"
 12273 ;; Parameters:    Size  Location     Type
 12274 ;;  ms              2    6[BANK0 ] int 
 12275 ;; Auto vars:     Size  Location     Type
 12276 ;;  count           2   10[BANK0 ] int 
 12277 ;; Return value:  Size  Location     Type
 12278 ;;		None               void
 12279 ;; Registers used:
 12280 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12286 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12289 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;Total ram usage:        6 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    5
 12293 ;; This function calls:
 12294 ;;		___wmul
 12295 ;; This function is called by:
 12296 ;;		_LCD_Reset
 12297 ;;		_Rcmd1
 12298 ;;		_Rcmd3
 12299 ;;		_Bcmd
 12300 ;; This function uses a non-reentrant model
 12301 ;;
 12302                           
 12303                           	psect	text53
 12304  00430E                     __ptext53:
 12305                           	opt stack 0
 12306  00430E                     _delay_ms:
 12307                           	opt stack 22
 12308                           
 12309                           ;ST7735.c: 70: int count;
 12310                           ;ST7735.c: 71: count = 8000000/4000/16 * ms;
 12311                           
 12312                           ;incstack = 0
 12313  00430E  C0D3  F0CD         	movff	delay_ms@ms,___wmul@multiplier
 12314  004312  C0D4  F0CE         	movff	delay_ms@ms+1,___wmul@multiplier+1
 12315  004316  0E00               	movlw	0
 12316  004318  0100               	movlb	0	; () banked
 12317  00431A  6FD0               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12318  00431C  0E7D               	movlw	125
 12319  00431E  6FCF               	movwf	___wmul@multiplicand& (0+255),b
 12320  004320  EC45  F024         	call	___wmul	;wreg free
 12321  004324  C0CD  F0D7         	movff	?___wmul,delay_ms@count
 12322  004328  C0CE  F0D8         	movff	?___wmul+1,delay_ms@count+1
 12323                           
 12324                           ;ST7735.c: 72: count = (0xffff - count);
 12325  00432C  C0D7  F0D5         	movff	delay_ms@count,??_delay_ms
 12326  004330  C0D8  F0D6         	movff	delay_ms@count+1,??_delay_ms+1
 12327  004334  0100               	movlb	0	; () banked
 12328  004336  1FD5               	comf	??_delay_ms& (0+255),f,b
 12329  004338  1FD6               	comf	(??_delay_ms+1)& (0+255),f,b
 12330  00433A  4BD5               	infsnz	??_delay_ms& (0+255),f,b
 12331  00433C  2BD6               	incf	(??_delay_ms+1)& (0+255),f,b
 12332  00433E  0EFF               	movlw	255
 12333  004340  0100               	movlb	0	; () banked
 12334  004342  25D5               	addwf	??_delay_ms& (0+255),w,b
 12335  004344  0100               	movlb	0	; () banked
 12336  004346  6FD7               	movwf	delay_ms@count& (0+255),b
 12337  004348  0EFF               	movlw	255
 12338  00434A  0100               	movlb	0	; () banked
 12339  00434C  21D6               	addwfc	(??_delay_ms+1)& (0+255),w,b
 12340  00434E  0100               	movlb	0	; () banked
 12341  004350  6FD8               	movwf	(delay_ms@count+1)& (0+255),b
 12342                           
 12343                           ; BSR set to: 0
 12344                           ;ST7735.c: 74: T0CON = 0x03;
 12345  004352  0E03               	movlw	3
 12346  004354  6ED5               	movwf	4053,c	;volatile
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;ST7735.c: 76: TMR0L = count & 0x00ff;
 12350  004356  C0D7  FFD6         	movff	delay_ms@count,4054	;volatile
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;ST7735.c: 77: TMR0H = count >> 8;
 12354  00435A  0100               	movlb	0	; () banked
 12355  00435C  51D8               	movf	(delay_ms@count+1)& (0+255),w,b
 12356  00435E  6ED7               	movwf	4055,c	;volatile
 12357                           
 12358                           ; BSR set to: 0
 12359                           ;ST7735.c: 79: INTCONbits.TMR0IF = 0;
 12360  004360  94F2               	bcf	intcon,2,c	;volatile
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;ST7735.c: 80: T0CONbits.TMR0ON = 1;
 12364  004362  8ED5               	bsf	4053,7,c	;volatile
 12365                           
 12366                           ;ST7735.c: 82: while (INTCONbits.TMR0IF == 0);
 12367  004364  D000               	goto	l1192
 12368  004366                     l1192:
 12369  004366  A4F2               	btfss	intcon,2,c	;volatile
 12370  004368  D7FE               	goto	l1192
 12371                           
 12372                           ;ST7735.c: 83: T0CONbits.TMR0ON = 0;
 12373  00436A  9ED5               	bcf	4053,7,c	;volatile
 12374  00436C  0012               	return		;funcret
 12375  00436E                     __end_of_delay_ms:
 12376                           	opt stack 0
 12377                           tblptru	equ	0xFF8
 12378                           tblptrh	equ	0xFF7
 12379                           tblptrl	equ	0xFF6
 12380                           tablat	equ	0xFF5
 12381                           prodh	equ	0xFF4
 12382                           prodl	equ	0xFF3
 12383                           intcon	equ	0xFF2
 12384                           intcon2	equ	0xFF1
 12385                           postinc0	equ	0xFEE
 12386                           wreg	equ	0xFE8
 12387                           postdec1	equ	0xFE5
 12388                           fsr1l	equ	0xFE1
 12389                           indf2	equ	0xFDF
 12390                           postinc2	equ	0xFDE
 12391                           fsr2h	equ	0xFDA
 12392                           fsr2l	equ	0xFD9
 12393                           status	equ	0xFD8
 12394                           
 12395 ;; *************** function _DS3231_Write_Alarm_Time *****************
 12396 ;; Defined at:
 12397 ;;		line 169 in file "I2C_Support.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;		None
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;  Address         1   35[BANK1 ] unsigned char 
 12402 ;;  Device          1   34[BANK1 ] unsigned char 
 12403 ;; Return value:  Size  Location     Type
 12404 ;;		None               void
 12405 ;; Registers used:
 12406 ;;		wreg, status,2, status,0, cstack
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12415 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;Total ram usage:        2 bytes
 12417 ;; Hardware stack levels used:    1
 12418 ;; Hardware stack levels required when called:    8
 12419 ;; This function calls:
 12420 ;;		_DS3231_Read_Time
 12421 ;;		_I2C_Start
 12422 ;;		_I2C_Stop
 12423 ;;		_I2C_Write
 12424 ;;		_dec_2_bcd
 12425 ;; This function is called by:
 12426 ;;		_Do_Save_New_Alarm_Time
 12427 ;; This function uses a non-reentrant model
 12428 ;;
 12429                           
 12430                           	psect	text54
 12431  003D34                     __ptext54:
 12432                           	opt stack 0
 12433  003D34                     _DS3231_Write_Alarm_Time:
 12434                           	opt stack 20
 12435                           
 12436                           ;I2C_Support.c: 171: DS3231_Read_Time();
 12437                           
 12438                           ;incstack = 0
 12439  003D34  EC62  F01F         	call	_DS3231_Read_Time	;wreg free
 12440                           
 12441                           ;I2C_Support.c: 172: alarm_date = day;
 12442  003D38  C088  F04F         	movff	_day,_alarm_date
 12443                           
 12444                           ;I2C_Support.c: 173: char Device = 0x68;
 12445  003D3C  0E68               	movlw	104
 12446  003D3E  0101               	movlb	1	; () banked
 12447  003D40  6F7A               	movwf	DS3231_Write_Alarm_Time@Device& (0+255),b
 12448                           
 12449                           ; BSR set to: 1
 12450                           ;I2C_Support.c: 174: char Address = 0x07;
 12451  003D42  0E07               	movlw	7
 12452  003D44  0101               	movlb	1	; () banked
 12453  003D46  6F7B               	movwf	DS3231_Write_Alarm_Time@Address& (0+255),b
 12454                           
 12455                           ;I2C_Support.c: 175: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12456  003D48  0100               	movlb	0	; () banked
 12457  003D4A  51F6               	movf	_setup_alarm_hour& (0+255),w,b
 12458  003D4C  EC15  F020         	call	_dec_2_bcd
 12459  003D50  0101               	movlb	1	; () banked
 12460  003D52  5173               	movf	?_dec_2_bcd& (0+255),w,b
 12461  003D54  6E50               	movwf	_alarm_hour,c
 12462                           
 12463                           ;I2C_Support.c: 176: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12464  003D56  0100               	movlb	0	; () banked
 12465  003D58  51F7               	movf	_setup_alarm_minute& (0+255),w,b
 12466  003D5A  EC15  F020         	call	_dec_2_bcd
 12467  003D5E  0101               	movlb	1	; () banked
 12468  003D60  5173               	movf	?_dec_2_bcd& (0+255),w,b
 12469  003D62  6E51               	movwf	_alarm_minute,c
 12470                           
 12471                           ;I2C_Support.c: 177: alarm_second = dec_2_bcd(setup_alarm_second);
 12472  003D64  0100               	movlb	0	; () banked
 12473  003D66  51F8               	movf	_setup_alarm_second& (0+255),w,b
 12474  003D68  EC15  F020         	call	_dec_2_bcd
 12475  003D6C  0101               	movlb	1	; () banked
 12476  003D6E  5173               	movf	?_dec_2_bcd& (0+255),w,b
 12477  003D70  6E52               	movwf	_alarm_second,c
 12478                           
 12479                           ; BSR set to: 1
 12480                           ;I2C_Support.c: 178: alarm_second = alarm_second & 0x7f;
 12481  003D72  5052               	movf	_alarm_second,w,c
 12482  003D74  0B7F               	andlw	127
 12483  003D76  6E52               	movwf	_alarm_second,c
 12484                           
 12485                           ; BSR set to: 1
 12486                           ;I2C_Support.c: 179: alarm_minute = alarm_minute & 0x7f;
 12487  003D78  5051               	movf	_alarm_minute,w,c
 12488  003D7A  0B7F               	andlw	127
 12489  003D7C  6E51               	movwf	_alarm_minute,c
 12490                           
 12491                           ; BSR set to: 1
 12492                           ;I2C_Support.c: 180: alarm_hour = alarm_hour & 0x7f;
 12493  003D7E  5050               	movf	_alarm_hour,w,c
 12494  003D80  0B7F               	andlw	127
 12495  003D82  6E50               	movwf	_alarm_hour,c
 12496                           
 12497                           ; BSR set to: 1
 12498                           ;I2C_Support.c: 181: alarm_date = alarm_date | 0x80;
 12499  003D84  504F               	movf	_alarm_date,w,c
 12500  003D86  0980               	iorlw	128
 12501  003D88  6E4F               	movwf	_alarm_date,c
 12502                           
 12503                           ; BSR set to: 1
 12504                           ;I2C_Support.c: 182: I2C_Start();
 12505  003D8A  ECAB  F026         	call	_I2C_Start	;wreg free
 12506                           
 12507                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
 12508  003D8E  0101               	movlb	1	; () banked
 12509  003D90  517A               	movf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12510  003D92  257A               	addwf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 12511  003D94  EC10  F023         	call	_I2C_Write
 12512                           
 12513                           ;I2C_Support.c: 184: I2C_Write(Address);
 12514  003D98  0101               	movlb	1	; () banked
 12515  003D9A  517B               	movf	DS3231_Write_Alarm_Time@Address& (0+255),w,b
 12516  003D9C  EC10  F023         	call	_I2C_Write
 12517                           
 12518                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
 12519  003DA0  5052               	movf	_alarm_second,w,c
 12520  003DA2  EC10  F023         	call	_I2C_Write
 12521                           
 12522                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
 12523  003DA6  5051               	movf	_alarm_minute,w,c
 12524  003DA8  EC10  F023         	call	_I2C_Write
 12525                           
 12526                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
 12527  003DAC  5050               	movf	_alarm_hour,w,c
 12528  003DAE  EC10  F023         	call	_I2C_Write
 12529                           
 12530                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
 12531  003DB2  504F               	movf	_alarm_date,w,c
 12532  003DB4  EC10  F023         	call	_I2C_Write
 12533                           
 12534                           ;I2C_Support.c: 190: I2C_Stop();
 12535  003DB8  ECA2  F026         	call	_I2C_Stop	;wreg free
 12536  003DBC  0012               	return		;funcret
 12537  003DBE                     __end_of_DS3231_Write_Alarm_Time:
 12538                           	opt stack 0
 12539                           tblptru	equ	0xFF8
 12540                           tblptrh	equ	0xFF7
 12541                           tblptrl	equ	0xFF6
 12542                           tablat	equ	0xFF5
 12543                           prodh	equ	0xFF4
 12544                           prodl	equ	0xFF3
 12545                           intcon	equ	0xFF2
 12546                           intcon2	equ	0xFF1
 12547                           postinc0	equ	0xFEE
 12548                           wreg	equ	0xFE8
 12549                           postdec1	equ	0xFE5
 12550                           fsr1l	equ	0xFE1
 12551                           indf2	equ	0xFDF
 12552                           postinc2	equ	0xFDE
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8
 12556                           
 12557 ;; *************** function _dec_2_bcd *****************
 12558 ;; Defined at:
 12559 ;;		line 55 in file "utils.c"
 12560 ;; Parameters:    Size  Location     Type
 12561 ;;  dec             1    wreg     unsigned char 
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;  dec             1   33[BANK1 ] unsigned char 
 12564 ;;  bcd             2   31[BANK1 ] int 
 12565 ;; Return value:  Size  Location     Type
 12566 ;;                  2   27[BANK1 ] int 
 12567 ;; Registers used:
 12568 ;;		wreg, status,2, status,0, cstack
 12569 ;; Tracked objects:
 12570 ;;		On entry : 0/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12574 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12578 ;;Total ram usage:        7 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; Hardware stack levels required when called:    5
 12581 ;; This function calls:
 12582 ;;		___awdiv
 12583 ;;		___awmod
 12584 ;; This function is called by:
 12585 ;;		_DS3231_Write_Time
 12586 ;;		_DS3231_Write_Alarm_Time
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           	psect	text55
 12591  00402A                     __ptext55:
 12592                           	opt stack 0
 12593  00402A                     _dec_2_bcd:
 12594                           	opt stack 22
 12595                           
 12596                           ;incstack = 0
 12597                           ;dec_2_bcd@dec stored from wreg
 12598  00402A  0101               	movlb	1	; () banked
 12599  00402C  6F79               	movwf	dec_2_bcd@dec& (0+255),b
 12600                           
 12601                           ; BSR set to: 1
 12602                           ;utils.c: 57: int bcd;
 12603                           ;utils.c: 58: bcd = ((dec / 10) << 4) + (dec % 10);
 12604  00402E  C179  F16B         	movff	dec_2_bcd@dec,___awdiv@dividend
 12605  004032  0101               	movlb	1	; () banked
 12606  004034  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
 12607  004036  0E00               	movlw	0
 12608  004038  0101               	movlb	1	; () banked
 12609  00403A  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
 12610  00403C  0E0A               	movlw	10
 12611  00403E  6F6D               	movwf	___awdiv@divisor& (0+255),b
 12612  004040  ECBE  F019         	call	___awdiv	;wreg free
 12613  004044  C16B  F175         	movff	?___awdiv,??_dec_2_bcd
 12614  004048  C16C  F176         	movff	?___awdiv+1,??_dec_2_bcd+1
 12615  00404C  0101               	movlb	1	; () banked
 12616  00404E  3B75               	swapf	??_dec_2_bcd& (0+255),f,b
 12617  004050  3B76               	swapf	(??_dec_2_bcd+1)& (0+255),f,b
 12618  004052  0EF0               	movlw	240
 12619  004054  1776               	andwf	(??_dec_2_bcd+1)& (0+255),f,b
 12620  004056  5175               	movf	??_dec_2_bcd& (0+255),w,b
 12621  004058  0B0F               	andlw	15
 12622  00405A  1376               	iorwf	(??_dec_2_bcd+1)& (0+255),f,b
 12623  00405C  0EF0               	movlw	240
 12624  00405E  1775               	andwf	??_dec_2_bcd& (0+255),f,b
 12625  004060  C179  F167         	movff	dec_2_bcd@dec,___awmod@dividend
 12626  004064  0101               	movlb	1	; () banked
 12627  004066  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
 12628  004068  0E00               	movlw	0
 12629  00406A  0101               	movlb	1	; () banked
 12630  00406C  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
 12631  00406E  0E0A               	movlw	10
 12632  004070  6F69               	movwf	___awmod@divisor& (0+255),b
 12633  004072  EC73  F01C         	call	___awmod	;wreg free
 12634  004076  0101               	movlb	1	; () banked
 12635  004078  5167               	movf	?___awmod& (0+255),w,b
 12636  00407A  0101               	movlb	1	; () banked
 12637  00407C  2575               	addwf	??_dec_2_bcd& (0+255),w,b
 12638  00407E  0101               	movlb	1	; () banked
 12639  004080  6F77               	movwf	dec_2_bcd@bcd& (0+255),b
 12640  004082  0101               	movlb	1	; () banked
 12641  004084  5168               	movf	(?___awmod+1)& (0+255),w,b
 12642  004086  0101               	movlb	1	; () banked
 12643  004088  2176               	addwfc	(??_dec_2_bcd+1)& (0+255),w,b
 12644  00408A  0101               	movlb	1	; () banked
 12645  00408C  6F78               	movwf	(dec_2_bcd@bcd+1)& (0+255),b
 12646                           
 12647                           ; BSR set to: 1
 12648                           ;utils.c: 59: return bcd;
 12649  00408E  C177  F173         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 12650  004092  C178  F174         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 12651  004096  D000               	goto	l1102
 12652  004098                     l1102:
 12653                           
 12654                           ; BSR set to: 1
 12655  004098  0012               	return		;funcret
 12656  00409A                     __end_of_dec_2_bcd:
 12657                           	opt stack 0
 12658                           tblptru	equ	0xFF8
 12659                           tblptrh	equ	0xFF7
 12660                           tblptrl	equ	0xFF6
 12661                           tablat	equ	0xFF5
 12662                           prodh	equ	0xFF4
 12663                           prodl	equ	0xFF3
 12664                           intcon	equ	0xFF2
 12665                           intcon2	equ	0xFF1
 12666                           postinc0	equ	0xFEE
 12667                           wreg	equ	0xFE8
 12668                           postdec1	equ	0xFE5
 12669                           fsr1l	equ	0xFE1
 12670                           indf2	equ	0xFDF
 12671                           postinc2	equ	0xFDE
 12672                           fsr2h	equ	0xFDA
 12673                           fsr2l	equ	0xFD9
 12674                           status	equ	0xFD8
 12675                           
 12676 ;; *************** function _DS3231_Read_Time *****************
 12677 ;; Defined at:
 12678 ;;		line 45 in file "I2C_Support.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;		None
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;  Device          1    4[BANK0 ] unsigned char 
 12683 ;;  Address         1    3[BANK0 ] unsigned char 
 12684 ;; Return value:  Size  Location     Type
 12685 ;;		None               void
 12686 ;; Registers used:
 12687 ;;		wreg, status,2, status,0, cstack
 12688 ;; Tracked objects:
 12689 ;;		On entry : 0/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;Total ram usage:        2 bytes
 12698 ;; Hardware stack levels used:    1
 12699 ;; Hardware stack levels required when called:    7
 12700 ;; This function calls:
 12701 ;;		_I2C_ReStart
 12702 ;;		_I2C_Read
 12703 ;;		_I2C_Start
 12704 ;;		_I2C_Stop
 12705 ;;		_I2C_Write
 12706 ;; This function is called by:
 12707 ;;		_DS3231_Write_Alarm_Time
 12708 ;;		_main
 12709 ;;		_Exit_Setup_Alarm_Time
 12710 ;;		_Do_Save_New_Alarm_Time
 12711 ;;		_Exit_Setup_Heater_Temp
 12712 ;;		_Do_Save_New_Heater_Temp
 12713 ;;		_Do_Setup_Time
 12714 ;;		_Do_Save_New_Time
 12715 ;;		_Exit_Time_Setup
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           	psect	text56
 12720  003EC4                     __ptext56:
 12721                           	opt stack 0
 12722  003EC4                     _DS3231_Read_Time:
 12723                           	opt stack 21
 12724                           
 12725                           ;I2C_Support.c: 47: char Device = 0x68;
 12726                           
 12727                           ; BSR set to: 1
 12728                           ;incstack = 0
 12729  003EC4  0E68               	movlw	104
 12730  003EC6  0100               	movlb	0	; () banked
 12731  003EC8  6FD1               	movwf	DS3231_Read_Time@Device& (0+255),b
 12732                           
 12733                           ;I2C_Support.c: 48: char Address = 0x00;
 12734  003ECA  0E00               	movlw	0
 12735  003ECC  0100               	movlb	0	; () banked
 12736  003ECE  6FD0               	movwf	DS3231_Read_Time@Address& (0+255),b
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;I2C_Support.c: 50: I2C_Start();
 12740  003ED0  ECAB  F026         	call	_I2C_Start	;wreg free
 12741                           
 12742                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 12743  003ED4  0100               	movlb	0	; () banked
 12744  003ED6  51D1               	movf	DS3231_Read_Time@Device& (0+255),w,b
 12745  003ED8  25D1               	addwf	DS3231_Read_Time@Device& (0+255),w,b
 12746  003EDA  EC10  F023         	call	_I2C_Write
 12747                           
 12748                           ;I2C_Support.c: 52: I2C_Write(Address);
 12749  003EDE  0100               	movlb	0	; () banked
 12750  003EE0  51D0               	movf	DS3231_Read_Time@Address& (0+255),w,b
 12751  003EE2  EC10  F023         	call	_I2C_Write
 12752                           
 12753                           ;I2C_Support.c: 53: I2C_ReStart();
 12754  003EE6  EC43  F026         	call	_I2C_ReStart	;wreg free
 12755                           
 12756                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 12757  003EEA  80D8               	bsf	status,0,c
 12758  003EEC  0100               	movlb	0	; () banked
 12759  003EEE  35D1               	rlcf	DS3231_Read_Time@Device& (0+255),w,b
 12760  003EF0  EC10  F023         	call	_I2C_Write
 12761                           
 12762                           ;I2C_Support.c: 55: second = I2C_Read(1);
 12763  003EF4  0E01               	movlw	1
 12764  003EF6  ECB7  F021         	call	_I2C_Read
 12765  003EFA  0100               	movlb	0	; () banked
 12766  003EFC  6FF5               	movwf	_second& (0+255),b
 12767                           
 12768                           ; BSR set to: 0
 12769                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 12770  003EFE  0E01               	movlw	1
 12771  003F00  ECB7  F021         	call	_I2C_Read
 12772  003F04  0100               	movlb	0	; () banked
 12773  003F06  6F8B               	movwf	_minute& (0+255),b
 12774                           
 12775                           ; BSR set to: 0
 12776                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 12777  003F08  0E01               	movlw	1
 12778  003F0A  ECB7  F021         	call	_I2C_Read
 12779  003F0E  0100               	movlb	0	; () banked
 12780  003F10  6F8A               	movwf	_hour& (0+255),b
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 12784  003F12  0E01               	movlw	1
 12785  003F14  ECB7  F021         	call	_I2C_Read
 12786  003F18  0100               	movlb	0	; () banked
 12787  003F1A  6F89               	movwf	_dow& (0+255),b
 12788                           
 12789                           ; BSR set to: 0
 12790                           ;I2C_Support.c: 59: day = I2C_Read(1);
 12791  003F1C  0E01               	movlw	1
 12792  003F1E  ECB7  F021         	call	_I2C_Read
 12793  003F22  0100               	movlb	0	; () banked
 12794  003F24  6F88               	movwf	_day& (0+255),b
 12795                           
 12796                           ; BSR set to: 0
 12797                           ;I2C_Support.c: 60: month = I2C_Read(1);
 12798  003F26  0E01               	movlw	1
 12799  003F28  ECB7  F021         	call	_I2C_Read
 12800  003F2C  0100               	movlb	0	; () banked
 12801  003F2E  6F8C               	movwf	_month& (0+255),b
 12802                           
 12803                           ; BSR set to: 0
 12804                           ;I2C_Support.c: 61: year = I2C_Read(0);
 12805  003F30  0E00               	movlw	0
 12806  003F32  ECB7  F021         	call	_I2C_Read
 12807  003F36  0100               	movlb	0	; () banked
 12808  003F38  6F8F               	movwf	_year& (0+255),b
 12809                           
 12810                           ; BSR set to: 0
 12811                           ;I2C_Support.c: 62: I2C_Stop();
 12812  003F3A  ECA2  F026         	call	_I2C_Stop	;wreg free
 12813  003F3E  0012               	return		;funcret
 12814  003F40                     __end_of_DS3231_Read_Time:
 12815                           	opt stack 0
 12816                           tblptru	equ	0xFF8
 12817                           tblptrh	equ	0xFF7
 12818                           tblptrl	equ	0xFF6
 12819                           tablat	equ	0xFF5
 12820                           prodh	equ	0xFF4
 12821                           prodl	equ	0xFF3
 12822                           intcon	equ	0xFF2
 12823                           intcon2	equ	0xFF1
 12824                           postinc0	equ	0xFEE
 12825                           wreg	equ	0xFE8
 12826                           postdec1	equ	0xFE5
 12827                           fsr1l	equ	0xFE1
 12828                           indf2	equ	0xFDF
 12829                           postinc2	equ	0xFDE
 12830                           fsr2h	equ	0xFDA
 12831                           fsr2l	equ	0xFD9
 12832                           status	equ	0xFD8
 12833                           
 12834 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12835 ;; Defined at:
 12836 ;;		line 115 in file "I2C_Support.c"
 12837 ;; Parameters:    Size  Location     Type
 12838 ;;		None
 12839 ;; Auto vars:     Size  Location     Type
 12840 ;;  Device          1    4[BANK0 ] unsigned char 
 12841 ;;  Address         1    3[BANK0 ] unsigned char 
 12842 ;; Return value:  Size  Location     Type
 12843 ;;		None               void
 12844 ;; Registers used:
 12845 ;;		wreg, status,2, status,0, cstack
 12846 ;; Tracked objects:
 12847 ;;		On entry : 0/0
 12848 ;;		On exit  : 0/0
 12849 ;;		Unchanged: 0/0
 12850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12855 ;;Total ram usage:        2 bytes
 12856 ;; Hardware stack levels used:    1
 12857 ;; Hardware stack levels required when called:    7
 12858 ;; This function calls:
 12859 ;;		_I2C_ReStart
 12860 ;;		_I2C_Read
 12861 ;;		_I2C_Start
 12862 ;;		_I2C_Stop
 12863 ;;		_I2C_Write
 12864 ;; This function is called by:
 12865 ;;		_main
 12866 ;;		_Do_Setup_Alarm_Time
 12867 ;;		_Do_Save_New_Alarm_Time
 12868 ;; This function uses a non-reentrant model
 12869 ;;
 12870                           
 12871                           	psect	text57
 12872  00452E                     __ptext57:
 12873                           	opt stack 0
 12874  00452E                     _DS3231_Read_Alarm_Time:
 12875                           	opt stack 21
 12876                           
 12877                           ;I2C_Support.c: 117: char Device = 0x68;
 12878                           
 12879                           ;incstack = 0
 12880  00452E  0E68               	movlw	104
 12881  004530  0100               	movlb	0	; () banked
 12882  004532  6FD1               	movwf	DS3231_Read_Alarm_Time@Device& (0+255),b
 12883                           
 12884                           ;I2C_Support.c: 118: char Address = 0x07;
 12885  004534  0E07               	movlw	7
 12886  004536  0100               	movlb	0	; () banked
 12887  004538  6FD0               	movwf	DS3231_Read_Alarm_Time@Address& (0+255),b
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;I2C_Support.c: 119: I2C_Start();
 12891  00453A  ECAB  F026         	call	_I2C_Start	;wreg free
 12892                           
 12893                           ;I2C_Support.c: 120: I2C_Write((Device << 1) | 0);
 12894  00453E  0100               	movlb	0	; () banked
 12895  004540  51D1               	movf	DS3231_Read_Alarm_Time@Device& (0+255),w,b
 12896  004542  25D1               	addwf	DS3231_Read_Alarm_Time@Device& (0+255),w,b
 12897  004544  EC10  F023         	call	_I2C_Write
 12898                           
 12899                           ;I2C_Support.c: 121: I2C_Write(Address);
 12900  004548  0100               	movlb	0	; () banked
 12901  00454A  51D0               	movf	DS3231_Read_Alarm_Time@Address& (0+255),w,b
 12902  00454C  EC10  F023         	call	_I2C_Write
 12903                           
 12904                           ;I2C_Support.c: 122: I2C_ReStart();
 12905  004550  EC43  F026         	call	_I2C_ReStart	;wreg free
 12906                           
 12907                           ;I2C_Support.c: 123: I2C_Write((Device << 1) | 1);
 12908  004554  80D8               	bsf	status,0,c
 12909  004556  0100               	movlb	0	; () banked
 12910  004558  35D1               	rlcf	DS3231_Read_Alarm_Time@Device& (0+255),w,b
 12911  00455A  EC10  F023         	call	_I2C_Write
 12912                           
 12913                           ;I2C_Support.c: 124: alarm_second = I2C_Read(1);
 12914  00455E  0E01               	movlw	1
 12915  004560  ECB7  F021         	call	_I2C_Read
 12916  004564  6E52               	movwf	_alarm_second,c
 12917                           
 12918                           ;I2C_Support.c: 125: alarm_minute = I2C_Read(1);
 12919  004566  0E01               	movlw	1
 12920  004568  ECB7  F021         	call	_I2C_Read
 12921  00456C  6E51               	movwf	_alarm_minute,c
 12922                           
 12923                           ;I2C_Support.c: 126: alarm_hour = I2C_Read(1);
 12924  00456E  0E01               	movlw	1
 12925  004570  ECB7  F021         	call	_I2C_Read
 12926  004574  6E50               	movwf	_alarm_hour,c
 12927                           
 12928                           ;I2C_Support.c: 127: alarm_date = I2C_Read(0);
 12929  004576  0E00               	movlw	0
 12930  004578  ECB7  F021         	call	_I2C_Read
 12931  00457C  6E4F               	movwf	_alarm_date,c
 12932                           
 12933                           ;I2C_Support.c: 128: I2C_Stop();
 12934  00457E  ECA2  F026         	call	_I2C_Stop	;wreg free
 12935  004582  0012               	return		;funcret
 12936  004584                     __end_of_DS3231_Read_Alarm_Time:
 12937                           	opt stack 0
 12938                           tblptru	equ	0xFF8
 12939                           tblptrh	equ	0xFF7
 12940                           tblptrl	equ	0xFF6
 12941                           tablat	equ	0xFF5
 12942                           prodh	equ	0xFF4
 12943                           prodl	equ	0xFF3
 12944                           intcon	equ	0xFF2
 12945                           intcon2	equ	0xFF1
 12946                           postinc0	equ	0xFEE
 12947                           wreg	equ	0xFE8
 12948                           postdec1	equ	0xFE5
 12949                           fsr1l	equ	0xFE1
 12950                           indf2	equ	0xFDF
 12951                           postinc2	equ	0xFDE
 12952                           fsr2h	equ	0xFDA
 12953                           fsr2l	equ	0xFD9
 12954                           status	equ	0xFD8
 12955                           
 12956 ;; *************** function _Do_Beep_Good *****************
 12957 ;; Defined at:
 12958 ;;		line 71 in file "utils.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;		None
 12961 ;; Auto vars:     Size  Location     Type
 12962 ;;		None
 12963 ;; Return value:  Size  Location     Type
 12964 ;;		None               void
 12965 ;; Registers used:
 12966 ;;		wreg, status,2, status,0, cstack
 12967 ;; Tracked objects:
 12968 ;;		On entry : 0/0
 12969 ;;		On exit  : 0/0
 12970 ;;		Unchanged: 0/0
 12971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12976 ;;Total ram usage:        0 bytes
 12977 ;; Hardware stack levels used:    1
 12978 ;; Hardware stack levels required when called:    7
 12979 ;; This function calls:
 12980 ;;		_Activate_Buzzer_2KHz
 12981 ;;		_Deactivate_Buzzer
 12982 ;;		_Wait_One_Sec
 12983 ;;		_do_update_pwm
 12984 ;; This function is called by:
 12985 ;;		_main
 12986 ;;		_Do_Setup_Alarm_Time
 12987 ;;		_Do_Setup_Heater_Temp
 12988 ;;		_Do_Setup_Time
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           	psect	text58
 12993  004C14                     __ptext58:
 12994                           	opt stack 0
 12995  004C14                     _Do_Beep_Good:
 12996                           	opt stack 22
 12997                           
 12998                           ;utils.c: 74: Activate_Buzzer_2KHz();
 12999                           
 13000                           ;incstack = 0
 13001  004C14  EC90  F026         	call	_Activate_Buzzer_2KHz	;wreg free
 13002                           
 13003                           ;utils.c: 75: Wait_One_Sec();
 13004  004C18  EC05  F025         	call	_Wait_One_Sec	;wreg free
 13005                           
 13006                           ;utils.c: 76: Deactivate_Buzzer();
 13007  004C1C  EC09  F027         	call	_Deactivate_Buzzer	;wreg free
 13008                           
 13009                           ;utils.c: 77: Wait_One_Sec();
 13010  004C20  EC05  F025         	call	_Wait_One_Sec	;wreg free
 13011                           
 13012                           ;utils.c: 78: do_update_pwm(duty_cycle);
 13013  004C24  5055               	movf	_duty_cycle,w,c
 13014  004C26  ECE2  F018         	call	_do_update_pwm
 13015  004C2A  0012               	return		;funcret
 13016  004C2C                     __end_of_Do_Beep_Good:
 13017                           	opt stack 0
 13018                           tblptru	equ	0xFF8
 13019                           tblptrh	equ	0xFF7
 13020                           tblptrl	equ	0xFF6
 13021                           tablat	equ	0xFF5
 13022                           prodh	equ	0xFF4
 13023                           prodl	equ	0xFF3
 13024                           intcon	equ	0xFF2
 13025                           intcon2	equ	0xFF1
 13026                           postinc0	equ	0xFEE
 13027                           wreg	equ	0xFE8
 13028                           postdec1	equ	0xFE5
 13029                           fsr1l	equ	0xFE1
 13030                           indf2	equ	0xFDF
 13031                           postinc2	equ	0xFDE
 13032                           fsr2h	equ	0xFDA
 13033                           fsr2l	equ	0xFD9
 13034                           status	equ	0xFD8
 13035                           
 13036 ;; *************** function _Activate_Buzzer_2KHz *****************
 13037 ;; Defined at:
 13038 ;;		line 113 in file "utils.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;		None
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;		None
 13043 ;; Return value:  Size  Location     Type
 13044 ;;		None               void
 13045 ;; Registers used:
 13046 ;;		wreg, status,2
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;Total ram usage:        0 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    4
 13059 ;; This function calls:
 13060 ;;		Nothing
 13061 ;; This function is called by:
 13062 ;;		_Do_Beep_Good
 13063 ;; This function uses a non-reentrant model
 13064 ;;
 13065                           
 13066                           	psect	text59
 13067  004D20                     __ptext59:
 13068                           	opt stack 0
 13069  004D20                     _Activate_Buzzer_2KHz:
 13070                           	opt stack 24
 13071                           
 13072                           ;utils.c: 116: PR2 = 0b11111001;
 13073                           
 13074                           ;incstack = 0
 13075  004D20  0EF9               	movlw	249
 13076  004D22  6ECB               	movwf	4043,c	;volatile
 13077                           
 13078                           ;utils.c: 117: T2CON = 0b00000101;
 13079  004D24  0E05               	movlw	5
 13080  004D26  6ECA               	movwf	4042,c	;volatile
 13081                           
 13082                           ;utils.c: 118: CCPR2L = 0b01111100;
 13083  004D28  0E7C               	movlw	124
 13084  004D2A  6EBB               	movwf	4027,c	;volatile
 13085                           
 13086                           ;utils.c: 119: CCP2CON = 0b00111100;
 13087  004D2C  0E3C               	movlw	60
 13088  004D2E  6EBA               	movwf	4026,c	;volatile
 13089  004D30  0012               	return		;funcret
 13090  004D32                     __end_of_Activate_Buzzer_2KHz:
 13091                           	opt stack 0
 13092                           tblptru	equ	0xFF8
 13093                           tblptrh	equ	0xFF7
 13094                           tblptrl	equ	0xFF6
 13095                           tablat	equ	0xFF5
 13096                           prodh	equ	0xFF4
 13097                           prodl	equ	0xFF3
 13098                           intcon	equ	0xFF2
 13099                           intcon2	equ	0xFF1
 13100                           postinc0	equ	0xFEE
 13101                           wreg	equ	0xFE8
 13102                           postdec1	equ	0xFE5
 13103                           fsr1l	equ	0xFE1
 13104                           indf2	equ	0xFDF
 13105                           postinc2	equ	0xFDE
 13106                           fsr2h	equ	0xFDA
 13107                           fsr2l	equ	0xFD9
 13108                           status	equ	0xFD8
 13109                           
 13110 ;; *************** function _Do_Beep_Bad *****************
 13111 ;; Defined at:
 13112 ;;		line 81 in file "utils.c"
 13113 ;; Parameters:    Size  Location     Type
 13114 ;;		None
 13115 ;; Auto vars:     Size  Location     Type
 13116 ;;		None
 13117 ;; Return value:  Size  Location     Type
 13118 ;;		None               void
 13119 ;; Registers used:
 13120 ;;		wreg, status,2, status,0, cstack
 13121 ;; Tracked objects:
 13122 ;;		On entry : 0/0
 13123 ;;		On exit  : 0/0
 13124 ;;		Unchanged: 0/0
 13125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;Total ram usage:        0 bytes
 13131 ;; Hardware stack levels used:    1
 13132 ;; Hardware stack levels required when called:    7
 13133 ;; This function calls:
 13134 ;;		_Activate_Buzzer_500Hz
 13135 ;;		_Deactivate_Buzzer
 13136 ;;		_Wait_One_Sec
 13137 ;;		_do_update_pwm
 13138 ;; This function is called by:
 13139 ;;		_main
 13140 ;;		_Do_Setup_Alarm_Time
 13141 ;;		_Do_Setup_Heater_Temp
 13142 ;;		_Do_Setup_Time
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           	psect	text60
 13147  004C2C                     __ptext60:
 13148                           	opt stack 0
 13149  004C2C                     _Do_Beep_Bad:
 13150                           	opt stack 22
 13151                           
 13152                           ;utils.c: 84: Activate_Buzzer_500Hz();
 13153                           
 13154                           ;incstack = 0
 13155  004C2C  EC99  F026         	call	_Activate_Buzzer_500Hz	;wreg free
 13156                           
 13157                           ;utils.c: 85: Wait_One_Sec();
 13158  004C30  EC05  F025         	call	_Wait_One_Sec	;wreg free
 13159                           
 13160                           ;utils.c: 86: Deactivate_Buzzer();
 13161  004C34  EC09  F027         	call	_Deactivate_Buzzer	;wreg free
 13162                           
 13163                           ;utils.c: 87: Wait_One_Sec();
 13164  004C38  EC05  F025         	call	_Wait_One_Sec	;wreg free
 13165                           
 13166                           ;utils.c: 88: do_update_pwm(duty_cycle);
 13167  004C3C  5055               	movf	_duty_cycle,w,c
 13168  004C3E  ECE2  F018         	call	_do_update_pwm
 13169  004C42  0012               	return		;funcret
 13170  004C44                     __end_of_Do_Beep_Bad:
 13171                           	opt stack 0
 13172                           tblptru	equ	0xFF8
 13173                           tblptrh	equ	0xFF7
 13174                           tblptrl	equ	0xFF6
 13175                           tablat	equ	0xFF5
 13176                           prodh	equ	0xFF4
 13177                           prodl	equ	0xFF3
 13178                           intcon	equ	0xFF2
 13179                           intcon2	equ	0xFF1
 13180                           postinc0	equ	0xFEE
 13181                           wreg	equ	0xFE8
 13182                           postdec1	equ	0xFE5
 13183                           fsr1l	equ	0xFE1
 13184                           indf2	equ	0xFDF
 13185                           postinc2	equ	0xFDE
 13186                           fsr2h	equ	0xFDA
 13187                           fsr2l	equ	0xFD9
 13188                           status	equ	0xFD8
 13189                           
 13190 ;; *************** function _do_update_pwm *****************
 13191 ;; Defined at:
 13192 ;;		line 137 in file "utils.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;  duty_cycle      1    wreg     unsigned char 
 13195 ;; Auto vars:     Size  Location     Type
 13196 ;;  duty_cycle      1   21[BANK1 ] unsigned char 
 13197 ;;  dc_f            3   18[BANK1 ] float 
 13198 ;;  dc_I            2   22[BANK1 ] int 
 13199 ;; Return value:  Size  Location     Type
 13200 ;;		None               void
 13201 ;; Registers used:
 13202 ;;		wreg, status,2, status,0, cstack
 13203 ;; Tracked objects:
 13204 ;;		On entry : 0/0
 13205 ;;		On exit  : 0/0
 13206 ;;		Unchanged: 0/0
 13207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13209 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13210 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13211 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13212 ;;Total ram usage:        9 bytes
 13213 ;; Hardware stack levels used:    1
 13214 ;; Hardware stack levels required when called:    6
 13215 ;; This function calls:
 13216 ;;		___ftdiv
 13217 ;;		___ftmul
 13218 ;;		___fttol
 13219 ;;		___lbtoft
 13220 ;; This function is called by:
 13221 ;;		_Monitor_Heater
 13222 ;;		_Test_Alarm
 13223 ;;		_Do_Beep_Good
 13224 ;;		_Do_Beep_Bad
 13225 ;;		_Turn_On_Fan
 13226 ;;		_Do_Beep
 13227 ;; This function uses a non-reentrant model
 13228 ;;
 13229                           
 13230                           	psect	text61
 13231  0031C4                     __ptext61:
 13232                           	opt stack 0
 13233  0031C4                     _do_update_pwm:
 13234                           	opt stack 23
 13235                           
 13236                           ;incstack = 0
 13237                           ;do_update_pwm@duty_cycle stored from wreg
 13238  0031C4  0101               	movlb	1	; () banked
 13239  0031C6  6F6D               	movwf	do_update_pwm@duty_cycle& (0+255),b
 13240                           
 13241                           ; BSR set to: 1
 13242                           ;utils.c: 139: float dc_f;
 13243                           ;utils.c: 140: int dc_I;
 13244                           ;utils.c: 141: PR2 = 0b00000100 ;
 13245  0031C8  0E04               	movlw	4
 13246  0031CA  6ECB               	movwf	4043,c	;volatile
 13247                           
 13248                           ;utils.c: 142: T2CON = 0b00000111 ;
 13249  0031CC  0E07               	movlw	7
 13250  0031CE  6ECA               	movwf	4042,c	;volatile
 13251                           
 13252                           ; BSR set to: 1
 13253                           ;utils.c: 143: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 13254  0031D0  0E00               	movlw	0
 13255  0031D2  0100               	movlb	0	; () banked
 13256  0031D4  6FDC               	movwf	___ftmul@f2& (0+255),b
 13257  0031D6  0E80               	movlw	128
 13258  0031D8  0100               	movlb	0	; () banked
 13259  0031DA  6FDD               	movwf	(___ftmul@f2+1)& (0+255),b
 13260  0031DC  0E40               	movlw	64
 13261  0031DE  0100               	movlb	0	; () banked
 13262  0031E0  6FDE               	movwf	(___ftmul@f2+2)& (0+255),b
 13263  0031E2  0101               	movlb	1	; () banked
 13264  0031E4  516D               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 13265  0031E6  ECAC  F024         	call	___lbtoft
 13266  0031EA  C0D5  F0D9         	movff	?___lbtoft,___ftmul@f1
 13267  0031EE  C0D6  F0DA         	movff	?___lbtoft+1,___ftmul@f1+1
 13268  0031F2  C0D7  F0DB         	movff	?___lbtoft+2,___ftmul@f1+2
 13269  0031F6  ECF8  F00F         	call	___ftmul	;wreg free
 13270  0031FA  C0D9  F158         	movff	?___ftmul,___ftdiv@f1
 13271  0031FE  C0DA  F159         	movff	?___ftmul+1,___ftdiv@f1+1
 13272  003202  C0DB  F15A         	movff	?___ftmul+2,___ftdiv@f1+2
 13273  003206  0E00               	movlw	0
 13274  003208  0101               	movlb	1	; () banked
 13275  00320A  6F5B               	movwf	___ftdiv@f2& (0+255),b
 13276  00320C  0EA0               	movlw	160
 13277  00320E  0101               	movlb	1	; () banked
 13278  003210  6F5C               	movwf	(___ftdiv@f2+1)& (0+255),b
 13279  003212  0E41               	movlw	65
 13280  003214  0101               	movlb	1	; () banked
 13281  003216  6F5D               	movwf	(___ftdiv@f2+2)& (0+255),b
 13282  003218  ECDE  F013         	call	___ftdiv	;wreg free
 13283  00321C  C158  F16A         	movff	?___ftdiv,do_update_pwm@dc_f
 13284  003220  C159  F16B         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 13285  003224  C15A  F16C         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 13286                           
 13287                           ;utils.c: 144: dc_I = (int) dc_f;
 13288  003228  C16A  F158         	movff	do_update_pwm@dc_f,___fttol@f1
 13289  00322C  C16B  F159         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 13290  003230  C16C  F15A         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 13291  003234  EC7F  F014         	call	___fttol	;wreg free
 13292  003238  C158  F16E         	movff	?___fttol,do_update_pwm@dc_I
 13293  00323C  C159  F16F         	movff	?___fttol+1,do_update_pwm@dc_I+1
 13294                           
 13295                           ;utils.c: 145: if (dc_I > duty_cycle) dc_I++;
 13296  003240  0101               	movlb	1	; () banked
 13297  003242  516D               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 13298  003244  0101               	movlb	1	; () banked
 13299  003246  6F67               	movwf	??_do_update_pwm& (0+255),b
 13300  003248  6B68               	clrf	(??_do_update_pwm+1)& (0+255),b
 13301  00324A  0101               	movlb	1	; () banked
 13302  00324C  516E               	movf	do_update_pwm@dc_I& (0+255),w,b
 13303  00324E  0101               	movlb	1	; () banked
 13304  003250  5D67               	subwf	??_do_update_pwm& (0+255),w,b
 13305  003252  0101               	movlb	1	; () banked
 13306  003254  5168               	movf	(??_do_update_pwm+1)& (0+255),w,b
 13307  003256  0A80               	xorlw	128
 13308  003258  0101               	movlb	1	; () banked
 13309  00325A  6F69               	movwf	(??_do_update_pwm+2)& (0+255),b
 13310  00325C  0101               	movlb	1	; () banked
 13311  00325E  516F               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
 13312  003260  0A80               	xorlw	128
 13313  003262  0101               	movlb	1	; () banked
 13314  003264  5969               	subwfb	(??_do_update_pwm+2)& (0+255),w,b
 13315  003266  B0D8               	btfsc	status,0,c
 13316  003268  D004               	goto	l9095
 13317                           
 13318                           ; BSR set to: 1
 13319  00326A  0101               	movlb	1	; () banked
 13320  00326C  4B6E               	infsnz	do_update_pwm@dc_I& (0+255),f,b
 13321  00326E  2B6F               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
 13322  003270  D000               	goto	l9095
 13323  003272                     l9095:
 13324                           
 13325                           ; BSR set to: 1
 13326                           ;utils.c: 146: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 13327  003272  C16E  F167         	movff	do_update_pwm@dc_I,??_do_update_pwm
 13328  003276  0E03               	movlw	3
 13329  003278  0101               	movlb	1	; () banked
 13330  00327A  1767               	andwf	??_do_update_pwm& (0+255),f,b
 13331  00327C  0101               	movlb	1	; () banked
 13332  00327E  3967               	swapf	??_do_update_pwm& (0+255),w,b
 13333  003280  0BF0               	andlw	240
 13334  003282  090C               	iorlw	12
 13335  003284  6EBD               	movwf	4029,c	;volatile
 13336                           
 13337                           ; BSR set to: 1
 13338                           ;utils.c: 147: CCPR1L = (dc_I) >> 2;
 13339  003286  C16E  F167         	movff	do_update_pwm@dc_I,??_do_update_pwm
 13340  00328A  C16F  F168         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 13341  00328E  0101               	movlb	1	; () banked
 13342  003290  3568               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
 13343  003292  3368               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
 13344  003294  3367               	rrcf	??_do_update_pwm& (0+255),f,b
 13345  003296  0101               	movlb	1	; () banked
 13346  003298  3568               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
 13347  00329A  3368               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
 13348  00329C  3367               	rrcf	??_do_update_pwm& (0+255),f,b
 13349  00329E  0101               	movlb	1	; () banked
 13350  0032A0  5167               	movf	??_do_update_pwm& (0+255),w,b
 13351  0032A2  6EBE               	movwf	4030,c	;volatile
 13352                           
 13353                           ; BSR set to: 1
 13354  0032A4  0012               	return		;funcret
 13355  0032A6                     __end_of_do_update_pwm:
 13356                           	opt stack 0
 13357                           tblptru	equ	0xFF8
 13358                           tblptrh	equ	0xFF7
 13359                           tblptrl	equ	0xFF6
 13360                           tablat	equ	0xFF5
 13361                           prodh	equ	0xFF4
 13362                           prodl	equ	0xFF3
 13363                           intcon	equ	0xFF2
 13364                           intcon2	equ	0xFF1
 13365                           postinc0	equ	0xFEE
 13366                           wreg	equ	0xFE8
 13367                           postdec1	equ	0xFE5
 13368                           fsr1l	equ	0xFE1
 13369                           indf2	equ	0xFDF
 13370                           postinc2	equ	0xFDE
 13371                           fsr2h	equ	0xFDA
 13372                           fsr2l	equ	0xFD9
 13373                           status	equ	0xFD8
 13374                           
 13375 ;; *************** function ___lbtoft *****************
 13376 ;; Defined at:
 13377 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;  c               1    wreg     unsigned char 
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;  c               1   11[BANK0 ] unsigned char 
 13382 ;; Return value:  Size  Location     Type
 13383 ;;                  3    8[BANK0 ] float 
 13384 ;; Registers used:
 13385 ;;		wreg, status,2, status,0, cstack
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/0
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13395 ;;Total ram usage:        4 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    5
 13398 ;; This function calls:
 13399 ;;		___ftpack
 13400 ;; This function is called by:
 13401 ;;		_do_update_pwm
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           	psect	text62
 13406  004958                     __ptext62:
 13407                           	opt stack 0
 13408  004958                     ___lbtoft:
 13409                           	opt stack 23
 13410                           
 13411                           ; BSR set to: 1
 13412                           ;incstack = 0
 13413                           ;___lbtoft@c stored from wreg
 13414  004958  0100               	movlb	0	; () banked
 13415  00495A  6FD8               	movwf	___lbtoft@c& (0+255),b
 13416                           
 13417                           ; BSR set to: 0
 13418  00495C  0100               	movlb	0	; () banked
 13419  00495E  51D8               	movf	___lbtoft@c& (0+255),w,b
 13420  004960  0100               	movlb	0	; () banked
 13421  004962  6FCD               	movwf	___ftpack@arg& (0+255),b
 13422  004964  6BCE               	clrf	(___ftpack@arg+1)& (0+255),b
 13423  004966  6BCF               	clrf	(___ftpack@arg+2)& (0+255),b
 13424  004968  0E8E               	movlw	142
 13425  00496A  0100               	movlb	0	; () banked
 13426  00496C  6FD0               	movwf	___ftpack@exp& (0+255),b
 13427  00496E  0E00               	movlw	0
 13428  004970  0100               	movlb	0	; () banked
 13429  004972  6FD1               	movwf	___ftpack@sign& (0+255),b
 13430  004974  EC3F  F016         	call	___ftpack	;wreg free
 13431  004978  C0CD  F0D5         	movff	?___ftpack,?___lbtoft
 13432  00497C  C0CE  F0D6         	movff	?___ftpack+1,?___lbtoft+1
 13433  004980  C0CF  F0D7         	movff	?___ftpack+2,?___lbtoft+2
 13434  004984  D000               	goto	l1928
 13435  004986                     l1928:
 13436  004986  0012               	return		;funcret
 13437  004988                     __end_of___lbtoft:
 13438                           	opt stack 0
 13439                           tblptru	equ	0xFF8
 13440                           tblptrh	equ	0xFF7
 13441                           tblptrl	equ	0xFF6
 13442                           tablat	equ	0xFF5
 13443                           prodh	equ	0xFF4
 13444                           prodl	equ	0xFF3
 13445                           intcon	equ	0xFF2
 13446                           intcon2	equ	0xFF1
 13447                           postinc0	equ	0xFEE
 13448                           wreg	equ	0xFE8
 13449                           postdec1	equ	0xFE5
 13450                           fsr1l	equ	0xFE1
 13451                           indf2	equ	0xFDF
 13452                           postinc2	equ	0xFDE
 13453                           fsr2h	equ	0xFDA
 13454                           fsr2l	equ	0xFD9
 13455                           status	equ	0xFD8
 13456                           
 13457 ;; *************** function ___fttol *****************
 13458 ;; Defined at:
 13459 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 13460 ;; Parameters:    Size  Location     Type
 13461 ;;  f1              3    0[BANK1 ] float 
 13462 ;; Auto vars:     Size  Location     Type
 13463 ;;  lval            4   10[BANK1 ] unsigned long 
 13464 ;;  exp1            1   14[BANK1 ] unsigned char 
 13465 ;;  sign1           1    9[BANK1 ] unsigned char 
 13466 ;; Return value:  Size  Location     Type
 13467 ;;                  4    0[BANK1 ] long 
 13468 ;; Registers used:
 13469 ;;		wreg, status,2, status,0
 13470 ;; Tracked objects:
 13471 ;;		On entry : 0/0
 13472 ;;		On exit  : 0/0
 13473 ;;		Unchanged: 0/0
 13474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13475 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13476 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13477 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13478 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13479 ;;Total ram usage:       15 bytes
 13480 ;; Hardware stack levels used:    1
 13481 ;; Hardware stack levels required when called:    4
 13482 ;; This function calls:
 13483 ;;		Nothing
 13484 ;; This function is called by:
 13485 ;;		_Update_Screen
 13486 ;;		_do_update_pwm
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           	psect	text63
 13491  0028FE                     __ptext63:
 13492                           	opt stack 0
 13493  0028FE                     ___fttol:
 13494                           	opt stack 25
 13495                           
 13496                           ;incstack = 0
 13497  0028FE  C15A  F15C         	movff	___fttol@f1+2,??___fttol
 13498  002902  0101               	movlb	1	; () banked
 13499  002904  6B5D               	clrf	(??___fttol+1)& (0+255),b
 13500  002906  6B5E               	clrf	(??___fttol+2)& (0+255),b
 13501  002908  0101               	movlb	1	; () banked
 13502  00290A  3559               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13503  00290C  0101               	movlb	1	; () banked
 13504  00290E  375C               	rlcf	??___fttol& (0+255),f,b
 13505  002910  E301               	bnc	u6951
 13506  002912  815D               	bsf	(??___fttol+1)& (0+255),0,b
 13507  002914                     u6951:
 13508  002914  0101               	movlb	1	; () banked
 13509  002916  515C               	movf	??___fttol& (0+255),w,b
 13510  002918  0101               	movlb	1	; () banked
 13511  00291A  6F66               	movwf	___fttol@exp1& (0+255),b
 13512  00291C  0101               	movlb	1	; () banked
 13513  00291E  5166               	movf	___fttol@exp1& (0+255),w,b
 13514  002920  A4D8               	btfss	status,2,c
 13515  002922  D002               	goto	l9041
 13516  002924  D051               	goto	l9065
 13517                           
 13518                           ; BSR set to: 1
 13519                           
 13520                           ; BSR set to: 1
 13521  002926  D083               	goto	l1887
 13522  002928                     l9041:
 13523                           
 13524                           ; BSR set to: 1
 13525  002928  0E17               	movlw	23
 13526  00292A  0101               	movlb	1	; () banked
 13527  00292C  6F5C               	movwf	??___fttol& (0+255),b
 13528  00292E  C158  F15D         	movff	___fttol@f1,??___fttol+1
 13529  002932  C159  F15E         	movff	___fttol@f1+1,??___fttol+2
 13530  002936  C15A  F15F         	movff	___fttol@f1+2,??___fttol+3
 13531  00293A  0101               	movlb	1	; () banked
 13532  00293C  295C               	incf	??___fttol& (0+255),w,b
 13533  00293E  0101               	movlb	1	; () banked
 13534  002940  6F60               	movwf	(??___fttol+4)& (0+255),b
 13535  002942  D005               	goto	u6970
 13536  002944                     u6975:
 13537  002944  0101               	movlb	1	; () banked
 13538  002946  90D8               	bcf	status,0,c
 13539  002948  335F               	rrcf	(??___fttol+3)& (0+255),f,b
 13540  00294A  335E               	rrcf	(??___fttol+2)& (0+255),f,b
 13541  00294C  335D               	rrcf	(??___fttol+1)& (0+255),f,b
 13542  00294E                     u6970:
 13543  00294E  0101               	movlb	1	; () banked
 13544  002950  2F60               	decfsz	(??___fttol+4)& (0+255),f,b
 13545  002952  D7F8               	goto	u6975
 13546  002954  0101               	movlb	1	; () banked
 13547  002956  515D               	movf	(??___fttol+1)& (0+255),w,b
 13548  002958  0101               	movlb	1	; () banked
 13549  00295A  6F61               	movwf	___fttol@sign1& (0+255),b
 13550                           
 13551                           ; BSR set to: 1
 13552  00295C  0101               	movlb	1	; () banked
 13553  00295E  8F59               	bsf	(___fttol@f1+1)& (0+255),7,b
 13554                           
 13555                           ; BSR set to: 1
 13556  002960  0EFF               	movlw	255
 13557  002962  0101               	movlb	1	; () banked
 13558  002964  1758               	andwf	___fttol@f1& (0+255),f,b
 13559  002966  0EFF               	movlw	255
 13560  002968  0101               	movlb	1	; () banked
 13561  00296A  1759               	andwf	(___fttol@f1+1)& (0+255),f,b
 13562  00296C  0E00               	movlw	0
 13563  00296E  0101               	movlb	1	; () banked
 13564  002970  175A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13565                           
 13566                           ; BSR set to: 1
 13567  002972  0101               	movlb	1	; () banked
 13568  002974  5158               	movf	___fttol@f1& (0+255),w,b
 13569  002976  0101               	movlb	1	; () banked
 13570  002978  6F62               	movwf	___fttol@lval& (0+255),b
 13571  00297A  0101               	movlb	1	; () banked
 13572  00297C  5159               	movf	(___fttol@f1+1)& (0+255),w,b
 13573  00297E  0101               	movlb	1	; () banked
 13574  002980  6F63               	movwf	(___fttol@lval+1)& (0+255),b
 13575  002982  0101               	movlb	1	; () banked
 13576  002984  515A               	movf	(___fttol@f1+2)& (0+255),w,b
 13577  002986  0101               	movlb	1	; () banked
 13578  002988  6F64               	movwf	(___fttol@lval+2)& (0+255),b
 13579  00298A  0101               	movlb	1	; () banked
 13580  00298C  6B65               	clrf	(___fttol@lval+3)& (0+255),b
 13581                           
 13582                           ; BSR set to: 1
 13583  00298E  0E8E               	movlw	142
 13584  002990  0101               	movlb	1	; () banked
 13585  002992  5F66               	subwf	___fttol@exp1& (0+255),f,b
 13586                           
 13587                           ; BSR set to: 1
 13588  002994  0101               	movlb	1	; () banked
 13589  002996  AF66               	btfss	___fttol@exp1& (0+255),7,b
 13590  002998  D013               	goto	l9063
 13591                           
 13592                           ; BSR set to: 1
 13593  00299A  0101               	movlb	1	; () banked
 13594  00299C  5166               	movf	___fttol@exp1& (0+255),w,b
 13595  00299E  0A80               	xorlw	128
 13596  0029A0  0F8F               	addlw	143
 13597  0029A2  B0D8               	btfsc	status,0,c
 13598  0029A4  D003               	goto	l9059
 13599  0029A6  D010               	goto	l9065
 13600                           
 13601                           ; BSR set to: 1
 13602                           
 13603                           ; BSR set to: 1
 13604  0029A8  D042               	goto	l1887
 13605                           
 13606                           ; BSR set to: 1
 13607  0029AA  D000               	goto	l9059
 13608  0029AC                     l9059:
 13609                           
 13610                           ; BSR set to: 1
 13611  0029AC  0101               	movlb	1	; () banked
 13612  0029AE  90D8               	bcf	status,0,c
 13613  0029B0  3365               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13614  0029B2  3364               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13615  0029B4  3363               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13616  0029B6  3362               	rrcf	___fttol@lval& (0+255),f,b
 13617                           
 13618                           ; BSR set to: 1
 13619  0029B8  0101               	movlb	1	; () banked
 13620  0029BA  3F66               	incfsz	___fttol@exp1& (0+255),f,b
 13621  0029BC  D7F7               	goto	l9059
 13622                           
 13623                           ; BSR set to: 1
 13624  0029BE  D01F               	goto	l9073
 13625  0029C0                     l9063:
 13626                           
 13627                           ; BSR set to: 1
 13628  0029C0  0E17               	movlw	23
 13629  0029C2  0101               	movlb	1	; () banked
 13630  0029C4  6566               	cpfsgt	___fttol@exp1& (0+255),b
 13631  0029C6  D014               	goto	l9071
 13632  0029C8                     l9065:
 13633                           
 13634                           ; BSR set to: 1
 13635  0029C8  0E00               	movlw	0
 13636  0029CA  0101               	movlb	1	; () banked
 13637  0029CC  6F58               	movwf	?___fttol& (0+255),b
 13638  0029CE  0E00               	movlw	0
 13639  0029D0  6F59               	movwf	(?___fttol+1)& (0+255),b
 13640  0029D2  0E00               	movlw	0
 13641  0029D4  6F5A               	movwf	(?___fttol+2)& (0+255),b
 13642  0029D6  0E00               	movlw	0
 13643  0029D8  6F5B               	movwf	(?___fttol+3)& (0+255),b
 13644                           
 13645                           ; BSR set to: 1
 13646  0029DA  D029               	goto	l1887
 13647                           
 13648                           ; BSR set to: 1
 13649  0029DC  D009               	goto	l9071
 13650  0029DE                     l9069:
 13651                           
 13652                           ; BSR set to: 1
 13653  0029DE  0101               	movlb	1	; () banked
 13654  0029E0  90D8               	bcf	status,0,c
 13655  0029E2  3762               	rlcf	___fttol@lval& (0+255),f,b
 13656  0029E4  3763               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13657  0029E6  3764               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13658  0029E8  3765               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13659  0029EA  0101               	movlb	1	; () banked
 13660  0029EC  0766               	decf	___fttol@exp1& (0+255),f,b
 13661  0029EE  D000               	goto	l9071
 13662  0029F0                     l9071:
 13663                           
 13664                           ; BSR set to: 1
 13665  0029F0  0101               	movlb	1	; () banked
 13666  0029F2  5166               	movf	___fttol@exp1& (0+255),w,b
 13667  0029F4  0101               	movlb	1	; () banked
 13668  0029F6  B4D8               	btfsc	status,2,c
 13669  0029F8  D002               	goto	l9073
 13670  0029FA  D7F1               	goto	l9069
 13671                           
 13672                           ; BSR set to: 1
 13673  0029FC  D000               	goto	l9073
 13674  0029FE                     l9073:
 13675                           
 13676                           ; BSR set to: 1
 13677  0029FE  0101               	movlb	1	; () banked
 13678  002A00  5161               	movf	___fttol@sign1& (0+255),w,b
 13679  002A02  0101               	movlb	1	; () banked
 13680  002A04  B4D8               	btfsc	status,2,c
 13681  002A06  D00A               	goto	l9077
 13682                           
 13683                           ; BSR set to: 1
 13684  002A08  0101               	movlb	1	; () banked
 13685  002A0A  1F65               	comf	(___fttol@lval+3)& (0+255),f,b
 13686  002A0C  1F64               	comf	(___fttol@lval+2)& (0+255),f,b
 13687  002A0E  1F63               	comf	(___fttol@lval+1)& (0+255),f,b
 13688  002A10  6D62               	negf	___fttol@lval& (0+255),b
 13689  002A12  0E00               	movlw	0
 13690  002A14  2363               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13691  002A16  2364               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13692  002A18  2365               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13693  002A1A  D000               	goto	l9077
 13694  002A1C                     l9077:
 13695                           
 13696                           ; BSR set to: 1
 13697  002A1C  C162  F158         	movff	___fttol@lval,?___fttol
 13698  002A20  C163  F159         	movff	___fttol@lval+1,?___fttol+1
 13699  002A24  C164  F15A         	movff	___fttol@lval+2,?___fttol+2
 13700  002A28  C165  F15B         	movff	___fttol@lval+3,?___fttol+3
 13701  002A2C  D000               	goto	l1887
 13702  002A2E                     l1887:
 13703                           
 13704                           ; BSR set to: 1
 13705  002A2E  0012               	return		;funcret
 13706  002A30                     __end_of___fttol:
 13707                           	opt stack 0
 13708                           tblptru	equ	0xFF8
 13709                           tblptrh	equ	0xFF7
 13710                           tblptrl	equ	0xFF6
 13711                           tablat	equ	0xFF5
 13712                           prodh	equ	0xFF4
 13713                           prodl	equ	0xFF3
 13714                           intcon	equ	0xFF2
 13715                           intcon2	equ	0xFF1
 13716                           postinc0	equ	0xFEE
 13717                           wreg	equ	0xFE8
 13718                           postdec1	equ	0xFE5
 13719                           fsr1l	equ	0xFE1
 13720                           indf2	equ	0xFDF
 13721                           postinc2	equ	0xFDE
 13722                           fsr2h	equ	0xFDA
 13723                           fsr2l	equ	0xFD9
 13724                           status	equ	0xFD8
 13725                           
 13726 ;; *************** function ___ftmul *****************
 13727 ;; Defined at:
 13728 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 13729 ;; Parameters:    Size  Location     Type
 13730 ;;  f1              3   12[BANK0 ] float 
 13731 ;;  f2              3   15[BANK0 ] float 
 13732 ;; Auto vars:     Size  Location     Type
 13733 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
 13734 ;;  sign            1   26[BANK0 ] unsigned char 
 13735 ;;  cntr            1   25[BANK0 ] unsigned char 
 13736 ;;  exp             1   21[BANK0 ] unsigned char 
 13737 ;; Return value:  Size  Location     Type
 13738 ;;                  3   12[BANK0 ] float 
 13739 ;; Registers used:
 13740 ;;		wreg, status,2, status,0, cstack
 13741 ;; Tracked objects:
 13742 ;;		On entry : 0/0
 13743 ;;		On exit  : 0/0
 13744 ;;		Unchanged: 0/0
 13745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13746 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13747 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13748 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13749 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13750 ;;Total ram usage:       15 bytes
 13751 ;; Hardware stack levels used:    1
 13752 ;; Hardware stack levels required when called:    5
 13753 ;; This function calls:
 13754 ;;		___ftpack
 13755 ;; This function is called by:
 13756 ;;		_Update_Screen
 13757 ;;		_do_update_pwm
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           	psect	text64
 13762  001FF0                     __ptext64:
 13763                           	opt stack 0
 13764  001FF0                     ___ftmul:
 13765                           	opt stack 24
 13766                           
 13767                           ; BSR set to: 1
 13768                           ;incstack = 0
 13769  001FF0  C0DB  F0DF         	movff	___ftmul@f1+2,??___ftmul
 13770  001FF4  0100               	movlb	0	; () banked
 13771  001FF6  6BE0               	clrf	(??___ftmul+1)& (0+255),b
 13772  001FF8  6BE1               	clrf	(??___ftmul+2)& (0+255),b
 13773  001FFA  0100               	movlb	0	; () banked
 13774  001FFC  35DA               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 13775  001FFE  0100               	movlb	0	; () banked
 13776  002000  37DF               	rlcf	??___ftmul& (0+255),f,b
 13777  002002  E301               	bnc	u6891
 13778  002004  81E0               	bsf	(??___ftmul+1)& (0+255),0,b
 13779  002006                     u6891:
 13780  002006  0100               	movlb	0	; () banked
 13781  002008  51DF               	movf	??___ftmul& (0+255),w,b
 13782  00200A  0100               	movlb	0	; () banked
 13783  00200C  6FE2               	movwf	___ftmul@exp& (0+255),b
 13784  00200E  0100               	movlb	0	; () banked
 13785  002010  51E2               	movf	___ftmul@exp& (0+255),w,b
 13786  002012  A4D8               	btfss	status,2,c
 13787  002014  D002               	goto	l8993
 13788  002016  D014               	goto	l8995
 13789                           
 13790                           ; BSR set to: 0
 13791                           
 13792                           ; BSR set to: 0
 13793  002018  D098               	goto	l1866
 13794  00201A                     l8993:
 13795                           
 13796                           ; BSR set to: 0
 13797  00201A  C0DE  F0DF         	movff	___ftmul@f2+2,??___ftmul
 13798  00201E  0100               	movlb	0	; () banked
 13799  002020  6BE0               	clrf	(??___ftmul+1)& (0+255),b
 13800  002022  6BE1               	clrf	(??___ftmul+2)& (0+255),b
 13801  002024  0100               	movlb	0	; () banked
 13802  002026  35DD               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 13803  002028  0100               	movlb	0	; () banked
 13804  00202A  37DF               	rlcf	??___ftmul& (0+255),f,b
 13805  00202C  E301               	bnc	u6911
 13806  00202E  81E0               	bsf	(??___ftmul+1)& (0+255),0,b
 13807  002030                     u6911:
 13808  002030  0100               	movlb	0	; () banked
 13809  002032  51DF               	movf	??___ftmul& (0+255),w,b
 13810  002034  0100               	movlb	0	; () banked
 13811  002036  6FE7               	movwf	___ftmul@sign& (0+255),b
 13812  002038  0100               	movlb	0	; () banked
 13813  00203A  51E7               	movf	___ftmul@sign& (0+255),w,b
 13814  00203C  A4D8               	btfss	status,2,c
 13815  00203E  D00A               	goto	l8999
 13816  002040                     l8995:
 13817                           
 13818                           ; BSR set to: 0
 13819  002040  0E00               	movlw	0
 13820  002042  0100               	movlb	0	; () banked
 13821  002044  6FD9               	movwf	?___ftmul& (0+255),b
 13822  002046  0E00               	movlw	0
 13823  002048  0100               	movlb	0	; () banked
 13824  00204A  6FDA               	movwf	(?___ftmul+1)& (0+255),b
 13825  00204C  0E00               	movlw	0
 13826  00204E  0100               	movlb	0	; () banked
 13827  002050  6FDB               	movwf	(?___ftmul+2)& (0+255),b
 13828                           
 13829                           ; BSR set to: 0
 13830  002052  D07B               	goto	l1866
 13831  002054                     l8999:
 13832                           
 13833                           ; BSR set to: 0
 13834  002054  0100               	movlb	0	; () banked
 13835  002056  51E7               	movf	___ftmul@sign& (0+255),w,b
 13836  002058  0F7B               	addlw	123
 13837  00205A  0100               	movlb	0	; () banked
 13838  00205C  27E2               	addwf	___ftmul@exp& (0+255),f,b
 13839                           
 13840                           ; BSR set to: 0
 13841  00205E  C0DB  F0E7         	movff	___ftmul@f1+2,___ftmul@sign
 13842  002062  0100               	movlb	0	; () banked
 13843  002064  51DE               	movf	(___ftmul@f2+2)& (0+255),w,b
 13844  002066  0100               	movlb	0	; () banked
 13845  002068  1BE7               	xorwf	___ftmul@sign& (0+255),f,b
 13846  00206A  0E80               	movlw	128
 13847  00206C  0100               	movlb	0	; () banked
 13848  00206E  17E7               	andwf	___ftmul@sign& (0+255),f,b
 13849                           
 13850                           ; BSR set to: 0
 13851  002070  0100               	movlb	0	; () banked
 13852  002072  8FDA               	bsf	(___ftmul@f1+1)& (0+255),7,b
 13853                           
 13854                           ; BSR set to: 0
 13855  002074  0100               	movlb	0	; () banked
 13856  002076  8FDD               	bsf	(___ftmul@f2+1)& (0+255),7,b
 13857                           
 13858                           ; BSR set to: 0
 13859  002078  0EFF               	movlw	255
 13860  00207A  0100               	movlb	0	; () banked
 13861  00207C  17DC               	andwf	___ftmul@f2& (0+255),f,b
 13862  00207E  0EFF               	movlw	255
 13863  002080  0100               	movlb	0	; () banked
 13864  002082  17DD               	andwf	(___ftmul@f2+1)& (0+255),f,b
 13865  002084  0E00               	movlw	0
 13866  002086  0100               	movlb	0	; () banked
 13867  002088  17DE               	andwf	(___ftmul@f2+2)& (0+255),f,b
 13868                           
 13869                           ; BSR set to: 0
 13870  00208A  0E00               	movlw	0
 13871  00208C  0100               	movlb	0	; () banked
 13872  00208E  6FE3               	movwf	___ftmul@f3_as_product& (0+255),b
 13873  002090  0E00               	movlw	0
 13874  002092  0100               	movlb	0	; () banked
 13875  002094  6FE4               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 13876  002096  0E00               	movlw	0
 13877  002098  0100               	movlb	0	; () banked
 13878  00209A  6FE5               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 13879                           
 13880                           ; BSR set to: 0
 13881  00209C  0E07               	movlw	7
 13882  00209E  0100               	movlb	0	; () banked
 13883  0020A0  6FE6               	movwf	___ftmul@cntr& (0+255),b
 13884  0020A2  D000               	goto	l9013
 13885  0020A4                     l9013:
 13886                           
 13887                           ; BSR set to: 0
 13888  0020A4  0100               	movlb	0	; () banked
 13889  0020A6  A1D9               	btfss	___ftmul@f1& (0+255),0,b
 13890  0020A8  D00D               	goto	l9017
 13891                           
 13892                           ; BSR set to: 0
 13893  0020AA  0100               	movlb	0	; () banked
 13894  0020AC  51DC               	movf	___ftmul@f2& (0+255),w,b
 13895  0020AE  0100               	movlb	0	; () banked
 13896  0020B0  27E3               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13897  0020B2  0100               	movlb	0	; () banked
 13898  0020B4  51DD               	movf	(___ftmul@f2+1)& (0+255),w,b
 13899  0020B6  0100               	movlb	0	; () banked
 13900  0020B8  23E4               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13901  0020BA  0100               	movlb	0	; () banked
 13902  0020BC  51DE               	movf	(___ftmul@f2+2)& (0+255),w,b
 13903  0020BE  0100               	movlb	0	; () banked
 13904  0020C0  23E5               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13905  0020C2  D000               	goto	l9017
 13906  0020C4                     l9017:
 13907                           
 13908                           ; BSR set to: 0
 13909  0020C4  0100               	movlb	0	; () banked
 13910  0020C6  90D8               	bcf	status,0,c
 13911  0020C8  33DB               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13912  0020CA  33DA               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13913  0020CC  33D9               	rrcf	___ftmul@f1& (0+255),f,b
 13914  0020CE  0100               	movlb	0	; () banked
 13915  0020D0  90D8               	bcf	status,0,c
 13916  0020D2  37DC               	rlcf	___ftmul@f2& (0+255),f,b
 13917  0020D4  37DD               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 13918  0020D6  37DE               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 13919                           
 13920                           ; BSR set to: 0
 13921  0020D8  0100               	movlb	0	; () banked
 13922  0020DA  2FE6               	decfsz	___ftmul@cntr& (0+255),f,b
 13923  0020DC  D7E3               	goto	l9013
 13924  0020DE  D000               	goto	l9021
 13925  0020E0                     l9021:
 13926                           
 13927                           ; BSR set to: 0
 13928  0020E0  0E09               	movlw	9
 13929  0020E2  0100               	movlb	0	; () banked
 13930  0020E4  6FE6               	movwf	___ftmul@cntr& (0+255),b
 13931  0020E6  D000               	goto	l9023
 13932  0020E8                     l9023:
 13933                           
 13934                           ; BSR set to: 0
 13935  0020E8  0100               	movlb	0	; () banked
 13936  0020EA  A1D9               	btfss	___ftmul@f1& (0+255),0,b
 13937  0020EC  D00D               	goto	l9027
 13938                           
 13939                           ; BSR set to: 0
 13940  0020EE  0100               	movlb	0	; () banked
 13941  0020F0  51DC               	movf	___ftmul@f2& (0+255),w,b
 13942  0020F2  0100               	movlb	0	; () banked
 13943  0020F4  27E3               	addwf	___ftmul@f3_as_product& (0+255),f,b
 13944  0020F6  0100               	movlb	0	; () banked
 13945  0020F8  51DD               	movf	(___ftmul@f2+1)& (0+255),w,b
 13946  0020FA  0100               	movlb	0	; () banked
 13947  0020FC  23E4               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 13948  0020FE  0100               	movlb	0	; () banked
 13949  002100  51DE               	movf	(___ftmul@f2+2)& (0+255),w,b
 13950  002102  0100               	movlb	0	; () banked
 13951  002104  23E5               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 13952  002106  D000               	goto	l9027
 13953  002108                     l9027:
 13954                           
 13955                           ; BSR set to: 0
 13956  002108  0100               	movlb	0	; () banked
 13957  00210A  90D8               	bcf	status,0,c
 13958  00210C  33DB               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 13959  00210E  33DA               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 13960  002110  33D9               	rrcf	___ftmul@f1& (0+255),f,b
 13961  002112  0100               	movlb	0	; () banked
 13962  002114  90D8               	bcf	status,0,c
 13963  002116  33E5               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 13964  002118  33E4               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 13965  00211A  33E3               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 13966                           
 13967                           ; BSR set to: 0
 13968  00211C  0100               	movlb	0	; () banked
 13969  00211E  2FE6               	decfsz	___ftmul@cntr& (0+255),f,b
 13970  002120  D7E3               	goto	l9023
 13971  002122  D000               	goto	l9031
 13972  002124                     l9031:
 13973                           
 13974                           ; BSR set to: 0
 13975  002124  C0E3  F0CD         	movff	___ftmul@f3_as_product,___ftpack@arg
 13976  002128  C0E4  F0CE         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13977  00212C  C0E5  F0CF         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13978  002130  C0E2  F0D0         	movff	___ftmul@exp,___ftpack@exp
 13979  002134  C0E7  F0D1         	movff	___ftmul@sign,___ftpack@sign
 13980  002138  EC3F  F016         	call	___ftpack	;wreg free
 13981  00213C  C0CD  F0D9         	movff	?___ftpack,?___ftmul
 13982  002140  C0CE  F0DA         	movff	?___ftpack+1,?___ftmul+1
 13983  002144  C0CF  F0DB         	movff	?___ftpack+2,?___ftmul+2
 13984  002148  D000               	goto	l1866
 13985  00214A                     l1866:
 13986  00214A  0012               	return		;funcret
 13987  00214C                     __end_of___ftmul:
 13988                           	opt stack 0
 13989                           tblptru	equ	0xFF8
 13990                           tblptrh	equ	0xFF7
 13991                           tblptrl	equ	0xFF6
 13992                           tablat	equ	0xFF5
 13993                           prodh	equ	0xFF4
 13994                           prodl	equ	0xFF3
 13995                           intcon	equ	0xFF2
 13996                           intcon2	equ	0xFF1
 13997                           postinc0	equ	0xFEE
 13998                           wreg	equ	0xFE8
 13999                           postdec1	equ	0xFE5
 14000                           fsr1l	equ	0xFE1
 14001                           indf2	equ	0xFDF
 14002                           postinc2	equ	0xFDE
 14003                           fsr2h	equ	0xFDA
 14004                           fsr2l	equ	0xFD9
 14005                           status	equ	0xFD8
 14006                           
 14007 ;; *************** function ___ftdiv *****************
 14008 ;; Defined at:
 14009 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 14010 ;; Parameters:    Size  Location     Type
 14011 ;;  f1              3    0[BANK1 ] float 
 14012 ;;  f2              3    3[BANK1 ] float 
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;  f3              3   10[BANK1 ] float 
 14015 ;;  sign            1   14[BANK1 ] unsigned char 
 14016 ;;  exp             1   13[BANK1 ] unsigned char 
 14017 ;;  cntr            1    9[BANK1 ] unsigned char 
 14018 ;; Return value:  Size  Location     Type
 14019 ;;                  3    0[BANK1 ] float 
 14020 ;; Registers used:
 14021 ;;		wreg, status,2, status,0, cstack
 14022 ;; Tracked objects:
 14023 ;;		On entry : 0/0
 14024 ;;		On exit  : 0/0
 14025 ;;		Unchanged: 0/0
 14026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14027 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;Total ram usage:       15 bytes
 14032 ;; Hardware stack levels used:    1
 14033 ;; Hardware stack levels required when called:    5
 14034 ;; This function calls:
 14035 ;;		___ftpack
 14036 ;; This function is called by:
 14037 ;;		_do_update_pwm
 14038 ;;		_read_volt
 14039 ;; This function uses a non-reentrant model
 14040 ;;
 14041                           
 14042                           	psect	text65
 14043  0027BC                     __ptext65:
 14044                           	opt stack 0
 14045  0027BC                     ___ftdiv:
 14046                           	opt stack 24
 14047                           
 14048                           ;incstack = 0
 14049  0027BC  C15A  F15E         	movff	___ftdiv@f1+2,??___ftdiv
 14050  0027C0  0101               	movlb	1	; () banked
 14051  0027C2  6B5F               	clrf	(??___ftdiv+1)& (0+255),b
 14052  0027C4  6B60               	clrf	(??___ftdiv+2)& (0+255),b
 14053  0027C6  0101               	movlb	1	; () banked
 14054  0027C8  3559               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 14055  0027CA  0101               	movlb	1	; () banked
 14056  0027CC  375E               	rlcf	??___ftdiv& (0+255),f,b
 14057  0027CE  E301               	bnc	u6841
 14058  0027D0  815F               	bsf	(??___ftdiv+1)& (0+255),0,b
 14059  0027D2                     u6841:
 14060  0027D2  0101               	movlb	1	; () banked
 14061  0027D4  515E               	movf	??___ftdiv& (0+255),w,b
 14062  0027D6  0101               	movlb	1	; () banked
 14063  0027D8  6F65               	movwf	___ftdiv@exp& (0+255),b
 14064  0027DA  0101               	movlb	1	; () banked
 14065  0027DC  5165               	movf	___ftdiv@exp& (0+255),w,b
 14066  0027DE  A4D8               	btfss	status,2,c
 14067  0027E0  D002               	goto	l8947
 14068  0027E2  D014               	goto	l8949
 14069                           
 14070                           ; BSR set to: 1
 14071                           
 14072                           ; BSR set to: 1
 14073  0027E4  D08B               	goto	l1851
 14074  0027E6                     l8947:
 14075                           
 14076                           ; BSR set to: 1
 14077  0027E6  C15D  F15E         	movff	___ftdiv@f2+2,??___ftdiv
 14078  0027EA  0101               	movlb	1	; () banked
 14079  0027EC  6B5F               	clrf	(??___ftdiv+1)& (0+255),b
 14080  0027EE  6B60               	clrf	(??___ftdiv+2)& (0+255),b
 14081  0027F0  0101               	movlb	1	; () banked
 14082  0027F2  355C               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 14083  0027F4  0101               	movlb	1	; () banked
 14084  0027F6  375E               	rlcf	??___ftdiv& (0+255),f,b
 14085  0027F8  E301               	bnc	u6861
 14086  0027FA  815F               	bsf	(??___ftdiv+1)& (0+255),0,b
 14087  0027FC                     u6861:
 14088  0027FC  0101               	movlb	1	; () banked
 14089  0027FE  515E               	movf	??___ftdiv& (0+255),w,b
 14090  002800  0101               	movlb	1	; () banked
 14091  002802  6F66               	movwf	___ftdiv@sign& (0+255),b
 14092  002804  0101               	movlb	1	; () banked
 14093  002806  5166               	movf	___ftdiv@sign& (0+255),w,b
 14094  002808  A4D8               	btfss	status,2,c
 14095  00280A  D00A               	goto	l8953
 14096  00280C                     l8949:
 14097                           
 14098                           ; BSR set to: 1
 14099  00280C  0E00               	movlw	0
 14100  00280E  0101               	movlb	1	; () banked
 14101  002810  6F58               	movwf	?___ftdiv& (0+255),b
 14102  002812  0E00               	movlw	0
 14103  002814  0101               	movlb	1	; () banked
 14104  002816  6F59               	movwf	(?___ftdiv+1)& (0+255),b
 14105  002818  0E00               	movlw	0
 14106  00281A  0101               	movlb	1	; () banked
 14107  00281C  6F5A               	movwf	(?___ftdiv+2)& (0+255),b
 14108                           
 14109                           ; BSR set to: 1
 14110  00281E  D06E               	goto	l1851
 14111  002820                     l8953:
 14112                           
 14113                           ; BSR set to: 1
 14114  002820  0E00               	movlw	0
 14115  002822  0101               	movlb	1	; () banked
 14116  002824  6F62               	movwf	___ftdiv@f3& (0+255),b
 14117  002826  0E00               	movlw	0
 14118  002828  0101               	movlb	1	; () banked
 14119  00282A  6F63               	movwf	(___ftdiv@f3+1)& (0+255),b
 14120  00282C  0E00               	movlw	0
 14121  00282E  0101               	movlb	1	; () banked
 14122  002830  6F64               	movwf	(___ftdiv@f3+2)& (0+255),b
 14123                           
 14124                           ; BSR set to: 1
 14125  002832  0101               	movlb	1	; () banked
 14126  002834  5166               	movf	___ftdiv@sign& (0+255),w,b
 14127  002836  0F89               	addlw	137
 14128  002838  0101               	movlb	1	; () banked
 14129  00283A  5F65               	subwf	___ftdiv@exp& (0+255),f,b
 14130                           
 14131                           ; BSR set to: 1
 14132  00283C  C15A  F166         	movff	___ftdiv@f1+2,___ftdiv@sign
 14133                           
 14134                           ; BSR set to: 1
 14135  002840  0101               	movlb	1	; () banked
 14136  002842  515D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 14137  002844  0101               	movlb	1	; () banked
 14138  002846  1B66               	xorwf	___ftdiv@sign& (0+255),f,b
 14139                           
 14140                           ; BSR set to: 1
 14141  002848  0E80               	movlw	128
 14142  00284A  0101               	movlb	1	; () banked
 14143  00284C  1766               	andwf	___ftdiv@sign& (0+255),f,b
 14144                           
 14145                           ; BSR set to: 1
 14146  00284E  0101               	movlb	1	; () banked
 14147  002850  8F59               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 14148                           
 14149                           ; BSR set to: 1
 14150  002852  0EFF               	movlw	255
 14151  002854  0101               	movlb	1	; () banked
 14152  002856  1758               	andwf	___ftdiv@f1& (0+255),f,b
 14153  002858  0EFF               	movlw	255
 14154  00285A  0101               	movlb	1	; () banked
 14155  00285C  1759               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 14156  00285E  0E00               	movlw	0
 14157  002860  0101               	movlb	1	; () banked
 14158  002862  175A               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 14159                           
 14160                           ; BSR set to: 1
 14161  002864  0101               	movlb	1	; () banked
 14162  002866  8F5C               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 14163                           
 14164                           ; BSR set to: 1
 14165  002868  0EFF               	movlw	255
 14166  00286A  0101               	movlb	1	; () banked
 14167  00286C  175B               	andwf	___ftdiv@f2& (0+255),f,b
 14168  00286E  0EFF               	movlw	255
 14169  002870  0101               	movlb	1	; () banked
 14170  002872  175C               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 14171  002874  0E00               	movlw	0
 14172  002876  0101               	movlb	1	; () banked
 14173  002878  175D               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 14174                           
 14175                           ; BSR set to: 1
 14176  00287A  0E18               	movlw	24
 14177  00287C  0101               	movlb	1	; () banked
 14178  00287E  6F61               	movwf	___ftdiv@cntr& (0+255),b
 14179  002880  D000               	goto	l8973
 14180  002882                     l8973:
 14181                           
 14182                           ; BSR set to: 1
 14183  002882  0101               	movlb	1	; () banked
 14184  002884  90D8               	bcf	status,0,c
 14185  002886  3762               	rlcf	___ftdiv@f3& (0+255),f,b
 14186  002888  3763               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 14187  00288A  3764               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 14188                           
 14189                           ; BSR set to: 1
 14190  00288C  0101               	movlb	1	; () banked
 14191  00288E  515B               	movf	___ftdiv@f2& (0+255),w,b
 14192  002890  0101               	movlb	1	; () banked
 14193  002892  5D58               	subwf	___ftdiv@f1& (0+255),w,b
 14194  002894  0101               	movlb	1	; () banked
 14195  002896  515C               	movf	(___ftdiv@f2+1)& (0+255),w,b
 14196  002898  0101               	movlb	1	; () banked
 14197  00289A  5959               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 14198  00289C  0101               	movlb	1	; () banked
 14199  00289E  515D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 14200  0028A0  0101               	movlb	1	; () banked
 14201  0028A2  595A               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 14202  0028A4  A0D8               	btfss	status,0,c
 14203  0028A6  D00E               	goto	l1854
 14204                           
 14205                           ; BSR set to: 1
 14206  0028A8  0101               	movlb	1	; () banked
 14207  0028AA  515B               	movf	___ftdiv@f2& (0+255),w,b
 14208  0028AC  0101               	movlb	1	; () banked
 14209  0028AE  5F58               	subwf	___ftdiv@f1& (0+255),f,b
 14210  0028B0  0101               	movlb	1	; () banked
 14211  0028B2  515C               	movf	(___ftdiv@f2+1)& (0+255),w,b
 14212  0028B4  0101               	movlb	1	; () banked
 14213  0028B6  5B59               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 14214  0028B8  0101               	movlb	1	; () banked
 14215  0028BA  515D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 14216  0028BC  0101               	movlb	1	; () banked
 14217  0028BE  5B5A               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 14218                           
 14219                           ; BSR set to: 1
 14220  0028C0  0101               	movlb	1	; () banked
 14221  0028C2  8162               	bsf	___ftdiv@f3& (0+255),0,b
 14222  0028C4                     l1854:
 14223                           
 14224                           ; BSR set to: 1
 14225  0028C4  0101               	movlb	1	; () banked
 14226  0028C6  90D8               	bcf	status,0,c
 14227  0028C8  3758               	rlcf	___ftdiv@f1& (0+255),f,b
 14228  0028CA  3759               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 14229  0028CC  375A               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 14230                           
 14231                           ; BSR set to: 1
 14232  0028CE  0101               	movlb	1	; () banked
 14233  0028D0  2F61               	decfsz	___ftdiv@cntr& (0+255),f,b
 14234  0028D2  D7D7               	goto	l8973
 14235  0028D4  D000               	goto	l8983
 14236  0028D6                     l8983:
 14237                           
 14238                           ; BSR set to: 1
 14239  0028D6  C162  F0CD         	movff	___ftdiv@f3,___ftpack@arg
 14240  0028DA  C163  F0CE         	movff	___ftdiv@f3+1,___ftpack@arg+1
 14241  0028DE  C164  F0CF         	movff	___ftdiv@f3+2,___ftpack@arg+2
 14242  0028E2  C165  F0D0         	movff	___ftdiv@exp,___ftpack@exp
 14243  0028E6  C166  F0D1         	movff	___ftdiv@sign,___ftpack@sign
 14244  0028EA  EC3F  F016         	call	___ftpack	;wreg free
 14245  0028EE  C0CD  F158         	movff	?___ftpack,?___ftdiv
 14246  0028F2  C0CE  F159         	movff	?___ftpack+1,?___ftdiv+1
 14247  0028F6  C0CF  F15A         	movff	?___ftpack+2,?___ftdiv+2
 14248  0028FA  D000               	goto	l1851
 14249  0028FC                     l1851:
 14250  0028FC  0012               	return		;funcret
 14251  0028FE                     __end_of___ftdiv:
 14252                           	opt stack 0
 14253                           tblptru	equ	0xFF8
 14254                           tblptrh	equ	0xFF7
 14255                           tblptrl	equ	0xFF6
 14256                           tablat	equ	0xFF5
 14257                           prodh	equ	0xFF4
 14258                           prodl	equ	0xFF3
 14259                           intcon	equ	0xFF2
 14260                           intcon2	equ	0xFF1
 14261                           postinc0	equ	0xFEE
 14262                           wreg	equ	0xFE8
 14263                           postdec1	equ	0xFE5
 14264                           fsr1l	equ	0xFE1
 14265                           indf2	equ	0xFDF
 14266                           postinc2	equ	0xFDE
 14267                           fsr2h	equ	0xFDA
 14268                           fsr2l	equ	0xFD9
 14269                           status	equ	0xFD8
 14270                           
 14271 ;; *************** function ___ftpack *****************
 14272 ;; Defined at:
 14273 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 14274 ;; Parameters:    Size  Location     Type
 14275 ;;  arg             3    0[BANK0 ] unsigned um
 14276 ;;  exp             1    3[BANK0 ] unsigned char 
 14277 ;;  sign            1    4[BANK0 ] unsigned char 
 14278 ;; Auto vars:     Size  Location     Type
 14279 ;;		None
 14280 ;; Return value:  Size  Location     Type
 14281 ;;                  3    0[BANK0 ] float 
 14282 ;; Registers used:
 14283 ;;		wreg, status,2, status,0
 14284 ;; Tracked objects:
 14285 ;;		On entry : 0/0
 14286 ;;		On exit  : 0/0
 14287 ;;		Unchanged: 0/0
 14288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14289 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14291 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14292 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14293 ;;Total ram usage:        8 bytes
 14294 ;; Hardware stack levels used:    1
 14295 ;; Hardware stack levels required when called:    4
 14296 ;; This function calls:
 14297 ;;		Nothing
 14298 ;; This function is called by:
 14299 ;;		___awtoft
 14300 ;;		___ftdiv
 14301 ;;		___ftmul
 14302 ;;		___lbtoft
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           	psect	text66
 14307  002C7E                     __ptext66:
 14308                           	opt stack 0
 14309  002C7E                     ___ftpack:
 14310                           	opt stack 24
 14311                           
 14312                           ;incstack = 0
 14313  002C7E  0100               	movlb	0	; () banked
 14314  002C80  51D0               	movf	___ftpack@exp& (0+255),w,b
 14315  002C82  0100               	movlb	0	; () banked
 14316  002C84  B4D8               	btfsc	status,2,c
 14317  002C86  D008               	goto	l8489
 14318                           
 14319                           ; BSR set to: 0
 14320  002C88  0100               	movlb	0	; () banked
 14321  002C8A  51CD               	movf	___ftpack@arg& (0+255),w,b
 14322  002C8C  0100               	movlb	0	; () banked
 14323  002C8E  11CE               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 14324  002C90  0100               	movlb	0	; () banked
 14325  002C92  11CF               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 14326  002C94  A4D8               	btfss	status,2,c
 14327  002C96  D013               	goto	l8495
 14328  002C98                     l8489:
 14329                           
 14330                           ; BSR set to: 0
 14331  002C98  0E00               	movlw	0
 14332  002C9A  0100               	movlb	0	; () banked
 14333  002C9C  6FCD               	movwf	?___ftpack& (0+255),b
 14334  002C9E  0E00               	movlw	0
 14335  002CA0  0100               	movlb	0	; () banked
 14336  002CA2  6FCE               	movwf	(?___ftpack+1)& (0+255),b
 14337  002CA4  0E00               	movlw	0
 14338  002CA6  0100               	movlb	0	; () banked
 14339  002CA8  6FCF               	movwf	(?___ftpack+2)& (0+255),b
 14340                           
 14341                           ; BSR set to: 0
 14342  002CAA  D078               	goto	l1779
 14343                           
 14344                           ; BSR set to: 0
 14345  002CAC  D008               	goto	l8495
 14346  002CAE                     l8493:
 14347                           
 14348                           ; BSR set to: 0
 14349  002CAE  0100               	movlb	0	; () banked
 14350  002CB0  2BD0               	incf	___ftpack@exp& (0+255),f,b
 14351  002CB2  0100               	movlb	0	; () banked
 14352  002CB4  90D8               	bcf	status,0,c
 14353  002CB6  33CF               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 14354  002CB8  33CE               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 14355  002CBA  33CD               	rrcf	___ftpack@arg& (0+255),f,b
 14356  002CBC  D000               	goto	l8495
 14357  002CBE                     l8495:
 14358                           
 14359                           ; BSR set to: 0
 14360  002CBE  0E00               	movlw	0
 14361  002CC0  0100               	movlb	0	; () banked
 14362  002CC2  15CD               	andwf	___ftpack@arg& (0+255),w,b
 14363  002CC4  0100               	movlb	0	; () banked
 14364  002CC6  6FD2               	movwf	??___ftpack& (0+255),b
 14365  002CC8  0E00               	movlw	0
 14366  002CCA  0100               	movlb	0	; () banked
 14367  002CCC  15CE               	andwf	(___ftpack@arg+1)& (0+255),w,b
 14368  002CCE  0100               	movlb	0	; () banked
 14369  002CD0  6FD3               	movwf	(??___ftpack+1)& (0+255),b
 14370  002CD2  0EFE               	movlw	254
 14371  002CD4  0100               	movlb	0	; () banked
 14372  002CD6  15CF               	andwf	(___ftpack@arg+2)& (0+255),w,b
 14373  002CD8  0100               	movlb	0	; () banked
 14374  002CDA  6FD4               	movwf	(??___ftpack+2)& (0+255),b
 14375  002CDC  0100               	movlb	0	; () banked
 14376  002CDE  51D2               	movf	??___ftpack& (0+255),w,b
 14377  002CE0  0100               	movlb	0	; () banked
 14378  002CE2  11D3               	iorwf	(??___ftpack+1)& (0+255),w,b
 14379  002CE4  0100               	movlb	0	; () banked
 14380  002CE6  11D4               	iorwf	(??___ftpack+2)& (0+255),w,b
 14381  002CE8  B4D8               	btfsc	status,2,c
 14382  002CEA  D013               	goto	l8501
 14383  002CEC  D7E0               	goto	l8493
 14384                           
 14385                           ; BSR set to: 0
 14386  002CEE  D011               	goto	l8501
 14387  002CF0                     l8497:
 14388                           
 14389                           ; BSR set to: 0
 14390  002CF0  0100               	movlb	0	; () banked
 14391  002CF2  2BD0               	incf	___ftpack@exp& (0+255),f,b
 14392                           
 14393                           ; BSR set to: 0
 14394  002CF4  0E01               	movlw	1
 14395  002CF6  0100               	movlb	0	; () banked
 14396  002CF8  27CD               	addwf	___ftpack@arg& (0+255),f,b
 14397  002CFA  0E00               	movlw	0
 14398  002CFC  0100               	movlb	0	; () banked
 14399  002CFE  23CE               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 14400  002D00  0E00               	movlw	0
 14401  002D02  0100               	movlb	0	; () banked
 14402  002D04  23CF               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 14403  002D06  0100               	movlb	0	; () banked
 14404  002D08  90D8               	bcf	status,0,c
 14405  002D0A  33CF               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 14406  002D0C  33CE               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 14407  002D0E  33CD               	rrcf	___ftpack@arg& (0+255),f,b
 14408  002D10  D000               	goto	l8501
 14409  002D12                     l8501:
 14410                           
 14411                           ; BSR set to: 0
 14412  002D12  0E00               	movlw	0
 14413  002D14  0100               	movlb	0	; () banked
 14414  002D16  15CD               	andwf	___ftpack@arg& (0+255),w,b
 14415  002D18  0100               	movlb	0	; () banked
 14416  002D1A  6FD2               	movwf	??___ftpack& (0+255),b
 14417  002D1C  0E00               	movlw	0
 14418  002D1E  0100               	movlb	0	; () banked
 14419  002D20  15CE               	andwf	(___ftpack@arg+1)& (0+255),w,b
 14420  002D22  0100               	movlb	0	; () banked
 14421  002D24  6FD3               	movwf	(??___ftpack+1)& (0+255),b
 14422  002D26  0EFF               	movlw	255
 14423  002D28  0100               	movlb	0	; () banked
 14424  002D2A  15CF               	andwf	(___ftpack@arg+2)& (0+255),w,b
 14425  002D2C  0100               	movlb	0	; () banked
 14426  002D2E  6FD4               	movwf	(??___ftpack+2)& (0+255),b
 14427  002D30  0100               	movlb	0	; () banked
 14428  002D32  51D2               	movf	??___ftpack& (0+255),w,b
 14429  002D34  0100               	movlb	0	; () banked
 14430  002D36  11D3               	iorwf	(??___ftpack+1)& (0+255),w,b
 14431  002D38  0100               	movlb	0	; () banked
 14432  002D3A  11D4               	iorwf	(??___ftpack+2)& (0+255),w,b
 14433  002D3C  B4D8               	btfsc	status,2,c
 14434  002D3E  D00A               	goto	l8505
 14435  002D40  D7D7               	goto	l8497
 14436                           
 14437                           ; BSR set to: 0
 14438  002D42  D008               	goto	l8505
 14439  002D44                     l8503:
 14440                           
 14441                           ; BSR set to: 0
 14442  002D44  0100               	movlb	0	; () banked
 14443  002D46  07D0               	decf	___ftpack@exp& (0+255),f,b
 14444  002D48  0100               	movlb	0	; () banked
 14445  002D4A  90D8               	bcf	status,0,c
 14446  002D4C  37CD               	rlcf	___ftpack@arg& (0+255),f,b
 14447  002D4E  37CE               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 14448  002D50  37CF               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 14449  002D52  D000               	goto	l8505
 14450  002D54                     l8505:
 14451                           
 14452                           ; BSR set to: 0
 14453  002D54  0100               	movlb	0	; () banked
 14454  002D56  BFCE               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 14455  002D58  D005               	goto	l1790
 14456                           
 14457                           ; BSR set to: 0
 14458  002D5A  0E02               	movlw	2
 14459  002D5C  0100               	movlb	0	; () banked
 14460  002D5E  61D0               	cpfslt	___ftpack@exp& (0+255),b
 14461  002D60  D7F1               	goto	l8503
 14462  002D62  D000               	goto	l1790
 14463  002D64                     l1790:
 14464                           
 14465                           ; BSR set to: 0
 14466  002D64  0100               	movlb	0	; () banked
 14467  002D66  B1D0               	btfsc	___ftpack@exp& (0+255),0,b
 14468  002D68  D003               	goto	l8511
 14469                           
 14470                           ; BSR set to: 0
 14471  002D6A  0100               	movlb	0	; () banked
 14472  002D6C  9FCE               	bcf	(___ftpack@arg+1)& (0+255),7,b
 14473  002D6E  D000               	goto	l8511
 14474  002D70                     l8511:
 14475                           
 14476                           ; BSR set to: 0
 14477  002D70  0100               	movlb	0	; () banked
 14478  002D72  90D8               	bcf	status,0,c
 14479  002D74  33D0               	rrcf	___ftpack@exp& (0+255),f,b
 14480  002D76  0100               	movlb	0	; () banked
 14481  002D78  51D0               	movf	___ftpack@exp& (0+255),w,b
 14482  002D7A  0100               	movlb	0	; () banked
 14483  002D7C  13CF               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 14484                           
 14485                           ; BSR set to: 0
 14486  002D7E  0100               	movlb	0	; () banked
 14487  002D80  51D1               	movf	___ftpack@sign& (0+255),w,b
 14488  002D82  0100               	movlb	0	; () banked
 14489  002D84  B4D8               	btfsc	status,2,c
 14490  002D86  D003               	goto	l8517
 14491                           
 14492                           ; BSR set to: 0
 14493  002D88  0100               	movlb	0	; () banked
 14494  002D8A  8FCF               	bsf	(___ftpack@arg+2)& (0+255),7,b
 14495  002D8C  D000               	goto	l8517
 14496  002D8E                     l8517:
 14497                           
 14498                           ; BSR set to: 0
 14499  002D8E  C0CD  F0CD         	movff	___ftpack@arg,?___ftpack
 14500  002D92  C0CE  F0CE         	movff	___ftpack@arg+1,?___ftpack+1
 14501  002D96  C0CF  F0CF         	movff	___ftpack@arg+2,?___ftpack+2
 14502  002D9A  D000               	goto	l1779
 14503  002D9C                     l1779:
 14504                           
 14505                           ; BSR set to: 0
 14506  002D9C  0012               	return		;funcret
 14507  002D9E                     __end_of___ftpack:
 14508                           	opt stack 0
 14509                           tblptru	equ	0xFF8
 14510                           tblptrh	equ	0xFF7
 14511                           tblptrl	equ	0xFF6
 14512                           tablat	equ	0xFF5
 14513                           prodh	equ	0xFF4
 14514                           prodl	equ	0xFF3
 14515                           intcon	equ	0xFF2
 14516                           intcon2	equ	0xFF1
 14517                           postinc0	equ	0xFEE
 14518                           wreg	equ	0xFE8
 14519                           postdec1	equ	0xFE5
 14520                           fsr1l	equ	0xFE1
 14521                           indf2	equ	0xFDF
 14522                           postinc2	equ	0xFDE
 14523                           fsr2h	equ	0xFDA
 14524                           fsr2l	equ	0xFD9
 14525                           status	equ	0xFD8
 14526                           
 14527 ;; *************** function _Deactivate_Buzzer *****************
 14528 ;; Defined at:
 14529 ;;		line 131 in file "utils.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;		None
 14532 ;; Auto vars:     Size  Location     Type
 14533 ;;		None
 14534 ;; Return value:  Size  Location     Type
 14535 ;;		None               void
 14536 ;; Registers used:
 14537 ;;		wreg, status,2
 14538 ;; Tracked objects:
 14539 ;;		On entry : 0/0
 14540 ;;		On exit  : 0/0
 14541 ;;		Unchanged: 0/0
 14542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;Total ram usage:        0 bytes
 14548 ;; Hardware stack levels used:    1
 14549 ;; Hardware stack levels required when called:    4
 14550 ;; This function calls:
 14551 ;;		Nothing
 14552 ;; This function is called by:
 14553 ;;		_Test_Alarm
 14554 ;;		_Do_Beep_Good
 14555 ;;		_Do_Beep_Bad
 14556 ;;		_Do_Beep
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           	psect	text67
 14561  004E12                     __ptext67:
 14562                           	opt stack 0
 14563  004E12                     _Deactivate_Buzzer:
 14564                           	opt stack 25
 14565                           
 14566                           ;utils.c: 133: CCP2CON = 0x0;
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;incstack = 0
 14570  004E12  0E00               	movlw	0
 14571  004E14  6EBA               	movwf	4026,c	;volatile
 14572                           
 14573                           ;utils.c: 134: PORTBbits.RB3 = 0;
 14574  004E16  9681               	bcf	3969,3,c	;volatile
 14575  004E18  0012               	return		;funcret
 14576  004E1A                     __end_of_Deactivate_Buzzer:
 14577                           	opt stack 0
 14578                           tblptru	equ	0xFF8
 14579                           tblptrh	equ	0xFF7
 14580                           tblptrl	equ	0xFF6
 14581                           tablat	equ	0xFF5
 14582                           prodh	equ	0xFF4
 14583                           prodl	equ	0xFF3
 14584                           intcon	equ	0xFF2
 14585                           intcon2	equ	0xFF1
 14586                           postinc0	equ	0xFEE
 14587                           wreg	equ	0xFE8
 14588                           postdec1	equ	0xFE5
 14589                           fsr1l	equ	0xFE1
 14590                           indf2	equ	0xFDF
 14591                           postinc2	equ	0xFDE
 14592                           fsr2h	equ	0xFDA
 14593                           fsr2l	equ	0xFD9
 14594                           status	equ	0xFD8
 14595                           
 14596 ;; *************** function _Activate_Buzzer_500Hz *****************
 14597 ;; Defined at:
 14598 ;;		line 104 in file "utils.c"
 14599 ;; Parameters:    Size  Location     Type
 14600 ;;		None
 14601 ;; Auto vars:     Size  Location     Type
 14602 ;;		None
 14603 ;; Return value:  Size  Location     Type
 14604 ;;		None               void
 14605 ;; Registers used:
 14606 ;;		wreg, status,2
 14607 ;; Tracked objects:
 14608 ;;		On entry : 0/0
 14609 ;;		On exit  : 0/0
 14610 ;;		Unchanged: 0/0
 14611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14616 ;;Total ram usage:        0 bytes
 14617 ;; Hardware stack levels used:    1
 14618 ;; Hardware stack levels required when called:    4
 14619 ;; This function calls:
 14620 ;;		Nothing
 14621 ;; This function is called by:
 14622 ;;		_Do_Beep_Bad
 14623 ;; This function uses a non-reentrant model
 14624 ;;
 14625                           
 14626                           	psect	text68
 14627  004D32                     __ptext68:
 14628                           	opt stack 0
 14629  004D32                     _Activate_Buzzer_500Hz:
 14630                           	opt stack 24
 14631                           
 14632                           ;utils.c: 107: PR2 = 0b11111001;
 14633                           
 14634                           ;incstack = 0
 14635  004D32  0EF9               	movlw	249
 14636  004D34  6ECB               	movwf	4043,c	;volatile
 14637                           
 14638                           ;utils.c: 108: T2CON = 0b00000111;
 14639  004D36  0E07               	movlw	7
 14640  004D38  6ECA               	movwf	4042,c	;volatile
 14641                           
 14642                           ;utils.c: 109: CCPR2L = 0b01111100;
 14643  004D3A  0E7C               	movlw	124
 14644  004D3C  6EBB               	movwf	4027,c	;volatile
 14645                           
 14646                           ;utils.c: 110: CCP2CON = 0b00111100;
 14647  004D3E  0E3C               	movlw	60
 14648  004D40  6EBA               	movwf	4026,c	;volatile
 14649  004D42  0012               	return		;funcret
 14650  004D44                     __end_of_Activate_Buzzer_500Hz:
 14651                           	opt stack 0
 14652                           tblptru	equ	0xFF8
 14653                           tblptrh	equ	0xFF7
 14654                           tblptrl	equ	0xFF6
 14655                           tablat	equ	0xFF5
 14656                           prodh	equ	0xFF4
 14657                           prodl	equ	0xFF3
 14658                           intcon	equ	0xFF2
 14659                           intcon2	equ	0xFF1
 14660                           postinc0	equ	0xFEE
 14661                           wreg	equ	0xFE8
 14662                           postdec1	equ	0xFE5
 14663                           fsr1l	equ	0xFE1
 14664                           indf2	equ	0xFDF
 14665                           postinc2	equ	0xFDE
 14666                           fsr2h	equ	0xFDA
 14667                           fsr2l	equ	0xFD9
 14668                           status	equ	0xFD8
 14669                           
 14670 ;; *************** function _Decrease_Alarm_Time *****************
 14671 ;; Defined at:
 14672 ;;		line 88 in file "Setup_Alarm_Time.c"
 14673 ;; Parameters:    Size  Location     Type
 14674 ;;		None
 14675 ;; Auto vars:     Size  Location     Type
 14676 ;;		None
 14677 ;; Return value:  Size  Location     Type
 14678 ;;		None               void
 14679 ;; Registers used:
 14680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14681 ;; Tracked objects:
 14682 ;;		On entry : 0/0
 14683 ;;		On exit  : 0/0
 14684 ;;		Unchanged: 0/0
 14685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14690 ;;Total ram usage:        0 bytes
 14691 ;; Hardware stack levels used:    1
 14692 ;; Hardware stack levels required when called:   12
 14693 ;; This function calls:
 14694 ;;		_Update_Setup_Alarm_Time_Screen
 14695 ;; This function is called by:
 14696 ;;		_Do_Setup_Alarm_Time
 14697 ;; This function uses a non-reentrant model
 14698 ;;
 14699                           
 14700                           	psect	text69
 14701  00447E                     __ptext69:
 14702                           	opt stack 0
 14703  00447E                     _Decrease_Alarm_Time:
 14704                           	opt stack 17
 14705                           
 14706                           ;Setup_Alarm_Time.c: 90: switch (Select_Alarm_Field)
 14707                           
 14708                           ;incstack = 0
 14709  00447E  D01D               	goto	l9685
 14710  004480                     l9665:
 14711                           
 14712                           ;Setup_Alarm_Time.c: 93: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 14713  004480  0100               	movlb	0	; () banked
 14714  004482  51F6               	movf	_setup_alarm_hour& (0+255),w,b
 14715  004484  A4D8               	btfss	status,2,c
 14716  004486  D004               	goto	l9669
 14717                           
 14718                           ; BSR set to: 0
 14719  004488  0E17               	movlw	23
 14720  00448A  0100               	movlb	0	; () banked
 14721  00448C  6FF6               	movwf	_setup_alarm_hour& (0+255),b
 14722  00448E  D020               	goto	l9687
 14723  004490                     l9669:
 14724                           
 14725                           ; BSR set to: 0
 14726                           ;Setup_Alarm_Time.c: 94: else --setup_alarm_hour;
 14727  004490  0100               	movlb	0	; () banked
 14728  004492  07F6               	decf	_setup_alarm_hour& (0+255),f,b
 14729                           
 14730                           ; BSR set to: 0
 14731                           ;Setup_Alarm_Time.c: 95: break;
 14732  004494  D01D               	goto	l9687
 14733  004496                     l9671:
 14734                           
 14735                           ;Setup_Alarm_Time.c: 98: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 14736  004496  0100               	movlb	0	; () banked
 14737  004498  51F7               	movf	_setup_alarm_minute& (0+255),w,b
 14738  00449A  B4D8               	btfsc	status,2,c
 14739  00449C  D007               	goto	l9679
 14740                           
 14741                           ; BSR set to: 0
 14742                           ;Setup_Alarm_Time.c: 99: else --setup_alarm_minute;
 14743                           
 14744                           ; BSR set to: 0
 14745                           
 14746                           ; BSR set to: 0
 14747  00449E  0100               	movlb	0	; () banked
 14748  0044A0  07F7               	decf	_setup_alarm_minute& (0+255),f,b
 14749                           
 14750                           ; BSR set to: 0
 14751                           ;Setup_Alarm_Time.c: 101: break;
 14752  0044A2  D016               	goto	l9687
 14753  0044A4                     l9677:
 14754                           
 14755                           ;Setup_Alarm_Time.c: 104: if (setup_alarm_second == 0) setup_alarm_minute = 59;
 14756  0044A4  0100               	movlb	0	; () banked
 14757  0044A6  51F8               	movf	_setup_alarm_second& (0+255),w,b
 14758  0044A8  A4D8               	btfss	status,2,c
 14759  0044AA  D004               	goto	l9681
 14760  0044AC                     l9679:
 14761                           
 14762                           ; BSR set to: 0
 14763  0044AC  0E3B               	movlw	59
 14764  0044AE  0100               	movlb	0	; () banked
 14765  0044B0  6FF7               	movwf	_setup_alarm_minute& (0+255),b
 14766  0044B2  D00E               	goto	l9687
 14767  0044B4                     l9681:
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;Setup_Alarm_Time.c: 105: else --setup_alarm_second;
 14771  0044B4  0100               	movlb	0	; () banked
 14772  0044B6  07F8               	decf	_setup_alarm_second& (0+255),f,b
 14773                           
 14774                           ; BSR set to: 0
 14775                           ;Setup_Alarm_Time.c: 112: }
 14776                           
 14777                           ; BSR set to: 0
 14778                           ;Setup_Alarm_Time.c: 111: break;
 14779                           
 14780                           ;Setup_Alarm_Time.c: 110: default:
 14781                           
 14782                           ; BSR set to: 0
 14783                           ;Setup_Alarm_Time.c: 107: break;
 14784  0044B8  D00B               	goto	l9687
 14785  0044BA                     l9685:
 14786  0044BA  504C               	movf	_Select_Alarm_Field,w,c
 14787                           
 14788                           ; Switch size 1, requested type "space"
 14789                           ; Number of cases is 3, Range of values is 0 to 2
 14790                           ; switch strategies available:
 14791                           ; Name         Instructions Cycles
 14792                           ; simple_byte           10     6 (average)
 14793                           ;	Chosen strategy is simple_byte
 14794  0044BC  0A00               	xorlw	0	; case 0
 14795  0044BE  B4D8               	btfsc	status,2,c
 14796  0044C0  D7DF               	goto	l9665
 14797  0044C2  0A01               	xorlw	1	; case 1
 14798  0044C4  B4D8               	btfsc	status,2,c
 14799  0044C6  D7E7               	goto	l9671
 14800  0044C8  0A03               	xorlw	3	; case 2
 14801  0044CA  B4D8               	btfsc	status,2,c
 14802  0044CC  D7EB               	goto	l9677
 14803  0044CE  D000               	goto	l9687
 14804  0044D0                     l9687:
 14805                           
 14806                           ;Setup_Alarm_Time.c: 113: Update_Setup_Alarm_Time_Screen();
 14807  0044D0  ECCF  F016         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 14808  0044D4  0012               	return		;funcret
 14809  0044D6                     __end_of_Decrease_Alarm_Time:
 14810                           	opt stack 0
 14811                           tblptru	equ	0xFF8
 14812                           tblptrh	equ	0xFF7
 14813                           tblptrl	equ	0xFF6
 14814                           tablat	equ	0xFF5
 14815                           prodh	equ	0xFF4
 14816                           prodl	equ	0xFF3
 14817                           intcon	equ	0xFF2
 14818                           intcon2	equ	0xFF1
 14819                           postinc0	equ	0xFEE
 14820                           wreg	equ	0xFE8
 14821                           postdec1	equ	0xFE5
 14822                           fsr1l	equ	0xFE1
 14823                           indf2	equ	0xFDF
 14824                           postinc2	equ	0xFDE
 14825                           fsr2h	equ	0xFDA
 14826                           fsr2l	equ	0xFD9
 14827                           status	equ	0xFD8
 14828                           
 14829 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 14830 ;; Defined at:
 14831 ;;		line 167 in file "Setup_Alarm_Time.c"
 14832 ;; Parameters:    Size  Location     Type
 14833 ;;		None
 14834 ;; Auto vars:     Size  Location     Type
 14835 ;;		None
 14836 ;; Return value:  Size  Location     Type
 14837 ;;		None               void
 14838 ;; Registers used:
 14839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14840 ;; Tracked objects:
 14841 ;;		On entry : 0/0
 14842 ;;		On exit  : 0/0
 14843 ;;		Unchanged: 0/0
 14844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14849 ;;Total ram usage:        0 bytes
 14850 ;; Hardware stack levels used:    1
 14851 ;; Hardware stack levels required when called:   11
 14852 ;; This function calls:
 14853 ;;		___awdiv
 14854 ;;		___awmod
 14855 ;;		_drawtext
 14856 ;;		_printf
 14857 ;; This function is called by:
 14858 ;;		_Do_Setup_Alarm_Time
 14859 ;;		_Increase_Alarm_Time
 14860 ;;		_Decrease_Alarm_Time
 14861 ;; This function uses a non-reentrant model
 14862 ;;
 14863                           
 14864                           	psect	text70
 14865  002D9E                     __ptext70:
 14866                           	opt stack 0
 14867  002D9E                     _Update_Setup_Alarm_Time_Screen:
 14868                           	opt stack 18
 14869                           
 14870                           ;Setup_Alarm_Time.c: 169: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 14871                           
 14872                           ;incstack = 0
 14873  002D9E  0E9F               	movlw	low STR_28
 14874  002DA0  0100               	movlb	0	; () banked
 14875  002DA2  6FD9               	movwf	printf@f& (0+255),b
 14876  002DA4  0EFF               	movlw	high STR_28
 14877  002DA6  0100               	movlb	0	; () banked
 14878  002DA8  6FDA               	movwf	(printf@f+1)& (0+255),b
 14879  002DAA  C0F6  F0DB         	movff	_setup_alarm_hour,?_printf+2
 14880  002DAE  0100               	movlb	0	; () banked
 14881  002DB0  6BDC               	clrf	(?_printf+3)& (0+255),b
 14882  002DB2  C0F7  F0DD         	movff	_setup_alarm_minute,?_printf+4
 14883  002DB6  0100               	movlb	0	; () banked
 14884  002DB8  6BDE               	clrf	(?_printf+5)& (0+255),b
 14885  002DBA  C0F8  F0DF         	movff	_setup_alarm_second,?_printf+6
 14886  002DBE  0100               	movlb	0	; () banked
 14887  002DC0  6BE0               	clrf	(?_printf+7)& (0+255),b
 14888  002DC2  ECEB  F005         	call	_printf	;wreg free
 14889                           
 14890                           ;Setup_Alarm_Time.c: 170: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 14891  002DC6  C0F6  F16B         	movff	_setup_alarm_hour,___awdiv@dividend
 14892  002DCA  0101               	movlb	1	; () banked
 14893  002DCC  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
 14894  002DCE  0E00               	movlw	0
 14895  002DD0  0101               	movlb	1	; () banked
 14896  002DD2  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
 14897  002DD4  0E0A               	movlw	10
 14898  002DD6  6F6D               	movwf	___awdiv@divisor& (0+255),b
 14899  002DD8  ECBE  F019         	call	___awdiv	;wreg free
 14900  002DDC  0101               	movlb	1	; () banked
 14901  002DDE  516B               	movf	?___awdiv& (0+255),w,b
 14902  002DE0  0F30               	addlw	48
 14903  002DE2  0101               	movlb	1	; () banked
 14904  002DE4  6F3D               	movwf	_setup_alarm_time& (0+255),b
 14905                           
 14906                           ; BSR set to: 1
 14907                           ;Setup_Alarm_Time.c: 171: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';
 14908  002DE6  C0F6  F167         	movff	_setup_alarm_hour,___awmod@dividend
 14909  002DEA  0101               	movlb	1	; () banked
 14910  002DEC  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
 14911  002DEE  0E00               	movlw	0
 14912  002DF0  0101               	movlb	1	; () banked
 14913  002DF2  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
 14914  002DF4  0E0A               	movlw	10
 14915  002DF6  6F69               	movwf	___awmod@divisor& (0+255),b
 14916  002DF8  EC73  F01C         	call	___awmod	;wreg free
 14917  002DFC  0101               	movlb	1	; () banked
 14918  002DFE  5167               	movf	?___awmod& (0+255),w,b
 14919  002E00  0F30               	addlw	48
 14920  002E02  0101               	movlb	1	; () banked
 14921  002E04  6F3E               	movwf	(_setup_alarm_time+1)& (0+255),b
 14922                           
 14923                           ; BSR set to: 1
 14924                           ;Setup_Alarm_Time.c: 173: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';
 14925  002E06  C0F7  F16B         	movff	_setup_alarm_minute,___awdiv@dividend
 14926  002E0A  0101               	movlb	1	; () banked
 14927  002E0C  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
 14928  002E0E  0E00               	movlw	0
 14929  002E10  0101               	movlb	1	; () banked
 14930  002E12  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
 14931  002E14  0E0A               	movlw	10
 14932  002E16  6F6D               	movwf	___awdiv@divisor& (0+255),b
 14933  002E18  ECBE  F019         	call	___awdiv	;wreg free
 14934  002E1C  0101               	movlb	1	; () banked
 14935  002E1E  516B               	movf	?___awdiv& (0+255),w,b
 14936  002E20  0F30               	addlw	48
 14937  002E22  0101               	movlb	1	; () banked
 14938  002E24  6F40               	movwf	(_setup_alarm_time+3)& (0+255),b
 14939                           
 14940                           ; BSR set to: 1
 14941                           ;Setup_Alarm_Time.c: 174: setup_alarm_time[4] = (setup_alarm_minute%10) + '0';
 14942  002E26  C0F7  F167         	movff	_setup_alarm_minute,___awmod@dividend
 14943  002E2A  0101               	movlb	1	; () banked
 14944  002E2C  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
 14945  002E2E  0E00               	movlw	0
 14946  002E30  0101               	movlb	1	; () banked
 14947  002E32  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
 14948  002E34  0E0A               	movlw	10
 14949  002E36  6F69               	movwf	___awmod@divisor& (0+255),b
 14950  002E38  EC73  F01C         	call	___awmod	;wreg free
 14951  002E3C  0101               	movlb	1	; () banked
 14952  002E3E  5167               	movf	?___awmod& (0+255),w,b
 14953  002E40  0F30               	addlw	48
 14954  002E42  0101               	movlb	1	; () banked
 14955  002E44  6F41               	movwf	(_setup_alarm_time+4)& (0+255),b
 14956                           
 14957                           ; BSR set to: 1
 14958                           ;Setup_Alarm_Time.c: 176: setup_alarm_time[6] = (setup_alarm_second/10) + '0';
 14959  002E46  C0F8  F16B         	movff	_setup_alarm_second,___awdiv@dividend
 14960  002E4A  0101               	movlb	1	; () banked
 14961  002E4C  6B6C               	clrf	(___awdiv@dividend+1)& (0+255),b
 14962  002E4E  0E00               	movlw	0
 14963  002E50  0101               	movlb	1	; () banked
 14964  002E52  6F6E               	movwf	(___awdiv@divisor+1)& (0+255),b
 14965  002E54  0E0A               	movlw	10
 14966  002E56  6F6D               	movwf	___awdiv@divisor& (0+255),b
 14967  002E58  ECBE  F019         	call	___awdiv	;wreg free
 14968  002E5C  0101               	movlb	1	; () banked
 14969  002E5E  516B               	movf	?___awdiv& (0+255),w,b
 14970  002E60  0F30               	addlw	48
 14971  002E62  0101               	movlb	1	; () banked
 14972  002E64  6F43               	movwf	(_setup_alarm_time+6)& (0+255),b
 14973                           
 14974                           ; BSR set to: 1
 14975                           ;Setup_Alarm_Time.c: 177: setup_alarm_time[7] = (setup_alarm_second%10) + '0';
 14976  002E66  C0F8  F167         	movff	_setup_alarm_second,___awmod@dividend
 14977  002E6A  0101               	movlb	1	; () banked
 14978  002E6C  6B68               	clrf	(___awmod@dividend+1)& (0+255),b
 14979  002E6E  0E00               	movlw	0
 14980  002E70  0101               	movlb	1	; () banked
 14981  002E72  6F6A               	movwf	(___awmod@divisor+1)& (0+255),b
 14982  002E74  0E0A               	movlw	10
 14983  002E76  6F69               	movwf	___awmod@divisor& (0+255),b
 14984  002E78  EC73  F01C         	call	___awmod	;wreg free
 14985  002E7C  0101               	movlb	1	; () banked
 14986  002E7E  5167               	movf	?___awmod& (0+255),w,b
 14987  002E80  0F30               	addlw	48
 14988  002E82  0101               	movlb	1	; () banked
 14989  002E84  6F44               	movwf	(_setup_alarm_time+7)& (0+255),b
 14990                           
 14991                           ;Setup_Alarm_Time.c: 178: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 14992  002E86  0E34               	movlw	52
 14993  002E88  0101               	movlb	1	; () banked
 14994  002E8A  6F63               	movwf	drawtext@y& (0+255),b
 14995  002E8C  0E3D               	movlw	low _setup_alarm_time
 14996  002E8E  0101               	movlb	1	; () banked
 14997  002E90  6F64               	movwf	drawtext@_text& (0+255),b
 14998  002E92  0E01               	movlw	high _setup_alarm_time
 14999  002E94  0101               	movlb	1	; () banked
 15000  002E96  6F65               	movwf	(drawtext@_text+1)& (0+255),b
 15001  002E98  0E07               	movlw	7
 15002  002E9A  0101               	movlb	1	; () banked
 15003  002E9C  6F67               	movwf	(drawtext@color+1)& (0+255),b
 15004  002E9E  6966               	setf	drawtext@color& (0+255),b
 15005  002EA0  0E00               	movlw	0
 15006  002EA2  0101               	movlb	1	; () banked
 15007  002EA4  6F69               	movwf	(drawtext@bg+1)& (0+255),b
 15008  002EA6  0E00               	movlw	0
 15009  002EA8  6F68               	movwf	drawtext@bg& (0+255),b
 15010  002EAA  0E02               	movlw	2
 15011  002EAC  0101               	movlb	1	; () banked
 15012  002EAE  6F6A               	movwf	drawtext@size& (0+255),b
 15013  002EB0  0E0F               	movlw	15
 15014  002EB2  EC18  F015         	call	_drawtext
 15015  002EB6  0012               	return		;funcret
 15016  002EB8                     __end_of_Update_Setup_Alarm_Time_Screen:
 15017                           	opt stack 0
 15018                           tblptru	equ	0xFF8
 15019                           tblptrh	equ	0xFF7
 15020                           tblptrl	equ	0xFF6
 15021                           tablat	equ	0xFF5
 15022                           prodh	equ	0xFF4
 15023                           prodl	equ	0xFF3
 15024                           intcon	equ	0xFF2
 15025                           intcon2	equ	0xFF1
 15026                           postinc0	equ	0xFEE
 15027                           wreg	equ	0xFE8
 15028                           postdec1	equ	0xFE5
 15029                           fsr1l	equ	0xFE1
 15030                           indf2	equ	0xFDF
 15031                           postinc2	equ	0xFDE
 15032                           fsr2h	equ	0xFDA
 15033                           fsr2l	equ	0xFD9
 15034                           status	equ	0xFD8
 15035                           
 15036 ;; *************** function _printf *****************
 15037 ;; Defined at:
 15038 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15039 ;; Parameters:    Size  Location     Type
 15040 ;;  f               2   12[BANK0 ] PTR const unsigned char 
 15041 ;;		 -> STR_38(22), STR_37(16), STR_28(11), STR_5(20), 
 15042 ;;		 -> STR_4(24), STR_3(21), STR_2(30), STR_1(33), 
 15043 ;; Auto vars:     Size  Location     Type
 15044 ;;  idx             1    4[BANK1 ] unsigned char 
 15045 ;;  tmpval          4    0        struct .
 15046 ;;  cp              3    0        PTR const unsigned char 
 15047 ;;  width           2   11[BANK1 ] int 
 15048 ;;  val             2    8[BANK1 ] unsigned int 
 15049 ;;  ap              2    5[BANK1 ] PTR void [1]
 15050 ;;		 -> ?i2_printf(2), ?_printf(2), 
 15051 ;;  len             2    0        unsigned int 
 15052 ;;  c               1   13[BANK1 ] char 
 15053 ;;  flag            1   10[BANK1 ] unsigned char 
 15054 ;;  prec            1    7[BANK1 ] char 
 15055 ;; Return value:  Size  Location     Type
 15056 ;;                  2   12[BANK0 ] int 
 15057 ;; Registers used:
 15058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15059 ;; Tracked objects:
 15060 ;;		On entry : 0/0
 15061 ;;		On exit  : 0/0
 15062 ;;		Unchanged: 0/0
 15063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15064 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15065 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15066 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15067 ;;      Totals:         0      14      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15068 ;;Total ram usage:       28 bytes
 15069 ;; Hardware stack levels used:    1
 15070 ;; Hardware stack levels required when called:    5
 15071 ;; This function calls:
 15072 ;;		___lwdiv
 15073 ;;		___lwmod
 15074 ;;		___wmul
 15075 ;;		_isdigit
 15076 ;;		_putch
 15077 ;; This function is called by:
 15078 ;;		_main
 15079 ;;		_Update_Setup_Alarm_Time_Screen
 15080 ;;		_check_for_button_input
 15081 ;; This function uses a non-reentrant model
 15082 ;;
 15083                           
 15084                           	psect	text71
 15085  000BD6                     __ptext71:
 15086                           	opt stack 0
 15087  000BD6                     _printf:
 15088                           	opt stack 25
 15089                           
 15090                           ;doprnt.c: 466: va_list ap;
 15091                           ;doprnt.c: 499: signed char c;
 15092                           ;doprnt.c: 501: int width;
 15093                           ;doprnt.c: 506: signed char prec;
 15094                           ;doprnt.c: 508: unsigned char flag;
 15095                           ;doprnt.c: 523: union {
 15096                           ;doprnt.c: 524: unsigned long vd;
 15097                           ;doprnt.c: 525: double integ;
 15098                           ;doprnt.c: 526: } tmpval;
 15099                           ;doprnt.c: 528: unsigned int val;
 15100                           ;doprnt.c: 529: unsigned len;
 15101                           ;doprnt.c: 530: const char * cp;
 15102                           ;doprnt.c: 533: *ap = __va_start();
 15103                           
 15104                           ;incstack = 0
 15105  000BD6  0EDB               	movlw	low (?_printf+2)
 15106  000BD8  0101               	movlb	1	; () banked
 15107  000BDA  6F5D               	movwf	printf@ap& (0+255),b
 15108  000BDC  0E00               	movlw	high (?_printf+2)
 15109  000BDE  0101               	movlb	1	; () banked
 15110  000BE0  6F5E               	movwf	(printf@ap+1)& (0+255),b
 15111                           
 15112                           ;doprnt.c: 536: while(c = *f++) {
 15113  000BE2  D1EB               	goto	l8825
 15114  000BE4                     l8699:
 15115                           
 15116                           ; BSR set to: 1
 15117                           ;doprnt.c: 538: if(c != '%')
 15118  000BE4  0E25               	movlw	37
 15119  000BE6  0101               	movlb	1	; () banked
 15120  000BE8  1965               	xorwf	printf@c& (0+255),w,b
 15121  000BEA  B4D8               	btfsc	status,2,c
 15122  000BEC  D005               	goto	l8703
 15123                           
 15124                           ; BSR set to: 1
 15125                           ;doprnt.c: 540: {
 15126                           ;doprnt.c: 541: (putch(c) );
 15127  000BEE  0101               	movlb	1	; () banked
 15128  000BF0  5165               	movf	printf@c& (0+255),w,b
 15129  000BF2  ECBD  F026         	call	_putch
 15130                           
 15131                           ;doprnt.c: 542: continue;
 15132  000BF6  D1E1               	goto	l8825
 15133  000BF8                     l8703:
 15134                           
 15135                           ;doprnt.c: 543: }
 15136                           ;doprnt.c: 546: width = 0;
 15137  000BF8  0E00               	movlw	0
 15138  000BFA  0101               	movlb	1	; () banked
 15139  000BFC  6F64               	movwf	(printf@width+1)& (0+255),b
 15140  000BFE  0E00               	movlw	0
 15141  000C00  6F63               	movwf	printf@width& (0+255),b
 15142                           
 15143                           ;doprnt.c: 548: flag = 0;
 15144  000C02  0E00               	movlw	0
 15145  000C04  0101               	movlb	1	; () banked
 15146  000C06  6F62               	movwf	printf@flag& (0+255),b
 15147                           
 15148                           ; BSR set to: 1
 15149                           ;doprnt.c: 551: switch(*f) {
 15150                           
 15151                           ;doprnt.c: 550: for(;;) {
 15152  000C08  D007               	goto	l8709
 15153  000C0A                     l8705:
 15154                           
 15155                           ;doprnt.c: 580: flag |= 0x04;
 15156  000C0A  0101               	movlb	1	; () banked
 15157  000C0C  8562               	bsf	printf@flag& (0+255),2,b
 15158                           
 15159                           ;doprnt.c: 581: f++;
 15160  000C0E  0100               	movlb	0	; () banked
 15161  000C10  4BD9               	infsnz	printf@f& (0+255),f,b
 15162  000C12  2BDA               	incf	(printf@f+1)& (0+255),f,b
 15163                           
 15164                           ;doprnt.c: 582: continue;
 15165  000C14  D001               	goto	l8709
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;doprnt.c: 584: }
 15169  000C16  D00B               	goto	l8711
 15170  000C18                     l8709:
 15171  000C18  C0D9  FFF6         	movff	printf@f,tblptrl
 15172  000C1C  C0DA  FFF7         	movff	printf@f+1,tblptrh
 15173  000C20                     	if	0	;tblptru may be non-zero
 15174  000C20                     	endif
 15175  000C20                     	if	0	;tblptru may be non-zero
 15176  000C20                     	endif
 15177  000C20  0008               	tblrd		*
 15178  000C22  50F5               	movf	tablat,w,c
 15179                           
 15180                           ; Switch size 1, requested type "space"
 15181                           ; Number of cases is 1, Range of values is 48 to 48
 15182                           ; switch strategies available:
 15183                           ; Name         Instructions Cycles
 15184                           ; simple_byte            4     3 (average)
 15185                           ;	Chosen strategy is simple_byte
 15186  000C24  0A30               	xorlw	48	; case 48
 15187  000C26  B4D8               	btfsc	status,2,c
 15188  000C28  D7F0               	goto	l8705
 15189                           
 15190                           ;doprnt.c: 585: break;
 15191  000C2A  D001               	goto	l8711
 15192                           
 15193                           ;doprnt.c: 586: }
 15194  000C2C  D7F5               	goto	l8709
 15195  000C2E                     l8711:
 15196                           
 15197                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15198  000C2E  C0D9  FFF6         	movff	printf@f,tblptrl
 15199  000C32  C0DA  FFF7         	movff	printf@f+1,tblptrh
 15200  000C36                     	if	0	;tblptru may be non-zero
 15201  000C36                     	endif
 15202  000C36                     	if	0	;tblptru may be non-zero
 15203  000C36                     	endif
 15204  000C36  0008               	tblrd		*
 15205  000C38  50F5               	movf	tablat,w,c
 15206  000C3A  ECC4  F024         	call	_isdigit
 15207  000C3E  A0D8               	btfss	status,0,c
 15208  000C40  D04A               	goto	l8727
 15209                           
 15210                           ;doprnt.c: 598: width = 0;
 15211  000C42  0E00               	movlw	0
 15212  000C44  0101               	movlb	1	; () banked
 15213  000C46  6F64               	movwf	(printf@width+1)& (0+255),b
 15214  000C48  0E00               	movlw	0
 15215  000C4A  6F63               	movwf	printf@width& (0+255),b
 15216  000C4C  D000               	goto	l8715
 15217  000C4E                     l8715:
 15218                           
 15219                           ;doprnt.c: 600: width *= 10;
 15220  000C4E  C163  F0CD         	movff	printf@width,___wmul@multiplier
 15221  000C52  C164  F0CE         	movff	printf@width+1,___wmul@multiplier+1
 15222  000C56  0E00               	movlw	0
 15223  000C58  0100               	movlb	0	; () banked
 15224  000C5A  6FD0               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15225  000C5C  0E0A               	movlw	10
 15226  000C5E  6FCF               	movwf	___wmul@multiplicand& (0+255),b
 15227  000C60  EC45  F024         	call	___wmul	;wreg free
 15228  000C64  C0CD  F163         	movff	?___wmul,printf@width
 15229  000C68  C0CE  F164         	movff	?___wmul+1,printf@width+1
 15230                           
 15231                           ;doprnt.c: 601: width += *f++ - '0';
 15232  000C6C  0ED0               	movlw	208
 15233  000C6E  0101               	movlb	1	; () banked
 15234  000C70  6F58               	movwf	??_printf& (0+255),b
 15235  000C72  0EFF               	movlw	255
 15236  000C74  0101               	movlb	1	; () banked
 15237  000C76  6F59               	movwf	(??_printf+1)& (0+255),b
 15238  000C78  C0D9  FFF6         	movff	printf@f,tblptrl
 15239  000C7C  C0DA  FFF7         	movff	printf@f+1,tblptrh
 15240  000C80                     	if	0	;tblptru may be non-zero
 15241  000C80                     	endif
 15242  000C80                     	if	0	;tblptru may be non-zero
 15243  000C80                     	endif
 15244  000C80  0008               	tblrd		*
 15245  000C82  50F5               	movf	tablat,w,c
 15246  000C84  0101               	movlb	1	; () banked
 15247  000C86  6F5A               	movwf	(??_printf+2)& (0+255),b
 15248  000C88  6B5B               	clrf	(??_printf+3)& (0+255),b
 15249  000C8A  0101               	movlb	1	; () banked
 15250  000C8C  5158               	movf	??_printf& (0+255),w,b
 15251  000C8E  0101               	movlb	1	; () banked
 15252  000C90  275A               	addwf	(??_printf+2)& (0+255),f,b
 15253  000C92  0101               	movlb	1	; () banked
 15254  000C94  5159               	movf	(??_printf+1)& (0+255),w,b
 15255  000C96  0101               	movlb	1	; () banked
 15256  000C98  235B               	addwfc	(??_printf+3)& (0+255),f,b
 15257  000C9A  0101               	movlb	1	; () banked
 15258  000C9C  515A               	movf	(??_printf+2)& (0+255),w,b
 15259  000C9E  0101               	movlb	1	; () banked
 15260  000CA0  2763               	addwf	printf@width& (0+255),f,b
 15261  000CA2  0101               	movlb	1	; () banked
 15262  000CA4  515B               	movf	(??_printf+3)& (0+255),w,b
 15263  000CA6  0101               	movlb	1	; () banked
 15264  000CA8  2364               	addwfc	(printf@width+1)& (0+255),f,b
 15265                           
 15266                           ; BSR set to: 1
 15267  000CAA  0100               	movlb	0	; () banked
 15268  000CAC  4BD9               	infsnz	printf@f& (0+255),f,b
 15269  000CAE  2BDA               	incf	(printf@f+1)& (0+255),f,b
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15273  000CB0  C0D9  FFF6         	movff	printf@f,tblptrl
 15274  000CB4  C0DA  FFF7         	movff	printf@f+1,tblptrh
 15275  000CB8                     	if	0	;tblptru may be non-zero
 15276  000CB8                     	endif
 15277  000CB8                     	if	0	;tblptru may be non-zero
 15278  000CB8                     	endif
 15279  000CB8  0008               	tblrd		*
 15280  000CBA  50F5               	movf	tablat,w,c
 15281  000CBC  ECC4  F024         	call	_isdigit
 15282  000CC0  A0D8               	btfss	status,0,c
 15283  000CC2  D009               	goto	l8727
 15284  000CC4  D7C4               	goto	l8715
 15285                           
 15286                           ;doprnt.c: 608: }
 15287                           ;doprnt.c: 635: switch(c = *f++) {
 15288  000CC6  D007               	goto	l8727
 15289                           
 15290                           ;doprnt.c: 638: goto alldone;
 15291                           
 15292                           ;doprnt.c: 637: case 0:
 15293  000CC8  D188               	goto	l1435
 15294                           
 15295                           ;doprnt.c: 698: case 'i':
 15296                           ;doprnt.c: 699: break;
 15297                           
 15298                           ;doprnt.c: 697: case 'd':
 15299  000CCA  D01E               	goto	l1398
 15300  000CCC                     l8723:
 15301                           
 15302                           ;doprnt.c: 721: flag |= 0x80;
 15303  000CCC  0101               	movlb	1	; () banked
 15304  000CCE  8F62               	bsf	printf@flag& (0+255),7,b
 15305                           
 15306                           ;doprnt.c: 723: break;
 15307  000CD0  D01B               	goto	l1398
 15308                           
 15309                           ; BSR set to: 1
 15310                           ;doprnt.c: 813: continue;
 15311                           
 15312                           ;doprnt.c: 802: default:
 15313  000CD2  D173               	goto	l8825
 15314                           
 15315                           ; BSR set to: 1
 15316                           ;doprnt.c: 822: }
 15317  000CD4  D019               	goto	l1398
 15318  000CD6                     l8727:
 15319  000CD6  C0D9  FFF6         	movff	printf@f,tblptrl
 15320  000CDA  C0DA  FFF7         	movff	printf@f+1,tblptrh
 15321  000CDE  0100               	movlb	0	; () banked
 15322  000CE0  4BD9               	infsnz	printf@f& (0+255),f,b
 15323  000CE2  2BDA               	incf	(printf@f+1)& (0+255),f,b
 15324  000CE4                     	if	0	;tblptru may be non-zero
 15325  000CE4                     	endif
 15326  000CE4                     	if	0	;tblptru may be non-zero
 15327  000CE4                     	endif
 15328  000CE4  0008               	tblrd		*
 15329  000CE6  CFF5 F165          	movff	tablat,printf@c
 15330  000CEA  0101               	movlb	1	; () banked
 15331  000CEC  5165               	movf	printf@c& (0+255),w,b
 15332                           
 15333                           ; Switch size 1, requested type "space"
 15334                           ; Number of cases is 4, Range of values is 0 to 120
 15335                           ; switch strategies available:
 15336                           ; Name         Instructions Cycles
 15337                           ; simple_byte           13     7 (average)
 15338                           ;	Chosen strategy is simple_byte
 15339  000CEE  0A00               	xorlw	0	; case 0
 15340  000CF0  B4D8               	btfsc	status,2,c
 15341  000CF2  D173               	goto	l1435
 15342  000CF4  0A64               	xorlw	100	; case 100
 15343  000CF6  B4D8               	btfsc	status,2,c
 15344  000CF8  D007               	goto	l1398
 15345  000CFA  0A0D               	xorlw	13	; case 105
 15346  000CFC  B4D8               	btfsc	status,2,c
 15347  000CFE  D004               	goto	l1398
 15348  000D00  0A11               	xorlw	17	; case 120
 15349  000D02  B4D8               	btfsc	status,2,c
 15350  000D04  D7E3               	goto	l8723
 15351  000D06  D159               	goto	l8825
 15352  000D08                     l1398:
 15353                           
 15354                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 15355  000D08  0101               	movlb	1	; () banked
 15356  000D0A  BF62               	btfsc	printf@flag& (0+255),7,b
 15357  000D0C  D019               	goto	l8739
 15358                           
 15359                           ; BSR set to: 1
 15360                           ;doprnt.c: 1253: {
 15361                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15362  000D0E  C15D  FFD9         	movff	printf@ap,fsr2l
 15363  000D12  C15E  FFDA         	movff	printf@ap+1,fsr2h
 15364  000D16  CFDE F160          	movff	postinc2,printf@val
 15365  000D1A  CFDD F161          	movff	postdec2,printf@val+1
 15366                           
 15367                           ; BSR set to: 1
 15368  000D1E  0E02               	movlw	2
 15369  000D20  0101               	movlb	1	; () banked
 15370  000D22  275D               	addwf	printf@ap& (0+255),f,b
 15371  000D24  0E00               	movlw	0
 15372  000D26  235E               	addwfc	(printf@ap+1)& (0+255),f,b
 15373                           
 15374                           ; BSR set to: 1
 15375                           ;doprnt.c: 1261: if((int)val < 0) {
 15376  000D28  0101               	movlb	1	; () banked
 15377  000D2A  AF61               	btfss	(printf@val+1)& (0+255),7,b
 15378  000D2C  D05D               	goto	l8773
 15379                           
 15380                           ; BSR set to: 1
 15381                           ;doprnt.c: 1262: flag |= 0x03;
 15382  000D2E  0E03               	movlw	3
 15383  000D30  0101               	movlb	1	; () banked
 15384  000D32  1362               	iorwf	printf@flag& (0+255),f,b
 15385                           
 15386                           ; BSR set to: 1
 15387                           ;doprnt.c: 1263: val = -val;
 15388  000D34  0101               	movlb	1	; () banked
 15389  000D36  6D60               	negf	printf@val& (0+255),b
 15390  000D38  1F61               	comf	(printf@val+1)& (0+255),f,b
 15391  000D3A  B0D8               	btfsc	status,0,c
 15392  000D3C  2B61               	incf	(printf@val+1)& (0+255),f,b
 15393                           
 15394                           ; BSR set to: 1
 15395                           ;doprnt.c: 1264: }
 15396                           ;doprnt.c: 1266: }
 15397  000D3E  D054               	goto	l8773
 15398  000D40                     l8739:
 15399                           
 15400                           ; BSR set to: 1
 15401                           ;doprnt.c: 1268: else
 15402                           ;doprnt.c: 1273: {
 15403                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15404  000D40  C15D  FFD9         	movff	printf@ap,fsr2l
 15405  000D44  C15E  FFDA         	movff	printf@ap+1,fsr2h
 15406  000D48  CFDE F160          	movff	postinc2,printf@val
 15407  000D4C  CFDD F161          	movff	postdec2,printf@val+1
 15408                           
 15409                           ; BSR set to: 1
 15410  000D50  0E02               	movlw	2
 15411  000D52  0101               	movlb	1	; () banked
 15412  000D54  275D               	addwf	printf@ap& (0+255),f,b
 15413  000D56  0E00               	movlw	0
 15414  000D58  235E               	addwfc	(printf@ap+1)& (0+255),f,b
 15415                           
 15416                           ; BSR set to: 1
 15417                           ;doprnt.c: 1287: }
 15418                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 15419  000D5A  D046               	goto	l8773
 15420  000D5C                     l8743:
 15421                           
 15422                           ; BSR set to: 1
 15423                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15424  000D5C  0E01               	movlw	1
 15425  000D5E  0101               	movlb	1	; () banked
 15426  000D60  6F65               	movwf	printf@c& (0+255),b
 15427  000D62                     l8745:
 15428                           
 15429                           ; BSR set to: 1
 15430  000D62  0E05               	movlw	5
 15431  000D64  0101               	movlb	1	; () banked
 15432  000D66  1965               	xorwf	printf@c& (0+255),w,b
 15433  000D68  B4D8               	btfsc	status,2,c
 15434  000D6A  D048               	goto	l8775
 15435  000D6C  D001               	goto	l8749
 15436                           
 15437                           ; BSR set to: 1
 15438  000D6E  D046               	goto	l8775
 15439  000D70                     l8749:
 15440                           
 15441                           ; BSR set to: 1
 15442                           ;doprnt.c: 1306: if(val < dpowers[c])
 15443  000D70  0101               	movlb	1	; () banked
 15444  000D72  5165               	movf	printf@c& (0+255),w,b
 15445  000D74  0D02               	mullw	2
 15446  000D76  0E56               	movlw	low _dpowers
 15447  000D78  24F3               	addwf	prodl,w,c
 15448  000D7A  6EF6               	movwf	tblptrl,c
 15449  000D7C  0EFE               	movlw	high _dpowers
 15450  000D7E  20F4               	addwfc	prodh,w,c
 15451  000D80  6EF7               	movwf	tblptrh,c
 15452  000D82                     	if	0	;There are less than 3 active tblptr bytes
 15453  000D82                     	endif
 15454  000D82  0009               	tblrd		*+
 15455  000D84  50F5               	movf	tablat,w,c
 15456  000D86  0101               	movlb	1	; () banked
 15457  000D88  5D60               	subwf	printf@val& (0+255),w,b
 15458  000D8A  0009               	tblrd		*+
 15459  000D8C  50F5               	movf	tablat,w,c
 15460  000D8E  0101               	movlb	1	; () banked
 15461  000D90  5961               	subwfb	(printf@val+1)& (0+255),w,b
 15462  000D92  A0D8               	btfss	status,0,c
 15463  000D94  D033               	goto	l8775
 15464  000D96  D001               	goto	l8753
 15465                           
 15466                           ; BSR set to: 1
 15467                           ;doprnt.c: 1307: break;
 15468  000D98  D031               	goto	l8775
 15469  000D9A                     l8753:
 15470                           
 15471                           ; BSR set to: 1
 15472  000D9A  0101               	movlb	1	; () banked
 15473  000D9C  2B65               	incf	printf@c& (0+255),f,b
 15474  000D9E  D7E1               	goto	l8745
 15475                           
 15476                           ; BSR set to: 1
 15477                           ;doprnt.c: 1309: break;
 15478                           
 15479                           ; BSR set to: 1
 15480  000DA0  D02D               	goto	l8775
 15481  000DA2                     l8757:
 15482                           
 15483                           ; BSR set to: 1
 15484                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 15485  000DA2  0E01               	movlw	1
 15486  000DA4  0101               	movlb	1	; () banked
 15487  000DA6  6F65               	movwf	printf@c& (0+255),b
 15488  000DA8                     l8759:
 15489                           
 15490                           ; BSR set to: 1
 15491  000DA8  0E04               	movlw	4
 15492  000DAA  0101               	movlb	1	; () banked
 15493  000DAC  1965               	xorwf	printf@c& (0+255),w,b
 15494  000DAE  B4D8               	btfsc	status,2,c
 15495  000DB0  D025               	goto	l8775
 15496  000DB2  D001               	goto	l8763
 15497                           
 15498                           ; BSR set to: 1
 15499  000DB4  D023               	goto	l8775
 15500  000DB6                     l8763:
 15501                           
 15502                           ; BSR set to: 1
 15503                           ;doprnt.c: 1317: if(val < hexpowers[c])
 15504  000DB6  0101               	movlb	1	; () banked
 15505  000DB8  5165               	movf	printf@c& (0+255),w,b
 15506  000DBA  0D02               	mullw	2
 15507  000DBC  0E60               	movlw	low _hexpowers
 15508  000DBE  24F3               	addwf	prodl,w,c
 15509  000DC0  6EF6               	movwf	tblptrl,c
 15510  000DC2  0EFE               	movlw	high _hexpowers
 15511  000DC4  20F4               	addwfc	prodh,w,c
 15512  000DC6  6EF7               	movwf	tblptrh,c
 15513  000DC8                     	if	0	;There are less than 3 active tblptr bytes
 15514  000DC8                     	endif
 15515  000DC8  0009               	tblrd		*+
 15516  000DCA  50F5               	movf	tablat,w,c
 15517  000DCC  0101               	movlb	1	; () banked
 15518  000DCE  5D60               	subwf	printf@val& (0+255),w,b
 15519  000DD0  0009               	tblrd		*+
 15520  000DD2  50F5               	movf	tablat,w,c
 15521  000DD4  0101               	movlb	1	; () banked
 15522  000DD6  5961               	subwfb	(printf@val+1)& (0+255),w,b
 15523  000DD8  A0D8               	btfss	status,0,c
 15524  000DDA  D010               	goto	l8775
 15525  000DDC  D001               	goto	l8767
 15526                           
 15527                           ; BSR set to: 1
 15528                           ;doprnt.c: 1318: break;
 15529  000DDE  D00E               	goto	l8775
 15530  000DE0                     l8767:
 15531                           
 15532                           ; BSR set to: 1
 15533  000DE0  0101               	movlb	1	; () banked
 15534  000DE2  2B65               	incf	printf@c& (0+255),f,b
 15535  000DE4  D7E1               	goto	l8759
 15536                           
 15537                           ; BSR set to: 1
 15538                           ;doprnt.c: 1336: }
 15539                           
 15540                           ; BSR set to: 1
 15541                           ;doprnt.c: 1320: break;
 15542                           
 15543                           ; BSR set to: 1
 15544  000DE6  D00A               	goto	l8775
 15545  000DE8                     l8773:
 15546                           
 15547                           ; BSR set to: 1
 15548  000DE8  0101               	movlb	1	; () banked
 15549  000DEA  5162               	movf	printf@flag& (0+255),w,b
 15550  000DEC  0B80               	andlw	128
 15551                           
 15552                           ; Switch size 1, requested type "space"
 15553                           ; Number of cases is 2, Range of values is 0 to 128
 15554                           ; switch strategies available:
 15555                           ; Name         Instructions Cycles
 15556                           ; simple_byte            7     4 (average)
 15557                           ;	Chosen strategy is simple_byte
 15558  000DEE  0A00               	xorlw	0	; case 0
 15559  000DF0  B4D8               	btfsc	status,2,c
 15560  000DF2  D7B4               	goto	l8743
 15561  000DF4  0A80               	xorlw	128	; case 128
 15562  000DF6  B4D8               	btfsc	status,2,c
 15563  000DF8  D7D4               	goto	l8757
 15564  000DFA  D000               	goto	l8775
 15565  000DFC                     l8775:
 15566                           
 15567                           ; BSR set to: 1
 15568                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15569  000DFC  0101               	movlb	1	; () banked
 15570  000DFE  5163               	movf	printf@width& (0+255),w,b
 15571  000E00  0101               	movlb	1	; () banked
 15572  000E02  1164               	iorwf	(printf@width+1)& (0+255),w,b
 15573  000E04  B4D8               	btfsc	status,2,c
 15574  000E06  D00C               	goto	l8781
 15575                           
 15576                           ; BSR set to: 1
 15577  000E08  C162  F158         	movff	printf@flag,??_printf
 15578  000E0C  0E03               	movlw	3
 15579  000E0E  0101               	movlb	1	; () banked
 15580  000E10  1758               	andwf	??_printf& (0+255),f,b
 15581  000E12  B4D8               	btfsc	status,2,c
 15582  000E14  D005               	goto	l8781
 15583                           
 15584                           ; BSR set to: 1
 15585                           ;doprnt.c: 1346: width--;
 15586  000E16  0101               	movlb	1	; () banked
 15587  000E18  0763               	decf	printf@width& (0+255),f,b
 15588  000E1A  A0D8               	btfss	status,0,c
 15589  000E1C  0764               	decf	(printf@width+1)& (0+255),f,b
 15590  000E1E  D000               	goto	l8781
 15591  000E20                     l8781:
 15592                           
 15593                           ; BSR set to: 1
 15594                           ;doprnt.c: 1381: if(width > c)
 15595  000E20  0E80               	movlw	128
 15596  000E22  0101               	movlb	1	; () banked
 15597  000E24  BF65               	btfsc	printf@c& (0+255),7,b
 15598  000E26  0E7F               	movlw	127
 15599  000E28  0101               	movlb	1	; () banked
 15600  000E2A  6F58               	movwf	??_printf& (0+255),b
 15601  000E2C  0101               	movlb	1	; () banked
 15602  000E2E  5163               	movf	printf@width& (0+255),w,b
 15603  000E30  0101               	movlb	1	; () banked
 15604  000E32  5D65               	subwf	printf@c& (0+255),w,b
 15605  000E34  0101               	movlb	1	; () banked
 15606  000E36  5164               	movf	(printf@width+1)& (0+255),w,b
 15607  000E38  0A80               	xorlw	128
 15608  000E3A  0101               	movlb	1	; () banked
 15609  000E3C  5958               	subwfb	??_printf& (0+255),w,b
 15610  000E3E  B0D8               	btfsc	status,0,c
 15611  000E40  D00B               	goto	l8785
 15612                           
 15613                           ; BSR set to: 1
 15614                           ;doprnt.c: 1382: width -= c;
 15615  000E42  0101               	movlb	1	; () banked
 15616  000E44  5165               	movf	printf@c& (0+255),w,b
 15617  000E46  0101               	movlb	1	; () banked
 15618  000E48  5F63               	subwf	printf@width& (0+255),f,b
 15619  000E4A  0E00               	movlw	0
 15620  000E4C  0101               	movlb	1	; () banked
 15621  000E4E  BF65               	btfsc	printf@c& (0+255),7,b
 15622  000E50  0EFF               	movlw	255
 15623  000E52  0101               	movlb	1	; () banked
 15624  000E54  5B64               	subwfb	(printf@width+1)& (0+255),f,b
 15625  000E56  D006               	goto	l8787
 15626  000E58                     l8785:
 15627                           
 15628                           ; BSR set to: 1
 15629                           ;doprnt.c: 1383: else
 15630                           ;doprnt.c: 1384: width = 0;
 15631  000E58  0E00               	movlw	0
 15632  000E5A  0101               	movlb	1	; () banked
 15633  000E5C  6F64               	movwf	(printf@width+1)& (0+255),b
 15634  000E5E  0E00               	movlw	0
 15635  000E60  6F63               	movwf	printf@width& (0+255),b
 15636  000E62  D000               	goto	l8787
 15637  000E64                     l8787:
 15638                           
 15639                           ; BSR set to: 1
 15640                           ;doprnt.c: 1387: if(flag & 0x04) {
 15641  000E64  0101               	movlb	1	; () banked
 15642  000E66  A562               	btfss	printf@flag& (0+255),2,b
 15643  000E68  D020               	goto	l8799
 15644                           
 15645                           ; BSR set to: 1
 15646                           ;doprnt.c: 1392: if(flag & 0x03)
 15647  000E6A  C162  F158         	movff	printf@flag,??_printf
 15648  000E6E  0E03               	movlw	3
 15649  000E70  0101               	movlb	1	; () banked
 15650  000E72  1758               	andwf	??_printf& (0+255),f,b
 15651  000E74  B4D8               	btfsc	status,2,c
 15652  000E76  D004               	goto	l8793
 15653                           
 15654                           ; BSR set to: 1
 15655                           ;doprnt.c: 1393: (putch('-') );
 15656  000E78  0E2D               	movlw	45
 15657  000E7A  ECBD  F026         	call	_putch
 15658  000E7E  D000               	goto	l8793
 15659  000E80                     l8793:
 15660                           
 15661                           ;doprnt.c: 1415: if(width)
 15662  000E80  0101               	movlb	1	; () banked
 15663  000E82  5163               	movf	printf@width& (0+255),w,b
 15664  000E84  0101               	movlb	1	; () banked
 15665  000E86  1164               	iorwf	(printf@width+1)& (0+255),w,b
 15666  000E88  B4D8               	btfsc	status,2,c
 15667  000E8A  D02F               	goto	l8809
 15668  000E8C                     l8795:
 15669                           
 15670                           ; BSR set to: 1
 15671                           ;doprnt.c: 1417: (putch('0') );
 15672  000E8C  0E30               	movlw	48
 15673  000E8E  ECBD  F026         	call	_putch
 15674                           
 15675                           ;doprnt.c: 1418: while(--width);
 15676  000E92  0101               	movlb	1	; () banked
 15677  000E94  0763               	decf	printf@width& (0+255),f,b
 15678  000E96  A0D8               	btfss	status,0,c
 15679  000E98  0764               	decf	(printf@width+1)& (0+255),f,b
 15680  000E9A  0101               	movlb	1	; () banked
 15681  000E9C  5163               	movf	printf@width& (0+255),w,b
 15682  000E9E  0101               	movlb	1	; () banked
 15683  000EA0  1164               	iorwf	(printf@width+1)& (0+255),w,b
 15684  000EA2  B4D8               	btfsc	status,2,c
 15685  000EA4  D022               	goto	l8809
 15686  000EA6  D7F2               	goto	l8795
 15687                           
 15688                           ; BSR set to: 1
 15689                           ;doprnt.c: 1420: } else
 15690                           
 15691                           ; BSR set to: 1
 15692  000EA8  D020               	goto	l8809
 15693  000EAA                     l8799:
 15694                           
 15695                           ; BSR set to: 1
 15696                           ;doprnt.c: 1422: {
 15697                           ;doprnt.c: 1424: if(width
 15698                           ;doprnt.c: 1428: )
 15699  000EAA  0101               	movlb	1	; () banked
 15700  000EAC  5163               	movf	printf@width& (0+255),w,b
 15701  000EAE  0101               	movlb	1	; () banked
 15702  000EB0  1164               	iorwf	(printf@width+1)& (0+255),w,b
 15703  000EB2  B4D8               	btfsc	status,2,c
 15704  000EB4  D00F               	goto	l8805
 15705  000EB6                     l8801:
 15706                           
 15707                           ; BSR set to: 1
 15708                           ;doprnt.c: 1430: (putch(' ') );
 15709  000EB6  0E20               	movlw	32
 15710  000EB8  ECBD  F026         	call	_putch
 15711                           
 15712                           ;doprnt.c: 1431: while(--width);
 15713  000EBC  0101               	movlb	1	; () banked
 15714  000EBE  0763               	decf	printf@width& (0+255),f,b
 15715  000EC0  A0D8               	btfss	status,0,c
 15716  000EC2  0764               	decf	(printf@width+1)& (0+255),f,b
 15717  000EC4  0101               	movlb	1	; () banked
 15718  000EC6  5163               	movf	printf@width& (0+255),w,b
 15719  000EC8  0101               	movlb	1	; () banked
 15720  000ECA  1164               	iorwf	(printf@width+1)& (0+255),w,b
 15721  000ECC  B4D8               	btfsc	status,2,c
 15722  000ECE  D002               	goto	l8805
 15723  000ED0  D7F2               	goto	l8801
 15724                           
 15725                           ; BSR set to: 1
 15726  000ED2  D000               	goto	l8805
 15727  000ED4                     l8805:
 15728                           
 15729                           ; BSR set to: 1
 15730                           ;doprnt.c: 1438: if(flag & 0x03)
 15731  000ED4  C162  F158         	movff	printf@flag,??_printf
 15732  000ED8  0E03               	movlw	3
 15733  000EDA  0101               	movlb	1	; () banked
 15734  000EDC  1758               	andwf	??_printf& (0+255),f,b
 15735  000EDE  B4D8               	btfsc	status,2,c
 15736  000EE0  D004               	goto	l8809
 15737                           
 15738                           ; BSR set to: 1
 15739                           ;doprnt.c: 1439: (putch('-') );
 15740  000EE2  0E2D               	movlw	45
 15741  000EE4  ECBD  F026         	call	_putch
 15742  000EE8  D000               	goto	l8809
 15743  000EEA                     l8809:
 15744                           
 15745                           ;doprnt.c: 1469: }
 15746                           ;doprnt.c: 1472: prec = c;
 15747  000EEA  C165  F15F         	movff	printf@c,printf@prec
 15748                           
 15749                           ;doprnt.c: 1474: while(prec--) {
 15750  000EEE  D05D               	goto	l8823
 15751                           
 15752                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 15753  000EF0  D04D               	goto	l8819
 15754  000EF2                     l8811:
 15755                           
 15756                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15757  000EF2  0101               	movlb	1	; () banked
 15758  000EF4  515F               	movf	printf@prec& (0+255),w,b
 15759  000EF6  0D02               	mullw	2
 15760  000EF8  0E56               	movlw	low _dpowers
 15761  000EFA  24F3               	addwf	prodl,w,c
 15762  000EFC  6EF6               	movwf	tblptrl,c
 15763  000EFE  0EFE               	movlw	high _dpowers
 15764  000F00  20F4               	addwfc	prodh,w,c
 15765  000F02  6EF7               	movwf	tblptrh,c
 15766  000F04                     	if	0	;There are less than 3 active tblptr bytes
 15767  000F04                     	endif
 15768  000F04  0009               	tblrd		*+
 15769  000F06  CFF5 F0CF          	movff	tablat,___lwdiv@divisor
 15770  000F0A  000A               	tblrd		*-
 15771  000F0C  CFF5 F0D0          	movff	tablat,___lwdiv@divisor+1
 15772  000F10  C160  F0CD         	movff	printf@val,___lwdiv@dividend
 15773  000F14  C161  F0CE         	movff	printf@val+1,___lwdiv@dividend+1
 15774  000F18  EC21  F01F         	call	___lwdiv	;wreg free
 15775  000F1C  C0CD  F0D4         	movff	?___lwdiv,___lwmod@dividend
 15776  000F20  C0CE  F0D5         	movff	?___lwdiv+1,___lwmod@dividend+1
 15777  000F24  0E00               	movlw	0
 15778  000F26  0100               	movlb	0	; () banked
 15779  000F28  6FD7               	movwf	(___lwmod@divisor+1)& (0+255),b
 15780  000F2A  0E0A               	movlw	10
 15781  000F2C  6FD6               	movwf	___lwmod@divisor& (0+255),b
 15782  000F2E  ECEF  F020         	call	___lwmod	;wreg free
 15783  000F32  0100               	movlb	0	; () banked
 15784  000F34  51D4               	movf	?___lwmod& (0+255),w,b
 15785  000F36  0F30               	addlw	48
 15786  000F38  0101               	movlb	1	; () banked
 15787  000F3A  6F65               	movwf	printf@c& (0+255),b
 15788                           
 15789                           ;doprnt.c: 1491: break;
 15790  000F3C  D031               	goto	l8821
 15791  000F3E                     l8813:
 15792                           
 15793                           ; BSR set to: 1
 15794                           ;doprnt.c: 1499: {
 15795                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15796  000F3E  C160  F0CD         	movff	printf@val,___lwdiv@dividend
 15797  000F42  C161  F0CE         	movff	printf@val+1,___lwdiv@dividend+1
 15798  000F46  0101               	movlb	1	; () banked
 15799  000F48  515F               	movf	printf@prec& (0+255),w,b
 15800  000F4A  0D02               	mullw	2
 15801  000F4C  0E60               	movlw	low _hexpowers
 15802  000F4E  24F3               	addwf	prodl,w,c
 15803  000F50  6EF6               	movwf	tblptrl,c
 15804  000F52  0EFE               	movlw	high _hexpowers
 15805  000F54  20F4               	addwfc	prodh,w,c
 15806  000F56  6EF7               	movwf	tblptrh,c
 15807  000F58                     	if	0	;There are less than 3 active tblptr bytes
 15808  000F58                     	endif
 15809  000F58  0009               	tblrd		*+
 15810  000F5A  CFF5 F0CF          	movff	tablat,___lwdiv@divisor
 15811  000F5E  000A               	tblrd		*-
 15812  000F60  CFF5 F0D0          	movff	tablat,___lwdiv@divisor+1
 15813  000F64  EC21  F01F         	call	___lwdiv	;wreg free
 15814  000F68  0100               	movlb	0	; () banked
 15815  000F6A  51CD               	movf	?___lwdiv& (0+255),w,b
 15816  000F6C  0B0F               	andlw	15
 15817  000F6E  0101               	movlb	1	; () banked
 15818  000F70  6F5C               	movwf	printf@idx& (0+255),b
 15819                           
 15820                           ; BSR set to: 1
 15821                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15822  000F72  0101               	movlb	1	; () banked
 15823  000F74  515C               	movf	printf@idx& (0+255),w,b
 15824  000F76  0D01               	mullw	1
 15825  000F78  0E3D               	movlw	low STR_39
 15826  000F7A  24F3               	addwf	prodl,w,c
 15827  000F7C  6EF6               	movwf	tblptrl,c
 15828  000F7E  0EFF               	movlw	high STR_39
 15829  000F80  20F4               	addwfc	prodh,w,c
 15830  000F82  6EF7               	movwf	tblptrh,c
 15831  000F84                     	if	0	;There are less than 3 active tblptr bytes
 15832  000F84                     	endif
 15833  000F84  0008               	tblrd		*
 15834  000F86  CFF5 F165          	movff	tablat,printf@c
 15835                           
 15836                           ; BSR set to: 1
 15837                           ;doprnt.c: 1523: }
 15838                           
 15839                           ;doprnt.c: 1508: }
 15840                           ;doprnt.c: 1510: break;
 15841  000F8A  D00A               	goto	l8821
 15842  000F8C                     l8819:
 15843  000F8C  0101               	movlb	1	; () banked
 15844  000F8E  5162               	movf	printf@flag& (0+255),w,b
 15845  000F90  0B80               	andlw	128
 15846                           
 15847                           ; Switch size 1, requested type "space"
 15848                           ; Number of cases is 2, Range of values is 0 to 128
 15849                           ; switch strategies available:
 15850                           ; Name         Instructions Cycles
 15851                           ; simple_byte            7     4 (average)
 15852                           ;	Chosen strategy is simple_byte
 15853  000F92  0A00               	xorlw	0	; case 0
 15854  000F94  B4D8               	btfsc	status,2,c
 15855  000F96  D7AD               	goto	l8811
 15856  000F98  0A80               	xorlw	128	; case 128
 15857  000F9A  B4D8               	btfsc	status,2,c
 15858  000F9C  D7D0               	goto	l8813
 15859  000F9E  D000               	goto	l8821
 15860  000FA0                     l8821:
 15861                           
 15862                           ; BSR set to: 1
 15863                           ;doprnt.c: 1524: (putch(c) );
 15864  000FA0  0101               	movlb	1	; () banked
 15865  000FA2  5165               	movf	printf@c& (0+255),w,b
 15866  000FA4  ECBD  F026         	call	_putch
 15867  000FA8  D000               	goto	l8823
 15868  000FAA                     l8823:
 15869  000FAA  0101               	movlb	1	; () banked
 15870  000FAC  075F               	decf	printf@prec& (0+255),f,b
 15871  000FAE  0101               	movlb	1	; () banked
 15872  000FB0  295F               	incf	printf@prec& (0+255),w,b
 15873  000FB2  B4D8               	btfsc	status,2,c
 15874  000FB4  D002               	goto	l8825
 15875  000FB6  D7EA               	goto	l8819
 15876                           
 15877                           ; BSR set to: 1
 15878  000FB8  D000               	goto	l8825
 15879  000FBA                     l8825:
 15880  000FBA  C0D9  FFF6         	movff	printf@f,tblptrl
 15881  000FBE  C0DA  FFF7         	movff	printf@f+1,tblptrh
 15882  000FC2  0100               	movlb	0	; () banked
 15883  000FC4  4BD9               	infsnz	printf@f& (0+255),f,b
 15884  000FC6  2BDA               	incf	(printf@f+1)& (0+255),f,b
 15885  000FC8                     	if	0	;tblptru may be non-zero
 15886  000FC8                     	endif
 15887  000FC8                     	if	0	;tblptru may be non-zero
 15888  000FC8                     	endif
 15889  000FC8  0008               	tblrd		*
 15890  000FCA  CFF5 F165          	movff	tablat,printf@c
 15891  000FCE  0101               	movlb	1	; () banked
 15892  000FD0  5165               	movf	printf@c& (0+255),w,b
 15893  000FD2  B4D8               	btfsc	status,2,c
 15894  000FD4  D002               	goto	l1435
 15895  000FD6  D606               	goto	l8699
 15896                           
 15897                           ; BSR set to: 1
 15898  000FD8  D000               	goto	l1435
 15899  000FDA                     l1435:
 15900  000FDA  0012               	return		;funcret
 15901  000FDC                     __end_of_printf:
 15902                           	opt stack 0
 15903                           tblptru	equ	0xFF8
 15904                           tblptrh	equ	0xFF7
 15905                           tblptrl	equ	0xFF6
 15906                           tablat	equ	0xFF5
 15907                           prodh	equ	0xFF4
 15908                           prodl	equ	0xFF3
 15909                           intcon	equ	0xFF2
 15910                           intcon2	equ	0xFF1
 15911                           postinc0	equ	0xFEE
 15912                           wreg	equ	0xFE8
 15913                           postdec1	equ	0xFE5
 15914                           fsr1l	equ	0xFE1
 15915                           indf2	equ	0xFDF
 15916                           postinc2	equ	0xFDE
 15917                           postdec2	equ	0xFDD
 15918                           fsr2h	equ	0xFDA
 15919                           fsr2l	equ	0xFD9
 15920                           status	equ	0xFD8
 15921                           
 15922 ;; *************** function _putch *****************
 15923 ;; Defined at:
 15924 ;;		line 81 in file "Main.c"
 15925 ;; Parameters:    Size  Location     Type
 15926 ;;  c               1    wreg     unsigned char 
 15927 ;; Auto vars:     Size  Location     Type
 15928 ;;  c               1    0[BANK0 ] unsigned char 
 15929 ;; Return value:  Size  Location     Type
 15930 ;;		None               void
 15931 ;; Registers used:
 15932 ;;		wreg
 15933 ;; Tracked objects:
 15934 ;;		On entry : 0/0
 15935 ;;		On exit  : 0/0
 15936 ;;		Unchanged: 0/0
 15937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15942 ;;Total ram usage:        1 bytes
 15943 ;; Hardware stack levels used:    1
 15944 ;; Hardware stack levels required when called:    4
 15945 ;; This function calls:
 15946 ;;		Nothing
 15947 ;; This function is called by:
 15948 ;;		_printf
 15949 ;; This function uses a non-reentrant model
 15950 ;;
 15951                           
 15952                           	psect	text72
 15953  004D7A                     __ptext72:
 15954                           	opt stack 0
 15955  004D7A                     _putch:
 15956                           	opt stack 25
 15957                           
 15958                           ;incstack = 0
 15959                           ;putch@c stored from wreg
 15960  004D7A  0100               	movlb	0	; () banked
 15961  004D7C  6FCD               	movwf	putch@c& (0+255),b
 15962                           
 15963                           ; BSR set to: 0
 15964                           ;Main.c: 83: while (!TRMT);
 15965  004D7E  D000               	goto	l513
 15966  004D80                     l513:
 15967  004D80  A2AC               	btfss	4012,1,c	;volatile
 15968  004D82  D7FE               	goto	l513
 15969                           
 15970                           ;Main.c: 84: TXREG = c;
 15971  004D84  C0CD  FFAD         	movff	putch@c,4013	;volatile
 15972  004D88  0012               	return		;funcret
 15973  004D8A                     __end_of_putch:
 15974                           	opt stack 0
 15975                           tblptru	equ	0xFF8
 15976                           tblptrh	equ	0xFF7
 15977                           tblptrl	equ	0xFF6
 15978                           tablat	equ	0xFF5
 15979                           prodh	equ	0xFF4
 15980                           prodl	equ	0xFF3
 15981                           intcon	equ	0xFF2
 15982                           intcon2	equ	0xFF1
 15983                           postinc0	equ	0xFEE
 15984                           wreg	equ	0xFE8
 15985                           postdec1	equ	0xFE5
 15986                           fsr1l	equ	0xFE1
 15987                           indf2	equ	0xFDF
 15988                           postinc2	equ	0xFDE
 15989                           postdec2	equ	0xFDD
 15990                           fsr2h	equ	0xFDA
 15991                           fsr2l	equ	0xFD9
 15992                           status	equ	0xFD8
 15993                           
 15994 ;; *************** function _isdigit *****************
 15995 ;; Defined at:
 15996 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 15997 ;; Parameters:    Size  Location     Type
 15998 ;;  c               1    wreg     unsigned char 
 15999 ;; Auto vars:     Size  Location     Type
 16000 ;;  c               1    2[BANK0 ] unsigned char 
 16001 ;; Return value:  Size  Location     Type
 16002 ;;		None               void
 16003 ;; Registers used:
 16004 ;;		wreg, status,2, status,0
 16005 ;; Tracked objects:
 16006 ;;		On entry : 0/0
 16007 ;;		On exit  : 0/0
 16008 ;;		Unchanged: 0/0
 16009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16013 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16014 ;;Total ram usage:        3 bytes
 16015 ;; Hardware stack levels used:    1
 16016 ;; Hardware stack levels required when called:    4
 16017 ;; This function calls:
 16018 ;;		Nothing
 16019 ;; This function is called by:
 16020 ;;		_printf
 16021 ;; This function uses a non-reentrant model
 16022 ;;
 16023                           
 16024                           	psect	text73
 16025  004988                     __ptext73:
 16026                           	opt stack 0
 16027  004988                     _isdigit:
 16028                           	opt stack 25
 16029                           
 16030                           ;incstack = 0
 16031                           ;isdigit@c stored from wreg
 16032  004988  0100               	movlb	0	; () banked
 16033  00498A  6FCF               	movwf	isdigit@c& (0+255),b
 16034                           
 16035                           ; BSR set to: 0
 16036  00498C  0E00               	movlw	0
 16037  00498E  0100               	movlb	0	; () banked
 16038  004990  6FCE               	movwf	_isdigit$2867& (0+255),b
 16039                           
 16040                           ; BSR set to: 0
 16041  004992  0E3A               	movlw	58
 16042  004994  0100               	movlb	0	; () banked
 16043  004996  61CF               	cpfslt	isdigit@c& (0+255),b
 16044  004998  D008               	goto	l8481
 16045                           
 16046                           ; BSR set to: 0
 16047  00499A  0E2F               	movlw	47
 16048  00499C  0100               	movlb	0	; () banked
 16049  00499E  65CF               	cpfsgt	isdigit@c& (0+255),b
 16050  0049A0  D004               	goto	l8481
 16051                           
 16052                           ; BSR set to: 0
 16053  0049A2  0E01               	movlw	1
 16054  0049A4  0100               	movlb	0	; () banked
 16055  0049A6  6FCE               	movwf	_isdigit$2867& (0+255),b
 16056  0049A8  D000               	goto	l8481
 16057  0049AA                     l8481:
 16058                           
 16059                           ; BSR set to: 0
 16060  0049AA  C0CE  F0CD         	movff	_isdigit$2867,??_isdigit
 16061  0049AE  0100               	movlb	0	; () banked
 16062  0049B0  31CD               	rrcf	??_isdigit& (0+255),w,b
 16063  0049B2  D000               	goto	l1902
 16064  0049B4                     l1902:
 16065                           
 16066                           ; BSR set to: 0
 16067  0049B4  0012               	return		;funcret
 16068  0049B6                     __end_of_isdigit:
 16069                           	opt stack 0
 16070                           tblptru	equ	0xFF8
 16071                           tblptrh	equ	0xFF7
 16072                           tblptrl	equ	0xFF6
 16073                           tablat	equ	0xFF5
 16074                           prodh	equ	0xFF4
 16075                           prodl	equ	0xFF3
 16076                           intcon	equ	0xFF2
 16077                           intcon2	equ	0xFF1
 16078                           postinc0	equ	0xFEE
 16079                           wreg	equ	0xFE8
 16080                           postdec1	equ	0xFE5
 16081                           fsr1l	equ	0xFE1
 16082                           indf2	equ	0xFDF
 16083                           postinc2	equ	0xFDE
 16084                           postdec2	equ	0xFDD
 16085                           fsr2h	equ	0xFDA
 16086                           fsr2l	equ	0xFD9
 16087                           status	equ	0xFD8
 16088                           
 16089 ;; *************** function ___lwmod *****************
 16090 ;; Defined at:
 16091 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 16092 ;; Parameters:    Size  Location     Type
 16093 ;;  dividend        2    7[BANK0 ] unsigned int 
 16094 ;;  divisor         2    9[BANK0 ] unsigned int 
 16095 ;; Auto vars:     Size  Location     Type
 16096 ;;  counter         1   11[BANK0 ] unsigned char 
 16097 ;; Return value:  Size  Location     Type
 16098 ;;                  2    7[BANK0 ] unsigned int 
 16099 ;; Registers used:
 16100 ;;		wreg, status,2, status,0
 16101 ;; Tracked objects:
 16102 ;;		On entry : 0/0
 16103 ;;		On exit  : 0/0
 16104 ;;		Unchanged: 0/0
 16105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16106 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16109 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16110 ;;Total ram usage:        5 bytes
 16111 ;; Hardware stack levels used:    1
 16112 ;; Hardware stack levels required when called:    4
 16113 ;; This function calls:
 16114 ;;		Nothing
 16115 ;; This function is called by:
 16116 ;;		_printf
 16117 ;; This function uses a non-reentrant model
 16118 ;;
 16119                           
 16120                           	psect	text74
 16121  0041DE                     __ptext74:
 16122                           	opt stack 0
 16123  0041DE                     ___lwmod:
 16124                           	opt stack 25
 16125                           
 16126                           ; BSR set to: 0
 16127                           ;incstack = 0
 16128  0041DE  0100               	movlb	0	; () banked
 16129  0041E0  51D6               	movf	___lwmod@divisor& (0+255),w,b
 16130  0041E2  0100               	movlb	0	; () banked
 16131  0041E4  11D7               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 16132  0041E6  B4D8               	btfsc	status,2,c
 16133  0041E8  D02B               	goto	l2004
 16134                           
 16135                           ; BSR set to: 0
 16136  0041EA  0E01               	movlw	1
 16137  0041EC  0100               	movlb	0	; () banked
 16138  0041EE  6FD8               	movwf	___lwmod@counter& (0+255),b
 16139  0041F0  D007               	goto	l8629
 16140  0041F2                     l8627:
 16141                           
 16142                           ; BSR set to: 0
 16143  0041F2  0100               	movlb	0	; () banked
 16144  0041F4  90D8               	bcf	status,0,c
 16145  0041F6  37D6               	rlcf	___lwmod@divisor& (0+255),f,b
 16146  0041F8  37D7               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 16147  0041FA  0100               	movlb	0	; () banked
 16148  0041FC  2BD8               	incf	___lwmod@counter& (0+255),f,b
 16149  0041FE  D000               	goto	l8629
 16150  004200                     l8629:
 16151                           
 16152                           ; BSR set to: 0
 16153  004200  0100               	movlb	0	; () banked
 16154  004202  BFD7               	btfsc	(___lwmod@divisor+1)& (0+255),7,b
 16155  004204  D002               	goto	l8631
 16156  004206  D7F5               	goto	l8627
 16157                           
 16158                           ; BSR set to: 0
 16159  004208  D000               	goto	l8631
 16160  00420A                     l8631:
 16161                           
 16162                           ; BSR set to: 0
 16163  00420A  0100               	movlb	0	; () banked
 16164  00420C  51D6               	movf	___lwmod@divisor& (0+255),w,b
 16165  00420E  0100               	movlb	0	; () banked
 16166  004210  5DD4               	subwf	___lwmod@dividend& (0+255),w,b
 16167  004212  0100               	movlb	0	; () banked
 16168  004214  51D7               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16169  004216  0100               	movlb	0	; () banked
 16170  004218  59D5               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 16171  00421A  A0D8               	btfss	status,0,c
 16172  00421C  D009               	goto	l8635
 16173                           
 16174                           ; BSR set to: 0
 16175  00421E  0100               	movlb	0	; () banked
 16176  004220  51D6               	movf	___lwmod@divisor& (0+255),w,b
 16177  004222  0100               	movlb	0	; () banked
 16178  004224  5FD4               	subwf	___lwmod@dividend& (0+255),f,b
 16179  004226  0100               	movlb	0	; () banked
 16180  004228  51D7               	movf	(___lwmod@divisor+1)& (0+255),w,b
 16181  00422A  0100               	movlb	0	; () banked
 16182  00422C  5BD5               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 16183  00422E  D000               	goto	l8635
 16184  004230                     l8635:
 16185                           
 16186                           ; BSR set to: 0
 16187  004230  0100               	movlb	0	; () banked
 16188  004232  90D8               	bcf	status,0,c
 16189  004234  33D7               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 16190  004236  33D6               	rrcf	___lwmod@divisor& (0+255),f,b
 16191                           
 16192                           ; BSR set to: 0
 16193  004238  0100               	movlb	0	; () banked
 16194  00423A  2FD8               	decfsz	___lwmod@counter& (0+255),f,b
 16195  00423C  D7E6               	goto	l8631
 16196  00423E  D000               	goto	l2004
 16197  004240                     l2004:
 16198                           
 16199                           ; BSR set to: 0
 16200  004240  C0D4  F0D4         	movff	___lwmod@dividend,?___lwmod
 16201  004244  C0D5  F0D5         	movff	___lwmod@dividend+1,?___lwmod+1
 16202                           
 16203                           ; BSR set to: 0
 16204  004248  0012               	return		;funcret
 16205  00424A                     __end_of___lwmod:
 16206                           	opt stack 0
 16207                           tblptru	equ	0xFF8
 16208                           tblptrh	equ	0xFF7
 16209                           tblptrl	equ	0xFF6
 16210                           tablat	equ	0xFF5
 16211                           prodh	equ	0xFF4
 16212                           prodl	equ	0xFF3
 16213                           intcon	equ	0xFF2
 16214                           intcon2	equ	0xFF1
 16215                           postinc0	equ	0xFEE
 16216                           wreg	equ	0xFE8
 16217                           postdec1	equ	0xFE5
 16218                           fsr1l	equ	0xFE1
 16219                           indf2	equ	0xFDF
 16220                           postinc2	equ	0xFDE
 16221                           postdec2	equ	0xFDD
 16222                           fsr2h	equ	0xFDA
 16223                           fsr2l	equ	0xFD9
 16224                           status	equ	0xFD8
 16225                           
 16226 ;; *************** function ___lwdiv *****************
 16227 ;; Defined at:
 16228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 16229 ;; Parameters:    Size  Location     Type
 16230 ;;  dividend        2    0[BANK0 ] unsigned int 
 16231 ;;  divisor         2    2[BANK0 ] unsigned int 
 16232 ;; Auto vars:     Size  Location     Type
 16233 ;;  quotient        2    5[BANK0 ] unsigned int 
 16234 ;;  counter         1    4[BANK0 ] unsigned char 
 16235 ;; Return value:  Size  Location     Type
 16236 ;;                  2    0[BANK0 ] unsigned int 
 16237 ;; Registers used:
 16238 ;;		wreg, status,2, status,0
 16239 ;; Tracked objects:
 16240 ;;		On entry : 0/0
 16241 ;;		On exit  : 0/0
 16242 ;;		Unchanged: 0/0
 16243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16244 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16245 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16247 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16248 ;;Total ram usage:        7 bytes
 16249 ;; Hardware stack levels used:    1
 16250 ;; Hardware stack levels required when called:    4
 16251 ;; This function calls:
 16252 ;;		Nothing
 16253 ;; This function is called by:
 16254 ;;		_printf
 16255 ;; This function uses a non-reentrant model
 16256 ;;
 16257                           
 16258                           	psect	text75
 16259  003E42                     __ptext75:
 16260                           	opt stack 0
 16261  003E42                     ___lwdiv:
 16262                           	opt stack 25
 16263                           
 16264                           ; BSR set to: 0
 16265                           ;incstack = 0
 16266  003E42  0E00               	movlw	0
 16267  003E44  0100               	movlb	0	; () banked
 16268  003E46  6FD3               	movwf	(___lwdiv@quotient+1)& (0+255),b
 16269  003E48  0E00               	movlw	0
 16270  003E4A  6FD2               	movwf	___lwdiv@quotient& (0+255),b
 16271                           
 16272                           ; BSR set to: 0
 16273  003E4C  0100               	movlb	0	; () banked
 16274  003E4E  51CF               	movf	___lwdiv@divisor& (0+255),w,b
 16275  003E50  0100               	movlb	0	; () banked
 16276  003E52  11D0               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 16277  003E54  B4D8               	btfsc	status,2,c
 16278  003E56  D031               	goto	l1994
 16279                           
 16280                           ; BSR set to: 0
 16281  003E58  0E01               	movlw	1
 16282  003E5A  0100               	movlb	0	; () banked
 16283  003E5C  6FD1               	movwf	___lwdiv@counter& (0+255),b
 16284  003E5E  D007               	goto	l8609
 16285  003E60                     l8607:
 16286                           
 16287                           ; BSR set to: 0
 16288  003E60  0100               	movlb	0	; () banked
 16289  003E62  90D8               	bcf	status,0,c
 16290  003E64  37CF               	rlcf	___lwdiv@divisor& (0+255),f,b
 16291  003E66  37D0               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 16292  003E68  0100               	movlb	0	; () banked
 16293  003E6A  2BD1               	incf	___lwdiv@counter& (0+255),f,b
 16294  003E6C  D000               	goto	l8609
 16295  003E6E                     l8609:
 16296                           
 16297                           ; BSR set to: 0
 16298  003E6E  0100               	movlb	0	; () banked
 16299  003E70  BFD0               	btfsc	(___lwdiv@divisor+1)& (0+255),7,b
 16300  003E72  D002               	goto	l8611
 16301  003E74  D7F5               	goto	l8607
 16302                           
 16303                           ; BSR set to: 0
 16304  003E76  D000               	goto	l8611
 16305  003E78                     l8611:
 16306                           
 16307                           ; BSR set to: 0
 16308  003E78  0100               	movlb	0	; () banked
 16309  003E7A  90D8               	bcf	status,0,c
 16310  003E7C  37D2               	rlcf	___lwdiv@quotient& (0+255),f,b
 16311  003E7E  37D3               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 16312                           
 16313                           ; BSR set to: 0
 16314  003E80  0100               	movlb	0	; () banked
 16315  003E82  51CF               	movf	___lwdiv@divisor& (0+255),w,b
 16316  003E84  0100               	movlb	0	; () banked
 16317  003E86  5DCD               	subwf	___lwdiv@dividend& (0+255),w,b
 16318  003E88  0100               	movlb	0	; () banked
 16319  003E8A  51D0               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16320  003E8C  0100               	movlb	0	; () banked
 16321  003E8E  59CE               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 16322  003E90  A0D8               	btfss	status,0,c
 16323  003E92  D00B               	goto	l8619
 16324                           
 16325                           ; BSR set to: 0
 16326  003E94  0100               	movlb	0	; () banked
 16327  003E96  51CF               	movf	___lwdiv@divisor& (0+255),w,b
 16328  003E98  0100               	movlb	0	; () banked
 16329  003E9A  5FCD               	subwf	___lwdiv@dividend& (0+255),f,b
 16330  003E9C  0100               	movlb	0	; () banked
 16331  003E9E  51D0               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 16332  003EA0  0100               	movlb	0	; () banked
 16333  003EA2  5BCE               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 16334                           
 16335                           ; BSR set to: 0
 16336  003EA4  0100               	movlb	0	; () banked
 16337  003EA6  81D2               	bsf	___lwdiv@quotient& (0+255),0,b
 16338  003EA8  D000               	goto	l8619
 16339  003EAA                     l8619:
 16340                           
 16341                           ; BSR set to: 0
 16342  003EAA  0100               	movlb	0	; () banked
 16343  003EAC  90D8               	bcf	status,0,c
 16344  003EAE  33D0               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 16345  003EB0  33CF               	rrcf	___lwdiv@divisor& (0+255),f,b
 16346                           
 16347                           ; BSR set to: 0
 16348  003EB2  0100               	movlb	0	; () banked
 16349  003EB4  2FD1               	decfsz	___lwdiv@counter& (0+255),f,b
 16350  003EB6  D7E0               	goto	l8611
 16351  003EB8  D000               	goto	l1994
 16352  003EBA                     l1994:
 16353                           
 16354                           ; BSR set to: 0
 16355  003EBA  C0D2  F0CD         	movff	___lwdiv@quotient,?___lwdiv
 16356  003EBE  C0D3  F0CE         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16357                           
 16358                           ; BSR set to: 0
 16359  003EC2  0012               	return		;funcret
 16360  003EC4                     __end_of___lwdiv:
 16361                           	opt stack 0
 16362                           tblptru	equ	0xFF8
 16363                           tblptrh	equ	0xFF7
 16364                           tblptrl	equ	0xFF6
 16365                           tablat	equ	0xFF5
 16366                           prodh	equ	0xFF4
 16367                           prodl	equ	0xFF3
 16368                           intcon	equ	0xFF2
 16369                           intcon2	equ	0xFF1
 16370                           postinc0	equ	0xFEE
 16371                           wreg	equ	0xFE8
 16372                           postdec1	equ	0xFE5
 16373                           fsr1l	equ	0xFE1
 16374                           indf2	equ	0xFDF
 16375                           postinc2	equ	0xFDE
 16376                           postdec2	equ	0xFDD
 16377                           fsr2h	equ	0xFDA
 16378                           fsr2l	equ	0xFD9
 16379                           status	equ	0xFD8
 16380                           
 16381 ;; *************** function _drawtext *****************
 16382 ;; Defined at:
 16383 ;;		line 474 in file "ST7735.c"
 16384 ;; Parameters:    Size  Location     Type
 16385 ;;  x               1    wreg     unsigned char 
 16386 ;;  y               1   11[BANK1 ] unsigned char 
 16387 ;;  _text           2   12[BANK1 ] PTR unsigned char 
 16388 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 16389 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 16390 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 16391 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 16392 ;;		 -> tempC(4), 
 16393 ;;  color           2   14[BANK1 ] unsigned int 
 16394 ;;  bg              2   16[BANK1 ] unsigned int 
 16395 ;;  size            1   18[BANK1 ] unsigned char 
 16396 ;; Auto vars:     Size  Location     Type
 16397 ;;  x               1   21[BANK1 ] unsigned char 
 16398 ;;  i               2   24[BANK1 ] unsigned int 
 16399 ;;  textsize        2   22[BANK1 ] unsigned int 
 16400 ;;  cursor_x        1   27[BANK1 ] unsigned char 
 16401 ;;  cursor_y        1   26[BANK1 ] unsigned char 
 16402 ;; Return value:  Size  Location     Type
 16403 ;;		None               void
 16404 ;; Registers used:
 16405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16406 ;; Tracked objects:
 16407 ;;		On entry : 0/0
 16408 ;;		On exit  : 0/0
 16409 ;;		Unchanged: 0/0
 16410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16411 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16412 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16413 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16414 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;Total ram usage:       17 bytes
 16416 ;; Hardware stack levels used:    1
 16417 ;; Hardware stack levels required when called:   10
 16418 ;; This function calls:
 16419 ;;		_drawChar
 16420 ;;		_strlen
 16421 ;; This function is called by:
 16422 ;;		_Initialize_Screen
 16423 ;;		_Update_Screen
 16424 ;;		_Initialize_Setup_Alarm_Time_Screen
 16425 ;;		_Update_Setup_Alarm_Time_Screen
 16426 ;;		_Initialize_Setup_Heater_Screen
 16427 ;;		_Update_Setup_Heater_Screen
 16428 ;;		_Initialize_Setup_Time_Screen
 16429 ;;		_Update_Setup_Time_Screen
 16430 ;; This function uses a non-reentrant model
 16431 ;;
 16432                           
 16433                           	psect	text76
 16434  002A30                     __ptext76:
 16435                           	opt stack 0
 16436  002A30                     _drawtext:
 16437                           	opt stack 19
 16438                           
 16439                           ; BSR set to: 0
 16440                           ;incstack = 0
 16441                           ;drawtext@x stored from wreg
 16442  002A30  0101               	movlb	1	; () banked
 16443  002A32  6F6D               	movwf	drawtext@x& (0+255),b
 16444                           
 16445                           ; BSR set to: 1
 16446                           ;ST7735.c: 476: unsigned char cursor_x, cursor_y;
 16447                           ;ST7735.c: 477: unsigned int textsize, i;
 16448                           ;ST7735.c: 478: cursor_x = x, cursor_y = y;
 16449  002A34  C16D  F173         	movff	drawtext@x,drawtext@cursor_x
 16450                           
 16451                           ; BSR set to: 1
 16452  002A38  C163  F172         	movff	drawtext@y,drawtext@cursor_y
 16453                           
 16454                           ; BSR set to: 1
 16455                           ;ST7735.c: 479: textsize = strlen(_text);
 16456  002A3C  C164  F0CD         	movff	drawtext@_text,strlen@s
 16457  002A40  C165  F0CE         	movff	drawtext@_text+1,strlen@s+1
 16458  002A44  ECC2  F022         	call	_strlen	;wreg free
 16459  002A48  C0CD  F16E         	movff	?_strlen,drawtext@textsize
 16460  002A4C  C0CE  F16F         	movff	?_strlen+1,drawtext@textsize+1
 16461                           
 16462                           ;ST7735.c: 480: for(i = 0; i < textsize; i++){
 16463  002A50  0E00               	movlw	0
 16464  002A52  0101               	movlb	1	; () banked
 16465  002A54  6F71               	movwf	(drawtext@i+1)& (0+255),b
 16466  002A56  0E00               	movlw	0
 16467  002A58  6F70               	movwf	drawtext@i& (0+255),b
 16468  002A5A  D074               	goto	l8891
 16469  002A5C                     l8865:
 16470                           
 16471                           ; BSR set to: 1
 16472                           ;ST7735.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 16473  002A5C  0100               	movlb	0	; () banked
 16474  002A5E  518E               	movf	_wrap& (0+255),w,b
 16475  002A60  0100               	movlb	0	; () banked
 16476  002A62  B4D8               	btfsc	status,2,c
 16477  002A64  D03E               	goto	l8881
 16478                           
 16479                           ; BSR set to: 0
 16480  002A66  0101               	movlb	1	; () banked
 16481  002A68  516A               	movf	drawtext@size& (0+255),w,b
 16482  002A6A  0D05               	mullw	5
 16483  002A6C  0101               	movlb	1	; () banked
 16484  002A6E  5173               	movf	drawtext@cursor_x& (0+255),w,b
 16485  002A70  0101               	movlb	1	; () banked
 16486  002A72  6F6B               	movwf	??_drawtext& (0+255),b
 16487  002A74  6B6C               	clrf	(??_drawtext+1)& (0+255),b
 16488  002A76  50F3               	movf	prodl,w,c
 16489  002A78  0101               	movlb	1	; () banked
 16490  002A7A  276B               	addwf	??_drawtext& (0+255),f,b
 16491  002A7C  50F4               	movf	prodh,w,c
 16492  002A7E  0101               	movlb	1	; () banked
 16493  002A80  236C               	addwfc	(??_drawtext+1)& (0+255),f,b
 16494  002A82  0101               	movlb	1	; () banked
 16495  002A84  BF6C               	btfsc	(??_drawtext+1)& (0+255),7,b
 16496  002A86  D02D               	goto	l8881
 16497  002A88  0101               	movlb	1	; () banked
 16498  002A8A  516C               	movf	(??_drawtext+1)& (0+255),w,b
 16499  002A8C  E105               	bnz	u6770
 16500  002A8E  0E81               	movlw	129
 16501  002A90  0101               	movlb	1	; () banked
 16502  002A92  5D6B               	subwf	??_drawtext& (0+255),w,b
 16503  002A94  A0D8               	btfss	status,0,c
 16504  002A96  D025               	goto	l8881
 16505  002A98                     u6770:
 16506                           
 16507                           ; BSR set to: 1
 16508                           ;ST7735.c: 482: cursor_x = 0;
 16509  002A98  0E00               	movlw	0
 16510  002A9A  0101               	movlb	1	; () banked
 16511  002A9C  6F73               	movwf	drawtext@cursor_x& (0+255),b
 16512                           
 16513                           ; BSR set to: 1
 16514                           ;ST7735.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 16515  002A9E  0101               	movlb	1	; () banked
 16516  002AA0  516A               	movf	drawtext@size& (0+255),w,b
 16517  002AA2  0D07               	mullw	7
 16518  002AA4  50F3               	movf	prodl,w,c
 16519  002AA6  0101               	movlb	1	; () banked
 16520  002AA8  2572               	addwf	drawtext@cursor_y& (0+255),w,b
 16521  002AAA  0F03               	addlw	3
 16522  002AAC  0101               	movlb	1	; () banked
 16523  002AAE  6F72               	movwf	drawtext@cursor_y& (0+255),b
 16524                           
 16525                           ; BSR set to: 1
 16526                           ;ST7735.c: 484: if(cursor_y > 160) cursor_y = 160;
 16527  002AB0  0EA0               	movlw	160
 16528  002AB2  0101               	movlb	1	; () banked
 16529  002AB4  6572               	cpfsgt	drawtext@cursor_y& (0+255),b
 16530  002AB6  D004               	goto	l8877
 16531                           
 16532                           ; BSR set to: 1
 16533  002AB8  0EA0               	movlw	160
 16534  002ABA  0101               	movlb	1	; () banked
 16535  002ABC  6F72               	movwf	drawtext@cursor_y& (0+255),b
 16536  002ABE  D000               	goto	l8877
 16537  002AC0                     l8877:
 16538                           
 16539                           ; BSR set to: 1
 16540                           ;ST7735.c: 485: if(_text[i] == 0x20) goto _skip; }
 16541  002AC0  0101               	movlb	1	; () banked
 16542  002AC2  5170               	movf	drawtext@i& (0+255),w,b
 16543  002AC4  0101               	movlb	1	; () banked
 16544  002AC6  2564               	addwf	drawtext@_text& (0+255),w,b
 16545  002AC8  6ED9               	movwf	fsr2l,c
 16546  002ACA  0101               	movlb	1	; () banked
 16547  002ACC  5171               	movf	(drawtext@i+1)& (0+255),w,b
 16548  002ACE  0101               	movlb	1	; () banked
 16549  002AD0  2165               	addwfc	(drawtext@_text+1)& (0+255),w,b
 16550  002AD2  6EDA               	movwf	fsr2h,c
 16551  002AD4  0E20               	movlw	32
 16552  002AD6  18DE               	xorwf	postinc2,w,c
 16553  002AD8  B4D8               	btfsc	status,2,c
 16554  002ADA  D030               	goto	l8889
 16555  002ADC  D002               	goto	l8881
 16556                           
 16557                           ; BSR set to: 1
 16558  002ADE  D02E               	goto	l8889
 16559                           
 16560                           ; BSR set to: 1
 16561  002AE0  D000               	goto	l8881
 16562  002AE2                     l8881:
 16563                           
 16564                           ;ST7735.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 16565  002AE2  C172  F158         	movff	drawtext@cursor_y,drawChar@y
 16566  002AE6  0101               	movlb	1	; () banked
 16567  002AE8  5170               	movf	drawtext@i& (0+255),w,b
 16568  002AEA  0101               	movlb	1	; () banked
 16569  002AEC  2564               	addwf	drawtext@_text& (0+255),w,b
 16570  002AEE  6ED9               	movwf	fsr2l,c
 16571  002AF0  0101               	movlb	1	; () banked
 16572  002AF2  5171               	movf	(drawtext@i+1)& (0+255),w,b
 16573  002AF4  0101               	movlb	1	; () banked
 16574  002AF6  2165               	addwfc	(drawtext@_text+1)& (0+255),w,b
 16575  002AF8  6EDA               	movwf	fsr2h,c
 16576  002AFA  50DF               	movf	indf2,w,c
 16577  002AFC  0101               	movlb	1	; () banked
 16578  002AFE  6F59               	movwf	drawChar@c& (0+255),b
 16579  002B00  C166  F15A         	movff	drawtext@color,drawChar@color
 16580  002B04  C167  F15B         	movff	drawtext@color+1,drawChar@color+1
 16581  002B08  C168  F15C         	movff	drawtext@bg,drawChar@bg
 16582  002B0C  C169  F15D         	movff	drawtext@bg+1,drawChar@bg+1
 16583  002B10  C16A  F15E         	movff	drawtext@size,drawChar@size
 16584  002B14  0101               	movlb	1	; () banked
 16585  002B16  5173               	movf	drawtext@cursor_x& (0+255),w,b
 16586  002B18  EC0C  F00F         	call	_drawChar
 16587                           
 16588                           ;ST7735.c: 487: cursor_x = cursor_x + size * 6;
 16589  002B1C  0101               	movlb	1	; () banked
 16590  002B1E  516A               	movf	drawtext@size& (0+255),w,b
 16591  002B20  0D06               	mullw	6
 16592  002B22  50F3               	movf	prodl,w,c
 16593  002B24  0101               	movlb	1	; () banked
 16594  002B26  2573               	addwf	drawtext@cursor_x& (0+255),w,b
 16595  002B28  0101               	movlb	1	; () banked
 16596  002B2A  6F73               	movwf	drawtext@cursor_x& (0+255),b
 16597                           
 16598                           ; BSR set to: 1
 16599                           ;ST7735.c: 488: if(cursor_x > 128) cursor_x = 128;
 16600  002B2C  0E80               	movlw	128
 16601  002B2E  0101               	movlb	1	; () banked
 16602  002B30  6573               	cpfsgt	drawtext@cursor_x& (0+255),b
 16603  002B32  D004               	goto	l8889
 16604                           
 16605                           ; BSR set to: 1
 16606  002B34  0E80               	movlw	128
 16607  002B36  0101               	movlb	1	; () banked
 16608  002B38  6F73               	movwf	drawtext@cursor_x& (0+255),b
 16609                           
 16610                           ; BSR set to: 1
 16611  002B3A  D000               	goto	l8889
 16612  002B3C                     l8889:
 16613                           
 16614                           ; BSR set to: 1
 16615  002B3C  0101               	movlb	1	; () banked
 16616  002B3E  4B70               	infsnz	drawtext@i& (0+255),f,b
 16617  002B40  2B71               	incf	(drawtext@i+1)& (0+255),f,b
 16618  002B42  D000               	goto	l8891
 16619  002B44                     l8891:
 16620                           
 16621                           ; BSR set to: 1
 16622  002B44  0101               	movlb	1	; () banked
 16623  002B46  516E               	movf	drawtext@textsize& (0+255),w,b
 16624  002B48  0101               	movlb	1	; () banked
 16625  002B4A  5D70               	subwf	drawtext@i& (0+255),w,b
 16626  002B4C  0101               	movlb	1	; () banked
 16627  002B4E  516F               	movf	(drawtext@textsize+1)& (0+255),w,b
 16628  002B50  0101               	movlb	1	; () banked
 16629  002B52  5971               	subwfb	(drawtext@i+1)& (0+255),w,b
 16630  002B54  A0D8               	btfss	status,0,c
 16631  002B56  D782               	goto	l8865
 16632                           
 16633                           ; BSR set to: 1
 16634                           
 16635                           ; BSR set to: 1
 16636  002B58  0012               	return		;funcret
 16637  002B5A                     __end_of_drawtext:
 16638                           	opt stack 0
 16639                           tblptru	equ	0xFF8
 16640                           tblptrh	equ	0xFF7
 16641                           tblptrl	equ	0xFF6
 16642                           tablat	equ	0xFF5
 16643                           prodh	equ	0xFF4
 16644                           prodl	equ	0xFF3
 16645                           intcon	equ	0xFF2
 16646                           intcon2	equ	0xFF1
 16647                           postinc0	equ	0xFEE
 16648                           wreg	equ	0xFE8
 16649                           postdec1	equ	0xFE5
 16650                           fsr1l	equ	0xFE1
 16651                           indf2	equ	0xFDF
 16652                           postinc2	equ	0xFDE
 16653                           postdec2	equ	0xFDD
 16654                           fsr2h	equ	0xFDA
 16655                           fsr2l	equ	0xFD9
 16656                           status	equ	0xFD8
 16657                           
 16658 ;; *************** function _strlen *****************
 16659 ;; Defined at:
 16660 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 16661 ;; Parameters:    Size  Location     Type
 16662 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 16663 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 16664 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 16665 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 16666 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 16667 ;;		 -> tempC(4), 
 16668 ;; Auto vars:     Size  Location     Type
 16669 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 16670 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 16671 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 16672 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 16673 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 16674 ;;		 -> tempC(4), 
 16675 ;; Return value:  Size  Location     Type
 16676 ;;                  2    0[BANK0 ] unsigned int 
 16677 ;; Registers used:
 16678 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16679 ;; Tracked objects:
 16680 ;;		On entry : 0/0
 16681 ;;		On exit  : 0/0
 16682 ;;		Unchanged: 0/0
 16683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16684 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16685 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16686 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16687 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16688 ;;Total ram usage:        6 bytes
 16689 ;; Hardware stack levels used:    1
 16690 ;; Hardware stack levels required when called:    4
 16691 ;; This function calls:
 16692 ;;		Nothing
 16693 ;; This function is called by:
 16694 ;;		_drawtext
 16695 ;; This function uses a non-reentrant model
 16696 ;;
 16697                           
 16698                           	psect	text77
 16699  004584                     __ptext77:
 16700                           	opt stack 0
 16701  004584                     _strlen:
 16702                           	opt stack 24
 16703                           
 16704                           ; BSR set to: 1
 16705                           ;incstack = 0
 16706  004584  C0CD  F0D1         	movff	strlen@s,strlen@cp
 16707  004588  C0CE  F0D2         	movff	strlen@s+1,strlen@cp+1
 16708  00458C  D004               	goto	l8427
 16709  00458E                     l8425:
 16710  00458E  0100               	movlb	0	; () banked
 16711  004590  4BD1               	infsnz	strlen@cp& (0+255),f,b
 16712  004592  2BD2               	incf	(strlen@cp+1)& (0+255),f,b
 16713  004594  D000               	goto	l8427
 16714  004596                     l8427:
 16715  004596  C0D1  FFD9         	movff	strlen@cp,fsr2l
 16716  00459A  C0D2  FFDA         	movff	strlen@cp+1,fsr2h
 16717  00459E  50DF               	movf	indf2,w,c
 16718  0045A0  A4D8               	btfss	status,2,c
 16719  0045A2  D7F5               	goto	l8425
 16720  0045A4  C0CD  F0CF         	movff	strlen@s,??_strlen
 16721  0045A8  C0CE  F0D0         	movff	strlen@s+1,??_strlen+1
 16722  0045AC  0100               	movlb	0	; () banked
 16723  0045AE  1FCF               	comf	??_strlen& (0+255),f,b
 16724  0045B0  1FD0               	comf	(??_strlen+1)& (0+255),f,b
 16725  0045B2  4BCF               	infsnz	??_strlen& (0+255),f,b
 16726  0045B4  2BD0               	incf	(??_strlen+1)& (0+255),f,b
 16727  0045B6  0100               	movlb	0	; () banked
 16728  0045B8  51D1               	movf	strlen@cp& (0+255),w,b
 16729  0045BA  0100               	movlb	0	; () banked
 16730  0045BC  25CF               	addwf	??_strlen& (0+255),w,b
 16731  0045BE  0100               	movlb	0	; () banked
 16732  0045C0  6FCD               	movwf	?_strlen& (0+255),b
 16733  0045C2  0100               	movlb	0	; () banked
 16734  0045C4  51D2               	movf	(strlen@cp+1)& (0+255),w,b
 16735  0045C6  0100               	movlb	0	; () banked
 16736  0045C8  21D0               	addwfc	(??_strlen+1)& (0+255),w,b
 16737  0045CA  0100               	movlb	0	; () banked
 16738  0045CC  6FCE               	movwf	(?_strlen+1)& (0+255),b
 16739  0045CE  D000               	goto	l2033
 16740  0045D0                     l2033:
 16741                           
 16742                           ; BSR set to: 0
 16743  0045D0  0012               	return		;funcret
 16744  0045D2                     __end_of_strlen:
 16745                           	opt stack 0
 16746                           tblptru	equ	0xFF8
 16747                           tblptrh	equ	0xFF7
 16748                           tblptrl	equ	0xFF6
 16749                           tablat	equ	0xFF5
 16750                           prodh	equ	0xFF4
 16751                           prodl	equ	0xFF3
 16752                           intcon	equ	0xFF2
 16753                           intcon2	equ	0xFF1
 16754                           postinc0	equ	0xFEE
 16755                           wreg	equ	0xFE8
 16756                           postdec1	equ	0xFE5
 16757                           fsr1l	equ	0xFE1
 16758                           indf2	equ	0xFDF
 16759                           postinc2	equ	0xFDE
 16760                           postdec2	equ	0xFDD
 16761                           fsr2h	equ	0xFDA
 16762                           fsr2l	equ	0xFD9
 16763                           status	equ	0xFD8
 16764                           
 16765 ;; *************** function _drawChar *****************
 16766 ;; Defined at:
 16767 ;;		line 447 in file "ST7735.c"
 16768 ;; Parameters:    Size  Location     Type
 16769 ;;  x               1    wreg     unsigned char 
 16770 ;;  y               1    0[BANK1 ] unsigned char 
 16771 ;;  c               1    1[BANK1 ] unsigned char 
 16772 ;;  color           2    2[BANK1 ] unsigned int 
 16773 ;;  bg              2    4[BANK1 ] unsigned int 
 16774 ;;  size            1    6[BANK1 ] unsigned char 
 16775 ;; Auto vars:     Size  Location     Type
 16776 ;;  x               1    8[BANK1 ] unsigned char 
 16777 ;;  line            1    7[BANK1 ] unsigned char 
 16778 ;;  i               1   10[BANK1 ] unsigned char 
 16779 ;;  j               1    9[BANK1 ] unsigned char 
 16780 ;; Return value:  Size  Location     Type
 16781 ;;		None               void
 16782 ;; Registers used:
 16783 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16784 ;; Tracked objects:
 16785 ;;		On entry : 0/0
 16786 ;;		On exit  : 0/0
 16787 ;;		Unchanged: 0/0
 16788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16789 ;;      Params:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16790 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16792 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16793 ;;Total ram usage:       11 bytes
 16794 ;; Hardware stack levels used:    1
 16795 ;; Hardware stack levels required when called:    9
 16796 ;; This function calls:
 16797 ;;		___wmul
 16798 ;;		_drawPixel
 16799 ;;		_fillRect
 16800 ;; This function is called by:
 16801 ;;		_drawtext
 16802 ;; This function uses a non-reentrant model
 16803 ;;
 16804                           
 16805                           	psect	text78
 16806  001E18                     __ptext78:
 16807                           	opt stack 0
 16808  001E18                     _drawChar:
 16809                           	opt stack 19
 16810                           
 16811                           ; BSR set to: 0
 16812                           ;incstack = 0
 16813                           ;drawChar@x stored from wreg
 16814  001E18  0101               	movlb	1	; () banked
 16815  001E1A  6F60               	movwf	drawChar@x& (0+255),b
 16816                           
 16817                           ; BSR set to: 1
 16818                           ;ST7735.c: 449: char i, j;
 16819                           ;ST7735.c: 450: if((x >= 128) || (y >= 160))
 16820  001E1C  0E80               	movlw	128
 16821  001E1E  0101               	movlb	1	; () banked
 16822  001E20  6160               	cpfslt	drawChar@x& (0+255),b
 16823  001E22  D0E5               	goto	l1268
 16824                           
 16825                           ; BSR set to: 1
 16826  001E24  0E9F               	movlw	159
 16827  001E26  0101               	movlb	1	; () banked
 16828  001E28  6558               	cpfsgt	drawChar@y& (0+255),b
 16829  001E2A  D001               	goto	l8373
 16830                           
 16831                           ; BSR set to: 1
 16832                           ;ST7735.c: 451: return;
 16833  001E2C  D0E0               	goto	l1268
 16834  001E2E                     l8373:
 16835                           
 16836                           ; BSR set to: 1
 16837                           ;ST7735.c: 452: if(size < 1) size = 1;
 16838  001E2E  0101               	movlb	1	; () banked
 16839  001E30  515E               	movf	drawChar@size& (0+255),w,b
 16840  001E32  0101               	movlb	1	; () banked
 16841  001E34  A4D8               	btfss	status,2,c
 16842  001E36  D004               	goto	l8377
 16843                           
 16844                           ; BSR set to: 1
 16845  001E38  0E01               	movlw	1
 16846  001E3A  0101               	movlb	1	; () banked
 16847  001E3C  6F5E               	movwf	drawChar@size& (0+255),b
 16848  001E3E  D000               	goto	l8377
 16849  001E40                     l8377:
 16850                           
 16851                           ; BSR set to: 1
 16852                           ;ST7735.c: 453: if((c < ' ') || (c > '~'))
 16853  001E40  0E1F               	movlw	31
 16854  001E42  0101               	movlb	1	; () banked
 16855  001E44  6559               	cpfsgt	drawChar@c& (0+255),b
 16856  001E46  D005               	goto	l8381
 16857                           
 16858                           ; BSR set to: 1
 16859  001E48  0E7E               	movlw	126
 16860  001E4A  0101               	movlb	1	; () banked
 16861  001E4C  6559               	cpfsgt	drawChar@c& (0+255),b
 16862  001E4E  D004               	goto	l1270
 16863  001E50  D000               	goto	l8381
 16864  001E52                     l8381:
 16865                           
 16866                           ; BSR set to: 1
 16867                           ;ST7735.c: 454: c = '?';
 16868  001E52  0E3F               	movlw	63
 16869  001E54  0101               	movlb	1	; () banked
 16870  001E56  6F59               	movwf	drawChar@c& (0+255),b
 16871  001E58                     l1270:
 16872                           
 16873                           ; BSR set to: 1
 16874                           ;ST7735.c: 455: for(i=0; i<5; i++ ) {
 16875  001E58  0E00               	movlw	0
 16876  001E5A  0101               	movlb	1	; () banked
 16877  001E5C  6F62               	movwf	drawChar@i& (0+255),b
 16878  001E5E                     l8383:
 16879                           
 16880                           ; BSR set to: 1
 16881  001E5E  0E04               	movlw	4
 16882  001E60  0101               	movlb	1	; () banked
 16883  001E62  6562               	cpfsgt	drawChar@i& (0+255),b
 16884  001E64  D001               	goto	l8387
 16885                           
 16886                           ; BSR set to: 1
 16887  001E66  D0C3               	goto	l1268
 16888  001E68                     l8387:
 16889                           
 16890                           ; BSR set to: 1
 16891                           ;ST7735.c: 456: unsigned char line;
 16892                           ;ST7735.c: 457: if(c < 'S')
 16893  001E68  0E53               	movlw	83
 16894  001E6A  0101               	movlb	1	; () banked
 16895  001E6C  6159               	cpfslt	drawChar@c& (0+255),b
 16896  001E6E  D01D               	goto	l8391
 16897                           
 16898                           ; BSR set to: 1
 16899                           ;ST7735.c: 458: line = font[(c - 32)*5 + i];
 16900  001E70  0EE0               	movlw	224
 16901  001E72  0101               	movlb	1	; () banked
 16902  001E74  2559               	addwf	drawChar@c& (0+255),w,b
 16903  001E76  0100               	movlb	0	; () banked
 16904  001E78  6FCD               	movwf	___wmul@multiplier& (0+255),b
 16905  001E7A  0100               	movlb	0	; () banked
 16906  001E7C  6BCE               	clrf	(___wmul@multiplier+1)& (0+255),b
 16907  001E7E  0EFF               	movlw	255
 16908  001E80  23CE               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 16909  001E82  0E00               	movlw	0
 16910  001E84  0100               	movlb	0	; () banked
 16911  001E86  6FD0               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16912  001E88  0E05               	movlw	5
 16913  001E8A  6FCF               	movwf	___wmul@multiplicand& (0+255),b
 16914  001E8C  EC45  F024         	call	___wmul	;wreg free
 16915  001E90  0101               	movlb	1	; () banked
 16916  001E92  5162               	movf	drawChar@i& (0+255),w,b
 16917  001E94  0100               	movlb	0	; () banked
 16918  001E96  27CD               	addwf	?___wmul& (0+255),f,b
 16919  001E98  0E00               	movlw	0
 16920  001E9A  0100               	movlb	0	; () banked
 16921  001E9C  23CE               	addwfc	(?___wmul+1)& (0+255),f,b
 16922  001E9E  0E7B               	movlw	low _font
 16923  001EA0  0100               	movlb	0	; () banked
 16924  001EA2  25CD               	addwf	?___wmul& (0+255),w,b
 16925  001EA4  6EF6               	movwf	tblptrl,c
 16926  001EA6  0EFC               	movlw	high _font
 16927  001EA8  D01C               	goto	L5
 16928  001EAA                     l8391:
 16929                           
 16930                           ;ST7735.c: 459: else
 16931                           ;ST7735.c: 460: line = font2[(c - 'S')*5 + i];
 16932  001EAA  0EAD               	movlw	173
 16933  001EAC  0101               	movlb	1	; () banked
 16934  001EAE  2559               	addwf	drawChar@c& (0+255),w,b
 16935  001EB0  0100               	movlb	0	; () banked
 16936  001EB2  6FCD               	movwf	___wmul@multiplier& (0+255),b
 16937  001EB4  0100               	movlb	0	; () banked
 16938  001EB6  6BCE               	clrf	(___wmul@multiplier+1)& (0+255),b
 16939  001EB8  0EFF               	movlw	255
 16940  001EBA  23CE               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 16941  001EBC  0E00               	movlw	0
 16942  001EBE  0100               	movlb	0	; () banked
 16943  001EC0  6FD0               	movwf	(___wmul@multiplicand+1)& (0+255),b
 16944  001EC2  0E05               	movlw	5
 16945  001EC4  6FCF               	movwf	___wmul@multiplicand& (0+255),b
 16946  001EC6  EC45  F024         	call	___wmul	;wreg free
 16947  001ECA  0101               	movlb	1	; () banked
 16948  001ECC  5162               	movf	drawChar@i& (0+255),w,b
 16949  001ECE  0100               	movlb	0	; () banked
 16950  001ED0  27CD               	addwf	?___wmul& (0+255),f,b
 16951  001ED2  0E00               	movlw	0
 16952  001ED4  0100               	movlb	0	; () banked
 16953  001ED6  23CE               	addwfc	(?___wmul+1)& (0+255),f,b
 16954  001ED8  0E7A               	movlw	low _font2
 16955  001EDA  0100               	movlb	0	; () banked
 16956  001EDC  25CD               	addwf	?___wmul& (0+255),w,b
 16957  001EDE  6EF6               	movwf	tblptrl,c
 16958  001EE0  0EFD               	movlw	high _font2
 16959  001EE2                     L5:
 16960  001EE2  0100               	movlb	0	; () banked
 16961  001EE4  21CE               	addwfc	(?___wmul+1)& (0+255),w,b
 16962  001EE6  6EF7               	movwf	tblptrh,c
 16963  001EE8                     	if	0	;There are less than 3 active tblptr bytes
 16964  001EE8                     	endif
 16965  001EE8  0008               	tblrd		*
 16966  001EEA  CFF5 F15F          	movff	tablat,drawChar@line
 16967  001EEE  D000               	goto	l8393
 16968  001EF0                     l8393:
 16969                           
 16970                           ; BSR set to: 0
 16971                           ;ST7735.c: 461: for(j=0; j<7; j++, line >>= 1) {
 16972  001EF0  0E00               	movlw	0
 16973  001EF2  0101               	movlb	1	; () banked
 16974  001EF4  6F61               	movwf	drawChar@j& (0+255),b
 16975  001EF6                     l8395:
 16976                           
 16977                           ; BSR set to: 1
 16978  001EF6  0E06               	movlw	6
 16979  001EF8  0101               	movlb	1	; () banked
 16980  001EFA  6561               	cpfsgt	drawChar@j& (0+255),b
 16981  001EFC  D001               	goto	l1277
 16982                           
 16983                           ; BSR set to: 1
 16984  001EFE  D074               	goto	l8419
 16985  001F00                     l1277:
 16986                           
 16987                           ; BSR set to: 1
 16988                           ;ST7735.c: 462: if(line & 0x01) {
 16989  001F00  0101               	movlb	1	; () banked
 16990  001F02  A15F               	btfss	drawChar@line& (0+255),0,b
 16991  001F04  D030               	goto	l8405
 16992                           
 16993                           ; BSR set to: 1
 16994                           ;ST7735.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 16995  001F06  0101               	movlb	1	; () banked
 16996  001F08  055E               	decf	drawChar@size& (0+255),w,b
 16997  001F0A  A4D8               	btfss	status,2,c
 16998  001F0C  D011               	goto	l8403
 16999                           
 17000                           ; BSR set to: 1
 17001  001F0E  0101               	movlb	1	; () banked
 17002  001F10  5158               	movf	drawChar@y& (0+255),w,b
 17003  001F12  0101               	movlb	1	; () banked
 17004  001F14  2561               	addwf	drawChar@j& (0+255),w,b
 17005  001F16  0100               	movlb	0	; () banked
 17006  001F18  6FD4               	movwf	drawPixel@y& (0+255),b
 17007  001F1A  C15A  F0D5         	movff	drawChar@color,drawPixel@color
 17008  001F1E  C15B  F0D6         	movff	drawChar@color+1,drawPixel@color+1
 17009  001F22  0101               	movlb	1	; () banked
 17010  001F24  5160               	movf	drawChar@x& (0+255),w,b
 17011  001F26  0101               	movlb	1	; () banked
 17012  001F28  2562               	addwf	drawChar@i& (0+255),w,b
 17013  001F2A  ECC7  F023         	call	_drawPixel
 17014  001F2E  D056               	goto	l8413
 17015  001F30                     l8403:
 17016                           
 17017                           ;ST7735.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 17018  001F30  0101               	movlb	1	; () banked
 17019  001F32  5161               	movf	drawChar@j& (0+255),w,b
 17020  001F34  0101               	movlb	1	; () banked
 17021  001F36  035E               	mulwf	drawChar@size& (0+255),b
 17022  001F38  50F3               	movf	prodl,w,c
 17023  001F3A  0101               	movlb	1	; () banked
 17024  001F3C  2558               	addwf	drawChar@y& (0+255),w,b
 17025  001F3E  0100               	movlb	0	; () banked
 17026  001F40  6FDF               	movwf	fillRect@y& (0+255),b
 17027  001F42  C15E  F0E0         	movff	drawChar@size,fillRect@w
 17028  001F46  C15E  F0E1         	movff	drawChar@size,fillRect@h
 17029  001F4A  C15A  F0E2         	movff	drawChar@color,fillRect@color
 17030  001F4E  C15B  F0E3         	movff	drawChar@color+1,fillRect@color+1
 17031  001F52  0101               	movlb	1	; () banked
 17032  001F54  5162               	movf	drawChar@i& (0+255),w,b
 17033  001F56  0101               	movlb	1	; () banked
 17034  001F58  035E               	mulwf	drawChar@size& (0+255),b
 17035  001F5A  50F3               	movf	prodl,w,c
 17036  001F5C  0101               	movlb	1	; () banked
 17037  001F5E  2560               	addwf	drawChar@x& (0+255),w,b
 17038  001F60  EC25  F021         	call	_fillRect
 17039                           
 17040                           ;ST7735.c: 465: }
 17041  001F64  D03B               	goto	l8413
 17042  001F66                     l8405:
 17043                           
 17044                           ;ST7735.c: 466: else if(bg != color) {
 17045  001F66  0101               	movlb	1	; () banked
 17046  001F68  515A               	movf	drawChar@color& (0+255),w,b
 17047  001F6A  0101               	movlb	1	; () banked
 17048  001F6C  195C               	xorwf	drawChar@bg& (0+255),w,b
 17049  001F6E  E106               	bnz	u6110
 17050  001F70  0101               	movlb	1	; () banked
 17051  001F72  515B               	movf	(drawChar@color+1)& (0+255),w,b
 17052  001F74  0101               	movlb	1	; () banked
 17053  001F76  195D               	xorwf	(drawChar@bg+1)& (0+255),w,b
 17054  001F78  B4D8               	btfsc	status,2,c
 17055  001F7A  D030               	goto	l8413
 17056  001F7C                     u6110:
 17057                           
 17058                           ; BSR set to: 1
 17059                           ;ST7735.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 17060  001F7C  0101               	movlb	1	; () banked
 17061  001F7E  055E               	decf	drawChar@size& (0+255),w,b
 17062  001F80  A4D8               	btfss	status,2,c
 17063  001F82  D011               	goto	l8411
 17064                           
 17065                           ; BSR set to: 1
 17066  001F84  0101               	movlb	1	; () banked
 17067  001F86  5158               	movf	drawChar@y& (0+255),w,b
 17068  001F88  0101               	movlb	1	; () banked
 17069  001F8A  2561               	addwf	drawChar@j& (0+255),w,b
 17070  001F8C  0100               	movlb	0	; () banked
 17071  001F8E  6FD4               	movwf	drawPixel@y& (0+255),b
 17072  001F90  C15C  F0D5         	movff	drawChar@bg,drawPixel@color
 17073  001F94  C15D  F0D6         	movff	drawChar@bg+1,drawPixel@color+1
 17074  001F98  0101               	movlb	1	; () banked
 17075  001F9A  5160               	movf	drawChar@x& (0+255),w,b
 17076  001F9C  0101               	movlb	1	; () banked
 17077  001F9E  2562               	addwf	drawChar@i& (0+255),w,b
 17078  001FA0  ECC7  F023         	call	_drawPixel
 17079  001FA4  D01B               	goto	l8413
 17080  001FA6                     l8411:
 17081                           
 17082                           ;ST7735.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 17083  001FA6  0101               	movlb	1	; () banked
 17084  001FA8  5161               	movf	drawChar@j& (0+255),w,b
 17085  001FAA  0101               	movlb	1	; () banked
 17086  001FAC  035E               	mulwf	drawChar@size& (0+255),b
 17087  001FAE  50F3               	movf	prodl,w,c
 17088  001FB0  0101               	movlb	1	; () banked
 17089  001FB2  2558               	addwf	drawChar@y& (0+255),w,b
 17090  001FB4  0100               	movlb	0	; () banked
 17091  001FB6  6FDF               	movwf	fillRect@y& (0+255),b
 17092  001FB8  C15E  F0E0         	movff	drawChar@size,fillRect@w
 17093  001FBC  C15E  F0E1         	movff	drawChar@size,fillRect@h
 17094  001FC0  C15C  F0E2         	movff	drawChar@bg,fillRect@color
 17095  001FC4  C15D  F0E3         	movff	drawChar@bg+1,fillRect@color+1
 17096  001FC8  0101               	movlb	1	; () banked
 17097  001FCA  5162               	movf	drawChar@i& (0+255),w,b
 17098  001FCC  0101               	movlb	1	; () banked
 17099  001FCE  035E               	mulwf	drawChar@size& (0+255),b
 17100  001FD0  50F3               	movf	prodl,w,c
 17101  001FD2  0101               	movlb	1	; () banked
 17102  001FD4  2560               	addwf	drawChar@x& (0+255),w,b
 17103  001FD6  EC25  F021         	call	_fillRect
 17104  001FDA  D000               	goto	l8413
 17105  001FDC                     l8413:
 17106  001FDC  0101               	movlb	1	; () banked
 17107  001FDE  2B61               	incf	drawChar@j& (0+255),f,b
 17108                           
 17109                           ; BSR set to: 1
 17110  001FE0  0101               	movlb	1	; () banked
 17111  001FE2  90D8               	bcf	status,0,c
 17112  001FE4  335F               	rrcf	drawChar@line& (0+255),f,b
 17113  001FE6  D787               	goto	l8395
 17114  001FE8                     l8419:
 17115                           
 17116                           ; BSR set to: 1
 17117  001FE8  0101               	movlb	1	; () banked
 17118  001FEA  2B62               	incf	drawChar@i& (0+255),f,b
 17119  001FEC  D738               	goto	l8383
 17120  001FEE                     l1268:
 17121                           
 17122                           ; BSR set to: 1
 17123  001FEE  0012               	return		;funcret
 17124  001FF0                     __end_of_drawChar:
 17125                           	opt stack 0
 17126                           tblptru	equ	0xFF8
 17127                           tblptrh	equ	0xFF7
 17128                           tblptrl	equ	0xFF6
 17129                           tablat	equ	0xFF5
 17130                           prodh	equ	0xFF4
 17131                           prodl	equ	0xFF3
 17132                           intcon	equ	0xFF2
 17133                           intcon2	equ	0xFF1
 17134                           postinc0	equ	0xFEE
 17135                           wreg	equ	0xFE8
 17136                           postdec1	equ	0xFE5
 17137                           fsr1l	equ	0xFE1
 17138                           indf2	equ	0xFDF
 17139                           postinc2	equ	0xFDE
 17140                           postdec2	equ	0xFDD
 17141                           fsr2h	equ	0xFDA
 17142                           fsr2l	equ	0xFD9
 17143                           status	equ	0xFD8
 17144                           
 17145 ;; *************** function _fillRect *****************
 17146 ;; Defined at:
 17147 ;;		line 437 in file "ST7735.c"
 17148 ;; Parameters:    Size  Location     Type
 17149 ;;  x               1    wreg     unsigned char 
 17150 ;;  y               1   18[BANK0 ] unsigned char 
 17151 ;;  w               1   19[BANK0 ] unsigned char 
 17152 ;;  h               1   20[BANK0 ] unsigned char 
 17153 ;;  color           2   21[BANK0 ] unsigned int 
 17154 ;; Auto vars:     Size  Location     Type
 17155 ;;  x               1   26[BANK0 ] unsigned char 
 17156 ;;  i               2   27[BANK0 ] int 
 17157 ;; Return value:  Size  Location     Type
 17158 ;;		None               void
 17159 ;; Registers used:
 17160 ;;		wreg, status,2, status,0, cstack
 17161 ;; Tracked objects:
 17162 ;;		On entry : 0/0
 17163 ;;		On exit  : 0/0
 17164 ;;		Unchanged: 0/0
 17165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17166 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17167 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17168 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17169 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17170 ;;Total ram usage:       11 bytes
 17171 ;; Hardware stack levels used:    1
 17172 ;; Hardware stack levels required when called:    8
 17173 ;; This function calls:
 17174 ;;		_drawFastVLine
 17175 ;; This function is called by:
 17176 ;;		_Initialize_Setup_Alarm_Time_Screen
 17177 ;;		_Initialize_Setup_Time_Screen
 17178 ;;		_Update_Setup_Screen_Cursor_Forward
 17179 ;;		_Update_Setup_Screen_Cursor_Backward
 17180 ;;		_drawChar
 17181 ;; This function uses a non-reentrant model
 17182 ;;
 17183                           
 17184                           	psect	text79
 17185  00424A                     __ptext79:
 17186                           	opt stack 0
 17187  00424A                     _fillRect:
 17188                           	opt stack 19
 17189                           
 17190                           ; BSR set to: 1
 17191                           ;incstack = 0
 17192                           ;fillRect@x stored from wreg
 17193  00424A  0100               	movlb	0	; () banked
 17194  00424C  6FE7               	movwf	fillRect@x& (0+255),b
 17195                           
 17196                           ; BSR set to: 0
 17197                           ;ST7735.c: 439: signed int i;
 17198                           ;ST7735.c: 441: for (i = x; i < x + w; i++)
 17199  00424E  C0E7  F0E8         	movff	fillRect@x,fillRect@i
 17200  004252  0100               	movlb	0	; () banked
 17201  004254  6BE9               	clrf	(fillRect@i+1)& (0+255),b
 17202  004256  D010               	goto	l8167
 17203  004258                     l8163:
 17204                           
 17205                           ; BSR set to: 0
 17206                           ;ST7735.c: 442: {
 17207                           ;ST7735.c: 443: drawFastVLine(i, y, h, color);
 17208  004258  C0DF  F0D4         	movff	fillRect@y,drawFastVLine@y
 17209  00425C  C0E1  F0D5         	movff	fillRect@h,drawFastVLine@h
 17210  004260  C0E2  F0D6         	movff	fillRect@color,drawFastVLine@color
 17211  004264  C0E3  F0D7         	movff	fillRect@color+1,drawFastVLine@color+1
 17212  004268  0100               	movlb	0	; () banked
 17213  00426A  51E8               	movf	fillRect@i& (0+255),w,b
 17214  00426C  ECB7  F01B         	call	_drawFastVLine
 17215  004270  0100               	movlb	0	; () banked
 17216  004272  4BE8               	infsnz	fillRect@i& (0+255),f,b
 17217  004274  2BE9               	incf	(fillRect@i+1)& (0+255),f,b
 17218  004276  D000               	goto	l8167
 17219  004278                     l8167:
 17220                           
 17221                           ; BSR set to: 0
 17222  004278  0100               	movlb	0	; () banked
 17223  00427A  51E0               	movf	fillRect@w& (0+255),w,b
 17224  00427C  C0E7  F0E4         	movff	fillRect@x,??_fillRect
 17225  004280  0100               	movlb	0	; () banked
 17226  004282  6BE5               	clrf	(??_fillRect+1)& (0+255),b
 17227  004284  0100               	movlb	0	; () banked
 17228  004286  27E4               	addwf	??_fillRect& (0+255),f,b
 17229  004288  0E00               	movlw	0
 17230  00428A  23E5               	addwfc	(??_fillRect+1)& (0+255),f,b
 17231  00428C  0100               	movlb	0	; () banked
 17232  00428E  51E4               	movf	??_fillRect& (0+255),w,b
 17233  004290  0100               	movlb	0	; () banked
 17234  004292  5DE8               	subwf	fillRect@i& (0+255),w,b
 17235  004294  0100               	movlb	0	; () banked
 17236  004296  51E9               	movf	(fillRect@i+1)& (0+255),w,b
 17237  004298  0A80               	xorlw	128
 17238  00429A  0100               	movlb	0	; () banked
 17239  00429C  6FE6               	movwf	(??_fillRect+2)& (0+255),b
 17240  00429E  0100               	movlb	0	; () banked
 17241  0042A0  51E5               	movf	(??_fillRect+1)& (0+255),w,b
 17242  0042A2  0A80               	xorlw	128
 17243  0042A4  0100               	movlb	0	; () banked
 17244  0042A6  59E6               	subwfb	(??_fillRect+2)& (0+255),w,b
 17245  0042A8  A0D8               	btfss	status,0,c
 17246  0042AA  D7D6               	goto	l8163
 17247                           
 17248                           ; BSR set to: 0
 17249                           
 17250                           ; BSR set to: 0
 17251  0042AC  0012               	return		;funcret
 17252  0042AE                     __end_of_fillRect:
 17253                           	opt stack 0
 17254                           tblptru	equ	0xFF8
 17255                           tblptrh	equ	0xFF7
 17256                           tblptrl	equ	0xFF6
 17257                           tablat	equ	0xFF5
 17258                           prodh	equ	0xFF4
 17259                           prodl	equ	0xFF3
 17260                           intcon	equ	0xFF2
 17261                           intcon2	equ	0xFF1
 17262                           postinc0	equ	0xFEE
 17263                           wreg	equ	0xFE8
 17264                           postdec1	equ	0xFE5
 17265                           fsr1l	equ	0xFE1
 17266                           indf2	equ	0xFDF
 17267                           postinc2	equ	0xFDE
 17268                           postdec2	equ	0xFDD
 17269                           fsr2h	equ	0xFDA
 17270                           fsr2l	equ	0xFD9
 17271                           status	equ	0xFD8
 17272                           
 17273 ;; *************** function _drawFastVLine *****************
 17274 ;; Defined at:
 17275 ;;		line 416 in file "ST7735.c"
 17276 ;; Parameters:    Size  Location     Type
 17277 ;;  x               1    wreg     unsigned char 
 17278 ;;  y               1    7[BANK0 ] unsigned char 
 17279 ;;  h               1    8[BANK0 ] unsigned char 
 17280 ;;  color           2    9[BANK0 ] unsigned int 
 17281 ;; Auto vars:     Size  Location     Type
 17282 ;;  x               1   17[BANK0 ] unsigned char 
 17283 ;;  lo              1   16[BANK0 ] unsigned char 
 17284 ;;  hi              1   15[BANK0 ] unsigned char 
 17285 ;; Return value:  Size  Location     Type
 17286 ;;		None               void
 17287 ;; Registers used:
 17288 ;;		wreg, status,2, status,0, cstack
 17289 ;; Tracked objects:
 17290 ;;		On entry : 0/0
 17291 ;;		On exit  : 0/0
 17292 ;;		Unchanged: 0/0
 17293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17294 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17295 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17296 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17297 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17298 ;;Total ram usage:       11 bytes
 17299 ;; Hardware stack levels used:    1
 17300 ;; Hardware stack levels required when called:    7
 17301 ;; This function calls:
 17302 ;;		_setAddrWindow
 17303 ;;		_spiwrite
 17304 ;; This function is called by:
 17305 ;;		_fillRect
 17306 ;;		_fillCircleHelper
 17307 ;;		_fillCircle
 17308 ;;		_drawRect
 17309 ;; This function uses a non-reentrant model
 17310 ;;
 17311                           
 17312                           	psect	text80
 17313  00376E                     __ptext80:
 17314                           	opt stack 0
 17315  00376E                     _drawFastVLine:
 17316                           	opt stack 19
 17317                           
 17318                           ; BSR set to: 0
 17319                           ;incstack = 0
 17320                           ;drawFastVLine@x stored from wreg
 17321  00376E  0100               	movlb	0	; () banked
 17322  003770  6FDE               	movwf	drawFastVLine@x& (0+255),b
 17323                           
 17324                           ; BSR set to: 0
 17325                           ;ST7735.c: 418: unsigned char hi, lo;
 17326                           ;ST7735.c: 419: if((x >= 128) || (y >= 160))
 17327  003772  0E80               	movlw	128
 17328  003774  0100               	movlb	0	; () banked
 17329  003776  61DE               	cpfslt	drawFastVLine@x& (0+255),b
 17330  003778  D05A               	goto	l1252
 17331                           
 17332                           ; BSR set to: 0
 17333  00377A  0E9F               	movlw	159
 17334  00377C  0100               	movlb	0	; () banked
 17335  00377E  65D4               	cpfsgt	drawFastVLine@y& (0+255),b
 17336  003780  D001               	goto	l8125
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;ST7735.c: 420: return;
 17340  003782  D055               	goto	l1252
 17341  003784                     l8125:
 17342                           
 17343                           ; BSR set to: 0
 17344                           ;ST7735.c: 421: if((y + h - 1) >= 160)
 17345  003784  0EFF               	movlw	255
 17346  003786  0100               	movlb	0	; () banked
 17347  003788  6FD8               	movwf	??_drawFastVLine& (0+255),b
 17348  00378A  0EFF               	movlw	255
 17349  00378C  0100               	movlb	0	; () banked
 17350  00378E  6FD9               	movwf	(??_drawFastVLine+1)& (0+255),b
 17351  003790  0100               	movlb	0	; () banked
 17352  003792  51D5               	movf	drawFastVLine@h& (0+255),w,b
 17353  003794  C0D4  F0DA         	movff	drawFastVLine@y,??_drawFastVLine+2
 17354  003798  0100               	movlb	0	; () banked
 17355  00379A  6BDB               	clrf	(??_drawFastVLine+3)& (0+255),b
 17356  00379C  0100               	movlb	0	; () banked
 17357  00379E  27DA               	addwf	(??_drawFastVLine+2)& (0+255),f,b
 17358  0037A0  0E00               	movlw	0
 17359  0037A2  23DB               	addwfc	(??_drawFastVLine+3)& (0+255),f,b
 17360  0037A4  0100               	movlb	0	; () banked
 17361  0037A6  51D8               	movf	??_drawFastVLine& (0+255),w,b
 17362  0037A8  0100               	movlb	0	; () banked
 17363  0037AA  27DA               	addwf	(??_drawFastVLine+2)& (0+255),f,b
 17364  0037AC  0100               	movlb	0	; () banked
 17365  0037AE  51D9               	movf	(??_drawFastVLine+1)& (0+255),w,b
 17366  0037B0  0100               	movlb	0	; () banked
 17367  0037B2  23DB               	addwfc	(??_drawFastVLine+3)& (0+255),f,b
 17368  0037B4  0100               	movlb	0	; () banked
 17369  0037B6  BFDB               	btfsc	(??_drawFastVLine+3)& (0+255),7,b
 17370  0037B8  D00F               	goto	l8129
 17371  0037BA  0100               	movlb	0	; () banked
 17372  0037BC  51DB               	movf	(??_drawFastVLine+3)& (0+255),w,b
 17373  0037BE  E105               	bnz	u5870
 17374  0037C0  0EA0               	movlw	160
 17375  0037C2  0100               	movlb	0	; () banked
 17376  0037C4  5DDA               	subwf	(??_drawFastVLine+2)& (0+255),w,b
 17377  0037C6  A0D8               	btfss	status,0,c
 17378  0037C8  D007               	goto	l8129
 17379  0037CA                     u5870:
 17380                           
 17381                           ; BSR set to: 0
 17382                           ;ST7735.c: 422: h = 160 - y;
 17383  0037CA  0100               	movlb	0	; () banked
 17384  0037CC  51D4               	movf	drawFastVLine@y& (0+255),w,b
 17385  0037CE  0800               	sublw	0
 17386  0037D0  0FA0               	addlw	160
 17387  0037D2  0100               	movlb	0	; () banked
 17388  0037D4  6FD5               	movwf	drawFastVLine@h& (0+255),b
 17389  0037D6  D000               	goto	l8129
 17390  0037D8                     l8129:
 17391                           
 17392                           ; BSR set to: 0
 17393                           ;ST7735.c: 423: hi = color >> 8; lo = color;
 17394  0037D8  0100               	movlb	0	; () banked
 17395  0037DA  51D7               	movf	(drawFastVLine@color+1)& (0+255),w,b
 17396  0037DC  0100               	movlb	0	; () banked
 17397  0037DE  6FDC               	movwf	drawFastVLine@hi& (0+255),b
 17398                           
 17399                           ; BSR set to: 0
 17400  0037E0  C0D6  F0DD         	movff	drawFastVLine@color,drawFastVLine@lo
 17401                           
 17402                           ; BSR set to: 0
 17403                           ;ST7735.c: 424: setAddrWindow(x, y, x, y + h - 1);
 17404  0037E4  C0D4  F0D0         	movff	drawFastVLine@y,setAddrWindow@y0
 17405  0037E8  C0DE  F0D1         	movff	drawFastVLine@x,setAddrWindow@x1
 17406  0037EC  0100               	movlb	0	; () banked
 17407  0037EE  51D4               	movf	drawFastVLine@y& (0+255),w,b
 17408  0037F0  0100               	movlb	0	; () banked
 17409  0037F2  25D5               	addwf	drawFastVLine@h& (0+255),w,b
 17410  0037F4  0100               	movlb	0	; () banked
 17411  0037F6  6FD8               	movwf	??_drawFastVLine& (0+255),b
 17412  0037F8  0100               	movlb	0	; () banked
 17413  0037FA  05D8               	decf	??_drawFastVLine& (0+255),w,b
 17414  0037FC  0100               	movlb	0	; () banked
 17415  0037FE  6FD2               	movwf	setAddrWindow@y1& (0+255),b
 17416  003800  0100               	movlb	0	; () banked
 17417  003802  51DE               	movf	drawFastVLine@x& (0+255),w,b
 17418  003804  EC6B  F022         	call	_setAddrWindow
 17419                           
 17420                           ;ST7735.c: 425: PORTDbits.RD3 = 1;
 17421  003808  8683               	bsf	3971,3,c	;volatile
 17422                           
 17423                           ;ST7735.c: 426: PORTDbits.RD4 = 0;
 17424  00380A  9883               	bcf	3971,4,c	;volatile
 17425                           
 17426                           ;ST7735.c: 428: while (h--) {
 17427  00380C  D009               	goto	l8141
 17428  00380E                     l8139:
 17429                           
 17430                           ;ST7735.c: 429: spiwrite(hi);
 17431  00380E  0100               	movlb	0	; () banked
 17432  003810  51DC               	movf	drawFastVLine@hi& (0+255),w,b
 17433  003812  EC2D  F026         	call	_spiwrite
 17434                           
 17435                           ;ST7735.c: 430: spiwrite(lo);
 17436  003816  0100               	movlb	0	; () banked
 17437  003818  51DD               	movf	drawFastVLine@lo& (0+255),w,b
 17438  00381A  EC2D  F026         	call	_spiwrite
 17439  00381E  D000               	goto	l8141
 17440  003820                     l8141:
 17441  003820  0100               	movlb	0	; () banked
 17442  003822  07D5               	decf	drawFastVLine@h& (0+255),f,b
 17443  003824  0100               	movlb	0	; () banked
 17444  003826  29D5               	incf	drawFastVLine@h& (0+255),w,b
 17445  003828  A4D8               	btfss	status,2,c
 17446  00382A  D7F1               	goto	l8139
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;ST7735.c: 431: }
 17450                           ;ST7735.c: 432: PORTDbits.RD4 = 1;
 17451  00382C  8883               	bsf	3971,4,c	;volatile
 17452  00382E                     l1252:
 17453                           
 17454                           ; BSR set to: 0
 17455  00382E  0012               	return		;funcret
 17456  003830                     __end_of_drawFastVLine:
 17457                           	opt stack 0
 17458                           tblptru	equ	0xFF8
 17459                           tblptrh	equ	0xFF7
 17460                           tblptrl	equ	0xFF6
 17461                           tablat	equ	0xFF5
 17462                           prodh	equ	0xFF4
 17463                           prodl	equ	0xFF3
 17464                           intcon	equ	0xFF2
 17465                           intcon2	equ	0xFF1
 17466                           postinc0	equ	0xFEE
 17467                           wreg	equ	0xFE8
 17468                           postdec1	equ	0xFE5
 17469                           fsr1l	equ	0xFE1
 17470                           indf2	equ	0xFDF
 17471                           postinc2	equ	0xFDE
 17472                           postdec2	equ	0xFDD
 17473                           fsr2h	equ	0xFDA
 17474                           fsr2l	equ	0xFD9
 17475                           status	equ	0xFD8
 17476                           
 17477 ;; *************** function _drawPixel *****************
 17478 ;; Defined at:
 17479 ;;		line 407 in file "ST7735.c"
 17480 ;; Parameters:    Size  Location     Type
 17481 ;;  x               1    wreg     unsigned char 
 17482 ;;  y               1    7[BANK0 ] unsigned char 
 17483 ;;  color           2    8[BANK0 ] unsigned int 
 17484 ;; Auto vars:     Size  Location     Type
 17485 ;;  x               1   10[BANK0 ] unsigned char 
 17486 ;; Return value:  Size  Location     Type
 17487 ;;		None               void
 17488 ;; Registers used:
 17489 ;;		wreg, status,2, status,0, cstack
 17490 ;; Tracked objects:
 17491 ;;		On entry : 0/0
 17492 ;;		On exit  : 0/0
 17493 ;;		Unchanged: 0/0
 17494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17495 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17498 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17499 ;;Total ram usage:        4 bytes
 17500 ;; Hardware stack levels used:    1
 17501 ;; Hardware stack levels required when called:    7
 17502 ;; This function calls:
 17503 ;;		_setAddrWindow
 17504 ;;		_write_data
 17505 ;; This function is called by:
 17506 ;;		_drawChar
 17507 ;;		_drawCircle
 17508 ;;		_drawCircleHelper
 17509 ;; This function uses a non-reentrant model
 17510 ;;
 17511                           
 17512                           	psect	text81
 17513  00478E                     __ptext81:
 17514                           	opt stack 0
 17515  00478E                     _drawPixel:
 17516                           	opt stack 20
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;incstack = 0
 17520                           ;drawPixel@x stored from wreg
 17521  00478E  0100               	movlb	0	; () banked
 17522  004790  6FD7               	movwf	drawPixel@x& (0+255),b
 17523                           
 17524                           ; BSR set to: 0
 17525                           ;ST7735.c: 409: if((x >= 128) || (y >= 160))
 17526  004792  0E80               	movlw	128
 17527  004794  0100               	movlb	0	; () banked
 17528  004796  61D7               	cpfslt	drawPixel@x& (0+255),b
 17529  004798  D01B               	goto	l1246
 17530                           
 17531                           ; BSR set to: 0
 17532  00479A  0E9F               	movlw	159
 17533  00479C  0100               	movlb	0	; () banked
 17534  00479E  65D4               	cpfsgt	drawPixel@y& (0+255),b
 17535  0047A0  D001               	goto	l8187
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;ST7735.c: 410: return;
 17539  0047A2  D016               	goto	l1246
 17540  0047A4                     l8187:
 17541                           
 17542                           ; BSR set to: 0
 17543                           ;ST7735.c: 411: setAddrWindow(x,y,x+1,y+1);
 17544  0047A4  C0D4  F0D0         	movff	drawPixel@y,setAddrWindow@y0
 17545  0047A8  0100               	movlb	0	; () banked
 17546  0047AA  29D7               	incf	drawPixel@x& (0+255),w,b
 17547  0047AC  0100               	movlb	0	; () banked
 17548  0047AE  6FD1               	movwf	setAddrWindow@x1& (0+255),b
 17549  0047B0  0100               	movlb	0	; () banked
 17550  0047B2  29D4               	incf	drawPixel@y& (0+255),w,b
 17551  0047B4  0100               	movlb	0	; () banked
 17552  0047B6  6FD2               	movwf	setAddrWindow@y1& (0+255),b
 17553  0047B8  0100               	movlb	0	; () banked
 17554  0047BA  51D7               	movf	drawPixel@x& (0+255),w,b
 17555  0047BC  EC6B  F022         	call	_setAddrWindow
 17556                           
 17557                           ;ST7735.c: 412: write_data(color >> 8);
 17558  0047C0  0100               	movlb	0	; () banked
 17559  0047C2  51D6               	movf	(drawPixel@color+1)& (0+255),w,b
 17560  0047C4  EC58  F026         	call	_write_data
 17561                           
 17562                           ;ST7735.c: 413: write_data(color & 0xFF);
 17563  0047C8  0100               	movlb	0	; () banked
 17564  0047CA  51D5               	movf	drawPixel@color& (0+255),w,b
 17565  0047CC  EC58  F026         	call	_write_data
 17566  0047D0                     l1246:
 17567  0047D0  0012               	return		;funcret
 17568  0047D2                     __end_of_drawPixel:
 17569                           	opt stack 0
 17570                           tblptru	equ	0xFF8
 17571                           tblptrh	equ	0xFF7
 17572                           tblptrl	equ	0xFF6
 17573                           tablat	equ	0xFF5
 17574                           prodh	equ	0xFF4
 17575                           prodl	equ	0xFF3
 17576                           intcon	equ	0xFF2
 17577                           intcon2	equ	0xFF1
 17578                           postinc0	equ	0xFEE
 17579                           wreg	equ	0xFE8
 17580                           postdec1	equ	0xFE5
 17581                           fsr1l	equ	0xFE1
 17582                           indf2	equ	0xFDF
 17583                           postinc2	equ	0xFDE
 17584                           postdec2	equ	0xFDD
 17585                           fsr2h	equ	0xFDA
 17586                           fsr2l	equ	0xFD9
 17587                           status	equ	0xFD8
 17588                           
 17589 ;; *************** function _setAddrWindow *****************
 17590 ;; Defined at:
 17591 ;;		line 392 in file "ST7735.c"
 17592 ;; Parameters:    Size  Location     Type
 17593 ;;  x0              1    wreg     unsigned char 
 17594 ;;  y0              1    3[BANK0 ] unsigned char 
 17595 ;;  x1              1    4[BANK0 ] unsigned char 
 17596 ;;  y1              1    5[BANK0 ] unsigned char 
 17597 ;; Auto vars:     Size  Location     Type
 17598 ;;  x0              1    6[BANK0 ] unsigned char 
 17599 ;; Return value:  Size  Location     Type
 17600 ;;		None               void
 17601 ;; Registers used:
 17602 ;;		wreg, status,2, status,0, cstack
 17603 ;; Tracked objects:
 17604 ;;		On entry : 0/0
 17605 ;;		On exit  : 0/0
 17606 ;;		Unchanged: 0/0
 17607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17608 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17609 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17611 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17612 ;;Total ram usage:        4 bytes
 17613 ;; Hardware stack levels used:    1
 17614 ;; Hardware stack levels required when called:    6
 17615 ;; This function calls:
 17616 ;;		_write_command
 17617 ;;		_write_data
 17618 ;; This function is called by:
 17619 ;;		_drawPixel
 17620 ;;		_drawFastVLine
 17621 ;;		_fillRectangle
 17622 ;;		_drawFastHLine
 17623 ;; This function uses a non-reentrant model
 17624 ;;
 17625                           
 17626                           	psect	text82
 17627  0044D6                     __ptext82:
 17628                           	opt stack 0
 17629  0044D6                     _setAddrWindow:
 17630                           	opt stack 19
 17631                           
 17632                           ;incstack = 0
 17633                           ;setAddrWindow@x0 stored from wreg
 17634  0044D6  0100               	movlb	0	; () banked
 17635  0044D8  6FD3               	movwf	setAddrWindow@x0& (0+255),b
 17636                           
 17637                           ; BSR set to: 0
 17638                           ;ST7735.c: 394: write_command(0x2A);
 17639  0044DA  0E2A               	movlw	42
 17640  0044DC  EC62  F026         	call	_write_command
 17641                           
 17642                           ;ST7735.c: 395: write_data(0);
 17643  0044E0  0E00               	movlw	0
 17644  0044E2  EC58  F026         	call	_write_data
 17645                           
 17646                           ;ST7735.c: 396: write_data(x0 + colstart);
 17647  0044E6  0100               	movlb	0	; () banked
 17648  0044E8  51D3               	movf	setAddrWindow@x0& (0+255),w,b
 17649  0044EA  2454               	addwf	_colstart,w,c
 17650  0044EC  EC58  F026         	call	_write_data
 17651                           
 17652                           ;ST7735.c: 397: write_data(0);
 17653  0044F0  0E00               	movlw	0
 17654  0044F2  EC58  F026         	call	_write_data
 17655                           
 17656                           ;ST7735.c: 398: write_data(x1 + colstart);
 17657  0044F6  0100               	movlb	0	; () banked
 17658  0044F8  51D1               	movf	setAddrWindow@x1& (0+255),w,b
 17659  0044FA  2454               	addwf	_colstart,w,c
 17660  0044FC  EC58  F026         	call	_write_data
 17661                           
 17662                           ;ST7735.c: 399: write_command(0x2B);
 17663  004500  0E2B               	movlw	43
 17664  004502  EC62  F026         	call	_write_command
 17665                           
 17666                           ;ST7735.c: 400: write_data(0);
 17667  004506  0E00               	movlw	0
 17668  004508  EC58  F026         	call	_write_data
 17669                           
 17670                           ;ST7735.c: 401: write_data(y0 + rowstart);
 17671  00450C  0100               	movlb	0	; () banked
 17672  00450E  51D0               	movf	setAddrWindow@y0& (0+255),w,b
 17673  004510  2456               	addwf	_rowstart,w,c
 17674  004512  EC58  F026         	call	_write_data
 17675                           
 17676                           ;ST7735.c: 402: write_data(0);
 17677  004516  0E00               	movlw	0
 17678  004518  EC58  F026         	call	_write_data
 17679                           
 17680                           ;ST7735.c: 403: write_data(y1 + rowstart);
 17681  00451C  0100               	movlb	0	; () banked
 17682  00451E  51D2               	movf	setAddrWindow@y1& (0+255),w,b
 17683  004520  2456               	addwf	_rowstart,w,c
 17684  004522  EC58  F026         	call	_write_data
 17685                           
 17686                           ;ST7735.c: 404: write_command(0x2C);
 17687  004526  0E2C               	movlw	44
 17688  004528  EC62  F026         	call	_write_command
 17689  00452C  0012               	return		;funcret
 17690  00452E                     __end_of_setAddrWindow:
 17691                           	opt stack 0
 17692                           tblptru	equ	0xFF8
 17693                           tblptrh	equ	0xFF7
 17694                           tblptrl	equ	0xFF6
 17695                           tablat	equ	0xFF5
 17696                           prodh	equ	0xFF4
 17697                           prodl	equ	0xFF3
 17698                           intcon	equ	0xFF2
 17699                           intcon2	equ	0xFF1
 17700                           postinc0	equ	0xFEE
 17701                           wreg	equ	0xFE8
 17702                           postdec1	equ	0xFE5
 17703                           fsr1l	equ	0xFE1
 17704                           indf2	equ	0xFDF
 17705                           postinc2	equ	0xFDE
 17706                           postdec2	equ	0xFDD
 17707                           fsr2h	equ	0xFDA
 17708                           fsr2l	equ	0xFD9
 17709                           status	equ	0xFD8
 17710                           
 17711 ;; *************** function _write_data *****************
 17712 ;; Defined at:
 17713 ;;		line 209 in file "ST7735.c"
 17714 ;; Parameters:    Size  Location     Type
 17715 ;;  data_           1    wreg     unsigned char 
 17716 ;; Auto vars:     Size  Location     Type
 17717 ;;  data_           1    2[BANK0 ] unsigned char 
 17718 ;; Return value:  Size  Location     Type
 17719 ;;		None               void
 17720 ;; Registers used:
 17721 ;;		wreg, status,2, cstack
 17722 ;; Tracked objects:
 17723 ;;		On entry : 0/0
 17724 ;;		On exit  : 0/0
 17725 ;;		Unchanged: 0/0
 17726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17730 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17731 ;;Total ram usage:        1 bytes
 17732 ;; Hardware stack levels used:    1
 17733 ;; Hardware stack levels required when called:    5
 17734 ;; This function calls:
 17735 ;;		_spiwrite
 17736 ;; This function is called by:
 17737 ;;		_Rcmd1
 17738 ;;		_Rcmd2red
 17739 ;;		_Rcmd3
 17740 ;;		_setAddrWindow
 17741 ;;		_drawPixel
 17742 ;;		_TFT_GreenTab_Initialize
 17743 ;;		_Bcmd
 17744 ;;		_setScrollDefinition
 17745 ;;		_Rcmd2green
 17746 ;;		_VerticalScroll
 17747 ;; This function uses a non-reentrant model
 17748 ;;
 17749                           
 17750                           	psect	text83
 17751  004CB0                     __ptext83:
 17752                           	opt stack 0
 17753  004CB0                     _write_data:
 17754                           	opt stack 19
 17755                           
 17756                           ;incstack = 0
 17757                           ;write_data@data_ stored from wreg
 17758  004CB0  0100               	movlb	0	; () banked
 17759  004CB2  6FCF               	movwf	write_data@data_& (0+255),b
 17760                           
 17761                           ; BSR set to: 0
 17762                           ;ST7735.c: 211: PORTDbits.RD4 = 0;
 17763  004CB4  9883               	bcf	3971,4,c	;volatile
 17764                           
 17765                           ;ST7735.c: 212: PORTDbits.RD3 = 1;
 17766  004CB6  8683               	bsf	3971,3,c	;volatile
 17767                           
 17768                           ; BSR set to: 0
 17769                           ;ST7735.c: 213: spiwrite(data_);
 17770  004CB8  0100               	movlb	0	; () banked
 17771  004CBA  51CF               	movf	write_data@data_& (0+255),w,b
 17772  004CBC  EC2D  F026         	call	_spiwrite
 17773                           
 17774                           ;ST7735.c: 214: PORTDbits.RD4 = 1;
 17775  004CC0  8883               	bsf	3971,4,c	;volatile
 17776  004CC2  0012               	return		;funcret
 17777  004CC4                     __end_of_write_data:
 17778                           	opt stack 0
 17779                           tblptru	equ	0xFF8
 17780                           tblptrh	equ	0xFF7
 17781                           tblptrl	equ	0xFF6
 17782                           tablat	equ	0xFF5
 17783                           prodh	equ	0xFF4
 17784                           prodl	equ	0xFF3
 17785                           intcon	equ	0xFF2
 17786                           intcon2	equ	0xFF1
 17787                           postinc0	equ	0xFEE
 17788                           wreg	equ	0xFE8
 17789                           postdec1	equ	0xFE5
 17790                           fsr1l	equ	0xFE1
 17791                           indf2	equ	0xFDF
 17792                           postinc2	equ	0xFDE
 17793                           postdec2	equ	0xFDD
 17794                           fsr2h	equ	0xFDA
 17795                           fsr2l	equ	0xFD9
 17796                           status	equ	0xFD8
 17797                           
 17798 ;; *************** function _write_command *****************
 17799 ;; Defined at:
 17800 ;;		line 198 in file "ST7735.c"
 17801 ;; Parameters:    Size  Location     Type
 17802 ;;  cmd_            1    wreg     unsigned char 
 17803 ;; Auto vars:     Size  Location     Type
 17804 ;;  cmd_            1    2[BANK0 ] unsigned char 
 17805 ;; Return value:  Size  Location     Type
 17806 ;;		None               void
 17807 ;; Registers used:
 17808 ;;		wreg, status,2, cstack
 17809 ;; Tracked objects:
 17810 ;;		On entry : 0/0
 17811 ;;		On exit  : 0/0
 17812 ;;		Unchanged: 0/0
 17813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17815 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17817 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17818 ;;Total ram usage:        1 bytes
 17819 ;; Hardware stack levels used:    1
 17820 ;; Hardware stack levels required when called:    5
 17821 ;; This function calls:
 17822 ;;		_spiwrite
 17823 ;; This function is called by:
 17824 ;;		_Rcmd1
 17825 ;;		_Rcmd2red
 17826 ;;		_Rcmd3
 17827 ;;		_setAddrWindow
 17828 ;;		_TFT_GreenTab_Initialize
 17829 ;;		_Bcmd
 17830 ;;		_setScrollDefinition
 17831 ;;		_Rcmd2green
 17832 ;;		_VerticalScroll
 17833 ;; This function uses a non-reentrant model
 17834 ;;
 17835                           
 17836                           	psect	text84
 17837  004CC4                     __ptext84:
 17838                           	opt stack 0
 17839  004CC4                     _write_command:
 17840                           	opt stack 19
 17841                           
 17842                           ;incstack = 0
 17843                           ;write_command@cmd_ stored from wreg
 17844  004CC4  0100               	movlb	0	; () banked
 17845  004CC6  6FCF               	movwf	write_command@cmd_& (0+255),b
 17846                           
 17847                           ; BSR set to: 0
 17848                           ;ST7735.c: 200: PORTDbits.RD4 = 0;
 17849  004CC8  9883               	bcf	3971,4,c	;volatile
 17850                           
 17851                           ;ST7735.c: 202: PORTDbits.RD3 = 0;
 17852  004CCA  9683               	bcf	3971,3,c	;volatile
 17853                           
 17854                           ; BSR set to: 0
 17855                           ;ST7735.c: 203: spiwrite(cmd_);
 17856  004CCC  0100               	movlb	0	; () banked
 17857  004CCE  51CF               	movf	write_command@cmd_& (0+255),w,b
 17858  004CD0  EC2D  F026         	call	_spiwrite
 17859                           
 17860                           ;ST7735.c: 205: PORTDbits.RD4 = 1;
 17861  004CD4  8883               	bsf	3971,4,c	;volatile
 17862  004CD6  0012               	return		;funcret
 17863  004CD8                     __end_of_write_command:
 17864                           	opt stack 0
 17865                           tblptru	equ	0xFF8
 17866                           tblptrh	equ	0xFF7
 17867                           tblptrl	equ	0xFF6
 17868                           tablat	equ	0xFF5
 17869                           prodh	equ	0xFF4
 17870                           prodl	equ	0xFF3
 17871                           intcon	equ	0xFF2
 17872                           intcon2	equ	0xFF1
 17873                           postinc0	equ	0xFEE
 17874                           wreg	equ	0xFE8
 17875                           postdec1	equ	0xFE5
 17876                           fsr1l	equ	0xFE1
 17877                           indf2	equ	0xFDF
 17878                           postinc2	equ	0xFDE
 17879                           postdec2	equ	0xFDD
 17880                           fsr2h	equ	0xFDA
 17881                           fsr2l	equ	0xFD9
 17882                           status	equ	0xFD8
 17883                           
 17884 ;; *************** function _spiwrite *****************
 17885 ;; Defined at:
 17886 ;;		line 189 in file "ST7735.c"
 17887 ;; Parameters:    Size  Location     Type
 17888 ;;  spidata         1    wreg     unsigned char 
 17889 ;; Auto vars:     Size  Location     Type
 17890 ;;  spidata         1    1[BANK0 ] unsigned char 
 17891 ;;  x               1    0[BANK0 ] unsigned char 
 17892 ;; Return value:  Size  Location     Type
 17893 ;;		None               void
 17894 ;; Registers used:
 17895 ;;		wreg
 17896 ;; Tracked objects:
 17897 ;;		On entry : 0/0
 17898 ;;		On exit  : 0/0
 17899 ;;		Unchanged: 0/0
 17900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17905 ;;Total ram usage:        2 bytes
 17906 ;; Hardware stack levels used:    1
 17907 ;; Hardware stack levels required when called:    4
 17908 ;; This function calls:
 17909 ;;		Nothing
 17910 ;; This function is called by:
 17911 ;;		_write_command
 17912 ;;		_write_data
 17913 ;;		_drawFastVLine
 17914 ;;		_fillRectangle
 17915 ;;		_drawFastHLine
 17916 ;; This function uses a non-reentrant model
 17917 ;;
 17918                           
 17919                           	psect	text85
 17920  004C5A                     __ptext85:
 17921                           	opt stack 0
 17922  004C5A                     _spiwrite:
 17923                           	opt stack 21
 17924                           
 17925                           ;incstack = 0
 17926                           ;spiwrite@spidata stored from wreg
 17927  004C5A  0100               	movlb	0	; () banked
 17928  004C5C  6FCE               	movwf	spiwrite@spidata& (0+255),b
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;ST7735.c: 191: char x;
 17932                           ;ST7735.c: 192: PIR1bits.SSPIF = 0;
 17933  004C5E  969E               	bcf	3998,3,c	;volatile
 17934                           
 17935                           ;ST7735.c: 193: x = SSPBUF;
 17936  004C60  CFC9 F0CD          	movff	4041,spiwrite@x	;volatile
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;ST7735.c: 194: SSPBUF = spidata;
 17940  004C64  C0CE  FFC9         	movff	spiwrite@spidata,4041	;volatile
 17941                           
 17942                           ;ST7735.c: 195: while (!SSPSTATbits.BF);
 17943  004C68  D000               	goto	l1202
 17944  004C6A                     l1202:
 17945  004C6A  A0C7               	btfss	4039,0,c	;volatile
 17946  004C6C  D7FE               	goto	l1202
 17947  004C6E  0012               	return		;funcret
 17948  004C70                     __end_of_spiwrite:
 17949                           	opt stack 0
 17950                           tblptru	equ	0xFF8
 17951                           tblptrh	equ	0xFF7
 17952                           tblptrl	equ	0xFF6
 17953                           tablat	equ	0xFF5
 17954                           prodh	equ	0xFF4
 17955                           prodl	equ	0xFF3
 17956                           intcon	equ	0xFF2
 17957                           intcon2	equ	0xFF1
 17958                           postinc0	equ	0xFEE
 17959                           wreg	equ	0xFE8
 17960                           postdec1	equ	0xFE5
 17961                           fsr1l	equ	0xFE1
 17962                           indf2	equ	0xFDF
 17963                           postinc2	equ	0xFDE
 17964                           postdec2	equ	0xFDD
 17965                           fsr2h	equ	0xFDA
 17966                           fsr2l	equ	0xFD9
 17967                           status	equ	0xFD8
 17968                           
 17969 ;; *************** function ___wmul *****************
 17970 ;; Defined at:
 17971 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 17972 ;; Parameters:    Size  Location     Type
 17973 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17974 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17975 ;; Auto vars:     Size  Location     Type
 17976 ;;  product         2    4[BANK0 ] unsigned int 
 17977 ;; Return value:  Size  Location     Type
 17978 ;;                  2    0[BANK0 ] unsigned int 
 17979 ;; Registers used:
 17980 ;;		wreg, status,2, status,0, prodl, prodh
 17981 ;; Tracked objects:
 17982 ;;		On entry : 0/0
 17983 ;;		On exit  : 0/0
 17984 ;;		Unchanged: 0/0
 17985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17987 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17989 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17990 ;;Total ram usage:        6 bytes
 17991 ;; Hardware stack levels used:    1
 17992 ;; Hardware stack levels required when called:    4
 17993 ;; This function calls:
 17994 ;;		Nothing
 17995 ;; This function is called by:
 17996 ;;		_get_RPM
 17997 ;;		_main
 17998 ;;		_read_volt
 17999 ;;		_delay_ms
 18000 ;;		_drawChar
 18001 ;;		_printf
 18002 ;; This function uses a non-reentrant model
 18003 ;;
 18004                           
 18005                           	psect	text86
 18006  00488A                     __ptext86:
 18007                           	opt stack 0
 18008  00488A                     ___wmul:
 18009                           	opt stack 25
 18010                           
 18011                           ;incstack = 0
 18012  00488A  0100               	movlb	0	; () banked
 18013  00488C  51CD               	movf	___wmul@multiplier& (0+255),w,b
 18014  00488E  0100               	movlb	0	; () banked
 18015  004890  03CF               	mulwf	___wmul@multiplicand& (0+255),b
 18016  004892  CFF3 F0D1          	movff	prodl,___wmul@product
 18017  004896  CFF4 F0D2          	movff	prodh,___wmul@product+1
 18018  00489A  0100               	movlb	0	; () banked
 18019  00489C  51CD               	movf	___wmul@multiplier& (0+255),w,b
 18020  00489E  0100               	movlb	0	; () banked
 18021  0048A0  03D0               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18022  0048A2  50F3               	movf	prodl,w,c
 18023  0048A4  0100               	movlb	0	; () banked
 18024  0048A6  27D2               	addwf	(___wmul@product+1)& (0+255),f,b
 18025  0048A8  0100               	movlb	0	; () banked
 18026  0048AA  51CE               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18027  0048AC  0100               	movlb	0	; () banked
 18028  0048AE  03CF               	mulwf	___wmul@multiplicand& (0+255),b
 18029  0048B0  50F3               	movf	prodl,w,c
 18030  0048B2  0100               	movlb	0	; () banked
 18031  0048B4  27D2               	addwf	(___wmul@product+1)& (0+255),f,b
 18032                           
 18033                           ; BSR set to: 0
 18034  0048B6  C0D1  F0CD         	movff	___wmul@product,?___wmul
 18035  0048BA  C0D2  F0CE         	movff	___wmul@product+1,?___wmul+1
 18036  0048BE  D000               	goto	l1471
 18037  0048C0                     l1471:
 18038                           
 18039                           ; BSR set to: 0
 18040  0048C0  0012               	return		;funcret
 18041  0048C2                     __end_of___wmul:
 18042                           	opt stack 0
 18043                           tblptru	equ	0xFF8
 18044                           tblptrh	equ	0xFF7
 18045                           tblptrl	equ	0xFF6
 18046                           tablat	equ	0xFF5
 18047                           prodh	equ	0xFF4
 18048                           prodl	equ	0xFF3
 18049                           intcon	equ	0xFF2
 18050                           intcon2	equ	0xFF1
 18051                           postinc0	equ	0xFEE
 18052                           wreg	equ	0xFE8
 18053                           postdec1	equ	0xFE5
 18054                           fsr1l	equ	0xFE1
 18055                           indf2	equ	0xFDF
 18056                           postinc2	equ	0xFDE
 18057                           postdec2	equ	0xFDD
 18058                           fsr2h	equ	0xFDA
 18059                           fsr2l	equ	0xFD9
 18060                           status	equ	0xFD8
 18061                           
 18062 ;; *************** function ___awmod *****************
 18063 ;; Defined at:
 18064 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 18065 ;; Parameters:    Size  Location     Type
 18066 ;;  dividend        2   15[BANK1 ] int 
 18067 ;;  divisor         2   17[BANK1 ] int 
 18068 ;; Auto vars:     Size  Location     Type
 18069 ;;  sign            1   28[BANK0 ] unsigned char 
 18070 ;;  counter         1   27[BANK0 ] unsigned char 
 18071 ;; Return value:  Size  Location     Type
 18072 ;;                  2   15[BANK1 ] int 
 18073 ;; Registers used:
 18074 ;;		wreg, status,2, status,0
 18075 ;; Tracked objects:
 18076 ;;		On entry : 0/0
 18077 ;;		On exit  : 0/0
 18078 ;;		Unchanged: 0/0
 18079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18080 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18081 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18083 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18084 ;;Total ram usage:        6 bytes
 18085 ;; Hardware stack levels used:    1
 18086 ;; Hardware stack levels required when called:    4
 18087 ;; This function calls:
 18088 ;;		Nothing
 18089 ;; This function is called by:
 18090 ;;		_Update_Screen
 18091 ;;		_Update_Setup_Alarm_Time_Screen
 18092 ;;		_Update_Setup_Heater_Screen
 18093 ;;		_Update_Setup_Time_Screen
 18094 ;;		_dec_2_bcd
 18095 ;; This function uses a non-reentrant model
 18096 ;;
 18097                           
 18098                           	psect	text87
 18099  0038E6                     __ptext87:
 18100                           	opt stack 0
 18101  0038E6                     ___awmod:
 18102                           	opt stack 25
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;incstack = 0
 18106  0038E6  0E00               	movlw	0
 18107  0038E8  0100               	movlb	0	; () banked
 18108  0038EA  6FE9               	movwf	___awmod@sign& (0+255),b
 18109                           
 18110                           ; BSR set to: 0
 18111  0038EC  0101               	movlb	1	; () banked
 18112  0038EE  AF68               	btfss	(___awmod@dividend+1)& (0+255),7,b
 18113  0038F0  D009               	goto	l8573
 18114                           
 18115                           ; BSR set to: 1
 18116  0038F2  0101               	movlb	1	; () banked
 18117  0038F4  6D67               	negf	___awmod@dividend& (0+255),b
 18118  0038F6  1F68               	comf	(___awmod@dividend+1)& (0+255),f,b
 18119  0038F8  B0D8               	btfsc	status,0,c
 18120  0038FA  2B68               	incf	(___awmod@dividend+1)& (0+255),f,b
 18121                           
 18122                           ; BSR set to: 1
 18123  0038FC  0E01               	movlw	1
 18124  0038FE  0100               	movlb	0	; () banked
 18125  003900  6FE9               	movwf	___awmod@sign& (0+255),b
 18126  003902  D000               	goto	l8573
 18127  003904                     l8573:
 18128  003904  0101               	movlb	1	; () banked
 18129  003906  AF6A               	btfss	(___awmod@divisor+1)& (0+255),7,b
 18130  003908  D006               	goto	l8577
 18131                           
 18132                           ; BSR set to: 1
 18133  00390A  0101               	movlb	1	; () banked
 18134  00390C  6D69               	negf	___awmod@divisor& (0+255),b
 18135  00390E  1F6A               	comf	(___awmod@divisor+1)& (0+255),f,b
 18136  003910  B0D8               	btfsc	status,0,c
 18137  003912  2B6A               	incf	(___awmod@divisor+1)& (0+255),f,b
 18138  003914  D000               	goto	l8577
 18139  003916                     l8577:
 18140                           
 18141                           ; BSR set to: 1
 18142  003916  0101               	movlb	1	; () banked
 18143  003918  5169               	movf	___awmod@divisor& (0+255),w,b
 18144  00391A  0101               	movlb	1	; () banked
 18145  00391C  116A               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 18146  00391E  B4D8               	btfsc	status,2,c
 18147  003920  D02B               	goto	l8593
 18148                           
 18149                           ; BSR set to: 1
 18150  003922  0E01               	movlw	1
 18151  003924  0100               	movlb	0	; () banked
 18152  003926  6FE8               	movwf	___awmod@counter& (0+255),b
 18153  003928  D007               	goto	l8583
 18154  00392A                     l8581:
 18155  00392A  0101               	movlb	1	; () banked
 18156  00392C  90D8               	bcf	status,0,c
 18157  00392E  3769               	rlcf	___awmod@divisor& (0+255),f,b
 18158  003930  376A               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 18159  003932  0100               	movlb	0	; () banked
 18160  003934  2BE8               	incf	___awmod@counter& (0+255),f,b
 18161  003936  D000               	goto	l8583
 18162  003938                     l8583:
 18163                           
 18164                           ; BSR set to: 0
 18165  003938  0101               	movlb	1	; () banked
 18166  00393A  BF6A               	btfsc	(___awmod@divisor+1)& (0+255),7,b
 18167  00393C  D002               	goto	l8585
 18168  00393E  D7F5               	goto	l8581
 18169                           
 18170                           ; BSR set to: 1
 18171  003940  D000               	goto	l8585
 18172  003942                     l8585:
 18173  003942  0101               	movlb	1	; () banked
 18174  003944  5169               	movf	___awmod@divisor& (0+255),w,b
 18175  003946  0101               	movlb	1	; () banked
 18176  003948  5D67               	subwf	___awmod@dividend& (0+255),w,b
 18177  00394A  0101               	movlb	1	; () banked
 18178  00394C  516A               	movf	(___awmod@divisor+1)& (0+255),w,b
 18179  00394E  0101               	movlb	1	; () banked
 18180  003950  5968               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 18181  003952  A0D8               	btfss	status,0,c
 18182  003954  D009               	goto	l8589
 18183                           
 18184                           ; BSR set to: 1
 18185  003956  0101               	movlb	1	; () banked
 18186  003958  5169               	movf	___awmod@divisor& (0+255),w,b
 18187  00395A  0101               	movlb	1	; () banked
 18188  00395C  5F67               	subwf	___awmod@dividend& (0+255),f,b
 18189  00395E  0101               	movlb	1	; () banked
 18190  003960  516A               	movf	(___awmod@divisor+1)& (0+255),w,b
 18191  003962  0101               	movlb	1	; () banked
 18192  003964  5B68               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 18193  003966  D000               	goto	l8589
 18194  003968                     l8589:
 18195                           
 18196                           ; BSR set to: 1
 18197  003968  0101               	movlb	1	; () banked
 18198  00396A  90D8               	bcf	status,0,c
 18199  00396C  336A               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 18200  00396E  3369               	rrcf	___awmod@divisor& (0+255),f,b
 18201                           
 18202                           ; BSR set to: 1
 18203  003970  0100               	movlb	0	; () banked
 18204  003972  2FE8               	decfsz	___awmod@counter& (0+255),f,b
 18205  003974  D7E6               	goto	l8585
 18206                           
 18207                           ; BSR set to: 0
 18208  003976  D000               	goto	l8593
 18209  003978                     l8593:
 18210  003978  0100               	movlb	0	; () banked
 18211  00397A  51E9               	movf	___awmod@sign& (0+255),w,b
 18212  00397C  0100               	movlb	0	; () banked
 18213  00397E  B4D8               	btfsc	status,2,c
 18214  003980  D006               	goto	l8597
 18215                           
 18216                           ; BSR set to: 0
 18217  003982  0101               	movlb	1	; () banked
 18218  003984  6D67               	negf	___awmod@dividend& (0+255),b
 18219  003986  1F68               	comf	(___awmod@dividend+1)& (0+255),f,b
 18220  003988  B0D8               	btfsc	status,0,c
 18221  00398A  2B68               	incf	(___awmod@dividend+1)& (0+255),f,b
 18222  00398C  D000               	goto	l8597
 18223  00398E                     l8597:
 18224  00398E  C167  F167         	movff	___awmod@dividend,?___awmod
 18225  003992  C168  F168         	movff	___awmod@dividend+1,?___awmod+1
 18226  003996  D000               	goto	l1677
 18227  003998                     l1677:
 18228  003998  0012               	return		;funcret
 18229  00399A                     __end_of___awmod:
 18230                           	opt stack 0
 18231                           tblptru	equ	0xFF8
 18232                           tblptrh	equ	0xFF7
 18233                           tblptrl	equ	0xFF6
 18234                           tablat	equ	0xFF5
 18235                           prodh	equ	0xFF4
 18236                           prodl	equ	0xFF3
 18237                           intcon	equ	0xFF2
 18238                           intcon2	equ	0xFF1
 18239                           postinc0	equ	0xFEE
 18240                           wreg	equ	0xFE8
 18241                           postdec1	equ	0xFE5
 18242                           fsr1l	equ	0xFE1
 18243                           indf2	equ	0xFDF
 18244                           postinc2	equ	0xFDE
 18245                           postdec2	equ	0xFDD
 18246                           fsr2h	equ	0xFDA
 18247                           fsr2l	equ	0xFD9
 18248                           status	equ	0xFD8
 18249                           
 18250 ;; *************** function ___awdiv *****************
 18251 ;; Defined at:
 18252 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 18253 ;; Parameters:    Size  Location     Type
 18254 ;;  dividend        2   19[BANK1 ] int 
 18255 ;;  divisor         2   21[BANK1 ] int 
 18256 ;; Auto vars:     Size  Location     Type
 18257 ;;  quotient        2   25[BANK1 ] int 
 18258 ;;  sign            1   24[BANK1 ] unsigned char 
 18259 ;;  counter         1   23[BANK1 ] unsigned char 
 18260 ;; Return value:  Size  Location     Type
 18261 ;;                  2   19[BANK1 ] int 
 18262 ;; Registers used:
 18263 ;;		wreg, status,2, status,0
 18264 ;; Tracked objects:
 18265 ;;		On entry : 0/0
 18266 ;;		On exit  : 0/0
 18267 ;;		Unchanged: 0/0
 18268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18269 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18270 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18272 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18273 ;;Total ram usage:        8 bytes
 18274 ;; Hardware stack levels used:    1
 18275 ;; Hardware stack levels required when called:    4
 18276 ;; This function calls:
 18277 ;;		Nothing
 18278 ;; This function is called by:
 18279 ;;		_get_RPM
 18280 ;;		_main
 18281 ;;		_Update_Screen
 18282 ;;		_Update_Setup_Alarm_Time_Screen
 18283 ;;		_Update_Setup_Heater_Screen
 18284 ;;		_Update_Setup_Time_Screen
 18285 ;;		_dec_2_bcd
 18286 ;; This function uses a non-reentrant model
 18287 ;;
 18288                           
 18289                           	psect	text88
 18290  00337C                     __ptext88:
 18291                           	opt stack 0
 18292  00337C                     ___awdiv:
 18293                           	opt stack 25
 18294                           
 18295                           ;incstack = 0
 18296  00337C  0E00               	movlw	0
 18297  00337E  0101               	movlb	1	; () banked
 18298  003380  6F70               	movwf	___awdiv@sign& (0+255),b
 18299                           
 18300                           ; BSR set to: 1
 18301  003382  0101               	movlb	1	; () banked
 18302  003384  AF6E               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 18303  003386  D009               	goto	l8529
 18304                           
 18305                           ; BSR set to: 1
 18306  003388  0101               	movlb	1	; () banked
 18307  00338A  6D6D               	negf	___awdiv@divisor& (0+255),b
 18308  00338C  1F6E               	comf	(___awdiv@divisor+1)& (0+255),f,b
 18309  00338E  B0D8               	btfsc	status,0,c
 18310  003390  2B6E               	incf	(___awdiv@divisor+1)& (0+255),f,b
 18311                           
 18312                           ; BSR set to: 1
 18313  003392  0E01               	movlw	1
 18314  003394  0101               	movlb	1	; () banked
 18315  003396  6F70               	movwf	___awdiv@sign& (0+255),b
 18316  003398  D000               	goto	l8529
 18317  00339A                     l8529:
 18318                           
 18319                           ; BSR set to: 1
 18320  00339A  0101               	movlb	1	; () banked
 18321  00339C  AF6C               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 18322  00339E  D009               	goto	l8535
 18323                           
 18324                           ; BSR set to: 1
 18325  0033A0  0101               	movlb	1	; () banked
 18326  0033A2  6D6B               	negf	___awdiv@dividend& (0+255),b
 18327  0033A4  1F6C               	comf	(___awdiv@dividend+1)& (0+255),f,b
 18328  0033A6  B0D8               	btfsc	status,0,c
 18329  0033A8  2B6C               	incf	(___awdiv@dividend+1)& (0+255),f,b
 18330                           
 18331                           ; BSR set to: 1
 18332  0033AA  0E01               	movlw	1
 18333  0033AC  0101               	movlb	1	; () banked
 18334  0033AE  1B70               	xorwf	___awdiv@sign& (0+255),f,b
 18335  0033B0  D000               	goto	l8535
 18336  0033B2                     l8535:
 18337                           
 18338                           ; BSR set to: 1
 18339  0033B2  0E00               	movlw	0
 18340  0033B4  0101               	movlb	1	; () banked
 18341  0033B6  6F72               	movwf	(___awdiv@quotient+1)& (0+255),b
 18342  0033B8  0E00               	movlw	0
 18343  0033BA  6F71               	movwf	___awdiv@quotient& (0+255),b
 18344                           
 18345                           ; BSR set to: 1
 18346  0033BC  0101               	movlb	1	; () banked
 18347  0033BE  516D               	movf	___awdiv@divisor& (0+255),w,b
 18348  0033C0  0101               	movlb	1	; () banked
 18349  0033C2  116E               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 18350  0033C4  B4D8               	btfsc	status,2,c
 18351  0033C6  D031               	goto	l8557
 18352                           
 18353                           ; BSR set to: 1
 18354  0033C8  0E01               	movlw	1
 18355  0033CA  0101               	movlb	1	; () banked
 18356  0033CC  6F6F               	movwf	___awdiv@counter& (0+255),b
 18357  0033CE  D007               	goto	l8543
 18358  0033D0                     l8541:
 18359                           
 18360                           ; BSR set to: 1
 18361  0033D0  0101               	movlb	1	; () banked
 18362  0033D2  90D8               	bcf	status,0,c
 18363  0033D4  376D               	rlcf	___awdiv@divisor& (0+255),f,b
 18364  0033D6  376E               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 18365  0033D8  0101               	movlb	1	; () banked
 18366  0033DA  2B6F               	incf	___awdiv@counter& (0+255),f,b
 18367  0033DC  D000               	goto	l8543
 18368  0033DE                     l8543:
 18369                           
 18370                           ; BSR set to: 1
 18371  0033DE  0101               	movlb	1	; () banked
 18372  0033E0  BF6E               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
 18373  0033E2  D002               	goto	l8545
 18374  0033E4  D7F5               	goto	l8541
 18375                           
 18376                           ; BSR set to: 1
 18377  0033E6  D000               	goto	l8545
 18378  0033E8                     l8545:
 18379                           
 18380                           ; BSR set to: 1
 18381  0033E8  0101               	movlb	1	; () banked
 18382  0033EA  90D8               	bcf	status,0,c
 18383  0033EC  3771               	rlcf	___awdiv@quotient& (0+255),f,b
 18384  0033EE  3772               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 18385                           
 18386                           ; BSR set to: 1
 18387  0033F0  0101               	movlb	1	; () banked
 18388  0033F2  516D               	movf	___awdiv@divisor& (0+255),w,b
 18389  0033F4  0101               	movlb	1	; () banked
 18390  0033F6  5D6B               	subwf	___awdiv@dividend& (0+255),w,b
 18391  0033F8  0101               	movlb	1	; () banked
 18392  0033FA  516E               	movf	(___awdiv@divisor+1)& (0+255),w,b
 18393  0033FC  0101               	movlb	1	; () banked
 18394  0033FE  596C               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 18395  003400  A0D8               	btfss	status,0,c
 18396  003402  D00B               	goto	l8553
 18397                           
 18398                           ; BSR set to: 1
 18399  003404  0101               	movlb	1	; () banked
 18400  003406  516D               	movf	___awdiv@divisor& (0+255),w,b
 18401  003408  0101               	movlb	1	; () banked
 18402  00340A  5F6B               	subwf	___awdiv@dividend& (0+255),f,b
 18403  00340C  0101               	movlb	1	; () banked
 18404  00340E  516E               	movf	(___awdiv@divisor+1)& (0+255),w,b
 18405  003410  0101               	movlb	1	; () banked
 18406  003412  5B6C               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 18407                           
 18408                           ; BSR set to: 1
 18409  003414  0101               	movlb	1	; () banked
 18410  003416  8171               	bsf	___awdiv@quotient& (0+255),0,b
 18411  003418  D000               	goto	l8553
 18412  00341A                     l8553:
 18413                           
 18414                           ; BSR set to: 1
 18415  00341A  0101               	movlb	1	; () banked
 18416  00341C  90D8               	bcf	status,0,c
 18417  00341E  336E               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 18418  003420  336D               	rrcf	___awdiv@divisor& (0+255),f,b
 18419                           
 18420                           ; BSR set to: 1
 18421  003422  0101               	movlb	1	; () banked
 18422  003424  2F6F               	decfsz	___awdiv@counter& (0+255),f,b
 18423  003426  D7E0               	goto	l8545
 18424                           
 18425                           ; BSR set to: 1
 18426  003428  D000               	goto	l8557
 18427  00342A                     l8557:
 18428                           
 18429                           ; BSR set to: 1
 18430  00342A  0101               	movlb	1	; () banked
 18431  00342C  5170               	movf	___awdiv@sign& (0+255),w,b
 18432  00342E  0101               	movlb	1	; () banked
 18433  003430  B4D8               	btfsc	status,2,c
 18434  003432  D006               	goto	l8561
 18435                           
 18436                           ; BSR set to: 1
 18437  003434  0101               	movlb	1	; () banked
 18438  003436  6D71               	negf	___awdiv@quotient& (0+255),b
 18439  003438  1F72               	comf	(___awdiv@quotient+1)& (0+255),f,b
 18440  00343A  B0D8               	btfsc	status,0,c
 18441  00343C  2B72               	incf	(___awdiv@quotient+1)& (0+255),f,b
 18442  00343E  D000               	goto	l8561
 18443  003440                     l8561:
 18444                           
 18445                           ; BSR set to: 1
 18446  003440  C171  F16B         	movff	___awdiv@quotient,?___awdiv
 18447  003444  C172  F16C         	movff	___awdiv@quotient+1,?___awdiv+1
 18448  003448  D000               	goto	l1664
 18449  00344A                     l1664:
 18450                           
 18451                           ; BSR set to: 1
 18452  00344A  0012               	return		;funcret
 18453  00344C                     __end_of___awdiv:
 18454                           	opt stack 0
 18455                           tblptru	equ	0xFF8
 18456                           tblptrh	equ	0xFF7
 18457                           tblptrl	equ	0xFF6
 18458                           tablat	equ	0xFF5
 18459                           prodh	equ	0xFF4
 18460                           prodl	equ	0xFF3
 18461                           intcon	equ	0xFF2
 18462                           intcon2	equ	0xFF1
 18463                           postinc0	equ	0xFEE
 18464                           wreg	equ	0xFE8
 18465                           postdec1	equ	0xFE5
 18466                           fsr1l	equ	0xFE1
 18467                           indf2	equ	0xFDF
 18468                           postinc2	equ	0xFDE
 18469                           postdec2	equ	0xFDD
 18470                           fsr2h	equ	0xFDA
 18471                           fsr2l	equ	0xFD9
 18472                           status	equ	0xFD8
 18473                           
 18474 ;; *************** function _Do_Init *****************
 18475 ;; Defined at:
 18476 ;;		line 95 in file "Main.c"
 18477 ;; Parameters:    Size  Location     Type
 18478 ;;		None
 18479 ;; Auto vars:     Size  Location     Type
 18480 ;;		None
 18481 ;; Return value:  Size  Location     Type
 18482 ;;		None               void
 18483 ;; Registers used:
 18484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18485 ;; Tracked objects:
 18486 ;;		On entry : 0/0
 18487 ;;		On exit  : 0/0
 18488 ;;		Unchanged: 0/0
 18489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;Total ram usage:        0 bytes
 18495 ;; Hardware stack levels used:    1
 18496 ;; Hardware stack levels required when called:    9
 18497 ;; This function calls:
 18498 ;;		_DS1621_Init
 18499 ;;		_DS3231_Init
 18500 ;;		_I2C_Init
 18501 ;;		_Init_ADC
 18502 ;;		_Init_Interrupt
 18503 ;;		_Set_RGB_Color
 18504 ;;		_Turn_Off_Fan
 18505 ;;		_init_UART
 18506 ;; This function is called by:
 18507 ;;		_main
 18508 ;; This function uses a non-reentrant model
 18509 ;;
 18510                           
 18511                           	psect	text89
 18512  003F40                     __ptext89:
 18513                           	opt stack 0
 18514  003F40                     _Do_Init:
 18515                           	opt stack 21
 18516                           
 18517                           ;Main.c: 97: init_UART();
 18518                           
 18519                           ; BSR set to: 1
 18520                           ;incstack = 0
 18521  003F40  EC38  F026         	call	_init_UART	;wreg free
 18522                           
 18523                           ;Main.c: 98: Init_ADC();
 18524  003F44  ECDA  F026         	call	_Init_ADC	;wreg free
 18525                           
 18526                           ;Main.c: 99: OSCCON=0x70;
 18527  003F48  0E70               	movlw	112
 18528  003F4A  6ED3               	movwf	4051,c	;volatile
 18529                           
 18530                           ;Main.c: 101: ADCON1= 0x0E;
 18531  003F4C  0E0E               	movlw	14
 18532  003F4E  6EC1               	movwf	4033,c	;volatile
 18533                           
 18534                           ;Main.c: 102: TRISA = 0x01;
 18535  003F50  0E01               	movlw	1
 18536  003F52  6E92               	movwf	3986,c	;volatile
 18537                           
 18538                           ;Main.c: 103: TRISB = 0x17;
 18539  003F54  0E17               	movlw	23
 18540  003F56  6E93               	movwf	3987,c	;volatile
 18541                           
 18542                           ;Main.c: 104: TRISC = 0x01;
 18543  003F58  0E01               	movlw	1
 18544  003F5A  6E94               	movwf	3988,c	;volatile
 18545                           
 18546                           ;Main.c: 105: TRISD = 0x00;
 18547  003F5C  0E00               	movlw	0
 18548  003F5E  6E95               	movwf	3989,c	;volatile
 18549                           
 18550                           ;Main.c: 106: TRISE = 0x00;
 18551  003F60  0E00               	movlw	0
 18552  003F62  6E96               	movwf	3990,c	;volatile
 18553                           
 18554                           ;Main.c: 107: PORTE = 0x00;
 18555  003F64  0E00               	movlw	0
 18556  003F66  6E84               	movwf	3972,c	;volatile
 18557                           
 18558                           ;Main.c: 109: HEATER = 0;
 18559  003F68  0E00               	movlw	0
 18560  003F6A  6E45               	movwf	_HEATER,c
 18561                           
 18562                           ;Main.c: 110: RBPU=0;
 18563  003F6C  9EF1               	bcf	intcon2,7,c	;volatile
 18564                           
 18565                           ;Main.c: 112: TMR3L = 0x00;
 18566  003F6E  0E00               	movlw	0
 18567  003F70  6EB2               	movwf	4018,c	;volatile
 18568                           
 18569                           ;Main.c: 113: T3CON = 0x03;
 18570  003F72  0E03               	movlw	3
 18571  003F74  6EB1               	movwf	4017,c	;volatile
 18572                           
 18573                           ;Main.c: 114: I2C_Init(100000);
 18574  003F76  0EA0               	movlw	160
 18575  003F78  0100               	movlb	0	; () banked
 18576  003F7A  6FCD               	movwf	I2C_Init@c& (0+255),b
 18577  003F7C  0E86               	movlw	134
 18578  003F7E  6FCE               	movwf	(I2C_Init@c+1)& (0+255),b
 18579  003F80  0E01               	movlw	1
 18580  003F82  6FCF               	movwf	(I2C_Init@c+2)& (0+255),b
 18581  003F84  0E00               	movlw	0
 18582  003F86  6FD0               	movwf	(I2C_Init@c+3)& (0+255),b
 18583  003F88  ECFA  F026         	call	_I2C_Init	;wreg free
 18584                           
 18585                           ;Main.c: 116: DS1621_Init();
 18586  003F8C  ECF0  F024         	call	_DS1621_Init	;wreg free
 18587                           
 18588                           ;Main.c: 117: DS3231_Init();
 18589  003F90  EC53  F019         	call	_DS3231_Init	;wreg free
 18590                           
 18591                           ;Main.c: 118: Init_Interrupt();
 18592  003F94  EC55  F025         	call	_Init_Interrupt	;wreg free
 18593                           
 18594                           ;Main.c: 120: Turn_Off_Fan();
 18595  003F98  ECE8  F026         	call	_Turn_Off_Fan	;wreg free
 18596                           
 18597                           ;Main.c: 121: heater_set_temp = 75;
 18598  003F9C  0E4B               	movlw	75
 18599  003F9E  6E57               	movwf	_heater_set_temp,c
 18600                           
 18601                           ;Main.c: 124: FAN = 0;
 18602  003FA0  0E00               	movlw	0
 18603  003FA2  6E44               	movwf	_FAN,c
 18604                           
 18605                           ;Main.c: 125: ALARMEN = 0;
 18606  003FA4  0E00               	movlw	0
 18607  003FA6  0100               	movlb	0	; () banked
 18608  003FA8  6FEB               	movwf	(_ALARMEN+1)& (0+255),b
 18609  003FAA  0E00               	movlw	0
 18610  003FAC  6FEA               	movwf	_ALARMEN& (0+255),b
 18611                           
 18612                           ; BSR set to: 0
 18613                           ;Main.c: 126: Set_RGB_Color(0);
 18614  003FAE  0E00               	movlw	0
 18615  003FB0  ECA9  F025         	call	_Set_RGB_Color
 18616  003FB4  0012               	return		;funcret
 18617  003FB6                     __end_of_Do_Init:
 18618                           	opt stack 0
 18619                           tblptru	equ	0xFF8
 18620                           tblptrh	equ	0xFF7
 18621                           tblptrl	equ	0xFF6
 18622                           tablat	equ	0xFF5
 18623                           prodh	equ	0xFF4
 18624                           prodl	equ	0xFF3
 18625                           intcon	equ	0xFF2
 18626                           intcon2	equ	0xFF1
 18627                           postinc0	equ	0xFEE
 18628                           wreg	equ	0xFE8
 18629                           postdec1	equ	0xFE5
 18630                           fsr1l	equ	0xFE1
 18631                           indf2	equ	0xFDF
 18632                           postinc2	equ	0xFDE
 18633                           postdec2	equ	0xFDD
 18634                           fsr2h	equ	0xFDA
 18635                           fsr2l	equ	0xFD9
 18636                           status	equ	0xFD8
 18637                           
 18638 ;; *************** function _init_UART *****************
 18639 ;; Defined at:
 18640 ;;		line 87 in file "Main.c"
 18641 ;; Parameters:    Size  Location     Type
 18642 ;;		None
 18643 ;; Auto vars:     Size  Location     Type
 18644 ;;		None
 18645 ;; Return value:  Size  Location     Type
 18646 ;;		None               void
 18647 ;; Registers used:
 18648 ;;		wreg, status,2, cstack
 18649 ;; Tracked objects:
 18650 ;;		On entry : 0/0
 18651 ;;		On exit  : 0/0
 18652 ;;		Unchanged: 0/0
 18653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18658 ;;Total ram usage:        0 bytes
 18659 ;; Hardware stack levels used:    1
 18660 ;; Hardware stack levels required when called:    5
 18661 ;; This function calls:
 18662 ;;		_OpenUSART
 18663 ;; This function is called by:
 18664 ;;		_Do_Init
 18665 ;; This function uses a non-reentrant model
 18666 ;;
 18667                           
 18668                           	psect	text90
 18669  004C70                     __ptext90:
 18670                           	opt stack 0
 18671  004C70                     _init_UART:
 18672                           	opt stack 24
 18673                           
 18674                           ;Main.c: 89: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11111111, 25);
 18675                           
 18676                           ;incstack = 0
 18677  004C70  0E00               	movlw	0
 18678  004C72  0100               	movlb	0	; () banked
 18679  004C74  6FCE               	movwf	(OpenUSART@spbrg+1)& (0+255),b
 18680  004C76  0E19               	movlw	25
 18681  004C78  6FCD               	movwf	OpenUSART@spbrg& (0+255),b
 18682  004C7A  0E3C               	movlw	60
 18683  004C7C  ECDF  F01E         	call	_OpenUSART
 18684                           
 18685                           ;Main.c: 90: OSCCON = 0x70;
 18686  004C80  0E70               	movlw	112
 18687  004C82  6ED3               	movwf	4051,c	;volatile
 18688  004C84  0012               	return		;funcret
 18689  004C86                     __end_of_init_UART:
 18690                           	opt stack 0
 18691                           tblptru	equ	0xFF8
 18692                           tblptrh	equ	0xFF7
 18693                           tblptrl	equ	0xFF6
 18694                           tablat	equ	0xFF5
 18695                           prodh	equ	0xFF4
 18696                           prodl	equ	0xFF3
 18697                           intcon	equ	0xFF2
 18698                           intcon2	equ	0xFF1
 18699                           postinc0	equ	0xFEE
 18700                           wreg	equ	0xFE8
 18701                           postdec1	equ	0xFE5
 18702                           fsr1l	equ	0xFE1
 18703                           indf2	equ	0xFDF
 18704                           postinc2	equ	0xFDE
 18705                           postdec2	equ	0xFDD
 18706                           fsr2h	equ	0xFDA
 18707                           fsr2l	equ	0xFD9
 18708                           status	equ	0xFD8
 18709                           
 18710 ;; *************** function _OpenUSART *****************
 18711 ;; Defined at:
 18712 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 18713 ;; Parameters:    Size  Location     Type
 18714 ;;  config          1    wreg     unsigned char 
 18715 ;;  spbrg           2    0[BANK0 ] unsigned int 
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;  config          1    2[BANK0 ] unsigned char 
 18718 ;; Return value:  Size  Location     Type
 18719 ;;		None               void
 18720 ;; Registers used:
 18721 ;;		wreg, status,2
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/0
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18727 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18730 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18731 ;;Total ram usage:        3 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    4
 18734 ;; This function calls:
 18735 ;;		Nothing
 18736 ;; This function is called by:
 18737 ;;		_init_UART
 18738 ;; This function uses a non-reentrant model
 18739 ;;
 18740                           
 18741                           	psect	text91
 18742  003DBE                     __ptext91:
 18743                           	opt stack 0
 18744  003DBE                     _OpenUSART:
 18745                           	opt stack 24
 18746                           
 18747                           ;incstack = 0
 18748                           ;OpenUSART@config stored from wreg
 18749  003DBE  0100               	movlb	0	; () banked
 18750  003DC0  6FCF               	movwf	OpenUSART@config& (0+255),b
 18751                           
 18752                           ; BSR set to: 0
 18753  003DC2  0E00               	movlw	0
 18754  003DC4  6EAC               	movwf	4012,c	;volatile
 18755  003DC6  0E00               	movlw	0
 18756  003DC8  6EAB               	movwf	4011,c	;volatile
 18757                           
 18758                           ; BSR set to: 0
 18759  003DCA  0100               	movlb	0	; () banked
 18760  003DCC  A1CF               	btfss	OpenUSART@config& (0+255),0,b
 18761  003DCE  D002               	goto	l9257
 18762                           
 18763                           ; BSR set to: 0
 18764  003DD0  88AC               	bsf	4012,4,c	;volatile
 18765  003DD2  D000               	goto	l9257
 18766  003DD4                     l9257:
 18767                           
 18768                           ; BSR set to: 0
 18769  003DD4  0100               	movlb	0	; () banked
 18770  003DD6  A3CF               	btfss	OpenUSART@config& (0+255),1,b
 18771  003DD8  D003               	goto	l9261
 18772                           
 18773                           ; BSR set to: 0
 18774  003DDA  8CAC               	bsf	4012,6,c	;volatile
 18775  003DDC  8CAB               	bsf	4011,6,c	;volatile
 18776  003DDE  D000               	goto	l9261
 18777  003DE0                     l9261:
 18778                           
 18779                           ; BSR set to: 0
 18780  003DE0  0100               	movlb	0	; () banked
 18781  003DE2  A5CF               	btfss	OpenUSART@config& (0+255),2,b
 18782  003DE4  D002               	goto	l9265
 18783                           
 18784                           ; BSR set to: 0
 18785  003DE6  8EAC               	bsf	4012,7,c	;volatile
 18786  003DE8  D000               	goto	l9265
 18787  003DEA                     l9265:
 18788                           
 18789                           ; BSR set to: 0
 18790  003DEA  0100               	movlb	0	; () banked
 18791  003DEC  A7CF               	btfss	OpenUSART@config& (0+255),3,b
 18792  003DEE  D002               	goto	l1459
 18793                           
 18794                           ; BSR set to: 0
 18795  003DF0  88AB               	bsf	4011,4,c	;volatile
 18796  003DF2  D002               	goto	l9269
 18797  003DF4                     l1459:
 18798                           
 18799                           ; BSR set to: 0
 18800  003DF4  8AAB               	bsf	4011,5,c	;volatile
 18801  003DF6  D000               	goto	l9269
 18802  003DF8                     l9269:
 18803                           
 18804                           ; BSR set to: 0
 18805  003DF8  0100               	movlb	0	; () banked
 18806  003DFA  B9CF               	btfsc	OpenUSART@config& (0+255),4,b
 18807                           
 18808                           ; BSR set to: 0
 18809  003DFC  84AC               	bsf	4012,2,c	;volatile
 18810                           
 18811                           ; BSR set to: 0
 18812  003DFE  989E               	bcf	3998,4,c	;volatile
 18813                           
 18814                           ; BSR set to: 0
 18815  003E00  0100               	movlb	0	; () banked
 18816  003E02  ABCF               	btfss	OpenUSART@config& (0+255),5,b
 18817  003E04  D002               	goto	l9277
 18818                           
 18819                           ; BSR set to: 0
 18820  003E06  86AB               	bsf	4011,3,c	;volatile
 18821  003E08  D000               	goto	l9277
 18822  003E0A                     l9277:
 18823                           
 18824                           ; BSR set to: 0
 18825  003E0A  0100               	movlb	0	; () banked
 18826  003E0C  ADCF               	btfss	OpenUSART@config& (0+255),6,b
 18827  003E0E  D002               	goto	l1463
 18828                           
 18829                           ; BSR set to: 0
 18830  003E10  8A9D               	bsf	3997,5,c	;volatile
 18831  003E12  D001               	goto	l1464
 18832  003E14                     l1463:
 18833                           
 18834                           ; BSR set to: 0
 18835  003E14  9A9D               	bcf	3997,5,c	;volatile
 18836  003E16                     l1464:
 18837                           
 18838                           ; BSR set to: 0
 18839  003E16  9A9E               	bcf	3998,5,c	;volatile
 18840                           
 18841                           ; BSR set to: 0
 18842  003E18  0100               	movlb	0	; () banked
 18843  003E1A  AFCF               	btfss	OpenUSART@config& (0+255),7,b
 18844  003E1C  D002               	goto	l1465
 18845                           
 18846                           ; BSR set to: 0
 18847  003E1E  889D               	bsf	3997,4,c	;volatile
 18848  003E20  D001               	goto	l1466
 18849  003E22                     l1465:
 18850                           
 18851                           ; BSR set to: 0
 18852  003E22  989D               	bcf	3997,4,c	;volatile
 18853  003E24                     l1466:
 18854                           
 18855                           ; BSR set to: 0
 18856  003E24  C0CD  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 18857                           
 18858                           ; BSR set to: 0
 18859  003E28  0100               	movlb	0	; () banked
 18860  003E2A  51CE               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 18861  003E2C  6EB0               	movwf	4016,c	;volatile
 18862                           
 18863                           ; BSR set to: 0
 18864  003E2E  8AAC               	bsf	4012,5,c	;volatile
 18865                           
 18866                           ; BSR set to: 0
 18867  003E30  8EAB               	bsf	4011,7,c	;volatile
 18868                           
 18869                           ; BSR set to: 0
 18870  003E32  9C94               	bcf	3988,6,c	;volatile
 18871                           
 18872                           ; BSR set to: 0
 18873  003E34  8E94               	bsf	3988,7,c	;volatile
 18874                           
 18875                           ; BSR set to: 0
 18876  003E36  B8AC               	btfsc	4012,4,c	;volatile
 18877                           
 18878                           ; BSR set to: 0
 18879  003E38  BEAC               	btfsc	4012,7,c	;volatile
 18880  003E3A  D002               	goto	l1468
 18881                           
 18882                           ; BSR set to: 0
 18883  003E3C  8C94               	bsf	3988,6,c	;volatile
 18884  003E3E  D000               	goto	l1468
 18885  003E40                     l1468:
 18886                           
 18887                           ; BSR set to: 0
 18888  003E40  0012               	return		;funcret
 18889  003E42                     __end_of_OpenUSART:
 18890                           	opt stack 0
 18891                           tblptru	equ	0xFF8
 18892                           tblptrh	equ	0xFF7
 18893                           tblptrl	equ	0xFF6
 18894                           tablat	equ	0xFF5
 18895                           prodh	equ	0xFF4
 18896                           prodl	equ	0xFF3
 18897                           intcon	equ	0xFF2
 18898                           intcon2	equ	0xFF1
 18899                           postinc0	equ	0xFEE
 18900                           wreg	equ	0xFE8
 18901                           postdec1	equ	0xFE5
 18902                           fsr1l	equ	0xFE1
 18903                           indf2	equ	0xFDF
 18904                           postinc2	equ	0xFDE
 18905                           postdec2	equ	0xFDD
 18906                           fsr2h	equ	0xFDA
 18907                           fsr2l	equ	0xFD9
 18908                           status	equ	0xFD8
 18909                           
 18910 ;; *************** function _Turn_Off_Fan *****************
 18911 ;; Defined at:
 18912 ;;		line 64 in file "Fan_Support.c"
 18913 ;; Parameters:    Size  Location     Type
 18914 ;;		None
 18915 ;; Auto vars:     Size  Location     Type
 18916 ;;		None
 18917 ;; Return value:  Size  Location     Type
 18918 ;;		None               void
 18919 ;; Registers used:
 18920 ;;		wreg, status,2
 18921 ;; Tracked objects:
 18922 ;;		On entry : 0/0
 18923 ;;		On exit  : 0/0
 18924 ;;		Unchanged: 0/0
 18925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18930 ;;Total ram usage:        0 bytes
 18931 ;; Hardware stack levels used:    1
 18932 ;; Hardware stack levels required when called:    4
 18933 ;; This function calls:
 18934 ;;		Nothing
 18935 ;; This function is called by:
 18936 ;;		_Do_Init
 18937 ;; This function uses a non-reentrant model
 18938 ;;
 18939                           
 18940                           	psect	text92
 18941  004DD0                     __ptext92:
 18942                           	opt stack 0
 18943  004DD0                     _Turn_Off_Fan:
 18944                           	opt stack 25
 18945                           
 18946                           ;Fan_Support.c: 66: FAN = 0;
 18947                           
 18948                           ; BSR set to: 0
 18949                           ;incstack = 0
 18950  004DD0  0E00               	movlw	0
 18951  004DD2  6E44               	movwf	_FAN,c
 18952                           
 18953                           ;Fan_Support.c: 67: HEATER = 0;
 18954  004DD4  0E00               	movlw	0
 18955  004DD6  6E45               	movwf	_HEATER,c
 18956                           
 18957                           ;Fan_Support.c: 68: PORTEbits.RE1 = 0;
 18958  004DD8  9284               	bcf	3972,1,c	;volatile
 18959  004DDA  0012               	return		;funcret
 18960  004DDC                     __end_of_Turn_Off_Fan:
 18961                           	opt stack 0
 18962                           tblptru	equ	0xFF8
 18963                           tblptrh	equ	0xFF7
 18964                           tblptrl	equ	0xFF6
 18965                           tablat	equ	0xFF5
 18966                           prodh	equ	0xFF4
 18967                           prodl	equ	0xFF3
 18968                           intcon	equ	0xFF2
 18969                           intcon2	equ	0xFF1
 18970                           postinc0	equ	0xFEE
 18971                           wreg	equ	0xFE8
 18972                           postdec1	equ	0xFE5
 18973                           fsr1l	equ	0xFE1
 18974                           indf2	equ	0xFDF
 18975                           postinc2	equ	0xFDE
 18976                           postdec2	equ	0xFDD
 18977                           fsr2h	equ	0xFDA
 18978                           fsr2l	equ	0xFD9
 18979                           status	equ	0xFD8
 18980                           
 18981 ;; *************** function _Set_RGB_Color *****************
 18982 ;; Defined at:
 18983 ;;		line 150 in file "utils.c"
 18984 ;; Parameters:    Size  Location     Type
 18985 ;;  color           1    wreg     unsigned char 
 18986 ;; Auto vars:     Size  Location     Type
 18987 ;;  color           1    2[BANK0 ] unsigned char 
 18988 ;; Return value:  Size  Location     Type
 18989 ;;		None               void
 18990 ;; Registers used:
 18991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18992 ;; Tracked objects:
 18993 ;;		On entry : 0/0
 18994 ;;		On exit  : 0/0
 18995 ;;		Unchanged: 0/0
 18996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19000 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19001 ;;Total ram usage:        1 bytes
 19002 ;; Hardware stack levels used:    1
 19003 ;; Hardware stack levels required when called:    5
 19004 ;; This function calls:
 19005 ;;		_Wait_One_Sec
 19006 ;; This function is called by:
 19007 ;;		_Do_Init
 19008 ;;		_Test_Alarm
 19009 ;; This function uses a non-reentrant model
 19010 ;;
 19011                           
 19012                           	psect	text93
 19013  004B52                     __ptext93:
 19014                           	opt stack 0
 19015  004B52                     _Set_RGB_Color:
 19016                           	opt stack 24
 19017                           
 19018                           ;incstack = 0
 19019                           ;Set_RGB_Color@color stored from wreg
 19020  004B52  0100               	movlb	0	; () banked
 19021  004B54  6FCF               	movwf	Set_RGB_Color@color& (0+255),b
 19022                           
 19023                           ; BSR set to: 0
 19024                           ;utils.c: 153: PORTA = colors[color];
 19025  004B56  0100               	movlb	0	; () banked
 19026  004B58  51CF               	movf	Set_RGB_Color@color& (0+255),w,b
 19027  004B5A  0D01               	mullw	1
 19028  004B5C  0E80               	movlw	low _colors
 19029  004B5E  24F3               	addwf	prodl,w,c
 19030  004B60  6ED9               	movwf	fsr2l,c
 19031  004B62  0E00               	movlw	high _colors
 19032  004B64  20F4               	addwfc	prodh,w,c
 19033  004B66  6EDA               	movwf	fsr2h,c
 19034  004B68  50DF               	movf	indf2,w,c
 19035  004B6A  6E80               	movwf	3968,c	;volatile
 19036                           
 19037                           ; BSR set to: 0
 19038                           ;utils.c: 154: Wait_One_Sec();
 19039  004B6C  EC05  F025         	call	_Wait_One_Sec	;wreg free
 19040  004B70  0012               	return		;funcret
 19041  004B72                     __end_of_Set_RGB_Color:
 19042                           	opt stack 0
 19043                           tblptru	equ	0xFF8
 19044                           tblptrh	equ	0xFF7
 19045                           tblptrl	equ	0xFF6
 19046                           tablat	equ	0xFF5
 19047                           prodh	equ	0xFF4
 19048                           prodl	equ	0xFF3
 19049                           intcon	equ	0xFF2
 19050                           intcon2	equ	0xFF1
 19051                           postinc0	equ	0xFEE
 19052                           wreg	equ	0xFE8
 19053                           postdec1	equ	0xFE5
 19054                           fsr1l	equ	0xFE1
 19055                           indf2	equ	0xFDF
 19056                           postinc2	equ	0xFDE
 19057                           postdec2	equ	0xFDD
 19058                           fsr2h	equ	0xFDA
 19059                           fsr2l	equ	0xFD9
 19060                           status	equ	0xFD8
 19061                           
 19062 ;; *************** function _Wait_One_Sec *****************
 19063 ;; Defined at:
 19064 ;;		line 91 in file "utils.c"
 19065 ;; Parameters:    Size  Location     Type
 19066 ;;		None
 19067 ;; Auto vars:     Size  Location     Type
 19068 ;;  k               2    0[BANK0 ] int 
 19069 ;; Return value:  Size  Location     Type
 19070 ;;		None               void
 19071 ;; Registers used:
 19072 ;;		wreg, status,2, status,0
 19073 ;; Tracked objects:
 19074 ;;		On entry : 0/0
 19075 ;;		On exit  : 0/0
 19076 ;;		Unchanged: 0/0
 19077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19079 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19081 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19082 ;;Total ram usage:        2 bytes
 19083 ;; Hardware stack levels used:    1
 19084 ;; Hardware stack levels required when called:    4
 19085 ;; This function calls:
 19086 ;;		Nothing
 19087 ;; This function is called by:
 19088 ;;		_Do_Beep_Good
 19089 ;;		_Do_Beep_Bad
 19090 ;;		_Set_RGB_Color
 19091 ;;		_Do_Beep
 19092 ;; This function uses a non-reentrant model
 19093 ;;
 19094                           
 19095                           	psect	text94
 19096  004A0A                     __ptext94:
 19097                           	opt stack 0
 19098  004A0A                     _Wait_One_Sec:
 19099                           	opt stack 24
 19100                           
 19101                           ;utils.c: 93: for (int k=0;k<0xffff;k++);
 19102                           
 19103                           ;incstack = 0
 19104  004A0A  0E00               	movlw	0
 19105  004A0C  0100               	movlb	0	; () banked
 19106  004A0E  6FCE               	movwf	(Wait_One_Sec@k+1)& (0+255),b
 19107  004A10  0E00               	movlw	0
 19108  004A12  6FCD               	movwf	Wait_One_Sec@k& (0+255),b
 19109  004A14                     l9437:
 19110                           
 19111                           ; BSR set to: 0
 19112  004A14  0100               	movlb	0	; () banked
 19113  004A16  29CD               	incf	Wait_One_Sec@k& (0+255),w,b
 19114  004A18  E106               	bnz	l9441
 19115  004A1A  0100               	movlb	0	; () banked
 19116  004A1C  29CE               	incf	(Wait_One_Sec@k+1)& (0+255),w,b
 19117  004A1E  B4D8               	btfsc	status,2,c
 19118  004A20  D007               	goto	l1116
 19119  004A22  D001               	goto	l9441
 19120                           
 19121                           ; BSR set to: 0
 19122  004A24  D005               	goto	l1116
 19123  004A26                     l9441:
 19124                           
 19125                           ; BSR set to: 0
 19126  004A26  0100               	movlb	0	; () banked
 19127  004A28  4BCD               	infsnz	Wait_One_Sec@k& (0+255),f,b
 19128  004A2A  2BCE               	incf	(Wait_One_Sec@k+1)& (0+255),f,b
 19129  004A2C  D7F3               	goto	l9437
 19130                           
 19131                           ; BSR set to: 0
 19132  004A2E  D7FB               	goto	l9441
 19133  004A30                     l1116:
 19134                           
 19135                           ; BSR set to: 0
 19136  004A30  0012               	return		;funcret
 19137  004A32                     __end_of_Wait_One_Sec:
 19138                           	opt stack 0
 19139                           tblptru	equ	0xFF8
 19140                           tblptrh	equ	0xFF7
 19141                           tblptrl	equ	0xFF6
 19142                           tablat	equ	0xFF5
 19143                           prodh	equ	0xFF4
 19144                           prodl	equ	0xFF3
 19145                           intcon	equ	0xFF2
 19146                           intcon2	equ	0xFF1
 19147                           postinc0	equ	0xFEE
 19148                           wreg	equ	0xFE8
 19149                           postdec1	equ	0xFE5
 19150                           fsr1l	equ	0xFE1
 19151                           indf2	equ	0xFDF
 19152                           postinc2	equ	0xFDE
 19153                           postdec2	equ	0xFDD
 19154                           fsr2h	equ	0xFDA
 19155                           fsr2l	equ	0xFD9
 19156                           status	equ	0xFD8
 19157                           
 19158 ;; *************** function _Init_Interrupt *****************
 19159 ;; Defined at:
 19160 ;;		line 17 in file "Interrupt.c"
 19161 ;; Parameters:    Size  Location     Type
 19162 ;;		None
 19163 ;; Auto vars:     Size  Location     Type
 19164 ;;		None
 19165 ;; Return value:  Size  Location     Type
 19166 ;;		None               void
 19167 ;; Registers used:
 19168 ;;		wreg, status,2
 19169 ;; Tracked objects:
 19170 ;;		On entry : 0/0
 19171 ;;		On exit  : 0/0
 19172 ;;		Unchanged: 0/0
 19173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19178 ;;Total ram usage:        0 bytes
 19179 ;; Hardware stack levels used:    1
 19180 ;; Hardware stack levels required when called:    4
 19181 ;; This function calls:
 19182 ;;		Nothing
 19183 ;; This function is called by:
 19184 ;;		_Do_Init
 19185 ;; This function uses a non-reentrant model
 19186 ;;
 19187                           
 19188                           	psect	text95
 19189  004AAA                     __ptext95:
 19190                           	opt stack 0
 19191  004AAA                     _Init_Interrupt:
 19192                           	opt stack 25
 19193                           
 19194                           ;Interrupt.c: 21: INTCONbits.INT0IF = 0 ;
 19195                           
 19196                           ; BSR set to: 0
 19197                           ;incstack = 0
 19198  004AAA  92F2               	bcf	intcon,1,c	;volatile
 19199                           
 19200                           ;Interrupt.c: 22: INTCON3bits.INT1IF = 0;
 19201  004AAC  90F0               	bcf	intcon3,0,c	;volatile
 19202                           
 19203                           ;Interrupt.c: 23: INTCON3bits.INT2IF = 0;
 19204  004AAE  92F0               	bcf	intcon3,1,c	;volatile
 19205                           
 19206                           ;Interrupt.c: 24: INTCONbits.INT0IE = 1;
 19207  004AB0  88F2               	bsf	intcon,4,c	;volatile
 19208                           
 19209                           ;Interrupt.c: 25: INTCON3bits.INT1IE = 1;
 19210  004AB2  86F0               	bsf	intcon3,3,c	;volatile
 19211                           
 19212                           ;Interrupt.c: 26: INTCON3bits.INT2IE = 1;
 19213  004AB4  88F0               	bsf	intcon3,4,c	;volatile
 19214                           
 19215                           ;Interrupt.c: 27: INTCON2bits.INTEDG0 = 0;
 19216  004AB6  9CF1               	bcf	intcon2,6,c	;volatile
 19217                           
 19218                           ;Interrupt.c: 28: INTCON2bits.INTEDG1 = 0;
 19219  004AB8  9AF1               	bcf	intcon2,5,c	;volatile
 19220                           
 19221                           ;Interrupt.c: 29: INTCON2bits.INTEDG2 = 0;
 19222  004ABA  98F1               	bcf	intcon2,4,c	;volatile
 19223                           
 19224                           ;Interrupt.c: 30: TMR1H = 0;
 19225  004ABC  0E00               	movlw	0
 19226  004ABE  6ECF               	movwf	4047,c	;volatile
 19227                           
 19228                           ;Interrupt.c: 31: TMR1L = 0;
 19229  004AC0  0E00               	movlw	0
 19230  004AC2  6ECE               	movwf	4046,c	;volatile
 19231                           
 19232                           ;Interrupt.c: 32: PIR1bits.TMR1IF = 0;
 19233  004AC4  909E               	bcf	3998,0,c	;volatile
 19234                           
 19235                           ;Interrupt.c: 33: PIE1bits.TMR1IE = 1;
 19236  004AC6  809D               	bsf	3997,0,c	;volatile
 19237                           
 19238                           ;Interrupt.c: 34: INTCONbits.PEIE = 1;
 19239  004AC8  8CF2               	bsf	intcon,6,c	;volatile
 19240                           
 19241                           ;Interrupt.c: 35: INTCONbits.GIE = 1;
 19242  004ACA  8EF2               	bsf	intcon,7,c	;volatile
 19243  004ACC  0012               	return		;funcret
 19244  004ACE                     __end_of_Init_Interrupt:
 19245                           	opt stack 0
 19246                           tblptru	equ	0xFF8
 19247                           tblptrh	equ	0xFF7
 19248                           tblptrl	equ	0xFF6
 19249                           tablat	equ	0xFF5
 19250                           prodh	equ	0xFF4
 19251                           prodl	equ	0xFF3
 19252                           intcon	equ	0xFF2
 19253                           intcon2	equ	0xFF1
 19254                           intcon3	equ	0xFF0
 19255                           postinc0	equ	0xFEE
 19256                           wreg	equ	0xFE8
 19257                           postdec1	equ	0xFE5
 19258                           fsr1l	equ	0xFE1
 19259                           indf2	equ	0xFDF
 19260                           postinc2	equ	0xFDE
 19261                           postdec2	equ	0xFDD
 19262                           fsr2h	equ	0xFDA
 19263                           fsr2l	equ	0xFD9
 19264                           status	equ	0xFD8
 19265                           
 19266 ;; *************** function _Init_ADC *****************
 19267 ;; Defined at:
 19268 ;;		line 176 in file "utils.c"
 19269 ;; Parameters:    Size  Location     Type
 19270 ;;		None
 19271 ;; Auto vars:     Size  Location     Type
 19272 ;;		None
 19273 ;; Return value:  Size  Location     Type
 19274 ;;		None               void
 19275 ;; Registers used:
 19276 ;;		wreg, status,2
 19277 ;; Tracked objects:
 19278 ;;		On entry : 0/0
 19279 ;;		On exit  : 0/0
 19280 ;;		Unchanged: 0/0
 19281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19286 ;;Total ram usage:        0 bytes
 19287 ;; Hardware stack levels used:    1
 19288 ;; Hardware stack levels required when called:    4
 19289 ;; This function calls:
 19290 ;;		Nothing
 19291 ;; This function is called by:
 19292 ;;		_Do_Init
 19293 ;; This function uses a non-reentrant model
 19294 ;;
 19295                           
 19296                           	psect	text96
 19297  004DB4                     __ptext96:
 19298                           	opt stack 0
 19299  004DB4                     _Init_ADC:
 19300                           	opt stack 25
 19301                           
 19302                           ;utils.c: 179: ADCON0 = 0x01;
 19303                           
 19304                           ;incstack = 0
 19305  004DB4  0E01               	movlw	1
 19306  004DB6  6EC2               	movwf	4034,c	;volatile
 19307                           
 19308                           ;utils.c: 180: ADCON1 = 0x0E;
 19309  004DB8  0E0E               	movlw	14
 19310  004DBA  6EC1               	movwf	4033,c	;volatile
 19311                           
 19312                           ;utils.c: 181: ADCON2 = 0xA9;
 19313  004DBC  0EA9               	movlw	169
 19314  004DBE  6EC0               	movwf	4032,c	;volatile
 19315  004DC0  0012               	return		;funcret
 19316  004DC2                     __end_of_Init_ADC:
 19317                           	opt stack 0
 19318                           tblptru	equ	0xFF8
 19319                           tblptrh	equ	0xFF7
 19320                           tblptrl	equ	0xFF6
 19321                           tablat	equ	0xFF5
 19322                           prodh	equ	0xFF4
 19323                           prodl	equ	0xFF3
 19324                           intcon	equ	0xFF2
 19325                           intcon2	equ	0xFF1
 19326                           intcon3	equ	0xFF0
 19327                           postinc0	equ	0xFEE
 19328                           wreg	equ	0xFE8
 19329                           postdec1	equ	0xFE5
 19330                           fsr1l	equ	0xFE1
 19331                           indf2	equ	0xFDF
 19332                           postinc2	equ	0xFDE
 19333                           postdec2	equ	0xFDD
 19334                           fsr2h	equ	0xFDA
 19335                           fsr2l	equ	0xFD9
 19336                           status	equ	0xFD8
 19337                           
 19338 ;; *************** function _I2C_Init *****************
 19339 ;; Defined at:
 19340 ;;		line 10 in file "I2C.c"
 19341 ;; Parameters:    Size  Location     Type
 19342 ;;  c               4    0[BANK0 ] unsigned long 
 19343 ;; Auto vars:     Size  Location     Type
 19344 ;;		None
 19345 ;; Return value:  Size  Location     Type
 19346 ;;		None               void
 19347 ;; Registers used:
 19348 ;;		wreg, cstack
 19349 ;; Tracked objects:
 19350 ;;		On entry : 0/0
 19351 ;;		On exit  : 0/0
 19352 ;;		Unchanged: 0/0
 19353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19354 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19357 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19358 ;;Total ram usage:        4 bytes
 19359 ;; Hardware stack levels used:    1
 19360 ;; Hardware stack levels required when called:    5
 19361 ;; This function calls:
 19362 ;;		_i2cHighScl
 19363 ;;		_i2cHighSda
 19364 ;; This function is called by:
 19365 ;;		_Do_Init
 19366 ;; This function uses a non-reentrant model
 19367 ;;
 19368                           
 19369                           	psect	text97
 19370  004DF4                     __ptext97:
 19371                           	opt stack 0
 19372  004DF4                     _I2C_Init:
 19373                           	opt stack 24
 19374                           
 19375                           ;I2C.c: 12: i2cHighScl();
 19376                           
 19377                           ;incstack = 0
 19378  004DF4  ECEE  F026         	call	_i2cHighScl	;wreg free
 19379                           
 19380                           ;I2C.c: 13: i2cHighSda();
 19381  004DF8  EC11  F027         	call	_i2cHighSda	;wreg free
 19382  004DFC  0012               	return		;funcret
 19383  004DFE                     __end_of_I2C_Init:
 19384                           	opt stack 0
 19385                           tblptru	equ	0xFF8
 19386                           tblptrh	equ	0xFF7
 19387                           tblptrl	equ	0xFF6
 19388                           tablat	equ	0xFF5
 19389                           prodh	equ	0xFF4
 19390                           prodl	equ	0xFF3
 19391                           intcon	equ	0xFF2
 19392                           intcon2	equ	0xFF1
 19393                           intcon3	equ	0xFF0
 19394                           postinc0	equ	0xFEE
 19395                           wreg	equ	0xFE8
 19396                           postdec1	equ	0xFE5
 19397                           fsr1l	equ	0xFE1
 19398                           indf2	equ	0xFDF
 19399                           postinc2	equ	0xFDE
 19400                           postdec2	equ	0xFDD
 19401                           fsr2h	equ	0xFDA
 19402                           fsr2l	equ	0xFD9
 19403                           status	equ	0xFD8
 19404                           
 19405 ;; *************** function _DS3231_Init *****************
 19406 ;; Defined at:
 19407 ;;		line 132 in file "I2C_Support.c"
 19408 ;; Parameters:    Size  Location     Type
 19409 ;;		None
 19410 ;; Auto vars:     Size  Location     Type
 19411 ;;  Device          1    9[BANK0 ] unsigned char 
 19412 ;;  control_E       1    8[BANK0 ] unsigned char 
 19413 ;;  Address_E       1    7[BANK0 ] unsigned char 
 19414 ;;  Address_7       1    6[BANK0 ] unsigned char 
 19415 ;; Return value:  Size  Location     Type
 19416 ;;		None               void
 19417 ;; Registers used:
 19418 ;;		wreg, status,2, status,0, cstack
 19419 ;; Tracked objects:
 19420 ;;		On entry : 0/0
 19421 ;;		On exit  : 0/0
 19422 ;;		Unchanged: 0/0
 19423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19425 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19427 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19428 ;;Total ram usage:        4 bytes
 19429 ;; Hardware stack levels used:    1
 19430 ;; Hardware stack levels required when called:    8
 19431 ;; This function calls:
 19432 ;;		_I2C_ReStart
 19433 ;;		_I2C_Read
 19434 ;;		_I2C_Start
 19435 ;;		_I2C_Stop
 19436 ;;		_I2C_Write
 19437 ;;		_I2C_Write_Address_Read_One_Byte
 19438 ;;		_I2C_Write_Address_Write_One_Byte
 19439 ;; This function is called by:
 19440 ;;		_DS3231_Turn_Off_Alarm
 19441 ;;		_DS3231_Turn_On_Alarm
 19442 ;;		_Do_Init
 19443 ;; This function uses a non-reentrant model
 19444 ;;
 19445                           
 19446                           	psect	text98
 19447  0032A6                     __ptext98:
 19448                           	opt stack 0
 19449  0032A6                     _DS3231_Init:
 19450                           	opt stack 20
 19451                           
 19452                           ;I2C_Support.c: 134: char Device = 0x68;
 19453                           
 19454                           ;incstack = 0
 19455  0032A6  0E68               	movlw	104
 19456  0032A8  0100               	movlb	0	; () banked
 19457  0032AA  6FD6               	movwf	DS3231_Init@Device& (0+255),b
 19458                           
 19459                           ;I2C_Support.c: 135: char Address_7 = 0x07;
 19460  0032AC  0E07               	movlw	7
 19461  0032AE  0100               	movlb	0	; () banked
 19462  0032B0  6FD3               	movwf	DS3231_Init@Address_7& (0+255),b
 19463                           
 19464                           ;I2C_Support.c: 136: char Address_E = 0x0E;
 19465  0032B2  0E0E               	movlw	14
 19466  0032B4  0100               	movlb	0	; () banked
 19467  0032B6  6FD4               	movwf	DS3231_Init@Address_E& (0+255),b
 19468                           
 19469                           ; BSR set to: 0
 19470                           ;I2C_Support.c: 137: char control_E;
 19471                           ;I2C_Support.c: 139: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
 19472  0032B8  C0D4  F0D0         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
 19473  0032BC  0100               	movlb	0	; () banked
 19474  0032BE  51D6               	movf	DS3231_Init@Device& (0+255),w,b
 19475  0032C0  EC08  F024         	call	_I2C_Write_Address_Read_One_Byte
 19476  0032C4  0100               	movlb	0	; () banked
 19477  0032C6  6FD5               	movwf	DS3231_Init@control_E& (0+255),b
 19478                           
 19479                           ; BSR set to: 0
 19480                           ;I2C_Support.c: 140: control_E = control_E & 0x01;
 19481  0032C8  0100               	movlb	0	; () banked
 19482  0032CA  51D5               	movf	DS3231_Init@control_E& (0+255),w,b
 19483  0032CC  0B01               	andlw	1
 19484  0032CE  0100               	movlb	0	; () banked
 19485  0032D0  6FD5               	movwf	DS3231_Init@control_E& (0+255),b
 19486                           
 19487                           ; BSR set to: 0
 19488                           ;I2C_Support.c: 141: control_E = control_E | 0x25;
 19489  0032D2  0100               	movlb	0	; () banked
 19490  0032D4  51D5               	movf	DS3231_Init@control_E& (0+255),w,b
 19491  0032D6  0925               	iorlw	37
 19492  0032D8  0100               	movlb	0	; () banked
 19493  0032DA  6FD5               	movwf	DS3231_Init@control_E& (0+255),b
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;I2C_Support.c: 142: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
 19497  0032DC  C0D4  F0CF         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
 19498  0032E0  C0D5  F0D0         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
 19499  0032E4  0100               	movlb	0	; () banked
 19500  0032E6  51D6               	movf	DS3231_Init@Device& (0+255),w,b
 19501  0032E8  EC19  F025         	call	_I2C_Write_Address_Write_One_Byte
 19502                           
 19503                           ;I2C_Support.c: 143: I2C_Start();
 19504  0032EC  ECAB  F026         	call	_I2C_Start	;wreg free
 19505                           
 19506                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
 19507  0032F0  0100               	movlb	0	; () banked
 19508  0032F2  51D6               	movf	DS3231_Init@Device& (0+255),w,b
 19509  0032F4  25D6               	addwf	DS3231_Init@Device& (0+255),w,b
 19510  0032F6  EC10  F023         	call	_I2C_Write
 19511                           
 19512                           ;I2C_Support.c: 145: I2C_Write(Address_7);
 19513  0032FA  0100               	movlb	0	; () banked
 19514  0032FC  51D3               	movf	DS3231_Init@Address_7& (0+255),w,b
 19515  0032FE  EC10  F023         	call	_I2C_Write
 19516                           
 19517                           ;I2C_Support.c: 146: I2C_ReStart();
 19518  003302  EC43  F026         	call	_I2C_ReStart	;wreg free
 19519                           
 19520                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
 19521  003306  80D8               	bsf	status,0,c
 19522  003308  0100               	movlb	0	; () banked
 19523  00330A  35D6               	rlcf	DS3231_Init@Device& (0+255),w,b
 19524  00330C  EC10  F023         	call	_I2C_Write
 19525                           
 19526                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
 19527  003310  0E01               	movlw	1
 19528  003312  ECB7  F021         	call	_I2C_Read
 19529  003316  6E52               	movwf	_alarm_second,c
 19530                           
 19531                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
 19532  003318  0E01               	movlw	1
 19533  00331A  ECB7  F021         	call	_I2C_Read
 19534  00331E  6E51               	movwf	_alarm_minute,c
 19535                           
 19536                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
 19537  003320  0E01               	movlw	1
 19538  003322  ECB7  F021         	call	_I2C_Read
 19539  003326  6E50               	movwf	_alarm_hour,c
 19540                           
 19541                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
 19542  003328  0E00               	movlw	0
 19543  00332A  ECB7  F021         	call	_I2C_Read
 19544  00332E  6E4F               	movwf	_alarm_date,c
 19545                           
 19546                           ;I2C_Support.c: 153: alarm_second = alarm_second & 0x7f;
 19547  003330  5052               	movf	_alarm_second,w,c
 19548  003332  0B7F               	andlw	127
 19549  003334  6E52               	movwf	_alarm_second,c
 19550                           
 19551                           ;I2C_Support.c: 154: alarm_minute = alarm_minute & 0x7f;
 19552  003336  5051               	movf	_alarm_minute,w,c
 19553  003338  0B7F               	andlw	127
 19554  00333A  6E51               	movwf	_alarm_minute,c
 19555                           
 19556                           ;I2C_Support.c: 155: alarm_hour = alarm_hour & 0x7f;
 19557  00333C  5050               	movf	_alarm_hour,w,c
 19558  00333E  0B7F               	andlw	127
 19559  003340  6E50               	movwf	_alarm_hour,c
 19560                           
 19561                           ;I2C_Support.c: 156: alarm_date = alarm_date | 0x80;
 19562  003342  504F               	movf	_alarm_date,w,c
 19563  003344  0980               	iorlw	128
 19564  003346  6E4F               	movwf	_alarm_date,c
 19565                           
 19566                           ;I2C_Support.c: 158: I2C_Start();
 19567  003348  ECAB  F026         	call	_I2C_Start	;wreg free
 19568                           
 19569                           ;I2C_Support.c: 159: I2C_Write((Device << 1) | 0);
 19570  00334C  0100               	movlb	0	; () banked
 19571  00334E  51D6               	movf	DS3231_Init@Device& (0+255),w,b
 19572  003350  25D6               	addwf	DS3231_Init@Device& (0+255),w,b
 19573  003352  EC10  F023         	call	_I2C_Write
 19574                           
 19575                           ;I2C_Support.c: 160: I2C_Write(Address_7);
 19576  003356  0100               	movlb	0	; () banked
 19577  003358  51D3               	movf	DS3231_Init@Address_7& (0+255),w,b
 19578  00335A  EC10  F023         	call	_I2C_Write
 19579                           
 19580                           ;I2C_Support.c: 162: I2C_Write(alarm_second);
 19581  00335E  5052               	movf	_alarm_second,w,c
 19582  003360  EC10  F023         	call	_I2C_Write
 19583                           
 19584                           ;I2C_Support.c: 163: I2C_Write(alarm_minute);
 19585  003364  5051               	movf	_alarm_minute,w,c
 19586  003366  EC10  F023         	call	_I2C_Write
 19587                           
 19588                           ;I2C_Support.c: 164: I2C_Write(alarm_hour);
 19589  00336A  5050               	movf	_alarm_hour,w,c
 19590  00336C  EC10  F023         	call	_I2C_Write
 19591                           
 19592                           ;I2C_Support.c: 165: I2C_Write(alarm_date);
 19593  003370  504F               	movf	_alarm_date,w,c
 19594  003372  EC10  F023         	call	_I2C_Write
 19595                           
 19596                           ;I2C_Support.c: 166: I2C_Stop();
 19597  003376  ECA2  F026         	call	_I2C_Stop	;wreg free
 19598  00337A  0012               	return		;funcret
 19599  00337C                     __end_of_DS3231_Init:
 19600                           	opt stack 0
 19601                           tblptru	equ	0xFF8
 19602                           tblptrh	equ	0xFF7
 19603                           tblptrl	equ	0xFF6
 19604                           tablat	equ	0xFF5
 19605                           prodh	equ	0xFF4
 19606                           prodl	equ	0xFF3
 19607                           intcon	equ	0xFF2
 19608                           intcon2	equ	0xFF1
 19609                           intcon3	equ	0xFF0
 19610                           postinc0	equ	0xFEE
 19611                           wreg	equ	0xFE8
 19612                           postdec1	equ	0xFE5
 19613                           fsr1l	equ	0xFE1
 19614                           indf2	equ	0xFDF
 19615                           postinc2	equ	0xFDE
 19616                           postdec2	equ	0xFDD
 19617                           fsr2h	equ	0xFDA
 19618                           fsr2l	equ	0xFD9
 19619                           status	equ	0xFD8
 19620                           
 19621 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
 19622 ;; Defined at:
 19623 ;;		line 131 in file "I2C.c"
 19624 ;; Parameters:    Size  Location     Type
 19625 ;;  Device          1    wreg     unsigned char 
 19626 ;;  Address         1    2[BANK0 ] unsigned char 
 19627 ;;  Data_Out        1    3[BANK0 ] unsigned char 
 19628 ;; Auto vars:     Size  Location     Type
 19629 ;;  Device          1    4[BANK0 ] unsigned char 
 19630 ;; Return value:  Size  Location     Type
 19631 ;;		None               void
 19632 ;; Registers used:
 19633 ;;		wreg, status,2, status,0, cstack
 19634 ;; Tracked objects:
 19635 ;;		On entry : 0/0
 19636 ;;		On exit  : 0/0
 19637 ;;		Unchanged: 0/0
 19638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19639 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19642 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19643 ;;Total ram usage:        3 bytes
 19644 ;; Hardware stack levels used:    1
 19645 ;; Hardware stack levels required when called:    6
 19646 ;; This function calls:
 19647 ;;		_I2C_Start
 19648 ;;		_I2C_Stop
 19649 ;;		_I2C_Write
 19650 ;; This function is called by:
 19651 ;;		_DS3231_Init
 19652 ;;		_DS3231_Turn_Off_Alarm
 19653 ;;		_DS3231_Turn_On_Alarm
 19654 ;; This function uses a non-reentrant model
 19655 ;;
 19656                           
 19657                           	psect	text99
 19658  004A32                     __ptext99:
 19659                           	opt stack 0
 19660  004A32                     _I2C_Write_Address_Write_One_Byte:
 19661                           	opt stack 22
 19662                           
 19663                           ;incstack = 0
 19664                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
 19665  004A32  0100               	movlb	0	; () banked
 19666  004A34  6FD1               	movwf	I2C_Write_Address_Write_One_Byte@Device& (0+255),b
 19667                           
 19668                           ; BSR set to: 0
 19669                           ;I2C.c: 133: I2C_Start();
 19670  004A36  ECAB  F026         	call	_I2C_Start	;wreg free
 19671                           
 19672                           ;I2C.c: 134: I2C_Write((Device << 1) | 0);
 19673  004A3A  0100               	movlb	0	; () banked
 19674  004A3C  51D1               	movf	I2C_Write_Address_Write_One_Byte@Device& (0+255),w,b
 19675  004A3E  25D1               	addwf	I2C_Write_Address_Write_One_Byte@Device& (0+255),w,b
 19676  004A40  EC10  F023         	call	_I2C_Write
 19677                           
 19678                           ;I2C.c: 135: I2C_Write(Address);
 19679  004A44  0100               	movlb	0	; () banked
 19680  004A46  51CF               	movf	I2C_Write_Address_Write_One_Byte@Address& (0+255),w,b
 19681  004A48  EC10  F023         	call	_I2C_Write
 19682                           
 19683                           ;I2C.c: 136: I2C_Write(Data_Out);
 19684  004A4C  0100               	movlb	0	; () banked
 19685  004A4E  51D0               	movf	I2C_Write_Address_Write_One_Byte@Data_Out& (0+255),w,b
 19686  004A50  EC10  F023         	call	_I2C_Write
 19687                           
 19688                           ;I2C.c: 137: I2C_Stop();
 19689  004A54  ECA2  F026         	call	_I2C_Stop	;wreg free
 19690  004A58  0012               	return		;funcret
 19691  004A5A                     __end_of_I2C_Write_Address_Write_One_Byte:
 19692                           	opt stack 0
 19693                           tblptru	equ	0xFF8
 19694                           tblptrh	equ	0xFF7
 19695                           tblptrl	equ	0xFF6
 19696                           tablat	equ	0xFF5
 19697                           prodh	equ	0xFF4
 19698                           prodl	equ	0xFF3
 19699                           intcon	equ	0xFF2
 19700                           intcon2	equ	0xFF1
 19701                           intcon3	equ	0xFF0
 19702                           postinc0	equ	0xFEE
 19703                           wreg	equ	0xFE8
 19704                           postdec1	equ	0xFE5
 19705                           fsr1l	equ	0xFE1
 19706                           indf2	equ	0xFDF
 19707                           postinc2	equ	0xFDE
 19708                           postdec2	equ	0xFDD
 19709                           fsr2h	equ	0xFDA
 19710                           fsr2l	equ	0xFD9
 19711                           status	equ	0xFD8
 19712                           
 19713 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
 19714 ;; Defined at:
 19715 ;;		line 118 in file "I2C.c"
 19716 ;; Parameters:    Size  Location     Type
 19717 ;;  Device          1    wreg     unsigned char 
 19718 ;;  Address         1    3[BANK0 ] unsigned char 
 19719 ;; Auto vars:     Size  Location     Type
 19720 ;;  Device          1    5[BANK0 ] unsigned char 
 19721 ;;  Data_Ret        1    4[BANK0 ] unsigned char 
 19722 ;; Return value:  Size  Location     Type
 19723 ;;                  1    wreg      unsigned char 
 19724 ;; Registers used:
 19725 ;;		wreg, status,2, status,0, cstack
 19726 ;; Tracked objects:
 19727 ;;		On entry : 0/0
 19728 ;;		On exit  : 0/0
 19729 ;;		Unchanged: 0/0
 19730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19731 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19734 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19735 ;;Total ram usage:        3 bytes
 19736 ;; Hardware stack levels used:    1
 19737 ;; Hardware stack levels required when called:    7
 19738 ;; This function calls:
 19739 ;;		_I2C_ReStart
 19740 ;;		_I2C_Read
 19741 ;;		_I2C_Start
 19742 ;;		_I2C_Stop
 19743 ;;		_I2C_Write
 19744 ;; This function is called by:
 19745 ;;		_DS3231_Init
 19746 ;;		_DS3231_Turn_Off_Alarm
 19747 ;;		_DS3231_Turn_On_Alarm
 19748 ;; This function uses a non-reentrant model
 19749 ;;
 19750                           
 19751                           	psect	text100
 19752  004810                     __ptext100:
 19753                           	opt stack 0
 19754  004810                     _I2C_Write_Address_Read_One_Byte:
 19755                           	opt stack 21
 19756                           
 19757                           ;incstack = 0
 19758                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
 19759  004810  0100               	movlb	0	; () banked
 19760  004812  6FD2               	movwf	I2C_Write_Address_Read_One_Byte@Device& (0+255),b
 19761                           
 19762                           ; BSR set to: 0
 19763                           ;I2C.c: 120: char Data_Ret;
 19764                           ;I2C.c: 121: I2C_Start();
 19765  004814  ECAB  F026         	call	_I2C_Start	;wreg free
 19766                           
 19767                           ;I2C.c: 122: I2C_Write((Device << 1) | 0);
 19768  004818  0100               	movlb	0	; () banked
 19769  00481A  51D2               	movf	I2C_Write_Address_Read_One_Byte@Device& (0+255),w,b
 19770  00481C  25D2               	addwf	I2C_Write_Address_Read_One_Byte@Device& (0+255),w,b
 19771  00481E  EC10  F023         	call	_I2C_Write
 19772                           
 19773                           ;I2C.c: 123: I2C_Write(Address);
 19774  004822  0100               	movlb	0	; () banked
 19775  004824  51D0               	movf	I2C_Write_Address_Read_One_Byte@Address& (0+255),w,b
 19776  004826  EC10  F023         	call	_I2C_Write
 19777                           
 19778                           ;I2C.c: 124: I2C_ReStart();
 19779  00482A  EC43  F026         	call	_I2C_ReStart	;wreg free
 19780                           
 19781                           ;I2C.c: 125: I2C_Write((Device << 1) | 1);
 19782  00482E  80D8               	bsf	status,0,c
 19783  004830  0100               	movlb	0	; () banked
 19784  004832  35D2               	rlcf	I2C_Write_Address_Read_One_Byte@Device& (0+255),w,b
 19785  004834  EC10  F023         	call	_I2C_Write
 19786                           
 19787                           ;I2C.c: 126: Data_Ret = I2C_Read(0);
 19788  004838  0E00               	movlw	0
 19789  00483A  ECB7  F021         	call	_I2C_Read
 19790  00483E  0100               	movlb	0	; () banked
 19791  004840  6FD1               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret& (0+255),b
 19792                           
 19793                           ;I2C.c: 127: I2C_Stop();
 19794  004842  ECA2  F026         	call	_I2C_Stop	;wreg free
 19795                           
 19796                           ;I2C.c: 128: return Data_Ret;
 19797  004846  0100               	movlb	0	; () banked
 19798  004848  51D1               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret& (0+255),w,b
 19799  00484A  D000               	goto	l109
 19800  00484C                     l109:
 19801                           
 19802                           ; BSR set to: 0
 19803  00484C  0012               	return		;funcret
 19804  00484E                     __end_of_I2C_Write_Address_Read_One_Byte:
 19805                           	opt stack 0
 19806                           tblptru	equ	0xFF8
 19807                           tblptrh	equ	0xFF7
 19808                           tblptrl	equ	0xFF6
 19809                           tablat	equ	0xFF5
 19810                           prodh	equ	0xFF4
 19811                           prodl	equ	0xFF3
 19812                           intcon	equ	0xFF2
 19813                           intcon2	equ	0xFF1
 19814                           intcon3	equ	0xFF0
 19815                           postinc0	equ	0xFEE
 19816                           wreg	equ	0xFE8
 19817                           postdec1	equ	0xFE5
 19818                           fsr1l	equ	0xFE1
 19819                           indf2	equ	0xFDF
 19820                           postinc2	equ	0xFDE
 19821                           postdec2	equ	0xFDD
 19822                           fsr2h	equ	0xFDA
 19823                           fsr2l	equ	0xFD9
 19824                           status	equ	0xFD8
 19825                           
 19826 ;; *************** function _DS1621_Init *****************
 19827 ;; Defined at:
 19828 ;;		line 22 in file "I2C_Support.c"
 19829 ;; Parameters:    Size  Location     Type
 19830 ;;		None
 19831 ;; Auto vars:     Size  Location     Type
 19832 ;;  Device          1    5[BANK0 ] unsigned char 
 19833 ;; Return value:  Size  Location     Type
 19834 ;;		None               void
 19835 ;; Registers used:
 19836 ;;		wreg, status,2, status,0, cstack
 19837 ;; Tracked objects:
 19838 ;;		On entry : 0/0
 19839 ;;		On exit  : 0/0
 19840 ;;		Unchanged: 0/0
 19841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19846 ;;Total ram usage:        1 bytes
 19847 ;; Hardware stack levels used:    1
 19848 ;; Hardware stack levels required when called:    7
 19849 ;; This function calls:
 19850 ;;		_I2C_Write_Cmd_Only
 19851 ;;		_I2C_Write_Cmd_Write_Data
 19852 ;; This function is called by:
 19853 ;;		_Do_Init
 19854 ;; This function uses a non-reentrant model
 19855 ;;
 19856                           
 19857                           	psect	text101
 19858  0049E0                     __ptext101:
 19859                           	opt stack 0
 19860  0049E0                     _DS1621_Init:
 19861                           	opt stack 22
 19862                           
 19863                           ;I2C_Support.c: 24: char Device = 0x48;
 19864                           
 19865                           ; BSR set to: 0
 19866                           ;incstack = 0
 19867  0049E0  0E48               	movlw	72
 19868  0049E2  0100               	movlb	0	; () banked
 19869  0049E4  6FD2               	movwf	DS1621_Init@Device& (0+255),b
 19870                           
 19871                           ; BSR set to: 0
 19872                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 19873  0049E6  0EAC               	movlw	172
 19874  0049E8  0100               	movlb	0	; () banked
 19875  0049EA  6FCF               	movwf	I2C_Write_Cmd_Write_Data@Cmd& (0+255),b
 19876  0049EC  0E02               	movlw	2
 19877  0049EE  0100               	movlb	0	; () banked
 19878  0049F0  6FD0               	movwf	I2C_Write_Cmd_Write_Data@Data_Out& (0+255),b
 19879  0049F2  0100               	movlb	0	; () banked
 19880  0049F4  51D2               	movf	DS1621_Init@Device& (0+255),w,b
 19881  0049F6  EC2D  F025         	call	_I2C_Write_Cmd_Write_Data
 19882                           
 19883                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 19884  0049FA  0EEE               	movlw	238
 19885  0049FC  0100               	movlb	0	; () banked
 19886  0049FE  6FCF               	movwf	I2C_Write_Cmd_Only@Cmd& (0+255),b
 19887  004A00  0100               	movlb	0	; () banked
 19888  004A02  51D2               	movf	DS1621_Init@Device& (0+255),w,b
 19889  004A04  ECB9  F025         	call	_I2C_Write_Cmd_Only
 19890  004A08  0012               	return		;funcret
 19891  004A0A                     __end_of_DS1621_Init:
 19892                           	opt stack 0
 19893                           tblptru	equ	0xFF8
 19894                           tblptrh	equ	0xFF7
 19895                           tblptrl	equ	0xFF6
 19896                           tablat	equ	0xFF5
 19897                           prodh	equ	0xFF4
 19898                           prodl	equ	0xFF3
 19899                           intcon	equ	0xFF2
 19900                           intcon2	equ	0xFF1
 19901                           intcon3	equ	0xFF0
 19902                           postinc0	equ	0xFEE
 19903                           wreg	equ	0xFE8
 19904                           postdec1	equ	0xFE5
 19905                           fsr1l	equ	0xFE1
 19906                           indf2	equ	0xFDF
 19907                           postinc2	equ	0xFDE
 19908                           postdec2	equ	0xFDD
 19909                           fsr2h	equ	0xFDA
 19910                           fsr2l	equ	0xFD9
 19911                           status	equ	0xFD8
 19912                           
 19913 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 19914 ;; Defined at:
 19915 ;;		line 148 in file "I2C.c"
 19916 ;; Parameters:    Size  Location     Type
 19917 ;;  Device          1    wreg     unsigned char 
 19918 ;;  Cmd             1    2[BANK0 ] unsigned char 
 19919 ;;  Data_Out        1    3[BANK0 ] unsigned char 
 19920 ;; Auto vars:     Size  Location     Type
 19921 ;;  Device          1    4[BANK0 ] unsigned char 
 19922 ;; Return value:  Size  Location     Type
 19923 ;;		None               void
 19924 ;; Registers used:
 19925 ;;		wreg, status,2, status,0, cstack
 19926 ;; Tracked objects:
 19927 ;;		On entry : 0/0
 19928 ;;		On exit  : 0/0
 19929 ;;		Unchanged: 0/0
 19930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19931 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19935 ;;Total ram usage:        3 bytes
 19936 ;; Hardware stack levels used:    1
 19937 ;; Hardware stack levels required when called:    6
 19938 ;; This function calls:
 19939 ;;		_I2C_Start
 19940 ;;		_I2C_Stop
 19941 ;;		_I2C_Write
 19942 ;; This function is called by:
 19943 ;;		_DS1621_Init
 19944 ;; This function uses a non-reentrant model
 19945 ;;
 19946                           
 19947                           	psect	text102
 19948  004A5A                     __ptext102:
 19949                           	opt stack 0
 19950  004A5A                     _I2C_Write_Cmd_Write_Data:
 19951                           	opt stack 22
 19952                           
 19953                           ;incstack = 0
 19954                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 19955  004A5A  0100               	movlb	0	; () banked
 19956  004A5C  6FD1               	movwf	I2C_Write_Cmd_Write_Data@Device& (0+255),b
 19957                           
 19958                           ; BSR set to: 0
 19959                           ;I2C.c: 150: I2C_Start();
 19960  004A5E  ECAB  F026         	call	_I2C_Start	;wreg free
 19961                           
 19962                           ;I2C.c: 151: I2C_Write((Device << 1) | 0);
 19963  004A62  0100               	movlb	0	; () banked
 19964  004A64  51D1               	movf	I2C_Write_Cmd_Write_Data@Device& (0+255),w,b
 19965  004A66  25D1               	addwf	I2C_Write_Cmd_Write_Data@Device& (0+255),w,b
 19966  004A68  EC10  F023         	call	_I2C_Write
 19967                           
 19968                           ;I2C.c: 152: I2C_Write(Cmd);
 19969  004A6C  0100               	movlb	0	; () banked
 19970  004A6E  51CF               	movf	I2C_Write_Cmd_Write_Data@Cmd& (0+255),w,b
 19971  004A70  EC10  F023         	call	_I2C_Write
 19972                           
 19973                           ;I2C.c: 153: I2C_Write(Data_Out);
 19974  004A74  0100               	movlb	0	; () banked
 19975  004A76  51D0               	movf	I2C_Write_Cmd_Write_Data@Data_Out& (0+255),w,b
 19976  004A78  EC10  F023         	call	_I2C_Write
 19977                           
 19978                           ;I2C.c: 154: I2C_Stop();
 19979  004A7C  ECA2  F026         	call	_I2C_Stop	;wreg free
 19980  004A80  0012               	return		;funcret
 19981  004A82                     __end_of_I2C_Write_Cmd_Write_Data:
 19982                           	opt stack 0
 19983                           tblptru	equ	0xFF8
 19984                           tblptrh	equ	0xFF7
 19985                           tblptrl	equ	0xFF6
 19986                           tablat	equ	0xFF5
 19987                           prodh	equ	0xFF4
 19988                           prodl	equ	0xFF3
 19989                           intcon	equ	0xFF2
 19990                           intcon2	equ	0xFF1
 19991                           intcon3	equ	0xFF0
 19992                           postinc0	equ	0xFEE
 19993                           wreg	equ	0xFE8
 19994                           postdec1	equ	0xFE5
 19995                           fsr1l	equ	0xFE1
 19996                           indf2	equ	0xFDF
 19997                           postinc2	equ	0xFDE
 19998                           postdec2	equ	0xFDD
 19999                           fsr2h	equ	0xFDA
 20000                           fsr2l	equ	0xFD9
 20001                           status	equ	0xFD8
 20002                           
 20003 ;; *************** function _I2C_Write_Cmd_Only *****************
 20004 ;; Defined at:
 20005 ;;		line 140 in file "I2C.c"
 20006 ;; Parameters:    Size  Location     Type
 20007 ;;  Device          1    wreg     unsigned char 
 20008 ;;  Cmd             1    2[BANK0 ] unsigned char 
 20009 ;; Auto vars:     Size  Location     Type
 20010 ;;  Device          1    3[BANK0 ] unsigned char 
 20011 ;; Return value:  Size  Location     Type
 20012 ;;		None               void
 20013 ;; Registers used:
 20014 ;;		wreg, status,2, status,0, cstack
 20015 ;; Tracked objects:
 20016 ;;		On entry : 0/0
 20017 ;;		On exit  : 0/0
 20018 ;;		Unchanged: 0/0
 20019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20020 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20024 ;;Total ram usage:        2 bytes
 20025 ;; Hardware stack levels used:    1
 20026 ;; Hardware stack levels required when called:    6
 20027 ;; This function calls:
 20028 ;;		_I2C_Start
 20029 ;;		_I2C_Stop
 20030 ;;		_I2C_Write
 20031 ;; This function is called by:
 20032 ;;		_DS1621_Init
 20033 ;; This function uses a non-reentrant model
 20034 ;;
 20035                           
 20036                           	psect	text103
 20037  004B72                     __ptext103:
 20038                           	opt stack 0
 20039  004B72                     _I2C_Write_Cmd_Only:
 20040                           	opt stack 22
 20041                           
 20042                           ;incstack = 0
 20043                           ;I2C_Write_Cmd_Only@Device stored from wreg
 20044  004B72  0100               	movlb	0	; () banked
 20045  004B74  6FD0               	movwf	I2C_Write_Cmd_Only@Device& (0+255),b
 20046                           
 20047                           ; BSR set to: 0
 20048                           ;I2C.c: 142: I2C_Start();
 20049  004B76  ECAB  F026         	call	_I2C_Start	;wreg free
 20050                           
 20051                           ;I2C.c: 143: I2C_Write((Device << 1) | 0);
 20052  004B7A  0100               	movlb	0	; () banked
 20053  004B7C  51D0               	movf	I2C_Write_Cmd_Only@Device& (0+255),w,b
 20054  004B7E  25D0               	addwf	I2C_Write_Cmd_Only@Device& (0+255),w,b
 20055  004B80  EC10  F023         	call	_I2C_Write
 20056                           
 20057                           ;I2C.c: 144: I2C_Write(Cmd);
 20058  004B84  0100               	movlb	0	; () banked
 20059  004B86  51CF               	movf	I2C_Write_Cmd_Only@Cmd& (0+255),w,b
 20060  004B88  EC10  F023         	call	_I2C_Write
 20061                           
 20062                           ;I2C.c: 145: I2C_Stop();
 20063  004B8C  ECA2  F026         	call	_I2C_Stop	;wreg free
 20064  004B90  0012               	return		;funcret
 20065  004B92                     __end_of_I2C_Write_Cmd_Only:
 20066                           	opt stack 0
 20067                           tblptru	equ	0xFF8
 20068                           tblptrh	equ	0xFF7
 20069                           tblptrl	equ	0xFF6
 20070                           tablat	equ	0xFF5
 20071                           prodh	equ	0xFF4
 20072                           prodl	equ	0xFF3
 20073                           intcon	equ	0xFF2
 20074                           intcon2	equ	0xFF1
 20075                           intcon3	equ	0xFF0
 20076                           postinc0	equ	0xFEE
 20077                           wreg	equ	0xFE8
 20078                           postdec1	equ	0xFE5
 20079                           fsr1l	equ	0xFE1
 20080                           indf2	equ	0xFDF
 20081                           postinc2	equ	0xFDE
 20082                           postdec2	equ	0xFDD
 20083                           fsr2h	equ	0xFDA
 20084                           fsr2l	equ	0xFD9
 20085                           status	equ	0xFD8
 20086                           
 20087 ;; *************** function _DS1621_Read_Temp *****************
 20088 ;; Defined at:
 20089 ;;		line 29 in file "I2C_Support.c"
 20090 ;; Parameters:    Size  Location     Type
 20091 ;;		None
 20092 ;; Auto vars:     Size  Location     Type
 20093 ;;  Device          1    7[BANK0 ] unsigned char 
 20094 ;;  Data_Ret        1    6[BANK0 ] unsigned char 
 20095 ;;  Cmd             1    5[BANK0 ] unsigned char 
 20096 ;; Return value:  Size  Location     Type
 20097 ;;                  2    3[BANK0 ] int 
 20098 ;; Registers used:
 20099 ;;		wreg, status,2, status,0, cstack
 20100 ;; Tracked objects:
 20101 ;;		On entry : 0/0
 20102 ;;		On exit  : 0/0
 20103 ;;		Unchanged: 0/0
 20104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20106 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20108 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20109 ;;Total ram usage:        5 bytes
 20110 ;; Hardware stack levels used:    1
 20111 ;; Hardware stack levels required when called:    7
 20112 ;; This function calls:
 20113 ;;		_I2C_ReStart
 20114 ;;		_I2C_Read
 20115 ;;		_I2C_Start
 20116 ;;		_I2C_Stop
 20117 ;;		_I2C_Write
 20118 ;; This function is called by:
 20119 ;;		_main
 20120 ;; This function uses a non-reentrant model
 20121 ;;
 20122                           
 20123                           	psect	text104
 20124  0046B8                     __ptext104:
 20125                           	opt stack 0
 20126  0046B8                     _DS1621_Read_Temp:
 20127                           	opt stack 23
 20128                           
 20129                           ;I2C_Support.c: 32: char Device = 0x48;
 20130                           
 20131                           ;incstack = 0
 20132  0046B8  0E48               	movlw	72
 20133  0046BA  0100               	movlb	0	; () banked
 20134  0046BC  6FD4               	movwf	DS1621_Read_Temp@Device& (0+255),b
 20135                           
 20136                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 20137  0046BE  0EAA               	movlw	170
 20138  0046C0  0100               	movlb	0	; () banked
 20139  0046C2  6FD2               	movwf	DS1621_Read_Temp@Cmd& (0+255),b
 20140                           
 20141                           ; BSR set to: 0
 20142                           ;I2C_Support.c: 34: char Data_Ret;
 20143                           ;I2C_Support.c: 35: I2C_Start();
 20144  0046C4  ECAB  F026         	call	_I2C_Start	;wreg free
 20145                           
 20146                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 20147  0046C8  0100               	movlb	0	; () banked
 20148  0046CA  51D4               	movf	DS1621_Read_Temp@Device& (0+255),w,b
 20149  0046CC  25D4               	addwf	DS1621_Read_Temp@Device& (0+255),w,b
 20150  0046CE  EC10  F023         	call	_I2C_Write
 20151                           
 20152                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 20153  0046D2  0100               	movlb	0	; () banked
 20154  0046D4  51D2               	movf	DS1621_Read_Temp@Cmd& (0+255),w,b
 20155  0046D6  EC10  F023         	call	_I2C_Write
 20156                           
 20157                           ;I2C_Support.c: 38: I2C_ReStart();
 20158  0046DA  EC43  F026         	call	_I2C_ReStart	;wreg free
 20159                           
 20160                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 20161  0046DE  80D8               	bsf	status,0,c
 20162  0046E0  0100               	movlb	0	; () banked
 20163  0046E2  35D4               	rlcf	DS1621_Read_Temp@Device& (0+255),w,b
 20164  0046E4  EC10  F023         	call	_I2C_Write
 20165                           
 20166                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 20167  0046E8  0E00               	movlw	0
 20168  0046EA  ECB7  F021         	call	_I2C_Read
 20169  0046EE  0100               	movlb	0	; () banked
 20170  0046F0  6FD3               	movwf	DS1621_Read_Temp@Data_Ret& (0+255),b
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;I2C_Support.c: 41: I2C_Stop();
 20174  0046F2  ECA2  F026         	call	_I2C_Stop	;wreg free
 20175                           
 20176                           ;I2C_Support.c: 42: return Data_Ret;
 20177  0046F6  C0D3  F0D0         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 20178  0046FA  0100               	movlb	0	; () banked
 20179  0046FC  6BD1               	clrf	(?_DS1621_Read_Temp+1)& (0+255),b
 20180  0046FE  D000               	goto	l187
 20181  004700                     l187:
 20182                           
 20183                           ; BSR set to: 0
 20184  004700  0012               	return		;funcret
 20185  004702                     __end_of_DS1621_Read_Temp:
 20186                           	opt stack 0
 20187                           tblptru	equ	0xFF8
 20188                           tblptrh	equ	0xFF7
 20189                           tblptrl	equ	0xFF6
 20190                           tablat	equ	0xFF5
 20191                           prodh	equ	0xFF4
 20192                           prodl	equ	0xFF3
 20193                           intcon	equ	0xFF2
 20194                           intcon2	equ	0xFF1
 20195                           intcon3	equ	0xFF0
 20196                           postinc0	equ	0xFEE
 20197                           wreg	equ	0xFE8
 20198                           postdec1	equ	0xFE5
 20199                           fsr1l	equ	0xFE1
 20200                           indf2	equ	0xFDF
 20201                           postinc2	equ	0xFDE
 20202                           postdec2	equ	0xFDD
 20203                           fsr2h	equ	0xFDA
 20204                           fsr2l	equ	0xFD9
 20205                           status	equ	0xFD8
 20206                           
 20207 ;; *************** function _I2C_Write *****************
 20208 ;; Defined at:
 20209 ;;		line 37 in file "I2C.c"
 20210 ;; Parameters:    Size  Location     Type
 20211 ;;  outByte         1    wreg     unsigned char 
 20212 ;; Auto vars:     Size  Location     Type
 20213 ;;  outByte         1    0[BANK0 ] unsigned char 
 20214 ;;  n               1    1[BANK0 ] unsigned char 
 20215 ;; Return value:  Size  Location     Type
 20216 ;;		None               void
 20217 ;; Registers used:
 20218 ;;		wreg, status,2, status,0, cstack
 20219 ;; Tracked objects:
 20220 ;;		On entry : 0/0
 20221 ;;		On exit  : 0/0
 20222 ;;		Unchanged: 0/0
 20223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20225 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20228 ;;Total ram usage:        2 bytes
 20229 ;; Hardware stack levels used:    1
 20230 ;; Hardware stack levels required when called:    5
 20231 ;; This function calls:
 20232 ;;		_i2cHighScl
 20233 ;;		_i2cHighSda
 20234 ;;		_i2cLowScl
 20235 ;;		_i2cLowSda
 20236 ;; This function is called by:
 20237 ;;		_I2C_Write_Address_Read_One_Byte
 20238 ;;		_I2C_Write_Address_Write_One_Byte
 20239 ;;		_I2C_Write_Cmd_Only
 20240 ;;		_I2C_Write_Cmd_Write_Data
 20241 ;;		_DS1621_Read_Temp
 20242 ;;		_DS3231_Read_Time
 20243 ;;		_DS3231_Write_Time
 20244 ;;		_DS3231_Read_Alarm_Time
 20245 ;;		_DS3231_Init
 20246 ;;		_DS3231_Write_Alarm_Time
 20247 ;;		_I2C_Write_Cmd_Read_One_Byte
 20248 ;;		_DS3231_Setup_Time
 20249 ;; This function uses a non-reentrant model
 20250 ;;
 20251                           
 20252                           	psect	text105
 20253  004620                     __ptext105:
 20254                           	opt stack 0
 20255  004620                     _I2C_Write:
 20256                           	opt stack 22
 20257                           
 20258                           ; BSR set to: 0
 20259                           ;incstack = 0
 20260                           ;I2C_Write@outByte stored from wreg
 20261  004620  0100               	movlb	0	; () banked
 20262  004622  6FCD               	movwf	I2C_Write@outByte& (0+255),b
 20263                           
 20264                           ; BSR set to: 0
 20265                           ;I2C.c: 39: unsigned char n;
 20266                           ;I2C.c: 40: for(n=0; n<8; n++)
 20267  004624  0E00               	movlw	0
 20268  004626  0100               	movlb	0	; () banked
 20269  004628  6FCE               	movwf	I2C_Write@n& (0+255),b
 20270  00462A                     l8227:
 20271                           
 20272                           ; BSR set to: 0
 20273  00462A  0E07               	movlw	7
 20274  00462C  0100               	movlb	0	; () banked
 20275  00462E  65CE               	cpfsgt	I2C_Write@n& (0+255),b
 20276  004630  D001               	goto	l75
 20277                           
 20278                           ; BSR set to: 0
 20279  004632  D015               	goto	l8245
 20280  004634                     l75:
 20281                           
 20282                           ; BSR set to: 0
 20283                           ;I2C.c: 41: {
 20284                           ;I2C.c: 42: if(outByte&0x80) i2cHighSda();
 20285  004634  0100               	movlb	0	; () banked
 20286  004636  AFCD               	btfss	I2C_Write@outByte& (0+255),7,b
 20287  004638  D003               	goto	l8233
 20288                           
 20289                           ; BSR set to: 0
 20290  00463A  EC11  F027         	call	_i2cHighSda	;wreg free
 20291  00463E  D003               	goto	l8235
 20292  004640                     l8233:
 20293                           
 20294                           ;I2C.c: 43: else i2cLowSda();
 20295  004640  EC04  F027         	call	_i2cLowSda	;wreg free
 20296  004644  D000               	goto	l8235
 20297  004646                     l8235:
 20298                           
 20299                           ;I2C.c: 44: i2cHighScl();
 20300  004646  ECEE  F026         	call	_i2cHighScl	;wreg free
 20301                           
 20302                           ;I2C.c: 45: i2cLowScl();
 20303  00464A  EC0D  F027         	call	_i2cLowScl	;wreg free
 20304                           
 20305                           ;I2C.c: 46: outByte = outByte << 1;
 20306  00464E  0100               	movlb	0	; () banked
 20307  004650  51CD               	movf	I2C_Write@outByte& (0+255),w,b
 20308  004652  25CD               	addwf	I2C_Write@outByte& (0+255),w,b
 20309  004654  0100               	movlb	0	; () banked
 20310  004656  6FCD               	movwf	I2C_Write@outByte& (0+255),b
 20311                           
 20312                           ; BSR set to: 0
 20313  004658  0100               	movlb	0	; () banked
 20314  00465A  2BCE               	incf	I2C_Write@n& (0+255),f,b
 20315  00465C  D7E6               	goto	l8227
 20316  00465E                     l8245:
 20317                           
 20318                           ; BSR set to: 0
 20319                           ;I2C.c: 47: }
 20320                           ;I2C.c: 48: i2cHighSda();
 20321  00465E  EC11  F027         	call	_i2cHighSda	;wreg free
 20322                           
 20323                           ;I2C.c: 49: i2cHighScl();
 20324  004662  ECEE  F026         	call	_i2cHighScl	;wreg free
 20325                           
 20326                           ;I2C.c: 50: i2cLowScl();
 20327  004666  EC0D  F027         	call	_i2cLowScl	;wreg free
 20328  00466A  0012               	return		;funcret
 20329  00466C                     __end_of_I2C_Write:
 20330                           	opt stack 0
 20331                           tblptru	equ	0xFF8
 20332                           tblptrh	equ	0xFF7
 20333                           tblptrl	equ	0xFF6
 20334                           tablat	equ	0xFF5
 20335                           prodh	equ	0xFF4
 20336                           prodl	equ	0xFF3
 20337                           intcon	equ	0xFF2
 20338                           intcon2	equ	0xFF1
 20339                           intcon3	equ	0xFF0
 20340                           postinc0	equ	0xFEE
 20341                           wreg	equ	0xFE8
 20342                           postdec1	equ	0xFE5
 20343                           fsr1l	equ	0xFE1
 20344                           indf2	equ	0xFDF
 20345                           postinc2	equ	0xFDE
 20346                           postdec2	equ	0xFDD
 20347                           fsr2h	equ	0xFDA
 20348                           fsr2l	equ	0xFD9
 20349                           status	equ	0xFD8
 20350                           
 20351 ;; *************** function _I2C_Stop *****************
 20352 ;; Defined at:
 20353 ;;		line 84 in file "I2C.c"
 20354 ;; Parameters:    Size  Location     Type
 20355 ;;		None
 20356 ;; Auto vars:     Size  Location     Type
 20357 ;;		None
 20358 ;; Return value:  Size  Location     Type
 20359 ;;		None               void
 20360 ;; Registers used:
 20361 ;;		wreg, cstack
 20362 ;; Tracked objects:
 20363 ;;		On entry : 0/0
 20364 ;;		On exit  : 0/0
 20365 ;;		Unchanged: 0/0
 20366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20371 ;;Total ram usage:        0 bytes
 20372 ;; Hardware stack levels used:    1
 20373 ;; Hardware stack levels required when called:    5
 20374 ;; This function calls:
 20375 ;;		_i2cHighScl
 20376 ;;		_i2cHighSda
 20377 ;;		_i2cLowScl
 20378 ;;		_i2cLowSda
 20379 ;; This function is called by:
 20380 ;;		_I2C_Write_Address_Read_One_Byte
 20381 ;;		_I2C_Write_Address_Write_One_Byte
 20382 ;;		_I2C_Write_Cmd_Only
 20383 ;;		_I2C_Write_Cmd_Write_Data
 20384 ;;		_DS1621_Read_Temp
 20385 ;;		_DS3231_Read_Time
 20386 ;;		_DS3231_Write_Time
 20387 ;;		_DS3231_Read_Alarm_Time
 20388 ;;		_DS3231_Init
 20389 ;;		_DS3231_Write_Alarm_Time
 20390 ;;		_I2C_Write_Cmd_Read_One_Byte
 20391 ;;		_DS3231_Setup_Time
 20392 ;; This function uses a non-reentrant model
 20393 ;;
 20394                           
 20395                           	psect	text106
 20396  004D44                     __ptext106:
 20397                           	opt stack 0
 20398  004D44                     _I2C_Stop:
 20399                           	opt stack 22
 20400                           
 20401                           ;I2C.c: 86: i2cLowScl();
 20402                           
 20403                           ;incstack = 0
 20404  004D44  EC0D  F027         	call	_i2cLowScl	;wreg free
 20405                           
 20406                           ;I2C.c: 87: i2cLowSda();
 20407  004D48  EC04  F027         	call	_i2cLowSda	;wreg free
 20408                           
 20409                           ;I2C.c: 88: i2cHighScl();
 20410  004D4C  ECEE  F026         	call	_i2cHighScl	;wreg free
 20411                           
 20412                           ;I2C.c: 89: i2cHighSda();
 20413  004D50  EC11  F027         	call	_i2cHighSda	;wreg free
 20414  004D54  0012               	return		;funcret
 20415  004D56                     __end_of_I2C_Stop:
 20416                           	opt stack 0
 20417                           tblptru	equ	0xFF8
 20418                           tblptrh	equ	0xFF7
 20419                           tblptrl	equ	0xFF6
 20420                           tablat	equ	0xFF5
 20421                           prodh	equ	0xFF4
 20422                           prodl	equ	0xFF3
 20423                           intcon	equ	0xFF2
 20424                           intcon2	equ	0xFF1
 20425                           intcon3	equ	0xFF0
 20426                           postinc0	equ	0xFEE
 20427                           wreg	equ	0xFE8
 20428                           postdec1	equ	0xFE5
 20429                           fsr1l	equ	0xFE1
 20430                           indf2	equ	0xFDF
 20431                           postinc2	equ	0xFDE
 20432                           postdec2	equ	0xFDD
 20433                           fsr2h	equ	0xFDA
 20434                           fsr2l	equ	0xFD9
 20435                           status	equ	0xFD8
 20436                           
 20437 ;; *************** function _I2C_Start *****************
 20438 ;; Defined at:
 20439 ;;		line 67 in file "I2C.c"
 20440 ;; Parameters:    Size  Location     Type
 20441 ;;		None
 20442 ;; Auto vars:     Size  Location     Type
 20443 ;;		None
 20444 ;; Return value:  Size  Location     Type
 20445 ;;		None               void
 20446 ;; Registers used:
 20447 ;;		wreg, cstack
 20448 ;; Tracked objects:
 20449 ;;		On entry : 0/0
 20450 ;;		On exit  : 0/0
 20451 ;;		Unchanged: 0/0
 20452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20457 ;;Total ram usage:        0 bytes
 20458 ;; Hardware stack levels used:    1
 20459 ;; Hardware stack levels required when called:    5
 20460 ;; This function calls:
 20461 ;;		_i2cHighScl
 20462 ;;		_i2cHighSda
 20463 ;;		_i2cLowScl
 20464 ;;		_i2cLowSda
 20465 ;; This function is called by:
 20466 ;;		_I2C_Write_Address_Read_One_Byte
 20467 ;;		_I2C_Write_Address_Write_One_Byte
 20468 ;;		_I2C_Write_Cmd_Only
 20469 ;;		_I2C_Write_Cmd_Write_Data
 20470 ;;		_DS1621_Read_Temp
 20471 ;;		_DS3231_Read_Time
 20472 ;;		_DS3231_Write_Time
 20473 ;;		_DS3231_Read_Alarm_Time
 20474 ;;		_DS3231_Init
 20475 ;;		_DS3231_Write_Alarm_Time
 20476 ;;		_I2C_Write_Cmd_Read_One_Byte
 20477 ;;		_DS3231_Setup_Time
 20478 ;; This function uses a non-reentrant model
 20479 ;;
 20480                           
 20481                           	psect	text107
 20482  004D56                     __ptext107:
 20483                           	opt stack 0
 20484  004D56                     _I2C_Start:
 20485                           	opt stack 22
 20486                           
 20487                           ;I2C.c: 69: i2cHighSda();
 20488                           
 20489                           ;incstack = 0
 20490  004D56  EC11  F027         	call	_i2cHighSda	;wreg free
 20491                           
 20492                           ;I2C.c: 70: i2cHighScl();
 20493  004D5A  ECEE  F026         	call	_i2cHighScl	;wreg free
 20494                           
 20495                           ;I2C.c: 71: i2cLowSda();
 20496  004D5E  EC04  F027         	call	_i2cLowSda	;wreg free
 20497                           
 20498                           ;I2C.c: 72: i2cLowScl();
 20499  004D62  EC0D  F027         	call	_i2cLowScl	;wreg free
 20500  004D66  0012               	return		;funcret
 20501  004D68                     __end_of_I2C_Start:
 20502                           	opt stack 0
 20503                           tblptru	equ	0xFF8
 20504                           tblptrh	equ	0xFF7
 20505                           tblptrl	equ	0xFF6
 20506                           tablat	equ	0xFF5
 20507                           prodh	equ	0xFF4
 20508                           prodl	equ	0xFF3
 20509                           intcon	equ	0xFF2
 20510                           intcon2	equ	0xFF1
 20511                           intcon3	equ	0xFF0
 20512                           postinc0	equ	0xFEE
 20513                           wreg	equ	0xFE8
 20514                           postdec1	equ	0xFE5
 20515                           fsr1l	equ	0xFE1
 20516                           indf2	equ	0xFDF
 20517                           postinc2	equ	0xFDE
 20518                           postdec2	equ	0xFDD
 20519                           fsr2h	equ	0xFDA
 20520                           fsr2l	equ	0xFD9
 20521                           status	equ	0xFD8
 20522                           
 20523 ;; *************** function _I2C_Read *****************
 20524 ;; Defined at:
 20525 ;;		line 16 in file "I2C.c"
 20526 ;; Parameters:    Size  Location     Type
 20527 ;;  ack             1    wreg     unsigned char 
 20528 ;; Auto vars:     Size  Location     Type
 20529 ;;  ack             1    0[BANK0 ] unsigned char 
 20530 ;;  inByte          1    2[BANK0 ] unsigned char 
 20531 ;;  n               1    1[BANK0 ] unsigned char 
 20532 ;; Return value:  Size  Location     Type
 20533 ;;                  1    wreg      unsigned char 
 20534 ;; Registers used:
 20535 ;;		wreg, status,2, status,0, cstack
 20536 ;; Tracked objects:
 20537 ;;		On entry : 0/0
 20538 ;;		On exit  : 0/0
 20539 ;;		Unchanged: 0/0
 20540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20542 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20544 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20545 ;;Total ram usage:        3 bytes
 20546 ;; Hardware stack levels used:    1
 20547 ;; Hardware stack levels required when called:    6
 20548 ;; This function calls:
 20549 ;;		_i2cAck
 20550 ;;		_i2cHighScl
 20551 ;;		_i2cHighSda
 20552 ;;		_i2cLowScl
 20553 ;;		_i2cNack
 20554 ;; This function is called by:
 20555 ;;		_I2C_Write_Address_Read_One_Byte
 20556 ;;		_DS1621_Read_Temp
 20557 ;;		_DS3231_Read_Time
 20558 ;;		_DS3231_Read_Alarm_Time
 20559 ;;		_DS3231_Init
 20560 ;;		_I2C_Write_Cmd_Read_One_Byte
 20561 ;; This function uses a non-reentrant model
 20562 ;;
 20563                           
 20564                           	psect	text108
 20565  00436E                     __ptext108:
 20566                           	opt stack 0
 20567  00436E                     _I2C_Read:
 20568                           	opt stack 21
 20569                           
 20570                           ;incstack = 0
 20571                           ;I2C_Read@ack stored from wreg
 20572  00436E  0100               	movlb	0	; () banked
 20573  004370  6FCD               	movwf	I2C_Read@ack& (0+255),b
 20574                           
 20575                           ; BSR set to: 0
 20576                           ;I2C.c: 18: unsigned char inByte, n;
 20577                           ;I2C.c: 19: i2cHighSda();
 20578  004372  EC11  F027         	call	_i2cHighSda	;wreg free
 20579                           
 20580                           ;I2C.c: 20: for (n=0; n<8; n++)
 20581  004376  0E00               	movlw	0
 20582  004378  0100               	movlb	0	; () banked
 20583  00437A  6FCE               	movwf	I2C_Read@n& (0+255),b
 20584  00437C                     l8197:
 20585                           
 20586                           ; BSR set to: 0
 20587  00437C  0E07               	movlw	7
 20588  00437E  0100               	movlb	0	; () banked
 20589  004380  65CE               	cpfsgt	I2C_Read@n& (0+255),b
 20590  004382  D001               	goto	l8201
 20591                           
 20592                           ; BSR set to: 0
 20593  004384  D013               	goto	l8215
 20594  004386                     l8201:
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;I2C.c: 21: {
 20598                           ;I2C.c: 22: i2cHighScl();
 20599  004386  ECEE  F026         	call	_i2cHighScl	;wreg free
 20600                           
 20601                           ;I2C.c: 24: if (PORTDbits.RD1)
 20602  00438A  A283               	btfss	3971,1,c	;volatile
 20603  00438C  D004               	goto	l8207
 20604                           
 20605                           ;I2C.c: 25: inByte = (inByte << 1) | 0x01;
 20606  00438E  80D8               	bsf	status,0,c
 20607  004390  0100               	movlb	0	; () banked
 20608  004392  37CF               	rlcf	I2C_Read@inByte& (0+255),f,b
 20609  004394  D006               	goto	l8209
 20610  004396                     l8207:
 20611                           
 20612                           ;I2C.c: 26: else
 20613                           ;I2C.c: 27: inByte = inByte << 1;
 20614  004396  0100               	movlb	0	; () banked
 20615  004398  51CF               	movf	I2C_Read@inByte& (0+255),w,b
 20616  00439A  25CF               	addwf	I2C_Read@inByte& (0+255),w,b
 20617  00439C  0100               	movlb	0	; () banked
 20618  00439E  6FCF               	movwf	I2C_Read@inByte& (0+255),b
 20619  0043A0  D000               	goto	l8209
 20620  0043A2                     l8209:
 20621                           
 20622                           ; BSR set to: 0
 20623                           ;I2C.c: 28: i2cLowScl();
 20624  0043A2  EC0D  F027         	call	_i2cLowScl	;wreg free
 20625  0043A6  0100               	movlb	0	; () banked
 20626  0043A8  2BCE               	incf	I2C_Read@n& (0+255),f,b
 20627  0043AA  D7E8               	goto	l8197
 20628  0043AC                     l8215:
 20629                           
 20630                           ; BSR set to: 0
 20631                           ;I2C.c: 29: }
 20632                           ;I2C.c: 30: if (ack) i2cAck();
 20633  0043AC  0100               	movlb	0	; () banked
 20634  0043AE  51CD               	movf	I2C_Read@ack& (0+255),w,b
 20635  0043B0  0100               	movlb	0	; () banked
 20636  0043B2  B4D8               	btfsc	status,2,c
 20637  0043B4  D003               	goto	l8219
 20638                           
 20639                           ; BSR set to: 0
 20640  0043B6  ECB4  F026         	call	_i2cAck	;wreg free
 20641  0043BA  D003               	goto	l8221
 20642  0043BC                     l8219:
 20643                           
 20644                           ;I2C.c: 31: else i2cNack();
 20645  0043BC  ECFF  F026         	call	_i2cNack	;wreg free
 20646  0043C0  D000               	goto	l8221
 20647  0043C2                     l8221:
 20648                           
 20649                           ;I2C.c: 34: return(inByte);
 20650  0043C2  0100               	movlb	0	; () banked
 20651  0043C4  51CF               	movf	I2C_Read@inByte& (0+255),w,b
 20652  0043C6  D000               	goto	l72
 20653  0043C8                     l72:
 20654                           
 20655                           ; BSR set to: 0
 20656  0043C8  0012               	return		;funcret
 20657  0043CA                     __end_of_I2C_Read:
 20658                           	opt stack 0
 20659                           tblptru	equ	0xFF8
 20660                           tblptrh	equ	0xFF7
 20661                           tblptrl	equ	0xFF6
 20662                           tablat	equ	0xFF5
 20663                           prodh	equ	0xFF4
 20664                           prodl	equ	0xFF3
 20665                           intcon	equ	0xFF2
 20666                           intcon2	equ	0xFF1
 20667                           intcon3	equ	0xFF0
 20668                           postinc0	equ	0xFEE
 20669                           wreg	equ	0xFE8
 20670                           postdec1	equ	0xFE5
 20671                           fsr1l	equ	0xFE1
 20672                           indf2	equ	0xFDF
 20673                           postinc2	equ	0xFDE
 20674                           postdec2	equ	0xFDD
 20675                           fsr2h	equ	0xFDA
 20676                           fsr2l	equ	0xFD9
 20677                           status	equ	0xFD8
 20678                           
 20679 ;; *************** function _i2cNack *****************
 20680 ;; Defined at:
 20681 ;;		line 53 in file "I2C.c"
 20682 ;; Parameters:    Size  Location     Type
 20683 ;;		None
 20684 ;; Auto vars:     Size  Location     Type
 20685 ;;		None
 20686 ;; Return value:  Size  Location     Type
 20687 ;;		None               void
 20688 ;; Registers used:
 20689 ;;		wreg, cstack
 20690 ;; Tracked objects:
 20691 ;;		On entry : 0/0
 20692 ;;		On exit  : 0/0
 20693 ;;		Unchanged: 0/0
 20694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20699 ;;Total ram usage:        0 bytes
 20700 ;; Hardware stack levels used:    1
 20701 ;; Hardware stack levels required when called:    5
 20702 ;; This function calls:
 20703 ;;		_i2cHighScl
 20704 ;;		_i2cLowScl
 20705 ;; This function is called by:
 20706 ;;		_I2C_Read
 20707 ;; This function uses a non-reentrant model
 20708 ;;
 20709                           
 20710                           	psect	text109
 20711  004DFE                     __ptext109:
 20712                           	opt stack 0
 20713  004DFE                     _i2cNack:
 20714                           	opt stack 21
 20715                           
 20716                           ;I2C.c: 55: i2cHighScl();
 20717                           
 20718                           ; BSR set to: 0
 20719                           ;incstack = 0
 20720  004DFE  ECEE  F026         	call	_i2cHighScl	;wreg free
 20721                           
 20722                           ;I2C.c: 56: i2cLowScl();
 20723  004E02  EC0D  F027         	call	_i2cLowScl	;wreg free
 20724  004E06  0012               	return		;funcret
 20725  004E08                     __end_of_i2cNack:
 20726                           	opt stack 0
 20727                           tblptru	equ	0xFF8
 20728                           tblptrh	equ	0xFF7
 20729                           tblptrl	equ	0xFF6
 20730                           tablat	equ	0xFF5
 20731                           prodh	equ	0xFF4
 20732                           prodl	equ	0xFF3
 20733                           intcon	equ	0xFF2
 20734                           intcon2	equ	0xFF1
 20735                           intcon3	equ	0xFF0
 20736                           postinc0	equ	0xFEE
 20737                           wreg	equ	0xFE8
 20738                           postdec1	equ	0xFE5
 20739                           fsr1l	equ	0xFE1
 20740                           indf2	equ	0xFDF
 20741                           postinc2	equ	0xFDE
 20742                           postdec2	equ	0xFDD
 20743                           fsr2h	equ	0xFDA
 20744                           fsr2l	equ	0xFD9
 20745                           status	equ	0xFD8
 20746                           
 20747 ;; *************** function _i2cAck *****************
 20748 ;; Defined at:
 20749 ;;		line 59 in file "I2C.c"
 20750 ;; Parameters:    Size  Location     Type
 20751 ;;		None
 20752 ;; Auto vars:     Size  Location     Type
 20753 ;;		None
 20754 ;; Return value:  Size  Location     Type
 20755 ;;		None               void
 20756 ;; Registers used:
 20757 ;;		wreg, cstack
 20758 ;; Tracked objects:
 20759 ;;		On entry : 0/0
 20760 ;;		On exit  : 0/0
 20761 ;;		Unchanged: 0/0
 20762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;Total ram usage:        0 bytes
 20768 ;; Hardware stack levels used:    1
 20769 ;; Hardware stack levels required when called:    5
 20770 ;; This function calls:
 20771 ;;		_i2cHighScl
 20772 ;;		_i2cHighSda
 20773 ;;		_i2cLowScl
 20774 ;;		_i2cLowSda
 20775 ;; This function is called by:
 20776 ;;		_I2C_Read
 20777 ;; This function uses a non-reentrant model
 20778 ;;
 20779                           
 20780                           	psect	text110
 20781  004D68                     __ptext110:
 20782                           	opt stack 0
 20783  004D68                     _i2cAck:
 20784                           	opt stack 21
 20785                           
 20786                           ;I2C.c: 61: i2cLowSda();
 20787                           
 20788                           ;incstack = 0
 20789  004D68  EC04  F027         	call	_i2cLowSda	;wreg free
 20790                           
 20791                           ;I2C.c: 62: i2cHighScl();
 20792  004D6C  ECEE  F026         	call	_i2cHighScl	;wreg free
 20793                           
 20794                           ;I2C.c: 63: i2cLowScl();
 20795  004D70  EC0D  F027         	call	_i2cLowScl	;wreg free
 20796                           
 20797                           ;I2C.c: 64: i2cHighSda();
 20798  004D74  EC11  F027         	call	_i2cHighSda	;wreg free
 20799  004D78  0012               	return		;funcret
 20800  004D7A                     __end_of_i2cAck:
 20801                           	opt stack 0
 20802                           tblptru	equ	0xFF8
 20803                           tblptrh	equ	0xFF7
 20804                           tblptrl	equ	0xFF6
 20805                           tablat	equ	0xFF5
 20806                           prodh	equ	0xFF4
 20807                           prodl	equ	0xFF3
 20808                           intcon	equ	0xFF2
 20809                           intcon2	equ	0xFF1
 20810                           intcon3	equ	0xFF0
 20811                           postinc0	equ	0xFEE
 20812                           wreg	equ	0xFE8
 20813                           postdec1	equ	0xFE5
 20814                           fsr1l	equ	0xFE1
 20815                           indf2	equ	0xFDF
 20816                           postinc2	equ	0xFDE
 20817                           postdec2	equ	0xFDD
 20818                           fsr2h	equ	0xFDA
 20819                           fsr2l	equ	0xFD9
 20820                           status	equ	0xFD8
 20821                           
 20822 ;; *************** function _I2C_ReStart *****************
 20823 ;; Defined at:
 20824 ;;		line 75 in file "I2C.c"
 20825 ;; Parameters:    Size  Location     Type
 20826 ;;		None
 20827 ;; Auto vars:     Size  Location     Type
 20828 ;;		None
 20829 ;; Return value:  Size  Location     Type
 20830 ;;		None               void
 20831 ;; Registers used:
 20832 ;;		wreg, cstack
 20833 ;; Tracked objects:
 20834 ;;		On entry : 0/0
 20835 ;;		On exit  : 0/0
 20836 ;;		Unchanged: 0/0
 20837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20842 ;;Total ram usage:        0 bytes
 20843 ;; Hardware stack levels used:    1
 20844 ;; Hardware stack levels required when called:    5
 20845 ;; This function calls:
 20846 ;;		_i2cHighScl
 20847 ;;		_i2cHighSda
 20848 ;;		_i2cLowScl
 20849 ;;		_i2cLowSda
 20850 ;; This function is called by:
 20851 ;;		_I2C_Write_Address_Read_One_Byte
 20852 ;;		_DS1621_Read_Temp
 20853 ;;		_DS3231_Read_Time
 20854 ;;		_DS3231_Read_Alarm_Time
 20855 ;;		_DS3231_Init
 20856 ;;		_I2C_Write_Cmd_Read_One_Byte
 20857 ;; This function uses a non-reentrant model
 20858 ;;
 20859                           
 20860                           	psect	text111
 20861  004C86                     __ptext111:
 20862                           	opt stack 0
 20863  004C86                     _I2C_ReStart:
 20864                           	opt stack 22
 20865                           
 20866                           ;I2C.c: 77: i2cLowScl();
 20867                           
 20868                           ;incstack = 0
 20869  004C86  EC0D  F027         	call	_i2cLowScl	;wreg free
 20870                           
 20871                           ;I2C.c: 78: i2cHighSda();
 20872  004C8A  EC11  F027         	call	_i2cHighSda	;wreg free
 20873                           
 20874                           ;I2C.c: 79: i2cHighScl();
 20875  004C8E  ECEE  F026         	call	_i2cHighScl	;wreg free
 20876                           
 20877                           ;I2C.c: 80: i2cLowSda();
 20878  004C92  EC04  F027         	call	_i2cLowSda	;wreg free
 20879                           
 20880                           ;I2C.c: 81: i2cLowScl();
 20881  004C96  EC0D  F027         	call	_i2cLowScl	;wreg free
 20882  004C9A  0012               	return		;funcret
 20883  004C9C                     __end_of_I2C_ReStart:
 20884                           	opt stack 0
 20885                           tblptru	equ	0xFF8
 20886                           tblptrh	equ	0xFF7
 20887                           tblptrl	equ	0xFF6
 20888                           tablat	equ	0xFF5
 20889                           prodh	equ	0xFF4
 20890                           prodl	equ	0xFF3
 20891                           intcon	equ	0xFF2
 20892                           intcon2	equ	0xFF1
 20893                           intcon3	equ	0xFF0
 20894                           postinc0	equ	0xFEE
 20895                           wreg	equ	0xFE8
 20896                           postdec1	equ	0xFE5
 20897                           fsr1l	equ	0xFE1
 20898                           indf2	equ	0xFDF
 20899                           postinc2	equ	0xFDE
 20900                           postdec2	equ	0xFDD
 20901                           fsr2h	equ	0xFDA
 20902                           fsr2l	equ	0xFD9
 20903                           status	equ	0xFD8
 20904                           
 20905 ;; *************** function _i2cLowSda *****************
 20906 ;; Defined at:
 20907 ;;		line 98 in file "I2C.c"
 20908 ;; Parameters:    Size  Location     Type
 20909 ;;		None
 20910 ;; Auto vars:     Size  Location     Type
 20911 ;;		None
 20912 ;; Return value:  Size  Location     Type
 20913 ;;		None               void
 20914 ;; Registers used:
 20915 ;;		None
 20916 ;; Tracked objects:
 20917 ;;		On entry : 0/0
 20918 ;;		On exit  : 0/0
 20919 ;;		Unchanged: 0/0
 20920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20925 ;;Total ram usage:        0 bytes
 20926 ;; Hardware stack levels used:    1
 20927 ;; Hardware stack levels required when called:    4
 20928 ;; This function calls:
 20929 ;;		Nothing
 20930 ;; This function is called by:
 20931 ;;		_I2C_Write
 20932 ;;		_i2cAck
 20933 ;;		_I2C_Start
 20934 ;;		_I2C_ReStart
 20935 ;;		_I2C_Stop
 20936 ;; This function uses a non-reentrant model
 20937 ;;
 20938                           
 20939                           	psect	text112
 20940  004E08                     __ptext112:
 20941                           	opt stack 0
 20942  004E08                     _i2cLowSda:
 20943                           	opt stack 22
 20944                           
 20945                           ;I2C.c: 100: PORTDbits.RD1 = 0;
 20946                           
 20947                           ;incstack = 0
 20948  004E08  9283               	bcf	3971,1,c	;volatile
 20949                           
 20950                           ;I2C.c: 101: TRISDbits.RD1 = 0;
 20951  004E0A  9295               	bcf	3989,1,c	;volatile
 20952                           
 20953                           ;I2C.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 20954  004E0C  D000               	nop2		;2 cycle nop
 20955  004E0E  D000               	nop2		;2 cycle nop
 20956  004E10  0012               	return		;funcret
 20957  004E12                     __end_of_i2cLowSda:
 20958                           	opt stack 0
 20959                           tblptru	equ	0xFF8
 20960                           tblptrh	equ	0xFF7
 20961                           tblptrl	equ	0xFF6
 20962                           tablat	equ	0xFF5
 20963                           prodh	equ	0xFF4
 20964                           prodl	equ	0xFF3
 20965                           intcon	equ	0xFF2
 20966                           intcon2	equ	0xFF1
 20967                           intcon3	equ	0xFF0
 20968                           postinc0	equ	0xFEE
 20969                           wreg	equ	0xFE8
 20970                           postdec1	equ	0xFE5
 20971                           fsr1l	equ	0xFE1
 20972                           indf2	equ	0xFDF
 20973                           postinc2	equ	0xFDE
 20974                           postdec2	equ	0xFDD
 20975                           fsr2h	equ	0xFDA
 20976                           fsr2l	equ	0xFD9
 20977                           status	equ	0xFD8
 20978                           
 20979 ;; *************** function _i2cLowScl *****************
 20980 ;; Defined at:
 20981 ;;		line 111 in file "I2C.c"
 20982 ;; Parameters:    Size  Location     Type
 20983 ;;		None
 20984 ;; Auto vars:     Size  Location     Type
 20985 ;;		None
 20986 ;; Return value:  Size  Location     Type
 20987 ;;		None               void
 20988 ;; Registers used:
 20989 ;;		None
 20990 ;; Tracked objects:
 20991 ;;		On entry : 0/0
 20992 ;;		On exit  : 0/0
 20993 ;;		Unchanged: 0/0
 20994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20999 ;;Total ram usage:        0 bytes
 21000 ;; Hardware stack levels used:    1
 21001 ;; Hardware stack levels required when called:    4
 21002 ;; This function calls:
 21003 ;;		Nothing
 21004 ;; This function is called by:
 21005 ;;		_I2C_Read
 21006 ;;		_I2C_Write
 21007 ;;		_i2cNack
 21008 ;;		_i2cAck
 21009 ;;		_I2C_Start
 21010 ;;		_I2C_ReStart
 21011 ;;		_I2C_Stop
 21012 ;; This function uses a non-reentrant model
 21013 ;;
 21014                           
 21015                           	psect	text113
 21016  004E1A                     __ptext113:
 21017                           	opt stack 0
 21018  004E1A                     _i2cLowScl:
 21019                           	opt stack 22
 21020                           
 21021                           ;I2C.c: 113: PORTDbits.RD0 = 0;
 21022                           
 21023                           ;incstack = 0
 21024  004E1A  9083               	bcf	3971,0,c	;volatile
 21025                           
 21026                           ;I2C.c: 114: TRISDbits.RD0 = 0;
 21027  004E1C  9095               	bcf	3989,0,c	;volatile
 21028                           
 21029                           ;I2C.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 21030  004E1E  D000               	nop2		;2 cycle nop
 21031  004E20  0012               	return		;funcret
 21032  004E22                     __end_of_i2cLowScl:
 21033                           	opt stack 0
 21034                           tblptru	equ	0xFF8
 21035                           tblptrh	equ	0xFF7
 21036                           tblptrl	equ	0xFF6
 21037                           tablat	equ	0xFF5
 21038                           prodh	equ	0xFF4
 21039                           prodl	equ	0xFF3
 21040                           intcon	equ	0xFF2
 21041                           intcon2	equ	0xFF1
 21042                           intcon3	equ	0xFF0
 21043                           postinc0	equ	0xFEE
 21044                           wreg	equ	0xFE8
 21045                           postdec1	equ	0xFE5
 21046                           fsr1l	equ	0xFE1
 21047                           indf2	equ	0xFDF
 21048                           postinc2	equ	0xFDE
 21049                           postdec2	equ	0xFDD
 21050                           fsr2h	equ	0xFDA
 21051                           fsr2l	equ	0xFD9
 21052                           status	equ	0xFD8
 21053                           
 21054 ;; *************** function _i2cHighSda *****************
 21055 ;; Defined at:
 21056 ;;		line 92 in file "I2C.c"
 21057 ;; Parameters:    Size  Location     Type
 21058 ;;		None
 21059 ;; Auto vars:     Size  Location     Type
 21060 ;;		None
 21061 ;; Return value:  Size  Location     Type
 21062 ;;		None               void
 21063 ;; Registers used:
 21064 ;;		None
 21065 ;; Tracked objects:
 21066 ;;		On entry : 0/0
 21067 ;;		On exit  : 0/0
 21068 ;;		Unchanged: 0/0
 21069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21074 ;;Total ram usage:        0 bytes
 21075 ;; Hardware stack levels used:    1
 21076 ;; Hardware stack levels required when called:    4
 21077 ;; This function calls:
 21078 ;;		Nothing
 21079 ;; This function is called by:
 21080 ;;		_I2C_Init
 21081 ;;		_I2C_Read
 21082 ;;		_I2C_Write
 21083 ;;		_i2cAck
 21084 ;;		_I2C_Start
 21085 ;;		_I2C_ReStart
 21086 ;;		_I2C_Stop
 21087 ;; This function uses a non-reentrant model
 21088 ;;
 21089                           
 21090                           	psect	text114
 21091  004E22                     __ptext114:
 21092                           	opt stack 0
 21093  004E22                     _i2cHighSda:
 21094                           	opt stack 22
 21095                           
 21096                           ;I2C.c: 94: TRISDbits.RD1 = 1;
 21097                           
 21098                           ;incstack = 0
 21099  004E22  8295               	bsf	3989,1,c	;volatile
 21100                           
 21101                           ;I2C.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 21102  004E24  D000               	nop2		;2 cycle nop
 21103  004E26  D000               	nop2		;2 cycle nop
 21104  004E28  0012               	return		;funcret
 21105  004E2A                     __end_of_i2cHighSda:
 21106                           	opt stack 0
 21107                           tblptru	equ	0xFF8
 21108                           tblptrh	equ	0xFF7
 21109                           tblptrl	equ	0xFF6
 21110                           tablat	equ	0xFF5
 21111                           prodh	equ	0xFF4
 21112                           prodl	equ	0xFF3
 21113                           intcon	equ	0xFF2
 21114                           intcon2	equ	0xFF1
 21115                           intcon3	equ	0xFF0
 21116                           postinc0	equ	0xFEE
 21117                           wreg	equ	0xFE8
 21118                           postdec1	equ	0xFE5
 21119                           fsr1l	equ	0xFE1
 21120                           indf2	equ	0xFDF
 21121                           postinc2	equ	0xFDE
 21122                           postdec2	equ	0xFDD
 21123                           fsr2h	equ	0xFDA
 21124                           fsr2l	equ	0xFD9
 21125                           status	equ	0xFD8
 21126                           
 21127 ;; *************** function _i2cHighScl *****************
 21128 ;; Defined at:
 21129 ;;		line 105 in file "I2C.c"
 21130 ;; Parameters:    Size  Location     Type
 21131 ;;		None
 21132 ;; Auto vars:     Size  Location     Type
 21133 ;;		None
 21134 ;; Return value:  Size  Location     Type
 21135 ;;		None               void
 21136 ;; Registers used:
 21137 ;;		wreg
 21138 ;; Tracked objects:
 21139 ;;		On entry : 0/0
 21140 ;;		On exit  : 0/0
 21141 ;;		Unchanged: 0/0
 21142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21147 ;;Total ram usage:        0 bytes
 21148 ;; Hardware stack levels used:    1
 21149 ;; Hardware stack levels required when called:    4
 21150 ;; This function calls:
 21151 ;;		Nothing
 21152 ;; This function is called by:
 21153 ;;		_I2C_Init
 21154 ;;		_I2C_Read
 21155 ;;		_I2C_Write
 21156 ;;		_i2cNack
 21157 ;;		_i2cAck
 21158 ;;		_I2C_Start
 21159 ;;		_I2C_ReStart
 21160 ;;		_I2C_Stop
 21161 ;; This function uses a non-reentrant model
 21162 ;;
 21163                           
 21164                           	psect	text115
 21165  004DDC                     __ptext115:
 21166                           	opt stack 0
 21167  004DDC                     _i2cHighScl:
 21168                           	opt stack 22
 21169                           
 21170                           ;I2C.c: 107: TRISDbits.RD0 = 1;
 21171                           
 21172                           ;incstack = 0
 21173  004DDC  8095               	bsf	3989,0,c	;volatile
 21174                           
 21175                           ;I2C.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 21176  004DDE  0E06               	movlw	6
 21177  004DE0                     u8347:
 21178  004DE0  2EE8               	decfsz	wreg,f,c
 21179  004DE2  D7FE               	goto	u8347
 21180  004DE4  D000               	nop2		;nop
 21181  004DE6  0012               	return		;funcret
 21182  004DE8                     __end_of_i2cHighScl:
 21183                           	opt stack 0
 21184                           tblptru	equ	0xFF8
 21185                           tblptrh	equ	0xFF7
 21186                           tblptrl	equ	0xFF6
 21187                           tablat	equ	0xFF5
 21188                           prodh	equ	0xFF4
 21189                           prodl	equ	0xFF3
 21190                           intcon	equ	0xFF2
 21191                           intcon2	equ	0xFF1
 21192                           intcon3	equ	0xFF0
 21193                           postinc0	equ	0xFEE
 21194                           wreg	equ	0xFE8
 21195                           postdec1	equ	0xFE5
 21196                           fsr1l	equ	0xFE1
 21197                           indf2	equ	0xFDF
 21198                           postinc2	equ	0xFDE
 21199                           postdec2	equ	0xFDD
 21200                           fsr2h	equ	0xFDA
 21201                           fsr2l	equ	0xFD9
 21202                           status	equ	0xFD8
 21203                           
 21204 ;; *************** function _chkisr *****************
 21205 ;; Defined at:
 21206 ;;		line 39 in file "Interrupt.c"
 21207 ;; Parameters:    Size  Location     Type
 21208 ;;		None
 21209 ;; Auto vars:     Size  Location     Type
 21210 ;;		None
 21211 ;; Return value:  Size  Location     Type
 21212 ;;		None               void
 21213 ;; Registers used:
 21214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21215 ;; Tracked objects:
 21216 ;;		On entry : 0/0
 21217 ;;		On exit  : 0/0
 21218 ;;		Unchanged: 0/0
 21219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21222 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21223 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21224 ;;Total ram usage:       14 bytes
 21225 ;; Hardware stack levels used:    1
 21226 ;; Hardware stack levels required when called:    3
 21227 ;; This function calls:
 21228 ;;		_INT0_isr
 21229 ;;		_INT1_isr
 21230 ;;		_INT2_isr
 21231 ;;		_TIMER1_isr
 21232 ;; This function is called by:
 21233 ;;		Interrupt level 2
 21234 ;; This function uses a non-reentrant model
 21235 ;;
 21236                           
 21237                           	psect	intcode
 21238  000008                     __pintcode:
 21239                           	opt stack 0
 21240  000008                     _chkisr:
 21241                           	opt stack 17
 21242                           
 21243                           ;incstack = 0
 21244  000008  CFFA F01F          	movff	pclath,??_chkisr
 21245  00000C  CFFB F020          	movff	pclatu,??_chkisr+1
 21246  000010  CFE9 F021          	movff	fsr0l,??_chkisr+2
 21247  000014  ED0B  F01E         	call	int_func,f	;refresh shadow registers
 21248                           pclatu	equ	0xFFB
 21249                           pclath	equ	0xFFA
 21250                           tblptru	equ	0xFF8
 21251                           tblptrh	equ	0xFF7
 21252                           tblptrl	equ	0xFF6
 21253                           tablat	equ	0xFF5
 21254                           prodh	equ	0xFF4
 21255                           prodl	equ	0xFF3
 21256                           intcon	equ	0xFF2
 21257                           intcon2	equ	0xFF1
 21258                           intcon3	equ	0xFF0
 21259                           postinc0	equ	0xFEE
 21260                           fsr0l	equ	0xFE9
 21261                           wreg	equ	0xFE8
 21262                           postdec1	equ	0xFE5
 21263                           fsr1l	equ	0xFE1
 21264                           indf2	equ	0xFDF
 21265                           postinc2	equ	0xFDE
 21266                           postdec2	equ	0xFDD
 21267                           fsr2h	equ	0xFDA
 21268                           fsr2l	equ	0xFD9
 21269                           status	equ	0xFD8
 21270                           
 21271                           	psect	intcode_body
 21272  003C16                     __pintcode_body:
 21273                           	opt stack 17
 21274  003C16                     int_func:
 21275                           	opt stack 17
 21276  003C16  0006               	pop		; remove dummy address from shadow register refresh
 21277  003C18  CFEA F022          	movff	fsr0h,??_chkisr+3
 21278  003C1C  CFE1 F023          	movff	fsr1l,??_chkisr+4
 21279  003C20  CFE2 F024          	movff	fsr1h,??_chkisr+5
 21280  003C24  CFD9 F025          	movff	fsr2l,??_chkisr+6
 21281  003C28  CFDA F026          	movff	fsr2h,??_chkisr+7
 21282  003C2C  CFF3 F027          	movff	prodl,??_chkisr+8
 21283  003C30  CFF4 F028          	movff	prodh,??_chkisr+9
 21284  003C34  CFF6 F029          	movff	tblptrl,??_chkisr+10
 21285  003C38  CFF7 F02A          	movff	tblptrh,??_chkisr+11
 21286  003C3C  CFF8 F02B          	movff	tblptru,??_chkisr+12
 21287  003C40  CFF5 F02C          	movff	tablat,??_chkisr+13
 21288                           
 21289                           ;Interrupt.c: 42: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 21290  003C44  A09E               	btfss	3998,0,c	;volatile
 21291  003C46  D003               	goto	i2l7745
 21292  003C48  ECF4  F026         	call	_TIMER1_isr	;wreg free
 21293  003C4C  D000               	goto	i2l7745
 21294  003C4E                     i2l7745:
 21295                           
 21296                           ;Interrupt.c: 44: if (INTCONbits.INT0IF == 1) INT0_isr();
 21297  003C4E  A2F2               	btfss	intcon,1,c	;volatile
 21298  003C50  D003               	goto	i2l7749
 21299  003C52  ECA6  F010         	call	_INT0_isr	;wreg free
 21300  003C56  D000               	goto	i2l7749
 21301  003C58                     i2l7749:
 21302                           
 21303                           ;Interrupt.c: 46: if (INTCON3bits.INT1IF == 1) INT1_isr();
 21304  003C58  A0F0               	btfss	intcon3,0,c	;volatile
 21305  003C5A  D003               	goto	i2l7753
 21306  003C5C  EC15  F027         	call	_INT1_isr	;wreg free
 21307  003C60  D000               	goto	i2l7753
 21308  003C62                     i2l7753:
 21309                           
 21310                           ;Interrupt.c: 48: if (INTCON3bits.INT2IF == 1) INT2_isr();
 21311  003C62  A2F0               	btfss	intcon3,1,c	;volatile
 21312  003C64  D003               	goto	i2l265
 21313  003C66  ECC9  F025         	call	_INT2_isr	;wreg free
 21314  003C6A  D000               	goto	i2l265
 21315  003C6C                     i2l265:
 21316  003C6C  C02C  FFF5         	movff	??_chkisr+13,tablat
 21317  003C70  C02B  FFF8         	movff	??_chkisr+12,tblptru
 21318  003C74  C02A  FFF7         	movff	??_chkisr+11,tblptrh
 21319  003C78  C029  FFF6         	movff	??_chkisr+10,tblptrl
 21320  003C7C  C028  FFF4         	movff	??_chkisr+9,prodh
 21321  003C80  C027  FFF3         	movff	??_chkisr+8,prodl
 21322  003C84  C026  FFDA         	movff	??_chkisr+7,fsr2h
 21323  003C88  C025  FFD9         	movff	??_chkisr+6,fsr2l
 21324  003C8C  C024  FFE2         	movff	??_chkisr+5,fsr1h
 21325  003C90  C023  FFE1         	movff	??_chkisr+4,fsr1l
 21326  003C94  C022  FFEA         	movff	??_chkisr+3,fsr0h
 21327  003C98  C021  FFE9         	movff	??_chkisr+2,fsr0l
 21328  003C9C  C020  FFFB         	movff	??_chkisr+1,pclatu
 21329  003CA0  C01F  FFFA         	movff	??_chkisr,pclath
 21330  003CA4  0011               	retfie		f
 21331  003CA6                     __end_of_chkisr:
 21332                           	opt stack 0
 21333                           pclatu	equ	0xFFB
 21334                           pclath	equ	0xFFA
 21335                           tblptru	equ	0xFF8
 21336                           tblptrh	equ	0xFF7
 21337                           tblptrl	equ	0xFF6
 21338                           tablat	equ	0xFF5
 21339                           prodh	equ	0xFF4
 21340                           prodl	equ	0xFF3
 21341                           intcon	equ	0xFF2
 21342                           intcon2	equ	0xFF1
 21343                           intcon3	equ	0xFF0
 21344                           postinc0	equ	0xFEE
 21345                           fsr0h	equ	0xFEA
 21346                           fsr0l	equ	0xFE9
 21347                           wreg	equ	0xFE8
 21348                           postdec1	equ	0xFE5
 21349                           fsr1h	equ	0xFE2
 21350                           fsr1l	equ	0xFE1
 21351                           indf2	equ	0xFDF
 21352                           postinc2	equ	0xFDE
 21353                           postdec2	equ	0xFDD
 21354                           fsr2h	equ	0xFDA
 21355                           fsr2l	equ	0xFD9
 21356                           status	equ	0xFD8
 21357                           
 21358 ;; *************** function _TIMER1_isr *****************
 21359 ;; Defined at:
 21360 ;;		line 54 in file "Interrupt.c"
 21361 ;; Parameters:    Size  Location     Type
 21362 ;;		None
 21363 ;; Auto vars:     Size  Location     Type
 21364 ;;		None
 21365 ;; Return value:  Size  Location     Type
 21366 ;;		None               void
 21367 ;; Registers used:
 21368 ;;		wreg, status,2
 21369 ;; Tracked objects:
 21370 ;;		On entry : 0/0
 21371 ;;		On exit  : 0/0
 21372 ;;		Unchanged: 0/0
 21373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21378 ;;Total ram usage:        0 bytes
 21379 ;; Hardware stack levels used:    1
 21380 ;; This function calls:
 21381 ;;		Nothing
 21382 ;; This function is called by:
 21383 ;;		_chkisr
 21384 ;; This function uses a non-reentrant model
 21385 ;;
 21386                           
 21387                           	psect	text117
 21388  004DE8                     __ptext117:
 21389                           	opt stack 0
 21390  004DE8                     _TIMER1_isr:
 21391                           	opt stack 19
 21392                           
 21393                           ;Interrupt.c: 56: Nec_state = 0;
 21394                           
 21395                           ;incstack = 0
 21396  004DE8  0E00               	movlw	0
 21397  004DEA  6E4B               	movwf	_Nec_state,c
 21398                           
 21399                           ;Interrupt.c: 57: INTCON2bits.INTEDG0 = 0;
 21400  004DEC  9CF1               	bcf	intcon2,6,c	;volatile
 21401                           
 21402                           ;Interrupt.c: 58: T1CONbits.TMR1ON = 0;
 21403  004DEE  90CD               	bcf	4045,0,c	;volatile
 21404                           
 21405                           ;Interrupt.c: 59: PIR1bits.TMR1IF = 0;
 21406  004DF0  909E               	bcf	3998,0,c	;volatile
 21407  004DF2  0012               	return		;funcret
 21408  004DF4                     __end_of_TIMER1_isr:
 21409                           	opt stack 0
 21410                           pclatu	equ	0xFFB
 21411                           pclath	equ	0xFFA
 21412                           tblptru	equ	0xFF8
 21413                           tblptrh	equ	0xFF7
 21414                           tblptrl	equ	0xFF6
 21415                           tablat	equ	0xFF5
 21416                           prodh	equ	0xFF4
 21417                           prodl	equ	0xFF3
 21418                           intcon	equ	0xFF2
 21419                           intcon2	equ	0xFF1
 21420                           intcon3	equ	0xFF0
 21421                           postinc0	equ	0xFEE
 21422                           fsr0h	equ	0xFEA
 21423                           fsr0l	equ	0xFE9
 21424                           wreg	equ	0xFE8
 21425                           postdec1	equ	0xFE5
 21426                           fsr1h	equ	0xFE2
 21427                           fsr1l	equ	0xFE1
 21428                           indf2	equ	0xFDF
 21429                           postinc2	equ	0xFDE
 21430                           postdec2	equ	0xFDD
 21431                           fsr2h	equ	0xFDA
 21432                           fsr2l	equ	0xFD9
 21433                           status	equ	0xFD8
 21434                           
 21435 ;; *************** function _INT2_isr *****************
 21436 ;; Defined at:
 21437 ;;		line 189 in file "Interrupt.c"
 21438 ;; Parameters:    Size  Location     Type
 21439 ;;		None
 21440 ;; Auto vars:     Size  Location     Type
 21441 ;;		None
 21442 ;; Return value:  Size  Location     Type
 21443 ;;		None               void
 21444 ;; Registers used:
 21445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21446 ;; Tracked objects:
 21447 ;;		On entry : 0/0
 21448 ;;		On exit  : 0/0
 21449 ;;		Unchanged: 0/0
 21450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21455 ;;Total ram usage:        0 bytes
 21456 ;; Hardware stack levels used:    1
 21457 ;; Hardware stack levels required when called:    2
 21458 ;; This function calls:
 21459 ;;		i2_printf
 21460 ;; This function is called by:
 21461 ;;		_chkisr
 21462 ;; This function uses a non-reentrant model
 21463 ;;
 21464                           
 21465                           	psect	text118
 21466  004B92                     __ptext118:
 21467                           	opt stack 0
 21468  004B92                     _INT2_isr:
 21469                           	opt stack 17
 21470                           
 21471                           ;Interrupt.c: 192: printf("INT2 interrupt pin detected %d\r\n", 7);
 21472                           
 21473                           ;incstack = 0
 21474  004B92  0E68               	movlw	low STR_1
 21475  004B94  6E0D               	movwf	i2printf@f,c
 21476  004B96  0EFE               	movlw	high STR_1
 21477  004B98  6E0E               	movwf	i2printf@f+1,c
 21478  004B9A  0E00               	movlw	0
 21479  004B9C  6E10               	movwf	?i2_printf+3,c
 21480  004B9E  0E07               	movlw	7
 21481  004BA0  6E0F               	movwf	?i2_printf+2,c
 21482  004BA2  ECEE  F007         	call	i2_printf	;wreg free
 21483                           
 21484                           ;Interrupt.c: 193: INTCON3bits.INT2IF=0;
 21485  004BA6  92F0               	bcf	intcon3,1,c	;volatile
 21486                           
 21487                           ;Interrupt.c: 194: INT2_flag = 1;
 21488  004BA8  0E01               	movlw	1
 21489  004BAA  0100               	movlb	0	; () banked
 21490  004BAC  6FF2               	movwf	_INT2_flag& (0+255),b
 21491                           
 21492                           ; BSR set to: 0
 21493  004BAE  0012               	return		;funcret
 21494  004BB0                     __end_of_INT2_isr:
 21495                           	opt stack 0
 21496                           pclatu	equ	0xFFB
 21497                           pclath	equ	0xFFA
 21498                           tblptru	equ	0xFF8
 21499                           tblptrh	equ	0xFF7
 21500                           tblptrl	equ	0xFF6
 21501                           tablat	equ	0xFF5
 21502                           prodh	equ	0xFF4
 21503                           prodl	equ	0xFF3
 21504                           intcon	equ	0xFF2
 21505                           intcon2	equ	0xFF1
 21506                           intcon3	equ	0xFF0
 21507                           postinc0	equ	0xFEE
 21508                           fsr0h	equ	0xFEA
 21509                           fsr0l	equ	0xFE9
 21510                           wreg	equ	0xFE8
 21511                           postdec1	equ	0xFE5
 21512                           fsr1h	equ	0xFE2
 21513                           fsr1l	equ	0xFE1
 21514                           indf2	equ	0xFDF
 21515                           postinc2	equ	0xFDE
 21516                           postdec2	equ	0xFDD
 21517                           fsr2h	equ	0xFDA
 21518                           fsr2l	equ	0xFD9
 21519                           status	equ	0xFD8
 21520                           
 21521 ;; *************** function i2_printf *****************
 21522 ;; Defined at:
 21523 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 21524 ;; Parameters:    Size  Location     Type
 21525 ;;  f               2   12[COMRAM] PTR const unsigned char 
 21526 ;;		 -> STR_38(22), STR_37(16), STR_28(11), STR_5(20), 
 21527 ;;		 -> STR_4(24), STR_3(21), STR_2(30), STR_1(33), 
 21528 ;; Auto vars:     Size  Location     Type
 21529 ;;  printf          4    0        struct .
 21530 ;;  printf          3    0        PTR const unsigned char 
 21531 ;;  printf          2   27[COMRAM] int 
 21532 ;;  printf          2   24[COMRAM] unsigned int 
 21533 ;;  printf          2   21[COMRAM] PTR void [1]
 21534 ;;		 -> ?i2_printf(2), ?_printf(2), 
 21535 ;;  printf          2    0        unsigned int 
 21536 ;;  printf          1   29[COMRAM] char 
 21537 ;;  printf          1   26[COMRAM] unsigned char 
 21538 ;;  printf          1   23[COMRAM] char 
 21539 ;;  printf          1   20[COMRAM] unsigned char 
 21540 ;; Return value:  Size  Location     Type
 21541 ;;                  2   12[COMRAM] int 
 21542 ;; Registers used:
 21543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21544 ;; Tracked objects:
 21545 ;;		On entry : 0/0
 21546 ;;		On exit  : 0/0
 21547 ;;		Unchanged: 0/0
 21548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21549 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21550 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21551 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21552 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21553 ;;Total ram usage:       18 bytes
 21554 ;; Hardware stack levels used:    1
 21555 ;; Hardware stack levels required when called:    1
 21556 ;; This function calls:
 21557 ;;		i2___lwdiv
 21558 ;;		i2___lwmod
 21559 ;;		i2___wmul
 21560 ;;		i2_isdigit
 21561 ;;		i2_putch
 21562 ;; This function is called by:
 21563 ;;		_INT2_isr
 21564 ;; This function uses a non-reentrant model
 21565 ;;
 21566                           
 21567                           	psect	text119
 21568  000FDC                     __ptext119:
 21569                           	opt stack 0
 21570  000FDC                     i2_printf:
 21571                           	opt stack 17
 21572                           
 21573                           ;doprnt.c: 466: va_list ap;
 21574                           ;doprnt.c: 499: signed char c;
 21575                           ;doprnt.c: 501: int width;
 21576                           ;doprnt.c: 506: signed char prec;
 21577                           ;doprnt.c: 508: unsigned char flag;
 21578                           ;doprnt.c: 523: union {
 21579                           ;doprnt.c: 524: unsigned long vd;
 21580                           ;doprnt.c: 525: double integ;
 21581                           ;doprnt.c: 526: } tmpval;
 21582                           ;doprnt.c: 528: unsigned int val;
 21583                           ;doprnt.c: 529: unsigned len;
 21584                           ;doprnt.c: 530: const char * cp;
 21585                           ;doprnt.c: 533: *ap = __va_start();
 21586                           
 21587                           ; BSR set to: 0
 21588                           ;incstack = 0
 21589  000FDC  0E0F               	movlw	low (?i2_printf+2)
 21590  000FDE  6E16               	movwf	i2printf@ap,c
 21591  000FE0  0E00               	movlw	high (?i2_printf+2)
 21592  000FE2  6E17               	movwf	i2printf@ap+1,c
 21593                           
 21594                           ;doprnt.c: 536: while(c = *f++) {
 21595  000FE4  D199               	goto	i2l7165
 21596  000FE6                     i2l7039:
 21597                           
 21598                           ;doprnt.c: 538: if(c != '%')
 21599  000FE6  0E25               	movlw	37
 21600  000FE8  181E               	xorwf	i2printf@c,w,c
 21601  000FEA  B4D8               	btfsc	status,2,c
 21602  000FEC  D004               	goto	i2l7043
 21603                           
 21604                           ;doprnt.c: 540: {
 21605                           ;doprnt.c: 541: (putch(c) );
 21606  000FEE  501E               	movf	i2printf@c,w,c
 21607  000FF0  ECE1  F026         	call	i2_putch
 21608                           
 21609                           ;doprnt.c: 542: continue;
 21610  000FF4  D191               	goto	i2l7165
 21611  000FF6                     i2l7043:
 21612                           
 21613                           ;doprnt.c: 543: }
 21614                           ;doprnt.c: 546: width = 0;
 21615  000FF6  0E00               	movlw	0
 21616  000FF8  6E1D               	movwf	i2printf@width+1,c
 21617  000FFA  0E00               	movlw	0
 21618  000FFC  6E1C               	movwf	i2printf@width,c
 21619                           
 21620                           ;doprnt.c: 548: flag = 0;
 21621  000FFE  0E00               	movlw	0
 21622  001000  6E1B               	movwf	i2printf@flag,c
 21623                           
 21624                           ;doprnt.c: 551: switch(*f) {
 21625                           
 21626                           ;doprnt.c: 550: for(;;) {
 21627  001002  D005               	goto	i2l7049
 21628  001004                     i2l7045:
 21629                           
 21630                           ;doprnt.c: 580: flag |= 0x04;
 21631  001004  841B               	bsf	i2printf@flag,2,c
 21632                           
 21633                           ;doprnt.c: 581: f++;
 21634  001006  4A0D               	infsnz	i2printf@f,f,c
 21635  001008  2A0E               	incf	i2printf@f+1,f,c
 21636                           
 21637                           ;doprnt.c: 582: continue;
 21638  00100A  D001               	goto	i2l7049
 21639                           
 21640                           ;doprnt.c: 584: }
 21641  00100C  D00B               	goto	i2l7051
 21642  00100E                     i2l7049:
 21643  00100E  C00D  FFF6         	movff	i2printf@f,tblptrl
 21644  001012  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21645  001016                     	if	0	;tblptru may be non-zero
 21646  001016                     	endif
 21647  001016                     	if	0	;tblptru may be non-zero
 21648  001016                     	endif
 21649  001016  0008               	tblrd		*
 21650  001018  50F5               	movf	tablat,w,c
 21651                           
 21652                           ; Switch size 1, requested type "space"
 21653                           ; Number of cases is 1, Range of values is 48 to 48
 21654                           ; switch strategies available:
 21655                           ; Name         Instructions Cycles
 21656                           ; simple_byte            4     3 (average)
 21657                           ;	Chosen strategy is simple_byte
 21658  00101A  0A30               	xorlw	48	; case 48
 21659  00101C  B4D8               	btfsc	status,2,c
 21660  00101E  D7F2               	goto	i2l7045
 21661                           
 21662                           ;doprnt.c: 585: break;
 21663  001020  D001               	goto	i2l7051
 21664                           
 21665                           ;doprnt.c: 586: }
 21666  001022  D7F5               	goto	i2l7049
 21667  001024                     i2l7051:
 21668                           
 21669                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 21670  001024  C00D  FFF6         	movff	i2printf@f,tblptrl
 21671  001028  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21672  00102C                     	if	0	;tblptru may be non-zero
 21673  00102C                     	endif
 21674  00102C                     	if	0	;tblptru may be non-zero
 21675  00102C                     	endif
 21676  00102C  0008               	tblrd		*
 21677  00102E  50F5               	movf	tablat,w,c
 21678  001030  EC78  F025         	call	i2_isdigit
 21679  001034  A0D8               	btfss	status,0,c
 21680  001036  D03B               	goto	i2l7067
 21681                           
 21682                           ;doprnt.c: 598: width = 0;
 21683  001038  0E00               	movlw	0
 21684  00103A  6E1D               	movwf	i2printf@width+1,c
 21685  00103C  0E00               	movlw	0
 21686  00103E  6E1C               	movwf	i2printf@width,c
 21687  001040  D000               	goto	i2l7055
 21688  001042                     i2l7055:
 21689                           
 21690                           ;doprnt.c: 600: width *= 10;
 21691  001042  C01C  F001         	movff	i2printf@width,i2___wmul@multiplier
 21692  001046  C01D  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 21693  00104A  0E00               	movlw	0
 21694  00104C  6E04               	movwf	i2___wmul@multiplicand+1,c
 21695  00104E  0E0A               	movlw	10
 21696  001050  6E03               	movwf	i2___wmul@multiplicand,c
 21697  001052  EC41  F025         	call	i2___wmul	;wreg free
 21698  001056  C001  F01C         	movff	?i2___wmul,i2printf@width
 21699  00105A  C002  F01D         	movff	?i2___wmul+1,i2printf@width+1
 21700                           
 21701                           ;doprnt.c: 601: width += *f++ - '0';
 21702  00105E  0ED0               	movlw	208
 21703  001060  6E11               	movwf	??i2_printf& (0+255),c
 21704  001062  0EFF               	movlw	255
 21705  001064  6E12               	movwf	(??i2_printf+1)& (0+255),c
 21706  001066  C00D  FFF6         	movff	i2printf@f,tblptrl
 21707  00106A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21708  00106E                     	if	0	;tblptru may be non-zero
 21709  00106E                     	endif
 21710  00106E                     	if	0	;tblptru may be non-zero
 21711  00106E                     	endif
 21712  00106E  0008               	tblrd		*
 21713  001070  50F5               	movf	tablat,w,c
 21714  001072  6E13               	movwf	(??i2_printf+2)& (0+255),c
 21715  001074  6A14               	clrf	(??i2_printf+3)& (0+255),c
 21716  001076  5011               	movf	??i2_printf,w,c
 21717  001078  2613               	addwf	??i2_printf+2,f,c
 21718  00107A  5012               	movf	??i2_printf+1,w,c
 21719  00107C  2214               	addwfc	??i2_printf+3,f,c
 21720  00107E  5013               	movf	??i2_printf+2,w,c
 21721  001080  261C               	addwf	i2printf@width,f,c
 21722  001082  5014               	movf	??i2_printf+3,w,c
 21723  001084  221D               	addwfc	i2printf@width+1,f,c
 21724  001086  4A0D               	infsnz	i2printf@f,f,c
 21725  001088  2A0E               	incf	i2printf@f+1,f,c
 21726                           
 21727                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 21728  00108A  C00D  FFF6         	movff	i2printf@f,tblptrl
 21729  00108E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21730  001092                     	if	0	;tblptru may be non-zero
 21731  001092                     	endif
 21732  001092                     	if	0	;tblptru may be non-zero
 21733  001092                     	endif
 21734  001092  0008               	tblrd		*
 21735  001094  50F5               	movf	tablat,w,c
 21736  001096  EC78  F025         	call	i2_isdigit
 21737  00109A  A0D8               	btfss	status,0,c
 21738  00109C  D008               	goto	i2l7067
 21739  00109E  D7D1               	goto	i2l7055
 21740                           
 21741                           ;doprnt.c: 608: }
 21742                           ;doprnt.c: 635: switch(c = *f++) {
 21743  0010A0  D006               	goto	i2l7067
 21744                           
 21745                           ;doprnt.c: 638: goto alldone;
 21746                           
 21747                           ;doprnt.c: 637: case 0:
 21748  0010A2  D148               	goto	i2l1435
 21749                           
 21750                           ;doprnt.c: 698: case 'i':
 21751                           ;doprnt.c: 699: break;
 21752                           
 21753                           ;doprnt.c: 697: case 'd':
 21754  0010A4  D01B               	goto	i2l1398
 21755  0010A6                     i2l7063:
 21756                           
 21757                           ;doprnt.c: 721: flag |= 0x80;
 21758  0010A6  8E1B               	bsf	i2printf@flag,7,c
 21759                           
 21760                           ;doprnt.c: 723: break;
 21761  0010A8  D019               	goto	i2l1398
 21762                           
 21763                           ;doprnt.c: 813: continue;
 21764                           
 21765                           ;doprnt.c: 802: default:
 21766  0010AA  D136               	goto	i2l7165
 21767                           
 21768                           ;doprnt.c: 822: }
 21769  0010AC  D017               	goto	i2l1398
 21770  0010AE                     i2l7067:
 21771  0010AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 21772  0010B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 21773  0010B6  4A0D               	infsnz	i2printf@f,f,c
 21774  0010B8  2A0E               	incf	i2printf@f+1,f,c
 21775  0010BA                     	if	0	;tblptru may be non-zero
 21776  0010BA                     	endif
 21777  0010BA                     	if	0	;tblptru may be non-zero
 21778  0010BA                     	endif
 21779  0010BA  0008               	tblrd		*
 21780  0010BC  CFF5 F01E          	movff	tablat,i2printf@c
 21781  0010C0  501E               	movf	i2printf@c,w,c
 21782                           
 21783                           ; Switch size 1, requested type "space"
 21784                           ; Number of cases is 4, Range of values is 0 to 120
 21785                           ; switch strategies available:
 21786                           ; Name         Instructions Cycles
 21787                           ; simple_byte           13     7 (average)
 21788                           ;	Chosen strategy is simple_byte
 21789  0010C2  0A00               	xorlw	0	; case 0
 21790  0010C4  B4D8               	btfsc	status,2,c
 21791  0010C6  D136               	goto	i2l1435
 21792  0010C8  0A64               	xorlw	100	; case 100
 21793  0010CA  B4D8               	btfsc	status,2,c
 21794  0010CC  D007               	goto	i2l1398
 21795  0010CE  0A0D               	xorlw	13	; case 105
 21796  0010D0  B4D8               	btfsc	status,2,c
 21797  0010D2  D004               	goto	i2l1398
 21798  0010D4  0A11               	xorlw	17	; case 120
 21799  0010D6  B4D8               	btfsc	status,2,c
 21800  0010D8  D7E6               	goto	i2l7063
 21801  0010DA  D11E               	goto	i2l7165
 21802  0010DC                     i2l1398:
 21803                           
 21804                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 21805  0010DC  BE1B               	btfsc	i2printf@flag,7,c
 21806  0010DE  D015               	goto	i2l7079
 21807                           
 21808                           ;doprnt.c: 1253: {
 21809                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 21810  0010E0  C016  FFD9         	movff	i2printf@ap,fsr2l
 21811  0010E4  C017  FFDA         	movff	i2printf@ap+1,fsr2h
 21812  0010E8  CFDE F019          	movff	postinc2,i2printf@val
 21813  0010EC  CFDD F01A          	movff	postdec2,i2printf@val+1
 21814  0010F0  0E02               	movlw	2
 21815  0010F2  2616               	addwf	i2printf@ap,f,c
 21816  0010F4  0E00               	movlw	0
 21817  0010F6  2217               	addwfc	i2printf@ap+1,f,c
 21818                           
 21819                           ;doprnt.c: 1261: if((int)val < 0) {
 21820  0010F8  AE1A               	btfss	i2printf@val+1,7,c
 21821  0010FA  D04E               	goto	i2l7113
 21822                           
 21823                           ;doprnt.c: 1262: flag |= 0x03;
 21824  0010FC  0E03               	movlw	3
 21825  0010FE  121B               	iorwf	i2printf@flag,f,c
 21826                           
 21827                           ;doprnt.c: 1263: val = -val;
 21828  001100  6C19               	negf	i2printf@val,c
 21829  001102  1E1A               	comf	i2printf@val+1,f,c
 21830  001104  B0D8               	btfsc	status,0,c
 21831  001106  2A1A               	incf	i2printf@val+1,f,c
 21832                           
 21833                           ;doprnt.c: 1264: }
 21834                           ;doprnt.c: 1266: }
 21835  001108  D047               	goto	i2l7113
 21836  00110A                     i2l7079:
 21837                           
 21838                           ;doprnt.c: 1268: else
 21839                           ;doprnt.c: 1273: {
 21840                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21841  00110A  C016  FFD9         	movff	i2printf@ap,fsr2l
 21842  00110E  C017  FFDA         	movff	i2printf@ap+1,fsr2h
 21843  001112  CFDE F019          	movff	postinc2,i2printf@val
 21844  001116  CFDD F01A          	movff	postdec2,i2printf@val+1
 21845  00111A  0E02               	movlw	2
 21846  00111C  2616               	addwf	i2printf@ap,f,c
 21847  00111E  0E00               	movlw	0
 21848  001120  2217               	addwfc	i2printf@ap+1,f,c
 21849                           
 21850                           ;doprnt.c: 1287: }
 21851                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 21852  001122  D03A               	goto	i2l7113
 21853  001124                     i2l7083:
 21854                           
 21855                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21856  001124  0E01               	movlw	1
 21857  001126  6E1E               	movwf	i2printf@c,c
 21858  001128                     i2l7085:
 21859  001128  0E05               	movlw	5
 21860  00112A  181E               	xorwf	i2printf@c,w,c
 21861  00112C  B4D8               	btfsc	status,2,c
 21862  00112E  D03D               	goto	i2l7115
 21863  001130  D001               	goto	i2l7089
 21864  001132  D03B               	goto	i2l7115
 21865  001134                     i2l7089:
 21866                           
 21867                           ;doprnt.c: 1306: if(val < dpowers[c])
 21868  001134  501E               	movf	i2printf@c,w,c
 21869  001136  0D02               	mullw	2
 21870  001138  0E56               	movlw	low _dpowers
 21871  00113A  24F3               	addwf	prodl,w,c
 21872  00113C  6EF6               	movwf	tblptrl,c
 21873  00113E  0EFE               	movlw	high _dpowers
 21874  001140  20F4               	addwfc	prodh,w,c
 21875  001142  6EF7               	movwf	tblptrh,c
 21876  001144                     	if	0	;There are less than 3 active tblptr bytes
 21877  001144                     	endif
 21878  001144  0009               	tblrd		*+
 21879  001146  50F5               	movf	tablat,w,c
 21880  001148  5C19               	subwf	i2printf@val,w,c
 21881  00114A  0009               	tblrd		*+
 21882  00114C  50F5               	movf	tablat,w,c
 21883  00114E  581A               	subwfb	i2printf@val+1,w,c
 21884  001150  A0D8               	btfss	status,0,c
 21885  001152  D02B               	goto	i2l7115
 21886  001154  D001               	goto	i2l7093
 21887                           
 21888                           ;doprnt.c: 1307: break;
 21889  001156  D029               	goto	i2l7115
 21890  001158                     i2l7093:
 21891  001158  2A1E               	incf	i2printf@c,f,c
 21892  00115A  D7E6               	goto	i2l7085
 21893                           
 21894                           ;doprnt.c: 1309: break;
 21895  00115C  D026               	goto	i2l7115
 21896  00115E                     i2l7097:
 21897                           
 21898                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 21899  00115E  0E01               	movlw	1
 21900  001160  6E1E               	movwf	i2printf@c,c
 21901  001162                     i2l7099:
 21902  001162  0E04               	movlw	4
 21903  001164  181E               	xorwf	i2printf@c,w,c
 21904  001166  B4D8               	btfsc	status,2,c
 21905  001168  D020               	goto	i2l7115
 21906  00116A  D001               	goto	i2l7103
 21907  00116C  D01E               	goto	i2l7115
 21908  00116E                     i2l7103:
 21909                           
 21910                           ;doprnt.c: 1317: if(val < hexpowers[c])
 21911  00116E  501E               	movf	i2printf@c,w,c
 21912  001170  0D02               	mullw	2
 21913  001172  0E60               	movlw	low _hexpowers
 21914  001174  24F3               	addwf	prodl,w,c
 21915  001176  6EF6               	movwf	tblptrl,c
 21916  001178  0EFE               	movlw	high _hexpowers
 21917  00117A  20F4               	addwfc	prodh,w,c
 21918  00117C  6EF7               	movwf	tblptrh,c
 21919  00117E                     	if	0	;There are less than 3 active tblptr bytes
 21920  00117E                     	endif
 21921  00117E  0009               	tblrd		*+
 21922  001180  50F5               	movf	tablat,w,c
 21923  001182  5C19               	subwf	i2printf@val,w,c
 21924  001184  0009               	tblrd		*+
 21925  001186  50F5               	movf	tablat,w,c
 21926  001188  581A               	subwfb	i2printf@val+1,w,c
 21927  00118A  A0D8               	btfss	status,0,c
 21928  00118C  D00E               	goto	i2l7115
 21929  00118E  D001               	goto	i2l7107
 21930                           
 21931                           ;doprnt.c: 1318: break;
 21932  001190  D00C               	goto	i2l7115
 21933  001192                     i2l7107:
 21934  001192  2A1E               	incf	i2printf@c,f,c
 21935  001194  D7E6               	goto	i2l7099
 21936                           
 21937                           ;doprnt.c: 1336: }
 21938                           
 21939                           ;doprnt.c: 1320: break;
 21940  001196  D009               	goto	i2l7115
 21941  001198                     i2l7113:
 21942  001198  501B               	movf	i2printf@flag,w,c
 21943  00119A  0B80               	andlw	128
 21944                           
 21945                           ; Switch size 1, requested type "space"
 21946                           ; Number of cases is 2, Range of values is 0 to 128
 21947                           ; switch strategies available:
 21948                           ; Name         Instructions Cycles
 21949                           ; simple_byte            7     4 (average)
 21950                           ;	Chosen strategy is simple_byte
 21951  00119C  0A00               	xorlw	0	; case 0
 21952  00119E  B4D8               	btfsc	status,2,c
 21953  0011A0  D7C1               	goto	i2l7083
 21954  0011A2  0A80               	xorlw	128	; case 128
 21955  0011A4  B4D8               	btfsc	status,2,c
 21956  0011A6  D7DB               	goto	i2l7097
 21957  0011A8  D000               	goto	i2l7115
 21958  0011AA                     i2l7115:
 21959                           
 21960                           ;doprnt.c: 1345: if(width && flag & 0x03)
 21961  0011AA  501C               	movf	i2printf@width,w,c
 21962  0011AC  101D               	iorwf	i2printf@width+1,w,c
 21963  0011AE  B4D8               	btfsc	status,2,c
 21964  0011B0  D00A               	goto	i2l7121
 21965  0011B2  C01B  F011         	movff	i2printf@flag,??i2_printf
 21966  0011B6  0E03               	movlw	3
 21967  0011B8  1611               	andwf	??i2_printf,f,c
 21968  0011BA  B4D8               	btfsc	status,2,c
 21969  0011BC  D004               	goto	i2l7121
 21970                           
 21971                           ;doprnt.c: 1346: width--;
 21972  0011BE  061C               	decf	i2printf@width,f,c
 21973  0011C0  A0D8               	btfss	status,0,c
 21974  0011C2  061D               	decf	i2printf@width+1,f,c
 21975  0011C4  D000               	goto	i2l7121
 21976  0011C6                     i2l7121:
 21977                           
 21978                           ;doprnt.c: 1381: if(width > c)
 21979  0011C6  0E80               	movlw	128
 21980  0011C8  BE1E               	btfsc	i2printf@c,7,c
 21981  0011CA  0E7F               	movlw	127
 21982  0011CC  6E11               	movwf	??i2_printf& (0+255),c
 21983  0011CE  501C               	movf	i2printf@width,w,c
 21984  0011D0  5C1E               	subwf	i2printf@c,w,c
 21985  0011D2  501D               	movf	i2printf@width+1,w,c
 21986  0011D4  0A80               	xorlw	128
 21987  0011D6  5811               	subwfb	??i2_printf& (0+255),w,c
 21988  0011D8  B0D8               	btfsc	status,0,c
 21989  0011DA  D007               	goto	i2l7125
 21990                           
 21991                           ;doprnt.c: 1382: width -= c;
 21992  0011DC  501E               	movf	i2printf@c,w,c
 21993  0011DE  5E1C               	subwf	i2printf@width,f,c
 21994  0011E0  0E00               	movlw	0
 21995  0011E2  BE1E               	btfsc	i2printf@c,7,c
 21996  0011E4  0EFF               	movlw	255
 21997  0011E6  5A1D               	subwfb	i2printf@width+1,f,c
 21998  0011E8  D005               	goto	i2l7127
 21999  0011EA                     i2l7125:
 22000                           
 22001                           ;doprnt.c: 1383: else
 22002                           ;doprnt.c: 1384: width = 0;
 22003  0011EA  0E00               	movlw	0
 22004  0011EC  6E1D               	movwf	i2printf@width+1,c
 22005  0011EE  0E00               	movlw	0
 22006  0011F0  6E1C               	movwf	i2printf@width,c
 22007  0011F2  D000               	goto	i2l7127
 22008  0011F4                     i2l7127:
 22009                           
 22010                           ;doprnt.c: 1387: if(flag & 0x04) {
 22011  0011F4  A41B               	btfss	i2printf@flag,2,c
 22012  0011F6  D01A               	goto	i2l7139
 22013                           
 22014                           ;doprnt.c: 1392: if(flag & 0x03)
 22015  0011F8  C01B  F011         	movff	i2printf@flag,??i2_printf
 22016  0011FC  0E03               	movlw	3
 22017  0011FE  1611               	andwf	??i2_printf,f,c
 22018  001200  B4D8               	btfsc	status,2,c
 22019  001202  D004               	goto	i2l7133
 22020                           
 22021                           ;doprnt.c: 1393: (putch('-') );
 22022  001204  0E2D               	movlw	45
 22023  001206  ECE1  F026         	call	i2_putch
 22024  00120A  D000               	goto	i2l7133
 22025  00120C                     i2l7133:
 22026                           
 22027                           ;doprnt.c: 1415: if(width)
 22028  00120C  501C               	movf	i2printf@width,w,c
 22029  00120E  101D               	iorwf	i2printf@width+1,w,c
 22030  001210  B4D8               	btfsc	status,2,c
 22031  001212  D026               	goto	i2l7149
 22032  001214                     i2l7135:
 22033                           
 22034                           ;doprnt.c: 1417: (putch('0') );
 22035  001214  0E30               	movlw	48
 22036  001216  ECE1  F026         	call	i2_putch
 22037                           
 22038                           ;doprnt.c: 1418: while(--width);
 22039  00121A  061C               	decf	i2printf@width,f,c
 22040  00121C  A0D8               	btfss	status,0,c
 22041  00121E  061D               	decf	i2printf@width+1,f,c
 22042  001220  501C               	movf	i2printf@width,w,c
 22043  001222  101D               	iorwf	i2printf@width+1,w,c
 22044  001224  B4D8               	btfsc	status,2,c
 22045  001226  D01C               	goto	i2l7149
 22046  001228  D7F5               	goto	i2l7135
 22047                           
 22048                           ;doprnt.c: 1420: } else
 22049  00122A  D01A               	goto	i2l7149
 22050  00122C                     i2l7139:
 22051                           
 22052                           ;doprnt.c: 1422: {
 22053                           ;doprnt.c: 1424: if(width
 22054                           ;doprnt.c: 1428: )
 22055  00122C  501C               	movf	i2printf@width,w,c
 22056  00122E  101D               	iorwf	i2printf@width+1,w,c
 22057  001230  B4D8               	btfsc	status,2,c
 22058  001232  D00C               	goto	i2l7145
 22059  001234                     i2l7141:
 22060                           
 22061                           ;doprnt.c: 1430: (putch(' ') );
 22062  001234  0E20               	movlw	32
 22063  001236  ECE1  F026         	call	i2_putch
 22064                           
 22065                           ;doprnt.c: 1431: while(--width);
 22066  00123A  061C               	decf	i2printf@width,f,c
 22067  00123C  A0D8               	btfss	status,0,c
 22068  00123E  061D               	decf	i2printf@width+1,f,c
 22069  001240  501C               	movf	i2printf@width,w,c
 22070  001242  101D               	iorwf	i2printf@width+1,w,c
 22071  001244  B4D8               	btfsc	status,2,c
 22072  001246  D002               	goto	i2l7145
 22073  001248  D7F5               	goto	i2l7141
 22074  00124A  D000               	goto	i2l7145
 22075  00124C                     i2l7145:
 22076                           
 22077                           ;doprnt.c: 1438: if(flag & 0x03)
 22078  00124C  C01B  F011         	movff	i2printf@flag,??i2_printf
 22079  001250  0E03               	movlw	3
 22080  001252  1611               	andwf	??i2_printf,f,c
 22081  001254  B4D8               	btfsc	status,2,c
 22082  001256  D004               	goto	i2l7149
 22083                           
 22084                           ;doprnt.c: 1439: (putch('-') );
 22085  001258  0E2D               	movlw	45
 22086  00125A  ECE1  F026         	call	i2_putch
 22087  00125E  D000               	goto	i2l7149
 22088  001260                     i2l7149:
 22089                           
 22090                           ;doprnt.c: 1469: }
 22091                           ;doprnt.c: 1472: prec = c;
 22092  001260  C01E  F018         	movff	i2printf@c,i2printf@prec
 22093                           
 22094                           ;doprnt.c: 1474: while(prec--) {
 22095  001264  D053               	goto	i2l7163
 22096                           
 22097                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 22098  001266  D045               	goto	i2l7159
 22099  001268                     i2l7151:
 22100                           
 22101                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 22102  001268  5018               	movf	i2printf@prec,w,c
 22103  00126A  0D02               	mullw	2
 22104  00126C  0E56               	movlw	low _dpowers
 22105  00126E  24F3               	addwf	prodl,w,c
 22106  001270  6EF6               	movwf	tblptrl,c
 22107  001272  0EFE               	movlw	high _dpowers
 22108  001274  20F4               	addwfc	prodh,w,c
 22109  001276  6EF7               	movwf	tblptrh,c
 22110  001278                     	if	0	;There are less than 3 active tblptr bytes
 22111  001278                     	endif
 22112  001278  0009               	tblrd		*+
 22113  00127A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 22114  00127E  000A               	tblrd		*-
 22115  001280  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 22116  001284  C019  F001         	movff	i2printf@val,i2___lwdiv@dividend
 22117  001288  C01A  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22118  00128C  ECE5  F021         	call	i2___lwdiv	;wreg free
 22119  001290  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 22120  001294  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 22121  001298  0E00               	movlw	0
 22122  00129A  6E0B               	movwf	i2___lwmod@divisor+1,c
 22123  00129C  0E0A               	movlw	10
 22124  00129E  6E0A               	movwf	i2___lwmod@divisor,c
 22125  0012A0  EC36  F023         	call	i2___lwmod	;wreg free
 22126  0012A4  5008               	movf	?i2___lwmod,w,c
 22127  0012A6  0F30               	addlw	48
 22128  0012A8  6E1E               	movwf	i2printf@c,c
 22129                           
 22130                           ;doprnt.c: 1491: break;
 22131  0012AA  D02C               	goto	i2l7161
 22132  0012AC                     i2l7153:
 22133                           
 22134                           ;doprnt.c: 1499: {
 22135                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 22136  0012AC  C019  F001         	movff	i2printf@val,i2___lwdiv@dividend
 22137  0012B0  C01A  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 22138  0012B4  5018               	movf	i2printf@prec,w,c
 22139  0012B6  0D02               	mullw	2
 22140  0012B8  0E60               	movlw	low _hexpowers
 22141  0012BA  24F3               	addwf	prodl,w,c
 22142  0012BC  6EF6               	movwf	tblptrl,c
 22143  0012BE  0EFE               	movlw	high _hexpowers
 22144  0012C0  20F4               	addwfc	prodh,w,c
 22145  0012C2  6EF7               	movwf	tblptrh,c
 22146  0012C4                     	if	0	;There are less than 3 active tblptr bytes
 22147  0012C4                     	endif
 22148  0012C4  0009               	tblrd		*+
 22149  0012C6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 22150  0012CA  000A               	tblrd		*-
 22151  0012CC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 22152  0012D0  ECE5  F021         	call	i2___lwdiv	;wreg free
 22153  0012D4  5001               	movf	?i2___lwdiv,w,c
 22154  0012D6  0B0F               	andlw	15
 22155  0012D8  6E15               	movwf	i2printf@idx,c
 22156                           
 22157                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 22158  0012DA  5015               	movf	i2printf@idx,w,c
 22159  0012DC  0D01               	mullw	1
 22160  0012DE  0E3D               	movlw	low STR_39
 22161  0012E0  24F3               	addwf	prodl,w,c
 22162  0012E2  6EF6               	movwf	tblptrl,c
 22163  0012E4  0EFF               	movlw	high STR_39
 22164  0012E6  20F4               	addwfc	prodh,w,c
 22165  0012E8  6EF7               	movwf	tblptrh,c
 22166  0012EA                     	if	0	;There are less than 3 active tblptr bytes
 22167  0012EA                     	endif
 22168  0012EA  0008               	tblrd		*
 22169  0012EC  CFF5 F01E          	movff	tablat,i2printf@c
 22170                           
 22171                           ;doprnt.c: 1523: }
 22172                           
 22173                           ;doprnt.c: 1508: }
 22174                           ;doprnt.c: 1510: break;
 22175  0012F0  D009               	goto	i2l7161
 22176  0012F2                     i2l7159:
 22177  0012F2  501B               	movf	i2printf@flag,w,c
 22178  0012F4  0B80               	andlw	128
 22179                           
 22180                           ; Switch size 1, requested type "space"
 22181                           ; Number of cases is 2, Range of values is 0 to 128
 22182                           ; switch strategies available:
 22183                           ; Name         Instructions Cycles
 22184                           ; simple_byte            7     4 (average)
 22185                           ;	Chosen strategy is simple_byte
 22186  0012F6  0A00               	xorlw	0	; case 0
 22187  0012F8  B4D8               	btfsc	status,2,c
 22188  0012FA  D7B6               	goto	i2l7151
 22189  0012FC  0A80               	xorlw	128	; case 128
 22190  0012FE  B4D8               	btfsc	status,2,c
 22191  001300  D7D5               	goto	i2l7153
 22192  001302  D000               	goto	i2l7161
 22193  001304                     i2l7161:
 22194                           
 22195                           ;doprnt.c: 1524: (putch(c) );
 22196  001304  501E               	movf	i2printf@c,w,c
 22197  001306  ECE1  F026         	call	i2_putch
 22198  00130A  D000               	goto	i2l7163
 22199  00130C                     i2l7163:
 22200  00130C  0618               	decf	i2printf@prec,f,c
 22201  00130E  2818               	incf	i2printf@prec,w,c
 22202  001310  B4D8               	btfsc	status,2,c
 22203  001312  D002               	goto	i2l7165
 22204  001314  D7EE               	goto	i2l7159
 22205  001316  D000               	goto	i2l7165
 22206  001318                     i2l7165:
 22207  001318  C00D  FFF6         	movff	i2printf@f,tblptrl
 22208  00131C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 22209  001320  4A0D               	infsnz	i2printf@f,f,c
 22210  001322  2A0E               	incf	i2printf@f+1,f,c
 22211  001324                     	if	0	;tblptru may be non-zero
 22212  001324                     	endif
 22213  001324                     	if	0	;tblptru may be non-zero
 22214  001324                     	endif
 22215  001324  0008               	tblrd		*
 22216  001326  CFF5 F01E          	movff	tablat,i2printf@c
 22217  00132A  501E               	movf	i2printf@c,w,c
 22218  00132C  B4D8               	btfsc	status,2,c
 22219  00132E  D002               	goto	i2l1435
 22220  001330  D65A               	goto	i2l7039
 22221  001332  D000               	goto	i2l1435
 22222  001334                     i2l1435:
 22223  001334  0012               	return		;funcret
 22224  001336                     __end_ofi2_printf:
 22225                           	opt stack 0
 22226                           pclatu	equ	0xFFB
 22227                           pclath	equ	0xFFA
 22228                           tblptru	equ	0xFF8
 22229                           tblptrh	equ	0xFF7
 22230                           tblptrl	equ	0xFF6
 22231                           tablat	equ	0xFF5
 22232                           prodh	equ	0xFF4
 22233                           prodl	equ	0xFF3
 22234                           intcon	equ	0xFF2
 22235                           intcon2	equ	0xFF1
 22236                           intcon3	equ	0xFF0
 22237                           postinc0	equ	0xFEE
 22238                           fsr0h	equ	0xFEA
 22239                           fsr0l	equ	0xFE9
 22240                           wreg	equ	0xFE8
 22241                           postdec1	equ	0xFE5
 22242                           fsr1h	equ	0xFE2
 22243                           fsr1l	equ	0xFE1
 22244                           indf2	equ	0xFDF
 22245                           postinc2	equ	0xFDE
 22246                           postdec2	equ	0xFDD
 22247                           fsr2h	equ	0xFDA
 22248                           fsr2l	equ	0xFD9
 22249                           status	equ	0xFD8
 22250                           
 22251 ;; *************** function i2_putch *****************
 22252 ;; Defined at:
 22253 ;;		line 81 in file "Main.c"
 22254 ;; Parameters:    Size  Location     Type
 22255 ;;  c               1    wreg     unsigned char 
 22256 ;; Auto vars:     Size  Location     Type
 22257 ;;  c               1    0[COMRAM] unsigned char 
 22258 ;; Return value:  Size  Location     Type
 22259 ;;		None               void
 22260 ;; Registers used:
 22261 ;;		wreg
 22262 ;; Tracked objects:
 22263 ;;		On entry : 0/0
 22264 ;;		On exit  : 0/0
 22265 ;;		Unchanged: 0/0
 22266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22271 ;;Total ram usage:        1 bytes
 22272 ;; Hardware stack levels used:    1
 22273 ;; This function calls:
 22274 ;;		Nothing
 22275 ;; This function is called by:
 22276 ;;		i2_printf
 22277 ;; This function uses a non-reentrant model
 22278 ;;
 22279                           
 22280                           	psect	text120
 22281  004DC2                     __ptext120:
 22282                           	opt stack 0
 22283  004DC2                     i2_putch:
 22284                           	opt stack 17
 22285                           
 22286                           ;incstack = 0
 22287                           ;i2putch@c stored from wreg
 22288  004DC2  6E01               	movwf	i2putch@c,c
 22289                           
 22290                           ;Main.c: 83: while (!TRMT);
 22291  004DC4  D000               	goto	i2l513
 22292  004DC6                     i2l513:
 22293  004DC6  A2AC               	btfss	4012,1,c	;volatile
 22294  004DC8  D7FE               	goto	i2l513
 22295                           
 22296                           ;Main.c: 84: TXREG = c;
 22297  004DCA  C001  FFAD         	movff	i2putch@c,4013	;volatile
 22298  004DCE  0012               	return		;funcret
 22299  004DD0                     __end_ofi2_putch:
 22300                           	opt stack 0
 22301                           pclatu	equ	0xFFB
 22302                           pclath	equ	0xFFA
 22303                           tblptru	equ	0xFF8
 22304                           tblptrh	equ	0xFF7
 22305                           tblptrl	equ	0xFF6
 22306                           tablat	equ	0xFF5
 22307                           prodh	equ	0xFF4
 22308                           prodl	equ	0xFF3
 22309                           intcon	equ	0xFF2
 22310                           intcon2	equ	0xFF1
 22311                           intcon3	equ	0xFF0
 22312                           postinc0	equ	0xFEE
 22313                           fsr0h	equ	0xFEA
 22314                           fsr0l	equ	0xFE9
 22315                           wreg	equ	0xFE8
 22316                           postdec1	equ	0xFE5
 22317                           fsr1h	equ	0xFE2
 22318                           fsr1l	equ	0xFE1
 22319                           indf2	equ	0xFDF
 22320                           postinc2	equ	0xFDE
 22321                           postdec2	equ	0xFDD
 22322                           fsr2h	equ	0xFDA
 22323                           fsr2l	equ	0xFD9
 22324                           status	equ	0xFD8
 22325                           
 22326 ;; *************** function i2_isdigit *****************
 22327 ;; Defined at:
 22328 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 22329 ;; Parameters:    Size  Location     Type
 22330 ;;  c               1    wreg     unsigned char 
 22331 ;; Auto vars:     Size  Location     Type
 22332 ;;  c               1    2[COMRAM] unsigned char 
 22333 ;; Return value:  Size  Location     Type
 22334 ;;		None               void
 22335 ;; Registers used:
 22336 ;;		wreg, status,2, status,0
 22337 ;; Tracked objects:
 22338 ;;		On entry : 0/0
 22339 ;;		On exit  : 0/0
 22340 ;;		Unchanged: 0/0
 22341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22345 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22346 ;;Total ram usage:        3 bytes
 22347 ;; Hardware stack levels used:    1
 22348 ;; This function calls:
 22349 ;;		Nothing
 22350 ;; This function is called by:
 22351 ;;		i2_printf
 22352 ;; This function uses a non-reentrant model
 22353 ;;
 22354                           
 22355                           	psect	text121
 22356  004AF0                     __ptext121:
 22357                           	opt stack 0
 22358  004AF0                     i2_isdigit:
 22359                           	opt stack 17
 22360                           
 22361                           ;incstack = 0
 22362                           ;i2isdigit@c stored from wreg
 22363  004AF0  6E03               	movwf	i2isdigit@c,c
 22364  004AF2  0E00               	movlw	0
 22365  004AF4  6E02               	movwf	i2_isdigit$2867,c
 22366  004AF6  0E3A               	movlw	58
 22367  004AF8  6003               	cpfslt	i2isdigit@c,c
 22368  004AFA  D006               	goto	i2l6547
 22369  004AFC  0E2F               	movlw	47
 22370  004AFE  6403               	cpfsgt	i2isdigit@c,c
 22371  004B00  D003               	goto	i2l6547
 22372  004B02  0E01               	movlw	1
 22373  004B04  6E02               	movwf	i2_isdigit$2867,c
 22374  004B06  D000               	goto	i2l6547
 22375  004B08                     i2l6547:
 22376  004B08  C002  F001         	movff	i2_isdigit$2867,??i2_isdigit
 22377  004B0C  3001               	rrcf	??i2_isdigit,w,c
 22378  004B0E  D000               	goto	i2l1902
 22379  004B10                     i2l1902:
 22380  004B10  0012               	return		;funcret
 22381  004B12                     __end_ofi2_isdigit:
 22382                           	opt stack 0
 22383                           pclatu	equ	0xFFB
 22384                           pclath	equ	0xFFA
 22385                           tblptru	equ	0xFF8
 22386                           tblptrh	equ	0xFF7
 22387                           tblptrl	equ	0xFF6
 22388                           tablat	equ	0xFF5
 22389                           prodh	equ	0xFF4
 22390                           prodl	equ	0xFF3
 22391                           intcon	equ	0xFF2
 22392                           intcon2	equ	0xFF1
 22393                           intcon3	equ	0xFF0
 22394                           postinc0	equ	0xFEE
 22395                           fsr0h	equ	0xFEA
 22396                           fsr0l	equ	0xFE9
 22397                           wreg	equ	0xFE8
 22398                           postdec1	equ	0xFE5
 22399                           fsr1h	equ	0xFE2
 22400                           fsr1l	equ	0xFE1
 22401                           indf2	equ	0xFDF
 22402                           postinc2	equ	0xFDE
 22403                           postdec2	equ	0xFDD
 22404                           fsr2h	equ	0xFDA
 22405                           fsr2l	equ	0xFD9
 22406                           status	equ	0xFD8
 22407                           
 22408 ;; *************** function i2___wmul *****************
 22409 ;; Defined at:
 22410 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 22411 ;; Parameters:    Size  Location     Type
 22412 ;;  multiplier      2    0[COMRAM] unsigned int 
 22413 ;;  multiplicand    2    2[COMRAM] unsigned int 
 22414 ;; Auto vars:     Size  Location     Type
 22415 ;;  __wmul          2    4[COMRAM] unsigned int 
 22416 ;; Return value:  Size  Location     Type
 22417 ;;                  2    0[COMRAM] unsigned int 
 22418 ;; Registers used:
 22419 ;;		wreg, status,2, status,0, prodl, prodh
 22420 ;; Tracked objects:
 22421 ;;		On entry : 0/0
 22422 ;;		On exit  : 0/0
 22423 ;;		Unchanged: 0/0
 22424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22426 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22428 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22429 ;;Total ram usage:        6 bytes
 22430 ;; Hardware stack levels used:    1
 22431 ;; This function calls:
 22432 ;;		Nothing
 22433 ;; This function is called by:
 22434 ;;		i2_printf
 22435 ;; This function uses a non-reentrant model
 22436 ;;
 22437                           
 22438                           	psect	text122
 22439  004A82                     __ptext122:
 22440                           	opt stack 0
 22441  004A82                     i2___wmul:
 22442                           	opt stack 17
 22443                           
 22444                           ;incstack = 0
 22445  004A82  5001               	movf	i2___wmul@multiplier,w,c
 22446  004A84  0203               	mulwf	i2___wmul@multiplicand,c
 22447  004A86  CFF3 F005          	movff	prodl,i2___wmul@product
 22448  004A8A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 22449  004A8E  5001               	movf	i2___wmul@multiplier,w,c
 22450  004A90  0204               	mulwf	i2___wmul@multiplicand+1,c
 22451  004A92  50F3               	movf	prodl,w,c
 22452  004A94  2606               	addwf	i2___wmul@product+1,f,c
 22453  004A96  5002               	movf	i2___wmul@multiplier+1,w,c
 22454  004A98  0203               	mulwf	i2___wmul@multiplicand,c
 22455  004A9A  50F3               	movf	prodl,w,c
 22456  004A9C  2606               	addwf	i2___wmul@product+1,f,c
 22457  004A9E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 22458  004AA2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 22459  004AA6  D000               	goto	i2l1471
 22460  004AA8                     i2l1471:
 22461  004AA8  0012               	return		;funcret
 22462  004AAA                     __end_ofi2___wmul:
 22463                           	opt stack 0
 22464                           pclatu	equ	0xFFB
 22465                           pclath	equ	0xFFA
 22466                           tblptru	equ	0xFF8
 22467                           tblptrh	equ	0xFF7
 22468                           tblptrl	equ	0xFF6
 22469                           tablat	equ	0xFF5
 22470                           prodh	equ	0xFF4
 22471                           prodl	equ	0xFF3
 22472                           intcon	equ	0xFF2
 22473                           intcon2	equ	0xFF1
 22474                           intcon3	equ	0xFF0
 22475                           postinc0	equ	0xFEE
 22476                           fsr0h	equ	0xFEA
 22477                           fsr0l	equ	0xFE9
 22478                           wreg	equ	0xFE8
 22479                           postdec1	equ	0xFE5
 22480                           fsr1h	equ	0xFE2
 22481                           fsr1l	equ	0xFE1
 22482                           indf2	equ	0xFDF
 22483                           postinc2	equ	0xFDE
 22484                           postdec2	equ	0xFDD
 22485                           fsr2h	equ	0xFDA
 22486                           fsr2l	equ	0xFD9
 22487                           status	equ	0xFD8
 22488                           
 22489 ;; *************** function i2___lwmod *****************
 22490 ;; Defined at:
 22491 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 22492 ;; Parameters:    Size  Location     Type
 22493 ;;  dividend        2    7[COMRAM] unsigned int 
 22494 ;;  divisor         2    9[COMRAM] unsigned int 
 22495 ;; Auto vars:     Size  Location     Type
 22496 ;;  __lwmod         1   11[COMRAM] unsigned char 
 22497 ;; Return value:  Size  Location     Type
 22498 ;;                  2    7[COMRAM] unsigned int 
 22499 ;; Registers used:
 22500 ;;		wreg, status,2, status,0
 22501 ;; Tracked objects:
 22502 ;;		On entry : 0/0
 22503 ;;		On exit  : 0/0
 22504 ;;		Unchanged: 0/0
 22505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22506 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22507 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22509 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22510 ;;Total ram usage:        5 bytes
 22511 ;; Hardware stack levels used:    1
 22512 ;; This function calls:
 22513 ;;		Nothing
 22514 ;; This function is called by:
 22515 ;;		i2_printf
 22516 ;; This function uses a non-reentrant model
 22517 ;;
 22518                           
 22519                           	psect	text123
 22520  00466C                     __ptext123:
 22521                           	opt stack 0
 22522  00466C                     i2___lwmod:
 22523                           	opt stack 17
 22524                           
 22525                           ;incstack = 0
 22526  00466C  500A               	movf	i2___lwmod@divisor,w,c
 22527  00466E  100B               	iorwf	i2___lwmod@divisor+1,w,c
 22528  004670  B4D8               	btfsc	status,2,c
 22529  004672  D01D               	goto	i2l2004
 22530  004674  0E01               	movlw	1
 22531  004676  6E0C               	movwf	i2___lwmod@counter,c
 22532  004678  D005               	goto	i2l6579
 22533  00467A                     i2l6577:
 22534  00467A  90D8               	bcf	status,0,c
 22535  00467C  360A               	rlcf	i2___lwmod@divisor,f,c
 22536  00467E  360B               	rlcf	i2___lwmod@divisor+1,f,c
 22537  004680  2A0C               	incf	i2___lwmod@counter,f,c
 22538  004682  D000               	goto	i2l6579
 22539  004684                     i2l6579:
 22540  004684  BE0B               	btfsc	i2___lwmod@divisor+1,7,c
 22541  004686  D002               	goto	i2l6581
 22542  004688  D7F8               	goto	i2l6577
 22543  00468A  D000               	goto	i2l6581
 22544  00468C                     i2l6581:
 22545  00468C  500A               	movf	i2___lwmod@divisor,w,c
 22546  00468E  5C08               	subwf	i2___lwmod@dividend,w,c
 22547  004690  500B               	movf	i2___lwmod@divisor+1,w,c
 22548  004692  5809               	subwfb	i2___lwmod@dividend+1,w,c
 22549  004694  A0D8               	btfss	status,0,c
 22550  004696  D005               	goto	i2l6585
 22551  004698  500A               	movf	i2___lwmod@divisor,w,c
 22552  00469A  5E08               	subwf	i2___lwmod@dividend,f,c
 22553  00469C  500B               	movf	i2___lwmod@divisor+1,w,c
 22554  00469E  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 22555  0046A0  D000               	goto	i2l6585
 22556  0046A2                     i2l6585:
 22557  0046A2  90D8               	bcf	status,0,c
 22558  0046A4  320B               	rrcf	i2___lwmod@divisor+1,f,c
 22559  0046A6  320A               	rrcf	i2___lwmod@divisor,f,c
 22560  0046A8  2E0C               	decfsz	i2___lwmod@counter,f,c
 22561  0046AA  D7F0               	goto	i2l6581
 22562  0046AC  D000               	goto	i2l2004
 22563  0046AE                     i2l2004:
 22564  0046AE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 22565  0046B2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 22566  0046B6  0012               	return		;funcret
 22567  0046B8                     __end_ofi2___lwmod:
 22568                           	opt stack 0
 22569                           pclatu	equ	0xFFB
 22570                           pclath	equ	0xFFA
 22571                           tblptru	equ	0xFF8
 22572                           tblptrh	equ	0xFF7
 22573                           tblptrl	equ	0xFF6
 22574                           tablat	equ	0xFF5
 22575                           prodh	equ	0xFF4
 22576                           prodl	equ	0xFF3
 22577                           intcon	equ	0xFF2
 22578                           intcon2	equ	0xFF1
 22579                           intcon3	equ	0xFF0
 22580                           postinc0	equ	0xFEE
 22581                           fsr0h	equ	0xFEA
 22582                           fsr0l	equ	0xFE9
 22583                           wreg	equ	0xFE8
 22584                           postdec1	equ	0xFE5
 22585                           fsr1h	equ	0xFE2
 22586                           fsr1l	equ	0xFE1
 22587                           indf2	equ	0xFDF
 22588                           postinc2	equ	0xFDE
 22589                           postdec2	equ	0xFDD
 22590                           fsr2h	equ	0xFDA
 22591                           fsr2l	equ	0xFD9
 22592                           status	equ	0xFD8
 22593                           
 22594 ;; *************** function i2___lwdiv *****************
 22595 ;; Defined at:
 22596 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 22597 ;; Parameters:    Size  Location     Type
 22598 ;;  dividend        2    0[COMRAM] unsigned int 
 22599 ;;  divisor         2    2[COMRAM] unsigned int 
 22600 ;; Auto vars:     Size  Location     Type
 22601 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 22602 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 22603 ;; Return value:  Size  Location     Type
 22604 ;;                  2    0[COMRAM] unsigned int 
 22605 ;; Registers used:
 22606 ;;		wreg, status,2, status,0
 22607 ;; Tracked objects:
 22608 ;;		On entry : 0/0
 22609 ;;		On exit  : 0/0
 22610 ;;		Unchanged: 0/0
 22611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22612 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22613 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22615 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22616 ;;Total ram usage:        7 bytes
 22617 ;; Hardware stack levels used:    1
 22618 ;; This function calls:
 22619 ;;		Nothing
 22620 ;; This function is called by:
 22621 ;;		i2_printf
 22622 ;; This function uses a non-reentrant model
 22623 ;;
 22624                           
 22625                           	psect	text124
 22626  0043CA                     __ptext124:
 22627                           	opt stack 0
 22628  0043CA                     i2___lwdiv:
 22629                           	opt stack 17
 22630                           
 22631                           ;incstack = 0
 22632  0043CA  0E00               	movlw	0
 22633  0043CC  6E06               	movwf	i2___lwdiv@quotient+1,c
 22634  0043CE  0E00               	movlw	0
 22635  0043D0  6E05               	movwf	i2___lwdiv@quotient,c
 22636  0043D2  5003               	movf	i2___lwdiv@divisor,w,c
 22637  0043D4  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 22638  0043D6  B4D8               	btfsc	status,2,c
 22639  0043D8  D021               	goto	i2l1994
 22640  0043DA  0E01               	movlw	1
 22641  0043DC  6E07               	movwf	i2___lwdiv@counter,c
 22642  0043DE  D005               	goto	i2l6559
 22643  0043E0                     i2l6557:
 22644  0043E0  90D8               	bcf	status,0,c
 22645  0043E2  3603               	rlcf	i2___lwdiv@divisor,f,c
 22646  0043E4  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 22647  0043E6  2A07               	incf	i2___lwdiv@counter,f,c
 22648  0043E8  D000               	goto	i2l6559
 22649  0043EA                     i2l6559:
 22650  0043EA  BE04               	btfsc	i2___lwdiv@divisor+1,7,c
 22651  0043EC  D002               	goto	i2l6561
 22652  0043EE  D7F8               	goto	i2l6557
 22653  0043F0  D000               	goto	i2l6561
 22654  0043F2                     i2l6561:
 22655  0043F2  90D8               	bcf	status,0,c
 22656  0043F4  3605               	rlcf	i2___lwdiv@quotient,f,c
 22657  0043F6  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 22658  0043F8  5003               	movf	i2___lwdiv@divisor,w,c
 22659  0043FA  5C01               	subwf	i2___lwdiv@dividend,w,c
 22660  0043FC  5004               	movf	i2___lwdiv@divisor+1,w,c
 22661  0043FE  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 22662  004400  A0D8               	btfss	status,0,c
 22663  004402  D006               	goto	i2l6569
 22664  004404  5003               	movf	i2___lwdiv@divisor,w,c
 22665  004406  5E01               	subwf	i2___lwdiv@dividend,f,c
 22666  004408  5004               	movf	i2___lwdiv@divisor+1,w,c
 22667  00440A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 22668  00440C  8005               	bsf	i2___lwdiv@quotient,0,c
 22669  00440E  D000               	goto	i2l6569
 22670  004410                     i2l6569:
 22671  004410  90D8               	bcf	status,0,c
 22672  004412  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 22673  004414  3203               	rrcf	i2___lwdiv@divisor,f,c
 22674  004416  2E07               	decfsz	i2___lwdiv@counter,f,c
 22675  004418  D7EC               	goto	i2l6561
 22676  00441A  D000               	goto	i2l1994
 22677  00441C                     i2l1994:
 22678  00441C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22679  004420  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22680  004424  0012               	return		;funcret
 22681  004426                     __end_ofi2___lwdiv:
 22682                           	opt stack 0
 22683                           pclatu	equ	0xFFB
 22684                           pclath	equ	0xFFA
 22685                           tblptru	equ	0xFF8
 22686                           tblptrh	equ	0xFF7
 22687                           tblptrl	equ	0xFF6
 22688                           tablat	equ	0xFF5
 22689                           prodh	equ	0xFF4
 22690                           prodl	equ	0xFF3
 22691                           intcon	equ	0xFF2
 22692                           intcon2	equ	0xFF1
 22693                           intcon3	equ	0xFF0
 22694                           postinc0	equ	0xFEE
 22695                           fsr0h	equ	0xFEA
 22696                           fsr0l	equ	0xFE9
 22697                           wreg	equ	0xFE8
 22698                           postdec1	equ	0xFE5
 22699                           fsr1h	equ	0xFE2
 22700                           fsr1l	equ	0xFE1
 22701                           indf2	equ	0xFDF
 22702                           postinc2	equ	0xFDE
 22703                           postdec2	equ	0xFDD
 22704                           fsr2h	equ	0xFDA
 22705                           fsr2l	equ	0xFD9
 22706                           status	equ	0xFD8
 22707                           
 22708 ;; *************** function _INT1_isr *****************
 22709 ;; Defined at:
 22710 ;;		line 182 in file "Interrupt.c"
 22711 ;; Parameters:    Size  Location     Type
 22712 ;;		None
 22713 ;; Auto vars:     Size  Location     Type
 22714 ;;		None
 22715 ;; Return value:  Size  Location     Type
 22716 ;;		None               void
 22717 ;; Registers used:
 22718 ;;		wreg, status,2
 22719 ;; Tracked objects:
 22720 ;;		On entry : 0/0
 22721 ;;		On exit  : 0/0
 22722 ;;		Unchanged: 0/0
 22723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22728 ;;Total ram usage:        0 bytes
 22729 ;; Hardware stack levels used:    1
 22730 ;; This function calls:
 22731 ;;		Nothing
 22732 ;; This function is called by:
 22733 ;;		_chkisr
 22734 ;; This function uses a non-reentrant model
 22735 ;;
 22736                           
 22737                           	psect	text125
 22738  004E2A                     __ptext125:
 22739                           	opt stack 0
 22740  004E2A                     _INT1_isr:
 22741                           	opt stack 19
 22742                           
 22743                           ;Interrupt.c: 185: INTCON3bits.INT1IF=0;
 22744                           
 22745                           ;incstack = 0
 22746  004E2A  90F0               	bcf	intcon3,0,c	;volatile
 22747                           
 22748                           ;Interrupt.c: 186: INT1_flag = 1;
 22749  004E2C  0E01               	movlw	1
 22750  004E2E  6E46               	movwf	_INT1_flag,c
 22751  004E30  0012               	return		;funcret
 22752  004E32                     __end_of_INT1_isr:
 22753                           	opt stack 0
 22754                           pclatu	equ	0xFFB
 22755                           pclath	equ	0xFFA
 22756                           tblptru	equ	0xFF8
 22757                           tblptrh	equ	0xFF7
 22758                           tblptrl	equ	0xFF6
 22759                           tablat	equ	0xFF5
 22760                           prodh	equ	0xFF4
 22761                           prodl	equ	0xFF3
 22762                           intcon	equ	0xFF2
 22763                           intcon2	equ	0xFF1
 22764                           intcon3	equ	0xFF0
 22765                           postinc0	equ	0xFEE
 22766                           fsr0h	equ	0xFEA
 22767                           fsr0l	equ	0xFE9
 22768                           wreg	equ	0xFE8
 22769                           postdec1	equ	0xFE5
 22770                           fsr1h	equ	0xFE2
 22771                           fsr1l	equ	0xFE1
 22772                           indf2	equ	0xFDF
 22773                           postinc2	equ	0xFDE
 22774                           postdec2	equ	0xFDD
 22775                           fsr2h	equ	0xFDA
 22776                           fsr2l	equ	0xFD9
 22777                           status	equ	0xFD8
 22778                           
 22779 ;; *************** function _INT0_isr *****************
 22780 ;; Defined at:
 22781 ;;		line 68 in file "Interrupt.c"
 22782 ;; Parameters:    Size  Location     Type
 22783 ;;		None
 22784 ;; Auto vars:     Size  Location     Type
 22785 ;;		None
 22786 ;; Return value:  Size  Location     Type
 22787 ;;		None               void
 22788 ;; Registers used:
 22789 ;;		wreg, status,2, status,0, cstack
 22790 ;; Tracked objects:
 22791 ;;		On entry : 0/0
 22792 ;;		On exit  : 0/0
 22793 ;;		Unchanged: 0/0
 22794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22797 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22799 ;;Total ram usage:        2 bytes
 22800 ;; Hardware stack levels used:    1
 22801 ;; Hardware stack levels required when called:    1
 22802 ;; This function calls:
 22803 ;;		_force_nec_state0
 22804 ;; This function is called by:
 22805 ;;		_chkisr
 22806 ;; This function uses a non-reentrant model
 22807 ;;
 22808                           
 22809                           	psect	text126
 22810  00214C                     __ptext126:
 22811                           	opt stack 0
 22812  00214C                     _INT0_isr:
 22813                           	opt stack 18
 22814                           
 22815                           ;Interrupt.c: 70: INTCONbits.INT0IF = 0;
 22816                           
 22817                           ;incstack = 0
 22818  00214C  92F2               	bcf	intcon,1,c	;volatile
 22819                           
 22820                           ;Interrupt.c: 71: if (Nec_state != 0)
 22821  00214E  504B               	movf	_Nec_state,w,c
 22822  002150  B4D8               	btfsc	status,2,c
 22823  002152  D096               	goto	i2l4253
 22824                           
 22825                           ;Interrupt.c: 72: {
 22826                           ;Interrupt.c: 73: Time_Elapsed = (TMR1H << 8) | TMR1L;
 22827  002154  50CE               	movf	4046,w,c	;volatile
 22828  002156  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 22829  00215A  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 22830  00215C  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 22831  002160  6A01               	clrf	??_INT0_isr,c
 22832  002162  1001               	iorwf	??_INT0_isr,w,c
 22833  002164  6E38               	movwf	_Time_Elapsed,c
 22834  002166  5002               	movf	??_INT0_isr+1,w,c
 22835  002168  6E39               	movwf	_Time_Elapsed+1,c
 22836                           
 22837                           ;Interrupt.c: 74: TMR1H = 0;
 22838  00216A  0E00               	movlw	0
 22839  00216C  6ECF               	movwf	4047,c	;volatile
 22840                           
 22841                           ;Interrupt.c: 75: TMR1L = 0;
 22842  00216E  0E00               	movlw	0
 22843  002170  6ECE               	movwf	4046,c	;volatile
 22844                           
 22845                           ;Interrupt.c: 76: }
 22846                           ;Interrupt.c: 78: switch(Nec_state)
 22847  002172  D086               	goto	i2l4253
 22848  002174                     i2l4181:
 22849                           
 22850                           ;Interrupt.c: 81: {
 22851                           ;Interrupt.c: 83: TMR1H = 0;
 22852  002174  0E00               	movlw	0
 22853  002176  6ECF               	movwf	4047,c	;volatile
 22854                           
 22855                           ;Interrupt.c: 84: TMR1L = 0;
 22856  002178  0E00               	movlw	0
 22857  00217A  6ECE               	movwf	4046,c	;volatile
 22858                           
 22859                           ;Interrupt.c: 85: PIR1bits.TMR1IF = 0;
 22860  00217C  909E               	bcf	3998,0,c	;volatile
 22861                           
 22862                           ;Interrupt.c: 86: T1CON= 0x90;
 22863  00217E  0E90               	movlw	144
 22864  002180  6ECD               	movwf	4045,c	;volatile
 22865                           
 22866                           ;Interrupt.c: 87: T1CONbits.TMR1ON = 1;
 22867  002182  80CD               	bsf	4045,0,c	;volatile
 22868                           
 22869                           ;Interrupt.c: 88: bit_count = 0;
 22870  002184  0E00               	movlw	0
 22871  002186  6E53               	movwf	_bit_count,c
 22872                           
 22873                           ;Interrupt.c: 89: Nec_code = 0;
 22874  002188  0E00               	movlw	0
 22875  00218A  6E2D               	movwf	_Nec_code,c
 22876  00218C  0E00               	movlw	0
 22877  00218E  6E2E               	movwf	_Nec_code+1,c
 22878  002190  0E00               	movlw	0
 22879  002192  6E2F               	movwf	_Nec_code+2,c
 22880  002194  0E00               	movlw	0
 22881  002196  6E30               	movwf	_Nec_code+3,c
 22882                           
 22883                           ;Interrupt.c: 90: Nec_state = 1;
 22884  002198  0E01               	movlw	1
 22885  00219A  6E4B               	movwf	_Nec_state,c
 22886  00219C  D06F               	goto	i2l4247
 22887                           
 22888                           ;Interrupt.c: 92: return;
 22889                           
 22890                           ;Interrupt.c: 91: INTCON2bits.INTEDG0 = 1;
 22891  00219E  D081               	goto	i2l277
 22892  0021A0                     i2l4191:
 22893                           
 22894                           ;Interrupt.c: 96: {
 22895                           ;Interrupt.c: 98: if( (Time_Elapsed > 8500 ) && (Time_Elapsed < 9500))
 22896  0021A0  0E35               	movlw	53
 22897  0021A2  5C38               	subwf	_Time_Elapsed,w,c
 22898  0021A4  0E21               	movlw	33
 22899  0021A6  5839               	subwfb	_Time_Elapsed+1,w,c
 22900  0021A8  A0D8               	btfss	status,0,c
 22901  0021AA  D009               	goto	i2l4197
 22902  0021AC  0E1C               	movlw	28
 22903  0021AE  5C38               	subwf	_Time_Elapsed,w,c
 22904  0021B0  0E25               	movlw	37
 22905  0021B2  5839               	subwfb	_Time_Elapsed+1,w,c
 22906  0021B4  B0D8               	btfsc	status,0,c
 22907  0021B6  D003               	goto	i2l4197
 22908                           
 22909                           ;Interrupt.c: 99: {
 22910                           ;Interrupt.c: 100: Nec_state = 2;
 22911  0021B8  0E02               	movlw	2
 22912  0021BA  6E4B               	movwf	_Nec_state,c
 22913                           
 22914                           ;Interrupt.c: 101: }
 22915  0021BC  D02A               	goto	i2l4223
 22916  0021BE                     i2l4197:
 22917                           
 22918                           ;Interrupt.c: 102: else
 22919                           ;Interrupt.c: 103: {
 22920                           ;Interrupt.c: 104: force_nec_state0();
 22921  0021BE  EC19  F027         	call	_force_nec_state0	;wreg free
 22922  0021C2  D027               	goto	i2l4223
 22923  0021C4  D026               	goto	i2l4223
 22924                           
 22925                           ;Interrupt.c: 108: return;
 22926                           
 22927                           ;Interrupt.c: 105: }
 22928                           ;Interrupt.c: 107: INTCON2bits.INTEDG0 = 0;
 22929  0021C6  D06D               	goto	i2l277
 22930  0021C8                     i2l4203:
 22931                           
 22932                           ;Interrupt.c: 112: {
 22933                           ;Interrupt.c: 114: if( (Time_Elapsed > 4000 ) && (Time_Elapsed < 5000))
 22934  0021C8  0EA1               	movlw	161
 22935  0021CA  5C38               	subwf	_Time_Elapsed,w,c
 22936  0021CC  0E0F               	movlw	15
 22937  0021CE  5839               	subwfb	_Time_Elapsed+1,w,c
 22938  0021D0  A0D8               	btfss	status,0,c
 22939  0021D2  D009               	goto	i2l4209
 22940  0021D4  0E88               	movlw	136
 22941  0021D6  5C38               	subwf	_Time_Elapsed,w,c
 22942  0021D8  0E13               	movlw	19
 22943  0021DA  5839               	subwfb	_Time_Elapsed+1,w,c
 22944  0021DC  B0D8               	btfsc	status,0,c
 22945  0021DE  D003               	goto	i2l4209
 22946  0021E0                     
 22947                           ;Interrupt.c: 115: {
 22948                           ;Interrupt.c: 116: Nec_state = 3;
 22949  0021E0  0E03               	movlw	3
 22950  0021E2  6E4B               	movwf	_Nec_state,c
 22951                           
 22952                           ;Interrupt.c: 117: }
 22953  0021E4  D04B               	goto	i2l4247
 22954  0021E6                     i2l4209:
 22955                           
 22956                           ;Interrupt.c: 119: else
 22957                           ;Interrupt.c: 120: {
 22958                           ;Interrupt.c: 121: force_nec_state0();
 22959  0021E6  EC19  F027         	call	_force_nec_state0	;wreg free
 22960  0021EA  D048               	goto	i2l4247
 22961  0021EC  D047               	goto	i2l4247
 22962                           
 22963                           ;Interrupt.c: 124: return;
 22964                           
 22965                           ;Interrupt.c: 122: }
 22966                           ;Interrupt.c: 123: INTCON2bits.INTEDG0 = 1;
 22967  0021EE  D059               	goto	i2l277
 22968  0021F0                     i2l4215:
 22969                           
 22970                           ;Interrupt.c: 128: {
 22971                           ;Interrupt.c: 130: if( (Time_Elapsed > 400 ) && (Time_Elapsed < 700))
 22972  0021F0  0E91               	movlw	145
 22973  0021F2  5C38               	subwf	_Time_Elapsed,w,c
 22974  0021F4  0E01               	movlw	1
 22975  0021F6  5839               	subwfb	_Time_Elapsed+1,w,c
 22976  0021F8  A0D8               	btfss	status,0,c
 22977  0021FA  D008               	goto	i2l4221
 22978  0021FC  0EBC               	movlw	188
 22979  0021FE  5C38               	subwf	_Time_Elapsed,w,c
 22980  002200  0E02               	movlw	2
 22981  002202  5839               	subwfb	_Time_Elapsed+1,w,c
 22982  002204  B0D8               	btfsc	status,0,c
 22983  002206  D002               	goto	i2l4221
 22984                           
 22985                           ;Interrupt.c: 131: {
 22986                           ;Interrupt.c: 132: Nec_state = 4;
 22987  002208  0E04               	movlw	4
 22988  00220A  D7D7               	goto	L6
 22989  00220C                     i2l4221:
 22990                           
 22991                           ;Interrupt.c: 135: else
 22992                           ;Interrupt.c: 136: {
 22993                           ;Interrupt.c: 137: force_nec_state0();
 22994  00220C  EC19  F027         	call	_force_nec_state0	;wreg free
 22995  002210  D000               	goto	i2l4223
 22996  002212                     i2l4223:
 22997                           
 22998                           ;Interrupt.c: 138: }
 22999                           ;Interrupt.c: 139: INTCON2bits.INTEDG0 = 0;
 23000  002212  9CF1               	bcf	intcon2,6,c	;volatile
 23001                           
 23002                           ;Interrupt.c: 140: return;
 23003  002214  D046               	goto	i2l277
 23004  002216                     i2l4227:
 23005                           
 23006                           ;Interrupt.c: 144: {
 23007                           ;Interrupt.c: 146: if( (Time_Elapsed > 400) && (Time_Elapsed < 1800))
 23008  002216  0E91               	movlw	145
 23009  002218  5C38               	subwf	_Time_Elapsed,w,c
 23010  00221A  0E01               	movlw	1
 23011  00221C  5839               	subwfb	_Time_Elapsed+1,w,c
 23012  00221E  A0D8               	btfss	status,0,c
 23013  002220  D02A               	goto	i2l4245
 23014  002222  0E08               	movlw	8
 23015  002224  5C38               	subwf	_Time_Elapsed,w,c
 23016  002226  0E07               	movlw	7
 23017  002228  5839               	subwfb	_Time_Elapsed+1,w,c
 23018  00222A  B0D8               	btfsc	status,0,c
 23019  00222C  D024               	goto	i2l4245
 23020                           
 23021                           ;Interrupt.c: 147: {
 23022                           ;Interrupt.c: 148: Nec_code = Nec_code << 1;
 23023  00222E  90D8               	bcf	status,0,c
 23024  002230  342D               	rlcf	_Nec_code,w,c
 23025  002232  6E2D               	movwf	_Nec_code,c
 23026  002234  342E               	rlcf	_Nec_code+1,w,c
 23027  002236  6E2E               	movwf	_Nec_code+1,c
 23028  002238  342F               	rlcf	_Nec_code+2,w,c
 23029  00223A  6E2F               	movwf	_Nec_code+2,c
 23030  00223C  3430               	rlcf	_Nec_code+3,w,c
 23031  00223E  6E30               	movwf	_Nec_code+3,c
 23032                           
 23033                           ;Interrupt.c: 150: if( Time_Elapsed > 1000 )
 23034  002240  0EE9               	movlw	233
 23035  002242  5C38               	subwf	_Time_Elapsed,w,c
 23036  002244  0E03               	movlw	3
 23037  002246  5839               	subwfb	_Time_Elapsed+1,w,c
 23038  002248  A0D8               	btfss	status,0,c
 23039  00224A  D007               	goto	i2l4235
 23040                           
 23041                           ;Interrupt.c: 151: {
 23042                           ;Interrupt.c: 152: Nec_code += 1;
 23043  00224C  0E01               	movlw	1
 23044  00224E  262D               	addwf	_Nec_code,f,c
 23045  002250  0E00               	movlw	0
 23046  002252  222E               	addwfc	_Nec_code+1,f,c
 23047  002254  222F               	addwfc	_Nec_code+2,f,c
 23048  002256  2230               	addwfc	_Nec_code+3,f,c
 23049  002258  D000               	goto	i2l4235
 23050  00225A                     i2l4235:
 23051                           
 23052                           ;Interrupt.c: 153: }
 23053                           ;Interrupt.c: 155: bit_count++;
 23054  00225A  2A53               	incf	_bit_count,f,c
 23055                           
 23056                           ;Interrupt.c: 157: if( bit_count > 31 )
 23057  00225C  0E1F               	movlw	31
 23058  00225E  6453               	cpfsgt	_bit_count,c
 23059  002260  D7BF               	goto	L7
 23060                           
 23061                           ;Interrupt.c: 158: {
 23062                           ;Interrupt.c: 159: nec_ok = 1;
 23063  002262  0E00               	movlw	0
 23064  002264  6E3F               	movwf	_nec_ok+1,c
 23065  002266  0E01               	movlw	1
 23066  002268  6E3E               	movwf	_nec_ok,c
 23067                           
 23068                           ;Interrupt.c: 160: Nec_code1 = (char) ((Nec_code >> 8));
 23069  00226A  C02E  F04A         	movff	_Nec_code+1,_Nec_code1
 23070                           
 23071                           ;Interrupt.c: 161: INTCONbits.INT0IE = 0;
 23072  00226E  98F2               	bcf	intcon,4,c	;volatile
 23073                           
 23074                           ;Interrupt.c: 162: Nec_state = 0;
 23075  002270  0E00               	movlw	0
 23076  002272  6E4B               	movwf	_Nec_state,c
 23077  002274  D7B5               	goto	L7
 23078  002276                     i2l4245:
 23079                           
 23080                           ;Interrupt.c: 170: else
 23081                           ;Interrupt.c: 171: {
 23082                           ;Interrupt.c: 172: force_nec_state0();
 23083  002276  EC19  F027         	call	_force_nec_state0	;wreg free
 23084  00227A  D000               	goto	i2l4247
 23085  00227C                     i2l4247:
 23086                           
 23087                           ;Interrupt.c: 173: }
 23088                           ;Interrupt.c: 174: INTCON2bits.INTEDG0 = 1;
 23089  00227C  8CF1               	bsf	intcon2,6,c	;volatile
 23090                           
 23091                           ;Interrupt.c: 177: }
 23092                           ;Interrupt.c: 178: }
 23093                           
 23094                           ;Interrupt.c: 176: return;
 23095  00227E  D011               	goto	i2l277
 23096  002280                     i2l4253:
 23097  002280  504B               	movf	_Nec_state,w,c
 23098                           
 23099                           ; Switch size 1, requested type "space"
 23100                           ; Number of cases is 5, Range of values is 0 to 4
 23101                           ; switch strategies available:
 23102                           ; Name         Instructions Cycles
 23103                           ; simple_byte           16     9 (average)
 23104                           ;	Chosen strategy is simple_byte
 23105  002282  0A00               	xorlw	0	; case 0
 23106  002284  B4D8               	btfsc	status,2,c
 23107  002286  D776               	goto	i2l4181
 23108  002288  0A01               	xorlw	1	; case 1
 23109  00228A  B4D8               	btfsc	status,2,c
 23110  00228C  D789               	goto	i2l4191
 23111  00228E  0A03               	xorlw	3	; case 2
 23112  002290  B4D8               	btfsc	status,2,c
 23113  002292  D79A               	goto	i2l4203
 23114  002294  0A01               	xorlw	1	; case 3
 23115  002296  B4D8               	btfsc	status,2,c
 23116  002298  D7AB               	goto	i2l4215
 23117  00229A  0A07               	xorlw	7	; case 4
 23118  00229C  B4D8               	btfsc	status,2,c
 23119  00229E  D7BB               	goto	i2l4227
 23120  0022A0  D000               	goto	i2l277
 23121  0022A2                     i2l277:
 23122  0022A2  0012               	return		;funcret
 23123  0022A4                     __end_of_INT0_isr:
 23124                           	opt stack 0
 23125                           pclatu	equ	0xFFB
 23126                           pclath	equ	0xFFA
 23127                           tblptru	equ	0xFF8
 23128                           tblptrh	equ	0xFF7
 23129                           tblptrl	equ	0xFF6
 23130                           tablat	equ	0xFF5
 23131                           prodh	equ	0xFF4
 23132                           prodl	equ	0xFF3
 23133                           intcon	equ	0xFF2
 23134                           intcon2	equ	0xFF1
 23135                           intcon3	equ	0xFF0
 23136                           postinc0	equ	0xFEE
 23137                           fsr0h	equ	0xFEA
 23138                           fsr0l	equ	0xFE9
 23139                           wreg	equ	0xFE8
 23140                           postdec1	equ	0xFE5
 23141                           fsr1h	equ	0xFE2
 23142                           fsr1l	equ	0xFE1
 23143                           indf2	equ	0xFDF
 23144                           postinc2	equ	0xFDE
 23145                           postdec2	equ	0xFDD
 23146                           fsr2h	equ	0xFDA
 23147                           fsr2l	equ	0xFD9
 23148                           status	equ	0xFD8
 23149                           
 23150 ;; *************** function _force_nec_state0 *****************
 23151 ;; Defined at:
 23152 ;;		line 62 in file "Interrupt.c"
 23153 ;; Parameters:    Size  Location     Type
 23154 ;;		None
 23155 ;; Auto vars:     Size  Location     Type
 23156 ;;		None
 23157 ;; Return value:  Size  Location     Type
 23158 ;;		None               void
 23159 ;; Registers used:
 23160 ;;		wreg, status,2
 23161 ;; Tracked objects:
 23162 ;;		On entry : 0/0
 23163 ;;		On exit  : 0/0
 23164 ;;		Unchanged: 0/0
 23165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23170 ;;Total ram usage:        0 bytes
 23171 ;; Hardware stack levels used:    1
 23172 ;; This function calls:
 23173 ;;		Nothing
 23174 ;; This function is called by:
 23175 ;;		_INT0_isr
 23176 ;; This function uses a non-reentrant model
 23177 ;;
 23178                           
 23179                           	psect	text127
 23180  004E32                     __ptext127:
 23181                           	opt stack 0
 23182  004E32                     _force_nec_state0:
 23183                           	opt stack 18
 23184                           
 23185                           ;Interrupt.c: 64: Nec_state=0;
 23186                           
 23187                           ;incstack = 0
 23188  004E32  0E00               	movlw	0
 23189  004E34  6E4B               	movwf	_Nec_state,c
 23190                           
 23191                           ;Interrupt.c: 65: T1CONbits.TMR1ON = 0;
 23192  004E36  90CD               	bcf	4045,0,c	;volatile
 23193  004E38  0012               	return		;funcret
 23194  004E3A                     __end_of_force_nec_state0:
 23195                           	opt stack 0
 23196                           pclatu	equ	0xFFB
 23197                           pclath	equ	0xFFA
 23198                           tblptru	equ	0xFF8
 23199                           tblptrh	equ	0xFF7
 23200                           tblptrl	equ	0xFF6
 23201                           tablat	equ	0xFF5
 23202                           prodh	equ	0xFF4
 23203                           prodl	equ	0xFF3
 23204                           intcon	equ	0xFF2
 23205                           intcon2	equ	0xFF1
 23206                           intcon3	equ	0xFF0
 23207                           postinc0	equ	0xFEE
 23208                           fsr0h	equ	0xFEA
 23209                           fsr0l	equ	0xFE9
 23210                           wreg	equ	0xFE8
 23211                           postdec1	equ	0xFE5
 23212                           fsr1h	equ	0xFE2
 23213                           fsr1l	equ	0xFE1
 23214                           indf2	equ	0xFDF
 23215                           postinc2	equ	0xFDE
 23216                           postdec2	equ	0xFDD
 23217                           fsr2h	equ	0xFDA
 23218                           fsr2l	equ	0xFD9
 23219                           status	equ	0xFD8
 23220                           pclatu	equ	0xFFB
 23221                           pclath	equ	0xFFA
 23222                           tblptru	equ	0xFF8
 23223                           tblptrh	equ	0xFF7
 23224                           tblptrl	equ	0xFF6
 23225                           tablat	equ	0xFF5
 23226                           prodh	equ	0xFF4
 23227                           prodl	equ	0xFF3
 23228                           intcon	equ	0xFF2
 23229                           intcon2	equ	0xFF1
 23230                           intcon3	equ	0xFF0
 23231                           postinc0	equ	0xFEE
 23232                           fsr0h	equ	0xFEA
 23233                           fsr0l	equ	0xFE9
 23234                           wreg	equ	0xFE8
 23235                           postdec1	equ	0xFE5
 23236                           fsr1h	equ	0xFE2
 23237                           fsr1l	equ	0xFE1
 23238                           indf2	equ	0xFDF
 23239                           postinc2	equ	0xFDE
 23240                           postdec2	equ	0xFDD
 23241                           fsr2h	equ	0xFDA
 23242                           fsr2l	equ	0xFD9
 23243                           status	equ	0xFD8
 23244                           
 23245                           	psect	rparam
 23246  0000                     pclatu	equ	0xFFB
 23247                           pclath	equ	0xFFA
 23248                           tblptru	equ	0xFF8
 23249                           tblptrh	equ	0xFF7
 23250                           tblptrl	equ	0xFF6
 23251                           tablat	equ	0xFF5
 23252                           prodh	equ	0xFF4
 23253                           prodl	equ	0xFF3
 23254                           intcon	equ	0xFF2
 23255                           intcon2	equ	0xFF1
 23256                           intcon3	equ	0xFF0
 23257                           postinc0	equ	0xFEE
 23258                           fsr0h	equ	0xFEA
 23259                           fsr0l	equ	0xFE9
 23260                           wreg	equ	0xFE8
 23261                           postdec1	equ	0xFE5
 23262                           fsr1h	equ	0xFE2
 23263                           fsr1l	equ	0xFE1
 23264                           indf2	equ	0xFDF
 23265                           postinc2	equ	0xFDE
 23266                           postdec2	equ	0xFDD
 23267                           fsr2h	equ	0xFDA
 23268                           fsr2l	equ	0xFD9
 23269                           status	equ	0xFD8


Data Sizes:
    Strings     406
    Constant    493
    Data        166
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     44      87
    BANK0           128     29     128
    BANK1           256     38     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_36(CODE[5]), STR_35(CODE[5]), STR_34(CODE[12]), STR_33(CODE[21]), 
		 -> STR_32(CODE[16]), STR_31(CODE[10]), STR_30(CODE[11]), STR_29(CODE[21]), 
		 -> STR_27(CODE[5]), STR_26(CODE[8]), STR_25(CODE[8]), STR_24(CODE[20]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[4]), STR_18(CODE[5]), STR_17(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[7]), STR_14(CODE[13]), STR_13(CODE[9]), STR_12(CODE[11]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[2]), STR_8(CODE[3]), 
		 -> STR_7(CODE[13]), STR_6(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_38(CODE[22]), STR_37(CODE[16]), STR_28(CODE[11]), STR_5(CODE[20]), 
		 -> STR_4(CODE[24]), STR_3(CODE[21]), STR_2(CODE[30]), STR_1(CODE[33]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _chkisr in COMRAM

    _INT2_isr->i2_printf
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_check_for_button_input
    _Update_Screen->___awmod
    ___awtoft->___ftpack
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _Do_Setup_Time->_check_for_button_input
    _Initialize_Setup_Time_Screen->_fillRect
    _Update_Setup_Time_Screen->___awmod
    _Do_Setup_Heater_Temp->_check_for_button_input
    _Update_Setup_Heater_Screen->___awmod
    _Do_Setup_Alarm_Time->_check_for_button_input
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_fillRect
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _do_update_pwm->___ftmul
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Update_Setup_Alarm_Time_Screen->___awmod
    _printf->___lwmod
    ___lwmod->___lwdiv
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___awmod->___ftmul
    ___awdiv->___awmod
    _Do_Init->_DS3231_Init
    _init_UART->_OpenUSART
    _Set_RGB_Color->_Wait_One_Sec
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    _Test_Alarm->_do_update_pwm
    _read_volt->___ftdiv
    _Monitor_Heater->_do_update_pwm
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Do_Setup_Heater_Temp->_Update_Setup_Heater_Screen
    _Initialize_Setup_Heater_Screen->_drawtext
    _Increase_Heater_Temp->_Update_Setup_Heater_Screen
    _Decrease_Heater_Temp->_Update_Setup_Heater_Screen
    _Update_Setup_Heater_Screen->_drawtext
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awdiv
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _drawtext->_drawChar
    ___awmod->___fttol
    ___awdiv->___awmod

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1330857
                                             36 BANK1      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                        _Set_RPM_RGB
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    5645
                                             27 BANK1      4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        7     7      0   56013
                                             28 BANK1      7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           0     0      0   27636
               _Activate_Buzzer_4KHz
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                             ___ftge
                      _do_update_pwm
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            8     5      3    7398
                                             15 BANK1      8     5      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2674
                                              8 BANK0      4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     352
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    4792
                                             10 BANK0      5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    4792
                                             10 BANK0      5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer_4KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          2     0      2     263
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       0     0      0   10546
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       8     4      4     343
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  384118
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   58565
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   46913
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   13499
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   13530
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   61571
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   70600
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    9029
                                             34 BANK1      2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   46913
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   46913
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 2     2      0  334812
                                             31 BANK1      2     2      0
               _Decrease_Heater_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
            _Do_Save_New_Heater_Temp
             _Exit_Setup_Heater_Temp
               _Increase_Heater_Temp
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   45537
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Heater_Temp                                 0     0      0   47015
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Heater_Temp                               0     0      0   61571
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Heater_Temp                              0     0      0   61571
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Heater_Temp                                 0     0      0   47015
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   47015
                                             28 BANK1      3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  398217
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0    4546
                                             26 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      96
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   58565
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0   51326
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0   13499
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   13499
                                              0 BANK1      3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0   13530
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   13530
                                              0 BANK1      3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   61571
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   71460
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   61141
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    4729
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2627
                                             19 BANK0      2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2288
                                              7 BANK0     12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    7512
                                             11 BANK0     10     2      8
                                              0 BANK1     10    10      0
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    5568
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2654
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2654
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2524
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2524
                                              6 BANK0      6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    9459
                                             34 BANK1      2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    8828
                                             27 BANK1      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     430
                                              3 BANK0      2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     430
                                              3 BANK0      2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   10271
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   10271
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _do_update_pwm                                        9     9      0   10203
                                             15 BANK1      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2495
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     679
                                              0 BANK1     15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3528
                                             12 BANK0     15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3306
                                              0 BANK1     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2464
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0   51326
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0   51326
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    4413
                                             12 BANK0     14     0     14
                                              0 BANK1     14    14      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   38181
                                             11 BANK1     17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     207
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   21092
                                              0 BANK1     11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   13028
                                             18 BANK0     11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3534
                                              7 BANK0     11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4879
                                              7 BANK0      4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1178
                                              3 BANK0      4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                              2 BANK0      1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                              2 BANK0      1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    4437
                                             27 BANK0      2     2      0
                                             15 BANK1      4     0      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    4295
                                             19 BANK1      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    3840
                        _DS1621_Init
                        _DS3231_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                      _Set_RGB_Color
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     387
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     387
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_RGB_Color                                        1     1      0      99
                                              2 BANK0      1     1      0
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      77
                                              0 BANK0      4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    2560
                                              6 BANK0      4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     996
                                              2 BANK0      3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     843
                                              3 BANK0      3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     717
                                              5 BANK0      1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     380
                                              2 BANK0      3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     272
                                              2 BANK0      2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                              3 BANK0      5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                              0 BANK0      2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     198
                                              0 BANK0      3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0    1799
                                             30 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0    1799
                           i2_printf
 ---------------------------------------------------------------------------------
 (13) i2_printf                                           27    23      4    1799
                                             12 COMRAM    18    14      4
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (14) i2_putch                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (14) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Set_RGB_Color
       _Wait_One_Sec
     _Turn_Off_Fan
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
             ___wmul (ARG)
           ___awmod
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Heater_Temp
     _Decrease_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___lbtoft (ARG)
                     ___ftpack
             ___wmul (ARG)
           ___awmod
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Set_RPM_RGB
   _Test_Alarm
     _Activate_Buzzer_4KHz
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_RGB_Color
       _Wait_One_Sec
     ___ftge
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
     _read_volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
   _Toggle_Heater
   _Update_Screen
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       ___wmul (ARG)
     ___awmod
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___awmod (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _get_RPM
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _INT1_isr
   _INT2_isr
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     26      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1D      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2C      57       1       68.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     155      34        0.0%
DATA                 0      0     155       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 02 20:56:53 2021

                                 drawCircle@f 015C                                   drawCircle@r 00DC  
                                 drawCircle@x 015E                                   drawCircle@y 0160  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 004C                                  drawCircle@x0 00D8  
                                drawCircle@y0 00DA                                            l22 3D32  
                                          l30 4956                                            l24 3D28  
                                          l28 4952                                            l36 478C  
                                          l72 43C8                                            l75 4634  
                __size_of_Do_Setup_Alarm_Time 00CC                                  ___awdiv@sign 0170  
                               read_volt@step 016D                                 read_volt@volt 016A  
                         ___wmul@multiplicand 00CF                            i2___lwdiv@dividend 0001  
                             ??_Update_Screen 0174                                           l109 484C  
                                         l513 4D80                                           l187 4700  
                                         l550 23EA                                           _FAN 0044  
                                         _PR2 000FCB                          DS3231_Init@Address_7 00D3  
                        DS3231_Init@Address_E 00D4                                           _day 0088  
                           _Deactivate_Buzzer 4E12                          __size_of_I2C_ReStart 0016  
                   __size_of_Do_Save_New_Time 0012                                           _dow 0089  
                                         _nbr 00EE                                           _rpm 00F0  
                       __size_of_Turn_Off_Fan 000C                                           _rps 0040  
                                         _txt 0042                                  ___awmod@sign 00E9  
                                         prod 000FF3                                           wreg 000FE8  
                               _Increase_Time 3830                  __size_of_Go_Next_Alarm_Field 0018  
                          ?_Deactivate_Buzzer 0001                   __end_of_Decrease_Alarm_Time 44D6  
      Update_Setup_Screen_Cursor_Forward@xinc 015A        Update_Setup_Screen_Cursor_Forward@yinc 0159  
                             ??_fillRectangle 00D9                                  __CFG_LVP$OFF 000000  
                     _TFT_GreenTab_Initialize 49B6                                  ___ftdiv@cntr 0161  
                                ___ftdiv@sign 0166                                  __CFG_WDT$OFF 000000  
                                        l1102 4098                                          l1014 17CA  
                                        l1025 1A0A                                          l1202 4C6A  
                                        l1116 4A30                                          l2004 4240  
                              drawFastVLine@h 00D5                                          l1141 4104  
                                        l1144 48FC                                          l2033 45D0  
                                        l1305 27BA                                          l1306 26E0  
                                        l1147 4926                                          l1252 382E  
                                        l1316 1430                                          l1308 278A  
                                        l1309 27B8                                          l1157 3C14  
                                        l1246 47D0                                          l1270 1E58  
                                        l1095 3A40                                          l1192 4366  
                                        l1435 0FDA                                          l1099 4888  
                                        l1268 1FEE                                drawFastVLine@x 00DE  
                                        l1277 1F00                                drawFastVLine@y 00D4  
                                        l1463 3E14                                          l1471 48C0  
                                        l1464 3E16                                          l1465 3E22  
                                        l1466 3E24                                          l1459 3DF4  
                                        l1468 3E40                                          l1902 49B4  
                                        l1398 0D08                                          l1664 344A  
                                        l1851 28FC                                          l1860 3518  
                                        l1677 3998                                          l1790 2D64  
                                        l1854 28C4                                          l1928 4986  
                                        l1689 4748                                          l1866 214A  
                                        l1779 2D9C                                          l1887 2A2E  
                                        l1994 3EBA                I2C_Write_Cmd_Write_Data@Device 00D1  
                                        l8201 4386                                          l8221 43C2  
                                        l8141 3820                                          l8125 3784  
                                        l9021 20E0                                          l9013 20A4  
                                        l8207 4396                                          l8215 43AC  
                                        l9031 2124                                          l9023 20E8  
                                        l8209 43A2                                          l8233 4640  
                                        l8129 37D8                                          l9017 20C4  
                                        l9041 2928                                          l8219 43BC  
                                        l8235 4646                                          l8227 462A  
                                        l8139 380E                                          l8163 4258  
                                        l8411 1FA6                                          l8403 1F30  
                                        l9027 2108                                          l8245 465E  
                                        l8413 1FDC                                          l8405 1F66  
                                        l8501 2D12                                          l8167 4278  
                                        l8511 2D70                                          l8503 2D44  
                                        l9071 29F0                                          l9063 29C0  
                                        l8425 458E                                          l8505 2D54  
                                        l9065 29C8                                          l9073 29FE  
                                        l9401 1876                                          l8187 47A4  
                                        l8419 1FE8                                          l8427 4596  
                                        l8611 3E78                                          l9059 29AC  
                                        l8443 2734                                          l9411 1990  
                                        l8197 437C                                          l9261 3DE0  
                                        l8541 33D0                                          l8381 1E52  
                                        l8373 1E2E                                          l8517 2D8E  
                                        l9077 2A1C                                          l9069 29DE  
                                        l8437 268E                                          l9405 18E8  
                                        l8543 33DE                                          l8535 33B2  
                                        l8391 1EAA                                          l8383 1E5E  
                                        l8607 3E60                                          l8631 420A  
                                        l8711 0C2E                                          l8703 0BF8  
                                        l9095 3272                                          l8463 279C  
                                        l8455 277C                                          l9407 1938  
                                        l9441 4A26                                          l9265 3DEA  
                                        l9257 3DD4                                          l8561 3440  
                                        l8553 341A                                          l8545 33E8  
                                        l8529 339A                                          l8393 1EF0  
                                        l8377 1E40                                          l8609 3E6E  
                                        l8481 49AA                                          l8801 0EB6  
                                        l8705 0C0A                                          l9417 19E0  
                                        l8395 1EF6                                          l8387 1E68  
                                        l8619 3EAA                                          l8635 4230  
                                        l8627 41F2                                          l8811 0EF2  
                                        l8723 0CCC                                          l8715 0C4E  
                                        l8459 278E                                          l9437 4A14  
                                        l9277 3E0A                                          l9269 3DF8  
                                        l8557 342A                                          l8581 392A  
                                        l8573 3904                                          l8629 4200  
                                        l8813 0F3E                                          l8821 0FA0  
                                        l8805 0ED4                                          l8709 0C18  
                                        l8493 2CAE                                          l8469 27B2  
                                        l9373 1610                                          l8583 3938  
                                        l8823 0FAA                                          l8743 0D5C  
                                        l8727 0CD6                                          l8495 2CBE  
                                        l8911 1408                                          l9383 16F8  
                                        l9375 1658                                          l9391 17A0  
                                        l9703 42DC                                          l9711 42F2  
                                        l8585 3942                                          l8593 3978  
                                        l8577 3916                                          l8809 0EEA  
                                        l8753 0D9A                                          l8745 0D62  
                                        l8825 0FBA                                          l8497 2CF0  
                                        l8489 2C98                                          l9385 1748  
                                        l9369 1596                                          l9713 4308  
                                        l9801 4B48                                          l9465 4720  
                                        l8819 0F8C                                          l8763 0DB6  
                                        l8739 0D40                                          l9379 16A8  
                                        l9395 17DE                                          l9811 3A44  
                                        l8597 398E                                          l8589 3968  
                                        l8781 0E20                                          l8757 0DA2  
                                        l8749 0D70                                          l8773 0DE8  
                                        l8853 48CC                                          l9397 1826  
                                        l9645 4BF0                                          l9821 3A6A  
                                        l9477 3CD2                                          l8767 0DE0  
                                        l8759 0DA8                                          l8775 0DFC  
                                        l9671 4496                                          l8855 48DA  
                                        l9655 4C0C                                          l9647 4BF4  
                                        l9575 39D4                                          l9823 3A70  
                                        l9815 3A54                                          l9903 348E  
                                        l8881 2AE2                                          l8865 2A5C  
                                        l8793 0E80                                          l8785 0E58  
                                        l9681 44B4                                          l9665 4480  
                                        l8953 2820                                          l9585 3A16  
                                        l9753 4BDE                                          l9761 4BC4  
                                        l9841 3AB2                                          l9833 3A96  
                                        l9817 3A5A                                          l9913 3514  
                                        l8891 2B44                                          l8795 0E8C  
                                        l8787 0E64                                          l8699 0BE4  
                                        l8947 27E6                                          l8939 1562  
                                        l9691 42B0                                          l9579 39EE  
                                        l9835 3A9C                                          l9827 3A80  
                                        l9851 3832                                          l9907 34D0  
                                        l8877 2AC0                                          l9677 44A4  
                                        l9669 4490                                          l9685 44BA  
                                        l8973 2882                                          l8949 280C  
                                        l9589 3A20                                          l9829 3A86  
                                        l9845 3AB8                                          l8799 0EAA  
                                        l9679 44AC                                          l9687 44D0  
                                        l8983 28D6                                          l9599 3A3C  
                                        l9839 3AAC                                          l9847 3AE2  
                                        l9791 4B22                                          l9863 385E  
                                        STR_1 FE68                                          STR_2 FE89  
                                        l8889 2B3C                                          l8993 201A  
                                        l9697 42C6                                          l9793 4B28  
                                        l9881 38A0                                          l9857 3848  
                                        STR_3 FF00                                          STR_4 FEA7  
                                        l8995 2040                                          l9875 388A  
                                        l9891 38E0                                          STR_5 FF29  
                                        STR_6 FED5                                          l9869 3874  
                                        STR_7 FF6E                                          STR_8 FFF5  
                                        l8999 2054                                          STR_9 FFEF  
                                        l9889 38B6                                          l9997 3B96  
                                        u6110 1F7C                                          u6180 26D4  
                                        u6190 2726                                          u8200 1C28  
                                        u7190 3D1C                  __end_of_Activate_Buzzer_2KHz 4D32  
                                        u7520 4CE2                                          u8160 1B5E  
                                        u7530 4CE4                                          u7700 237E  
                                        u5870 37CA                                          u7550 3BAA  
                                        u8190 1C26                                          u6911 2030  
                                        u8168 1B62                                          u6841 27D2  
                                        u6770 2A98                                          u8347 4DE0  
                                        u6861 27FC                                          _RBPU 007F8F  
                                        u6951 2914                  __end_of_Activate_Buzzer_4KHz 4CFC  
                                        u6970 294E                                          u6891 2006  
                                        u6975 2944                                          _TRMT 007D61  
                    ??_Do_Save_New_Alarm_Time 00EA                         _setup_heater_set_temp 00FA  
                                _DS1621_tempC 00EC                                  _DS1621_tempF 0034  
                       _setup_heater_set_text 00B2                           ??_Deactivate_Buzzer 00CD  
                                        _date 0090                                          _main 1A0C  
                                        _font FC7B       Update_Setup_Screen_Cursor_Backward@xinc 015A  
                                ___ftpack@arg 00CD       Update_Setup_Screen_Cursor_Backward@yinc 0159  
                                        _hour 008A                                  ___ftpack@exp 00D0  
                            __end_of_I2C_Init 4DFE                              __end_of_I2C_Read 43CA  
                                        _time 0099                                          _year 008F  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                          i2___lwdiv@quotient 0005                                ??_get_full_ADC 00CF  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 008E  
                                        _volt 0031                              __end_of_I2C_Stop 4D56  
                      ?_DS3231_Turn_Off_Alarm 0001                                          pclat 000FFA  
                          __size_of_LCD_Reset 0014                                          prodh 000FF4  
                                        prodl 000FF3                                          start 0018  
                 __size_of_I2C_Write_Cmd_Only 0020                                _Monitor_Heater 4928  
                             __end_of_Do_Init 3FB6                                   _Do_Beep_Bad 4C2C  
                             ??_drawFastVLine 00D8                               __end_ofi2_putch 4DD0  
                                ___ftmul@cntr 00E6                               __end_of_i2cNack 4E08  
                                ___param_bank 000010                                  ___ftmul@sign 00E7  
     Update_Setup_Screen_Cursor_Forward@field 0158                                  ___fttol@exp1 0166  
                   ??_DS3231_Write_Alarm_Time 00EA                         __size_of_Do_Beep_Good 0018  
                                _Turn_Off_Fan 4DD0                                  ___fttol@lval 0162  
             __size_of_Exit_Setup_Heater_Temp 000E                                   ?_TIMER1_isr 0001  
                            __end_of_INT0_isr 22A4                              __end_of_INT1_isr 4E32  
                                       l10001 3BC0                                         l10003 3BC6  
                                       l10101 00B6                                         l10007 3BF2  
                                       l10111 0126                                         l10009 3BF8  
                            __end_of_INT2_isr 4BB0                                         l10051 2336  
                                       l10027 22D8                                         l10061 235C  
                                       l10037 2302                                         l10117 016E  
                                       l10071 2388                                         l10331 35B2  
                                       l10323 3592                                         l10307 3554  
                                       l10171 033A                                         l10341 35D8  
                                       l10261 306A                                         l10245 302C  
                                       l10157 0264                                         l10335 35C2  
                                       l10327 35A2                                         l10319 3582  
                                       l10343 35DE                                         l10175 0342  
                                       l10159 0282                                         l10095 006E  
                                       l10511 1AAA                                         l10353 3AFA  
                                       l10281 30BA                                         l10273 309A  
                                       l10265 307A                                         l10257 305A  
                                       l10177 034A                                         l10169 031C  
                                       l10339 35D2                                         l10371 3B50  
                                       l10283 30C0                                         l10531 1BBA  
                                       l10381 3B76                                         l10277 30AA  
                                       l10269 308A                                         l10285 30C6  
                                       l10375 3B60                                         l10367 3B40  
                                       l10383 3B7C                                         l10543 1BD8  
                                       l10535 1BC4                                         l10551 1BE8  
                                       l10527 1BA6                                         l10553 1C08  
                                       l10379 3B70                                         l10547 1BE2  
                                       l10539 1BCE                                         l10495 1A22  
              __size_of_Activate_Buzzer_500Hz 0012                     __end_of_Deactivate_Buzzer 4E1A  
                             ??_do_update_pwm 0167                               drawFastVLine@hi 00DC  
                             drawFastVLine@lo 00DD                 __end_of_Activate_Buzzer_500Hz 4D44  
                                       ?_main 0001                               __end_of___awdiv 344C  
                             drawCircle@ddF_x 0158                                         STR_10 FFB0  
                             drawCircle@ddF_y 015A                                         STR_11 FFDF  
                                       STR_20 FFE9                                         STR_12 FFAA  
                                       STR_21 FFED                                         STR_13 FFBF  
                                       STR_22 FFE9                                         STR_30 FF94  
                                       STR_14 FF7B                                         STR_23 FFED  
                                       STR_15 FFD8                                         STR_31 FFB5  
                                       STR_16 FFF8                                         STR_32 FF5E  
                                       STR_24 FF15                                         STR_17 FFFB  
                                       STR_25 FFC8                                         STR_33 FEEB  
                                       STR_18 FFE4                                         STR_26 FFD0  
                                       STR_34 FF88                                         STR_35 FFB0  
                                       STR_27 FFB0                                         STR_19 FFF1  
                                       STR_36 FFDF                                         STR_28 FF9F  
                             __end_of___awmod 399A                                         STR_29 FED6  
                                       STR_37 FF4E                                         STR_38 FEBF  
                                       STR_39 FF3D                               __end_of___ftdiv 28FE  
                             __end_of___ftmul 214C                                         _T0CON 000FD5  
                             ___awdiv@divisor 016D                                         _T1CON 000FCD  
                             __end_of___fttol 2A30                                         _T2CON 000FCA  
                                       _T3CON 000FB1                 __size_of_Do_Setup_Heater_Temp 009C  
                             __end_of___lwdiv 3EC4                               __end_of___lwmod 424A  
                                       i2l513 4DC6                                         i2l265 3C6C  
                                       i2l277 22A2                               ___awdiv@counter 016F  
                             drawCircle@color 00DE                                         _RCSTA 000FAB  
                                       _TMR0H 000FD7                                         _TMR1H 000FCF  
                                       _TMR0L 000FD6                                         _TMR1L 000FCE  
                                       _TMR3L 000FB2                                         _SPBRG 000FAF  
                                       _PORTA 000F80                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                                       _TXREG 000FAD                                         _TXSTA 000FAC  
                             __end_of_get_RPM 478E                                         _Rcmd1 2EB8  
                                       _Rcmd3 30CE      Update_Setup_Screen_Cursor_Backward@field 0158  
                                  _i2cHighSda 4E22                                    _i2cHighScl 4DDC  
                                bcd_2_dec@bcd 00D1                                    i2isdigit@c 0003  
                                bcd_2_dec@dec 00CF                                 ___awtoft@sign 00D8  
                             __end_of_dpowers FE60                                         _color 003C  
                                       _font2 FD7A                                         _found 00F4  
                             __end_of_isdigit 49B6                                         _tempC 00C3  
                                       _tempF 00C7                                         _month 008C  
                               ___ftpack@sign 00D1                                         _putch 4D7A  
                           __end_of_I2C_Start 4D68                             __end_of_I2C_Write 466C  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                            __end_ofi2___wmul 4AAA                        __end_of_Monitor_Heater 4958  
                                       status 000FD8                             ?_DS1621_Read_Temp 00D0  
                                _Do_Beep_Good 4C14                                 i2printf@width 001C  
             __size_of_check_for_button_input 00A8                         __end_of_Go_Next_Field 4B52  
                            __end_ofi2_printf 1336                            __size_ofi2___lwdiv 005C  
                             write_data@data_ 00CF                            __size_ofi2___lwmod 004C  
                          ??_DS1621_Read_Temp 00D2                            Set_RGB_Color@color 00CF  
                             __initialization 3FB6                                 ??_Set_RPM_RGB 00CF  
                                __end_of_main 1C34                                  __end_of_font FD7A  
                    ?_Do_Save_New_Heater_Temp 0001                                    i2printf@ap 0016  
                __end_of_Decrease_Heater_Temp 4BE4                              __end_of_Init_ADC 4DC2  
                            get_duty_cycle@dc 00D3                              __end_of_Rcmd2red 4810  
                          __size_ofi2_isdigit 0022                            _Select_Alarm_Field 004C  
                                      ??_main 017C                                 ___fttol@sign1 0161  
                               __activetblptr 000002                             ?_DS3231_Read_Time 0001  
                           __end_of_LCD_Reset 4CB0       I2C_Write_Address_Write_One_Byte@Address 00CF  
                       __end_of_Go_Prev_Field 4B32                     ??_TFT_GreenTab_Initialize 00D9  
                 ?_Update_Setup_Heater_Screen 0001                    ??_Update_Setup_Time_Screen 00EA  
                              _Init_Interrupt 4AAA                            ??_DS3231_Read_Time 00D0  
                                      ?_Rcmd1 0001                                        ?_Rcmd3 0001  
                                   I2C_Init@c 00CD                           _In_Alarm_Time_Setup 0047  
                                   I2C_Read@n 00CE                   DS3231_Turn_Off_Alarm@Device 00DB  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 00D2  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 016B                        _Exit_Setup_Heater_Temp 4D98  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 474A                                        _HEATER 0045  
                                      ?_putch 0001                              __end_of___ftpack 2D9E  
                            __end_of___lbtoft 4988                                        _DC_Txt 00BB  
                                      i2l2004 46AE                 __size_of_Increase_Heater_Temp 001A  
                                      i2l1435 1334                                        i2l1471 4AA8  
                                      i2l4203 21C8                                        i2l4221 220C  
                                      i2l1902 4B10                                        i2l1398 10DC  
                                      i2l4223 2212                                        i2l4215 21F0  
                                      i2l4209 21E6                                        i2l4235 225A  
                                      i2l4227 2216                                        i2l4245 2276  
                                      i2l4181 2174                                        i2l4253 2280  
                                      i2l4247 227C                                        i2l4191 21A0  
                                   ??_Do_Init 00D7                                        i2l4197 21BE  
                                      i2l7103 116E                                        i2l7121 11C6  
                                      i2l7113 1198                                        i2l1994 441C  
                                      i2l7107 1192                                        i2l7115 11AA  
                                      i2l7051 1024                                        i2l7043 0FF6  
                                      i2l7141 1234                                        i2l7133 120C  
                                      i2l7125 11EA                                        i2l7045 1004  
                                      i2l7151 1268                                        i2l7135 1214  
                                      i2l7127 11F4                                        i2l7063 10A6  
                                      i2l7055 1042                                        i2l7039 0FE6  
                                      i2l7153 12AC                                        i2l7161 1304  
                                      i2l7145 124C                                        i2l7049 100E  
                                      i2l7163 130C                                        i2l7139 122C  
                                      i2l7083 1124                                        i2l7067 10AE  
                                      i2l7149 1260                                        i2l7093 1158  
                                      i2l7085 1128                                        i2l7165 1318  
                                      i2l7159 12F2                                        i2l7079 110A  
                                      i2l6561 43F2                                        i2l7097 115E  
                                      i2l7089 1134                                        i2l6547 4B08  
                                      i2l7099 1162                                        i2l6557 43E0  
                                      i2l6581 468C                                        i2l6559 43EA  
                                      i2l6569 4410                                        i2l6585 46A2  
                                      i2l6577 467A                                        i2l6579 4684  
                                      i2l7753 3C62                                        i2l7745 3C4E  
                                      i2l7749 3C58                                        _OSCCON 000FD3  
             __size_of_Do_Save_New_Alarm_Time 0016                                     ??i2_putch 0001  
                         __size_of_TIMER1_isr 000C                                        _SPBRGH 000FB0  
                             ?_Monitor_Heater 0001                                        _SSPBUF 000FC9  
                                   ??_i2cNack 00CD                                  _Alarm_SW_Txt 00B7  
                            _force_nec_state0 4E32                              __end_of_delay_ms 436E  
                                      _i2cAck 4D68               ?_Initialize_Setup_Heater_Screen 0001  
            ??_Initialize_Setup_Heater_Screen 00EA                  __size_of_Go_Prev_Alarm_Field 0018  
                            __end_of_fillRect 42AE                              __end_of_drawChar 1FF0  
                          __size_of_OpenUSART 0084                                        ___ftge 344C  
                 __end_of_Increase_Alarm_Time 430E                          DS3231_Init@control_E 00D5  
                                      ___wmul 488A                                     ??___awdiv 00EA  
                            __end_of_drawtext 2B5A                                     ??___awmod 00E8  
                                   ??___ftdiv 015E                                    _Test_Alarm 22A4  
                                   ??___ftmul 00DF                                     ??___fttol 015C  
                                      _chkisr 0008                                     ??___lwdiv 00D1  
                                      _array1 011F                                     ??___lwmod 00D8  
                                      _buffer 0100                __size_of_Exit_Setup_Alarm_Time 000E  
                                      _colors 0080                                        _nec_ok 003E  
               __end_of_Exit_Setup_Alarm_Time 4DB4                                        clear_0 3FBC  
                                      clear_1 3FC8                              ___awdiv@quotient 0171  
                                      _minute 008B                                        _second 00F5  
                             ___awmod@divisor 0169                          _Activate_Buzzer_2KHz 4D20  
                        _Activate_Buzzer_4KHz 4CEA                                     ??_get_RPM 00EA  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 00E8  
                                      _printf 0BD6                                  drawtext@size 016A  
                             ??_Increase_Time 00EA                                        _strcpy 48C2  
                                      _strlen 4584                         ___ftmul@f3_as_product 00E3  
                      __end_of_Init_Interrupt 4ACE                           __end_of_Set_RPM_RGB 3C16  
                        __end_of_get_full_ADC 4928                        _check_for_button_input 399A  
                            _Do_Save_New_Time 4CFC                                  __pdataCOMRAM 0057  
                                   ??_isdigit 00CD                                     ?_I2C_Init 00CD  
                                   ?_I2C_Read 0001                                     ?_I2C_Stop 0001  
                      get_duty_cycle@set_temp 00CF                             __end_ofi2___lwdiv 4426  
                                __mediumconst FC7A                             __end_ofi2___lwmod 46B8  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8              __end_of_I2C_Write_Cmd_Write_Data 4A82  
                                 ?_i2cHighSda 0001                                   ?_i2cHighScl 0001  
                                      putch@c 00CD                        __size_of_Set_RGB_Color 0020  
                            __end_of_spiwrite 4C70                      __size_of_Exit_Time_Setup 000E  
                          __size_of_bcd_2_dec 003C                           _Do_Setup_Alarm_Time 351A  
                           __end_ofi2_isdigit 4B12                                    __accesstop 0080  
                     __end_of__initialization 4020                              ??_get_duty_cycle 00D1  
       I2C_Write_Address_Read_One_Byte@Device 00D2                            __size_of_dec_2_bcd 0070  
                                  ___ftge@ff1 00CD                                    ___ftge@ff2 00D0  
                                   ?_INT0_isr 0001                                     ?_INT1_isr 0001  
                                   ?_INT2_isr 0001                            _setup_alarm_minute 00F7  
                          _setup_alarm_second 00F8                                 ___rparam_used 000001  
                                  ___ftdiv@f1 0158               __end_of_Do_Save_New_Heater_Temp 4D20  
                                  ___ftdiv@f2 015B                                    ___ftdiv@f3 0162  
                                  ___awtoft@c 00D5                                    ___lbtoft@c 00D8  
                         _Go_Next_Alarm_Field 4BFC                                    ___ftmul@f1 00D9  
                                  ___ftmul@f2 00DC                                    ___fttol@f1 0158  
                               __end_of_Rcmd1 2FCC                                 __end_of_Rcmd3 31C4  
                          i2___lwmod@dividend 0008                                __pcstackCOMRAM 0001  
               DS3231_Turn_On_Alarm@Address_E 00D7                 DS3231_Turn_On_Alarm@Address_F 00D8  
                                __pidataBANK0 45D2                                  __pidataBANK1 4426  
                               __end_of_font2 FE56                             __end_of_i2cLowSda 4E12  
                           __end_of_i2cLowScl 4E22                          ?_Do_Setup_Alarm_Time 0001  
                               __end_of_putch 4D8A                                   i2printf@idx 0015  
                       ?_Activate_Buzzer_2KHz 0001                         ?_Activate_Buzzer_4KHz 0001  
                                 i2printf@val 0019                        _Do_Save_New_Alarm_Time 4C44  
                              drawPixel@color 00D5                                  dec_2_bcd@bcd 0177  
                                dec_2_bcd@dec 0179                        __size_of_Decrease_Time 00A6  
                                   ?i2___wmul 0001                               ?_Init_Interrupt 0001  
                      __size_of_write_command 0014                                    ??_I2C_Init 00D1  
                                  ??_I2C_Read 00CD                                  _alarm_minute 0051  
                                _alarm_second 0052               ?_Update_Setup_Alarm_Time_Screen 0001  
            ??_Update_Setup_Alarm_Time_Screen 00EA                  __end_of_DS3231_Turn_On_Alarm 4172  
                                  ??_I2C_Stop 00CD                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 00D9                                       ??_Rcmd3 00D9  
                                   ?i2_printf 000D                            __size_of_drawPixel 0044  
                           __end_of_OpenUSART 3E42                                       ??_putch 00CD  
                        _Decrease_Heater_Temp 4BCA                       ??_DS3231_Turn_Off_Alarm 00D7  
                                  __pbssBANK0 00EA                              _setup_alarm_hour 00F6  
                                   ?_Init_ADC 0001                              _setup_alarm_time 013D  
        __end_of_Initialize_Setup_Time_Screen 2532         __size_of_Initialize_Setup_Time_Screen 0146  
                _Initialize_Setup_Time_Screen 23EC                                 ??_DS1621_Init 00D2  
                               ??_DS3231_Init 00D3                                     ?_Rcmd2red 0001  
                       __end_of_Toggle_Heater 4CEA                            __size_of_init_UART 0016  
                             spiwrite@spidata 00CE                                    _alarm_date 004F  
                                  ??_INT0_isr 0001                                    ??_INT1_isr 0001  
                                  ??_INT2_isr 001F                                    _alarm_mode 003A  
                                  _alarm_hour 0050                                    _alarm_time 0134  
                               ?_Wait_One_Sec 0001      I2C_Write_Address_Write_One_Byte@Data_Out 00D0  
                                     ?_i2cAck 0001                                  ?_Do_Beep_Bad 0001  
                          __size_of_read_volt 006C                            __CFG_CCP2MX$PORTBE 000000  
                               _Set_RGB_Color 4B52                                I2C_Read@inByte 00CF  
                                     ?___ftge 00CD           __size_of_Update_Setup_Heater_Screen 00C2  
                  DS3231_Turn_On_Alarm@Device 00DB                                       ?___wmul 00CD  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                                 _Set_RPM_RGB 3B84                                   ?_Test_Alarm 0001  
                       ??_Do_Setup_Alarm_Time 00EA                                       ?_chkisr 0001  
                             _heater_set_temp 0057                        __size_of_setAddrWindow 0058  
                           __end_of_bcd_2_dec 488A                                       _CCP1CON 000FBD  
            I2C_Write_Cmd_Write_Data@Data_Out 00D0                                       _CCP2CON 000FBA  
                      __size_of_Do_Setup_Time 0102                                  ??_TIMER1_isr 0001  
                               ??_I2C_ReStart 00CD                                       _ALARMEN 00EA  
                                   ?___awtoft 00D5                                     ?___ftpack 00CD  
                                   ?___lbtoft 00D5                                    I2C_Write@n 00CE  
                                     ?_printf 00D9                                       ?_strcpy 00CD  
                                     ?_strlen 00CD                             __end_of_dec_2_bcd 409A  
                                  ??i2___wmul 0005                                    _fillScreen 4ACE  
                                     _MATCHED 0036                         __end_of_Update_Screen 079C  
                    ??_DS3231_Read_Alarm_Time 00D0                                    _drawCircle 1336  
                       ??_Go_Next_Alarm_Field 00EA                                     ?_delay_ms 00D3  
                                  ??i2_printf 0011                                     ?_fillRect 00DF  
                                   ?_drawChar 0158                                       _SSPCON1 000FC6  
                       ?_Decrease_Heater_Temp 0001                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00AD                         __end_of_fillRectangle 27BC  
                                   ?_drawtext 0163                                    ??_Init_ADC 00CD  
                                     _Do_Init 3F40                      _I2C_Write_Cmd_Write_Data 4A5A  
                  __end_of_I2C_Write_Cmd_Only 4B92                                       i2_putch 4DC2  
                                  ??_Rcmd2red 00D0                  __end_of_Do_Setup_Heater_Temp 3B84  
                      DS1621_Read_Temp@Device 00D4                                 _Decrease_Time 3A42  
                              ??_Wait_One_Sec 00CD                                       _i2cNack 4DFE  
                          __end_of_TIMER1_isr 4DF4                 ?_Initialize_Setup_Time_Screen 0001  
                __size_of_Decrease_Alarm_Time 0058                                 _write_command 4CC4  
                                   _I2C_Start 4D56                                     _I2C_Write 4620  
                           ??_Exit_Time_Setup 00EA                               __size_of_i2cAck 0012  
                                     __Hparam 0000                                       __Lparam 0000  
                              ?_Set_RGB_Color 0001                           __end_of_DS1621_Init 4A0A  
                         __end_of_DS3231_Init 337C                             __end_of_drawPixel 47D2  
                       __end_of_drawFastVLine 3830                               __size_of___ftge 00CE  
                                     ___awdiv 337C                                       ___awmod 38E6  
                                     ___ftdiv 27BC                               __size_of___wmul 0038  
                      ??_Activate_Buzzer_2KHz 00CD                                       ___ftmul 1FF0  
                      ??_Activate_Buzzer_4KHz 00CD                                       ___fttol 28FE  
                                     ___lwdiv 3E42                                       ___lwmod 41DE  
                       __size_of_get_full_ADC 0030                               __size_of_chkisr 3C9E  
                                   ?_spiwrite 0001                                       __pcinit 3FB6  
                                  ??___awtoft 00D8                                    ??___ftpack 00D2  
                                  ??___lbtoft 00D8                                       __ramtop 1000  
                                     _get_RPM 474A                                       __ptext0 1A0C  
                                     __ptext1 474A                                       __ptext2 001C  
                                     __ptext3 4CD8                                       __ptext4 22A4  
                                     __ptext5 409A                     __size_of_DS1621_Read_Temp 004A  
                                     __ptext6 48F8                                       __ptext7 4702  
                                     __ptext8 344C                                       __ptext9 4106  
                             __size_of_printf 0406                             __end_of_init_UART 4C86  
                                   _T0CONbits 000FD5                               __size_of_strcpy 0036  
                             __size_of_strlen 004E                             __end_of_hexpowers FE68  
                    __end_of_force_nec_state0 4E3A                                     _T1CONbits 000FCD  
                                     _dpowers FE56                         __end_of_do_update_pwm 32A6  
                                     _isdigit 4988                         _Activate_Buzzer_500Hz 4D32  
                            ___awmod@dividend 0167                                    _duty_cycle 0055  
                     ?_Exit_Setup_Heater_Temp 0001                           _Go_Prev_Alarm_Field 4BE4  
                           __end_of_read_volt 4106                                    ??_delay_ms 00D5  
                         __end_of_I2C_ReStart 4C9C              __size_of_Do_Save_New_Heater_Temp 0012  
                               drawtext@_text 0164                                 drawtext@color 0166  
                            ??_Monitor_Heater 00E8                                    ??_fillRect 00E4  
                                  ??_drawChar 00EA                                     _LCD_Reset 4C9C  
                           _DS3231_Write_Time 35E6                                 _setAddrWindow 44D6  
                              __pintcode_body 3C16                                 Wait_One_Sec@k 00CD  
                                  delay_ms@ms 00D3                          end_of_initialization 4020  
                               _Do_Setup_Time 2FCC                                     _INT1_flag 0046  
                         __size_of_Test_Alarm 0148                                     _INT2_flag 00F2  
                                  ??_drawtext 016B                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                 DS3231_Turn_On_Alarm@control_E 00D9  
               DS3231_Turn_On_Alarm@control_F 00DA                                ?_write_command 0001  
                               __Lmediumconst FC7A                     __size_of_DS3231_Read_Time 007C  
                                     int_func 3C16                           i2___wmul@multiplier 0001  
                     DS3231_Read_Time@Address 00D0                      DS3231_Write_Time@Address 017B  
                                  ?_I2C_Start 0001                                    ?_I2C_Write 0001  
                                  get_RPM@RPS 0175                      __end_of_Do_Save_New_Time 4D0E  
                                _get_full_ADC 48F8                           ??_DS3231_Write_Time 00EA  
                        ?_Go_Prev_Alarm_Field 0001                       check_for_button_input@j 00E8  
                    ?_DS3231_Write_Alarm_Time 0001                                    _tempSecond 008D  
                        _DS3231_Turn_On_Alarm 4106                                     _RCSTAbits 000FAB  
                                     printf@c 0165                                       printf@f 00D9  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                __end_of_Increase_Heater_Temp 4BCA                                    ??_spiwrite 00CD  
                     ?_check_for_button_input 0001                                       strlen@s 00CD  
                 I2C_Write_Cmd_Write_Data@Cmd 00CF                              drawtext@cursor_x 0173  
                            drawtext@cursor_y 0172                                     _PORTBbits 000F81  
                                   _PORTDbits 000F83                                     _PORTEbits 000F84  
                            I2C_Write@outByte 00CD        __end_of_Initialize_Setup_Heater_Screen 2C7E  
     __size_of_Initialize_Setup_Heater_Screen 0124                _Initialize_Setup_Heater_Screen 2B5A  
                                  _setup_date 0146                                   ?_fillScreen 00E0  
              __end_of_Exit_Setup_Heater_Temp 4DA6                                    _setup_hour 00FB  
                                  _setup_time 014F                                    _setup_year 00FF  
                                 ?_drawCircle 00D8               __size_of_DS3231_Read_Alarm_Time 0056  
                                  drawChar@bg 015C                     __end_of_DS3231_Write_Time 36AC  
              DS3231_Turn_Off_Alarm@Address_E 00D7                DS3231_Turn_Off_Alarm@Address_F 00D8  
                                   _TRISCbits 000F94                                     _TRISDbits 000F95  
                      __size_of_Go_Next_Field 0020        I2C_Write_Address_Read_One_Byte@Address 00D0  
                                ??_i2cHighSda 00CD                                  ??_i2cHighScl 00CD  
                      ??_Decrease_Heater_Temp 00EA                             __size_of_I2C_Init 000A  
                           __size_of_I2C_Read 005C                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 00D0                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                          _In_Heater_Temp_Setup 0048  
                           i2___lwdiv@divisor 0003                              drawtext@textsize 016E  
                                   i2___lwdiv 43CA                                     i2___lwmod 466C  
                           i2___lwdiv@counter 0007                                    drawPixel@x 00D7  
                                  drawPixel@y 00D4                            _Update_Screen$3217 0176  
                                 _DS1621_Init 49E0                                   _DS3231_Init 32A6  
                                 ___ftdiv@exp 0165                                   printf@width 0163  
                                   _TXSTAbits 000FAC                               ??_Set_RGB_Color 00CF  
                       ??_Go_Prev_Alarm_Field 00EA                                     i2_isdigit 4AF0  
           __size_of_Update_Setup_Time_Screen 01E4                            get_full_ADC@result 00D1  
                   ?_Update_Setup_Time_Screen 0001                         ?_DS3231_Turn_On_Alarm 0001  
                           __size_of_INT0_isr 0158                             __size_of_INT1_isr 0008  
                           __size_of_INT2_isr 001E                                __end_of_i2cAck 4D7A  
                                 ___ftmul@exp 00E2                        __size_of_Go_Prev_Field 0020  
              ??_Initialize_Setup_Time_Screen 00EA                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 0018                      DS1621_Read_Temp@Data_Ret 00D3  
              __end_of_check_for_button_input 3A42                              ??_Init_Interrupt 00CD  
          Update_Setup_Heater_Screen@dc_char1 0174            Update_Setup_Heater_Screen@dc_char2 0175  
          Update_Setup_Heater_Screen@dc_char3 0176                            __end_of_i2cHighSda 4E2A  
                              __end_of___ftge 351A                            __end_of_i2cHighScl 4DE8  
                              __end_of___wmul 48C2                                 delay_ms@count 00D7  
                                  _write_data 4CB0                                 __pidataCOMRAM 4E3A  
                              __end_of_chkisr 3CA6                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 4C86                                    drawtext@bg 0168  
                       _Exit_Setup_Alarm_Time 4DA6                        ?_Activate_Buzzer_500Hz 0001  
                                   _Nec_code1 004A                                     _i2cLowSda 4E08  
                        _Do_Setup_Heater_Temp 3AE8                                     _i2cLowScl 4E1A  
                            i2___wmul@product 0005                  __size_of_Increase_Alarm_Time 0060  
                        __end_of_Wait_One_Sec 4A32                                __end_of_printf 0FDC  
                       __end_of_Increase_Time 38E6                                  i2printf@flag 001B  
                              __end_of_strcpy 48F8                                __end_of_strlen 45D2  
                                   _Nec_state 004B                                  i2printf@prec 0018  
                         start_initialization 3FB6                             __size_ofi2___wmul 0028  
                                   i2printf@c 001E                                     i2printf@f 000D  
                      Update_Screen@neg_tempF 0178                               ??_Decrease_Time 00EA  
                                  ?i2___lwdiv 0001                            get_duty_cycle@temp 00CD  
                                  ?i2___lwmod 0008                             __size_ofi2_printf 035A  
                             ??_write_command 00CF               __end_of_DS3231_Write_Alarm_Time 3DBE  
                                   _OpenUSART 3DBE                __size_of_DS3231_Turn_Off_Alarm 006C  
                DS3231_Read_Alarm_Time@Device 00D1                 __end_of_DS3231_Turn_Off_Alarm 41DE  
                            __CFG_OSC$INTIO67 000000                                   ??_I2C_Start 00CD  
                           __size_of_Init_ADC 000E                                   ??_I2C_Write 00CD  
                      _DS3231_Read_Alarm_Time 452E                                      ??_i2cAck 00CD  
                                  ?i2_isdigit 0001                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 0022       I2C_Write_Address_Read_One_Byte@Data_Ret 00D1  
              __end_of_Do_Save_New_Alarm_Time 4C5A                           __size_of_drawCircle 024E  
                               _Go_Next_Field 4B32                                      ??___ftge 00D3  
                                    ??___wmul 00D1                                  ?_Set_RPM_RGB 00CD  
                                ??_Test_Alarm 00E8                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 001F                                   __pdataBANK0 0080  
                                 __pdataBANK1 0100                               setAddrWindow@x0 00D3  
                             setAddrWindow@x1 00D1                               setAddrWindow@y0 00D0  
                             setAddrWindow@y1 00D2                                      ??_printf 0158  
                            _DS1621_Read_Temp 46B8                         ?_Do_Setup_Heater_Temp 0001  
                                    ??_strcpy 00D1                                      ??_strlen 00CF  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                         _Decrease_Alarm_Time 447E                                     _bcd_2_dec 484E  
                           __size_of___awtoft 0048                             __size_of___ftpack 0120  
                           __size_of___lbtoft 0030                       _Do_Save_New_Heater_Temp 4D0E  
                                 __pbssCOMRAM 002D                    ??_I2C_Write_Cmd_Write_Data 00D1  
                  __size_of_DS3231_Write_Time 00C6                               ??_setAddrWindow 00D3  
                               __pcstackBANK0 00CD                                 __pcstackBANK1 0158  
                               _Go_Prev_Field 4B12                               ??_Do_Setup_Time 00EA  
                                   _dec_2_bcd 402A                             i2___lwmod@divisor 000A  
                             _Exit_Time_Setup 4D8A                             i2___lwmod@counter 000C  
                                 ??_LCD_Reset 00D9                                  _isdigit$2867 00CE  
                           __size_of_delay_ms 0060                                 _Heater_SW_Txt 00BF  
                        _Increase_Heater_Temp 4BB0                                      ?_Do_Init 0001  
                           __size_of_fillRect 0064                             __size_of_drawChar 01D8  
                          __end_of_Test_Alarm 23EC                                    ?_OpenUSART 00CD  
                                    ?i2_putch 0001                              _DS3231_Read_Time 3EC4  
                         _Heater_Set_Temp_Txt 00A8                                      ?_i2cNack 0001  
                        ?_Decrease_Alarm_Time 0001                             __size_of_drawtext 012A  
                               ?_Do_Beep_Good 0001                        ??_DS3231_Turn_On_Alarm 00D7  
 __end_of_Update_Setup_Screen_Cursor_Backward 1A0C  __size_of_Update_Setup_Screen_Cursor_Backward 0240  
        ?_Update_Setup_Screen_Cursor_Backward 0001         ??_Update_Setup_Screen_Cursor_Backward 00EA  
         _Update_Setup_Screen_Cursor_Backward 17CC                   __end_of_Do_Setup_Alarm_Time 35E6  
                              ?_Go_Next_Field 0001                              ___lwdiv@dividend 00CD  
                                 I2C_Read@ack 00CD                                     _bit_count 0053  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 49E0  
                              ??_Turn_Off_Fan 00CD                                 __pmediumconst FC7A  
                                    ?___awdiv 016B                                     __ptext100 4810  
                                   __ptext101 49E0                                     __ptext110 4D68  
                                   __ptext102 4A5A                                     __ptext111 4C86  
                                   __ptext103 4B72                                     __ptext120 4DC2  
                                   __ptext112 4E08                                     __ptext104 46B8  
                                   __ptext121 4AF0                                     __ptext113 4E1A  
                                   __ptext105 4620                                     __ptext122 4A82  
                                   __ptext114 4E22                                     __ptext106 4D44  
                                   __ptext123 466C                                     __ptext115 4DDC  
                                   __ptext107 4D56                                     __ptext124 43CA  
                                   __ptext108 436E                                     __ptext125 4E2A  
                                   __ptext117 4DE8                                     __ptext109 4DFE  
                                   __ptext126 214C                                     __ptext118 4B92  
                                   __ptext127 4E32                                     __ptext119 0FDC  
                                    ?___awmod 0167                                      ?___ftdiv 0158  
                                    ?___ftmul 00D9                                      ?___fttol 0158  
                     __size_of_get_duty_cycle 008E                                     __tft_type 004E  
                                    ?___lwdiv 00CD                            _I2C_Write_Cmd_Only 4B72  
                                    ?___lwmod 00D4                   __end_of_Go_Next_Alarm_Field 4C14  
              DS3231_Turn_Off_Alarm@control_E 00D9                DS3231_Turn_Off_Alarm@control_F 00DA  
                          drawFastVLine@color 00D6                                   ?_write_data 0001  
                      ?_Exit_Setup_Alarm_Time 0001                                     _drawPixel 478E  
                                    ?_get_RPM 0173                             __size_of_spiwrite 0016  
                                  ?_bcd_2_dec 0001                        __size_of_Toggle_Heater 0012  
                         ?_I2C_Write_Cmd_Only 00CF                             ?_force_nec_state0 0001  
                                    ?_isdigit 0001                                      _I2C_Init 4DF4  
                                    _I2C_Read 436E                                ?_Go_Prev_Field 0001  
                                    _I2C_Stop 4D44                             _Initialize_Screen 079C  
                              __size_of_Rcmd1 0114                                __size_of_Rcmd3 00F6  
                ??_Update_Setup_Heater_Screen 00EA                                     _init_UART 4C70  
                                  ?_dec_2_bcd 0173                            ??_force_nec_state0 0001  
                    I2C_Write_Cmd_Only@Device 00D0                                     _hexpowers FE60  
                          ?_Initialize_Screen 0001                              ___lwdiv@quotient 00D2  
                                 ??i2___lwdiv 0005                                   ??i2___lwmod 000C  
                              __size_of_putch 0010                                     _read_volt 409A  
                       ?_Increase_Heater_Temp 0001      __end_of_I2C_Write_Address_Write_One_Byte 4A5A  
   __size_of_I2C_Write_Address_Write_One_Byte 0028            ??_I2C_Write_Address_Write_One_Byte 00D1  
           ?_I2C_Write_Address_Write_One_Byte 00CF              _I2C_Write_Address_Write_One_Byte 4A32  
                       ??_Decrease_Alarm_Time 00EA                                ___wmul@product 00D1  
                              ??_Do_Beep_Good 00E8                           ??_Initialize_Screen 00EA  
                                _Select_Field 00F3                                      _INT0_isr 214C  
                                    _INT1_isr 4E2A                                      _INT2_isr 4B92  
                        ??_I2C_Write_Cmd_Only 00D0                                      _PIE1bits 000F9D  
                                 ??i2_isdigit 0001                             ?_Do_Save_New_Time 0001  
                      __size_of_Update_Screen 0780                        DS3231_Read_Time@Device 00D1  
                     DS3231_Write_Time@Device 017A                                      _PIR1bits 000F9E  
                               _In_Time_Setup 0049                            ??_Do_Save_New_Time 00EA  
                       __size_of_Wait_One_Sec 0028                                     _setup_day 00F9  
                           DS1621_Init@Device 00D2                                     fillRect@h 00E1  
                                   fillRect@i 00E8                                     fillRect@w 00E0  
                                   fillRect@x 00E7                                     fillRect@y 00DF  
                      ??_Do_Setup_Heater_Temp 0177                                     drawChar@c 0159  
                                   drawChar@i 0162                                     drawChar@j 0161  
                                   drawChar@x 0160                                     drawChar@y 0158  
               __size_of_Activate_Buzzer_2KHz 0012                 __size_of_Activate_Buzzer_4KHz 0012  
                                  ?_drawPixel 00D4                        __size_of_fillRectangle 0144  
                   ??_Do_Save_New_Heater_Temp 00EA                                    _ADCON0bits 000FC2  
                     __end_of_Exit_Time_Setup 4D98                             ___wmul@multiplier 00CD  
                   __end_of_Initialize_Screen 0BD6                                   ??_i2cLowSda 00CD  
                                 ??_i2cLowScl 00CD                 DS3231_Read_Alarm_Time@Address 00D0  
                                ??_fillScreen 00E2                                      i2___wmul 4A82  
            __size_of_DS3231_Write_Alarm_Time 008A                                  ??_drawCircle 00E0  
                                  printf@flag 0162                                    printf@prec 015F  
                                  ?_init_UART 0001                                      i2_printf 0FDC  
            __end_of_Update_Setup_Time_Screen 1E18                                   _INTCON2bits 000FF1  
     __end_of_I2C_Write_Address_Read_One_Byte 484E      __size_of_I2C_Write_Address_Read_One_Byte 003E  
           ??_I2C_Write_Address_Read_One_Byte 00D1              ?_I2C_Write_Address_Read_One_Byte 00D0  
             _I2C_Write_Address_Read_One_Byte 4810                                   _INTCON3bits 000FF0  
                                   copy_data0 3FE2                                     copy_data1 4002  
                                   drawtext@i 0170                        __size_of_drawFastVLine 00C2  
                                   drawtext@x 016D                                     drawtext@y 0163  
                                  ?_read_volt 0167                                      _Nec_code 002D  
                                    _Init_ADC 4DB4                             write_command@cmd_ 00CF  
  __end_of_Initialize_Setup_Alarm_Time_Screen 2678   __size_of_Initialize_Setup_Alarm_Time_Screen 0146  
         ?_Initialize_Setup_Alarm_Time_Screen 0001          ??_Initialize_Setup_Alarm_Time_Screen 00EA  
          _Initialize_Setup_Alarm_Time_Screen 2532                                   ??_OpenUSART 00CF  
                                ?_DS1621_Init 0001                                      _Rcmd2red 47D2  
                            __size_of_Do_Init 0076                           __size_of_write_data 0014  
                                ?_DS3231_Init 0001                                      i2putch@c 0001  
                             ??_Go_Next_Field 00EA                               OpenUSART@config 00CF  
      I2C_Write_Address_Write_One_Byte@Device 00D1                                 _Toggle_Heater 4CD8  
                            __size_ofi2_putch 000E                                  _Time_Elapsed 0038  
                         _Increase_Alarm_Time 42AE                              __size_of_i2cNack 000A  
                               _RTC_ALARM_Txt 00CB                                  _Wait_One_Sec 4A0A  
                                    __Hrparam 0000                        __size_of_do_update_pwm 00E2  
                          __end_of_fillScreen 4AF0                                      __Lrparam 0000  
                          __end_of_drawCircle 1584                       ??_Activate_Buzzer_500Hz 00CD  
                            __size_of___awdiv 00D0                              __size_of___awmod 00B4  
                            __size_of___ftdiv 0142                         i2___wmul@multiplicand 0003  
                            __size_of___ftmul 015C                              __size_of___fttol 0132  
                            __size_of___lwdiv 0082                                      _Volt_Txt 00A2  
                            __size_of___lwmod 006C                          __size_of_Set_RPM_RGB 0092  
                                    ___awtoft 4702                                      ___ftpack 2C7E  
                                    ___lbtoft 4958                                  ?_I2C_ReStart 0001  
                             ??_Go_Prev_Field 00EA                              __size_of_get_RPM 0044  
                                 ??_bcd_2_dec 00CD                          ?_Increase_Alarm_Time 0001  
                               _Update_Screen 001C                              __size_of_isdigit 002E  
                                    _delay_ms 430E                               ___lwdiv@divisor 00CF  
                                 ??_dec_2_bcd 0175                               ___lwdiv@counter 00D1  
                                    __ptext10 4172                                      __ptext11 4CEA  
                                    __ptext20 4D8A                                      __ptext12 3B84  
                                    __ptext21 4CFC                                      __ptext13 4928  
                                    __ptext30 4BCA                                      __ptext22 35E6  
                                    __ptext14 3CA6                                      __ptext31 36AC  
                                    __ptext23 3A42                                      __ptext15 2FCC  
                                    __ptext40 1584                                      __ptext32 351A  
                                    __ptext24 1C34                                      __ptext16 23EC  
                                    __ptext41 4DA6                                      __ptext33 399A  
                                    __ptext25 3AE8                                      __ptext17 3830  
                                    __ptext50 47D2                                      __ptext42 4C44  
                                    __ptext34 484E                                      __ptext26 2B5A  
                                    __ptext18 4B12                                      __ptext51 2EB8  
                                    __ptext43 079C                                      __ptext35 2532  
                                    __ptext27 4BB0                                      __ptext19 4B32  
                                    __ptext60 4C2C                                      __ptext52 4C9C  
                                    __ptext44 48C2                                      __ptext36 42AE  
                                    __ptext28 4D98                                      __ptext61 31C4  
                                    __ptext53 430E                                      __ptext45 4ACE  
                                    __ptext37 4BE4                                      __ptext29 4D0E  
                                    __ptext70 2D9E                                      __ptext62 4958  
                                    __ptext54 3D34                                      __ptext46 2678  
                                    __ptext38 17CC                                      __ptext71 0BD6  
                                    __ptext63 28FE                                      __ptext55 402A  
                                    __ptext47 1336                                      __ptext39 4BFC  
                                    __ptext80 376E                                      __ptext72 4D7A  
                                    __ptext64 1FF0                                      __ptext56 3EC4  
                                    __ptext48 49B6                                      __ptext81 478E  
                                    __ptext73 4988                                      __ptext65 27BC  
                                    __ptext57 452E                                      __ptext49 30CE  
                                    __ptext90 4C70                                      __ptext82 44D6  
                                    __ptext74 41DE                                      __ptext66 2C7E  
                                    __ptext58 4C14                                      __ptext91 3DBE  
                                    __ptext83 4CB0                                      __ptext75 3E42  
                                    __ptext67 4E12                                      __ptext59 4D20  
                                    __ptext92 4DD0                                      __ptext84 4CC4  
                                    __ptext76 2A30                                      __ptext68 4D32  
                                    __ptext93 4B52                                      __ptext85 4C5A  
                                    __ptext77 4584                                      __ptext69 447E  
                                    __ptext94 4A0A                                      __ptext86 488A  
                                    __ptext78 1E18                                      __ptext95 4AAA  
                                    __ptext87 38E6                                      __ptext79 424A  
                                    __ptext96 4DB4                                      __ptext88 337C  
                                    __ptext97 4DF4                                      __ptext89 3F40  
                                    __ptext98 32A6                                      __ptext99 4A32  
                      ??_Increase_Heater_Temp 00EA                                      _fillRect 424A  
                                    _drawChar 1E18                          __end_of_Turn_Off_Fan 4DDC  
            __size_of_TFT_GreenTab_Initialize 002A                 __size_of_Decrease_Heater_Temp 001A  
  __end_of_Update_Setup_Screen_Cursor_Forward 17CC   __size_of_Update_Setup_Screen_Cursor_Forward 0248  
         ?_Update_Setup_Screen_Cursor_Forward 0001          ??_Update_Setup_Screen_Cursor_Forward 00EA  
          _Update_Setup_Screen_Cursor_Forward 1584                                      _colstart 0054  
                 __end_of_Go_Prev_Alarm_Field 4BFC                                      _drawtext 2A30  
                                  strcpy@from 00CF                       ?_DS3231_Read_Alarm_Time 0001  
                              i2_isdigit$2867 0002                                 _fillRectangle 2678  
              DS3231_Write_Alarm_Time@Address 017B                                ?_Toggle_Heater 0001  
                    __end_of_DS1621_Read_Temp 4702                                 __size_of_main 0228  
                               ??_Do_Beep_Bad 00E8                       __size_of_Monitor_Heater 0030  
                       __end_of_Set_RGB_Color 4B72                               fillRectangle@hi 00DD  
                             fillRectangle@lo 00DE                 Update_Screen@neg_DS1621_tempC 017A  
                              _get_duty_cycle 3CA6                                 _drawFastVLine 376E  
                                   printf@idx 015C                                      _spiwrite 4C5A  
                                   printf@val 0160                             DS3231_Init@Device 00D6  
                                 ??_drawPixel 00D7                                      _rowstart 0056  
                    __end_of_DS3231_Read_Time 3F40                         ??_Increase_Alarm_Time 00EA  
                  __size_of_Initialize_Screen 043A                              ?_Exit_Time_Setup 0001  
                        __end_of_Do_Beep_Good 4C2C                                ?_Update_Screen 0001  
                                  _INTCONbits 000FF2            __end_of_Update_Setup_Heater_Screen 376E  
                  _Update_Setup_Heater_Screen 36AC                                 _do_update_pwm 31C4  
                              OpenUSART@spbrg 00CD                                   ??_init_UART 00D0  
                                    isdigit@c 00CF                __end_of_DS3231_Read_Alarm_Time 4584  
                                 ??_read_volt 00E8                                     spiwrite@x 00CD  
                                    intlevel2 0000                                ?_fillRectangle 00D4  
                       __end_of_Decrease_Time 3AE8                      _Update_Setup_Time_Screen 1C34  
                            ___lwmod@dividend 00D4                         __end_of_write_command 4CD8  
                             fillScreen@color 00E0                         _DS3231_Turn_Off_Alarm 4172  
               DS3231_Write_Alarm_Time@Device 017A                       do_update_pwm@duty_cycle 016D  
                      __end_of_get_duty_cycle 3D34                        __size_of_Increase_Time 00B6  
                    _Select_Heater_Temp_Field 004D                                fillRectangle@h 00D6  
                              fillRectangle@w 00D5                                fillRectangle@x 00DF  
                              fillRectangle@y 00D4                       ??_Exit_Setup_Alarm_Time 00EA  
                              ?_drawFastVLine 00D4                                      printf@ap 015D  
                    ??_Exit_Setup_Heater_Temp 00EA                           __end_of_Do_Beep_Bad 4C44  
                                ??_write_data 00CF                                    _TIMER1_isr 4DE8  
                               fillRect@color 00E2                       _DS3231_Write_Alarm_Time 3D34  
                              ?_do_update_pwm 0001                               ___lwmod@divisor 00D6  
                                    strcpy@cp 00D1                                      strlen@cp 00D1  
                                    strcpy@to 00CD                         I2C_Write_Cmd_Only@Cmd 00CF  
                             ___lwmod@counter 00D8                                  _setup_minute 00FC  
                                _setup_second 00FE                       __size_of_Init_Interrupt 0024  
                       __end_of_setAddrWindow 452E                         __end_of_Do_Setup_Time 30CE  
                          fillRectangle@color 00D7                               ??_Toggle_Heater 00CD  
                           do_update_pwm@dc_I 016E                             do_update_pwm@dc_f 016A  
                               drawChar@color 015A                                   _setup_month 00FD  
                              Set_RPM_RGB@rpm 00CD                            __end_of_write_data 4CC4  
                   __size_of_force_nec_state0 0008                                  drawChar@line 015F  
                               ?_get_full_ADC 00CD                      ??_check_for_button_input 00E7  
                                drawChar@size 015E             __size_of_I2C_Write_Cmd_Write_Data 0028  
                        __size_of_DS1621_Init 002A                     ?_I2C_Write_Cmd_Write_Data 00CF  
                        __size_of_DS3231_Init 00D6                               ?_get_duty_cycle 00CD  
               __size_of_DS3231_Turn_On_Alarm 006C        __end_of_Update_Setup_Alarm_Time_Screen 2EB8  
     __size_of_Update_Setup_Alarm_Time_Screen 011A                _Update_Setup_Alarm_Time_Screen 2D9E  
